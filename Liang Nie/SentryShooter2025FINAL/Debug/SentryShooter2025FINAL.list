
SentryShooter2025FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  08013838  08013838  00014838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142d4  080142d4  00016210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080142d4  080142d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142dc  080142dc  00016210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142dc  080142dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080142e0  080142e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080142e4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016210  2**0
                  CONTENTS
 10 .bss          000057c8  20000210  20000210  00016210  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200059d8  200059d8  00016210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY
 13 .debug_info   000276bd  00000000  00000000  00016240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005411  00000000  00000000  0003d8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002288  00000000  00000000  00042d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae3  00000000  00000000  00044f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002674f  00000000  00000000  00046a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000266c1  00000000  00000000  0006d1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4119  00000000  00000000  0009388b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001779a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a394  00000000  00000000  001779e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00181d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013820 	.word	0x08013820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08013820 	.word	0x08013820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000f7e:	e003      	b.n	8000f88 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f84:	f000 f80a 	bl	8000f9c <BMI088_delay_us>
    while(ms--)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	80fa      	strh	r2, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f6      	bne.n	8000f80 <BMI088_delay_ms+0xc>
    }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	22a8      	movs	r2, #168	@ 0xa8
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d0f8      	beq.n	8000fd0 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d206      	bcs.n	8000ff4 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e007      	b.n	8001004 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4413      	add	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	d200      	bcs.n	8001012 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8001010:	e7de      	b.n	8000fd0 <BMI088_delay_us+0x34>
            {
                break;
 8001012:	bf00      	nop
            }
        }
    }


}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e010 	.word	0xe000e010

08001024 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <BMI088_ACCEL_NS_L+0x18>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <BMI088_ACCEL_NS_L+0x1c>)
 800102e:	8811      	ldrh	r1, [r2, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f008 ffb4 	bl	8009fa0 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <BMI088_ACCEL_NS_H+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <BMI088_ACCEL_NS_H+0x1c>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f008 ffa4 	bl	8009fa0 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <BMI088_GYRO_NS_L+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <BMI088_GYRO_NS_L+0x1c>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f008 ff94 	bl	8009fa0 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	2000000c 	.word	0x2000000c

08001084 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <BMI088_GYRO_NS_H+0x18>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <BMI088_GYRO_NS_H+0x1c>)
 800108e:	8811      	ldrh	r1, [r2, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f008 ff84 	bl	8009fa0 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80010ae:	f107 020f 	add.w	r2, r7, #15
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <BMI088_read_write_byte+0x28>)
 80010be:	f009 fded 	bl	800ac9c <HAL_SPI_TransmitReceive>
    return rx_data;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000ab4 	.word	0x20000ab4

080010d0 <BMI088_gyro_init>:
    }
    return BMI088_NO_ERROR;
}

uint8_t BMI088_gyro_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010de:	f7ff ffc1 	bl	8001064 <BMI088_GYRO_NS_L>
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	4619      	mov	r1, r3
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f9c8 	bl	800147c <BMI088_read_single_reg>
 80010ec:	f7ff ffca 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010f0:	2096      	movs	r0, #150	@ 0x96
 80010f2:	f7ff ff53 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010f6:	f7ff ffb5 	bl	8001064 <BMI088_GYRO_NS_L>
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	4619      	mov	r1, r3
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f9bc 	bl	800147c <BMI088_read_single_reg>
 8001104:	f7ff ffbe 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001108:	2096      	movs	r0, #150	@ 0x96
 800110a:	f7ff ff47 	bl	8000f9c <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800110e:	f7ff ffa9 	bl	8001064 <BMI088_GYRO_NS_L>
 8001112:	21b6      	movs	r1, #182	@ 0xb6
 8001114:	2014      	movs	r0, #20
 8001116:	f000 f99d 	bl	8001454 <BMI088_write_single_reg>
 800111a:	f7ff ffb3 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800111e:	2050      	movs	r0, #80	@ 0x50
 8001120:	f7ff ff28 	bl	8000f74 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001124:	f7ff ff9e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	4619      	mov	r1, r3
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f9a5 	bl	800147c <BMI088_read_single_reg>
 8001132:	f7ff ffa7 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001136:	2096      	movs	r0, #150	@ 0x96
 8001138:	f7ff ff30 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800113c:	f7ff ff92 	bl	8001064 <BMI088_GYRO_NS_L>
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f999 	bl	800147c <BMI088_read_single_reg>
 800114a:	f7ff ff9b 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800114e:	2096      	movs	r0, #150	@ 0x96
 8001150:	f7ff ff24 	bl	8000f9c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d001      	beq.n	800115e <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	e049      	b.n	80011f2 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e042      	b.n	80011ea <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001164:	f7ff ff7e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4924      	ldr	r1, [pc, #144]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	440b      	add	r3, r1
 8001174:	7818      	ldrb	r0, [r3, #0]
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4920      	ldr	r1, [pc, #128]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f000 f964 	bl	8001454 <BMI088_write_single_reg>
 800118c:	f7ff ff7a 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001190:	2096      	movs	r0, #150	@ 0x96
 8001192:	f7ff ff03 	bl	8000f9c <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8001196:	f7ff ff65 	bl	8001064 <BMI088_GYRO_NS_L>
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4917      	ldr	r1, [pc, #92]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	1dba      	adds	r2, r7, #6
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f965 	bl	800147c <BMI088_read_single_reg>
 80011b2:	f7ff ff67 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011b6:	2096      	movs	r0, #150	@ 0x96
 80011b8:	f7ff fef0 	bl	8000f9c <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	490f      	ldr	r1, [pc, #60]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	3301      	adds	r3, #1
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d008      	beq.n	80011e4 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4909      	ldr	r1, [pc, #36]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	440b      	add	r3, r1
 80011de:	3302      	adds	r3, #2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	e006      	b.n	80011f2 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d9b9      	bls.n	8001164 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <IMU_get_gyro>:
float IMU_get_gyro(uint8_t axis) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    BMI088_read(gyro, accel, &temp);
 800120a:	4a10      	ldr	r2, [pc, #64]	@ (800124c <IMU_get_gyro+0x4c>)
 800120c:	4910      	ldr	r1, [pc, #64]	@ (8001250 <IMU_get_gyro+0x50>)
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <IMU_get_gyro+0x54>)
 8001210:	f000 f836 	bl	8001280 <BMI088_read>
    if(axis == 0){
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <IMU_get_gyro+0x20>
        return (gyro[0]);
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <IMU_get_gyro+0x54>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	e00d      	b.n	800123c <IMU_get_gyro+0x3c>
    } else if (axis == 1) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <IMU_get_gyro+0x2c>
        return (gyro[1]);
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <IMU_get_gyro+0x54>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	e007      	b.n	800123c <IMU_get_gyro+0x3c>
    } else if (axis == 2) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d102      	bne.n	8001238 <IMU_get_gyro+0x38>
        return (gyro[2]);
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <IMU_get_gyro+0x54>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	e001      	b.n	800123c <IMU_get_gyro+0x3c>
    } else {
        return 0;
 8001238:	f04f 0300 	mov.w	r3, #0
    }
}
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000244 	.word	0x20000244
 8001250:	20000238 	.word	0x20000238
 8001254:	2000022c 	.word	0x2000022c

08001258 <IMU_get_temp>:
        return accel[2];
    } else {
        return 0;
    }
}
float IMU_get_temp(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 800125c:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <IMU_get_temp+0x1c>)
 800125e:	4906      	ldr	r1, [pc, #24]	@ (8001278 <IMU_get_temp+0x20>)
 8001260:	4806      	ldr	r0, [pc, #24]	@ (800127c <IMU_get_temp+0x24>)
 8001262:	f000 f80d 	bl	8001280 <BMI088_read>
	return temp;
 8001266:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <IMU_get_temp+0x1c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
}
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000244 	.word	0x20000244
 8001278:	20000238 	.word	0x20000238
 800127c:	2000022c 	.word	0x2000022c

08001280 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8001296:	f7ff fec5 	bl	8001024 <BMI088_ACCEL_NS_L>
 800129a:	2092      	movs	r0, #146	@ 0x92
 800129c:	f7ff ff02 	bl	80010a4 <BMI088_read_write_byte>
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2206      	movs	r2, #6
 80012a6:	4619      	mov	r1, r3
 80012a8:	2012      	movs	r0, #18
 80012aa:	f000 f8ff 	bl	80014ac <BMI088_read_muli_reg>
 80012ae:	f7ff fec9 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80012b2:	7d7b      	ldrb	r3, [r7, #21]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7d3b      	ldrb	r3, [r7, #20]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80012c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b5f      	ldr	r3, [pc, #380]	@ (800144c <BMI088_read+0x1cc>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80012ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <BMI088_read+0x1cc>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3304      	adds	r3, #4
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800130c:	7e7b      	ldrb	r3, [r7, #25]
 800130e:	b21b      	sxth	r3, r3
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7e3b      	ldrb	r3, [r7, #24]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800131c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	4b48      	ldr	r3, [pc, #288]	@ (800144c <BMI088_read+0x1cc>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3308      	adds	r3, #8
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800133a:	f7ff fe93 	bl	8001064 <BMI088_GYRO_NS_L>
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2208      	movs	r2, #8
 8001344:	4619      	mov	r1, r3
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f8b0 	bl	80014ac <BMI088_read_muli_reg>
 800134c:	f7ff fe9a 	bl	8001084 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8001350:	7d3b      	ldrb	r3, [r7, #20]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	d143      	bne.n	80013de <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	b21b      	sxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001366:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <BMI088_read+0x1d0>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001382:	7e7b      	ldrb	r3, [r7, #25]
 8001384:	b21b      	sxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001392:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <BMI088_read+0x1d0>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3304      	adds	r3, #4
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80013b0:	7efb      	ldrb	r3, [r7, #27]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7ebb      	ldrb	r3, [r7, #26]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <BMI088_read+0x1d0>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3308      	adds	r3, #8
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80013de:	f7ff fe21 	bl	8001024 <BMI088_ACCEL_NS_L>
 80013e2:	20a2      	movs	r0, #162	@ 0xa2
 80013e4:	f7ff fe5e 	bl	80010a4 <BMI088_read_write_byte>
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2202      	movs	r2, #2
 80013ee:	4619      	mov	r1, r3
 80013f0:	2022      	movs	r0, #34	@ 0x22
 80013f2:	f000 f85b 	bl	80014ac <BMI088_read_muli_reg>
 80013f6:	f7ff fe25 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	b21a      	sxth	r2, r3
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800140e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001416:	db04      	blt.n	8001422 <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 8001418:	8bfb      	ldrh	r3, [r7, #30]
 800141a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800141e:	b29b      	uxth	r3, r3
 8001420:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001422:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800143a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a00 	vstr	s15, [r3]
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000010 	.word	0x20000010
 8001450:	20000014 	.word	0x20000014

08001454 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe1c 	bl	80010a4 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe18 	bl	80010a4 <BMI088_read_write_byte>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe07 	bl	80010a4 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8001496:	2055      	movs	r0, #85	@ 0x55
 8001498:	f7ff fe04 	bl	80010a4 <BMI088_read_write_byte>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fded 	bl	80010a4 <BMI088_read_write_byte>

    while (len != 0)
 80014ca:	e00c      	b.n	80014e6 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 80014cc:	2055      	movs	r0, #85	@ 0x55
 80014ce:	f7ff fde9 	bl	80010a4 <BMI088_read_write_byte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	701a      	strb	r2, [r3, #0]
        buf++;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
        len--;
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ef      	bne.n	80014cc <BMI088_read_muli_reg+0x20>
    }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 80014fc:	f002 f918 	bl	8003730 <getDR16_S2>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d13b      	bne.n	800157e <CAL_Update+0x86>
		isWPressed = getDR16_W();
 8001506:	f002 f937 	bl	8003778 <getDR16_W>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b90      	ldr	r3, [pc, #576]	@ (8001750 <CAL_Update+0x258>)
 8001510:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 8001512:	f002 f94d 	bl	80037b0 <getDR16_A>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b8e      	ldr	r3, [pc, #568]	@ (8001754 <CAL_Update+0x25c>)
 800151c:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 800151e:	f002 f939 	bl	8003794 <getDR16_S>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <CAL_Update+0x260>)
 8001528:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 800152a:	f002 f94f 	bl	80037cc <getDR16_D>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b8a      	ldr	r3, [pc, #552]	@ (800175c <CAL_Update+0x264>)
 8001534:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 8001536:	f002 f957 	bl	80037e8 <getDR16_MouseX>
 800153a:	4603      	mov	r3, r0
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001550:	ee17 3a90 	vmov	r3, s15
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b82      	ldr	r3, [pc, #520]	@ (8001760 <CAL_Update+0x268>)
 8001558:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 800155a:	f002 f951 	bl	8003800 <getDR16_MouseY>
 800155e:	4603      	mov	r3, r0
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001574:	ee17 3a90 	vmov	r3, s15
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b7a      	ldr	r3, [pc, #488]	@ (8001764 <CAL_Update+0x26c>)
 800157c:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 800157e:	4b74      	ldr	r3, [pc, #464]	@ (8001750 <CAL_Update+0x258>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d115      	bne.n	80015b2 <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 8001586:	4b78      	ldr	r3, [pc, #480]	@ (8001768 <CAL_Update+0x270>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b29a      	uxth	r2, r3
 800158e:	2305      	movs	r3, #5
 8001590:	b29b      	uxth	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <CAL_Update+0x270>)
 800159a:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 800159c:	4b72      	ldr	r3, [pc, #456]	@ (8001768 <CAL_Update+0x270>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80015a6:	dd1c      	ble.n	80015e2 <CAL_Update+0xea>
			wCounter = 660;
 80015a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <CAL_Update+0x270>)
 80015aa:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	e017      	b.n	80015e2 <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 80015b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001768 <CAL_Update+0x270>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd0a      	ble.n	80015d2 <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 80015bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <CAL_Update+0x270>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	230a      	movs	r3, #10
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b66      	ldr	r3, [pc, #408]	@ (8001768 <CAL_Update+0x270>)
 80015d0:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <CAL_Update+0x270>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da02      	bge.n	80015e2 <CAL_Update+0xea>
			wCounter = 0;
 80015dc:	4b62      	ldr	r3, [pc, #392]	@ (8001768 <CAL_Update+0x270>)
 80015de:	2200      	movs	r2, #0
 80015e0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <CAL_Update+0x264>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d115      	bne.n	8001616 <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 80015ea:	4b60      	ldr	r3, [pc, #384]	@ (800176c <CAL_Update+0x274>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2305      	movs	r3, #5
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <CAL_Update+0x274>)
 80015fe:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 8001600:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <CAL_Update+0x274>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800160a:	dd1c      	ble.n	8001646 <CAL_Update+0x14e>
			dCounter = 660;
 800160c:	4b57      	ldr	r3, [pc, #348]	@ (800176c <CAL_Update+0x274>)
 800160e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	e017      	b.n	8001646 <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 8001616:	4b55      	ldr	r3, [pc, #340]	@ (800176c <CAL_Update+0x274>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	dd0a      	ble.n	8001636 <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 8001620:	4b52      	ldr	r3, [pc, #328]	@ (800176c <CAL_Update+0x274>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b29a      	uxth	r2, r3
 8001628:	230a      	movs	r3, #10
 800162a:	b29b      	uxth	r3, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <CAL_Update+0x274>)
 8001634:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 8001636:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <CAL_Update+0x274>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da02      	bge.n	8001646 <CAL_Update+0x14e>
			dCounter = 0;
 8001640:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <CAL_Update+0x274>)
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <CAL_Update+0x260>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d115      	bne.n	800167a <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <CAL_Update+0x278>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	b29a      	uxth	r2, r3
 8001656:	2305      	movs	r3, #5
 8001658:	b29b      	uxth	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21a      	sxth	r2, r3
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <CAL_Update+0x278>)
 8001662:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 8001664:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <CAL_Update+0x278>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800166e:	dd1c      	ble.n	80016aa <CAL_Update+0x1b2>
			sCounter = 660;
 8001670:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <CAL_Update+0x278>)
 8001672:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	e017      	b.n	80016aa <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <CAL_Update+0x278>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd0a      	ble.n	800169a <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <CAL_Update+0x278>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b29a      	uxth	r2, r3
 800168c:	230a      	movs	r3, #10
 800168e:	b29b      	uxth	r3, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	4b36      	ldr	r3, [pc, #216]	@ (8001770 <CAL_Update+0x278>)
 8001698:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 800169a:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <CAL_Update+0x278>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da02      	bge.n	80016aa <CAL_Update+0x1b2>
			sCounter = 0;
 80016a4:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <CAL_Update+0x278>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <CAL_Update+0x25c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d115      	bne.n	80016de <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <CAL_Update+0x27c>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	2305      	movs	r3, #5
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <CAL_Update+0x27c>)
 80016c6:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <CAL_Update+0x27c>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016d2:	dd1c      	ble.n	800170e <CAL_Update+0x216>
			aCounter = 660;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <CAL_Update+0x27c>)
 80016d6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016da:	801a      	strh	r2, [r3, #0]
 80016dc:	e017      	b.n	800170e <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <CAL_Update+0x27c>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0a      	ble.n	80016fe <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <CAL_Update+0x27c>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	230a      	movs	r3, #10
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <CAL_Update+0x27c>)
 80016fc:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <CAL_Update+0x27c>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da02      	bge.n	800170e <CAL_Update+0x216>
			aCounter = 0;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <CAL_Update+0x27c>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <CAL_Update+0x268>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001718:	dd04      	ble.n	8001724 <CAL_Update+0x22c>
		mouseX = 660;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <CAL_Update+0x268>)
 800171c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	e009      	b.n	8001738 <CAL_Update+0x240>
	}else if(mouseX<-660){
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <CAL_Update+0x268>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800172e:	da03      	bge.n	8001738 <CAL_Update+0x240>
		mouseX = -660;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <CAL_Update+0x268>)
 8001732:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001736:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <CAL_Update+0x26c>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001742:	dd19      	ble.n	8001778 <CAL_Update+0x280>
		mouseY = 660;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <CAL_Update+0x26c>)
 8001746:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	e01e      	b.n	800178c <CAL_Update+0x294>
 800174e:	bf00      	nop
 8001750:	20000288 	.word	0x20000288
 8001754:	20000289 	.word	0x20000289
 8001758:	2000028a 	.word	0x2000028a
 800175c:	2000028b 	.word	0x2000028b
 8001760:	20000294 	.word	0x20000294
 8001764:	20000296 	.word	0x20000296
 8001768:	2000028c 	.word	0x2000028c
 800176c:	20000292 	.word	0x20000292
 8001770:	20000290 	.word	0x20000290
 8001774:	2000028e 	.word	0x2000028e
	}else if(mouseY<-660){
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <CAL_Update+0x3c0>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001782:	da03      	bge.n	800178c <CAL_Update+0x294>
		mouseY = -660;
 8001784:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <CAL_Update+0x3c0>)
 8001786:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800178a:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 800178c:	f001 ff52 	bl	8003634 <getDR16_CH0>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <CAL_Update+0x3c4>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <CAL_Update+0x3c8>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <CAL_Update+0x3cc>)
 80017b0:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 80017b2:	f001 ff5b 	bl	800366c <getDR16_CH1>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <CAL_Update+0x3d0>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <CAL_Update+0x3d4>)
 80017c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <CAL_Update+0x3d8>)
 80017d6:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 80017d8:	f001 ff64 	bl	80036a4 <getDR16_CH2>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <CAL_Update+0x3dc>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <CAL_Update+0x3e0>)
 80017f0:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 80017f2:	f001 ff73 	bl	80036dc <getDR16_CH3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <CAL_Update+0x3c0>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21a      	sxth	r2, r3
 8001808:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <CAL_Update+0x3e4>)
 800180a:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <CAL_Update+0x3cc>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001816:	dd04      	ble.n	8001822 <CAL_Update+0x32a>
		CAL_CH0 = 660;
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <CAL_Update+0x3cc>)
 800181a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	e009      	b.n	8001836 <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <CAL_Update+0x3cc>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800182c:	da03      	bge.n	8001836 <CAL_Update+0x33e>
		CAL_CH0 = -660;
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <CAL_Update+0x3cc>)
 8001830:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001834:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <CAL_Update+0x3d8>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001840:	dd04      	ble.n	800184c <CAL_Update+0x354>
		CAL_CH1 = 660;
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <CAL_Update+0x3d8>)
 8001844:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e009      	b.n	8001860 <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <CAL_Update+0x3d8>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001856:	da03      	bge.n	8001860 <CAL_Update+0x368>
		CAL_CH1 = -660;
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <CAL_Update+0x3d8>)
 800185a:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800185e:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <CAL_Update+0x3e0>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800186a:	dd04      	ble.n	8001876 <CAL_Update+0x37e>
		CAL_CH2 = 660;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <CAL_Update+0x3e0>)
 800186e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	e009      	b.n	800188a <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <CAL_Update+0x3e0>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001880:	da03      	bge.n	800188a <CAL_Update+0x392>
		CAL_CH2 = -660;
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <CAL_Update+0x3e0>)
 8001884:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001888:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <CAL_Update+0x3e4>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001894:	dd04      	ble.n	80018a0 <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <CAL_Update+0x3e4>)
 8001898:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800189c:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 800189e:	e009      	b.n	80018b4 <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <CAL_Update+0x3e4>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80018aa:	da03      	bge.n	80018b4 <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <CAL_Update+0x3e4>)
 80018ae:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80018b2:	801a      	strh	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000296 	.word	0x20000296
 80018bc:	20000292 	.word	0x20000292
 80018c0:	2000028e 	.word	0x2000028e
 80018c4:	20000248 	.word	0x20000248
 80018c8:	2000028c 	.word	0x2000028c
 80018cc:	20000290 	.word	0x20000290
 80018d0:	2000024a 	.word	0x2000024a
 80018d4:	20000294 	.word	0x20000294
 80018d8:	2000024c 	.word	0x2000024c
 80018dc:	2000024e 	.word	0x2000024e

080018e0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	4603      	mov	r3, r0
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 8001912:	f001 ff0d 	bl	8003730 <getDR16_S2>
 8001916:	4603      	mov	r3, r0
 8001918:	2b03      	cmp	r3, #3
 800191a:	d004      	beq.n	8001926 <PC_CONTROL_RxEventCallback+0x32>
 800191c:	f001 ff08 	bl	8003730 <getDR16_S2>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d16a      	bne.n	80019fc <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 8001926:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <PC_CONTROL_RxEventCallback+0x110>)
 8001946:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 8001948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <PC_CONTROL_RxEventCallback+0x114>)
 8001968:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <PC_CONTROL_RxEventCallback+0x118>)
 8001970:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 8001972:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <PC_CONTROL_RxEventCallback+0x11c>)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 8001978:	4a26      	ldr	r2, [pc, #152]	@ (8001a14 <PC_CONTROL_RxEventCallback+0x120>)
 800197a:	7e3b      	ldrb	r3, [r7, #24]
 800197c:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 800197e:	4a26      	ldr	r2, [pc, #152]	@ (8001a18 <PC_CONTROL_RxEventCallback+0x124>)
 8001980:	7f3b      	ldrb	r3, [r7, #28]
 8001982:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 8001984:	4a25      	ldr	r2, [pc, #148]	@ (8001a1c <PC_CONTROL_RxEventCallback+0x128>)
 8001986:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800198a:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 800198c:	4a24      	ldr	r2, [pc, #144]	@ (8001a20 <PC_CONTROL_RxEventCallback+0x12c>)
 800198e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001992:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <PC_CONTROL_RxEventCallback+0x130>)
 8001996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800199a:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 800199c:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <PC_CONTROL_RxEventCallback+0x134>)
 800199e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019a2:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 80019a4:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <PC_CONTROL_RxEventCallback+0x138>)
 80019a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019aa:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 80019ac:	4a20      	ldr	r2, [pc, #128]	@ (8001a30 <PC_CONTROL_RxEventCallback+0x13c>)
 80019ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019b2:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <PC_CONTROL_RxEventCallback+0x140>)
 80019b6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80019ba:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <PC_CONTROL_RxEventCallback+0x144>)
 80019be:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80019c2:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 80019c4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <PC_CONTROL_RxEventCallback+0x148>)
 80019c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80019ca:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <PC_CONTROL_RxEventCallback+0x14c>)
 80019ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80019d2:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <PC_CONTROL_RxEventCallback+0x150>)
 80019d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80019da:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 80019dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <PC_CONTROL_RxEventCallback+0x154>)
 80019de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019e2:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <PC_CONTROL_RxEventCallback+0x158>)
 80019e6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80019ea:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 80019ec:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <PC_CONTROL_RxEventCallback+0x15c>)
 80019ee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80019f2:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <PC_CONTROL_RxEventCallback+0x160>)
 80019f6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80019fa:	7013      	strb	r3, [r2, #0]
	}
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	20000296 	.word	0x20000296
 8001a08:	20000294 	.word	0x20000294
 8001a0c:	2000025e 	.word	0x2000025e
 8001a10:	2000025c 	.word	0x2000025c
 8001a14:	2000025d 	.word	0x2000025d
 8001a18:	20000288 	.word	0x20000288
 8001a1c:	20000289 	.word	0x20000289
 8001a20:	2000028a 	.word	0x2000028a
 8001a24:	2000028b 	.word	0x2000028b
 8001a28:	20000250 	.word	0x20000250
 8001a2c:	20000251 	.word	0x20000251
 8001a30:	20000252 	.word	0x20000252
 8001a34:	20000253 	.word	0x20000253
 8001a38:	20000254 	.word	0x20000254
 8001a3c:	20000255 	.word	0x20000255
 8001a40:	20000256 	.word	0x20000256
 8001a44:	20000257 	.word	0x20000257
 8001a48:	20000258 	.word	0x20000258
 8001a4c:	20000259 	.word	0x20000259
 8001a50:	2000025a 	.word	0x2000025a
 8001a54:	2000025b 	.word	0x2000025b

08001a58 <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	717b      	strb	r3, [r7, #5]
 8001a72:	4613      	mov	r3, r2
 8001a74:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <GAME_STATUS_RxEventCallback+0x54>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <GAME_STATUS_RxEventCallback+0x58>)
 8001a80:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[1],&game_type,1);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[0],&current_stage,1);
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	723b      	strb	r3, [r7, #8]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f240 2111 	movw	r1, #529	@ 0x211
 8001aa0:	f000 fe02 	bl	80026a8 <CAN_transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	2000025f 	.word	0x2000025f
 8001ab0:	20000260 	.word	0x20000260

08001ab4 <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	460b      	mov	r3, r1
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <ROBOT_STATUS_RxEventCallback+0x74>)
 8001ad6:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 8001ad8:	79ba      	ldrb	r2, [r7, #6]
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <ROBOT_STATUS_RxEventCallback+0x78>)
 8001adc:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 8001ade:	8c3a      	ldrh	r2, [r7, #32]
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <ROBOT_STATUS_RxEventCallback+0x7c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 8001ae4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <ROBOT_STATUS_RxEventCallback+0x80>)
 8001ae8:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 8001aea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <ROBOT_STATUS_RxEventCallback+0x84>)
 8001aee:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 8001b02:	8c3b      	ldrh	r3, [r7, #32]
 8001b04:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 8001b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b08:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 8001b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b0c:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	461a      	mov	r2, r3
 8001b16:	f240 2112 	movw	r1, #530	@ 0x212
 8001b1a:	f000 fdc5 	bl	80026a8 <CAN_transmit>
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000026a 	.word	0x2000026a
 8001b2c:	2000026b 	.word	0x2000026b
 8001b30:	2000026c 	.word	0x2000026c
 8001b34:	20000270 	.word	0x20000270
 8001b38:	2000026e 	.word	0x2000026e

08001b3c <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4604      	mov	r4, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80bb      	strh	r3, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <POWER_HEAT_DATA_RxEventCallback+0x68>)
 8001b5e:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 8001b64:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <POWER_HEAT_DATA_RxEventCallback+0x70>)
 8001b6a:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 8001b6c:	883a      	ldrh	r2, [r7, #0]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <POWER_HEAT_DATA_RxEventCallback+0x74>)
 8001b70:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 8001b88:	883b      	ldrh	r3, [r7, #0]
 8001b8a:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	461a      	mov	r2, r3
 8001b94:	f240 2113 	movw	r1, #531	@ 0x213
 8001b98:	f000 fd86 	bl	80026a8 <CAN_transmit>
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	20000262 	.word	0x20000262
 8001ba8:	20000264 	.word	0x20000264
 8001bac:	20000266 	.word	0x20000266
 8001bb0:	20000268 	.word	0x20000268

08001bb4 <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08d      	sub	sp, #52	@ 0x34
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	switch(StdId){
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 8001bc4:	d816      	bhi.n	8001bf4 <CAN_RxEventCallbackPT+0x40>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8001bcc:	f240 81f3 	bls.w	8001fb6 <CAN_RxEventCallbackPT+0x402>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	f200 81ed 	bhi.w	8001fb6 <CAN_RxEventCallbackPT+0x402>
 8001bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <CAN_RxEventCallbackPT+0x30>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c03 	.word	0x08001c03
 8001be8:	08001c17 	.word	0x08001c17
 8001bec:	08001c4f 	.word	0x08001c4f
 8001bf0:	08001c7f 	.word	0x08001c7f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f240 3201 	movw	r2, #769	@ 0x301
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f000 813a 	beq.w	8001e74 <CAN_RxEventCallbackPT+0x2c0>
			}
			break;
		}
		default:{

			break;
 8001c00:	e1d9      	b.n	8001fb6 <CAN_RxEventCallbackPT+0x402>
			memcpy(&CAL_game_type,&rxData[0],1);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	4b89      	ldr	r3, [pc, #548]	@ (8001e2c <CAN_RxEventCallbackPT+0x278>)
 8001c08:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	4b87      	ldr	r3, [pc, #540]	@ (8001e30 <CAN_RxEventCallbackPT+0x27c>)
 8001c12:	701a      	strb	r2, [r3, #0]
			break;
 8001c14:	e1d0      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
			memcpy(&CAL_robot_id,&rxData[0],1);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b86      	ldr	r3, [pc, #536]	@ (8001e34 <CAN_RxEventCallbackPT+0x280>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	4b84      	ldr	r3, [pc, #528]	@ (8001e38 <CAN_RxEventCallbackPT+0x284>)
 8001c26:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <CAN_RxEventCallbackPT+0x288>)
 8001c32:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b80      	ldr	r3, [pc, #512]	@ (8001e40 <CAN_RxEventCallbackPT+0x28c>)
 8001c3e:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3306      	adds	r3, #6
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b7e      	ldr	r3, [pc, #504]	@ (8001e44 <CAN_RxEventCallbackPT+0x290>)
 8001c4a:	801a      	strh	r2, [r3, #0]
			break;
 8001c4c:	e1b4      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b7c      	ldr	r3, [pc, #496]	@ (8001e48 <CAN_RxEventCallbackPT+0x294>)
 8001c56:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b7a      	ldr	r3, [pc, #488]	@ (8001e4c <CAN_RxEventCallbackPT+0x298>)
 8001c62:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3304      	adds	r3, #4
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b78      	ldr	r3, [pc, #480]	@ (8001e50 <CAN_RxEventCallbackPT+0x29c>)
 8001c6e:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3306      	adds	r3, #6
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b76      	ldr	r3, [pc, #472]	@ (8001e54 <CAN_RxEventCallbackPT+0x2a0>)
 8001c7a:	801a      	strh	r2, [r3, #0]
			break;
 8001c7c:	e19c      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
			uint8_t frontBackBuff[2] = {0};
 8001c7e:	2300      	movs	r3, #0
 8001c80:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			frontBackBuff[0] = rxData[0];
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2204      	movs	r2, #4
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fb77 	bl	8002388 <CAL_getBits>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 8001ca0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e58 <CAN_RxEventCallbackPT+0x2a4>)
 8001ca4:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <CAN_RxEventCallbackPT+0x2a4>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	4b68      	ldr	r3, [pc, #416]	@ (8001e58 <CAN_RxEventCallbackPT+0x2a4>)
 8001cb8:	801a      	strh	r2, [r3, #0]
			uint8_t rightLeftBuff[2] = {0};
 8001cba:	2300      	movs	r3, #0
 8001cbc:	853b      	strh	r3, [r7, #40]	@ 0x28
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fb5d 	bl	8002388 <CAL_getBits>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b25c      	sxtb	r4, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb53 	bl	8002388 <CAL_getBits>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	4323      	orrs	r3, r4
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fb42 	bl	8002388 <CAL_getBits>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 8001d0a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001d0c:	4b53      	ldr	r3, [pc, #332]	@ (8001e5c <CAN_RxEventCallbackPT+0x2a8>)
 8001d0e:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 8001d10:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <CAN_RxEventCallbackPT+0x2a8>)
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	4b4e      	ldr	r3, [pc, #312]	@ (8001e5c <CAN_RxEventCallbackPT+0x2a8>)
 8001d22:	801a      	strh	r2, [r3, #0]
			uint8_t chassisSpinBuff[2] = {0};
 8001d24:	2300      	movs	r3, #0
 8001d26:	84bb      	strh	r3, [r7, #36]	@ 0x24
			chassisSpinBuff[0] = rxData[3];
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	78db      	ldrb	r3, [r3, #3]
 8001d2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3304      	adds	r3, #4
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fb24 	bl	8002388 <CAL_getBits>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 8001d46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d48:	4b45      	ldr	r3, [pc, #276]	@ (8001e60 <CAN_RxEventCallbackPT+0x2ac>)
 8001d4a:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 8001d4c:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <CAN_RxEventCallbackPT+0x2ac>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b40      	ldr	r3, [pc, #256]	@ (8001e60 <CAN_RxEventCallbackPT+0x2ac>)
 8001d5e:	801a      	strh	r2, [r3, #0]
			uint8_t turretSpinBuff[2] = {0};
 8001d60:	2300      	movs	r3, #0
 8001d62:	843b      	strh	r3, [r7, #32]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3304      	adds	r3, #4
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fb0a 	bl	8002388 <CAL_getBits>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b25c      	sxtb	r4, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fb00 	bl	8002388 <CAL_getBits>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4323      	orrs	r3, r4
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f887 3020 	strb.w	r3, [r7, #32]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2204      	movs	r2, #4
 8001da2:	2104      	movs	r1, #4
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 faef 	bl	8002388 <CAL_getBits>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 8001db0:	8c3a      	ldrh	r2, [r7, #32]
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <CAN_RxEventCallbackPT+0x2b0>)
 8001db4:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <CAN_RxEventCallbackPT+0x2b0>)
 8001db8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dbc:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <CAN_RxEventCallbackPT+0x2b0>)
 8001dbe:	801a      	strh	r2, [r3, #0]
			uint8_t currentGyroBuff[2] = {0};
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	83bb      	strh	r3, [r7, #28]
			currentGyroBuff[0] = rxData[6];
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	799b      	ldrb	r3, [r3, #6]
 8001dc8:	773b      	strb	r3, [r7, #28]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	3307      	adds	r3, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fad7 	bl	8002388 <CAL_getBits>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 8001dde:	8bba      	ldrh	r2, [r7, #28]
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <CAN_RxEventCallbackPT+0x2b4>)
 8001de2:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <CAN_RxEventCallbackPT+0x2b4>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <CAN_RxEventCallbackPT+0x2b4>)
 8001df6:	801a      	strh	r2, [r3, #0]
			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	3307      	adds	r3, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fac0 	bl	8002388 <CAL_getBits>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <CAN_RxEventCallbackPT+0x2b8>)
 8001e0e:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	3307      	adds	r3, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2203      	movs	r2, #3
 8001e18:	2105      	movs	r1, #5
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fab4 	bl	8002388 <CAL_getBits>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <CAN_RxEventCallbackPT+0x2bc>)
 8001e26:	701a      	strb	r2, [r3, #0]
			break;
 8001e28:	e0c6      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
 8001e2a:	bf00      	nop
 8001e2c:	2000025f 	.word	0x2000025f
 8001e30:	20000260 	.word	0x20000260
 8001e34:	2000026a 	.word	0x2000026a
 8001e38:	2000026b 	.word	0x2000026b
 8001e3c:	2000026c 	.word	0x2000026c
 8001e40:	20000270 	.word	0x20000270
 8001e44:	2000026e 	.word	0x2000026e
 8001e48:	20000262 	.word	0x20000262
 8001e4c:	20000264 	.word	0x20000264
 8001e50:	20000266 	.word	0x20000266
 8001e54:	20000268 	.word	0x20000268
 8001e58:	20000272 	.word	0x20000272
 8001e5c:	20000274 	.word	0x20000274
 8001e60:	20000276 	.word	0x20000276
 8001e64:	20000278 	.word	0x20000278
 8001e68:	2000027a 	.word	0x2000027a
 8001e6c:	2000027c 	.word	0x2000027c
 8001e70:	2000027d 	.word	0x2000027d
			uint8_t targetXBuff[2] = {0};
 8001e74:	2300      	movs	r3, #0
 8001e76:	833b      	strh	r3, [r7, #24]
			targetXBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[0],0,4)<<4);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	2104      	movs	r1, #4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fa80 	bl	8002388 <CAL_getBits>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b25c      	sxtb	r4, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa77 	bl	8002388 <CAL_getBits>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	4323      	orrs	r3, r4
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	763b      	strb	r3, [r7, #24]
			targetXBuff[1] = CAL_getBits(rxData[0],4,4);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa68 	bl	8002388 <CAL_getBits>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_TargetX,targetXBuff,2);
 8001ebc:	8b3a      	ldrh	r2, [r7, #24]
 8001ebe:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <CAN_RxEventCallbackPT+0x40c>)
 8001ec0:	801a      	strh	r2, [r3, #0]
			CAL_TargetX = CAL_TargetX-320;
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <CAN_RxEventCallbackPT+0x40c>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <CAN_RxEventCallbackPT+0x40c>)
 8001ed4:	801a      	strh	r2, [r3, #0]
			uint8_t targetYBuff[2] = {0};
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	82bb      	strh	r3, [r7, #20]
			targetYBuff[0] = rxData[2];
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	753b      	strb	r3, [r7, #20]
			targetYBuff[1] = CAL_getBits(rxData[1],0,4);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa4c 	bl	8002388 <CAL_getBits>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_TargetY,targetYBuff,2);
 8001ef4:	8aba      	ldrh	r2, [r7, #20]
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <CAN_RxEventCallbackPT+0x410>)
 8001ef8:	801a      	strh	r2, [r3, #0]
			CAL_TargetY = 240 - CAL_TargetY;
 8001efa:	4b32      	ldr	r3, [pc, #200]	@ (8001fc4 <CAN_RxEventCallbackPT+0x410>)
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc4 <CAN_RxEventCallbackPT+0x410>)
 8001f0c:	801a      	strh	r2, [r3, #0]
			uint8_t targetWidthBuff[2] = {0};
 8001f0e:	2300      	movs	r3, #0
 8001f10:	823b      	strh	r3, [r7, #16]
			targetWidthBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[3],0,4)<<4);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3304      	adds	r3, #4
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fa33 	bl	8002388 <CAL_getBits>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b25c      	sxtb	r4, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fa29 	bl	8002388 <CAL_getBits>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	743b      	strb	r3, [r7, #16]
			targetWidthBuff[1] = CAL_getBits(rxData[3],4,4);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	2104      	movs	r1, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fa19 	bl	8002388 <CAL_getBits>
 8001f56:	4603      	mov	r3, r0
 8001f58:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TargetWidth,targetWidthBuff,2);
 8001f5a:	8a3a      	ldrh	r2, [r7, #16]
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <CAN_RxEventCallbackPT+0x414>)
 8001f5e:	801a      	strh	r2, [r3, #0]
			CAL_TargetWidth = CAL_TargetWidth;
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <CAN_RxEventCallbackPT+0x414>)
 8001f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <CAN_RxEventCallbackPT+0x414>)
 8001f68:	801a      	strh	r2, [r3, #0]
			uint8_t targetHeightBuff[2] = {0};
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	81bb      	strh	r3, [r7, #12]
			targetHeightBuff[0] = rxData[5];
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	795b      	ldrb	r3, [r3, #5]
 8001f72:	733b      	strb	r3, [r7, #12]
			targetHeightBuff[1] = CAL_getBits(rxData[4],0,4);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3304      	adds	r3, #4
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fa02 	bl	8002388 <CAL_getBits>
 8001f84:	4603      	mov	r3, r0
 8001f86:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_TargetHeight,targetHeightBuff,2);
 8001f88:	89ba      	ldrh	r2, [r7, #12]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <CAN_RxEventCallbackPT+0x418>)
 8001f8c:	801a      	strh	r2, [r3, #0]
			CAL_TargetHeight = CAL_TargetHeight;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <CAN_RxEventCallbackPT+0x418>)
 8001f90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f94:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <CAN_RxEventCallbackPT+0x418>)
 8001f96:	801a      	strh	r2, [r3, #0]
			if(CAL_CVSeq<255){
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <CAN_RxEventCallbackPT+0x41c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2bff      	cmp	r3, #255	@ 0xff
 8001f9e:	d006      	beq.n	8001fae <CAN_RxEventCallbackPT+0x3fa>
				CAL_CVSeq++;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <CAN_RxEventCallbackPT+0x41c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <CAN_RxEventCallbackPT+0x41c>)
 8001faa:	701a      	strb	r2, [r3, #0]
			break;
 8001fac:	e004      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
				CAL_CVSeq = 0;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <CAN_RxEventCallbackPT+0x41c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			break;
 8001fb4:	e000      	b.n	8001fb8 <CAN_RxEventCallbackPT+0x404>
			break;
 8001fb6:	bf00      	nop
		}
	}
}
 8001fb8:	bf00      	nop
 8001fba:	3734      	adds	r7, #52	@ 0x34
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	2000002a 	.word	0x2000002a
 8001fc4:	2000002c 	.word	0x2000002c
 8001fc8:	2000027e 	.word	0x2000027e
 8001fcc:	20000280 	.word	0x20000280
 8001fd0:	20000283 	.word	0x20000283

08001fd4 <UART_RxEventCallback_RM25Passthrough>:

extern UART_HandleTypeDef huart6;

void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]

	// UART_Printf(&huart6, "%X %X %X %X\r\n", RxBuff[0], RxBuff[1], RxBuff[2], RxBuff[3]);

    if(((RxBuff[0]==0xA6)&&(RxBuff[1]==0xA6))&&((RxBuff[2]==0xA5)&&(RxBuff[3]==0x09))){
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2ba6      	cmp	r3, #166	@ 0xa6
 8001fe4:	f040 80a0 	bne.w	8002128 <UART_RxEventCallback_RM25Passthrough+0x154>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2ba6      	cmp	r3, #166	@ 0xa6
 8001ff0:	f040 809a 	bne.w	8002128 <UART_RxEventCallback_RM25Passthrough+0x154>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2ba5      	cmp	r3, #165	@ 0xa5
 8001ffc:	f040 8094 	bne.w	8002128 <UART_RxEventCallback_RM25Passthrough+0x154>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3303      	adds	r3, #3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b09      	cmp	r3, #9
 8002008:	f040 808e 	bne.w	8002128 <UART_RxEventCallback_RM25Passthrough+0x154>

        memcpy(&CAL_TargetX, &RxBuff[4], 2);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3304      	adds	r3, #4
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <UART_RxEventCallback_RM25Passthrough+0x15c>)
 8002016:	801a      	strh	r2, [r3, #0]
        memcpy(&CAL_TargetY, &RxBuff[6], 2);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3306      	adds	r3, #6
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b44      	ldr	r3, [pc, #272]	@ (8002134 <UART_RxEventCallback_RM25Passthrough+0x160>)
 8002022:	801a      	strh	r2, [r3, #0]
        memcpy(&CAL_TargetWidth, &RxBuff[8], 2);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	3308      	adds	r3, #8
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <UART_RxEventCallback_RM25Passthrough+0x164>)
 800202e:	801a      	strh	r2, [r3, #0]
        memcpy(&CAL_TargetHeight, &RxBuff[10], 2);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	330a      	adds	r3, #10
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b40      	ldr	r3, [pc, #256]	@ (800213c <UART_RxEventCallback_RM25Passthrough+0x168>)
 800203a:	801a      	strh	r2, [r3, #0]
        memcpy(&CAL_TargetColour, &RxBuff[12], 1);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b3f      	ldr	r3, [pc, #252]	@ (8002140 <UART_RxEventCallback_RM25Passthrough+0x16c>)
 8002044:	701a      	strb	r2, [r3, #0]

        CAL_TargetX = CAL_TargetX - 320 + (CAL_TargetWidth * 0.5);
 8002046:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <UART_RxEventCallback_RM25Passthrough+0x15c>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa67 	bl	8000524 <__aeabi_i2d>
 8002056:	4604      	mov	r4, r0
 8002058:	460d      	mov	r5, r1
 800205a:	4b37      	ldr	r3, [pc, #220]	@ (8002138 <UART_RxEventCallback_RM25Passthrough+0x164>)
 800205c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa5f 	bl	8000524 <__aeabi_i2d>
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <UART_RxEventCallback_RM25Passthrough+0x170>)
 800206c:	f7fe fac4 	bl	80005f8 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe f908 	bl	800028c <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd68 	bl	8000b58 <__aeabi_d2iz>
 8002088:	4603      	mov	r3, r0
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <UART_RxEventCallback_RM25Passthrough+0x15c>)
 800208e:	801a      	strh	r2, [r3, #0]
        CAL_TargetY = 240 - CAL_TargetY;
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <UART_RxEventCallback_RM25Passthrough+0x160>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <UART_RxEventCallback_RM25Passthrough+0x160>)
 80020a2:	801a      	strh	r2, [r3, #0]


        if (((CAL_TargetX != CAL_LastTargetX) || (CAL_TargetY != CAL_LastTargetY)) || ((CAL_TargetWidth != CAL_LastTargetWidth) || (CAL_TargetHeight != CAL_LastTargetHeight))) {
 80020a4:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <UART_RxEventCallback_RM25Passthrough+0x15c>)
 80020a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <UART_RxEventCallback_RM25Passthrough+0x174>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d117      	bne.n	80020e4 <UART_RxEventCallback_RM25Passthrough+0x110>
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <UART_RxEventCallback_RM25Passthrough+0x160>)
 80020b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <UART_RxEventCallback_RM25Passthrough+0x178>)
 80020bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10f      	bne.n	80020e4 <UART_RxEventCallback_RM25Passthrough+0x110>
 80020c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <UART_RxEventCallback_RM25Passthrough+0x164>)
 80020c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020ca:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <UART_RxEventCallback_RM25Passthrough+0x17c>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <UART_RxEventCallback_RM25Passthrough+0x110>
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <UART_RxEventCallback_RM25Passthrough+0x168>)
 80020d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020da:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <UART_RxEventCallback_RM25Passthrough+0x180>)
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d00d      	beq.n	8002100 <UART_RxEventCallback_RM25Passthrough+0x12c>
			if(CAL_CVSeq<255){
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <UART_RxEventCallback_RM25Passthrough+0x184>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2bff      	cmp	r3, #255	@ 0xff
 80020ea:	d006      	beq.n	80020fa <UART_RxEventCallback_RM25Passthrough+0x126>
				CAL_CVSeq++;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <UART_RxEventCallback_RM25Passthrough+0x184>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <UART_RxEventCallback_RM25Passthrough+0x184>)
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <UART_RxEventCallback_RM25Passthrough+0x12c>
			}else{
				CAL_CVSeq=0;
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <UART_RxEventCallback_RM25Passthrough+0x184>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			}
        }

		// UART_Printf(&huart6, "%d, %d, %d, %d\r\n", CAL_TargetX, CAL_TargetY, CAL_TargetWidth, CAL_TargetHeight);
        CAL_LastTargetX = CAL_TargetX;
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <UART_RxEventCallback_RM25Passthrough+0x15c>)
 8002102:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <UART_RxEventCallback_RM25Passthrough+0x174>)
 8002108:	801a      	strh	r2, [r3, #0]
        CAL_LastTargetY = CAL_TargetY;
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <UART_RxEventCallback_RM25Passthrough+0x160>)
 800210c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <UART_RxEventCallback_RM25Passthrough+0x178>)
 8002112:	801a      	strh	r2, [r3, #0]
        CAL_LastTargetWidth = CAL_TargetWidth;
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <UART_RxEventCallback_RM25Passthrough+0x164>)
 8002116:	f9b3 2000 	ldrsh.w	r2, [r3]
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <UART_RxEventCallback_RM25Passthrough+0x17c>)
 800211c:	801a      	strh	r2, [r3, #0]
        CAL_LastTargetHeight = CAL_TargetHeight;
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <UART_RxEventCallback_RM25Passthrough+0x168>)
 8002120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <UART_RxEventCallback_RM25Passthrough+0x180>)
 8002126:	801a      	strh	r2, [r3, #0]


    }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	2000002a 	.word	0x2000002a
 8002134:	2000002c 	.word	0x2000002c
 8002138:	2000027e 	.word	0x2000027e
 800213c:	20000280 	.word	0x20000280
 8002140:	20000282 	.word	0x20000282
 8002144:	3fe00000 	.word	0x3fe00000
 8002148:	2000002e 	.word	0x2000002e
 800214c:	20000030 	.word	0x20000030
 8002150:	20000284 	.word	0x20000284
 8002154:	20000286 	.word	0x20000286
 8002158:	20000283 	.word	0x20000283

0800215c <CAL_SendChassisCommands>:

//frontback12b,rightleft12b,chassisspin12b,turretspin12b,currentgyro12b,trigger1b,firemode3b
void CAL_SendChassisCommands(int16_t frontBack, int16_t rightLeft, int16_t chassisSpin, int16_t turretSpin,int16_t currentGyro, uint8_t triggerPressed,uint8_t fireMode){
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b08b      	sub	sp, #44	@ 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	4604      	mov	r4, r0
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4623      	mov	r3, r4
 800216c:	80fb      	strh	r3, [r7, #6]
 800216e:	4603      	mov	r3, r0
 8002170:	80bb      	strh	r3, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
 8002176:	4613      	mov	r3, r2
 8002178:	803b      	strh	r3, [r7, #0]
	uint8_t txData[8] = {0};
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]

	//prep values for bit management
	frontBack = frontBack+2047;
 8002184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800218e:	b29b      	uxth	r3, r3
 8002190:	b21b      	sxth	r3, r3
 8002192:	80fb      	strh	r3, [r7, #6]
	if(frontBack<0){
 8002194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da01      	bge.n	80021a0 <CAL_SendChassisCommands+0x44>
		frontBack=0;
 800219c:	2300      	movs	r3, #0
 800219e:	80fb      	strh	r3, [r7, #6]
	}
	if(frontBack>4095){
 80021a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a8:	db02      	blt.n	80021b0 <CAL_SendChassisCommands+0x54>
		frontBack=4095;
 80021aa:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80021ae:	80fb      	strh	r3, [r7, #6]
	}
	uint8_t frontBackBuff[2] = {0};
 80021b0:	2300      	movs	r3, #0
 80021b2:	83bb      	strh	r3, [r7, #28]
	memcpy(frontBackBuff,&frontBack,2);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	83bb      	strh	r3, [r7, #28]

	rightLeft = rightLeft+2047;
 80021b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	80bb      	strh	r3, [r7, #4]
	if(rightLeft<0){
 80021c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da01      	bge.n	80021d4 <CAL_SendChassisCommands+0x78>
	rightLeft=0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	80bb      	strh	r3, [r7, #4]
	}
	if(rightLeft>4095){
 80021d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021dc:	db02      	blt.n	80021e4 <CAL_SendChassisCommands+0x88>
		rightLeft=4095;
 80021de:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80021e2:	80bb      	strh	r3, [r7, #4]
	}
	uint8_t rightLeftBuff[2] = {0};
 80021e4:	2300      	movs	r3, #0
 80021e6:	833b      	strh	r3, [r7, #24]
	memcpy(rightLeftBuff,&rightLeft,2);
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	833b      	strh	r3, [r7, #24]

	chassisSpin = chassisSpin+2047;
 80021ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	807b      	strh	r3, [r7, #2]
	if(chassisSpin<0){
 80021fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da01      	bge.n	8002208 <CAL_SendChassisCommands+0xac>
		chassisSpin=0;
 8002204:	2300      	movs	r3, #0
 8002206:	807b      	strh	r3, [r7, #2]
	}
	if(chassisSpin>4095){
 8002208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002210:	db02      	blt.n	8002218 <CAL_SendChassisCommands+0xbc>
		chassisSpin=4095;
 8002212:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002216:	807b      	strh	r3, [r7, #2]
	}
	uint8_t chassisSpinBuff[2] = {0};
 8002218:	2300      	movs	r3, #0
 800221a:	82bb      	strh	r3, [r7, #20]
	memcpy(chassisSpinBuff,&chassisSpin,2);
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	82bb      	strh	r3, [r7, #20]

	if(turretSpin<0){
 8002220:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da01      	bge.n	800222c <CAL_SendChassisCommands+0xd0>
		turretSpin=0;
 8002228:	2300      	movs	r3, #0
 800222a:	803b      	strh	r3, [r7, #0]
	}
	if(turretSpin>4095){
 800222c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002234:	db02      	blt.n	800223c <CAL_SendChassisCommands+0xe0>
		turretSpin=4095;
 8002236:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800223a:	803b      	strh	r3, [r7, #0]
	}
	uint8_t turretSpinBuff[2] = {0};
 800223c:	2300      	movs	r3, #0
 800223e:	823b      	strh	r3, [r7, #16]
	memcpy(turretSpinBuff,&turretSpin,2);
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	823b      	strh	r3, [r7, #16]

	currentGyro = currentGyro+2047;
 8002244:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002248:	b29b      	uxth	r3, r3
 800224a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21b      	sxth	r3, r3
 8002252:	873b      	strh	r3, [r7, #56]	@ 0x38
	if(currentGyro<0){
 8002254:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002258:	2b00      	cmp	r3, #0
 800225a:	da01      	bge.n	8002260 <CAL_SendChassisCommands+0x104>
		currentGyro=0;
 800225c:	2300      	movs	r3, #0
 800225e:	873b      	strh	r3, [r7, #56]	@ 0x38
	}
	if(currentGyro>4095){
 8002260:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002268:	db02      	blt.n	8002270 <CAL_SendChassisCommands+0x114>
		currentGyro=4095;
 800226a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800226e:	873b      	strh	r3, [r7, #56]	@ 0x38
	}
	uint8_t currentGyroBuff[2] = {0};
 8002270:	2300      	movs	r3, #0
 8002272:	81bb      	strh	r3, [r7, #12]
	memcpy(currentGyroBuff,&currentGyro,2);
 8002274:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002276:	81bb      	strh	r3, [r7, #12]


	//build package
	txData[0] =  frontBackBuff[0];
 8002278:	7f3b      	ldrb	r3, [r7, #28]
 800227a:	f887 3020 	strb.w	r3, [r7, #32]
	txData[1] =  CAL_getBits(frontBackBuff[1],0,4)|(CAL_getBits(rightLeftBuff[0],0,4)<<4);
 800227e:	7f7b      	ldrb	r3, [r7, #29]
 8002280:	2204      	movs	r2, #4
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f87f 	bl	8002388 <CAL_getBits>
 800228a:	4603      	mov	r3, r0
 800228c:	b25c      	sxtb	r4, r3
 800228e:	7e3b      	ldrb	r3, [r7, #24]
 8002290:	2204      	movs	r2, #4
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f877 	bl	8002388 <CAL_getBits>
 800229a:	4603      	mov	r3, r0
 800229c:	b25b      	sxtb	r3, r3
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	4323      	orrs	r3, r4
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txData[2] =  CAL_getBits(rightLeftBuff[0],4,4)|(CAL_getBits(rightLeftBuff[1],0,4)<<4);
 80022ac:	7e3b      	ldrb	r3, [r7, #24]
 80022ae:	2204      	movs	r2, #4
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f868 	bl	8002388 <CAL_getBits>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b25c      	sxtb	r4, r3
 80022bc:	7e7b      	ldrb	r3, [r7, #25]
 80022be:	2204      	movs	r2, #4
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f860 	bl	8002388 <CAL_getBits>
 80022c8:	4603      	mov	r3, r0
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	4323      	orrs	r3, r4
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txData[3] = chassisSpinBuff[0];
 80022da:	7d3b      	ldrb	r3, [r7, #20]
 80022dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txData[4] = CAL_getBits(chassisSpinBuff[1],0,4)|(CAL_getBits(turretSpinBuff[0],0,4)<<4);
 80022e0:	7d7b      	ldrb	r3, [r7, #21]
 80022e2:	2204      	movs	r2, #4
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f84e 	bl	8002388 <CAL_getBits>
 80022ec:	4603      	mov	r3, r0
 80022ee:	b25c      	sxtb	r4, r3
 80022f0:	7c3b      	ldrb	r3, [r7, #16]
 80022f2:	2204      	movs	r2, #4
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f846 	bl	8002388 <CAL_getBits>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	b25b      	sxtb	r3, r3
 8002304:	4323      	orrs	r3, r4
 8002306:	b25b      	sxtb	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txData[5] = CAL_getBits(turretSpinBuff[0],4,4)|(CAL_getBits(turretSpinBuff[1],0,4)<<4);
 800230e:	7c3b      	ldrb	r3, [r7, #16]
 8002310:	2204      	movs	r2, #4
 8002312:	2104      	movs	r1, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f837 	bl	8002388 <CAL_getBits>
 800231a:	4603      	mov	r3, r0
 800231c:	b25c      	sxtb	r4, r3
 800231e:	7c7b      	ldrb	r3, [r7, #17]
 8002320:	2204      	movs	r2, #4
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f82f 	bl	8002388 <CAL_getBits>
 800232a:	4603      	mov	r3, r0
 800232c:	b25b      	sxtb	r3, r3
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	b25b      	sxtb	r3, r3
 8002332:	4323      	orrs	r3, r4
 8002334:	b25b      	sxtb	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	txData[6] = currentGyroBuff[0];
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	txData[7] = CAL_getBits(currentGyroBuff[1],0,4)|(triggerPressed<<4)|(fireMode<<5);
 8002342:	7b7b      	ldrb	r3, [r7, #13]
 8002344:	2204      	movs	r2, #4
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f81d 	bl	8002388 <CAL_getBits>
 800234e:	4603      	mov	r3, r0
 8002350:	b25a      	sxtb	r2, r3
 8002352:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	b25b      	sxtb	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b25a      	sxtb	r2, r3
 800235e:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	b25b      	sxtb	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b25b      	sxtb	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800237a:	2002      	movs	r0, #2
 800237c:	f000 f994 	bl	80026a8 <CAN_transmit>
}
 8002380:	bf00      	nop
 8002382:	372c      	adds	r7, #44	@ 0x2c
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}

08002388 <CAL_getBits>:


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	460b      	mov	r3, r1
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	4613      	mov	r3, r2
 8002398:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800239e:	2300      	movs	r3, #0
 80023a0:	73bb      	strb	r3, [r7, #14]
 80023a2:	e013      	b.n	80023cc <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	79b9      	ldrb	r1, [r7, #6]
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	440b      	add	r3, r1
 80023ac:	fa42 f303 	asr.w	r3, r2, r3
 80023b0:	f003 0201 	and.w	r2, r3, #1
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	b25a      	sxtb	r2, r3
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73bb      	strb	r3, [r7, #14]
 80023cc:	7bba      	ldrb	r2, [r7, #14]
 80023ce:	797b      	ldrb	r3, [r7, #5]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3e7      	bcc.n	80023a4 <CAL_getBits+0x1c>
	}
	return result;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <CAL_getCH0>:


int16_t CAL_getCH0(){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
		return CAL_CH0;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <CAL_getCH0+0x14>)
 80023ea:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20000248 	.word	0x20000248

080023fc <CAL_getCH1>:

int16_t CAL_getCH1(){
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	return CAL_CH1;
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <CAL_getCH1+0x14>)
 8002402:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2000024a 	.word	0x2000024a

08002414 <CAL_getCH2>:

int16_t CAL_getCH2(){
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
		return CAL_CH2;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <CAL_getCH2+0x14>)
 800241a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	2000024c 	.word	0x2000024c

0800242c <CAL_getCH3>:


int16_t CAL_getCH3(){
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
		return CAL_CH3;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <CAL_getCH3+0x14>)
 8002432:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	2000024e 	.word	0x2000024e

08002444 <CAL_getCH4>:

int16_t CAL_getCH4(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
		return getDR16_CH4();
 8002448:	f001 f980 	bl	800374c <getDR16_CH4>
 800244c:	4603      	mov	r3, r0

}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}

08002452 <CAL_getS1>:

uint8_t CAL_getS1(){
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
	return getDR16_S1();
 8002456:	f001 f95d 	bl	8003714 <getDR16_S1>
 800245a:	4603      	mov	r3, r0
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}

08002460 <CAL_getCurrentStage>:

uint8_t CAL_getGameType(){
	return CAL_game_type;
}

uint8_t CAL_getCurrentStage(){
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	return CAL_current_stage;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <CAL_getCurrentStage+0x14>)
 8002466:	781b      	ldrb	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000260 	.word	0x20000260

08002478 <CAL_getBarrel1Heat>:

uint16_t CAL_getBufferEnergy(){
	return CAL_buffer_energy;
}

uint16_t CAL_getBarrel1Heat(){
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
	return CAL_shooter_17mm_1_barrel_heat;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <CAL_getBarrel1Heat+0x14>)
 800247e:	881b      	ldrh	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000264 	.word	0x20000264

08002490 <CAL_getBarrel2Heat>:

uint16_t CAL_getBarrel2Heat(){
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
	return CAL_shooter_17mm_2_barrel_heat;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <CAL_getBarrel2Heat+0x14>)
 8002496:	881b      	ldrh	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000266 	.word	0x20000266

080024a8 <CAL_getRobotId>:

uint16_t CAL_getHeroHeat(){
	return CAL_shooter_42mm_barrel_heat;
}

uint8_t CAL_getRobotId(){
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
	return CAL_robot_id;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <CAL_getRobotId+0x14>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000026a 	.word	0x2000026a

080024c0 <CAL_getHeatLimit>:

uint16_t CAL_getPowerLimit(){
	return CAL_chassis_power_limit;
}

uint16_t CAL_getHeatLimit(){
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	return CAL_shooter_barrel_heat_limit;
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <CAL_getHeatLimit+0x14>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000270 	.word	0x20000270

080024d8 <CAL_getTargetX>:

uint8_t CAL_getFireMode(){
	return CAL_FireMode;
}

int16_t CAL_getTargetX(){
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
	return CAL_TargetX;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <CAL_getTargetX+0x14>)
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	2000002a 	.word	0x2000002a

080024f0 <CAL_getTargetY>:

int16_t CAL_getTargetY(){
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	return CAL_TargetY;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <CAL_getTargetY+0x14>)
 80024f6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	2000002c 	.word	0x2000002c

08002508 <CAL_getTargetWidth>:

int16_t CAL_getTargetWidth(){
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	return CAL_TargetWidth;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <CAL_getTargetWidth+0x14>)
 800250e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	2000027e 	.word	0x2000027e

08002520 <CAL_getTargetHeight>:

int16_t CAL_getTargetHeight(){
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	return CAL_TargetHeight;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <CAL_getTargetHeight+0x14>)
 8002526:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	20000280 	.word	0x20000280

08002538 <CAL_getTargetColour>:

uint8_t CAL_getTargetColour(){
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	return CAL_TargetColour;
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <CAL_getTargetColour+0x14>)
 800253e:	781b      	ldrb	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000282 	.word	0x20000282

08002550 <CAL_getCVSeq>:

uint8_t CAL_getCVSeq(){
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	return CAL_CVSeq;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <CAL_getCVSeq+0x14>)
 8002556:	781b      	ldrb	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000283 	.word	0x20000283

08002568 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8002570:	f107 0308 	add.w	r3, r7, #8
 8002574:	f107 0210 	add.w	r2, r7, #16
 8002578:	2100      	movs	r1, #0
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f006 fae8 	bl	8008b50 <HAL_CAN_GetRxMessage>
    //CAN Debugger:
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);



    switch (rx_header.StdId) {
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d87a      	bhi.n	8002680 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a41      	ldr	r2, [pc, #260]	@ (800269c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d134      	bne.n	8002606 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 800259c:	7a3b      	ldrb	r3, [r7, #8]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025b0:	b291      	uxth	r1, r2
 80025b2:	4a3b      	ldr	r2, [pc, #236]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80025b4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80025b8:	7abb      	ldrb	r3, [r7, #10]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	b219      	sxth	r1, r3
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025c8:	430a      	orrs	r2, r1
 80025ca:	b211      	sxth	r1, r2
 80025cc:	4a34      	ldr	r2, [pc, #208]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	460a      	mov	r2, r1
 80025d4:	805a      	strh	r2, [r3, #2]
 80025d6:	7b3b      	ldrb	r3, [r7, #12]
 80025d8:	b21b      	sxth	r3, r3
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	b219      	sxth	r1, r3
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025e6:	430a      	orrs	r2, r1
 80025e8:	b211      	sxth	r1, r2
 80025ea:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	460a      	mov	r2, r1
 80025f2:	809a      	strh	r2, [r3, #4]
 80025f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025f8:	7bb9      	ldrb	r1, [r7, #14]
 80025fa:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	460a      	mov	r2, r1
 8002602:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8002604:	e044      	b.n	8002690 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a26      	ldr	r2, [pc, #152]	@ (80026a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d140      	bne.n	8002690 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 800260e:	7a3b      	ldrb	r3, [r7, #8]
 8002610:	b21b      	sxth	r3, r3
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	7a7b      	ldrb	r3, [r7, #9]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002622:	b291      	uxth	r1, r2
 8002624:	4a1e      	ldr	r2, [pc, #120]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002626:	330b      	adds	r3, #11
 8002628:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800262c:	7abb      	ldrb	r3, [r7, #10]
 800262e:	b21b      	sxth	r3, r3
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	b219      	sxth	r1, r3
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	b21a      	sxth	r2, r3
 8002638:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800263c:	430a      	orrs	r2, r1
 800263e:	b211      	sxth	r1, r2
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002642:	330b      	adds	r3, #11
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	460a      	mov	r2, r1
 800264a:	805a      	strh	r2, [r3, #2]
 800264c:	7b3b      	ldrb	r3, [r7, #12]
 800264e:	b21b      	sxth	r3, r3
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b219      	sxth	r1, r3
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	b21a      	sxth	r2, r3
 8002658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800265c:	430a      	orrs	r2, r1
 800265e:	b211      	sxth	r1, r2
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002662:	330b      	adds	r3, #11
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	460a      	mov	r2, r1
 800266a:	809a      	strh	r2, [r3, #4]
 800266c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002670:	7bb9      	ldrb	r1, [r7, #14]
 8002672:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002674:	330b      	adds	r3, #11
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	460a      	mov	r2, r1
 800267c:	719a      	strb	r2, [r3, #6]
            break;
 800267e:	e007      	b.n	8002690 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f107 0208 	add.w	r2, r7, #8
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa93 	bl	8001bb4 <CAN_RxEventCallbackPT>
            break;
 800268e:	e000      	b.n	8002692 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 8002690:	bf00      	nop
        }
    }
}
 8002692:	bf00      	nop
 8002694:	3730      	adds	r7, #48	@ 0x30
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000a10 	.word	0x20000a10
 80026a0:	20000300 	.word	0x20000300
 80026a4:	20000a38 	.word	0x20000a38

080026a8 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	603a      	str	r2, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	460b      	mov	r3, r1
 80026b6:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 80026b8:	88bb      	ldrh	r3, [r7, #4]
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <CAN_transmit+0x58>)
 80026bc:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <CAN_transmit+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <CAN_transmit+0x58>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <CAN_transmit+0x58>)
 80026cc:	2208      	movs	r2, #8
 80026ce:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4908      	ldr	r1, [pc, #32]	@ (8002700 <CAN_transmit+0x58>)
 80026de:	4809      	ldr	r0, [pc, #36]	@ (8002704 <CAN_transmit+0x5c>)
 80026e0:	f006 f966 	bl	80089b0 <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d106      	bne.n	80026f8 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <CAN_transmit+0x58>)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <CAN_transmit+0x60>)
 80026f4:	f006 f95c 	bl	80089b0 <HAL_CAN_AddTxMessage>
	}
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000298 	.word	0x20000298
 8002704:	20000a10 	.word	0x20000a10
 8002708:	20000a38 	.word	0x20000a38

0800270c <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	4604      	mov	r4, r0
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	4603      	mov	r3, r0
 8002720:	80bb      	strh	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]
 8002726:	4613      	mov	r3, r2
 8002728:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <CAN_DriveMotor+0xc0>)
 800272e:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <CAN_DriveMotor+0xc0>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8002736:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <CAN_DriveMotor+0xc0>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <CAN_DriveMotor+0xc0>)
 800273e:	2208      	movs	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8002742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002746:	121b      	asrs	r3, r3, #8
 8002748:	b21b      	sxth	r3, r3
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 800274e:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 8002756:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8002758:	f9b7 3000 	ldrsh.w	r3, [r7]
 800275c:	121b      	asrs	r3, r3, #8
 800275e:	b21b      	sxth	r3, r3
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 8002764:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8002766:	883b      	ldrh	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 800276c:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 800276e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002772:	121b      	asrs	r3, r3, #8
 8002774:	b21b      	sxth	r3, r3
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 800277a:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 800277c:	8c3b      	ldrh	r3, [r7, #32]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 8002782:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8002784:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002788:	121b      	asrs	r3, r3, #8
 800278a:	b21b      	sxth	r3, r3
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 8002790:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8002792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 8002798:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 80027a6:	4909      	ldr	r1, [pc, #36]	@ (80027cc <CAN_DriveMotor+0xc0>)
 80027a8:	480a      	ldr	r0, [pc, #40]	@ (80027d4 <CAN_DriveMotor+0xc8>)
 80027aa:	f006 f901 	bl	80089b0 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 80027ae:	e009      	b.n	80027c4 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d106      	bne.n	80027c4 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <CAN_DriveMotor+0xc4>)
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <CAN_DriveMotor+0xc0>)
 80027be:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <CAN_DriveMotor+0xcc>)
 80027c0:	f006 f8f6 	bl	80089b0 <HAL_CAN_AddTxMessage>
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	200002b0 	.word	0x200002b0
 80027d0:	200002c8 	.word	0x200002c8
 80027d4:	20000a10 	.word	0x20000a10
 80027d8:	20000a38 	.word	0x20000a38

080027dc <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	4604      	mov	r4, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4623      	mov	r3, r4
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	4603      	mov	r3, r0
 80027f0:	71bb      	strb	r3, [r7, #6]
 80027f2:	460b      	mov	r3, r1
 80027f4:	717b      	strb	r3, [r7, #5]
 80027f6:	4613      	mov	r3, r2
 80027f8:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	f000 8142 	beq.w	8002a86 <CAN_setMotorCtrlVal+0x2aa>
 8002802:	2b04      	cmp	r3, #4
 8002804:	f300 81e1 	bgt.w	8002bca <CAN_setMotorCtrlVal+0x3ee>
 8002808:	2b02      	cmp	r3, #2
 800280a:	dc02      	bgt.n	8002812 <CAN_setMotorCtrlVal+0x36>
 800280c:	2b00      	cmp	r3, #0
 800280e:	dc04      	bgt.n	800281a <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8002810:	e1db      	b.n	8002bca <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8002812:	2b03      	cmp	r3, #3
 8002814:	f000 8097 	beq.w	8002946 <CAN_setMotorCtrlVal+0x16a>
}
 8002818:	e1d7      	b.n	8002bca <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 800281a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800281e:	2b04      	cmp	r3, #4
 8002820:	dc02      	bgt.n	8002828 <CAN_setMotorCtrlVal+0x4c>
 8002822:	2b00      	cmp	r3, #0
 8002824:	dc05      	bgt.n	8002832 <CAN_setMotorCtrlVal+0x56>
					break;
 8002826:	e08c      	b.n	8002942 <CAN_setMotorCtrlVal+0x166>
 8002828:	3b05      	subs	r3, #5
			switch(motorID) {
 800282a:	2b03      	cmp	r3, #3
 800282c:	f200 8089 	bhi.w	8002942 <CAN_setMotorCtrlVal+0x166>
 8002830:	e042      	b.n	80028b8 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800283a:	1e59      	subs	r1, r3, #1
 800283c:	48bd      	ldr	r0, [pc, #756]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	887a      	ldrh	r2, [r7, #2]
 800284a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	49b8      	ldr	r1, [pc, #736]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	49b3      	ldr	r1, [pc, #716]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3302      	adds	r3, #2
 8002874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	49ad      	ldr	r1, [pc, #692]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	3304      	adds	r3, #4
 800288a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	48a8      	ldr	r0, [pc, #672]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4403      	add	r3, r0
 800289e:	3306      	adds	r3, #6
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	79f8      	ldrb	r0, [r7, #7]
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	9100      	str	r1, [sp, #0]
 80028aa:	462b      	mov	r3, r5
 80028ac:	4622      	mov	r2, r4
 80028ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028b2:	f7ff ff2b 	bl	800270c <CAN_DriveMotor>
					break;
 80028b6:	e045      	b.n	8002944 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028c0:	1f59      	subs	r1, r3, #5
 80028c2:	489c      	ldr	r0, [pc, #624]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3304      	adds	r3, #4
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	4996      	ldr	r1, [pc, #600]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3308      	adds	r3, #8
 80028e8:	f9b3 4000 	ldrsh.w	r4, [r3]
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	4990      	ldr	r1, [pc, #576]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	330a      	adds	r3, #10
 80028fe:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	498b      	ldr	r1, [pc, #556]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	330c      	adds	r3, #12
 8002914:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	4885      	ldr	r0, [pc, #532]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4403      	add	r3, r0
 8002928:	330e      	adds	r3, #14
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	79f8      	ldrb	r0, [r7, #7]
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9100      	str	r1, [sp, #0]
 8002934:	462b      	mov	r3, r5
 8002936:	4622      	mov	r2, r4
 8002938:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800293c:	f7ff fee6 	bl	800270c <CAN_DriveMotor>
					break;
 8002940:	e000      	b.n	8002944 <CAN_setMotorCtrlVal+0x168>
					break;
 8002942:	bf00      	nop
			break;
 8002944:	e141      	b.n	8002bca <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002946:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800294a:	2b08      	cmp	r3, #8
 800294c:	f000 8097 	beq.w	8002a7e <CAN_setMotorCtrlVal+0x2a2>
 8002950:	2b08      	cmp	r3, #8
 8002952:	f300 8096 	bgt.w	8002a82 <CAN_setMotorCtrlVal+0x2a6>
 8002956:	2b04      	cmp	r3, #4
 8002958:	dc02      	bgt.n	8002960 <CAN_setMotorCtrlVal+0x184>
 800295a:	2b00      	cmp	r3, #0
 800295c:	dc05      	bgt.n	800296a <CAN_setMotorCtrlVal+0x18e>
					break;
 800295e:	e090      	b.n	8002a82 <CAN_setMotorCtrlVal+0x2a6>
 8002960:	3b05      	subs	r3, #5
			switch(motorID) {
 8002962:	2b02      	cmp	r3, #2
 8002964:	f200 808d 	bhi.w	8002a82 <CAN_setMotorCtrlVal+0x2a6>
 8002968:	e044      	b.n	80029f4 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002972:	1e59      	subs	r1, r3, #1
 8002974:	486f      	ldr	r0, [pc, #444]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3304      	adds	r3, #4
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	4969      	ldr	r1, [pc, #420]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3308      	adds	r3, #8
 800299a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	4964      	ldr	r1, [pc, #400]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	330a      	adds	r3, #10
 80029b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	1e5a      	subs	r2, r3, #1
 80029b8:	495e      	ldr	r1, [pc, #376]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	330c      	adds	r3, #12
 80029c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	4859      	ldr	r0, [pc, #356]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4403      	add	r3, r0
 80029da:	330e      	adds	r3, #14
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	79f8      	ldrb	r0, [r7, #7]
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	9100      	str	r1, [sp, #0]
 80029e6:	462b      	mov	r3, r5
 80029e8:	4622      	mov	r2, r4
 80029ea:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80029ee:	f7ff fe8d 	bl	800270c <CAN_DriveMotor>
					break;
 80029f2:	e047      	b.n	8002a84 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029fc:	1f59      	subs	r1, r3, #5
 80029fe:	484d      	ldr	r0, [pc, #308]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	4947      	ldr	r1, [pc, #284]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	3310      	adds	r3, #16
 8002a24:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	1e5a      	subs	r2, r3, #1
 8002a2c:	4941      	ldr	r1, [pc, #260]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3312      	adds	r3, #18
 8002a3a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	493c      	ldr	r1, [pc, #240]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3314      	adds	r3, #20
 8002a50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	4836      	ldr	r0, [pc, #216]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4403      	add	r3, r0
 8002a64:	3316      	adds	r3, #22
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	79f8      	ldrb	r0, [r7, #7]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	9100      	str	r1, [sp, #0]
 8002a70:	462b      	mov	r3, r5
 8002a72:	4622      	mov	r2, r4
 8002a74:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8002a78:	f7ff fe48 	bl	800270c <CAN_DriveMotor>
					break;
 8002a7c:	e002      	b.n	8002a84 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8002a7e:	bf00      	nop
 8002a80:	e0a3      	b.n	8002bca <CAN_setMotorCtrlVal+0x3ee>
					break;
 8002a82:	bf00      	nop
			break;
 8002a84:	e0a1      	b.n	8002bca <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002a86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	f000 8099 	beq.w	8002bc2 <CAN_setMotorCtrlVal+0x3e6>
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	f300 8098 	bgt.w	8002bc6 <CAN_setMotorCtrlVal+0x3ea>
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	dc02      	bgt.n	8002aa0 <CAN_setMotorCtrlVal+0x2c4>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	dc05      	bgt.n	8002aaa <CAN_setMotorCtrlVal+0x2ce>
					break;
 8002a9e:	e092      	b.n	8002bc6 <CAN_setMotorCtrlVal+0x3ea>
 8002aa0:	3b05      	subs	r3, #5
			switch(motorID) {
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f200 808f 	bhi.w	8002bc6 <CAN_setMotorCtrlVal+0x3ea>
 8002aa8:	e046      	b.n	8002b38 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ab2:	1e59      	subs	r1, r3, #1
 8002ab4:	481f      	ldr	r0, [pc, #124]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	4919      	ldr	r1, [pc, #100]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3308      	adds	r3, #8
 8002ada:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	1e5a      	subs	r2, r3, #1
 8002ae2:	4914      	ldr	r1, [pc, #80]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	330a      	adds	r3, #10
 8002af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	490e      	ldr	r1, [pc, #56]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	330c      	adds	r3, #12
 8002b06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <CAN_setMotorCtrlVal+0x358>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4403      	add	r3, r0
 8002b1a:	330e      	adds	r3, #14
 8002b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b20:	79f8      	ldrb	r0, [r7, #7]
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	9100      	str	r1, [sp, #0]
 8002b26:	462b      	mov	r3, r5
 8002b28:	4622      	mov	r2, r4
 8002b2a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8002b2e:	f7ff fded 	bl	800270c <CAN_DriveMotor>
					break;
 8002b32:	e049      	b.n	8002bc8 <CAN_setMotorCtrlVal+0x3ec>
 8002b34:	200002d0 	.word	0x200002d0
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b40:	1f59      	subs	r1, r3, #5
 8002b42:	4824      	ldr	r0, [pc, #144]	@ (8002bd4 <CAN_setMotorCtrlVal+0x3f8>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3308      	adds	r3, #8
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	491e      	ldr	r1, [pc, #120]	@ (8002bd4 <CAN_setMotorCtrlVal+0x3f8>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3310      	adds	r3, #16
 8002b68:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	4918      	ldr	r1, [pc, #96]	@ (8002bd4 <CAN_setMotorCtrlVal+0x3f8>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3312      	adds	r3, #18
 8002b7e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	4913      	ldr	r1, [pc, #76]	@ (8002bd4 <CAN_setMotorCtrlVal+0x3f8>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3314      	adds	r3, #20
 8002b94:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	480d      	ldr	r0, [pc, #52]	@ (8002bd4 <CAN_setMotorCtrlVal+0x3f8>)
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4403      	add	r3, r0
 8002ba8:	3316      	adds	r3, #22
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	79f8      	ldrb	r0, [r7, #7]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	9100      	str	r1, [sp, #0]
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002bbc:	f7ff fda6 	bl	800270c <CAN_DriveMotor>
					break;
 8002bc0:	e002      	b.n	8002bc8 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002bc6:	bf00      	nop
			break;
 8002bc8:	bf00      	nop
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200002d0 	.word	0x200002d0

08002bd8 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b08b      	sub	sp, #44	@ 0x2c
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4604      	mov	r4, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	eef0 6a40 	vmov.f32	s13, s0
 8002bea:	eeb0 7a60 	vmov.f32	s14, s1
 8002bee:	eef0 7a41 	vmov.f32	s15, s2
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	75fb      	strb	r3, [r7, #23]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75bb      	strb	r3, [r7, #22]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	757b      	strb	r3, [r7, #21]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	827b      	strh	r3, [r7, #18]
 8002c02:	edc7 6a01 	vstr	s13, [r7, #4]
 8002c06:	ed87 7a02 	vstr	s14, [r7, #8]
 8002c0a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8002c18:	7dbb      	ldrb	r3, [r7, #22]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	dc02      	bgt.n	8002c24 <calcRPM_PID+0x4c>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	dc04      	bgt.n	8002c2c <calcRPM_PID+0x54>
 8002c22:	e00d      	b.n	8002c40 <calcRPM_PID+0x68>
 8002c24:	3b03      	subs	r3, #3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d80a      	bhi.n	8002c40 <calcRPM_PID+0x68>
 8002c2a:	e004      	b.n	8002c36 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002c2c:	7d7b      	ldrb	r3, [r7, #21]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002c34:	e009      	b.n	8002c4a <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002c36:	7d7b      	ldrb	r3, [r7, #21]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002c3e:	e004      	b.n	8002c4a <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8002c40:	7d7b      	ldrb	r3, [r7, #21]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002c48:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8002c4a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002c4e:	7ffa      	ldrb	r2, [r7, #31]
 8002c50:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002c54:	4c70      	ldr	r4, [pc, #448]	@ (8002e18 <calcRPM_PID+0x240>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	4403      	add	r3, r0
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4423      	add	r3, r4
 8002c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c6a:	7ffa      	ldrb	r2, [r7, #31]
 8002c6c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002c70:	1ac9      	subs	r1, r1, r3
 8002c72:	4c6a      	ldr	r4, [pc, #424]	@ (8002e1c <calcRPM_PID+0x244>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4403      	add	r3, r0
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4423      	add	r3, r4
 8002c84:	3304      	adds	r3, #4
 8002c86:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002c88:	7ffa      	ldrb	r2, [r7, #31]
 8002c8a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002c8e:	4863      	ldr	r0, [pc, #396]	@ (8002e1c <calcRPM_PID+0x244>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4403      	add	r3, r0
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	7ffa      	ldrb	r2, [r7, #31]
 8002ca6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002caa:	4c5c      	ldr	r4, [pc, #368]	@ (8002e1c <calcRPM_PID+0x244>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4423      	add	r3, r4
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	7ffa      	ldrb	r2, [r7, #31]
 8002cc2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002cc6:	4419      	add	r1, r3
 8002cc8:	4c54      	ldr	r4, [pc, #336]	@ (8002e1c <calcRPM_PID+0x244>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4403      	add	r3, r0
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	4423      	add	r3, r4
 8002cda:	3308      	adds	r3, #8
 8002cdc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8002cde:	7ffa      	ldrb	r2, [r7, #31]
 8002ce0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002ce4:	484d      	ldr	r0, [pc, #308]	@ (8002e1c <calcRPM_PID+0x244>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4403      	add	r3, r0
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	7ffa      	ldrb	r2, [r7, #31]
 8002cfa:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002cfe:	4c46      	ldr	r4, [pc, #280]	@ (8002e18 <calcRPM_PID+0x240>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	4403      	add	r3, r0
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4423      	add	r3, r4
 8002d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d14:	7ffa      	ldrb	r2, [r7, #31]
 8002d16:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002d1a:	1ac9      	subs	r1, r1, r3
 8002d1c:	4c3f      	ldr	r4, [pc, #252]	@ (8002e1c <calcRPM_PID+0x244>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	4403      	add	r3, r0
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4423      	add	r3, r4
 8002d2e:	330c      	adds	r3, #12
 8002d30:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8002d32:	7ffa      	ldrb	r2, [r7, #31]
 8002d34:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d38:	4837      	ldr	r0, [pc, #220]	@ (8002e18 <calcRPM_PID+0x240>)
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4403      	add	r3, r0
 8002d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d4e:	7ffa      	ldrb	r2, [r7, #31]
 8002d50:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d54:	461c      	mov	r4, r3
 8002d56:	4831      	ldr	r0, [pc, #196]	@ (8002e1c <calcRPM_PID+0x244>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4403      	add	r3, r0
 8002d68:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002d6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d6e:	7ffa      	ldrb	r2, [r7, #31]
 8002d70:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d74:	4829      	ldr	r0, [pc, #164]	@ (8002e1c <calcRPM_PID+0x244>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4403      	add	r3, r0
 8002d86:	3304      	adds	r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d96:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d9a:	7ffa      	ldrb	r2, [r7, #31]
 8002d9c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002da0:	481e      	ldr	r0, [pc, #120]	@ (8002e1c <calcRPM_PID+0x244>)
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4403      	add	r3, r0
 8002db2:	3308      	adds	r3, #8
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc6:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dca:	7ffa      	ldrb	r2, [r7, #31]
 8002dcc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002dd0:	4812      	ldr	r0, [pc, #72]	@ (8002e1c <calcRPM_PID+0x244>)
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4403      	add	r3, r0
 8002de2:	330c      	adds	r3, #12
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002e00:	7dbb      	ldrb	r3, [r7, #22]
 8002e02:	6a39      	ldr	r1, [r7, #32]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f997 	bl	8003138 <applyCtrlLimit>
 8002e0a:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	372c      	adds	r7, #44	@ 0x2c
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000300 	.word	0x20000300
 8002e1c:	200003b0 	.word	0x200003b0

08002e20 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b08b      	sub	sp, #44	@ 0x2c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	eef0 6a40 	vmov.f32	s13, s0
 8002e32:	eeb0 7a60 	vmov.f32	s14, s1
 8002e36:	eef0 7a41 	vmov.f32	s15, s2
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	75fb      	strb	r3, [r7, #23]
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75bb      	strb	r3, [r7, #22]
 8002e42:	460b      	mov	r3, r1
 8002e44:	757b      	strb	r3, [r7, #21]
 8002e46:	4613      	mov	r3, r2
 8002e48:	827b      	strh	r3, [r7, #18]
 8002e4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8002e4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002e52:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8002e68:	7dbb      	ldrb	r3, [r7, #22]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	dc02      	bgt.n	8002e74 <calcPosition_PID+0x54>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	dc04      	bgt.n	8002e7c <calcPosition_PID+0x5c>
 8002e72:	e00d      	b.n	8002e90 <calcPosition_PID+0x70>
 8002e74:	3b03      	subs	r3, #3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d80a      	bhi.n	8002e90 <calcPosition_PID+0x70>
 8002e7a:	e004      	b.n	8002e86 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002e7c:	7d7b      	ldrb	r3, [r7, #21]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e84:	e009      	b.n	8002e9a <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002e86:	7d7b      	ldrb	r3, [r7, #21]
 8002e88:	3303      	adds	r3, #3
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e8e:	e004      	b.n	8002e9a <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8002e90:	7d7b      	ldrb	r3, [r7, #21]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e98:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8002e9a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002e9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ea0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002ea4:	4ca2      	ldr	r4, [pc, #648]	@ (8003130 <calcPosition_PID+0x310>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002eb6:	1acb      	subs	r3, r1, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db10      	blt.n	8002ede <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8002ebc:	8a79      	ldrh	r1, [r7, #18]
 8002ebe:	7ffa      	ldrb	r2, [r7, #31]
 8002ec0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002ec4:	4c9a      	ldr	r4, [pc, #616]	@ (8003130 <calcPosition_PID+0x310>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	83bb      	strh	r3, [r7, #28]
 8002edc:	e012      	b.n	8002f04 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8002ede:	8a79      	ldrh	r1, [r7, #18]
 8002ee0:	7ffa      	ldrb	r2, [r7, #31]
 8002ee2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002ee6:	4c92      	ldr	r4, [pc, #584]	@ (8003130 <calcPosition_PID+0x310>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4403      	add	r3, r0
 8002ef4:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002ef8:	1acb      	subs	r3, r1, r3
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8002f04:	7ffa      	ldrb	r2, [r7, #31]
 8002f06:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002f0a:	4889      	ldr	r0, [pc, #548]	@ (8003130 <calcPosition_PID+0x310>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db10      	blt.n	8002f4a <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8002f28:	7ffa      	ldrb	r2, [r7, #31]
 8002f2a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002f2e:	4880      	ldr	r0, [pc, #512]	@ (8003130 <calcPosition_PID+0x310>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002f40:	8a7b      	ldrh	r3, [r7, #18]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	837b      	strh	r3, [r7, #26]
 8002f48:	e012      	b.n	8002f70 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8002f4a:	7ffa      	ldrb	r2, [r7, #31]
 8002f4c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002f50:	4877      	ldr	r0, [pc, #476]	@ (8003130 <calcPosition_PID+0x310>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002f62:	8a7b      	ldrh	r3, [r7, #18]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8002f70:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002f74:	7ffa      	ldrb	r2, [r7, #31]
 8002f76:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002f7a:	4c6d      	ldr	r4, [pc, #436]	@ (8003130 <calcPosition_PID+0x310>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	4403      	add	r3, r0
 8002f88:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002f8c:	7ffa      	ldrb	r2, [r7, #31]
 8002f8e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002f92:	1ac9      	subs	r1, r1, r3
 8002f94:	4c67      	ldr	r4, [pc, #412]	@ (8003134 <calcPosition_PID+0x314>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4423      	add	r3, r4
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002faa:	7ffa      	ldrb	r2, [r7, #31]
 8002fac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002fb0:	4860      	ldr	r0, [pc, #384]	@ (8003134 <calcPosition_PID+0x314>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	4403      	add	r3, r0
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	7ffa      	ldrb	r2, [r7, #31]
 8002fc8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002fcc:	4c59      	ldr	r4, [pc, #356]	@ (8003134 <calcPosition_PID+0x314>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4403      	add	r3, r0
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4423      	add	r3, r4
 8002fde:	3304      	adds	r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7ffa      	ldrb	r2, [r7, #31]
 8002fe4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002fe8:	4419      	add	r1, r3
 8002fea:	4c52      	ldr	r4, [pc, #328]	@ (8003134 <calcPosition_PID+0x314>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4403      	add	r3, r0
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4423      	add	r3, r4
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8003000:	7ffa      	ldrb	r2, [r7, #31]
 8003002:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003006:	484b      	ldr	r0, [pc, #300]	@ (8003134 <calcPosition_PID+0x314>)
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	440b      	add	r3, r1
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4403      	add	r3, r0
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	7ffa      	ldrb	r2, [r7, #31]
 800301c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8003020:	4c43      	ldr	r4, [pc, #268]	@ (8003130 <calcPosition_PID+0x310>)
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	4403      	add	r3, r0
 800302e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8003032:	7ffa      	ldrb	r2, [r7, #31]
 8003034:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8003038:	1ac9      	subs	r1, r1, r3
 800303a:	4c3e      	ldr	r4, [pc, #248]	@ (8003134 <calcPosition_PID+0x314>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	4403      	add	r3, r0
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4423      	add	r3, r4
 800304c:	330c      	adds	r3, #12
 800304e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8003050:	7ffa      	ldrb	r2, [r7, #31]
 8003052:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003056:	4836      	ldr	r0, [pc, #216]	@ (8003130 <calcPosition_PID+0x310>)
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	440b      	add	r3, r1
 8003064:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8003068:	7ffa      	ldrb	r2, [r7, #31]
 800306a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800306e:	461c      	mov	r4, r3
 8003070:	4830      	ldr	r0, [pc, #192]	@ (8003134 <calcPosition_PID+0x314>)
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	440b      	add	r3, r1
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4403      	add	r3, r0
 8003082:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8003084:	ed97 7a01 	vldr	s14, [r7, #4]
 8003088:	7ffa      	ldrb	r2, [r7, #31]
 800308a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800308e:	4829      	ldr	r0, [pc, #164]	@ (8003134 <calcPosition_PID+0x314>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	440b      	add	r3, r1
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4403      	add	r3, r0
 80030a0:	3304      	adds	r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80030b4:	7ffa      	ldrb	r2, [r7, #31]
 80030b6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80030ba:	481e      	ldr	r0, [pc, #120]	@ (8003134 <calcPosition_PID+0x314>)
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	4403      	add	r3, r0
 80030cc:	3308      	adds	r3, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80030e4:	7ffa      	ldrb	r2, [r7, #31]
 80030e6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80030ea:	4812      	ldr	r0, [pc, #72]	@ (8003134 <calcPosition_PID+0x314>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4403      	add	r3, r0
 80030fc:	330c      	adds	r3, #12
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003114:	ee17 3a90 	vmov	r3, s15
 8003118:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800311a:	7dbb      	ldrb	r3, [r7, #22]
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f80a 	bl	8003138 <applyCtrlLimit>
 8003124:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8003126:	6a3b      	ldr	r3, [r7, #32]
}
 8003128:	4618      	mov	r0, r3
 800312a:	372c      	adds	r7, #44	@ 0x2c
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	20000300 	.word	0x20000300
 8003134:	200003b0 	.word	0x200003b0

08003138 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b04      	cmp	r3, #4
 8003148:	d009      	beq.n	800315e <applyCtrlLimit+0x26>
 800314a:	2b04      	cmp	r3, #4
 800314c:	dc29      	bgt.n	80031a2 <applyCtrlLimit+0x6a>
 800314e:	2b02      	cmp	r3, #2
 8003150:	dc02      	bgt.n	8003158 <applyCtrlLimit+0x20>
 8003152:	2b00      	cmp	r3, #0
 8003154:	dc03      	bgt.n	800315e <applyCtrlLimit+0x26>
 8003156:	e024      	b.n	80031a2 <applyCtrlLimit+0x6a>
 8003158:	2b03      	cmp	r3, #3
 800315a:	d00f      	beq.n	800317c <applyCtrlLimit+0x44>
 800315c:	e021      	b.n	80031a2 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003164:	dd03      	ble.n	800316e <applyCtrlLimit+0x36>
				val = 16384;
 8003166:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800316a:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 800316c:	e016      	b.n	800319c <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8003174:	da12      	bge.n	800319c <applyCtrlLimit+0x64>
				val = -16384;
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <applyCtrlLimit+0x78>)
 8003178:	603b      	str	r3, [r7, #0]
			break;
 800317a:	e00f      	b.n	800319c <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8003182:	4293      	cmp	r3, r2
 8003184:	dd03      	ble.n	800318e <applyCtrlLimit+0x56>
				val = 25000;
 8003186:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800318a:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 800318c:	e008      	b.n	80031a0 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	4a08      	ldr	r2, [pc, #32]	@ (80031b4 <applyCtrlLimit+0x7c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	da04      	bge.n	80031a0 <applyCtrlLimit+0x68>
				val = -25000;
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <applyCtrlLimit+0x7c>)
 8003198:	603b      	str	r3, [r7, #0]
			break;
 800319a:	e001      	b.n	80031a0 <applyCtrlLimit+0x68>
			break;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <applyCtrlLimit+0x6a>
			break;
 80031a0:	bf00      	nop
		}
	}
	return val;
 80031a2:	683b      	ldr	r3, [r7, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	ffffc000 	.word	0xffffc000
 80031b4:	ffff9e58 	.word	0xffff9e58

080031b8 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	eef0 6a40 	vmov.f32	s13, s0
 80031ca:	eeb0 7a60 	vmov.f32	s14, s1
 80031ce:	eef0 7a41 	vmov.f32	s15, s2
 80031d2:	4623      	mov	r3, r4
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	4603      	mov	r3, r0
 80031d8:	75bb      	strb	r3, [r7, #22]
 80031da:	460b      	mov	r3, r1
 80031dc:	757b      	strb	r3, [r7, #21]
 80031de:	4613      	mov	r3, r2
 80031e0:	827b      	strh	r3, [r7, #18]
 80031e2:	edc7 6a01 	vstr	s13, [r7, #4]
 80031e6:	ed87 7a02 	vstr	s14, [r7, #8]
 80031ea:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80031ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80031f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80031f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031fe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003202:	7db9      	ldrb	r1, [r7, #22]
 8003204:	7df8      	ldrb	r0, [r7, #23]
 8003206:	eeb0 0a66 	vmov.f32	s0, s13
 800320a:	eef0 0a47 	vmov.f32	s1, s14
 800320e:	eeb0 1a67 	vmov.f32	s2, s15
 8003212:	f7ff fce1 	bl	8002bd8 <calcRPM_PID>
 8003216:	4603      	mov	r3, r0
 8003218:	b21b      	sxth	r3, r3
 800321a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800321e:	7db9      	ldrb	r1, [r7, #22]
 8003220:	7df8      	ldrb	r0, [r7, #23]
 8003222:	f7ff fadb 	bl	80027dc <CAN_setMotorCtrlVal>
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd90      	pop	{r4, r7, pc}

0800322e <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800322e:	b590      	push	{r4, r7, lr}
 8003230:	b087      	sub	sp, #28
 8003232:	af00      	add	r7, sp, #0
 8003234:	4604      	mov	r4, r0
 8003236:	4608      	mov	r0, r1
 8003238:	4611      	mov	r1, r2
 800323a:	461a      	mov	r2, r3
 800323c:	eef0 6a40 	vmov.f32	s13, s0
 8003240:	eeb0 7a60 	vmov.f32	s14, s1
 8003244:	eef0 7a41 	vmov.f32	s15, s2
 8003248:	4623      	mov	r3, r4
 800324a:	75fb      	strb	r3, [r7, #23]
 800324c:	4603      	mov	r3, r0
 800324e:	75bb      	strb	r3, [r7, #22]
 8003250:	460b      	mov	r3, r1
 8003252:	757b      	strb	r3, [r7, #21]
 8003254:	4613      	mov	r3, r2
 8003256:	827b      	strh	r3, [r7, #18]
 8003258:	edc7 6a01 	vstr	s13, [r7, #4]
 800325c:	ed87 7a02 	vstr	s14, [r7, #8]
 8003260:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8003264:	edd7 6a01 	vldr	s13, [r7, #4]
 8003268:	ed97 7a02 	vldr	s14, [r7, #8]
 800326c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003274:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003278:	7db9      	ldrb	r1, [r7, #22]
 800327a:	7df8      	ldrb	r0, [r7, #23]
 800327c:	eeb0 0a66 	vmov.f32	s0, s13
 8003280:	eef0 0a47 	vmov.f32	s1, s14
 8003284:	eeb0 1a67 	vmov.f32	s2, s15
 8003288:	f7ff fdca 	bl	8002e20 <calcPosition_PID>
 800328c:	4603      	mov	r3, r0
 800328e:	b21b      	sxth	r3, r3
 8003290:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003294:	7db9      	ldrb	r1, [r7, #22]
 8003296:	7df8      	ldrb	r0, [r7, #23]
 8003298:	f7ff faa0 	bl	80027dc <CAN_setMotorCtrlVal>
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
 80032ae:	460b      	mov	r3, r1
 80032b0:	71bb      	strb	r3, [r7, #6]
 80032b2:	4613      	mov	r3, r2
 80032b4:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	dc02      	bgt.n	80032c2 <getRotorPosition+0x1e>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	dc04      	bgt.n	80032ca <getRotorPosition+0x26>
 80032c0:	e034      	b.n	800332c <getRotorPosition+0x88>
 80032c2:	3b03      	subs	r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d831      	bhi.n	800332c <getRotorPosition+0x88>
 80032c8:	e016      	b.n	80032f8 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 80032ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	dd29      	ble.n	8003326 <getRotorPosition+0x82>
 80032d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	dc25      	bgt.n	8003326 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	4815      	ldr	r0, [pc, #84]	@ (800333c <getRotorPosition+0x98>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80032f6:	e01b      	b.n	8003330 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80032f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dd14      	ble.n	800332a <getRotorPosition+0x86>
 8003300:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003304:	2b07      	cmp	r3, #7
 8003306:	dc10      	bgt.n	800332a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003310:	1cd9      	adds	r1, r3, #3
 8003312:	480a      	ldr	r0, [pc, #40]	@ (800333c <getRotorPosition+0x98>)
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	440b      	add	r3, r1
 8003320:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8003324:	e004      	b.n	8003330 <getRotorPosition+0x8c>
			break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <getRotorPosition+0x88>
			}
			break;
 800332a:	bf00      	nop
		}
	}
	return -1;
 800332c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20000300 	.word	0x20000300

08003340 <getMotorRPM>:

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	460b      	mov	r3, r1
 800334c:	71bb      	strb	r3, [r7, #6]
 800334e:	4613      	mov	r3, r2
 8003350:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b02      	cmp	r3, #2
 8003356:	dc02      	bgt.n	800335e <getMotorRPM+0x1e>
 8003358:	2b00      	cmp	r3, #0
 800335a:	dc04      	bgt.n	8003366 <getMotorRPM+0x26>
 800335c:	e038      	b.n	80033d0 <getMotorRPM+0x90>
 800335e:	3b03      	subs	r3, #3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d835      	bhi.n	80033d0 <getMotorRPM+0x90>
 8003364:	e018      	b.n	8003398 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8003366:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dd2d      	ble.n	80033ca <getMotorRPM+0x8a>
 800336e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003372:	2b08      	cmp	r3, #8
 8003374:	dc29      	bgt.n	80033ca <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	4817      	ldr	r0, [pc, #92]	@ (80033e0 <getMotorRPM+0xa0>)
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	440b      	add	r3, r1
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4403      	add	r3, r0
 8003392:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003396:	e01d      	b.n	80033d4 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8003398:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd16      	ble.n	80033ce <getMotorRPM+0x8e>
 80033a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	dc12      	bgt.n	80033ce <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80033b0:	1cd9      	adds	r1, r3, #3
 80033b2:	480b      	ldr	r0, [pc, #44]	@ (80033e0 <getMotorRPM+0xa0>)
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	440b      	add	r3, r1
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4403      	add	r3, r0
 80033c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033c8:	e004      	b.n	80033d4 <getMotorRPM+0x94>
			break;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <getMotorRPM+0x90>
			}
			break;
 80033ce:	bf00      	nop
		}
	}
	return -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	20000300 	.word	0x20000300

080033e4 <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80033f6:	2300      	movs	r3, #0
 80033f8:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8003412:	463b      	mov	r3, r7
 8003414:	4619      	mov	r1, r3
 8003416:	480f      	ldr	r0, [pc, #60]	@ (8003454 <CAN_Init+0x70>)
 8003418:	f005 f9a8 	bl	800876c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800341c:	480d      	ldr	r0, [pc, #52]	@ (8003454 <CAN_Init+0x70>)
 800341e:	f005 fa83 	bl	8008928 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003422:	2102      	movs	r1, #2
 8003424:	480b      	ldr	r0, [pc, #44]	@ (8003454 <CAN_Init+0x70>)
 8003426:	f005 fcb5 	bl	8008d94 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 800342a:	230d      	movs	r3, #13
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 800342e:	230d      	movs	r3, #13
 8003430:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8003432:	463b      	mov	r3, r7
 8003434:	4619      	mov	r1, r3
 8003436:	4808      	ldr	r0, [pc, #32]	@ (8003458 <CAN_Init+0x74>)
 8003438:	f005 f998 	bl	800876c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 800343c:	4806      	ldr	r0, [pc, #24]	@ (8003458 <CAN_Init+0x74>)
 800343e:	f005 fa73 	bl	8008928 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003442:	2102      	movs	r1, #2
 8003444:	4804      	ldr	r0, [pc, #16]	@ (8003458 <CAN_Init+0x74>)
 8003446:	f005 fca5 	bl	8008d94 <HAL_CAN_ActivateNotification>
}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	@ 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000a10 	.word	0x20000a10
 8003458:	20000a38 	.word	0x20000a38

0800345c <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 8003464:	2212      	movs	r2, #18
 8003466:	4914      	ldr	r1, [pc, #80]	@ (80034b8 <DBUS_Rx_Init+0x5c>)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f008 fe9b 	bl	800c1a4 <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 800346e:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <DBUS_Rx_Init+0x60>)
 8003470:	8813      	ldrh	r3, [r2, #0]
 8003472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003476:	f361 030a 	bfi	r3, r1, #0, #11
 800347a:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 800347c:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <DBUS_Rx_Init+0x60>)
 800347e:	8853      	ldrh	r3, [r2, #2]
 8003480:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003484:	f361 030a 	bfi	r3, r1, #0, #11
 8003488:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 800348a:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <DBUS_Rx_Init+0x60>)
 800348c:	8893      	ldrh	r3, [r2, #4]
 800348e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003492:	f361 030a 	bfi	r3, r1, #0, #11
 8003496:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 8003498:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <DBUS_Rx_Init+0x60>)
 800349a:	88d3      	ldrh	r3, [r2, #6]
 800349c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034a0:	f361 030a 	bfi	r3, r1, #0, #11
 80034a4:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 80034a6:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <DBUS_Rx_Init+0x60>)
 80034a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ac:	825a      	strh	r2, [r3, #18]
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000524 	.word	0x20000524
 80034bc:	20000510 	.word	0x20000510

080034c0 <DBUS_Update>:


void DBUS_Update(){
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 80034c4:	4b59      	ldr	r3, [pc, #356]	@ (800362c <DBUS_Update+0x16c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	4b58      	ldr	r3, [pc, #352]	@ (800362c <DBUS_Update+0x16c>)
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034dc:	b299      	uxth	r1, r3
 80034de:	4a54      	ldr	r2, [pc, #336]	@ (8003630 <DBUS_Update+0x170>)
 80034e0:	8813      	ldrh	r3, [r2, #0]
 80034e2:	f361 030a 	bfi	r3, r1, #0, #11
 80034e6:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 80034e8:	4b50      	ldr	r3, [pc, #320]	@ (800362c <DBUS_Update+0x16c>)
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	08db      	lsrs	r3, r3, #3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	4b4e      	ldr	r3, [pc, #312]	@ (800362c <DBUS_Update+0x16c>)
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b21b      	sxth	r3, r3
 8003500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003504:	b299      	uxth	r1, r3
 8003506:	4a4a      	ldr	r2, [pc, #296]	@ (8003630 <DBUS_Update+0x170>)
 8003508:	8853      	ldrh	r3, [r2, #2]
 800350a:	f361 030a 	bfi	r3, r1, #0, #11
 800350e:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 8003510:	4b46      	ldr	r3, [pc, #280]	@ (800362c <DBUS_Update+0x16c>)
 8003512:	789b      	ldrb	r3, [r3, #2]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	b21a      	sxth	r2, r3
 800351a:	4b44      	ldr	r3, [pc, #272]	@ (800362c <DBUS_Update+0x16c>)
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	b21b      	sxth	r3, r3
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	b21b      	sxth	r3, r3
 8003524:	4313      	orrs	r3, r2
 8003526:	b21a      	sxth	r2, r3
 8003528:	4b40      	ldr	r3, [pc, #256]	@ (800362c <DBUS_Update+0x16c>)
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	b21b      	sxth	r3, r3
 800352e:	029b      	lsls	r3, r3, #10
 8003530:	b21b      	sxth	r3, r3
 8003532:	4313      	orrs	r3, r2
 8003534:	b21b      	sxth	r3, r3
 8003536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353a:	b299      	uxth	r1, r3
 800353c:	4a3c      	ldr	r2, [pc, #240]	@ (8003630 <DBUS_Update+0x170>)
 800353e:	8893      	ldrh	r3, [r2, #4]
 8003540:	f361 030a 	bfi	r3, r1, #0, #11
 8003544:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 8003546:	4b39      	ldr	r3, [pc, #228]	@ (800362c <DBUS_Update+0x16c>)
 8003548:	791b      	ldrb	r3, [r3, #4]
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	b21a      	sxth	r2, r3
 8003550:	4b36      	ldr	r3, [pc, #216]	@ (800362c <DBUS_Update+0x16c>)
 8003552:	795b      	ldrb	r3, [r3, #5]
 8003554:	b21b      	sxth	r3, r3
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	b21b      	sxth	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b21b      	sxth	r3, r3
 800355e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003562:	b299      	uxth	r1, r3
 8003564:	4a32      	ldr	r2, [pc, #200]	@ (8003630 <DBUS_Update+0x170>)
 8003566:	88d3      	ldrh	r3, [r2, #6]
 8003568:	f361 030a 	bfi	r3, r1, #0, #11
 800356c:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 800356e:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <DBUS_Update+0x16c>)
 8003570:	795b      	ldrb	r3, [r3, #5]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	b2d9      	uxtb	r1, r3
 800357c:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <DBUS_Update+0x170>)
 800357e:	79d3      	ldrb	r3, [r2, #7]
 8003580:	f361 03c4 	bfi	r3, r1, #3, #2
 8003584:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003586:	4b29      	ldr	r3, [pc, #164]	@ (800362c <DBUS_Update+0x16c>)
 8003588:	795b      	ldrb	r3, [r3, #5]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	b2db      	uxtb	r3, r3
 800358e:	109b      	asrs	r3, r3, #2
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <DBUS_Update+0x170>)
 8003598:	79d3      	ldrb	r3, [r2, #7]
 800359a:	f361 1346 	bfi	r3, r1, #5, #2
 800359e:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 80035a0:	4b22      	ldr	r3, [pc, #136]	@ (800362c <DBUS_Update+0x16c>)
 80035a2:	799b      	ldrb	r3, [r3, #6]
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	4b21      	ldr	r3, [pc, #132]	@ (800362c <DBUS_Update+0x16c>)
 80035a8:	79db      	ldrb	r3, [r3, #7]
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <DBUS_Update+0x170>)
 80035b6:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 80035b8:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <DBUS_Update+0x16c>)
 80035ba:	7a1b      	ldrb	r3, [r3, #8]
 80035bc:	b21a      	sxth	r2, r3
 80035be:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <DBUS_Update+0x16c>)
 80035c0:	7a5b      	ldrb	r3, [r3, #9]
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b21a      	sxth	r2, r3
 80035cc:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <DBUS_Update+0x170>)
 80035ce:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 80035d0:	4b16      	ldr	r3, [pc, #88]	@ (800362c <DBUS_Update+0x16c>)
 80035d2:	7a9b      	ldrb	r3, [r3, #10]
 80035d4:	b21a      	sxth	r2, r3
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <DBUS_Update+0x16c>)
 80035d8:	7adb      	ldrb	r3, [r3, #11]
 80035da:	b21b      	sxth	r3, r3
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	b21b      	sxth	r3, r3
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <DBUS_Update+0x170>)
 80035e6:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 80035e8:	4b10      	ldr	r3, [pc, #64]	@ (800362c <DBUS_Update+0x16c>)
 80035ea:	7b1a      	ldrb	r2, [r3, #12]
 80035ec:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <DBUS_Update+0x170>)
 80035ee:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 80035f0:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <DBUS_Update+0x16c>)
 80035f2:	7b5a      	ldrb	r2, [r3, #13]
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <DBUS_Update+0x170>)
 80035f6:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 80035f8:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <DBUS_Update+0x16c>)
 80035fa:	7b9a      	ldrb	r2, [r3, #14]
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <DBUS_Update+0x170>)
 80035fe:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <DBUS_Update+0x16c>)
 8003602:	7bda      	ldrb	r2, [r3, #15]
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <DBUS_Update+0x170>)
 8003606:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 8003608:	4b08      	ldr	r3, [pc, #32]	@ (800362c <DBUS_Update+0x16c>)
 800360a:	7c1b      	ldrb	r3, [r3, #16]
 800360c:	b21a      	sxth	r2, r3
 800360e:	4b07      	ldr	r3, [pc, #28]	@ (800362c <DBUS_Update+0x16c>)
 8003610:	7c5b      	ldrb	r3, [r3, #17]
 8003612:	b21b      	sxth	r3, r3
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	b21b      	sxth	r3, r3
 8003618:	4313      	orrs	r3, r2
 800361a:	b21b      	sxth	r3, r3
 800361c:	b29a      	uxth	r2, r3
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <DBUS_Update+0x170>)
 8003620:	825a      	strh	r2, [r3, #18]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000524 	.word	0x20000524
 8003630:	20000510 	.word	0x20000510

08003634 <getDR16_CH0>:

int16_t getDR16_CH0(){
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <getDR16_CH0+0x34>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <getDR16_CH0+0x34>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364e:	b29b      	uxth	r3, r3
 8003650:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003654:	b29b      	uxth	r3, r3
 8003656:	b21b      	sxth	r3, r3
 8003658:	e000      	b.n	800365c <getDR16_CH0+0x28>
	}
	else{
		return 0;
 800365a:	2300      	movs	r3, #0
	}
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000510 	.word	0x20000510

0800366c <getDR16_CH1>:

int16_t getDR16_CH1(){
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <getDR16_CH1+0x34>)
 8003672:	885b      	ldrh	r3, [r3, #2]
 8003674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <getDR16_CH1+0x34>)
 8003680:	885b      	ldrh	r3, [r3, #2]
 8003682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003686:	b29b      	uxth	r3, r3
 8003688:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800368c:	b29b      	uxth	r3, r3
 800368e:	b21b      	sxth	r3, r3
 8003690:	e000      	b.n	8003694 <getDR16_CH1+0x28>
	}
	else{
		return 0;
 8003692:	2300      	movs	r3, #0
	}
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000510 	.word	0x20000510

080036a4 <getDR16_CH2>:

int16_t getDR16_CH2(){
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <getDR16_CH2+0x34>)
 80036aa:	889b      	ldrh	r3, [r3, #4]
 80036ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <getDR16_CH2+0x34>)
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	e000      	b.n	80036cc <getDR16_CH2+0x28>
	}
	else{
		return 0;
 80036ca:	2300      	movs	r3, #0
	}
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000510 	.word	0x20000510

080036dc <getDR16_CH3>:

int16_t getDR16_CH3(){
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <getDR16_CH3+0x34>)
 80036e2:	88db      	ldrh	r3, [r3, #6]
 80036e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 80036ee:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <getDR16_CH3+0x34>)
 80036f0:	88db      	ldrh	r3, [r3, #6]
 80036f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b21b      	sxth	r3, r3
 8003700:	e000      	b.n	8003704 <getDR16_CH3+0x28>
	}
	else{
		return 0;
 8003702:	2300      	movs	r3, #0
	}
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000510 	.word	0x20000510

08003714 <getDR16_S1>:

uint8_t getDR16_S1(){
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	return DR16_DBUS.S1;
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <getDR16_S1+0x18>)
 800371a:	79db      	ldrb	r3, [r3, #7]
 800371c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003720:	b2db      	uxtb	r3, r3
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	20000510 	.word	0x20000510

08003730 <getDR16_S2>:

uint8_t getDR16_S2(){
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <getDR16_S2+0x18>)
 8003736:	79db      	ldrb	r3, [r3, #7]
 8003738:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800373c:	b2db      	uxtb	r3, r3
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000510 	.word	0x20000510

0800374c <getDR16_CH4>:

int16_t getDR16_CH4(){
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	if(DR16_DBUS.RESERVED>0){
 8003750:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <getDR16_CH4+0x28>)
 8003752:	8a5b      	ldrh	r3, [r3, #18]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <getDR16_CH4+0x1a>
		return (int16_t)DR16_DBUS.RESERVED-1024;
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <getDR16_CH4+0x28>)
 800375a:	8a5b      	ldrh	r3, [r3, #18]
 800375c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003760:	b29b      	uxth	r3, r3
 8003762:	b21b      	sxth	r3, r3
 8003764:	e000      	b.n	8003768 <getDR16_CH4+0x1c>
	}
	else{
		return 0;
 8003766:	2300      	movs	r3, #0
	}
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000510 	.word	0x20000510

08003778 <getDR16_W>:

uint8_t getDR16_W(){
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <getDR16_W+0x18>)
 800377e:	7c1b      	ldrb	r3, [r3, #16]
 8003780:	2201      	movs	r2, #1
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f847 	bl	8003818 <DBUS_getBits>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000510 	.word	0x20000510

08003794 <getDR16_S>:

uint8_t getDR16_S(){
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <getDR16_S+0x18>)
 800379a:	7c1b      	ldrb	r3, [r3, #16]
 800379c:	2201      	movs	r2, #1
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 f839 	bl	8003818 <DBUS_getBits>
 80037a6:	4603      	mov	r3, r0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000510 	.word	0x20000510

080037b0 <getDR16_A>:

uint8_t getDR16_A(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <getDR16_A+0x18>)
 80037b6:	7c1b      	ldrb	r3, [r3, #16]
 80037b8:	2201      	movs	r2, #1
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f82b 	bl	8003818 <DBUS_getBits>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000510 	.word	0x20000510

080037cc <getDR16_D>:

uint8_t getDR16_D(){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <getDR16_D+0x18>)
 80037d2:	7c1b      	ldrb	r3, [r3, #16]
 80037d4:	2201      	movs	r2, #1
 80037d6:	2103      	movs	r1, #3
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f81d 	bl	8003818 <DBUS_getBits>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000510 	.word	0x20000510

080037e8 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <getDR16_MouseX+0x14>)
 80037ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000510 	.word	0x20000510

08003800 <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <getDR16_MouseY+0x14>)
 8003806:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000510 	.word	0x20000510

08003818 <DBUS_getBits>:
uint8_t getDR16_MouseR(){
	return DR16_DBUS.MouseR;
}


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
 8003822:	460b      	mov	r3, r1
 8003824:	71bb      	strb	r3, [r7, #6]
 8003826:	4613      	mov	r3, r2
 8003828:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800382e:	2300      	movs	r3, #0
 8003830:	73bb      	strb	r3, [r7, #14]
 8003832:	e013      	b.n	800385c <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8003834:	79fa      	ldrb	r2, [r7, #7]
 8003836:	79b9      	ldrb	r1, [r7, #6]
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	440b      	add	r3, r1
 800383c:	fa42 f303 	asr.w	r3, r2, r3
 8003840:	f003 0201 	and.w	r2, r3, #1
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	b25a      	sxtb	r2, r3
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4313      	orrs	r3, r2
 8003852:	b25b      	sxtb	r3, r3
 8003854:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	3301      	adds	r3, #1
 800385a:	73bb      	strb	r3, [r7, #14]
 800385c:	7bba      	ldrb	r2, [r7, #14]
 800385e:	797b      	ldrb	r3, [r7, #5]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3e7      	bcc.n	8003834 <DBUS_getBits+0x1c>
	}
	return result;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 8003888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800388c:	e017      	b.n	80038be <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29a      	uxth	r2, r3
 800389e:	88f9      	ldrh	r1, [r7, #6]
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	404b      	eors	r3, r1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4909      	ldr	r1, [pc, #36]	@ (80038cc <Get_CRC16_Check_Sum+0x58>)
 80038a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80038ac:	4053      	eors	r3, r2
 80038ae:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e8      	bne.n	800388e <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 80038bc:	88fb      	ldrh	r3, [r7, #6]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	080138d4 	.word	0x080138d4

080038d0 <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 80038d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <UART_Ex_Init+0x1c>)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f008 fc85 	bl	800c1ee <HAL_UARTEx_ReceiveToIdle_DMA>

}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200005a4 	.word	0x200005a4

080038f0 <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	b0af      	sub	sp, #188	@ 0xbc
 80038f6:	af12      	add	r7, sp, #72	@ 0x48
 80038f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80038fa:	460b      	mov	r3, r1
 80038fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80038fe:	466b      	mov	r3, sp
 8003900:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 8003902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003906:	49b7      	ldr	r1, [pc, #732]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003908:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800390a:	f008 fc70 	bl	800c1ee <HAL_UARTEx_ReceiveToIdle_DMA>

	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 800390e:	49b5      	ldr	r1, [pc, #724]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003910:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003912:	f7fe fb5f 	bl	8001fd4 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 8003916:	4bb3      	ldr	r3, [pc, #716]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003918:	799b      	ldrb	r3, [r3, #6]
 800391a:	b21b      	sxth	r3, r3
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	b21a      	sxth	r2, r3
 8003920:	4bb0      	ldr	r3, [pc, #704]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003922:	795b      	ldrb	r3, [r3, #5]
 8003924:	b21b      	sxth	r3, r3
 8003926:	4313      	orrs	r3, r2
 8003928:	b21b      	sxth	r3, r3
 800392a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 800392e:	4bad      	ldr	r3, [pc, #692]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003930:	789b      	ldrb	r3, [r3, #2]
 8003932:	b21b      	sxth	r3, r3
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	b21a      	sxth	r2, r3
 8003938:	4baa      	ldr	r3, [pc, #680]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	b21b      	sxth	r3, r3
 800393e:	4313      	orrs	r3, r2
 8003940:	b21b      	sxth	r3, r3
 8003942:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8003946:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800394a:	3308      	adds	r3, #8
 800394c:	4aa5      	ldr	r2, [pc, #660]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	b21b      	sxth	r3, r3
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800395a:	3307      	adds	r3, #7
 800395c:	49a1      	ldr	r1, [pc, #644]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	b21b      	sxth	r3, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	b21b      	sxth	r3, r3
 8003966:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 800396a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800396e:	1dd9      	adds	r1, r3, #7
 8003970:	1e4b      	subs	r3, r1, #1
 8003972:	667b      	str	r3, [r7, #100]	@ 0x64
 8003974:	460a      	mov	r2, r1
 8003976:	2300      	movs	r3, #0
 8003978:	633a      	str	r2, [r7, #48]	@ 0x30
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003986:	00c3      	lsls	r3, r0, #3
 8003988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800398a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800398e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003990:	00c2      	lsls	r2, r0, #3
 8003992:	460a      	mov	r2, r1
 8003994:	2300      	movs	r3, #0
 8003996:	4692      	mov	sl, r2
 8003998:	469b      	mov	fp, r3
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ae:	460b      	mov	r3, r1
 80039b0:	3307      	adds	r3, #7
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	ebad 0d03 	sub.w	sp, sp, r3
 80039ba:	ab12      	add	r3, sp, #72	@ 0x48
 80039bc:	3300      	adds	r3, #0
 80039be:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80039c6:	e00c      	b.n	80039e2 <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 80039c8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80039cc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039d0:	4984      	ldr	r1, [pc, #528]	@ (8003be4 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80039d2:	5c89      	ldrb	r1, [r1, r2]
 80039d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039d6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 80039d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039dc:	3301      	adds	r3, #1
 80039de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80039e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80039e6:	1d9a      	adds	r2, r3, #6
 80039e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039ec:	429a      	cmp	r2, r3
 80039ee:	daeb      	bge.n	80039c8 <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 80039f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80039f4:	3307      	adds	r3, #7
 80039f6:	4619      	mov	r1, r3
 80039f8:	4b7b      	ldr	r3, [pc, #492]	@ (8003be8 <HAL_UARTEx_RxEventCallback+0x2f8>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003a00:	f7ff ff38 	bl	8003874 <Get_CRC16_Check_Sum>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 8003a0a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8003a0e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f040 87b7 	bne.w	8004986 <HAL_UARTEx_RxEventCallback+0x1096>
 8003a18:	466b      	mov	r3, sp
 8003a1a:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8003a1c:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8003a20:	460b      	mov	r3, r1
 8003a22:	3b01      	subs	r3, #1
 8003a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a26:	b28b      	uxth	r3, r1
 8003a28:	2200      	movs	r2, #0
 8003a2a:	4698      	mov	r8, r3
 8003a2c:	4691      	mov	r9, r2
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a42:	b28b      	uxth	r3, r1
 8003a44:	2200      	movs	r2, #0
 8003a46:	461c      	mov	r4, r3
 8003a48:	4615      	mov	r5, r2
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	00eb      	lsls	r3, r5, #3
 8003a54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a58:	00e2      	lsls	r2, r4, #3
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	3307      	adds	r3, #7
 8003a5e:	08db      	lsrs	r3, r3, #3
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	ebad 0d03 	sub.w	sp, sp, r3
 8003a66:	ab12      	add	r3, sp, #72	@ 0x48
 8003a68:	3300      	adds	r3, #0
 8003a6a:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8003a6c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003a70:	461a      	mov	r2, r3
 8003a72:	495e      	ldr	r1, [pc, #376]	@ (8003bec <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003a74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003a76:	f00d fa2f 	bl	8010ed8 <memcpy>

		switch (cmd_id) {
 8003a7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a7e:	f240 4201 	movw	r2, #1025	@ 0x401
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f000 8772 	beq.w	800496c <HAL_UARTEx_RxEventCallback+0x107c>
 8003a88:	f240 4201 	movw	r2, #1025	@ 0x401
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	f300 8779 	bgt.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003a92:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8003a96:	f280 8775 	bge.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a9e:	dc1c      	bgt.n	8003ada <HAL_UARTEx_RxEventCallback+0x1ea>
 8003aa0:	f240 220e 	movw	r2, #526	@ 0x20e
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f300 876d 	bgt.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aae:	dc2b      	bgt.n	8003b08 <HAL_UARTEx_RxEventCallback+0x218>
 8003ab0:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8003ab4:	f280 8766 	bge.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	dc48      	bgt.n	8003b50 <HAL_UARTEx_RxEventCallback+0x260>
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	f000 80db 	beq.w	8003c7a <HAL_UARTEx_RxEventCallback+0x38a>
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	f300 875d 	bgt.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	f000 8090 	beq.w	8003bf0 <HAL_UARTEx_RxEventCallback+0x300>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	f000 80c7 	beq.w	8003c64 <HAL_UARTEx_RxEventCallback+0x374>
 8003ad6:	f000 bf55 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003ada:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	f200 8750 	bhi.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <HAL_UARTEx_RxEventCallback+0x1fc>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08004985 	.word	0x08004985
 8003af0:	080045c9 	.word	0x080045c9
 8003af4:	080045ef 	.word	0x080045ef
 8003af8:	0800465d 	.word	0x0800465d
 8003afc:	08004985 	.word	0x08004985
 8003b00:	08004985 	.word	0x08004985
 8003b04:	080048b9 	.word	0x080048b9
 8003b08:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003b0c:	2b0d      	cmp	r3, #13
 8003b0e:	f200 8739 	bhi.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003b12:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <HAL_UARTEx_RxEventCallback+0x228>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003f99 	.word	0x08003f99
 8003b1c:	080040a7 	.word	0x080040a7
 8003b20:	080040ef 	.word	0x080040ef
 8003b24:	08004133 	.word	0x08004133
 8003b28:	08004985 	.word	0x08004985
 8003b2c:	08004195 	.word	0x08004195
 8003b30:	080041d3 	.word	0x080041d3
 8003b34:	08004231 	.word	0x08004231
 8003b38:	08004267 	.word	0x08004267
 8003b3c:	0800427d 	.word	0x0800427d
 8003b40:	080042b1 	.word	0x080042b1
 8003b44:	08004369 	.word	0x08004369
 8003b48:	08004409 	.word	0x08004409
 8003b4c:	0800458b 	.word	0x0800458b
 8003b50:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	f200 8715 	bhi.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <HAL_UARTEx_RxEventCallback+0x270>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003d9d 	.word	0x08003d9d
 8003b64:	08004985 	.word	0x08004985
 8003b68:	08004985 	.word	0x08004985
 8003b6c:	08003ef9 	.word	0x08003ef9
 8003b70:	08003f2b 	.word	0x08003f2b
 8003b74:	08004985 	.word	0x08004985
 8003b78:	08004985 	.word	0x08004985
 8003b7c:	08004985 	.word	0x08004985
 8003b80:	08004985 	.word	0x08004985
 8003b84:	08004985 	.word	0x08004985
 8003b88:	08004985 	.word	0x08004985
 8003b8c:	08004985 	.word	0x08004985
 8003b90:	08004985 	.word	0x08004985
 8003b94:	08004985 	.word	0x08004985
 8003b98:	08004985 	.word	0x08004985
 8003b9c:	08004985 	.word	0x08004985
 8003ba0:	08004985 	.word	0x08004985
 8003ba4:	08004985 	.word	0x08004985
 8003ba8:	08004985 	.word	0x08004985
 8003bac:	08004985 	.word	0x08004985
 8003bb0:	08004985 	.word	0x08004985
 8003bb4:	08004985 	.word	0x08004985
 8003bb8:	08004985 	.word	0x08004985
 8003bbc:	08004985 	.word	0x08004985
 8003bc0:	08004985 	.word	0x08004985
 8003bc4:	08004985 	.word	0x08004985
 8003bc8:	08004985 	.word	0x08004985
 8003bcc:	08004985 	.word	0x08004985
 8003bd0:	08004985 	.word	0x08004985
 8003bd4:	08004985 	.word	0x08004985
 8003bd8:	08004985 	.word	0x08004985
 8003bdc:	08004985 	.word	0x08004985
 8003be0:	08004985 	.word	0x08004985
 8003be4:	200006a4 	.word	0x200006a4
 8003be8:	20000032 	.word	0x20000032
 8003bec:	200006ab 	.word	0x200006ab
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fed3 	bl	80049a4 <UART_RM25_getBits>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c04:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fec8 	bl	80049a4 <UART_RM25_getBits>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b5d      	ldr	r3, [pc, #372]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c1a:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1e:	3301      	adds	r3, #1
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c26:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8003c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c38:	4955      	ldr	r1, [pc, #340]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 8003c3e:	4b54      	ldr	r3, [pc, #336]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c40:	7818      	ldrb	r0, [r3, #0]
 8003c42:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c44:	7859      	ldrb	r1, [r3, #1]
 8003c46:	4b52      	ldr	r3, [pc, #328]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c48:	789c      	ldrb	r4, [r3, #2]
 8003c4a:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c4c:	889d      	ldrh	r5, [r3, #4]
 8003c4e:	4b50      	ldr	r3, [pc, #320]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003c50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c54:	e9cd 2300 	strd	r2, r3, [sp]
 8003c58:	462b      	mov	r3, r5
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	f7fd fefc 	bl	8001a58 <GAME_STATUS_RxEventCallback>
				break;
 8003c60:	f000 be90 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8003c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	4b4a      	ldr	r3, [pc, #296]	@ (8003d94 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003c6a:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 8003c6c:	4b49      	ldr	r3, [pc, #292]	@ (8003d94 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fec4 	bl	80049fe <GAME_RESULT_RxEventCallback>
				break;
 8003c76:	f000 be85 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c82:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	3302      	adds	r3, #2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b42      	ldr	r3, [pc, #264]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c8e:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c92:	3304      	adds	r3, #4
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b3f      	ldr	r3, [pc, #252]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c9a:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	3306      	adds	r3, #6
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ca6:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	330a      	adds	r3, #10
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cb2:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8003cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cbe:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	330e      	adds	r3, #14
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	4b33      	ldr	r3, [pc, #204]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cca:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	3310      	adds	r3, #16
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	4b30      	ldr	r3, [pc, #192]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cd6:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cda:	3312      	adds	r3, #18
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ce2:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	4b2a      	ldr	r3, [pc, #168]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cee:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf2:	3316      	adds	r3, #22
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cfa:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8003cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfe:	331a      	adds	r3, #26
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d06:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8003d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0a:	331c      	adds	r3, #28
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d12:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8003d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d16:	331e      	adds	r3, #30
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d1e:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8003d20:	4b1d      	ldr	r3, [pc, #116]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d22:	f8b3 c000 	ldrh.w	ip, [r3]
 8003d26:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d28:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003d32:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d34:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003d38:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d3a:	8918      	ldrh	r0, [r3, #8]
 8003d3c:	4b16      	ldr	r3, [pc, #88]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d3e:	895c      	ldrh	r4, [r3, #10]
 8003d40:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d42:	899d      	ldrh	r5, [r3, #12]
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d46:	89de      	ldrh	r6, [r3, #14]
 8003d48:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d4a:	8a1b      	ldrh	r3, [r3, #16]
 8003d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d50:	8a5a      	ldrh	r2, [r3, #18]
 8003d52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d54:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d56:	8a99      	ldrh	r1, [r3, #20]
 8003d58:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d5c:	8ad9      	ldrh	r1, [r3, #22]
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d60:	8b1a      	ldrh	r2, [r3, #24]
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d64:	8b5b      	ldrh	r3, [r3, #26]
 8003d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d68:	9208      	str	r2, [sp, #32]
 8003d6a:	9107      	str	r1, [sp, #28]
 8003d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d6e:	9106      	str	r1, [sp, #24]
 8003d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d72:	9205      	str	r2, [sp, #20]
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9603      	str	r6, [sp, #12]
 8003d7a:	9502      	str	r5, [sp, #8]
 8003d7c:	9401      	str	r4, [sp, #4]
 8003d7e:	9000      	str	r0, [sp, #0]
 8003d80:	464b      	mov	r3, r9
 8003d82:	4642      	mov	r2, r8
 8003d84:	4671      	mov	r1, lr
 8003d86:	4660      	mov	r0, ip
 8003d88:	f000 fe44 	bl	8004a14 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8003d8c:	f000 bdfa 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003d90:	200007a8 	.word	0x200007a8
 8003d94:	200007b8 	.word	0x200007b8
 8003d98:	200007bc 	.word	0x200007bc
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fdfd 	bl	80049a4 <UART_RM25_getBits>
 8003daa:	4603      	mov	r3, r0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b77      	ldr	r3, [pc, #476]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003db0:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 8003db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdf2 	bl	80049a4 <UART_RM25_getBits>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b71      	ldr	r3, [pc, #452]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003dc6:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fde7 	bl	80049a4 <UART_RM25_getBits>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b6c      	ldr	r3, [pc, #432]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ddc:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 8003dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	2103      	movs	r1, #3
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fddc 	bl	80049a4 <UART_RM25_getBits>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b66      	ldr	r3, [pc, #408]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003df2:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fdd1 	bl	80049a4 <UART_RM25_getBits>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b61      	ldr	r3, [pc, #388]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e08:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	2105      	movs	r1, #5
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fdc6 	bl	80049a4 <UART_RM25_getBits>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e1e:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 8003e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	2107      	movs	r1, #7
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fdbb 	bl	80049a4 <UART_RM25_getBits>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	b25c      	sxtb	r4, r3
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	2201      	movs	r2, #1
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fdb2 	bl	80049a4 <UART_RM25_getBits>
 8003e40:	4603      	mov	r3, r0
 8003e42:	b25b      	sxtb	r3, r3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	4323      	orrs	r3, r4
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e50:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 8003e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	2208      	movs	r2, #8
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fda2 	bl	80049a4 <UART_RM25_getBits>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	789b      	ldrb	r3, [r3, #2]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fd98 	bl	80049a4 <UART_RM25_getBits>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 8003e7a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003e7e:	4b43      	ldr	r3, [pc, #268]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e80:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	789b      	ldrb	r3, [r3, #2]
 8003e86:	2203      	movs	r2, #3
 8003e88:	2102      	movs	r1, #2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fd8a 	bl	80049a4 <UART_RM25_getBits>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b3d      	ldr	r3, [pc, #244]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e96:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	789b      	ldrb	r3, [r3, #2]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	2105      	movs	r1, #5
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fd7f 	bl	80049a4 <UART_RM25_getBits>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eac:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8003eae:	4b37      	ldr	r3, [pc, #220]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eb0:	781e      	ldrb	r6, [r3, #0]
 8003eb2:	4b36      	ldr	r3, [pc, #216]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eb4:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003eb8:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eba:	f893 e002 	ldrb.w	lr, [r3, #2]
 8003ebe:	4b33      	ldr	r3, [pc, #204]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ec0:	f893 8003 	ldrb.w	r8, [r3, #3]
 8003ec4:	4b31      	ldr	r3, [pc, #196]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ec6:	791b      	ldrb	r3, [r3, #4]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eca:	7952      	ldrb	r2, [r2, #5]
 8003ecc:	492f      	ldr	r1, [pc, #188]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ece:	7989      	ldrb	r1, [r1, #6]
 8003ed0:	482e      	ldr	r0, [pc, #184]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ed2:	8900      	ldrh	r0, [r0, #8]
 8003ed4:	4c2d      	ldr	r4, [pc, #180]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ed6:	7aa4      	ldrb	r4, [r4, #10]
 8003ed8:	4d2c      	ldr	r5, [pc, #176]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x69c>)
 8003eda:	7aed      	ldrb	r5, [r5, #11]
 8003edc:	9505      	str	r5, [sp, #20]
 8003ede:	9404      	str	r4, [sp, #16]
 8003ee0:	9003      	str	r0, [sp, #12]
 8003ee2:	9102      	str	r1, [sp, #8]
 8003ee4:	9201      	str	r2, [sp, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	4643      	mov	r3, r8
 8003eea:	4672      	mov	r2, lr
 8003eec:	4661      	mov	r1, ip
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f000 fda4 	bl	8004a3c <EVENT_DATA_RxEventCallback>
				break;
 8003ef4:	f000 bd46 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003efe:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	3301      	adds	r3, #1
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003f08:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003f12:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003f1a:	7851      	ldrb	r1, [r2, #1]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003f1e:	7892      	ldrb	r2, [r2, #2]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fd9f 	bl	8004a64 <REFEREE_WARNING_RxEventCallback>
				break;
 8003f26:	f000 bd2d 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f30:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2203      	movs	r2, #3
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd32 	bl	80049a4 <UART_RM25_getBits>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f46:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	2103      	movs	r1, #3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fd27 	bl	80049a4 <UART_RM25_getBits>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f5c:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	2202      	movs	r2, #2
 8003f64:	2106      	movs	r1, #6
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fd1c 	bl	80049a4 <UART_RM25_getBits>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f72:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f76:	7818      	ldrb	r0, [r3, #0]
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f7a:	7859      	ldrb	r1, [r3, #1]
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f7e:	789a      	ldrb	r2, [r3, #2]
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f82:	78db      	ldrb	r3, [r3, #3]
 8003f84:	f000 fd7d 	bl	8004a82 <DART_INFO_RxEventCallback>
				break;
 8003f88:	f000 bcfc 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8003f8c:	200007d8 	.word	0x200007d8
 8003f90:	200007e4 	.word	0x200007e4
 8003f94:	200007e8 	.word	0x200007e8
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 8003f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f9e:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	4b9c      	ldr	r3, [pc, #624]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fa8:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	3302      	adds	r3, #2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	4b99      	ldr	r3, [pc, #612]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fb4:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	3304      	adds	r3, #4
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	4b96      	ldr	r3, [pc, #600]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fc0:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	3306      	adds	r3, #6
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	4b93      	ldr	r3, [pc, #588]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fcc:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8003fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b90      	ldr	r3, [pc, #576]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fd8:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	330a      	adds	r3, #10
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fe4:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe8:	7b1b      	ldrb	r3, [r3, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fcd8 	bl	80049a4 <UART_RM25_getBits>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	b2d9      	uxtb	r1, r3
 8003ffc:	4a86      	ldr	r2, [pc, #536]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8003ffe:	7b13      	ldrb	r3, [r2, #12]
 8004000:	f361 0300 	bfi	r3, r1, #0, #1
 8004004:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	7b1b      	ldrb	r3, [r3, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fcc8 	bl	80049a4 <UART_RM25_getBits>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	b2d9      	uxtb	r1, r3
 800401c:	4a7e      	ldr	r2, [pc, #504]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800401e:	7b13      	ldrb	r3, [r2, #12]
 8004020:	f361 0341 	bfi	r3, r1, #1, #1
 8004024:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	7b1b      	ldrb	r3, [r3, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fcb8 	bl	80049a4 <UART_RM25_getBits>
 8004034:	4603      	mov	r3, r0
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	b2d9      	uxtb	r1, r3
 800403c:	4a76      	ldr	r2, [pc, #472]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800403e:	7b13      	ldrb	r3, [r2, #12]
 8004040:	f361 0382 	bfi	r3, r1, #2, #1
 8004044:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8004046:	4b74      	ldr	r3, [pc, #464]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004048:	781c      	ldrb	r4, [r3, #0]
 800404a:	4b73      	ldr	r3, [pc, #460]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800404c:	785d      	ldrb	r5, [r3, #1]
 800404e:	4b72      	ldr	r3, [pc, #456]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004050:	885e      	ldrh	r6, [r3, #2]
 8004052:	4b71      	ldr	r3, [pc, #452]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004054:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8004058:	4b6f      	ldr	r3, [pc, #444]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800405a:	88db      	ldrh	r3, [r3, #6]
 800405c:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800405e:	8912      	ldrh	r2, [r2, #8]
 8004060:	496d      	ldr	r1, [pc, #436]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004062:	8949      	ldrh	r1, [r1, #10]
 8004064:	486c      	ldr	r0, [pc, #432]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004066:	7b00      	ldrb	r0, [r0, #12]
 8004068:	f3c0 0000 	ubfx	r0, r0, #0, #1
 800406c:	b2c0      	uxtb	r0, r0
 800406e:	6338      	str	r0, [r7, #48]	@ 0x30
 8004070:	4869      	ldr	r0, [pc, #420]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 8004072:	7b00      	ldrb	r0, [r0, #12]
 8004074:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004078:	b2c0      	uxtb	r0, r0
 800407a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800407c:	4866      	ldr	r0, [pc, #408]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x928>)
 800407e:	7b00      	ldrb	r0, [r0, #12]
 8004080:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8004084:	b2c0      	uxtb	r0, r0
 8004086:	9005      	str	r0, [sp, #20]
 8004088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800408a:	9004      	str	r0, [sp, #16]
 800408c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800408e:	9003      	str	r0, [sp, #12]
 8004090:	9102      	str	r1, [sp, #8]
 8004092:	9201      	str	r2, [sp, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4663      	mov	r3, ip
 8004098:	4632      	mov	r2, r6
 800409a:	4629      	mov	r1, r5
 800409c:	4620      	mov	r0, r4
 800409e:	f7fd fd09 	bl	8001ab4 <ROBOT_STATUS_RxEventCallback>
				break;
 80040a2:	f000 bc6f 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	3308      	adds	r3, #8
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b5b      	ldr	r3, [pc, #364]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040b0:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	330a      	adds	r3, #10
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	4b58      	ldr	r3, [pc, #352]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040bc:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	330c      	adds	r3, #12
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	4b55      	ldr	r3, [pc, #340]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040c8:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	330e      	adds	r3, #14
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	4b52      	ldr	r3, [pc, #328]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040d4:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 80040d6:	4b51      	ldr	r3, [pc, #324]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040d8:	8818      	ldrh	r0, [r3, #0]
 80040da:	4b50      	ldr	r3, [pc, #320]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040dc:	8859      	ldrh	r1, [r3, #2]
 80040de:	4b4f      	ldr	r3, [pc, #316]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040e0:	889a      	ldrh	r2, [r3, #4]
 80040e2:	4b4e      	ldr	r3, [pc, #312]	@ (800421c <HAL_UARTEx_RxEventCallback+0x92c>)
 80040e4:	88db      	ldrh	r3, [r3, #6]
 80040e6:	f7fd fd29 	bl	8001b3c <POWER_HEAT_DATA_RxEventCallback>
				break;
 80040ea:	f000 bc4b 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 80040f6:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b48      	ldr	r3, [pc, #288]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 8004100:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	4b45      	ldr	r3, [pc, #276]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 800410a:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 800410c:	4b44      	ldr	r3, [pc, #272]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	4b43      	ldr	r3, [pc, #268]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 8004114:	ed93 7a01 	vldr	s14, [r3, #4]
 8004118:	4b41      	ldr	r3, [pc, #260]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x930>)
 800411a:	edd3 6a02 	vldr	s13, [r3, #8]
 800411e:	eeb0 1a66 	vmov.f32	s2, s13
 8004122:	eef0 0a47 	vmov.f32	s1, s14
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	f000 fcbe 	bl	8004aaa <ROBOT_POSITION_RxEventCallback>
				break;
 800412e:	f000 bc29 	b.w	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	4b3b      	ldr	r3, [pc, #236]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004138:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 800413a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413c:	3301      	adds	r3, #1
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	4b38      	ldr	r3, [pc, #224]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004142:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 8004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004146:	3302      	adds	r3, #2
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	4b36      	ldr	r3, [pc, #216]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 800414c:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 800414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004150:	3303      	adds	r3, #3
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	4b33      	ldr	r3, [pc, #204]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004156:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	3304      	adds	r3, #4
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29a      	uxth	r2, r3
 8004160:	4b30      	ldr	r3, [pc, #192]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004162:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 8004164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004166:	3305      	adds	r3, #5
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	4b2e      	ldr	r3, [pc, #184]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 800416c:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 800416e:	4b2d      	ldr	r3, [pc, #180]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004170:	7818      	ldrb	r0, [r3, #0]
 8004172:	4b2c      	ldr	r3, [pc, #176]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004174:	7859      	ldrb	r1, [r3, #1]
 8004176:	4b2b      	ldr	r3, [pc, #172]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004178:	789c      	ldrb	r4, [r3, #2]
 800417a:	4b2a      	ldr	r3, [pc, #168]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 800417c:	78dd      	ldrb	r5, [r3, #3]
 800417e:	4b29      	ldr	r3, [pc, #164]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004180:	889b      	ldrh	r3, [r3, #4]
 8004182:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x934>)
 8004184:	7992      	ldrb	r2, [r2, #6]
 8004186:	9201      	str	r2, [sp, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462b      	mov	r3, r5
 800418c:	4622      	mov	r2, r4
 800418e:	f000 fc9b 	bl	8004ac8 <BUFF_RxEventCallback>
				break;
 8004192:	e3f7      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fc01 	bl	80049a4 <UART_RM25_getBits>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x938>)
 80041a8:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2204      	movs	r2, #4
 80041b0:	2104      	movs	r1, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fbf6 	bl	80049a4 <UART_RM25_getBits>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x938>)
 80041be:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x938>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	4a18      	ldr	r2, [pc, #96]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x938>)
 80041c6:	7852      	ldrb	r2, [r2, #1]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fc90 	bl	8004af0 <DAMAGE_SOURCE_RxEventCallback>
				break;
 80041d0:	e3d8      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 80041d8:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 80041da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041dc:	3301      	adds	r3, #1
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 80041e2:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	3302      	adds	r3, #2
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	4b10      	ldr	r3, [pc, #64]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 80041ec:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	3303      	adds	r3, #3
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 80041f8:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4a0b      	ldr	r2, [pc, #44]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 8004200:	7851      	ldrb	r1, [r2, #1]
 8004202:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 8004204:	7892      	ldrb	r2, [r2, #2]
 8004206:	4809      	ldr	r0, [pc, #36]	@ (800422c <HAL_UARTEx_RxEventCallback+0x93c>)
 8004208:	edd0 7a01 	vldr	s15, [r0, #4]
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fc7b 	bl	8004b0c <PROJECTILE_INFO_RxEventCallback>
				break;
 8004216:	e3b5      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 8004218:	200007ec 	.word	0x200007ec
 800421c:	200007fc 	.word	0x200007fc
 8004220:	20000804 	.word	0x20000804
 8004224:	20000810 	.word	0x20000810
 8004228:	20000818 	.word	0x20000818
 800422c:	2000081c 	.word	0x2000081c
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 8004230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29a      	uxth	r2, r3
 8004236:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 8004238:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	3302      	adds	r3, #2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29a      	uxth	r2, r3
 8004242:	4b6c      	ldr	r3, [pc, #432]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 8004244:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	3304      	adds	r3, #4
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29a      	uxth	r2, r3
 800424e:	4b69      	ldr	r3, [pc, #420]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 8004250:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 8004252:	4b68      	ldr	r3, [pc, #416]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	4a67      	ldr	r2, [pc, #412]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 8004258:	8851      	ldrh	r1, [r2, #2]
 800425a:	4a66      	ldr	r2, [pc, #408]	@ (80043f4 <HAL_UARTEx_RxEventCallback+0xb04>)
 800425c:	8892      	ldrh	r2, [r2, #4]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fc65 	bl	8004b2e <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 8004264:	e38e      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 8004266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b62      	ldr	r3, [pc, #392]	@ (80043f8 <HAL_UARTEx_RxEventCallback+0xb08>)
 800426e:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 8004270:	4b61      	ldr	r3, [pc, #388]	@ (80043f8 <HAL_UARTEx_RxEventCallback+0xb08>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fc69 	bl	8004b4c <RFID_RxEventCallback>
				break;
 800427a:	e383      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 800427c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	4b5e      	ldr	r3, [pc, #376]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 8004282:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 8004284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004286:	3302      	adds	r3, #2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b5b      	ldr	r3, [pc, #364]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 800428e:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	3304      	adds	r3, #4
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b58      	ldr	r3, [pc, #352]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 800429a:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 800429c:	4b57      	ldr	r3, [pc, #348]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 80042a2:	8851      	ldrh	r1, [r2, #2]
 80042a4:	4a55      	ldr	r2, [pc, #340]	@ (80043fc <HAL_UARTEx_RxEventCallback+0xb0c>)
 80042a6:	8892      	ldrh	r2, [r2, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fc59 	bl	8004b60 <DART_COMMAND_RxEventCallback>
				break;
 80042ae:	e369      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 80042b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b52      	ldr	r3, [pc, #328]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042b8:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	3304      	adds	r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042c4:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	3308      	adds	r3, #8
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042d0:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 80042d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d4:	330c      	adds	r3, #12
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b49      	ldr	r3, [pc, #292]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042dc:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	3310      	adds	r3, #16
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b46      	ldr	r3, [pc, #280]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042e8:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	3314      	adds	r3, #20
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042f4:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	3318      	adds	r3, #24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004300:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	331c      	adds	r3, #28
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b3d      	ldr	r3, [pc, #244]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 800430c:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 800430e:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004310:	edd3 7a00 	vldr	s15, [r3]
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004316:	ed93 7a01 	vldr	s14, [r3, #4]
 800431a:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 800431c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004320:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004322:	ed93 6a03 	vldr	s12, [r3, #12]
 8004326:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004328:	edd3 5a04 	vldr	s11, [r3, #16]
 800432c:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 800432e:	ed93 5a05 	vldr	s10, [r3, #20]
 8004332:	4b33      	ldr	r3, [pc, #204]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004334:	ed93 3a06 	vldr	s6, [r3, #24]
 8004338:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 800433a:	edd3 3a07 	vldr	s7, [r3, #28]
 800433e:	4b30      	ldr	r3, [pc, #192]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004340:	ed93 4a08 	vldr	s8, [r3, #32]
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004346:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 800434a:	eef0 2a45 	vmov.f32	s5, s10
 800434e:	eeb0 2a65 	vmov.f32	s4, s11
 8004352:	eef0 1a46 	vmov.f32	s3, s12
 8004356:	eeb0 1a66 	vmov.f32	s2, s13
 800435a:	eef0 0a47 	vmov.f32	s1, s14
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	f000 fc0c 	bl	8004b7e <TEAM_POSITION_RxEventCallback>
				break;
 8004366:	e30d      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fb17 	bl	80049a4 <UART_RM25_getBits>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	4b22      	ldr	r3, [pc, #136]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 800437c:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 800437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fb0c 	bl	80049a4 <UART_RM25_getBits>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004392:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fb01 	bl	80049a4 <UART_RM25_getBits>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043a8:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 80043aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	2103      	movs	r1, #3
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 faf6 	bl	80049a4 <UART_RM25_getBits>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043be:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	2104      	movs	r1, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 faeb 	bl	80049a4 <UART_RM25_getBits>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043d4:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043d8:	7818      	ldrb	r0, [r3, #0]
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043dc:	7859      	ldrb	r1, [r3, #1]
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043e0:	789a      	ldrb	r2, [r3, #2]
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043e4:	78dc      	ldrb	r4, [r3, #3]
 80043e6:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <HAL_UARTEx_RxEventCallback+0xb14>)
 80043e8:	791b      	ldrb	r3, [r3, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4623      	mov	r3, r4
 80043ee:	f000 fbe3 	bl	8004bb8 <RADAR_MARKING_RxEventCallback>
				break;
 80043f2:	e2c7      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 80043f4:	20000824 	.word	0x20000824
 80043f8:	2000082c 	.word	0x2000082c
 80043fc:	20000830 	.word	0x20000830
 8004400:	20000838 	.word	0x20000838
 8004404:	20000860 	.word	0x20000860
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 8004408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2203      	movs	r2, #3
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fac3 	bl	80049a4 <UART_RM25_getBits>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 8004424:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004428:	4b88      	ldr	r3, [pc, #544]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 800442a:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2204      	movs	r2, #4
 8004432:	2103      	movs	r1, #3
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fab5 	bl	80049a4 <UART_RM25_getBits>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	4b83      	ldr	r3, [pc, #524]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004440:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2201      	movs	r2, #1
 8004448:	2107      	movs	r1, #7
 800444a:	4618      	mov	r0, r3
 800444c:	f000 faaa 	bl	80049a4 <UART_RM25_getBits>
 8004450:	4603      	mov	r3, r0
 8004452:	b25c      	sxtb	r4, r3
 8004454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004456:	789b      	ldrb	r3, [r3, #2]
 8004458:	2203      	movs	r2, #3
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f000 faa1 	bl	80049a4 <UART_RM25_getBits>
 8004462:	4603      	mov	r3, r0
 8004464:	b25b      	sxtb	r3, r3
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	b25b      	sxtb	r3, r3
 800446a:	4323      	orrs	r3, r4
 800446c:	b25b      	sxtb	r3, r3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b76      	ldr	r3, [pc, #472]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004472:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 8004474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004476:	789b      	ldrb	r3, [r3, #2]
 8004478:	2201      	movs	r2, #1
 800447a:	2103      	movs	r1, #3
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fa91 	bl	80049a4 <UART_RM25_getBits>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b71      	ldr	r3, [pc, #452]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004488:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 800448a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	2201      	movs	r2, #1
 8004490:	2104      	movs	r1, #4
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa86 	bl	80049a4 <UART_RM25_getBits>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	4b6b      	ldr	r3, [pc, #428]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 800449e:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 80044a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a2:	789b      	ldrb	r3, [r3, #2]
 80044a4:	2203      	movs	r2, #3
 80044a6:	2105      	movs	r1, #5
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fa7b 	bl	80049a4 <UART_RM25_getBits>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b25c      	sxtb	r4, r3
 80044b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b4:	78db      	ldrb	r3, [r3, #3]
 80044b6:	2205      	movs	r2, #5
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fa72 	bl	80049a4 <UART_RM25_getBits>
 80044c0:	4603      	mov	r3, r0
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	4323      	orrs	r3, r4
 80044ca:	b25b      	sxtb	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 80044d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d4:	78db      	ldrb	r3, [r3, #3]
 80044d6:	2202      	movs	r2, #2
 80044d8:	2105      	movs	r1, #5
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fa62 	bl	80049a4 <UART_RM25_getBits>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 80044e6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80044ea:	4b58      	ldr	r3, [pc, #352]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044ec:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	791b      	ldrb	r3, [r3, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa54 	bl	80049a4 <UART_RM25_getBits>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	4b52      	ldr	r3, [pc, #328]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004502:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 8004504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004506:	791b      	ldrb	r3, [r3, #4]
 8004508:	2207      	movs	r2, #7
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fa49 	bl	80049a4 <UART_RM25_getBits>
 8004512:	4603      	mov	r3, r0
 8004514:	b25c      	sxtb	r4, r3
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	795b      	ldrb	r3, [r3, #5]
 800451a:	2201      	movs	r2, #1
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa40 	bl	80049a4 <UART_RM25_getBits>
 8004524:	4603      	mov	r3, r0
 8004526:	b25b      	sxtb	r3, r3
 8004528:	01db      	lsls	r3, r3, #7
 800452a:	b25b      	sxtb	r3, r3
 800452c:	4323      	orrs	r3, r4
 800452e:	b25b      	sxtb	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8004536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004538:	795b      	ldrb	r3, [r3, #5]
 800453a:	2203      	movs	r2, #3
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa30 	bl	80049a4 <UART_RM25_getBits>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 800454a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800454e:	4b3f      	ldr	r3, [pc, #252]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004550:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 8004552:	4b3e      	ldr	r3, [pc, #248]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004554:	881c      	ldrh	r4, [r3, #0]
 8004556:	4b3d      	ldr	r3, [pc, #244]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004558:	789d      	ldrb	r5, [r3, #2]
 800455a:	4b3c      	ldr	r3, [pc, #240]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 800455c:	78de      	ldrb	r6, [r3, #3]
 800455e:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004560:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004564:	4b39      	ldr	r3, [pc, #228]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004566:	795b      	ldrb	r3, [r3, #5]
 8004568:	4a38      	ldr	r2, [pc, #224]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 800456a:	88d2      	ldrh	r2, [r2, #6]
 800456c:	4937      	ldr	r1, [pc, #220]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 800456e:	7a09      	ldrb	r1, [r1, #8]
 8004570:	4836      	ldr	r0, [pc, #216]	@ (800464c <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004572:	8940      	ldrh	r0, [r0, #10]
 8004574:	9003      	str	r0, [sp, #12]
 8004576:	9102      	str	r1, [sp, #8]
 8004578:	9201      	str	r2, [sp, #4]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4663      	mov	r3, ip
 800457e:	4632      	mov	r2, r6
 8004580:	4629      	mov	r1, r5
 8004582:	4620      	mov	r0, r4
 8004584:	f000 fb2c 	bl	8004be0 <SENTRY_RxEventCallback>
				break;
 8004588:	e1fc      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 800458a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2201      	movs	r2, #1
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa06 	bl	80049a4 <UART_RM25_getBits>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	4b2c      	ldr	r3, [pc, #176]	@ (8004650 <HAL_UARTEx_RxEventCallback+0xd60>)
 800459e:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 80045a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f9fb 	bl	80049a4 <UART_RM25_getBits>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_UARTEx_RxEventCallback+0xd60>)
 80045b4:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 80045b6:	4b26      	ldr	r3, [pc, #152]	@ (8004650 <HAL_UARTEx_RxEventCallback+0xd60>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <HAL_UARTEx_RxEventCallback+0xd60>)
 80045bc:	7852      	ldrb	r2, [r2, #1]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fb21 	bl	8004c08 <RADAR_BUFF_RxEventCallback>
				break;
 80045c6:	e1dd      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 80045c8:	4a22      	ldr	r2, [pc, #136]	@ (8004654 <HAL_UARTEx_RxEventCallback+0xd64>)
 80045ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	6828      	ldr	r0, [r5, #0]
 80045d2:	6869      	ldr	r1, [r5, #4]
 80045d4:	68aa      	ldr	r2, [r5, #8]
 80045d6:	68eb      	ldr	r3, [r5, #12]
 80045d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045da:	6928      	ldr	r0, [r5, #16]
 80045dc:	6969      	ldr	r1, [r5, #20]
 80045de:	69aa      	ldr	r2, [r5, #24]
 80045e0:	c407      	stmia	r4!, {r0, r1, r2}
 80045e2:	8bab      	ldrh	r3, [r5, #28]
 80045e4:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 80045e6:	481b      	ldr	r0, [pc, #108]	@ (8004654 <HAL_UARTEx_RxEventCallback+0xd64>)
 80045e8:	f7fd f97a 	bl	80018e0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 80045ec:	e1ca      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 80045ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b18      	ldr	r3, [pc, #96]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045f6:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 80045f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fa:	3304      	adds	r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004602:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	3308      	adds	r3, #8
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 800460c:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	3309      	adds	r3, #9
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004616:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 8004618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461a:	330a      	adds	r3, #10
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004622:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 800462c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004632:	7a1b      	ldrb	r3, [r3, #8]
 8004634:	4a08      	ldr	r2, [pc, #32]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 8004636:	7a51      	ldrb	r1, [r2, #9]
 8004638:	4a07      	ldr	r2, [pc, #28]	@ (8004658 <HAL_UARTEx_RxEventCallback+0xd68>)
 800463a:	8952      	ldrh	r2, [r2, #10]
 800463c:	4618      	mov	r0, r3
 800463e:	eef0 0a47 	vmov.f32	s1, s14
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	f000 faed 	bl	8004c24 <MINIMAP_COMMAND_RxEventCallback>
				break;
 800464a:	e19b      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 800464c:	20000868 	.word	0x20000868
 8004650:	20000874 	.word	0x20000874
 8004654:	2000090c 	.word	0x2000090c
 8004658:	20000878 	.word	0x20000878
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29a      	uxth	r2, r3
 8004662:	4b94      	ldr	r3, [pc, #592]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004664:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 8004666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004668:	3302      	adds	r3, #2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29a      	uxth	r2, r3
 800466e:	4b91      	ldr	r3, [pc, #580]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004670:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 8004672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004674:	3304      	adds	r3, #4
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29a      	uxth	r2, r3
 800467a:	4b8e      	ldr	r3, [pc, #568]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800467c:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 800467e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004680:	3306      	adds	r3, #6
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4b8b      	ldr	r3, [pc, #556]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004686:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 8004688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468a:	3307      	adds	r3, #7
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4b89      	ldr	r3, [pc, #548]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004690:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 8004692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004694:	7a1b      	ldrb	r3, [r3, #8]
 8004696:	2201      	movs	r2, #1
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f982 	bl	80049a4 <UART_RM25_getBits>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b83      	ldr	r3, [pc, #524]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046a6:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	7a1b      	ldrb	r3, [r3, #8]
 80046ac:	2201      	movs	r2, #1
 80046ae:	2101      	movs	r1, #1
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f977 	bl	80049a4 <UART_RM25_getBits>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b7e      	ldr	r3, [pc, #504]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046bc:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 80046be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c0:	7a1b      	ldrb	r3, [r3, #8]
 80046c2:	2201      	movs	r2, #1
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f96c 	bl	80049a4 <UART_RM25_getBits>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b78      	ldr	r3, [pc, #480]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046d2:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 80046d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d6:	7a1b      	ldrb	r3, [r3, #8]
 80046d8:	2201      	movs	r2, #1
 80046da:	2103      	movs	r1, #3
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f961 	bl	80049a4 <UART_RM25_getBits>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b73      	ldr	r3, [pc, #460]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046e8:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 80046ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ec:	7a1b      	ldrb	r3, [r3, #8]
 80046ee:	2201      	movs	r2, #1
 80046f0:	2104      	movs	r1, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f956 	bl	80049a4 <UART_RM25_getBits>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b6d      	ldr	r3, [pc, #436]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046fe:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 8004700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004702:	7a1b      	ldrb	r3, [r3, #8]
 8004704:	2201      	movs	r2, #1
 8004706:	2105      	movs	r1, #5
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f94b 	bl	80049a4 <UART_RM25_getBits>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	4b68      	ldr	r3, [pc, #416]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004714:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	7a1b      	ldrb	r3, [r3, #8]
 800471a:	2201      	movs	r2, #1
 800471c:	2106      	movs	r1, #6
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f940 	bl	80049a4 <UART_RM25_getBits>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	4b62      	ldr	r3, [pc, #392]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800472a:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 800472c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472e:	7a1b      	ldrb	r3, [r3, #8]
 8004730:	2201      	movs	r2, #1
 8004732:	2107      	movs	r1, #7
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f935 	bl	80049a4 <UART_RM25_getBits>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004740:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	7a5b      	ldrb	r3, [r3, #9]
 8004746:	2201      	movs	r2, #1
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f92a 	bl	80049a4 <UART_RM25_getBits>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	4b57      	ldr	r3, [pc, #348]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004756:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 8004758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475a:	7a5b      	ldrb	r3, [r3, #9]
 800475c:	2201      	movs	r2, #1
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f91f 	bl	80049a4 <UART_RM25_getBits>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800476c:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	7a5b      	ldrb	r3, [r3, #9]
 8004772:	2201      	movs	r2, #1
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f914 	bl	80049a4 <UART_RM25_getBits>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	4b4c      	ldr	r3, [pc, #304]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004782:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	7a5b      	ldrb	r3, [r3, #9]
 8004788:	2201      	movs	r2, #1
 800478a:	2103      	movs	r1, #3
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f909 	bl	80049a4 <UART_RM25_getBits>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004798:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 800479a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479c:	7a5b      	ldrb	r3, [r3, #9]
 800479e:	2201      	movs	r2, #1
 80047a0:	2104      	movs	r1, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f8fe 	bl	80049a4 <UART_RM25_getBits>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047ae:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 80047b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b2:	7a5b      	ldrb	r3, [r3, #9]
 80047b4:	2201      	movs	r2, #1
 80047b6:	2105      	movs	r1, #5
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f8f3 	bl	80049a4 <UART_RM25_getBits>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b3c      	ldr	r3, [pc, #240]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047c4:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	7a5b      	ldrb	r3, [r3, #9]
 80047ca:	2201      	movs	r2, #1
 80047cc:	2106      	movs	r1, #6
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f8e8 	bl	80049a4 <UART_RM25_getBits>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047da:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 80047dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047de:	7a5b      	ldrb	r3, [r3, #9]
 80047e0:	2201      	movs	r2, #1
 80047e2:	2107      	movs	r1, #7
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f8dd 	bl	80049a4 <UART_RM25_getBits>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f0:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 80047f2:	4b30      	ldr	r3, [pc, #192]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f4:	f9b3 c000 	ldrsh.w	ip, [r3]
 80047f8:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047fa:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004800:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004806:	f893 9006 	ldrb.w	r9, [r3, #6]
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800480c:	79db      	ldrb	r3, [r3, #7]
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004810:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004812:	7b1a      	ldrb	r2, [r3, #12]
 8004814:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004816:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004818:	7b59      	ldrb	r1, [r3, #13]
 800481a:	6279      	str	r1, [r7, #36]	@ 0x24
 800481c:	4b25      	ldr	r3, [pc, #148]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800481e:	7b98      	ldrb	r0, [r3, #14]
 8004820:	6238      	str	r0, [r7, #32]
 8004822:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004824:	7bdc      	ldrb	r4, [r3, #15]
 8004826:	61fc      	str	r4, [r7, #28]
 8004828:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800482a:	7c1d      	ldrb	r5, [r3, #16]
 800482c:	61bd      	str	r5, [r7, #24]
 800482e:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004830:	7c5e      	ldrb	r6, [r3, #17]
 8004832:	617e      	str	r6, [r7, #20]
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004836:	f893 b012 	ldrb.w	fp, [r3, #18]
 800483a:	465b      	mov	r3, fp
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004840:	f893 b013 	ldrb.w	fp, [r3, #19]
 8004844:	465a      	mov	r2, fp
 8004846:	60fa      	str	r2, [r7, #12]
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800484a:	f893 b014 	ldrb.w	fp, [r3, #20]
 800484e:	4659      	mov	r1, fp
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4b18      	ldr	r3, [pc, #96]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004854:	7d5e      	ldrb	r6, [r3, #21]
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004858:	7d9d      	ldrb	r5, [r3, #22]
 800485a:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800485c:	7ddc      	ldrb	r4, [r3, #23]
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004860:	7e18      	ldrb	r0, [r3, #24]
 8004862:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004864:	7e59      	ldrb	r1, [r3, #25]
 8004866:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004868:	7e9a      	ldrb	r2, [r3, #26]
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800486c:	7edb      	ldrb	r3, [r3, #27]
 800486e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004870:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004872:	910e      	str	r1, [sp, #56]	@ 0x38
 8004874:	900d      	str	r0, [sp, #52]	@ 0x34
 8004876:	940c      	str	r4, [sp, #48]	@ 0x30
 8004878:	950b      	str	r5, [sp, #44]	@ 0x2c
 800487a:	960a      	str	r6, [sp, #40]	@ 0x28
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	9208      	str	r2, [sp, #32]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	9307      	str	r3, [sp, #28]
 8004888:	697e      	ldr	r6, [r7, #20]
 800488a:	9606      	str	r6, [sp, #24]
 800488c:	69bd      	ldr	r5, [r7, #24]
 800488e:	9505      	str	r5, [sp, #20]
 8004890:	69fc      	ldr	r4, [r7, #28]
 8004892:	9404      	str	r4, [sp, #16]
 8004894:	6a38      	ldr	r0, [r7, #32]
 8004896:	9003      	str	r0, [sp, #12]
 8004898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800489a:	9102      	str	r1, [sp, #8]
 800489c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800489e:	9201      	str	r2, [sp, #4]
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	464b      	mov	r3, r9
 80048a6:	4642      	mov	r2, r8
 80048a8:	4671      	mov	r1, lr
 80048aa:	4660      	mov	r0, ip
 80048ac:	f7fd f822 	bl	80018f4 <PC_CONTROL_RxEventCallback>
				break;
 80048b0:	e068      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
 80048b2:	bf00      	nop
 80048b4:	200008f0 	.word	0x200008f0
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	4b35      	ldr	r3, [pc, #212]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048be:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	3301      	adds	r3, #1
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	4b32      	ldr	r3, [pc, #200]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048ca:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 80048cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ce:	3303      	adds	r3, #3
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048d6:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	3305      	adds	r3, #5
 80048dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048de:	1d90      	adds	r0, r2, #6
 80048e0:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80048e4:	4602      	mov	r2, r0
 80048e6:	4619      	mov	r1, r3
 80048e8:	f8d1 c000 	ldr.w	ip, [r1]
 80048ec:	684e      	ldr	r6, [r1, #4]
 80048ee:	688d      	ldr	r5, [r1, #8]
 80048f0:	68c9      	ldr	r1, [r1, #12]
 80048f2:	f8c2 c000 	str.w	ip, [r2]
 80048f6:	6056      	str	r6, [r2, #4]
 80048f8:	6095      	str	r5, [r2, #8]
 80048fa:	60d1      	str	r1, [r2, #12]
 80048fc:	3310      	adds	r3, #16
 80048fe:	3010      	adds	r0, #16
 8004900:	42a3      	cmp	r3, r4
 8004902:	d1ef      	bne.n	80048e4 <HAL_UARTEx_RxEventCallback+0xff4>
 8004904:	4602      	mov	r2, r0
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 800490a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490c:	3336      	adds	r3, #54	@ 0x36
 800490e:	4a21      	ldr	r2, [pc, #132]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004910:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8004914:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8004918:	4602      	mov	r2, r0
 800491a:	4619      	mov	r1, r3
 800491c:	f8d1 c000 	ldr.w	ip, [r1]
 8004920:	684e      	ldr	r6, [r1, #4]
 8004922:	688d      	ldr	r5, [r1, #8]
 8004924:	68c9      	ldr	r1, [r1, #12]
 8004926:	f8c2 c000 	str.w	ip, [r2]
 800492a:	6056      	str	r6, [r2, #4]
 800492c:	6095      	str	r5, [r2, #8]
 800492e:	60d1      	str	r1, [r2, #12]
 8004930:	3310      	adds	r3, #16
 8004932:	3010      	adds	r0, #16
 8004934:	42a3      	cmp	r3, r4
 8004936:	d1ef      	bne.n	8004918 <HAL_UARTEx_RxEventCallback+0x1028>
 8004938:	4602      	mov	r2, r0
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 800493e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004940:	3367      	adds	r3, #103	@ 0x67
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29a      	uxth	r2, r3
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004948:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800494e:	7818      	ldrb	r0, [r3, #0]
 8004950:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004952:	8859      	ldrh	r1, [r3, #2]
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004956:	889a      	ldrh	r2, [r3, #4]
 8004958:	4b0e      	ldr	r3, [pc, #56]	@ (8004994 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800495a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <HAL_UARTEx_RxEventCallback+0x10a8>)
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <HAL_UARTEx_RxEventCallback+0x10ac>)
 8004966:	f000 f970 	bl	8004c4a <MINIMAP_DATA_RxEventCallback>
				break;
 800496a:	e00b      	b.n	8004984 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 800496c:	4a0c      	ldr	r2, [pc, #48]	@ (80049a0 <HAL_UARTEx_RxEventCallback+0x10b0>)
 800496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	461a      	mov	r2, r3
 8004978:	f00c faae 	bl	8010ed8 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 800497c:	4808      	ldr	r0, [pc, #32]	@ (80049a0 <HAL_UARTEx_RxEventCallback+0x10b0>)
 800497e:	f000 f974 	bl	8004c6a <CUSTOM_MESSAGE_RxEventCallback>
				break;
 8004982:	bf00      	nop
 8004984:	46d5      	mov	sp, sl
 8004986:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}

}
 800498a:	bf00      	nop
 800498c:	3774      	adds	r7, #116	@ 0x74
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004994:	20000884 	.word	0x20000884
 8004998:	200008bb 	.word	0x200008bb
 800499c:	2000088a 	.word	0x2000088a
 80049a0:	2000092c 	.word	0x2000092c

080049a4 <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
 80049ae:	460b      	mov	r3, r1
 80049b0:	71bb      	strb	r3, [r7, #6]
 80049b2:	4613      	mov	r3, r2
 80049b4:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80049ba:	2300      	movs	r3, #0
 80049bc:	73bb      	strb	r3, [r7, #14]
 80049be:	e013      	b.n	80049e8 <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 80049c0:	79fa      	ldrb	r2, [r7, #7]
 80049c2:	79b9      	ldrb	r1, [r7, #6]
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	440b      	add	r3, r1
 80049c8:	fa42 f303 	asr.w	r3, r2, r3
 80049cc:	f003 0201 	and.w	r2, r3, #1
 80049d0:	7bbb      	ldrb	r3, [r7, #14]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	b25a      	sxtb	r2, r3
 80049d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049dc:	4313      	orrs	r3, r2
 80049de:	b25b      	sxtb	r3, r3
 80049e0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	3301      	adds	r3, #1
 80049e6:	73bb      	strb	r3, [r7, #14]
 80049e8:	7bba      	ldrb	r2, [r7, #14]
 80049ea:	797b      	ldrb	r3, [r7, #5]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d3e7      	bcc.n	80049c0 <UART_RM25_getBits+0x1c>
	}
	return result;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8004a14:	b490      	push	{r4, r7}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	80fb      	strh	r3, [r7, #6]
 8004a26:	4603      	mov	r3, r0
 8004a28:	80bb      	strh	r3, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	807b      	strh	r3, [r7, #2]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc90      	pop	{r4, r7}
 8004a3a:	4770      	bx	lr

08004a3c <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8004a3c:	b490      	push	{r4, r7}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71bb      	strb	r3, [r7, #6]
 8004a52:	460b      	mov	r3, r1
 8004a54:	717b      	strb	r3, [r7, #5]
 8004a56:	4613      	mov	r3, r2
 8004a58:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc90      	pop	{r4, r7}
 8004a62:	4770      	bx	lr

08004a64 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	71bb      	strb	r3, [r7, #6]
 8004a72:	4613      	mov	r3, r2
 8004a74:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 8004a82:	b490      	push	{r4, r7}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4623      	mov	r3, r4
 8004a92:	71fb      	strb	r3, [r7, #7]
 8004a94:	4603      	mov	r3, r0
 8004a96:	71bb      	strb	r3, [r7, #6]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	717b      	strb	r3, [r7, #5]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc90      	pop	{r4, r7}
 8004aa8:	4770      	bx	lr

08004aaa <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ab4:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ab8:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 8004ac8:	b490      	push	{r4, r7}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	71fb      	strb	r3, [r7, #7]
 8004ada:	4603      	mov	r3, r0
 8004adc:	71bb      	strb	r3, [r7, #6]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	717b      	strb	r3, [r7, #5]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc90      	pop	{r4, r7}
 8004aee:	4770      	bx	lr

08004af0 <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	460a      	mov	r2, r1
 8004afa:	71fb      	strb	r3, [r7, #7]
 8004afc:	4613      	mov	r3, r2
 8004afe:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <PROJECTILE_INFO_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	ed87 0a00 	vstr	s0, [r7]
 8004b18:	71fb      	strb	r3, [r7, #7]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	71bb      	strb	r3, [r7, #6]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	4603      	mov	r3, r0
 8004b36:	80fb      	strh	r3, [r7, #6]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	80bb      	strh	r3, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	80bb      	strh	r3, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8004b7e:	b480      	push	{r7}
 8004b80:	b08b      	sub	sp, #44	@ 0x2c
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004b88:	edc7 0a08 	vstr	s1, [r7, #32]
 8004b8c:	ed87 1a07 	vstr	s2, [r7, #28]
 8004b90:	edc7 1a06 	vstr	s3, [r7, #24]
 8004b94:	ed87 2a05 	vstr	s4, [r7, #20]
 8004b98:	edc7 2a04 	vstr	s5, [r7, #16]
 8004b9c:	ed87 3a03 	vstr	s6, [r7, #12]
 8004ba0:	edc7 3a02 	vstr	s7, [r7, #8]
 8004ba4:	ed87 4a01 	vstr	s8, [r7, #4]
 8004ba8:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8004bac:	bf00      	nop
 8004bae:	372c      	adds	r7, #44	@ 0x2c
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 8004bb8:	b490      	push	{r4, r7}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71bb      	strb	r3, [r7, #6]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	717b      	strb	r3, [r7, #5]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc90      	pop	{r4, r7}
 8004bde:	4770      	bx	lr

08004be0 <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8004be0:	b490      	push	{r4, r7}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	80fb      	strh	r3, [r7, #6]
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	717b      	strb	r3, [r7, #5]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	713b      	strb	r3, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc90      	pop	{r4, r7}
 8004c06:	4770      	bx	lr

08004c08 <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	460a      	mov	r2, r1
 8004c12:	71fb      	strb	r3, [r7, #7]
 8004c14:	4613      	mov	r3, r2
 8004c16:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
 8004c36:	460b      	mov	r3, r1
 8004c38:	71bb      	strb	r3, [r7, #6]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	4603      	mov	r3, r0
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	460b      	mov	r3, r1
 8004c58:	81bb      	strh	r3, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8004c8a:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <imu_pwm_set+0x1c>)
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40014400 	.word	0x40014400

08004ca0 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8004ca8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004cac:	f008 fcb4 	bl	800d618 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8004cb0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004d54 <imu_temp_control_task+0xb4>
 8004cb4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8004d58 <imu_temp_control_task+0xb8>
 8004cb8:	4a28      	ldr	r2, [pc, #160]	@ (8004d5c <imu_temp_control_task+0xbc>)
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4828      	ldr	r0, [pc, #160]	@ (8004d60 <imu_temp_control_task+0xc0>)
 8004cbe:	f002 fad3 	bl	8007268 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004cc2:	4b28      	ldr	r3, [pc, #160]	@ (8004d64 <imu_temp_control_task+0xc4>)
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004cc8:	4826      	ldr	r0, [pc, #152]	@ (8004d64 <imu_temp_control_task+0xc4>)
 8004cca:	f005 ff5e 	bl	800ab8a <HAL_SPI_Init>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8004cd4:	f002 fac2 	bl	800725c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f009 fdbb 	bl	800e854 <pcTaskGetName>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f009 fe4b 	bl	800e97c <xTaskGetHandle>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d68 <imu_temp_control_task+0xc8>)
 8004cea:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8004cec:	4b1f      	ldr	r3, [pc, #124]	@ (8004d6c <imu_temp_control_task+0xcc>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8004cf2:	bf00      	nop
 8004cf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f00a fa6b 	bl	800f1d4 <ulTaskNotifyTake>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d1f7      	bne.n	8004cf4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8004d04:	f7fc faa8 	bl	8001258 <IMU_get_temp>
 8004d08:	eef0 7a40 	vmov.f32	s15, s0
 8004d0c:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004d70 <imu_temp_control_task+0xd0>
 8004d10:	eeb0 0a67 	vmov.f32	s0, s15
 8004d14:	4812      	ldr	r0, [pc, #72]	@ (8004d60 <imu_temp_control_task+0xc0>)
 8004d16:	f002 fafe 	bl	8007316 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <imu_temp_control_task+0xc0>)
 8004d1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	d503      	bpl.n	8004d32 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <imu_temp_control_task+0xc0>)
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <imu_temp_control_task+0xc0>)
 8004d34:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3c:	ee17 3a90 	vmov	r3, s15
 8004d40:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8004d42:	89fb      	ldrh	r3, [r7, #14]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff9b 	bl	8004c80 <imu_pwm_set>
        osDelay(5);
 8004d4a:	2005      	movs	r0, #5
 8004d4c:	f008 fc64 	bl	800d618 <osDelay>
    {
 8004d50:	e7cf      	b.n	8004cf2 <imu_temp_control_task+0x52>
 8004d52:	bf00      	nop
 8004d54:	45898000 	.word	0x45898000
 8004d58:	458ca000 	.word	0x458ca000
 8004d5c:	08013ad4 	.word	0x08013ad4
 8004d60:	200009b4 	.word	0x200009b4
 8004d64:	20000ab4 	.word	0x20000ab4
 8004d68:	200009ac 	.word	0x200009ac
 8004d6c:	200009b0 	.word	0x200009b0
 8004d70:	42200000 	.word	0x42200000

08004d74 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8004d7e:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_GPIO_EXTI_Callback+0x54>)
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d11b      	bne.n	8004dc0 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8004d88:	4b10      	ldr	r3, [pc, #64]	@ (8004dcc <HAL_GPIO_EXTI_Callback+0x58>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004d92:	f00a f991 	bl	800f0b8 <xTaskGetSchedulerState>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d011      	beq.n	8004dc0 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <HAL_GPIO_EXTI_Callback+0x60>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f00a fa62 	bl	800f26c <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <HAL_GPIO_EXTI_Callback+0x60>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <HAL_GPIO_EXTI_Callback+0x4c>
 8004db0:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <HAL_GPIO_EXTI_Callback+0x64>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000000e 	.word	0x2000000e
 8004dcc:	200009b0 	.word	0x200009b0
 8004dd0:	200009ac 	.word	0x200009ac
 8004dd4:	200009fc 	.word	0x200009fc
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004de0:	f003 fb56 	bl	8008490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004de4:	f000 f866 	bl	8004eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004de8:	f000 fcd8 	bl	800579c <MX_GPIO_Init>
  MX_DMA_Init();
 8004dec:	f000 fc98 	bl	8005720 <MX_DMA_Init>
  MX_CAN1_Init();
 8004df0:	f000 f8cc 	bl	8004f8c <MX_CAN1_Init>
  MX_CAN2_Init();
 8004df4:	f000 f900 	bl	8004ff8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8004df8:	f000 f962 	bl	80050c0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8004dfc:	f000 fa3e 	bl	800527c <MX_TIM4_Init>
  // MX_USART1_UART_Init();
  MX_USART6_UART_Init();
 8004e00:	f000 fc64 	bl	80056cc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004e04:	f000 f992 	bl	800512c <MX_TIM1_Init>
  MX_TIM8_Init();
 8004e08:	f000 fb20 	bl	800544c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8004e0c:	f000 fc32 	bl	8005674 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004e10:	f000 fbb8 	bl	8005584 <MX_TIM10_Init>
  MX_I2C3_Init();
 8004e14:	f000 f926 	bl	8005064 <MX_I2C3_Init>
  MX_TIM5_Init();
 8004e18:	f000 faa8 	bl	800536c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <main+0x98>)
 8004e1e:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <main+0x9c>)
 8004e20:	4916      	ldr	r1, [pc, #88]	@ (8004e7c <main+0xa0>)
 8004e22:	4817      	ldr	r0, [pc, #92]	@ (8004e80 <main+0xa4>)
 8004e24:	f002 fbc0 	bl	80075a8 <PWMInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004e28:	f008 fb1a 	bl	800d460 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8004e2c:	4a15      	ldr	r2, [pc, #84]	@ (8004e84 <main+0xa8>)
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4815      	ldr	r0, [pc, #84]	@ (8004e88 <main+0xac>)
 8004e32:	f008 fb5f 	bl	800d4f4 <osThreadNew>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4a14      	ldr	r2, [pc, #80]	@ (8004e8c <main+0xb0>)
 8004e3a:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <main+0xb4>)
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4814      	ldr	r0, [pc, #80]	@ (8004e94 <main+0xb8>)
 8004e42:	f008 fb57 	bl	800d4f4 <osThreadNew>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4a13      	ldr	r2, [pc, #76]	@ (8004e98 <main+0xbc>)
 8004e4a:	6013      	str	r3, [r2, #0]

  /* creation of TurretTask */
  TurretTaskHandle = osThreadNew(StartTurretTask, NULL, &TurretTask_attributes);
 8004e4c:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <main+0xc0>)
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4813      	ldr	r0, [pc, #76]	@ (8004ea0 <main+0xc4>)
 8004e52:	f008 fb4f 	bl	800d4f4 <osThreadNew>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <main+0xc8>)
 8004e5a:	6013      	str	r3, [r2, #0]

  /* creation of SentryAutonomy */
  SentryAutonomyHandle = osThreadNew(StartSentryAutonomy, NULL, &SentryAutonomy_attributes);
 8004e5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ea8 <main+0xcc>)
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4812      	ldr	r0, [pc, #72]	@ (8004eac <main+0xd0>)
 8004e62:	f008 fb47 	bl	800d4f4 <osThreadNew>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <main+0xd4>)
 8004e6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004e6c:	f008 fb1c 	bl	800d4a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <main+0x94>
 8004e74:	20000be4 	.word	0x20000be4
 8004e78:	20000b9c 	.word	0x20000b9c
 8004e7c:	20000b54 	.word	0x20000b54
 8004e80:	20000b0c 	.word	0x20000b0c
 8004e84:	08013ae0 	.word	0x08013ae0
 8004e88:	08006295 	.word	0x08006295
 8004e8c:	20000e6c 	.word	0x20000e6c
 8004e90:	08013b04 	.word	0x08013b04
 8004e94:	08004ca1 	.word	0x08004ca1
 8004e98:	20000e70 	.word	0x20000e70
 8004e9c:	08013b28 	.word	0x08013b28
 8004ea0:	08006381 	.word	0x08006381
 8004ea4:	20000e74 	.word	0x20000e74
 8004ea8:	08013b4c 	.word	0x08013b4c
 8004eac:	08006da1 	.word	0x08006da1
 8004eb0:	20000e78 	.word	0x20000e78

08004eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b094      	sub	sp, #80	@ 0x50
 8004eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eba:	f107 0320 	add.w	r3, r7, #32
 8004ebe:	2230      	movs	r2, #48	@ 0x30
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f00b ff70 	bl	8010da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <SystemClock_Config+0xd0>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <SystemClock_Config+0xd0>)
 8004ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee8:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <SystemClock_Config+0xd0>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	4b23      	ldr	r3, [pc, #140]	@ (8004f88 <SystemClock_Config+0xd4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a22      	ldr	r2, [pc, #136]	@ (8004f88 <SystemClock_Config+0xd4>)
 8004efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <SystemClock_Config+0xd4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004f24:	2306      	movs	r3, #6
 8004f26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004f28:	23a8      	movs	r3, #168	@ 0xa8
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f30:	2304      	movs	r3, #4
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f34:	f107 0320 	add.w	r3, r7, #32
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f005 f9a7 	bl	800a28c <HAL_RCC_OscConfig>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f44:	f002 f98a 	bl	800725c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f48:	230f      	movs	r3, #15
 8004f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	2105      	movs	r1, #5
 8004f66:	4618      	mov	r0, r3
 8004f68:	f005 fc08 	bl	800a77c <HAL_RCC_ClockConfig>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f72:	f002 f973 	bl	800725c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004f76:	f005 fce7 	bl	800a948 <HAL_RCC_EnableCSS>
}
 8004f7a:	bf00      	nop
 8004f7c:	3750      	adds	r7, #80	@ 0x50
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000

08004f8c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004f90:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004f92:	4a18      	ldr	r2, [pc, #96]	@ (8004ff4 <MX_CAN1_Init+0x68>)
 8004f94:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8004f96:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004f98:	2203      	movs	r2, #3
 8004f9a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004faa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8004fae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004fb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004fca:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004fdc:	4804      	ldr	r0, [pc, #16]	@ (8004ff0 <MX_CAN1_Init+0x64>)
 8004fde:	f003 fac9 	bl	8008574 <HAL_CAN_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004fe8:	f002 f938 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000a10 	.word	0x20000a10
 8004ff4:	40006400 	.word	0x40006400

08004ff8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004ffc:	4b17      	ldr	r3, [pc, #92]	@ (800505c <MX_CAN2_Init+0x64>)
 8004ffe:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <MX_CAN2_Init+0x68>)
 8005000:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8005002:	4b16      	ldr	r3, [pc, #88]	@ (800505c <MX_CAN2_Init+0x64>)
 8005004:	2203      	movs	r2, #3
 8005006:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8005008:	4b14      	ldr	r3, [pc, #80]	@ (800505c <MX_CAN2_Init+0x64>)
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800500e:	4b13      	ldr	r3, [pc, #76]	@ (800505c <MX_CAN2_Init+0x64>)
 8005010:	2200      	movs	r2, #0
 8005012:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005014:	4b11      	ldr	r3, [pc, #68]	@ (800505c <MX_CAN2_Init+0x64>)
 8005016:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800501a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800501c:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <MX_CAN2_Init+0x64>)
 800501e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005022:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8005024:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <MX_CAN2_Init+0x64>)
 8005026:	2200      	movs	r2, #0
 8005028:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800502a:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <MX_CAN2_Init+0x64>)
 800502c:	2200      	movs	r2, #0
 800502e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8005030:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <MX_CAN2_Init+0x64>)
 8005032:	2200      	movs	r2, #0
 8005034:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8005036:	4b09      	ldr	r3, [pc, #36]	@ (800505c <MX_CAN2_Init+0x64>)
 8005038:	2200      	movs	r2, #0
 800503a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800503c:	4b07      	ldr	r3, [pc, #28]	@ (800505c <MX_CAN2_Init+0x64>)
 800503e:	2200      	movs	r2, #0
 8005040:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <MX_CAN2_Init+0x64>)
 8005044:	2200      	movs	r2, #0
 8005046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8005048:	4804      	ldr	r0, [pc, #16]	@ (800505c <MX_CAN2_Init+0x64>)
 800504a:	f003 fa93 	bl	8008574 <HAL_CAN_Init>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8005054:	f002 f902 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8005058:	bf00      	nop
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000a38 	.word	0x20000a38
 8005060:	40006800 	.word	0x40006800

08005064 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <MX_I2C3_Init+0x50>)
 800506a:	4a13      	ldr	r2, [pc, #76]	@ (80050b8 <MX_I2C3_Init+0x54>)
 800506c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800506e:	4b11      	ldr	r3, [pc, #68]	@ (80050b4 <MX_I2C3_Init+0x50>)
 8005070:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <MX_I2C3_Init+0x58>)
 8005072:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005074:	4b0f      	ldr	r3, [pc, #60]	@ (80050b4 <MX_I2C3_Init+0x50>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800507a:	4b0e      	ldr	r3, [pc, #56]	@ (80050b4 <MX_I2C3_Init+0x50>)
 800507c:	2200      	movs	r2, #0
 800507e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005080:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <MX_I2C3_Init+0x50>)
 8005082:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005086:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005088:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <MX_I2C3_Init+0x50>)
 800508a:	2200      	movs	r2, #0
 800508c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800508e:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <MX_I2C3_Init+0x50>)
 8005090:	2200      	movs	r2, #0
 8005092:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005094:	4b07      	ldr	r3, [pc, #28]	@ (80050b4 <MX_I2C3_Init+0x50>)
 8005096:	2200      	movs	r2, #0
 8005098:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800509a:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <MX_I2C3_Init+0x50>)
 800509c:	2200      	movs	r2, #0
 800509e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80050a0:	4804      	ldr	r0, [pc, #16]	@ (80050b4 <MX_I2C3_Init+0x50>)
 80050a2:	f004 ffaf 	bl	800a004 <HAL_I2C_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80050ac:	f002 f8d6 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80050b0:	bf00      	nop
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000a60 	.word	0x20000a60
 80050b8:	40005c00 	.word	0x40005c00
 80050bc:	00061a80 	.word	0x00061a80

080050c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80050c4:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050c6:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <MX_SPI1_Init+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050ca:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80050d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050d2:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050da:	2200      	movs	r2, #0
 80050dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050e0:	2202      	movs	r2, #2
 80050e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80050f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050f4:	2238      	movs	r2, #56	@ 0x38
 80050f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <MX_SPI1_Init+0x64>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80050fe:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <MX_SPI1_Init+0x64>)
 8005100:	2200      	movs	r2, #0
 8005102:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <MX_SPI1_Init+0x64>)
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <MX_SPI1_Init+0x64>)
 800510c:	220a      	movs	r2, #10
 800510e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005110:	4804      	ldr	r0, [pc, #16]	@ (8005124 <MX_SPI1_Init+0x64>)
 8005112:	f005 fd3a 	bl	800ab8a <HAL_SPI_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800511c:	f002 f89e 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000ab4 	.word	0x20000ab4
 8005128:	40013000 	.word	0x40013000

0800512c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b092      	sub	sp, #72	@ 0x48
 8005130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005132:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800513c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	611a      	str	r2, [r3, #16]
 800514c:	615a      	str	r2, [r3, #20]
 800514e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	2220      	movs	r2, #32
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f00b fe26 	bl	8010da8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800515c:	4b45      	ldr	r3, [pc, #276]	@ (8005274 <MX_TIM1_Init+0x148>)
 800515e:	4a46      	ldr	r2, [pc, #280]	@ (8005278 <MX_TIM1_Init+0x14c>)
 8005160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005162:	4b44      	ldr	r3, [pc, #272]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005164:	2253      	movs	r2, #83	@ 0x53
 8005166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005168:	4b42      	ldr	r3, [pc, #264]	@ (8005274 <MX_TIM1_Init+0x148>)
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800516e:	4b41      	ldr	r3, [pc, #260]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005170:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005176:	4b3f      	ldr	r3, [pc, #252]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005178:	2200      	movs	r2, #0
 800517a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800517c:	4b3d      	ldr	r3, [pc, #244]	@ (8005274 <MX_TIM1_Init+0x148>)
 800517e:	2200      	movs	r2, #0
 8005180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005182:	4b3c      	ldr	r3, [pc, #240]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005184:	2200      	movs	r2, #0
 8005186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005188:	483a      	ldr	r0, [pc, #232]	@ (8005274 <MX_TIM1_Init+0x148>)
 800518a:	f006 f8c5 	bl	800b318 <HAL_TIM_PWM_Init>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005194:	f002 f862 	bl	800725c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80051a4:	4619      	mov	r1, r3
 80051a6:	4833      	ldr	r0, [pc, #204]	@ (8005274 <MX_TIM1_Init+0x148>)
 80051a8:	f006 fede 	bl	800bf68 <HAL_TIMEx_MasterConfigSynchronization>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80051b2:	f002 f853 	bl	800725c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051b6:	2360      	movs	r3, #96	@ 0x60
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051be:	2300      	movs	r3, #0
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051c2:	2300      	movs	r3, #0
 80051c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d6:	2200      	movs	r2, #0
 80051d8:	4619      	mov	r1, r3
 80051da:	4826      	ldr	r0, [pc, #152]	@ (8005274 <MX_TIM1_Init+0x148>)
 80051dc:	f006 fa24 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80051e6:	f002 f839 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ee:	2204      	movs	r2, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4820      	ldr	r0, [pc, #128]	@ (8005274 <MX_TIM1_Init+0x148>)
 80051f4:	f006 fa18 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80051fe:	f002 f82d 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005206:	2208      	movs	r2, #8
 8005208:	4619      	mov	r1, r3
 800520a:	481a      	ldr	r0, [pc, #104]	@ (8005274 <MX_TIM1_Init+0x148>)
 800520c:	f006 fa0c 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8005216:	f002 f821 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800521a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800521e:	220c      	movs	r2, #12
 8005220:	4619      	mov	r1, r3
 8005222:	4814      	ldr	r0, [pc, #80]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005224:	f006 fa00 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800522e:	f002 f815 	bl	800725c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800524a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4807      	ldr	r0, [pc, #28]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005256:	f006 ff03 	bl	800c060 <HAL_TIMEx_ConfigBreakDeadTime>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005260:	f001 fffc 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005264:	4803      	ldr	r0, [pc, #12]	@ (8005274 <MX_TIM1_Init+0x148>)
 8005266:	f002 fd13 	bl	8007c90 <HAL_TIM_MspPostInit>

}
 800526a:	bf00      	nop
 800526c:	3748      	adds	r7, #72	@ 0x48
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000b0c 	.word	0x20000b0c
 8005278:	40010000 	.word	0x40010000

0800527c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	@ 0x38
 8005280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
 800528c:	609a      	str	r2, [r3, #8]
 800528e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005290:	f107 0320 	add.w	r3, r7, #32
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
 80052a8:	615a      	str	r2, [r3, #20]
 80052aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80052ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005368 <MX_TIM4_Init+0xec>)
 80052b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80052b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80052be:	4b29      	ldr	r3, [pc, #164]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052c0:	f245 2207 	movw	r2, #20999	@ 0x5207
 80052c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052c6:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052ce:	2280      	movs	r2, #128	@ 0x80
 80052d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80052d2:	4824      	ldr	r0, [pc, #144]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052d4:	f005 ff68 	bl	800b1a8 <HAL_TIM_Base_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80052de:	f001 ffbd 	bl	800725c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80052e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052ec:	4619      	mov	r1, r3
 80052ee:	481d      	ldr	r0, [pc, #116]	@ (8005364 <MX_TIM4_Init+0xe8>)
 80052f0:	f006 fa5c 	bl	800b7ac <HAL_TIM_ConfigClockSource>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80052fa:	f001 ffaf 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80052fe:	4819      	ldr	r0, [pc, #100]	@ (8005364 <MX_TIM4_Init+0xe8>)
 8005300:	f006 f80a 	bl	800b318 <HAL_TIM_PWM_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800530a:	f001 ffa7 	bl	800725c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005316:	f107 0320 	add.w	r3, r7, #32
 800531a:	4619      	mov	r1, r3
 800531c:	4811      	ldr	r0, [pc, #68]	@ (8005364 <MX_TIM4_Init+0xe8>)
 800531e:	f006 fe23 	bl	800bf68 <HAL_TIMEx_MasterConfigSynchronization>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005328:	f001 ff98 	bl	800725c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800532c:	2360      	movs	r3, #96	@ 0x60
 800532e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8005330:	f642 1303 	movw	r3, #10499	@ 0x2903
 8005334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	2208      	movs	r2, #8
 8005342:	4619      	mov	r1, r3
 8005344:	4807      	ldr	r0, [pc, #28]	@ (8005364 <MX_TIM4_Init+0xe8>)
 8005346:	f006 f96f 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005350:	f001 ff84 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005354:	4803      	ldr	r0, [pc, #12]	@ (8005364 <MX_TIM4_Init+0xe8>)
 8005356:	f002 fc9b 	bl	8007c90 <HAL_TIM_MspPostInit>

}
 800535a:	bf00      	nop
 800535c:	3738      	adds	r7, #56	@ 0x38
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000b54 	.word	0x20000b54
 8005368:	40000800 	.word	0x40000800

0800536c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005372:	f107 0320 	add.w	r3, r7, #32
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	615a      	str	r2, [r3, #20]
 800538c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800538e:	4b2d      	ldr	r3, [pc, #180]	@ (8005444 <MX_TIM5_Init+0xd8>)
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <MX_TIM5_Init+0xdc>)
 8005392:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8005394:	4b2b      	ldr	r3, [pc, #172]	@ (8005444 <MX_TIM5_Init+0xd8>)
 8005396:	222a      	movs	r2, #42	@ 0x2a
 8005398:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800539a:	4b2a      	ldr	r3, [pc, #168]	@ (8005444 <MX_TIM5_Init+0xd8>)
 800539c:	2200      	movs	r2, #0
 800539e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80053a0:	4b28      	ldr	r3, [pc, #160]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053a2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80053a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053a8:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ae:	4b25      	ldr	r3, [pc, #148]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80053b4:	4823      	ldr	r0, [pc, #140]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053b6:	f005 ffaf 	bl	800b318 <HAL_TIM_PWM_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80053c0:	f001 ff4c 	bl	800725c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80053cc:	f107 0320 	add.w	r3, r7, #32
 80053d0:	4619      	mov	r1, r3
 80053d2:	481c      	ldr	r0, [pc, #112]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053d4:	f006 fdc8 	bl	800bf68 <HAL_TIMEx_MasterConfigSynchronization>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80053de:	f001 ff3d 	bl	800725c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053e2:	2360      	movs	r3, #96	@ 0x60
 80053e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	2200      	movs	r2, #0
 80053f6:	4619      	mov	r1, r3
 80053f8:	4812      	ldr	r0, [pc, #72]	@ (8005444 <MX_TIM5_Init+0xd8>)
 80053fa:	f006 f915 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005404:	f001 ff2a 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	2204      	movs	r2, #4
 800540c:	4619      	mov	r1, r3
 800540e:	480d      	ldr	r0, [pc, #52]	@ (8005444 <MX_TIM5_Init+0xd8>)
 8005410:	f006 f90a 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800541a:	f001 ff1f 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	2208      	movs	r2, #8
 8005422:	4619      	mov	r1, r3
 8005424:	4807      	ldr	r0, [pc, #28]	@ (8005444 <MX_TIM5_Init+0xd8>)
 8005426:	f006 f8ff 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8005430:	f001 ff14 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005434:	4803      	ldr	r0, [pc, #12]	@ (8005444 <MX_TIM5_Init+0xd8>)
 8005436:	f002 fc2b 	bl	8007c90 <HAL_TIM_MspPostInit>

}
 800543a:	bf00      	nop
 800543c:	3728      	adds	r7, #40	@ 0x28
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000b9c 	.word	0x20000b9c
 8005448:	40000c00 	.word	0x40000c00

0800544c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b092      	sub	sp, #72	@ 0x48
 8005450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800545c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
 800546c:	615a      	str	r2, [r3, #20]
 800546e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	2220      	movs	r2, #32
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f00b fc96 	bl	8010da8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800547c:	4b3f      	ldr	r3, [pc, #252]	@ (800557c <MX_TIM8_Init+0x130>)
 800547e:	4a40      	ldr	r2, [pc, #256]	@ (8005580 <MX_TIM8_Init+0x134>)
 8005480:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8005482:	4b3e      	ldr	r3, [pc, #248]	@ (800557c <MX_TIM8_Init+0x130>)
 8005484:	2253      	movs	r2, #83	@ 0x53
 8005486:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005488:	4b3c      	ldr	r3, [pc, #240]	@ (800557c <MX_TIM8_Init+0x130>)
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800548e:	4b3b      	ldr	r3, [pc, #236]	@ (800557c <MX_TIM8_Init+0x130>)
 8005490:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005494:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005496:	4b39      	ldr	r3, [pc, #228]	@ (800557c <MX_TIM8_Init+0x130>)
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800549c:	4b37      	ldr	r3, [pc, #220]	@ (800557c <MX_TIM8_Init+0x130>)
 800549e:	2200      	movs	r2, #0
 80054a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054a2:	4b36      	ldr	r3, [pc, #216]	@ (800557c <MX_TIM8_Init+0x130>)
 80054a4:	2280      	movs	r2, #128	@ 0x80
 80054a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80054a8:	4834      	ldr	r0, [pc, #208]	@ (800557c <MX_TIM8_Init+0x130>)
 80054aa:	f005 ff35 	bl	800b318 <HAL_TIM_PWM_Init>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80054b4:	f001 fed2 	bl	800725c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054b8:	2300      	movs	r3, #0
 80054ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80054c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054c4:	4619      	mov	r1, r3
 80054c6:	482d      	ldr	r0, [pc, #180]	@ (800557c <MX_TIM8_Init+0x130>)
 80054c8:	f006 fd4e 	bl	800bf68 <HAL_TIMEx_MasterConfigSynchronization>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80054d2:	f001 fec3 	bl	800725c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d6:	2360      	movs	r3, #96	@ 0x60
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054de:	2300      	movs	r3, #0
 80054e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80054e2:	2300      	movs	r3, #0
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80054ee:	2300      	movs	r3, #0
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054f6:	2200      	movs	r2, #0
 80054f8:	4619      	mov	r1, r3
 80054fa:	4820      	ldr	r0, [pc, #128]	@ (800557c <MX_TIM8_Init+0x130>)
 80054fc:	f006 f894 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8005506:	f001 fea9 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800550a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800550e:	2204      	movs	r2, #4
 8005510:	4619      	mov	r1, r3
 8005512:	481a      	ldr	r0, [pc, #104]	@ (800557c <MX_TIM8_Init+0x130>)
 8005514:	f006 f888 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800551e:	f001 fe9d 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005526:	2208      	movs	r2, #8
 8005528:	4619      	mov	r1, r3
 800552a:	4814      	ldr	r0, [pc, #80]	@ (800557c <MX_TIM8_Init+0x130>)
 800552c:	f006 f87c 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8005536:	f001 fe91 	bl	800725c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800554e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005552:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4807      	ldr	r0, [pc, #28]	@ (800557c <MX_TIM8_Init+0x130>)
 800555e:	f006 fd7f 	bl	800c060 <HAL_TIMEx_ConfigBreakDeadTime>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8005568:	f001 fe78 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800556c:	4803      	ldr	r0, [pc, #12]	@ (800557c <MX_TIM8_Init+0x130>)
 800556e:	f002 fb8f 	bl	8007c90 <HAL_TIM_MspPostInit>

}
 8005572:	bf00      	nop
 8005574:	3748      	adds	r7, #72	@ 0x48
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000be4 	.word	0x20000be4
 8005580:	40010400 	.word	0x40010400

08005584 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	60da      	str	r2, [r3, #12]
 8005596:	611a      	str	r2, [r3, #16]
 8005598:	615a      	str	r2, [r3, #20]
 800559a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800559c:	4b1e      	ldr	r3, [pc, #120]	@ (8005618 <MX_TIM10_Init+0x94>)
 800559e:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <MX_TIM10_Init+0x98>)
 80055a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80055ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055b0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80055b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055b6:	4b18      	ldr	r3, [pc, #96]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055bc:	4b16      	ldr	r3, [pc, #88]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055be:	2200      	movs	r2, #0
 80055c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80055c2:	4815      	ldr	r0, [pc, #84]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055c4:	f005 fdf0 	bl	800b1a8 <HAL_TIM_Base_Init>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80055ce:	f001 fe45 	bl	800725c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80055d2:	4811      	ldr	r0, [pc, #68]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055d4:	f005 fea0 	bl	800b318 <HAL_TIM_PWM_Init>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80055de:	f001 fe3d 	bl	800725c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055e2:	2360      	movs	r3, #96	@ 0x60
 80055e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	2200      	movs	r2, #0
 80055f6:	4619      	mov	r1, r3
 80055f8:	4807      	ldr	r0, [pc, #28]	@ (8005618 <MX_TIM10_Init+0x94>)
 80055fa:	f006 f815 	bl	800b628 <HAL_TIM_PWM_ConfigChannel>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005604:	f001 fe2a 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005608:	4803      	ldr	r0, [pc, #12]	@ (8005618 <MX_TIM10_Init+0x94>)
 800560a:	f002 fb41 	bl	8007c90 <HAL_TIM_MspPostInit>

}
 800560e:	bf00      	nop
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000c2c 	.word	0x20000c2c
 800561c:	40014400 	.word	0x40014400

08005620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005624:	4b11      	ldr	r3, [pc, #68]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005626:	4a12      	ldr	r2, [pc, #72]	@ (8005670 <MX_USART1_UART_Init+0x50>)
 8005628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800562a:	4b10      	ldr	r3, [pc, #64]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 800562c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005638:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 800563a:	2200      	movs	r2, #0
 800563c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800563e:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005644:	4b09      	ldr	r3, [pc, #36]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005646:	220c      	movs	r2, #12
 8005648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005652:	2200      	movs	r2, #0
 8005654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005656:	4805      	ldr	r0, [pc, #20]	@ (800566c <MX_USART1_UART_Init+0x4c>)
 8005658:	f006 fd54 	bl	800c104 <HAL_UART_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005662:	f001 fdfb 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000c74 	.word	0x20000c74
 8005670:	40011000 	.word	0x40011000

08005674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005678:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 800567a:	4a12      	ldr	r2, [pc, #72]	@ (80056c4 <MX_USART3_UART_Init+0x50>)
 800567c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 8005680:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <MX_USART3_UART_Init+0x54>)
 8005682:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005684:	4b0e      	ldr	r3, [pc, #56]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 800568c:	2200      	movs	r2, #0
 800568e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 8005692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 800569a:	220c      	movs	r2, #12
 800569c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800569e:	4b08      	ldr	r3, [pc, #32]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a4:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80056aa:	4805      	ldr	r0, [pc, #20]	@ (80056c0 <MX_USART3_UART_Init+0x4c>)
 80056ac:	f006 fd2a 	bl	800c104 <HAL_UART_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80056b6:	f001 fdd1 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000cbc 	.word	0x20000cbc
 80056c4:	40004800 	.word	0x40004800
 80056c8:	000186a0 	.word	0x000186a0

080056cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80056d0:	4b11      	ldr	r3, [pc, #68]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056d2:	4a12      	ldr	r2, [pc, #72]	@ (800571c <MX_USART6_UART_Init+0x50>)
 80056d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80056de:	4b0e      	ldr	r3, [pc, #56]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80056e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80056f0:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056f2:	220c      	movs	r2, #12
 80056f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f6:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005702:	4805      	ldr	r0, [pc, #20]	@ (8005718 <MX_USART6_UART_Init+0x4c>)
 8005704:	f006 fcfe 	bl	800c104 <HAL_UART_Init>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800570e:	f001 fda5 	bl	800725c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000d04 	.word	0x20000d04
 800571c:	40011400 	.word	0x40011400

08005720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <MX_DMA_Init+0x78>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	4a1a      	ldr	r2, [pc, #104]	@ (8005798 <MX_DMA_Init+0x78>)
 8005730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005734:	6313      	str	r3, [r2, #48]	@ 0x30
 8005736:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <MX_DMA_Init+0x78>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <MX_DMA_Init+0x78>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	4a13      	ldr	r2, [pc, #76]	@ (8005798 <MX_DMA_Init+0x78>)
 800574c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005750:	6313      	str	r3, [r2, #48]	@ 0x30
 8005752:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <MX_DMA_Init+0x78>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800575e:	2200      	movs	r2, #0
 8005760:	2105      	movs	r1, #5
 8005762:	200c      	movs	r0, #12
 8005764:	f003 fe47 	bl	80093f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005768:	200c      	movs	r0, #12
 800576a:	f003 fe60 	bl	800942e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800576e:	2200      	movs	r2, #0
 8005770:	2105      	movs	r1, #5
 8005772:	2039      	movs	r0, #57	@ 0x39
 8005774:	f003 fe3f 	bl	80093f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005778:	2039      	movs	r0, #57	@ 0x39
 800577a:	f003 fe58 	bl	800942e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800577e:	2200      	movs	r2, #0
 8005780:	2105      	movs	r1, #5
 8005782:	203a      	movs	r0, #58	@ 0x3a
 8005784:	f003 fe37 	bl	80093f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005788:	203a      	movs	r0, #58	@ 0x3a
 800578a:	f003 fe50 	bl	800942e <HAL_NVIC_EnableIRQ>

}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800

0800579c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08e      	sub	sp, #56	@ 0x38
 80057a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	4b77      	ldr	r3, [pc, #476]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	4a76      	ldr	r2, [pc, #472]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c2:	4b74      	ldr	r3, [pc, #464]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	4b70      	ldr	r3, [pc, #448]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80057de:	4b6d      	ldr	r3, [pc, #436]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	4b69      	ldr	r3, [pc, #420]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	4a68      	ldr	r2, [pc, #416]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fa:	4b66      	ldr	r3, [pc, #408]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	4b62      	ldr	r3, [pc, #392]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	4a61      	ldr	r2, [pc, #388]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005810:	f043 0308 	orr.w	r3, r3, #8
 8005814:	6313      	str	r3, [r2, #48]	@ 0x30
 8005816:	4b5f      	ldr	r3, [pc, #380]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	4b5b      	ldr	r3, [pc, #364]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	4a5a      	ldr	r2, [pc, #360]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 800582c:	f043 0304 	orr.w	r3, r3, #4
 8005830:	6313      	str	r3, [r2, #48]	@ 0x30
 8005832:	4b58      	ldr	r3, [pc, #352]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4b54      	ldr	r3, [pc, #336]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	4a53      	ldr	r2, [pc, #332]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584c:	6313      	str	r3, [r2, #48]	@ 0x30
 800584e:	4b51      	ldr	r3, [pc, #324]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	4b4d      	ldr	r3, [pc, #308]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	4a4c      	ldr	r2, [pc, #304]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005868:	6313      	str	r3, [r2, #48]	@ 0x30
 800586a:	4b4a      	ldr	r3, [pc, #296]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	4b46      	ldr	r3, [pc, #280]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	4a45      	ldr	r2, [pc, #276]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6313      	str	r3, [r2, #48]	@ 0x30
 8005886:	4b43      	ldr	r3, [pc, #268]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4b3f      	ldr	r3, [pc, #252]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	4a3e      	ldr	r2, [pc, #248]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 800589c:	f043 0310 	orr.w	r3, r3, #16
 80058a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005994 <MX_GPIO_Init+0x1f8>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80058ae:	2200      	movs	r2, #0
 80058b0:	2140      	movs	r1, #64	@ 0x40
 80058b2:	4839      	ldr	r0, [pc, #228]	@ (8005998 <MX_GPIO_Init+0x1fc>)
 80058b4:	f004 fb74 	bl	8009fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2110      	movs	r1, #16
 80058bc:	4837      	ldr	r0, [pc, #220]	@ (800599c <MX_GPIO_Init+0x200>)
 80058be:	f004 fb6f 	bl	8009fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2101      	movs	r1, #1
 80058c6:	4836      	ldr	r0, [pc, #216]	@ (80059a0 <MX_GPIO_Init+0x204>)
 80058c8:	f004 fb6a 	bl	8009fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058cc:	2340      	movs	r3, #64	@ 0x40
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058d0:	2301      	movs	r3, #1
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d8:	2300      	movs	r3, #0
 80058da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80058dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058e0:	4619      	mov	r1, r3
 80058e2:	482d      	ldr	r0, [pc, #180]	@ (8005998 <MX_GPIO_Init+0x1fc>)
 80058e4:	f004 f9c0 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058e8:	2308      	movs	r3, #8
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80058f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058fa:	4619      	mov	r1, r3
 80058fc:	4826      	ldr	r0, [pc, #152]	@ (8005998 <MX_GPIO_Init+0x1fc>)
 80058fe:	f004 f9b3 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005902:	2301      	movs	r3, #1
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005906:	2300      	movs	r3, #0
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2300      	movs	r3, #0
 800590c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005912:	4619      	mov	r1, r3
 8005914:	4821      	ldr	r0, [pc, #132]	@ (800599c <MX_GPIO_Init+0x200>)
 8005916:	f004 f9a7 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800591a:	2310      	movs	r3, #16
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800591e:	2301      	movs	r3, #1
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005922:	2300      	movs	r3, #0
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005926:	2300      	movs	r3, #0
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800592e:	4619      	mov	r1, r3
 8005930:	481a      	ldr	r0, [pc, #104]	@ (800599c <MX_GPIO_Init+0x200>)
 8005932:	f004 f999 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8005936:	2330      	movs	r3, #48	@ 0x30
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800593a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800593e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005948:	4619      	mov	r1, r3
 800594a:	4816      	ldr	r0, [pc, #88]	@ (80059a4 <MX_GPIO_Init+0x208>)
 800594c:	f004 f98c 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005954:	2301      	movs	r3, #1
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595c:	2300      	movs	r3, #0
 800595e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005964:	4619      	mov	r1, r3
 8005966:	480e      	ldr	r0, [pc, #56]	@ (80059a0 <MX_GPIO_Init+0x204>)
 8005968:	f004 f97e 	bl	8009c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800596c:	2200      	movs	r2, #0
 800596e:	2105      	movs	r1, #5
 8005970:	2009      	movs	r0, #9
 8005972:	f003 fd40 	bl	80093f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005976:	2009      	movs	r0, #9
 8005978:	f003 fd59 	bl	800942e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800597c:	2200      	movs	r2, #0
 800597e:	2105      	movs	r1, #5
 8005980:	200a      	movs	r0, #10
 8005982:	f003 fd38 	bl	80093f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005986:	200a      	movs	r0, #10
 8005988:	f003 fd51 	bl	800942e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800598c:	bf00      	nop
 800598e:	3738      	adds	r7, #56	@ 0x38
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	40021800 	.word	0x40021800
 800599c:	40020000 	.word	0x40020000
 80059a0:	40020400 	.word	0x40020400
 80059a4:	40020800 	.word	0x40020800

080059a8 <fondlerAutoReverse>:

/* USER CODE BEGIN 4 */

void fondlerAutoReverse (int8_t allVars[5], int8_t RCSwitch, int8_t M2006IDX, int8_t reverseRotation, PID_preset_t indexerPreset) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6178      	str	r0, [r7, #20]
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	eef0 6a40 	vmov.f32	s13, s0
 80059ba:	eeb0 7a60 	vmov.f32	s14, s1
 80059be:	eef0 7a41 	vmov.f32	s15, s2
 80059c2:	4603      	mov	r3, r0
 80059c4:	74fb      	strb	r3, [r7, #19]
 80059c6:	460b      	mov	r3, r1
 80059c8:	74bb      	strb	r3, [r7, #18]
 80059ca:	4613      	mov	r3, r2
 80059cc:	747b      	strb	r3, [r7, #17]
 80059ce:	edc7 6a01 	vstr	s13, [r7, #4]
 80059d2:	ed87 7a02 	vstr	s14, [r7, #8]
 80059d6:	edc7 7a03 	vstr	s15, [r7, #12]
	int16_t flywheelSpeed = getMotorRPM(Bus1, M3508, 1);
 80059da:	2201      	movs	r2, #1
 80059dc:	2101      	movs	r1, #1
 80059de:	2001      	movs	r0, #1
 80059e0:	f7fd fcae 	bl	8003340 <getMotorRPM>
 80059e4:	4603      	mov	r3, r0
 80059e6:	83fb      	strh	r3, [r7, #30]
    if ((/*(pc_control.left_button_down == 1) && */(flywheelSpeed > 7000) && (allVars[4] == 0)) || (RCSwitch == 1)) {
 80059e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80059ec:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80059f0:	4293      	cmp	r3, r2
 80059f2:	dd05      	ble.n	8005a00 <fondlerAutoReverse+0x58>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	3304      	adds	r3, #4
 80059f8:	f993 3000 	ldrsb.w	r3, [r3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <fondlerAutoReverse+0x62>
 8005a00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 80be 	bne.w	8005b86 <fondlerAutoReverse+0x1de>
    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);
    	allVars[0] = 1;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]

		if (allVars[3] > 0 && allVars[2] == 0) {
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3303      	adds	r3, #3
 8005a14:	f993 3000 	ldrsb.w	r3, [r3]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dd2f      	ble.n	8005a7c <fondlerAutoReverse+0xd4>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3302      	adds	r3, #2
 8005a20:	f993 3000 	ldrsb.w	r3, [r3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d129      	bne.n	8005a7c <fondlerAutoReverse+0xd4>
			setMotorRPM(Bus1, M2006, M2006IDX, reverseRotation*15000, indexerPreset);
 8005a28:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	0152      	lsls	r2, r2, #5
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	0092      	lsls	r2, r2, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	0112      	lsls	r2, r2, #4
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b21b      	sxth	r3, r3
 8005a44:	edd7 6a01 	vldr	s13, [r7, #4]
 8005a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a50:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8005a54:	eeb0 0a66 	vmov.f32	s0, s13
 8005a58:	eef0 0a47 	vmov.f32	s1, s14
 8005a5c:	eeb0 1a67 	vmov.f32	s2, s15
 8005a60:	2102      	movs	r1, #2
 8005a62:	2001      	movs	r0, #1
 8005a64:	f7fd fba8 	bl	80031b8 <setMotorRPM>
			allVars[3]--;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3303      	adds	r3, #3
 8005a6c:	f993 2000 	ldrsb.w	r2, [r3]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	3a01      	subs	r2, #1
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	b252      	sxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e083      	b.n	8005b84 <fondlerAutoReverse+0x1dc>
		} else {
			allVars[2] = 0;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3302      	adds	r3, #2
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
			// usart_printf("BeansOutput1\r\n");
			setMotorRPM(Bus1, M2006, M2006IDX, -270*16*reverseRotation, indexerPreset);
 8005a84:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	0112      	lsls	r2, r2, #4
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	0112      	lsls	r2, r2, #4
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	00d2      	lsls	r2, r2, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	015b      	lsls	r3, r3, #5
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	b21b      	sxth	r3, r3
 8005a9e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005aa2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aaa:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8005aae:	eeb0 0a66 	vmov.f32	s0, s13
 8005ab2:	eef0 0a47 	vmov.f32	s1, s14
 8005ab6:	eeb0 1a67 	vmov.f32	s2, s15
 8005aba:	2102      	movs	r1, #2
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7fd fb7b 	bl	80031b8 <setMotorRPM>
			if (reverseRotation == 1) {
 8005ac2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d12e      	bne.n	8005b28 <fondlerAutoReverse+0x180>
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) <= -10) {
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	f993 3000 	ldrsb.w	r3, [r3]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <fondlerAutoReverse+0x14e>
 8005ad6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005ada:	461a      	mov	r2, r3
 8005adc:	2102      	movs	r1, #2
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f7fd fc2e 	bl	8003340 <getMotorRPM>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f113 0f09 	cmn.w	r3, #9
 8005aea:	da04      	bge.n	8005af6 <fondlerAutoReverse+0x14e>
					allVars[1] = 1;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e046      	b.n	8005b84 <fondlerAutoReverse+0x1dc>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) > -1 && allVars[1] == 1) {         // jammed
 8005af6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005afa:	461a      	mov	r2, r3
 8005afc:	2102      	movs	r1, #2
 8005afe:	2001      	movs	r0, #1
 8005b00:	f7fd fc1e 	bl	8003340 <getMotorRPM>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db5c      	blt.n	8005bc4 <fondlerAutoReverse+0x21c>
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d156      	bne.n	8005bc4 <fondlerAutoReverse+0x21c>
					allVars[3] = 12;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3303      	adds	r3, #3
 8005b1a:	220c      	movs	r2, #12
 8005b1c:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	3301      	adds	r3, #1
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 8005b26:	e04d      	b.n	8005bc4 <fondlerAutoReverse+0x21c>
				}
			} else {
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) >= 10) {
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f993 3000 	ldrsb.w	r3, [r3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <fondlerAutoReverse+0x1aa>
 8005b34:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f7fd fbff 	bl	8003340 <getMotorRPM>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	dd04      	ble.n	8005b52 <fondlerAutoReverse+0x1aa>
					allVars[1] = 1;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e018      	b.n	8005b84 <fondlerAutoReverse+0x1dc>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) < 1 && allVars[1] == 1) {         // jammed
 8005b52:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005b56:	461a      	mov	r2, r3
 8005b58:	2102      	movs	r1, #2
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f7fd fbf0 	bl	8003340 <getMotorRPM>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dc2e      	bgt.n	8005bc4 <fondlerAutoReverse+0x21c>
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d128      	bne.n	8005bc4 <fondlerAutoReverse+0x21c>
					allVars[3] = 12;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3303      	adds	r3, #3
 8005b76:	220c      	movs	r2, #12
 8005b78:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 8005b82:	e01f      	b.n	8005bc4 <fondlerAutoReverse+0x21c>
 8005b84:	e01e      	b.n	8005bc4 <fondlerAutoReverse+0x21c>
				}
			}
		}
    } else {
    	allVars[0] = 0;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
    	allVars[2] = 1;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3302      	adds	r3, #2
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
    	allVars[1] = 0;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
    	setMotorRPM(Bus1, M2006, M2006IDX, 0, indexerPreset);
 8005b9c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ba8:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8005bac:	eeb0 0a66 	vmov.f32	s0, s13
 8005bb0:	eef0 0a47 	vmov.f32	s1, s14
 8005bb4:	eeb0 1a67 	vmov.f32	s2, s15
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2102      	movs	r1, #2
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f7fd fafb 	bl	80031b8 <setMotorRPM>
    }
}
 8005bc2:	e000      	b.n	8005bc6 <fondlerAutoReverse+0x21e>
		if (allVars[3] > 0 && allVars[2] == 0) {
 8005bc4:	bf00      	nop
}
 8005bc6:	bf00      	nop
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <distanceCalc>:

float distanceCalc(int16_t height) {
 8005bd0:	b490      	push	{r4, r7}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
	float distances[4] = {80.0, 41.0, 29.0, 25.0};
 8005bda:	4b47      	ldr	r3, [pc, #284]	@ (8005cf8 <distanceCalc+0x128>)
 8005bdc:	f107 0408 	add.w	r4, r7, #8
 8005be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (height < 80 && height >= 41) {
 8005be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bea:	2b4f      	cmp	r3, #79	@ 0x4f
 8005bec:	dc26      	bgt.n	8005c3c <distanceCalc+0x6c>
 8005bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bf2:	2b28      	cmp	r3, #40	@ 0x28
 8005bf4:	dd22      	ble.n	8005c3c <distanceCalc+0x6c>
		return (1/(distances[1] - distances[0]))*((float)(height)) + (1-(distances[0]/(distances[1] - distances[0])));
 8005bf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c2a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c3a:	e057      	b.n	8005cec <distanceCalc+0x11c>
	} else if (height < 41 && height >= 29) {
 8005c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c40:	2b28      	cmp	r3, #40	@ 0x28
 8005c42:	dc26      	bgt.n	8005c92 <distanceCalc+0xc2>
 8005c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c48:	2b1c      	cmp	r3, #28
 8005c4a:	dd22      	ble.n	8005c92 <distanceCalc+0xc2>
		return (1/(distances[2] - distances[1]))*((float)(height)) + (2-(distances[1]/(distances[2] - distances[1])));
 8005c4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c74:	edd7 6a04 	vldr	s13, [r7, #16]
 8005c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c80:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005c84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005c88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c90:	e02c      	b.n	8005cec <distanceCalc+0x11c>
	} else if (height < 29 && height >= 25) {
 8005c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c96:	2b1c      	cmp	r3, #28
 8005c98:	dc26      	bgt.n	8005ce8 <distanceCalc+0x118>
 8005c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c9e:	2b18      	cmp	r3, #24
 8005ca0:	dd22      	ble.n	8005ce8 <distanceCalc+0x118>
		return (1/(distances[3] - distances[2]))*((float)(height)) + (3-(distances[2]/(distances[3] - distances[2])));
 8005ca2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cca:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cd6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005cda:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8005cde:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce6:	e001      	b.n	8005cec <distanceCalc+0x11c>
	} else {
		return 0;
 8005ce8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8005cfc <distanceCalc+0x12c>
	}
}
 8005cec:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc90      	pop	{r4, r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	08013870 	.word	0x08013870
 8005cfc:	00000000 	.word	0x00000000

08005d00 <rotationMatrix>:


void rotationMatrix(uint8_t rotationType, float APC[3], float rotationAngle) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	ed2d 8b02 	vpush	{d8}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d12:	73fb      	strb	r3, [r7, #15]
	float NewAPC[3] = {0, 0, 0};
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
	switch (rotationType) {
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d07f      	beq.n	8005e2c <rotationMatrix+0x12c>
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	f300 80b7 	bgt.w	8005ea0 <rotationMatrix+0x1a0>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <rotationMatrix+0x3c>
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d03c      	beq.n	8005db4 <rotationMatrix+0xb4>
 8005d3a:	e0b1      	b.n	8005ea0 <rotationMatrix+0x1a0>
	case 0: {
		NewAPC[0] = APC[0];
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	613b      	str	r3, [r7, #16]
		NewAPC[1] = APC[1]*cosf(rotationAngle) - APC[2]*sinf(rotationAngle);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3304      	adds	r3, #4
 8005d46:	ed93 8a00 	vldr	s16, [r3]
 8005d4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d4e:	f00c fff3 	bl	8012d38 <cosf>
 8005d52:	eef0 7a40 	vmov.f32	s15, s0
 8005d56:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	edd3 8a00 	vldr	s17, [r3]
 8005d62:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d66:	f00d f82b 	bl	8012dc0 <sinf>
 8005d6a:	eef0 7a40 	vmov.f32	s15, s0
 8005d6e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005d72:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005d76:	edc7 7a05 	vstr	s15, [r7, #20]
		NewAPC[2] = APC[1]*sinf(rotationAngle) + APC[2]*cosf(rotationAngle);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	ed93 8a00 	vldr	s16, [r3]
 8005d82:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d86:	f00d f81b 	bl	8012dc0 <sinf>
 8005d8a:	eef0 7a40 	vmov.f32	s15, s0
 8005d8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3308      	adds	r3, #8
 8005d96:	edd3 8a00 	vldr	s17, [r3]
 8005d9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d9e:	f00c ffcb 	bl	8012d38 <cosf>
 8005da2:	eef0 7a40 	vmov.f32	s15, s0
 8005da6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005daa:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005dae:	edc7 7a06 	vstr	s15, [r7, #24]
		break;
 8005db2:	e075      	b.n	8005ea0 <rotationMatrix+0x1a0>
	}
	case 1: {
		NewAPC[0] = APC[0]*cosf(rotationAngle) + APC[2]*sinf(rotationAngle);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	ed93 8a00 	vldr	s16, [r3]
 8005dba:	ed97 0a01 	vldr	s0, [r7, #4]
 8005dbe:	f00c ffbb 	bl	8012d38 <cosf>
 8005dc2:	eef0 7a40 	vmov.f32	s15, s0
 8005dc6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	edd3 8a00 	vldr	s17, [r3]
 8005dd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005dd6:	f00c fff3 	bl	8012dc0 <sinf>
 8005dda:	eef0 7a40 	vmov.f32	s15, s0
 8005dde:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005de2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005de6:	edc7 7a04 	vstr	s15, [r7, #16]
		NewAPC[1] = APC[1];
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	617b      	str	r3, [r7, #20]
		NewAPC[2] = -1*APC[0]*sinf(rotationAngle) + APC[2]*cosf(rotationAngle);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	edd3 7a00 	vldr	s15, [r3]
 8005df6:	eeb1 8a67 	vneg.f32	s16, s15
 8005dfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8005dfe:	f00c ffdf 	bl	8012dc0 <sinf>
 8005e02:	eef0 7a40 	vmov.f32	s15, s0
 8005e06:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	edd3 8a00 	vldr	s17, [r3]
 8005e12:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e16:	f00c ff8f 	bl	8012d38 <cosf>
 8005e1a:	eef0 7a40 	vmov.f32	s15, s0
 8005e1e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005e22:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005e26:	edc7 7a06 	vstr	s15, [r7, #24]
		break;
 8005e2a:	e039      	b.n	8005ea0 <rotationMatrix+0x1a0>
	}
	case 2: {
		NewAPC[0] = APC[0]*cosf(rotationAngle) - APC[1]*sinf(rotationAngle);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	ed93 8a00 	vldr	s16, [r3]
 8005e32:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e36:	f00c ff7f 	bl	8012d38 <cosf>
 8005e3a:	eef0 7a40 	vmov.f32	s15, s0
 8005e3e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3304      	adds	r3, #4
 8005e46:	edd3 8a00 	vldr	s17, [r3]
 8005e4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e4e:	f00c ffb7 	bl	8012dc0 <sinf>
 8005e52:	eef0 7a40 	vmov.f32	s15, s0
 8005e56:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005e5a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005e5e:	edc7 7a04 	vstr	s15, [r7, #16]
		NewAPC[1] = APC[0]*sinf(rotationAngle) + APC[1]*cosf(rotationAngle);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	ed93 8a00 	vldr	s16, [r3]
 8005e68:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e6c:	f00c ffa8 	bl	8012dc0 <sinf>
 8005e70:	eef0 7a40 	vmov.f32	s15, s0
 8005e74:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	edd3 8a00 	vldr	s17, [r3]
 8005e80:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e84:	f00c ff58 	bl	8012d38 <cosf>
 8005e88:	eef0 7a40 	vmov.f32	s15, s0
 8005e8c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005e90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005e94:	edc7 7a05 	vstr	s15, [r7, #20]
		NewAPC[2] = APC[2];
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	61bb      	str	r3, [r7, #24]
		break;
 8005e9e:	bf00      	nop
	}
	}
	for (uint8_t i = 0; i < 3; i++) {
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e00d      	b.n	8005ec2 <rotationMatrix+0x1c2>
		APC[i] = NewAPC[i];
 8005ea6:	7ffa      	ldrb	r2, [r7, #31]
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	440b      	add	r3, r1
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	3220      	adds	r2, #32
 8005eb4:	443a      	add	r2, r7
 8005eb6:	3a10      	subs	r2, #16
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d9ee      	bls.n	8005ea6 <rotationMatrix+0x1a6>
	}
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	ecbd 8b02 	vpop	{d8}
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <AngletoCoordinateCalculator>:

void AngletoCoordinateCalculator(int16_t CVInfo[5], float turretRelativeRotation, int16_t turretPitch, int16_t enemyRelativeCoords[4][3]) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	@ 0x30
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	603a      	str	r2, [r7, #0]
 8005ee8:	80fb      	strh	r3, [r7, #6]
	int16_t xVALRATIO = 338;
 8005eea:	f44f 73a9 	mov.w	r3, #338	@ 0x152
 8005eee:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t yVALRATIO = 200; // CHANGE THIS
 8005ef0:	23c8      	movs	r3, #200	@ 0xc8
 8005ef2:	853b      	strh	r3, [r7, #40]	@ 0x28
	 * This will be in METERS
	 * 	Index 0: X
	 * 	Index 1: Y
	 * 	Index 2: Distance (Z)
	 */
	float changeOfBasis[3] = {0, 0, 0};
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	627b      	str	r3, [r7, #36]	@ 0x24

	float armourPlateCoordinate[3] = {0, 0, 0};
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	61bb      	str	r3, [r7, #24]

	// Calculates the "Distance" from the armour plate relative to the camera position
	armourPlateCoordinate[2] = distanceCalc(CVInfo[3]);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3306      	adds	r3, #6
 8005f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fe55 	bl	8005bd0 <distanceCalc>
 8005f26:	eef0 7a40 	vmov.f32	s15, s0
 8005f2a:	edc7 7a06 	vstr	s15, [r7, #24]

	// Calculates the X and Y coordinates relative to the camera with the Distance and TAN(ARCTAN()) which cancels out
	armourPlateCoordinate[0] = ((CVInfo[0]*armourPlateCoordinate[2])/xVALRATIO);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f40:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f54:	edc7 7a04 	vstr	s15, [r7, #16]
	armourPlateCoordinate[1] = ((CVInfo[0]*armourPlateCoordinate[2])/yVALRATIO);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f6a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f6e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7e:	edc7 7a05 	vstr	s15, [r7, #20]

	// Fake change of basis to make it relative to the center of the barrels in the center of the turret
	armourPlateCoordinate[0] = armourPlateCoordinate[0] - changeOfBasis[0];
 8005f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f8e:	edc7 7a04 	vstr	s15, [r7, #16]
	armourPlateCoordinate[1] = armourPlateCoordinate[1] - changeOfBasis[1];
 8005f92:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f96:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9e:	edc7 7a05 	vstr	s15, [r7, #20]
	armourPlateCoordinate[2] = armourPlateCoordinate[2] - changeOfBasis[2];
 8005fa2:	ed97 7a06 	vldr	s14, [r7, #24]
 8005fa6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fae:	edc7 7a06 	vstr	s15, [r7, #24]

	armourPlateCoordinate[2] = -1*armourPlateCoordinate[2];
 8005fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fb6:	eef1 7a67 	vneg.f32	s15, s15
 8005fba:	edc7 7a06 	vstr	s15, [r7, #24]
	rotationMatrix(1, armourPlateCoordinate, (turretRelativeRotation*2*M_PI)/360);
 8005fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fc6:	ee17 0a90 	vmov	r0, s15
 8005fca:	f7fa fabd 	bl	8000548 <__aeabi_f2d>
 8005fce:	a358      	add	r3, pc, #352	@ (adr r3, 8006130 <AngletoCoordinateCalculator+0x258>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa fb10 	bl	80005f8 <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	4b58      	ldr	r3, [pc, #352]	@ (8006148 <AngletoCoordinateCalculator+0x270>)
 8005fe6:	f7fa fc31 	bl	800084c <__aeabi_ddiv>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f7fa fdd9 	bl	8000ba8 <__aeabi_d2f>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	ee00 2a10 	vmov	s0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	2001      	movs	r0, #1
 8006004:	f7ff fe7c 	bl	8005d00 <rotationMatrix>
	rotationMatrix(0, armourPlateCoordinate, ((turretPitch*2*M_PI)/8191)-4100);
 8006008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa fa88 	bl	8000524 <__aeabi_i2d>
 8006014:	a346      	add	r3, pc, #280	@ (adr r3, 8006130 <AngletoCoordinateCalculator+0x258>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	a344      	add	r3, pc, #272	@ (adr r3, 8006138 <AngletoCoordinateCalculator+0x260>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa fc0e 	bl	800084c <__aeabi_ddiv>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4610      	mov	r0, r2
 8006036:	4619      	mov	r1, r3
 8006038:	a341      	add	r3, pc, #260	@ (adr r3, 8006140 <AngletoCoordinateCalculator+0x268>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f923 	bl	8000288 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	f7fa fdad 	bl	8000ba8 <__aeabi_d2f>
 800604e:	4602      	mov	r2, r0
 8006050:	f107 0310 	add.w	r3, r7, #16
 8006054:	ee00 2a10 	vmov	s0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	2000      	movs	r0, #0
 800605c:	f7ff fe50 	bl	8005d00 <rotationMatrix>


	for (int8_t i = 1; i > -1; i--) {
 8006060:	2301      	movs	r3, #1
 8006062:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006066:	e02e      	b.n	80060c6 <AngletoCoordinateCalculator+0x1ee>
		for (uint8_t j = 0; j < 4; j++) {
 8006068:	2300      	movs	r3, #0
 800606a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800606e:	e01f      	b.n	80060b0 <AngletoCoordinateCalculator+0x1d8>
			enemyRelativeCoords[j][i] = enemyRelativeCoords[j][i+1];
 8006070:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	461a      	mov	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	1899      	adds	r1, r3, r2
 8006082:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006086:	1c58      	adds	r0, r3, #1
 8006088:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800608c:	4613      	mov	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4413      	add	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	461a      	mov	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	4413      	add	r3, r2
 800609a:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 800609e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80060a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint8_t j = 0; j < 4; j++) {
 80060a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060aa:	3301      	adds	r3, #1
 80060ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80060b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d9db      	bls.n	8006070 <AngletoCoordinateCalculator+0x198>
	for (int8_t i = 1; i > -1; i--) {
 80060b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80060c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dacc      	bge.n	8006068 <AngletoCoordinateCalculator+0x190>
		}
	}

	for (int8_t i = 0; i < 3; i++) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80060d4:	e01d      	b.n	8006112 <AngletoCoordinateCalculator+0x23a>
		enemyRelativeCoords[i][0] = armourPlateCoordinate[i];
 80060d6:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	3330      	adds	r3, #48	@ 0x30
 80060de:	443b      	add	r3, r7
 80060e0:	3b20      	subs	r3, #32
 80060e2:	edd3 7a00 	vldr	s15, [r3]
 80060e6:	f997 202d 	ldrsb.w	r2, [r7, #45]	@ 0x2d
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	461a      	mov	r2, r3
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4413      	add	r3, r2
 80060f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060fc:	ee17 2a90 	vmov	r2, s15
 8006100:	b212      	sxth	r2, r2
 8006102:	801a      	strh	r2, [r3, #0]
	for (int8_t i = 0; i < 3; i++) {
 8006104:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	3301      	adds	r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8006112:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8006116:	2b02      	cmp	r3, #2
 8006118:	dddd      	ble.n	80060d6 <AngletoCoordinateCalculator+0x1fe>
	}
	enemyRelativeCoords[3][0] = 1;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	3312      	adds	r3, #18
 800611e:	2201      	movs	r2, #1
 8006120:	801a      	strh	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	3730      	adds	r7, #48	@ 0x30
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w
 8006130:	54442d18 	.word	0x54442d18
 8006134:	400921fb 	.word	0x400921fb
 8006138:	00000000 	.word	0x00000000
 800613c:	40bfff00 	.word	0x40bfff00
 8006140:	00000000 	.word	0x00000000
 8006144:	40b00400 	.word	0x40b00400
 8006148:	40768000 	.word	0x40768000

0800614c <WithinRangeCalculator>:


}

// int16_t brans = (1/(distances[1] - distances[0]))*height + (1-(distances[0]/(distances[1] - distances[0])));
uint8_t WithinRangeCalculator(int16_t inputValue, int16_t searchPosition, int16_t delta) {
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	80fb      	strh	r3, [r7, #6]
 8006156:	460b      	mov	r3, r1
 8006158:	80bb      	strh	r3, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	807b      	strh	r3, [r7, #2]
	if ((inputValue < searchPosition + delta) && (inputValue > searchPosition - delta)) {
 800615e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006162:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006166:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800616a:	440b      	add	r3, r1
 800616c:	429a      	cmp	r2, r3
 800616e:	da0a      	bge.n	8006186 <WithinRangeCalculator+0x3a>
 8006170:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006174:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006178:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800617c:	1acb      	subs	r3, r1, r3
 800617e:	429a      	cmp	r2, r3
 8006180:	dd01      	ble.n	8006186 <WithinRangeCalculator+0x3a>
		return 1;
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <WithinRangeCalculator+0x3c>
	} else {
		return 0;
 8006186:	2300      	movs	r3, #0
	}
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <isRobotEnemy>:

uint8_t isRobotEnemy(int16_t SentryTeam, int16_t enemyTeamColour) {
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	460a      	mov	r2, r1
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	4613      	mov	r3, r2
 80061a2:	80bb      	strh	r3, [r7, #4]
	// We are RED!!!
	if (SentryTeam == 7) {
 80061a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	d107      	bne.n	80061bc <isRobotEnemy+0x28>
		if (enemyTeamColour == 1) {
 80061ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <isRobotEnemy+0x24>
			return 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e008      	b.n	80061ca <isRobotEnemy+0x36>
		} else {
			return 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e006      	b.n	80061ca <isRobotEnemy+0x36>
		}
		// WE ARE BLUE
	} else {
		if (enemyTeamColour == 1) {
 80061bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <isRobotEnemy+0x34>
			return 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <isRobotEnemy+0x36>
		} else {
			return 1;
 80061c8:	2301      	movs	r3, #1
		}
	}
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <wheelRotation>:

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	4603      	mov	r3, r0
 80061de:	460a      	mov	r2, r1
 80061e0:	80fb      	strh	r3, [r7, #6]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80bb      	strh	r3, [r7, #4]
	int8_t newTargetRotationCounter = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
	int16_t ACD = abs(destinationRotation - currentRotation);
 80061ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80061ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bfb8      	it	lt
 80061f8:	425b      	neglt	r3, r3
 80061fa:	81bb      	strh	r3, [r7, #12]
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
 80061fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006200:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8006204:	3b1f      	subs	r3, #31
 8006206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfb8      	it	lt
 8006210:	425b      	neglt	r3, r3
 8006212:	817b      	strh	r3, [r7, #10]
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
 8006214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006218:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800621c:	331f      	adds	r3, #31
 800621e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfb8      	it	lt
 8006228:	425b      	neglt	r3, r3
 800622a:	813b      	strh	r3, [r7, #8]
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
 800622c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006234:	429a      	cmp	r2, r3
 8006236:	da08      	bge.n	800624a <wheelRotation+0x74>
 8006238:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800623c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	da02      	bge.n	800624a <wheelRotation+0x74>
		newTargetRotationCounter = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e010      	b.n	800626c <wheelRotation+0x96>
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
 800624a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800624e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006252:	429a      	cmp	r2, r3
 8006254:	da08      	bge.n	8006268 <wheelRotation+0x92>
 8006256:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800625a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	da02      	bge.n	8006268 <wheelRotation+0x92>
		newTargetRotationCounter = -1;
 8006262:	23ff      	movs	r3, #255	@ 0xff
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	e001      	b.n	800626c <wheelRotation+0x96>
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
 800626c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	0352      	lsls	r2, r2, #13
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	b29a      	uxth	r2, r3
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	b29a      	uxth	r2, r3
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	b29b      	uxth	r3, r3
 8006286:	b21b      	sxth	r3, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 8006294:	b5b0      	push	{r4, r5, r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af04      	add	r7, sp, #16
 800629a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
	int16_t forwardStrafe = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	81bb      	strh	r3, [r7, #12]

	DBUS_Rx_Init(&huart3);
 80062a4:	4830      	ldr	r0, [pc, #192]	@ (8006368 <StartFlowManager+0xd4>)
 80062a6:	f7fd f8d9 	bl	800345c <DBUS_Rx_Init>

	// UART_Ex_Init(&huart1);
	UART_Ex_Init(&huart6);
 80062aa:	4830      	ldr	r0, [pc, #192]	@ (800636c <StartFlowManager+0xd8>)
 80062ac:	f7fd fb10 	bl	80038d0 <UART_Ex_Init>
	CAN_Init();
 80062b0:	f7fd f898 	bl	80033e4 <CAN_Init>
	BMI088_gyro_init();
 80062b4:	f7fa ff0c 	bl	80010d0 <BMI088_gyro_init>
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 80062b8:	f7fd f902 	bl	80034c0 <DBUS_Update>
	  // CAN_Updater(Bus1);
	  if(iCount%3==0){
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	4b2c      	ldr	r3, [pc, #176]	@ (8006370 <StartFlowManager+0xdc>)
 80062c0:	fba3 1302 	umull	r1, r3, r3, r2
 80062c4:	0859      	lsrs	r1, r3, #1
 80062c6:	460b      	mov	r3, r1
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	440b      	add	r3, r1
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <StartFlowManager+0x44>
		  CAL_Update();
 80062d4:	f7fb f910 	bl	80014f8 <CAL_Update>
	  }

	  if (driveChassisForwards == 1) {
 80062d8:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <StartFlowManager+0xe0>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d102      	bne.n	80062e6 <StartFlowManager+0x52>
		  forwardStrafe = 100;
 80062e0:	2364      	movs	r3, #100	@ 0x64
 80062e2:	81bb      	strh	r3, [r7, #12]
 80062e4:	e001      	b.n	80062ea <StartFlowManager+0x56>
	  } else {
		  forwardStrafe = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	81bb      	strh	r3, [r7, #12]
	  }

	  // 930
	  if (sentryAutoState >= 2) {
 80062ea:	4b23      	ldr	r3, [pc, #140]	@ (8006378 <StartFlowManager+0xe4>)
 80062ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	dd0d      	ble.n	8006310 <StartFlowManager+0x7c>
		  CAL_SendChassisCommands( 0, 0, 0,((2750+500)/2),0,1,2);
 80062f4:	2302      	movs	r3, #2
 80062f6:	9302      	str	r3, [sp, #8]
 80062f8:	2301      	movs	r3, #1
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	2300      	movs	r3, #0
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	f240 6359 	movw	r3, #1625	@ 0x659
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	2000      	movs	r0, #0
 800630a:	f7fb ff27 	bl	800215c <CAL_SendChassisCommands>
 800630e:	e01e      	b.n	800634e <StartFlowManager+0xba>
	  } else {
		  CAL_SendChassisCommands(CAL_getCH1() + forwardStrafe,(CAL_getCH0()),-1*CAL_getCH4(),((2750+500)/2),0,1,2);
 8006310:	f7fc f874 	bl	80023fc <CAL_getCH1>
 8006314:	4603      	mov	r3, r0
 8006316:	b29a      	uxth	r2, r3
 8006318:	89bb      	ldrh	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	b29b      	uxth	r3, r3
 800631e:	b21c      	sxth	r4, r3
 8006320:	f7fc f860 	bl	80023e4 <CAL_getCH0>
 8006324:	4603      	mov	r3, r0
 8006326:	461d      	mov	r5, r3
 8006328:	f7fc f88c 	bl	8002444 <CAL_getCH4>
 800632c:	4603      	mov	r3, r0
 800632e:	b29b      	uxth	r3, r3
 8006330:	425b      	negs	r3, r3
 8006332:	b29b      	uxth	r3, r3
 8006334:	b21a      	sxth	r2, r3
 8006336:	2302      	movs	r3, #2
 8006338:	9302      	str	r3, [sp, #8]
 800633a:	2301      	movs	r3, #1
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	f240 6359 	movw	r3, #1625	@ 0x659
 8006346:	4629      	mov	r1, r5
 8006348:	4620      	mov	r0, r4
 800634a:	f7fb ff07 	bl	800215c <CAL_SendChassisCommands>
	  }

	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2bff      	cmp	r3, #255	@ 0xff
 8006352:	d003      	beq.n	800635c <StartFlowManager+0xc8>
		  iCount++;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	3301      	adds	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
 800635a:	e001      	b.n	8006360 <StartFlowManager+0xcc>
	  }else{
		  iCount = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
	  }
	  osDelay(1);
 8006360:	2001      	movs	r0, #1
 8006362:	f007 f959 	bl	800d618 <osDelay>
	  DBUS_Update();
 8006366:	e7a7      	b.n	80062b8 <StartFlowManager+0x24>
 8006368:	20000cbc 	.word	0x20000cbc
 800636c:	20000d04 	.word	0x20000d04
 8006370:	aaaaaaab 	.word	0xaaaaaaab
 8006374:	20000a0e 	.word	0x20000a0e
 8006378:	20000a0c 	.word	0x20000a0c
 800637c:	00000000 	.word	0x00000000

08006380 <StartTurretTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurretTask */
void StartTurretTask(void *argument)
{
 8006380:	b5b0      	push	{r4, r5, r7, lr}
 8006382:	b0ac      	sub	sp, #176	@ 0xb0
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurretTask */
	PID_preset_t turretRotation = {110.0, 0.0, 15.0};
 8006388:	4ad1      	ldr	r2, [pc, #836]	@ (80066d0 <StartTurretTask+0x350>)
 800638a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800638e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t turretPitch = {25.0, 0.0, 130.0};
 8006394:	4acf      	ldr	r2, [pc, #828]	@ (80066d4 <StartTurretTask+0x354>)
 8006396:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800639a:	ca07      	ldmia	r2, {r0, r1, r2}
 800639c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t test2 = {100.0, 0.01, 20.0};
 80063a0:	4acd      	ldr	r2, [pc, #820]	@ (80066d8 <StartTurretTask+0x358>)
 80063a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80063a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80063a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t test3 = {160.0, 0.0, 100.0};
 80063ac:	4acb      	ldr	r2, [pc, #812]	@ (80066dc <StartTurretTask+0x35c>)
 80063ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80063b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t fondler = {1.5, 0.0, 0.0};
 80063b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
	PID_preset_t flywheels = {4.0, 0.0, 0.0};
 80063ca:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	62bb      	str	r3, [r7, #40]	@ 0x28

	float gyroidValue = 0;
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float gyroVelAll[3] = {0, 0, 0};
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]

	float targetTurretAng = 0;
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	float currentTurretAng = 0;
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c




	int16_t turretPitchPos = 4400;
 8006406:	f241 1330 	movw	r3, #4400	@ 0x1130
 800640a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	int8_t fondlerVars[2][5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
 800640e:	4ab4      	ldr	r2, [pc, #720]	@ (80066e0 <StartTurretTask+0x360>)
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	ca07      	ldmia	r2, {r0, r1, r2}
 8006416:	c303      	stmia	r3!, {r0, r1}
 8006418:	801a      	strh	r2, [r3, #0]
	uint8_t barrelToggle = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
	uint16_t speed = 5000;
 8006420:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006424:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	int16_t previousPeans = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6

	int32_t toGoVelue = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	int16_t turretYawVal = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	SentryTurnAngle = 2000;
 800643a:	4baa      	ldr	r3, [pc, #680]	@ (80066e4 <StartTurretTask+0x364>)
 800643c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006440:	601a      	str	r2, [r3, #0]
	uint8_t firingNow = 1;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5

	  // Turret Pitch
	  // int16_t turretPitchVal = (1.4*(CAL_getCH3()))+4100;
	  // setMotorPosition(Bus2, GM6020, 3,  turretPitchVal, TurretRotation);

	  turretPitchPos = turretPitchPos + ((CAL_getCH3()+turretRotationForCV[1])*0.15);
 8006448:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800644c:	4618      	mov	r0, r3
 800644e:	f7fa f869 	bl	8000524 <__aeabi_i2d>
 8006452:	4604      	mov	r4, r0
 8006454:	460d      	mov	r5, r1
 8006456:	f7fb ffe9 	bl	800242c <CAL_getCH3>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	4ba2      	ldr	r3, [pc, #648]	@ (80066e8 <StartTurretTask+0x368>)
 8006460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7fa f85c 	bl	8000524 <__aeabi_i2d>
 800646c:	a390      	add	r3, pc, #576	@ (adr r3, 80066b0 <StartTurretTask+0x330>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7fa f8c1 	bl	80005f8 <__aeabi_dmul>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4620      	mov	r0, r4
 800647c:	4629      	mov	r1, r5
 800647e:	f7f9 ff05 	bl	800028c <__adddf3>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	f7fa fb65 	bl	8000b58 <__aeabi_d2iz>
 800648e:	4603      	mov	r3, r0
 8006490:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

	  // Minimum = 3200

	  if (sentryAutoState == 0) {
 8006494:	4b95      	ldr	r3, [pc, #596]	@ (80066ec <StartTurretTask+0x36c>)
 8006496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d14d      	bne.n	800653a <StartTurretTask+0x1ba>
		  turretPitchPos = turretPitchPos + ((CAL_getCH3()+turretRotationForCV[1])*0.15);
 800649e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa f83e 	bl	8000524 <__aeabi_i2d>
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	f7fb ffbe 	bl	800242c <CAL_getCH3>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b8c      	ldr	r3, [pc, #560]	@ (80066e8 <StartTurretTask+0x368>)
 80064b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064ba:	4413      	add	r3, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fa f831 	bl	8000524 <__aeabi_i2d>
 80064c2:	a37b      	add	r3, pc, #492	@ (adr r3, 80066b0 <StartTurretTask+0x330>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f896 	bl	80005f8 <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7f9 feda 	bl	800028c <__adddf3>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	f7fa fb3a 	bl	8000b58 <__aeabi_d2iz>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
		  if (turretPitchPos > 5000) {
 80064ea:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80064ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	dd04      	ble.n	8006500 <StartTurretTask+0x180>
		  		  turretPitchPos = 5000;
 80064f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 80064fe:	e008      	b.n	8006512 <StartTurretTask+0x192>
		  	  } else if (turretPitchPos < 4000) {
 8006500:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8006504:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8006508:	da03      	bge.n	8006512 <StartTurretTask+0x192>
		  		  turretPitchPos = 4000;
 800650a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800650e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
		  	  }

		  	  setMotorPosition(Bus2, GM6020, 3,  turretPitchPos, turretPitch);
 8006512:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8006516:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800651a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800651e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8006522:	eeb0 0a66 	vmov.f32	s0, s13
 8006526:	eef0 0a47 	vmov.f32	s1, s14
 800652a:	eeb0 1a67 	vmov.f32	s2, s15
 800652e:	2203      	movs	r2, #3
 8006530:	2103      	movs	r1, #3
 8006532:	2002      	movs	r0, #2
 8006534:	f7fc fe7b 	bl	800322e <setMotorPosition>
 8006538:	e033      	b.n	80065a2 <StartTurretTask+0x222>


	  } else if (sentryAutoState == 4) {
 800653a:	4b6c      	ldr	r3, [pc, #432]	@ (80066ec <StartTurretTask+0x36c>)
 800653c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d117      	bne.n	8006574 <StartTurretTask+0x1f4>
		  int16_t turretPitchVel = turretRotationForCV[1];// turretRotationForCV[1];
 8006544:	4b68      	ldr	r3, [pc, #416]	@ (80066e8 <StartTurretTask+0x368>)
 8006546:	885b      	ldrh	r3, [r3, #2]
 8006548:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		  setMotorRPM(Bus2, GM6020, 3, turretPitchVel, turretPitch);
 800654c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8006550:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8006554:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006558:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 800655c:	eeb0 0a66 	vmov.f32	s0, s13
 8006560:	eef0 0a47 	vmov.f32	s1, s14
 8006564:	eeb0 1a67 	vmov.f32	s2, s15
 8006568:	2203      	movs	r2, #3
 800656a:	2103      	movs	r1, #3
 800656c:	2002      	movs	r0, #2
 800656e:	f7fc fe23 	bl	80031b8 <setMotorRPM>
 8006572:	e016      	b.n	80065a2 <StartTurretTask+0x222>


	  } else {
		  turretPitchPos = 4100;
 8006574:	f241 0304 	movw	r3, #4100	@ 0x1004
 8006578:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
		  setMotorPosition(Bus2, GM6020, 3,  turretPitchPos, turretPitch);
 800657c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8006580:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8006584:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006588:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800658c:	eeb0 0a66 	vmov.f32	s0, s13
 8006590:	eef0 0a47 	vmov.f32	s1, s14
 8006594:	eeb0 1a67 	vmov.f32	s2, s15
 8006598:	2203      	movs	r2, #3
 800659a:	2103      	movs	r1, #3
 800659c:	2002      	movs	r0, #2
 800659e:	f7fc fe46 	bl	800322e <setMotorPosition>
	  // setMotorPosition(Bus1, GM6020, 5, turretYawVal, test3);
	  // 2811
	  // 6607
	  UART_Printf(&huart6, "%d\r\n", getRotorPosition(Bus1, GM6020, 5));
	  */
	  float kP = 25.0;
 80065a2:	4b53      	ldr	r3, [pc, #332]	@ (80066f0 <StartTurretTask+0x370>)
 80065a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  // Tuned to KD of 125
	  float kD = 200.0;
 80065a6:	4b53      	ldr	r3, [pc, #332]	@ (80066f4 <StartTurretTask+0x374>)
 80065a8:	67bb      	str	r3, [r7, #120]	@ 0x78

	  for (uint8_t i = 2; i > 0; i--) {
 80065aa:	2302      	movs	r3, #2
 80065ac:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 80065b0:	e013      	b.n	80065da <StartTurretTask+0x25a>
		  gyroVelAll[i] = gyroVelAll[i-1];
 80065b2:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80065bc:	0092      	lsls	r2, r2, #2
 80065be:	32b0      	adds	r2, #176	@ 0xb0
 80065c0:	443a      	add	r2, r7
 80065c2:	3a9c      	subs	r2, #156	@ 0x9c
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	33b0      	adds	r3, #176	@ 0xb0
 80065ca:	443b      	add	r3, r7
 80065cc:	3b9c      	subs	r3, #156	@ 0x9c
 80065ce:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 2; i > 0; i--) {
 80065d0:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80065d4:	3b01      	subs	r3, #1
 80065d6:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 80065da:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e7      	bne.n	80065b2 <StartTurretTask+0x232>
	  }

	  gyroVelAll[0] = IMU_get_gyro(2);
 80065e2:	2002      	movs	r0, #2
 80065e4:	f7fa fe0c 	bl	8001200 <IMU_get_gyro>
 80065e8:	eef0 7a40 	vmov.f32	s15, s0
 80065ec:	edc7 7a05 	vstr	s15, [r7, #20]
	  float gyroVel2 = (gyroVelAll[0] + gyroVelAll[1] + gyroVelAll[2])/3;
 80065f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80065f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80065f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006604:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8006608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800660c:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0



	  if (gyroVel2 < 0.05 || gyroVel2 > -0.05) {
 8006610:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8006614:	f7f9 ff98 	bl	8000548 <__aeabi_f2d>
 8006618:	a327      	add	r3, pc, #156	@ (adr r3, 80066b8 <StartTurretTask+0x338>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7fa fa5d 	bl	8000adc <__aeabi_dcmplt>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <StartTurretTask+0x2c0>
 8006628:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800662c:	f7f9 ff8c 	bl	8000548 <__aeabi_f2d>
 8006630:	a323      	add	r3, pc, #140	@ (adr r3, 80066c0 <StartTurretTask+0x340>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f7fa fa6f 	bl	8000b18 <__aeabi_dcmpgt>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <StartTurretTask+0x2c8>
		  gyroVel2 = 0;
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  }
	  // Turret Rotation Debug Mode
	  // SentryTurnAngle
	  // turretYawVal = 1850 + CAL_getCH2();
	  if (sentryAutoState == 0) {
 8006648:	4b28      	ldr	r3, [pc, #160]	@ (80066ec <StartTurretTask+0x36c>)
 800664a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d152      	bne.n	80066f8 <StartTurretTask+0x378>
		   turretYawVal = CAL_getCH2();
 8006652:	f7fb fedf 	bl	8002414 <CAL_getCH2>
 8006656:	4603      	mov	r3, r0
 8006658:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		   setMotorRPM(Bus1, GM6020, 5, (int16_t)(-0.4*(float)(turretYawVal)), test2);
 800665c:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006668:	ee17 0a90 	vmov	r0, s15
 800666c:	f7f9 ff6c 	bl	8000548 <__aeabi_f2d>
 8006670:	a315      	add	r3, pc, #84	@ (adr r3, 80066c8 <StartTurretTask+0x348>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7f9 ffbf 	bl	80005f8 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	f7fa fa69 	bl	8000b58 <__aeabi_d2iz>
 8006686:	4603      	mov	r3, r0
 8006688:	b21b      	sxth	r3, r3
 800668a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800668e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006692:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8006696:	eeb0 0a66 	vmov.f32	s0, s13
 800669a:	eef0 0a47 	vmov.f32	s1, s14
 800669e:	eeb0 1a67 	vmov.f32	s2, s15
 80066a2:	2205      	movs	r2, #5
 80066a4:	2103      	movs	r1, #3
 80066a6:	2001      	movs	r0, #1
 80066a8:	f7fc fd86 	bl	80031b8 <setMotorRPM>
 80066ac:	e0fc      	b.n	80068a8 <StartTurretTask+0x528>
 80066ae:	bf00      	nop
 80066b0:	33333333 	.word	0x33333333
 80066b4:	3fc33333 	.word	0x3fc33333
 80066b8:	9999999a 	.word	0x9999999a
 80066bc:	3fa99999 	.word	0x3fa99999
 80066c0:	9999999a 	.word	0x9999999a
 80066c4:	bfa99999 	.word	0xbfa99999
 80066c8:	9999999a 	.word	0x9999999a
 80066cc:	bfd99999 	.word	0xbfd99999
 80066d0:	08013880 	.word	0x08013880
 80066d4:	0801388c 	.word	0x0801388c
 80066d8:	08013898 	.word	0x08013898
 80066dc:	080138a4 	.word	0x080138a4
 80066e0:	080138b0 	.word	0x080138b0
 80066e4:	20000034 	.word	0x20000034
 80066e8:	20000a00 	.word	0x20000a00
 80066ec:	20000a0c 	.word	0x20000a0c
 80066f0:	41c80000 	.word	0x41c80000
 80066f4:	43480000 	.word	0x43480000
	  } else if (sentryAutoState == 4) {
 80066f8:	4b9b      	ldr	r3, [pc, #620]	@ (8006968 <StartTurretTask+0x5e8>)
 80066fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066fe:	2b04      	cmp	r3, #4
 8006700:	f040 8082 	bne.w	8006808 <StartTurretTask+0x488>
		  }
		*/



		  float gVP = gyroVel2 + (float)(CAL_getCH2()+turretRotationForCV[0])*0.01;
 8006704:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8006708:	f7f9 ff1e 	bl	8000548 <__aeabi_f2d>
 800670c:	4604      	mov	r4, r0
 800670e:	460d      	mov	r5, r1
 8006710:	f7fb fe80 	bl	8002414 <CAL_getCH2>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	4b94      	ldr	r3, [pc, #592]	@ (800696c <StartTurretTask+0x5ec>)
 800671a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800671e:	4413      	add	r3, r2
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006728:	ee17 0a90 	vmov	r0, s15
 800672c:	f7f9 ff0c 	bl	8000548 <__aeabi_f2d>
 8006730:	a38b      	add	r3, pc, #556	@ (adr r3, 8006960 <StartTurretTask+0x5e0>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7f9 fda3 	bl	800028c <__adddf3>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	f7fa fa2b 	bl	8000ba8 <__aeabi_d2f>
 8006752:	4603      	mov	r3, r0
 8006754:	66bb      	str	r3, [r7, #104]	@ 0x68
		  gyroidValue += gyroVel2 + (float)(CAL_getCH2()+turretRotationForCV[0])*0.01;
 8006756:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800675a:	f7f9 fef5 	bl	8000548 <__aeabi_f2d>
 800675e:	4604      	mov	r4, r0
 8006760:	460d      	mov	r5, r1
 8006762:	f7fb fe57 	bl	8002414 <CAL_getCH2>
 8006766:	4603      	mov	r3, r0
 8006768:	461a      	mov	r2, r3
 800676a:	4b80      	ldr	r3, [pc, #512]	@ (800696c <StartTurretTask+0x5ec>)
 800676c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006770:	4413      	add	r3, r2
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800677a:	ee17 0a90 	vmov	r0, s15
 800677e:	f7f9 fee3 	bl	8000548 <__aeabi_f2d>
 8006782:	a377      	add	r3, pc, #476	@ (adr r3, 8006960 <StartTurretTask+0x5e0>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 ff36 	bl	80005f8 <__aeabi_dmul>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	f7f9 fd7a 	bl	800028c <__adddf3>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4614      	mov	r4, r2
 800679e:	461d      	mov	r5, r3
 80067a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80067a4:	f7f9 fed0 	bl	8000548 <__aeabi_f2d>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 fd6c 	bl	800028c <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f7fa f9f4 	bl	8000ba8 <__aeabi_d2f>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  setMotorRPM(Bus1, GM6020, 5, (int16_t)(-1*gyroidValue + -200*gVP), test2);
 80067c6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80067ca:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006970 <StartTurretTask+0x5f0>
 80067ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067d2:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80067d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067de:	ee17 3a90 	vmov	r3, s15
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80067e8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80067ec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80067f0:	eeb0 0a66 	vmov.f32	s0, s13
 80067f4:	eef0 0a47 	vmov.f32	s1, s14
 80067f8:	eeb0 1a67 	vmov.f32	s2, s15
 80067fc:	2205      	movs	r2, #5
 80067fe:	2103      	movs	r1, #3
 8006800:	2001      	movs	r0, #1
 8006802:	f7fc fcd9 	bl	80031b8 <setMotorRPM>
 8006806:	e04f      	b.n	80068a8 <StartTurretTask+0x528>


		  // setMotorPosition(Bus1, GM6020, 5, turretRotationForCV[0], test3);
	  } else {

		  toGoVelue = SentryTurnAngle + CAL_getCH2();
 8006808:	f7fb fe04 	bl	8002414 <CAL_getCH2>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	4b58      	ldr	r3, [pc, #352]	@ (8006974 <StartTurretTask+0x5f4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4413      	add	r3, r2
 8006816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84


		  int16_t velue = wheelRotation (getRotorPosition(Bus1, GM6020, 5), toGoVelue);
 800681a:	2205      	movs	r2, #5
 800681c:	2103      	movs	r1, #3
 800681e:	2001      	movs	r0, #1
 8006820:	f7fc fd40 	bl	80032a4 <getRotorPosition>
 8006824:	4603      	mov	r3, r0
 8006826:	b21b      	sxth	r3, r3
 8006828:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800682c:	b212      	sxth	r2, r2
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fcd0 	bl	80061d6 <wheelRotation>
 8006836:	4603      	mov	r3, r0
 8006838:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		  // 2811
		   // turretYawVal = 1850;
		   // setMotorPosition(Bus1, GM6020, 5, turretYawVal, test3);
		  int32_t beans = kP*(velue) + kD*((velue - previousPeans) + -80*gyroVel2);
 800683c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006848:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800684c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006850:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 8006854:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006862:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8006866:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8006978 <StartTurretTask+0x5f8>
 800686a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800686e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006872:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8006876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800687a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006882:	ee17 3a90 	vmov	r3, s15
 8006886:	673b      	str	r3, [r7, #112]	@ 0x70
		  previousPeans = (velue);
 8006888:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800688c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6

		  int32_t beans2 = applyCtrlLimit(GM6020, beans);
 8006890:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006892:	2003      	movs	r0, #3
 8006894:	f7fc fc50 	bl	8003138 <applyCtrlLimit>
 8006898:	66f8      	str	r0, [r7, #108]	@ 0x6c
		  CAN_setMotorCtrlVal(Bus1, GM6020, 5, beans2);
 800689a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689c:	b21b      	sxth	r3, r3
 800689e:	2205      	movs	r2, #5
 80068a0:	2103      	movs	r1, #3
 80068a2:	2001      	movs	r0, #1
 80068a4:	f7fb ff9a 	bl	80027dc <CAN_setMotorCtrlVal>


	  // UART_Printf(&huart1, "M1: %d | M2: %d | M3: %d | M4: %d\r\n", getMotorRPM(Bus1, M3508, 1), getMotorRPM(Bus1, M3508, 2), getMotorRPM(Bus1, M3508, 3), getMotorRPM(Bus1, M3508, 4));

	  // Shooting Settings
      if (CAL_getS1() > 1 || SENTRYSHOOT[1] == 1) {
 80068a8:	f7fb fdd3 	bl	8002452 <CAL_getS1>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d803      	bhi.n	80068ba <StartTurretTask+0x53a>
 80068b2:	4b32      	ldr	r3, [pc, #200]	@ (800697c <StartTurretTask+0x5fc>)
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d162      	bne.n	8006980 <StartTurretTask+0x600>
          setMotorRPM(Bus1, M3508, 1, -1*speed, flywheels);
 80068ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068be:	425b      	negs	r3, r3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	b21b      	sxth	r3, r3
 80068c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80068c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80068cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80068d0:	eeb0 0a66 	vmov.f32	s0, s13
 80068d4:	eef0 0a47 	vmov.f32	s1, s14
 80068d8:	eeb0 1a67 	vmov.f32	s2, s15
 80068dc:	2201      	movs	r2, #1
 80068de:	2101      	movs	r1, #1
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7fc fc69 	bl	80031b8 <setMotorRPM>

          setMotorRPM(Bus1, M3508, 2, speed, flywheels);
 80068e6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 80068ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80068ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80068f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80068f6:	eeb0 0a66 	vmov.f32	s0, s13
 80068fa:	eef0 0a47 	vmov.f32	s1, s14
 80068fe:	eeb0 1a67 	vmov.f32	s2, s15
 8006902:	2202      	movs	r2, #2
 8006904:	2101      	movs	r1, #1
 8006906:	2001      	movs	r0, #1
 8006908:	f7fc fc56 	bl	80031b8 <setMotorRPM>
          // osDelay(2);
          setMotorRPM(Bus1, M3508, 3, speed, flywheels);
 800690c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 8006910:	edd7 6a08 	vldr	s13, [r7, #32]
 8006914:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006918:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800691c:	eeb0 0a66 	vmov.f32	s0, s13
 8006920:	eef0 0a47 	vmov.f32	s1, s14
 8006924:	eeb0 1a67 	vmov.f32	s2, s15
 8006928:	2203      	movs	r2, #3
 800692a:	2101      	movs	r1, #1
 800692c:	2001      	movs	r0, #1
 800692e:	f7fc fc43 	bl	80031b8 <setMotorRPM>
          // osDelay(2);
          setMotorRPM(Bus1, M3508, 4, -1*speed, flywheels);
 8006932:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006936:	425b      	negs	r3, r3
 8006938:	b29b      	uxth	r3, r3
 800693a:	b21b      	sxth	r3, r3
 800693c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006940:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006944:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006948:	eeb0 0a66 	vmov.f32	s0, s13
 800694c:	eef0 0a47 	vmov.f32	s1, s14
 8006950:	eeb0 1a67 	vmov.f32	s2, s15
 8006954:	2204      	movs	r2, #4
 8006956:	2101      	movs	r1, #1
 8006958:	2001      	movs	r0, #1
 800695a:	f7fc fc2d 	bl	80031b8 <setMotorRPM>
 800695e:	e057      	b.n	8006a10 <StartTurretTask+0x690>
 8006960:	47ae147b 	.word	0x47ae147b
 8006964:	3f847ae1 	.word	0x3f847ae1
 8006968:	20000a0c 	.word	0x20000a0c
 800696c:	20000a00 	.word	0x20000a00
 8006970:	c3480000 	.word	0xc3480000
 8006974:	20000034 	.word	0x20000034
 8006978:	c2a00000 	.word	0xc2a00000
 800697c:	20000a08 	.word	0x20000a08
          // setMotorRPM(Bus1, M3508, 1, -1*speed, flywheels);
          // usart_printf("Shooting\r\n");
          // usart_printf("On\r\n");
      } else {
      	// setMotorRPM(Bus1, M3508, 1, 0, yawPresetVoltageRPM);
      	setMotorRPM(Bus1, M3508, 2, 0, flywheels);
 8006980:	edd7 6a08 	vldr	s13, [r7, #32]
 8006984:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006988:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800698c:	eeb0 0a66 	vmov.f32	s0, s13
 8006990:	eef0 0a47 	vmov.f32	s1, s14
 8006994:	eeb0 1a67 	vmov.f32	s2, s15
 8006998:	2300      	movs	r3, #0
 800699a:	2202      	movs	r2, #2
 800699c:	2101      	movs	r1, #1
 800699e:	2001      	movs	r0, #1
 80069a0:	f7fc fc0a 	bl	80031b8 <setMotorRPM>
      	// osDelay(2);
      	setMotorRPM(Bus1, M3508, 3, 0, flywheels);
 80069a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80069a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80069ac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80069b0:	eeb0 0a66 	vmov.f32	s0, s13
 80069b4:	eef0 0a47 	vmov.f32	s1, s14
 80069b8:	eeb0 1a67 	vmov.f32	s2, s15
 80069bc:	2300      	movs	r3, #0
 80069be:	2203      	movs	r2, #3
 80069c0:	2101      	movs	r1, #1
 80069c2:	2001      	movs	r0, #1
 80069c4:	f7fc fbf8 	bl	80031b8 <setMotorRPM>
      	// osDelay(2);
      	setMotorRPM(Bus1, M3508, 4, 0, flywheels);
 80069c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80069cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80069d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80069d4:	eeb0 0a66 	vmov.f32	s0, s13
 80069d8:	eef0 0a47 	vmov.f32	s1, s14
 80069dc:	eeb0 1a67 	vmov.f32	s2, s15
 80069e0:	2300      	movs	r3, #0
 80069e2:	2204      	movs	r2, #4
 80069e4:	2101      	movs	r1, #1
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7fc fbe6 	bl	80031b8 <setMotorRPM>
      	// osDelay(2);
      	setMotorRPM(Bus1, M3508, 1, 0, flywheels);
 80069ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80069f0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80069f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80069f8:	eeb0 0a66 	vmov.f32	s0, s13
 80069fc:	eef0 0a47 	vmov.f32	s1, s14
 8006a00:	eeb0 1a67 	vmov.f32	s2, s15
 8006a04:	2300      	movs	r3, #0
 8006a06:	2201      	movs	r2, #1
 8006a08:	2101      	movs	r1, #1
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	f7fc fbd4 	bl	80031b8 <setMotorRPM>
      	// usart_printf("Off\r\n");
      }


      float heatBufferFraction1 = 0;
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      float heatBufferFraction2 = 0;
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (CAL_getHeatLimit() != 0) {
 8006a20:	f7fb fd4e 	bl	80024c0 <CAL_getHeatLimit>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d031      	beq.n	8006a8e <StartTurretTask+0x70e>
    	  heatBufferFraction1 = (float)(CAL_getBarrel1Heat())/(400.0);
 8006a2a:	f7fb fd25 	bl	8002478 <CAL_getBarrel1Heat>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	ee07 3a90 	vmov	s15, r3
 8006a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a38:	ee17 0a90 	vmov	r0, s15
 8006a3c:	f7f9 fd84 	bl	8000548 <__aeabi_f2d>
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	4bd2      	ldr	r3, [pc, #840]	@ (8006d90 <StartTurretTask+0xa10>)
 8006a46:	f7f9 ff01 	bl	800084c <__aeabi_ddiv>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fa f8a9 	bl	8000ba8 <__aeabi_d2f>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    	  heatBufferFraction2 = (float)(CAL_getBarrel2Heat())/(400.0);
 8006a5c:	f7fb fd18 	bl	8002490 <CAL_getBarrel2Heat>
 8006a60:	4603      	mov	r3, r0
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	ee17 0a90 	vmov	r0, s15
 8006a6e:	f7f9 fd6b 	bl	8000548 <__aeabi_f2d>
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	4bc6      	ldr	r3, [pc, #792]	@ (8006d90 <StartTurretTask+0xa10>)
 8006a78:	f7f9 fee8 	bl	800084c <__aeabi_ddiv>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4610      	mov	r0, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	f7fa f890 	bl	8000ba8 <__aeabi_d2f>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      }

      uint8_t flywheelReved = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      if ((getMotorRPM(Bus1, M3508, 1) < -4500) && (getMotorRPM(Bus1, M3508, 2) > 4500) && (getMotorRPM(Bus1, M3508, 3) > 4500) && (getMotorRPM(Bus1, M3508, 4) < -4500)) {
 8006a94:	2201      	movs	r2, #1
 8006a96:	2101      	movs	r1, #1
 8006a98:	2001      	movs	r0, #1
 8006a9a:	f7fc fc51 	bl	8003340 <getMotorRPM>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4bbc      	ldr	r3, [pc, #752]	@ (8006d94 <StartTurretTask+0xa14>)
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	da23      	bge.n	8006af0 <StartTurretTask+0x770>
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	2101      	movs	r1, #1
 8006aac:	2001      	movs	r0, #1
 8006aae:	f7fc fc47 	bl	8003340 <getMotorRPM>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f241 1394 	movw	r3, #4500	@ 0x1194
 8006aba:	429a      	cmp	r2, r3
 8006abc:	dd18      	ble.n	8006af0 <StartTurretTask+0x770>
 8006abe:	2203      	movs	r2, #3
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	f7fc fc3c 	bl	8003340 <getMotorRPM>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	f241 1394 	movw	r3, #4500	@ 0x1194
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	dd0d      	ble.n	8006af0 <StartTurretTask+0x770>
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7fc fc31 	bl	8003340 <getMotorRPM>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4bac      	ldr	r3, [pc, #688]	@ (8006d94 <StartTurretTask+0xa14>)
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	da03      	bge.n	8006af0 <StartTurretTask+0x770>
    	  flywheelReved = 1;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8006aee:	e002      	b.n	8006af6 <StartTurretTask+0x776>
      } else {
    	  flywheelReved = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      }

      if (firingNow == 1 && (heatBufferFraction1 > 0.8 || heatBufferFraction2 > 0.8)) {
 8006af6:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d11b      	bne.n	8006b36 <StartTurretTask+0x7b6>
 8006afe:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006b02:	f7f9 fd21 	bl	8000548 <__aeabi_f2d>
 8006b06:	a39e      	add	r3, pc, #632	@ (adr r3, 8006d80 <StartTurretTask+0xa00>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7fa f804 	bl	8000b18 <__aeabi_dcmpgt>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <StartTurretTask+0x7ae>
 8006b16:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006b1a:	f7f9 fd15 	bl	8000548 <__aeabi_f2d>
 8006b1e:	a398      	add	r3, pc, #608	@ (adr r3, 8006d80 <StartTurretTask+0xa00>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <StartTurretTask+0x7b6>
    	  firingNow = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 8006b34:	e01e      	b.n	8006b74 <StartTurretTask+0x7f4>
      } else if (firingNow == 0 && ((heatBufferFraction1 < 0.3 && heatBufferFraction2 < 0.3))) {
 8006b36:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11a      	bne.n	8006b74 <StartTurretTask+0x7f4>
 8006b3e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006b42:	f7f9 fd01 	bl	8000548 <__aeabi_f2d>
 8006b46:	a390      	add	r3, pc, #576	@ (adr r3, 8006d88 <StartTurretTask+0xa08>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 ffc6 	bl	8000adc <__aeabi_dcmplt>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <StartTurretTask+0x7f4>
 8006b56:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006b5a:	f7f9 fcf5 	bl	8000548 <__aeabi_f2d>
 8006b5e:	a38a      	add	r3, pc, #552	@ (adr r3, 8006d88 <StartTurretTask+0xa08>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 ffba 	bl	8000adc <__aeabi_dcmplt>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <StartTurretTask+0x7f4>
    	  firingNow = 1;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
      }


	  if (CAL_getS1() == 2) {
 8006b74:	f7fb fc6d 	bl	8002452 <CAL_getS1>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d12b      	bne.n	8006bd6 <StartTurretTask+0x856>
		  // Motors 2 & 4 (Left)
		  fondlerAutoReverse (fondlerVars[0], 1, 5, -1, fondler);
 8006b7e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006b82:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006b86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006b8a:	f107 0008 	add.w	r0, r7, #8
 8006b8e:	eeb0 0a66 	vmov.f32	s0, s13
 8006b92:	eef0 0a47 	vmov.f32	s1, s14
 8006b96:	eeb0 1a67 	vmov.f32	s2, s15
 8006b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b9e:	2205      	movs	r2, #5
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	f7fe ff01 	bl	80059a8 <fondlerAutoReverse>
		  osDelay(2);
 8006ba6:	2002      	movs	r0, #2
 8006ba8:	f006 fd36 	bl	800d618 <osDelay>
		  // Motors 1 & 3 (Right)
	      fondlerAutoReverse (fondlerVars[1], 1, 6, 1, fondler);
 8006bac:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006bb0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006bb4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	1d58      	adds	r0, r3, #5
 8006bbe:	eeb0 0a66 	vmov.f32	s0, s13
 8006bc2:	eef0 0a47 	vmov.f32	s1, s14
 8006bc6:	eeb0 1a67 	vmov.f32	s2, s15
 8006bca:	2301      	movs	r3, #1
 8006bcc:	2206      	movs	r2, #6
 8006bce:	2101      	movs	r1, #1
 8006bd0:	f7fe feea 	bl	80059a8 <fondlerAutoReverse>
 8006bd4:	e0ce      	b.n	8006d74 <StartTurretTask+0x9f4>
		  /*
			setMotorRPM(Bus1, M2006, 5, 5000, fondler);
			osDelay(2);
			setMotorRPM(Bus1, M2006, 6, -5000, fondler);
			*/
	  } else if (( SENTRYSHOOT[1] == 1 && flywheelReved == 1 && firingNow == 1)) {
 8006bd6:	4b70      	ldr	r3, [pc, #448]	@ (8006d98 <StartTurretTask+0xa18>)
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	f040 809d 	bne.w	8006d1a <StartTurretTask+0x99a>
 8006be0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	f040 8098 	bne.w	8006d1a <StartTurretTask+0x99a>
 8006bea:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	f040 8093 	bne.w	8006d1a <StartTurretTask+0x99a>
		  if (getMotorRPM(Bus1, M3508, 2) < 4800 && getMotorRPM(Bus1, M3508, 4) > -4800 && barrelToggle == 1) {
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f7fc fba1 	bl	8003340 <getMotorRPM>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8006c04:	da10      	bge.n	8006c28 <StartTurretTask+0x8a8>
 8006c06:	2204      	movs	r2, #4
 8006c08:	2101      	movs	r1, #1
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	f7fc fb98 	bl	8003340 <getMotorRPM>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 8006c16:	dd07      	ble.n	8006c28 <StartTurretTask+0x8a8>
 8006c18:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d103      	bne.n	8006c28 <StartTurretTask+0x8a8>
			  barrelToggle = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006c26:	e018      	b.n	8006c5a <StartTurretTask+0x8da>
		  } else if (getMotorRPM(Bus1, M3508, 3) < 4800 && getMotorRPM(Bus1, M3508, 1) > -4800 && barrelToggle == 0) {
 8006c28:	2203      	movs	r2, #3
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f7fc fb87 	bl	8003340 <getMotorRPM>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8006c38:	da0f      	bge.n	8006c5a <StartTurretTask+0x8da>
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f7fc fb7e 	bl	8003340 <getMotorRPM>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f513 5f96 	cmn.w	r3, #4800	@ 0x12c0
 8006c4a:	dd06      	ble.n	8006c5a <StartTurretTask+0x8da>
 8006c4c:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <StartTurretTask+0x8da>
			  barrelToggle = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
		  }

		  if (barrelToggle == 0) {
 8006c5a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d12b      	bne.n	8006cba <StartTurretTask+0x93a>
			  fondlerAutoReverse (fondlerVars[1], 1, 6, 1, fondler);
 8006c62:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006c66:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006c6a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	1d58      	adds	r0, r3, #5
 8006c74:	eeb0 0a66 	vmov.f32	s0, s13
 8006c78:	eef0 0a47 	vmov.f32	s1, s14
 8006c7c:	eeb0 1a67 	vmov.f32	s2, s15
 8006c80:	2301      	movs	r3, #1
 8006c82:	2206      	movs	r2, #6
 8006c84:	2101      	movs	r1, #1
 8006c86:	f7fe fe8f 	bl	80059a8 <fondlerAutoReverse>
			  osDelay(2);
 8006c8a:	2002      	movs	r0, #2
 8006c8c:	f006 fcc4 	bl	800d618 <osDelay>
			  fondlerAutoReverse (fondlerVars[0], 0, 5, -1, fondler);
 8006c90:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006c94:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006c98:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006c9c:	f107 0008 	add.w	r0, r7, #8
 8006ca0:	eeb0 0a66 	vmov.f32	s0, s13
 8006ca4:	eef0 0a47 	vmov.f32	s1, s14
 8006ca8:	eeb0 1a67 	vmov.f32	s2, s15
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	f7fe fe78 	bl	80059a8 <fondlerAutoReverse>
		  if (barrelToggle == 0) {
 8006cb8:	e05b      	b.n	8006d72 <StartTurretTask+0x9f2>
		  } else if (barrelToggle == 1) {
 8006cba:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d157      	bne.n	8006d72 <StartTurretTask+0x9f2>
			  fondlerAutoReverse (fondlerVars[0], 1, 5, -1, fondler);
 8006cc2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006cc6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006cca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006cce:	f107 0008 	add.w	r0, r7, #8
 8006cd2:	eeb0 0a66 	vmov.f32	s0, s13
 8006cd6:	eef0 0a47 	vmov.f32	s1, s14
 8006cda:	eeb0 1a67 	vmov.f32	s2, s15
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ce2:	2205      	movs	r2, #5
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	f7fe fe5f 	bl	80059a8 <fondlerAutoReverse>
			  osDelay(2);
 8006cea:	2002      	movs	r0, #2
 8006cec:	f006 fc94 	bl	800d618 <osDelay>
			  fondlerAutoReverse (fondlerVars[1], 0, 6, 1, fondler);
 8006cf0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006cf4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006cf8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006cfc:	f107 0308 	add.w	r3, r7, #8
 8006d00:	1d58      	adds	r0, r3, #5
 8006d02:	eeb0 0a66 	vmov.f32	s0, s13
 8006d06:	eef0 0a47 	vmov.f32	s1, s14
 8006d0a:	eeb0 1a67 	vmov.f32	s2, s15
 8006d0e:	2301      	movs	r3, #1
 8006d10:	2206      	movs	r2, #6
 8006d12:	2100      	movs	r1, #0
 8006d14:	f7fe fe48 	bl	80059a8 <fondlerAutoReverse>
		  if (barrelToggle == 0) {
 8006d18:	e02b      	b.n	8006d72 <StartTurretTask+0x9f2>
		  }
		  // UART_Printf(&huart1, "%d\r\n", barrelToggle);
	  } else {
		  fondlerAutoReverse (fondlerVars[0], 0, 5, -1, fondler);
 8006d1a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006d1e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006d22:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006d26:	f107 0008 	add.w	r0, r7, #8
 8006d2a:	eeb0 0a66 	vmov.f32	s0, s13
 8006d2e:	eef0 0a47 	vmov.f32	s1, s14
 8006d32:	eeb0 1a67 	vmov.f32	s2, s15
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	f7fe fe33 	bl	80059a8 <fondlerAutoReverse>
		  osDelay(2);
 8006d42:	2002      	movs	r0, #2
 8006d44:	f006 fc68 	bl	800d618 <osDelay>
		  fondlerAutoReverse (fondlerVars[1], 0, 6, 1, fondler);
 8006d48:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8006d4c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8006d50:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	1d58      	adds	r0, r3, #5
 8006d5a:	eeb0 0a66 	vmov.f32	s0, s13
 8006d5e:	eef0 0a47 	vmov.f32	s1, s14
 8006d62:	eeb0 1a67 	vmov.f32	s2, s15
 8006d66:	2301      	movs	r3, #1
 8006d68:	2206      	movs	r2, #6
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	f7fe fe1c 	bl	80059a8 <fondlerAutoReverse>
 8006d70:	e000      	b.n	8006d74 <StartTurretTask+0x9f4>
		  if (barrelToggle == 0) {
 8006d72:	bf00      	nop
			osDelay(2);
			setMotorRPM(Bus1, M2006, 6, 0, fondler);
		   */
	  }

	  osDelay(5);
 8006d74:	2005      	movs	r0, #5
 8006d76:	f006 fc4f 	bl	800d618 <osDelay>
  {
 8006d7a:	f7ff bb65 	b.w	8006448 <StartTurretTask+0xc8>
 8006d7e:	bf00      	nop
 8006d80:	9999999a 	.word	0x9999999a
 8006d84:	3fe99999 	.word	0x3fe99999
 8006d88:	33333333 	.word	0x33333333
 8006d8c:	3fd33333 	.word	0x3fd33333
 8006d90:	40790000 	.word	0x40790000
 8006d94:	ffffee6c 	.word	0xffffee6c
 8006d98:	20000a08 	.word	0x20000a08
 8006d9c:	00000000 	.word	0x00000000

08006da0 <StartSentryAutonomy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSentryAutonomy */
void StartSentryAutonomy(void *argument)
{
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b090      	sub	sp, #64	@ 0x40
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSentryAutonomy */
	osDelay(1000);
 8006da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006dac:	f006 fc34 	bl	800d618 <osDelay>
	MX_USART1_UART_Init();
 8006db0:	f7fe fc36 	bl	8005620 <MX_USART1_UART_Init>
	UART_Ex_Init(&huart1);
 8006db4:	48be      	ldr	r0, [pc, #760]	@ (80070b0 <StartSentryAutonomy+0x310>)
 8006db6:	f7fc fd8b 	bl	80038d0 <UART_Ex_Init>

	currentGameStatus = 0;
 8006dba:	4bbe      	ldr	r3, [pc, #760]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]

	sentryAutoState = 0;
 8006dc0:	4bbd      	ldr	r3, [pc, #756]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	801a      	strh	r2, [r3, #0]

	SENTRYSHOOT[0] = 0;
 8006dc6:	4bbd      	ldr	r3, [pc, #756]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
	SENTRYSHOOT[1] = 0;
 8006dcc:	4bbb      	ldr	r3, [pc, #748]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	705a      	strb	r2, [r3, #1]
	int16_t stateCounter = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	int16_t tempTurretRot[2] = {0, 0};
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8006dda:	2300      	movs	r3, #0
 8006ddc:	867b      	strh	r3, [r7, #50]	@ 0x32
	int16_t preVTTR[2] = {0, 0};
 8006dde:	2300      	movs	r3, #0
 8006de0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006de2:	2300      	movs	r3, #0
 8006de4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	int16_t motorYawPrev = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	873b      	strh	r3, [r7, #56]	@ 0x38

	int16_t oldSequenceNumber = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	int16_t CVArray[5] = {0, 0, 0, 0, 0};
 8006dee:	f107 0320 	add.w	r3, r7, #32
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	811a      	strh	r2, [r3, #8]
	int16_t enemyRelativeCoords[4][3] = {0};
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	609a      	str	r2, [r3, #8]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	611a      	str	r2, [r3, #16]
 8006e0a:	615a      	str	r2, [r3, #20]
	float currentTurretAngleSentry = 0;
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34

	CAL_getCurrentStage();
 8006e12:	f7fb fb25 	bl	8002460 <CAL_getCurrentStage>
			currentGameStatus = 4;
		} else if ((game_status.game_progress == 5 && currentGameStatus < 5) || leftSwitch == 1) {
			currentGameStatus = 5;
		}
		*/
	  if (getDR16_S2() == 1) {
 8006e16:	f7fc fc8b 	bl	8003730 <getDR16_S2>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d106      	bne.n	8006e2e <StartSentryAutonomy+0x8e>
		  currentGameStatus = 0;
 8006e20:	4ba4      	ldr	r3, [pc, #656]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
		  SENTRYSHOOT[1] = 0;
 8006e26:	4ba5      	ldr	r3, [pc, #660]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	705a      	strb	r2, [r3, #1]
 8006e2c:	e017      	b.n	8006e5e <StartSentryAutonomy+0xbe>
	  } else if (getDR16_S2() == 3) {
 8006e2e:	f7fc fc7f 	bl	8003730 <getDR16_S2>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d103      	bne.n	8006e40 <StartSentryAutonomy+0xa0>
		  currentGameStatus = 1;
 8006e38:	4b9e      	ldr	r3, [pc, #632]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e00e      	b.n	8006e5e <StartSentryAutonomy+0xbe>
	  } else if (getDR16_S2() == 2) {
 8006e40:	f7fc fc76 	bl	8003730 <getDR16_S2>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d103      	bne.n	8006e52 <StartSentryAutonomy+0xb2>
		  currentGameStatus = 4;
 8006e4a:	4b9a      	ldr	r3, [pc, #616]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	e005      	b.n	8006e5e <StartSentryAutonomy+0xbe>
	  } else {
		  currentGameStatus = CAL_getCurrentStage();
 8006e52:	f7fb fb05 	bl	8002460 <CAL_getCurrentStage>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b96      	ldr	r3, [pc, #600]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006e5c:	701a      	strb	r2, [r3, #0]
	  // UART_Printf(&huart1, "Current Game Status: %d, Actual Game State: %d, Sentry Auto State: %d, Sentry Turn Angle: %d\r\n", currentGameStatus, CAL_getCurrentStage(), sentryAutoState, SentryTurnAngle);

	  // UART_Printf(&huart1, "Current Game State: %d, Team Colour: %d\r\n", CAL_getCurrentStage(), CAL_getRobotId());
	  // CAN_Print(currentGameStatus,sentryAutoState,SENTRYSHOOT[1],driveChassisForwards,sentryAutoState);

	  switch (currentGameStatus) {
 8006e5e:	4b95      	ldr	r3, [pc, #596]	@ (80070b4 <StartSentryAutonomy+0x314>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	f200 81ed 	bhi.w	8007242 <StartSentryAutonomy+0x4a2>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <StartSentryAutonomy+0xd0>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e89 	.word	0x08006e89
 8006e74:	08006e95 	.word	0x08006e95
 8006e78:	08006eb3 	.word	0x08006eb3
 8006e7c:	08006ebf 	.word	0x08006ebf
 8006e80:	08006ecb 	.word	0x08006ecb
 8006e84:	08007243 	.word	0x08007243
		  /*
		  if ((currentGameStatus < 1 && CAL_getCurrentStage() >= 0)) {
			  currentGameStatus = 1;
		  }
		  */
		  stateCounter = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  sentryAutoState = 0;
 8006e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	801a      	strh	r2, [r3, #0]
		  break;
 8006e92:	e1d6      	b.n	8007242 <StartSentryAutonomy+0x4a2>
		  /*
		  if ((currentGameStatus < 2 && CAL_getCurrentStage() >= 1)) {
			  currentGameStatus = 2;
		  }
		  */
		  SentryTurnAngle = getRotorPosition(Bus1, GM6020, 5);
 8006e94:	2205      	movs	r2, #5
 8006e96:	2103      	movs	r1, #3
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f7fc fa03 	bl	80032a4 <getRotorPosition>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b87      	ldr	r3, [pc, #540]	@ (80070c0 <StartSentryAutonomy+0x320>)
 8006ea4:	601a      	str	r2, [r3, #0]
		  stateCounter = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  sentryAutoState = 0;
 8006eaa:	4b83      	ldr	r3, [pc, #524]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	801a      	strh	r2, [r3, #0]
		  break;
 8006eb0:	e1c7      	b.n	8007242 <StartSentryAutonomy+0x4a2>
		  /*
		  if ((currentGameStatus < 3 && CAL_getCurrentStage() >= 2)) {
			  currentGameStatus = 3;
		  }
		  */
		  stateCounter = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  sentryAutoState = 0;
 8006eb6:	4b80      	ldr	r3, [pc, #512]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	801a      	strh	r2, [r3, #0]
		  break;
 8006ebc:	e1c1      	b.n	8007242 <StartSentryAutonomy+0x4a2>
		  /*
		  if ((currentGameStatus < 4 && CAL_getCurrentStage() >= 3)) {
			  currentGameStatus = 4;
		  }
		  */
		  stateCounter = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  sentryAutoState = 0;
 8006ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	801a      	strh	r2, [r3, #0]
		  break;
 8006ec8:	e1bb      	b.n	8007242 <StartSentryAutonomy+0x4a2>
		  /*
		  if ((currentGameStatus < 5 && CAL_getCurrentStage() >= 4)) {
			  currentGameStatus = 5;
		  }
		  */
		  if (stateCounter < 2000) {
 8006eca:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8006ece:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006ed2:	da05      	bge.n	8006ee0 <StartSentryAutonomy+0x140>
			  stateCounter++;
 8006ed4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3301      	adds	r3, #1
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  }




		  switch (sentryAutoState) {
 8006ee0:	4b75      	ldr	r3, [pc, #468]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	f200 8150 	bhi.w	800718c <StartSentryAutonomy+0x3ec>
 8006eec:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <StartSentryAutonomy+0x154>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	0800718d 	.word	0x0800718d
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f7b 	.word	0x08006f7b
 8006f08:	08006f3b 	.word	0x08006f3b


		  // DEBUG STATE/Calibrate TurretState
		  case 0: {
			  driveChassisForwards = 0;
 8006f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80070c4 <StartSentryAutonomy+0x324>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
			  if (stateCounter > 100) {
 8006f12:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8006f16:	2b64      	cmp	r3, #100	@ 0x64
 8006f18:	dd02      	ble.n	8006f20 <StartSentryAutonomy+0x180>
				  sentryAutoState = 5;
 8006f1a:	4b67      	ldr	r3, [pc, #412]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	801a      	strh	r2, [r3, #0]
			  }
			  SentryTurnAngle = getRotorPosition(Bus1, GM6020, 5);
 8006f20:	2205      	movs	r2, #5
 8006f22:	2103      	movs	r1, #3
 8006f24:	2001      	movs	r0, #1
 8006f26:	f7fc f9bd 	bl	80032a4 <getRotorPosition>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b64      	ldr	r3, [pc, #400]	@ (80070c0 <StartSentryAutonomy+0x320>)
 8006f30:	601a      	str	r2, [r3, #0]
			  SENTRYSHOOT[1] = 0;
 8006f32:	4b62      	ldr	r3, [pc, #392]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	705a      	strb	r2, [r3, #1]
			  break;
 8006f38:	e128      	b.n	800718c <StartSentryAutonomy+0x3ec>
		  }
		  // AIM INTO REGION STATE
		  case 5: {
			  if (stateCounter > 200) {
 8006f3a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8006f3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f40:	dd02      	ble.n	8006f48 <StartSentryAutonomy+0x1a8>
				  sentryAutoState = 1;
 8006f42:	4b5d      	ldr	r3, [pc, #372]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	801a      	strh	r2, [r3, #0]
			  }
			  SENTRYSHOOT[1] = 0;
 8006f48:	4b5c      	ldr	r3, [pc, #368]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	705a      	strb	r2, [r3, #1]
			  break;
 8006f4e:	e11d      	b.n	800718c <StartSentryAutonomy+0x3ec>
		  }
		  // MOVE INTO WALL STATE
		  case 1: {

			  driveChassisForwards = 0;
 8006f50:	4b5c      	ldr	r3, [pc, #368]	@ (80070c4 <StartSentryAutonomy+0x324>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
			  SENTRYSHOOT[1] = 1;
 8006f56:	4b59      	ldr	r3, [pc, #356]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	705a      	strb	r2, [r3, #1]
			  }
			  if (stateCounter > 1000) {
				  sentryAutoState = 3;
			  }
			  */
			  SENTRYSHOOT[1] = 1;
 8006f5c:	4b57      	ldr	r3, [pc, #348]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	705a      	strb	r2, [r3, #1]
			  break;
 8006f62:	e113      	b.n	800718c <StartSentryAutonomy+0x3ec>
		  }
		  // SCAN PHASE
		  case 3: {
			  if (CVArray[4] < 5) {
 8006f64:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	dc02      	bgt.n	8006f72 <StartSentryAutonomy+0x1d2>
				  sentryAutoState = 4;
 8006f6c:	4b52      	ldr	r3, [pc, #328]	@ (80070b8 <StartSentryAutonomy+0x318>)
 8006f6e:	2204      	movs	r2, #4
 8006f70:	801a      	strh	r2, [r3, #0]
			  }
			  SENTRYSHOOT[1] = 0;
 8006f72:	4b52      	ldr	r3, [pc, #328]	@ (80070bc <StartSentryAutonomy+0x31c>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	705a      	strb	r2, [r3, #1]
			  break;
 8006f78:	e108      	b.n	800718c <StartSentryAutonomy+0x3ec>
		  }
		  // FIRE PHASE
		  case 4: {
			  driveChassisForwards = 0;
 8006f7a:	4b52      	ldr	r3, [pc, #328]	@ (80070c4 <StartSentryAutonomy+0x324>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
			  /*
			  if (CVArray[4] >= 75) {
				  sentryAutoState = 3;
			  }
			  */
			  if (CVArray[4] < 40) {
 8006f80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006f84:	2b27      	cmp	r3, #39	@ 0x27
 8006f86:	f300 80f1 	bgt.w	800716c <StartSentryAutonomy+0x3cc>
				  // Seeing Someone
				  turretRotationForCV[2] = 1;
 8006f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80070c8 <StartSentryAutonomy+0x328>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	809a      	strh	r2, [r3, #4]

				  // Delta Value Thing
				  // Original Tune was 0.25 for yaw and -0.25 for pitch
				  // Im planning on tuning this kP Value first and then ill see if adding a D value will help, Hopefully it will
				  tempTurretRot[0] = 0.2*(float)(CVArray[0]) + 10.0*(float)(CVArray[0]-preVTTR[0]);
 8006f90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f9c:	ee17 0a90 	vmov	r0, s15
 8006fa0:	f7f9 fad2 	bl	8000548 <__aeabi_f2d>
 8006fa4:	a33e      	add	r3, pc, #248	@ (adr r3, 80070a0 <StartSentryAutonomy+0x300>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fca:	ee17 0a90 	vmov	r0, s15
 8006fce:	f7f9 fabb 	bl	8000548 <__aeabi_f2d>
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80070cc <StartSentryAutonomy+0x32c>)
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 f952 	bl	800028c <__adddf3>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4610      	mov	r0, r2
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f7f9 fdb2 	bl	8000b58 <__aeabi_d2iz>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	b21b      	sxth	r3, r3
 8006ff8:	863b      	strh	r3, [r7, #48]	@ 0x30
				  tempTurretRot[1] = -1.2*(float)(CVArray[1]) - 24.0*(float)((CVArray[1])-preVTTR[1]);
 8006ffa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007006:	ee17 0a90 	vmov	r0, s15
 800700a:	f7f9 fa9d 	bl	8000548 <__aeabi_f2d>
 800700e:	a326      	add	r3, pc, #152	@ (adr r3, 80070a8 <StartSentryAutonomy+0x308>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 faf0 	bl	80005f8 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8007024:	461a      	mov	r2, r3
 8007026:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	ee07 3a90 	vmov	s15, r3
 8007030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007034:	ee17 0a90 	vmov	r0, s15
 8007038:	f7f9 fa86 	bl	8000548 <__aeabi_f2d>
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	4b23      	ldr	r3, [pc, #140]	@ (80070d0 <StartSentryAutonomy+0x330>)
 8007042:	f7f9 fad9 	bl	80005f8 <__aeabi_dmul>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4620      	mov	r0, r4
 800704c:	4629      	mov	r1, r5
 800704e:	f7f9 f91b 	bl	8000288 <__aeabi_dsub>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4610      	mov	r0, r2
 8007058:	4619      	mov	r1, r3
 800705a:	f7f9 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800705e:	4603      	mov	r3, r0
 8007060:	b21b      	sxth	r3, r3
 8007062:	867b      	strh	r3, [r7, #50]	@ 0x32

				  preVTTR[0] = CVArray[0];
 8007064:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007068:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				  preVTTR[1] = CVArray[1];
 800706a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800706e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
				  /*
				  tempTurretRot[0] = ((float)(getRotorPosition(Bus1, GM6020, 5)) - (float)(CVArray[0])*2.0 - (float)(getRotorPosition(Bus1, GM6020, 5)-motorYawPrev));
				  tempTurretRot[1] = ((float)(getRotorPosition(Bus1, GM6020, 5)) + (float)(CVArray[1])*2.0);
				  motorYawPrev = getRotorPosition(Bus1, GM6020, 5);
				  */
				  for (uint8_t j = 0; j < 2; j++) {
 8007070:	2300      	movs	r3, #0
 8007072:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8007076:	e051      	b.n	800711c <StartSentryAutonomy+0x37c>
					  if (tempTurretRot[j] < -660) {
 8007078:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	3340      	adds	r3, #64	@ 0x40
 8007080:	443b      	add	r3, r7
 8007082:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8007086:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800708a:	da23      	bge.n	80070d4 <StartSentryAutonomy+0x334>
						  tempTurretRot[j] = -660;
 800708c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	3340      	adds	r3, #64	@ 0x40
 8007094:	443b      	add	r3, r7
 8007096:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800709a:	f823 2c10 	strh.w	r2, [r3, #-16]
 800709e:	e02c      	b.n	80070fa <StartSentryAutonomy+0x35a>
 80070a0:	9999999a 	.word	0x9999999a
 80070a4:	3fc99999 	.word	0x3fc99999
 80070a8:	33333333 	.word	0x33333333
 80070ac:	bff33333 	.word	0xbff33333
 80070b0:	20000c74 	.word	0x20000c74
 80070b4:	20000a0a 	.word	0x20000a0a
 80070b8:	20000a0c 	.word	0x20000a0c
 80070bc:	20000a08 	.word	0x20000a08
 80070c0:	20000034 	.word	0x20000034
 80070c4:	20000a0e 	.word	0x20000a0e
 80070c8:	20000a00 	.word	0x20000a00
 80070cc:	40240000 	.word	0x40240000
 80070d0:	40380000 	.word	0x40380000
					  } else if (tempTurretRot[j] > 660 ){
 80070d4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	3340      	adds	r3, #64	@ 0x40
 80070dc:	443b      	add	r3, r7
 80070de:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80070e2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80070e6:	dd08      	ble.n	80070fa <StartSentryAutonomy+0x35a>
						  tempTurretRot[j] = 660;
 80070e8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	3340      	adds	r3, #64	@ 0x40
 80070f0:	443b      	add	r3, r7
 80070f2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80070f6:	f823 2c10 	strh.w	r2, [r3, #-16]
					  }
					  turretRotationForCV[j] = tempTurretRot[j];
 80070fa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80070fe:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	3340      	adds	r3, #64	@ 0x40
 8007106:	443b      	add	r3, r7
 8007108:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 800710c:	4b50      	ldr	r3, [pc, #320]	@ (8007250 <StartSentryAutonomy+0x4b0>)
 800710e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  for (uint8_t j = 0; j < 2; j++) {
 8007112:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007116:	3301      	adds	r3, #1
 8007118:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800711c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007120:	2b01      	cmp	r3, #1
 8007122:	d9a9      	bls.n	8007078 <StartSentryAutonomy+0x2d8>
				  }

				  if ((WithinRangeCalculator(CVArray[0], 0, 150) == 1) && (WithinRangeCalculator(CVArray[1], 0, 150) == 1) && (CVArray[2] != 0) && (CVArray[3] != 0)) {
 8007124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007128:	2296      	movs	r2, #150	@ 0x96
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff f80d 	bl	800614c <WithinRangeCalculator>
 8007132:	4603      	mov	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d115      	bne.n	8007164 <StartSentryAutonomy+0x3c4>
 8007138:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800713c:	2296      	movs	r2, #150	@ 0x96
 800713e:	2100      	movs	r1, #0
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff f803 	bl	800614c <WithinRangeCalculator>
 8007146:	4603      	mov	r3, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10b      	bne.n	8007164 <StartSentryAutonomy+0x3c4>
 800714c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <StartSentryAutonomy+0x3c4>
 8007154:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <StartSentryAutonomy+0x3c4>
					  SENTRYSHOOT[1] = 1;
 800715c:	4b3d      	ldr	r3, [pc, #244]	@ (8007254 <StartSentryAutonomy+0x4b4>)
 800715e:	2201      	movs	r2, #1
 8007160:	705a      	strb	r2, [r3, #1]
				  turretRotationForCV[1] = 0;
				  turretRotationForCV[2] = 0;
				  SENTRYSHOOT[1] = 0;
				  sentryAutoState = 3;
			  }
			  break;
 8007162:	e012      	b.n	800718a <StartSentryAutonomy+0x3ea>
					  SENTRYSHOOT[1] = 0;
 8007164:	4b3b      	ldr	r3, [pc, #236]	@ (8007254 <StartSentryAutonomy+0x4b4>)
 8007166:	2200      	movs	r2, #0
 8007168:	705a      	strb	r2, [r3, #1]
			  break;
 800716a:	e00e      	b.n	800718a <StartSentryAutonomy+0x3ea>
				  turretRotationForCV[0] = 0;
 800716c:	4b38      	ldr	r3, [pc, #224]	@ (8007250 <StartSentryAutonomy+0x4b0>)
 800716e:	2200      	movs	r2, #0
 8007170:	801a      	strh	r2, [r3, #0]
				  turretRotationForCV[1] = 0;
 8007172:	4b37      	ldr	r3, [pc, #220]	@ (8007250 <StartSentryAutonomy+0x4b0>)
 8007174:	2200      	movs	r2, #0
 8007176:	805a      	strh	r2, [r3, #2]
				  turretRotationForCV[2] = 0;
 8007178:	4b35      	ldr	r3, [pc, #212]	@ (8007250 <StartSentryAutonomy+0x4b0>)
 800717a:	2200      	movs	r2, #0
 800717c:	809a      	strh	r2, [r3, #4]
				  SENTRYSHOOT[1] = 0;
 800717e:	4b35      	ldr	r3, [pc, #212]	@ (8007254 <StartSentryAutonomy+0x4b4>)
 8007180:	2200      	movs	r2, #0
 8007182:	705a      	strb	r2, [r3, #1]
				  sentryAutoState = 3;
 8007184:	4b34      	ldr	r3, [pc, #208]	@ (8007258 <StartSentryAutonomy+0x4b8>)
 8007186:	2203      	movs	r2, #3
 8007188:	801a      	strh	r2, [r3, #0]
			  break;
 800718a:	bf00      	nop
		  }




		  if ((oldSequenceNumber == CAL_getCVSeq() && CVArray[4] < 40) || (isRobotEnemy(CAL_getRobotId(), CAL_getTargetColour()) == 1)) {
 800718c:	f9b7 403c 	ldrsh.w	r4, [r7, #60]	@ 0x3c
 8007190:	f7fb f9de 	bl	8002550 <CAL_getCVSeq>
 8007194:	4603      	mov	r3, r0
 8007196:	429c      	cmp	r4, r3
 8007198:	d103      	bne.n	80071a2 <StartSentryAutonomy+0x402>
 800719a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800719e:	2b27      	cmp	r3, #39	@ 0x27
 80071a0:	dd0e      	ble.n	80071c0 <StartSentryAutonomy+0x420>
 80071a2:	f7fb f981 	bl	80024a8 <CAL_getRobotId>
 80071a6:	4603      	mov	r3, r0
 80071a8:	b21c      	sxth	r4, r3
 80071aa:	f7fb f9c5 	bl	8002538 <CAL_getTargetColour>
 80071ae:	4603      	mov	r3, r0
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	4619      	mov	r1, r3
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7fe ffed 	bl	8006194 <isRobotEnemy>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d107      	bne.n	80071d0 <StartSentryAutonomy+0x430>
			  CVArray[4] += 1;
 80071c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80071ce:	e033      	b.n	8007238 <StartSentryAutonomy+0x498>
		  } else if (oldSequenceNumber == CAL_getCVSeq() && CVArray[4] >= 40) {
 80071d0:	f9b7 403c 	ldrsh.w	r4, [r7, #60]	@ 0x3c
 80071d4:	f7fb f9bc 	bl	8002550 <CAL_getCVSeq>
 80071d8:	4603      	mov	r3, r0
 80071da:	429c      	cmp	r4, r3
 80071dc:	d106      	bne.n	80071ec <StartSentryAutonomy+0x44c>
 80071de:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80071e2:	2b27      	cmp	r3, #39	@ 0x27
 80071e4:	dd02      	ble.n	80071ec <StartSentryAutonomy+0x44c>
			  CVArray[4] = 40;
 80071e6:	2328      	movs	r3, #40	@ 0x28
 80071e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80071ea:	e025      	b.n	8007238 <StartSentryAutonomy+0x498>
		  } else {
			  CVArray[0] = CAL_getTargetX();
 80071ec:	f7fb f974 	bl	80024d8 <CAL_getTargetX>
 80071f0:	4603      	mov	r3, r0
 80071f2:	843b      	strh	r3, [r7, #32]
			  CVArray[1] = CAL_getTargetY() + 75;
 80071f4:	f7fb f97c 	bl	80024f0 <CAL_getTargetY>
 80071f8:	4603      	mov	r3, r0
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	334b      	adds	r3, #75	@ 0x4b
 80071fe:	b29b      	uxth	r3, r3
 8007200:	b21b      	sxth	r3, r3
 8007202:	847b      	strh	r3, [r7, #34]	@ 0x22
			  CVArray[2] = CAL_getTargetWidth();
 8007204:	f7fb f980 	bl	8002508 <CAL_getTargetWidth>
 8007208:	4603      	mov	r3, r0
 800720a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			  CVArray[3] = CAL_getTargetHeight();
 800720c:	f7fb f988 	bl	8002520 <CAL_getTargetHeight>
 8007210:	4603      	mov	r3, r0
 8007212:	84fb      	strh	r3, [r7, #38]	@ 0x26
			  CVArray[4] = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	853b      	strh	r3, [r7, #40]	@ 0x28
			  AngletoCoordinateCalculator(CVArray, currentTurretAngleSentry, getRotorPosition(Bus2, GM6020, 3), enemyRelativeCoords);
 8007218:	2203      	movs	r2, #3
 800721a:	2103      	movs	r1, #3
 800721c:	2002      	movs	r0, #2
 800721e:	f7fc f841 	bl	80032a4 <getRotorPosition>
 8007222:	4603      	mov	r3, r0
 8007224:	b219      	sxth	r1, r3
 8007226:	f107 0208 	add.w	r2, r7, #8
 800722a:	f107 0320 	add.w	r3, r7, #32
 800722e:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fe50 	bl	8005ed8 <AngletoCoordinateCalculator>
		  }
		  oldSequenceNumber = CAL_getCVSeq();
 8007238:	f7fb f98a 	bl	8002550 <CAL_getCVSeq>
 800723c:	4603      	mov	r3, r0
 800723e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		  //  UART_Printf(&huart1, "x: %d | y: %d || width s: %d | height: %d || Timeout Length: %d\r\n", CVArray[0], CVArray[1], CVArray[2], CVArray[3], CVArray[4]);
		  // UART_Printf(&huart6, "x: %d\r\n", CAL_getTargetX());
		  // UART_Printf(&huart6, "x: %d | y: %d || width: %d | height: %d | TimeoutLength: %d  | SEQ: %d || Rough Distance: %f\r\n", CVArray[0], CVArray[1], CVArray[2], CVArray[3], CVArray[4], CAL_getCVSeq(), distanceCalc(CVArray[3]));
		  // UART_Printf(&huart6, "CurrentGameStatus: %d\r\n", currentGameStatus);
		  // UART_Printf(&huart1, "x: %d, y: %d\r\n", CVArray[0], CVArray[1]);
		  break;
 8007240:	bf00      	nop
	  case 5: { // Competition Results Computation
		  break;
	  }
	  }

	  PWMTimerStarter();
 8007242:	f000 f9e5 	bl	8007610 <PWMTimerStarter>
    osDelay(5);
 8007246:	2005      	movs	r0, #5
 8007248:	f006 f9e6 	bl	800d618 <osDelay>
	  if (getDR16_S2() == 1) {
 800724c:	e5e3      	b.n	8006e16 <StartSentryAutonomy+0x76>
 800724e:	bf00      	nop
 8007250:	20000a00 	.word	0x20000a00
 8007254:	20000a08 	.word	0x20000a08
 8007258:	20000a0c 	.word	0x20000a0c

0800725c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007260:	b672      	cpsid	i
}
 8007262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <Error_Handler+0x8>

08007268 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6178      	str	r0, [r7, #20]
 8007270:	460b      	mov	r3, r1
 8007272:	60fa      	str	r2, [r7, #12]
 8007274:	ed87 0a02 	vstr	s0, [r7, #8]
 8007278:	edc7 0a01 	vstr	s1, [r7, #4]
 800727c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d042      	beq.n	800730a <PID_init+0xa2>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d03f      	beq.n	800730a <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	7cfa      	ldrb	r2, [r7, #19]
 800728e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3304      	adds	r3, #4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3308      	adds	r3, #8
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	639a      	str	r2, [r3, #56]	@ 0x38
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	621a      	str	r2, [r3, #32]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007308:	e000      	b.n	800730c <PID_init+0xa4>
        return;
 800730a:	bf00      	nop
}
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	ed87 0a02 	vstr	s0, [r7, #8]
 8007322:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <PID_calc+0x1c>
    {
        return 0.0f;
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	e130      	b.n	8007594 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800734e:	ed97 7a01 	vldr	s14, [r7, #4]
 8007352:	edd7 7a02 	vldr	s15, [r7, #8]
 8007356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 8095 	bne.w	8007494 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	edd3 6a02 	vldr	s13, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80073bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80073e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	dd04      	ble.n	80073fc <PID_calc+0xe6>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80073fa:	e014      	b.n	8007426 <PID_calc+0x110>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	edd3 7a05 	vldr	s15, [r3, #20]
 8007408:	eef1 7a67 	vneg.f32	s15, s15
 800740c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	d507      	bpl.n	8007426 <PID_calc+0x110>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	edd3 7a05 	vldr	s15, [r3, #20]
 800741c:	eef1 7a67 	vneg.f32	s15, s15
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800743c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	ed93 7a08 	vldr	s14, [r3, #32]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745a:	dd04      	ble.n	8007466 <PID_calc+0x150>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	621a      	str	r2, [r3, #32]
 8007464:	e094      	b.n	8007590 <PID_calc+0x27a>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	ed93 7a08 	vldr	s14, [r3, #32]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007472:	eef1 7a67 	vneg.f32	s15, s15
 8007476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	f140 8087 	bpl.w	8007590 <PID_calc+0x27a>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	edd3 7a04 	vldr	s15, [r3, #16]
 8007488:	eef1 7a67 	vneg.f32	s15, s15
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	edc3 7a08 	vstr	s15, [r3, #32]
 8007492:	e07d      	b.n	8007590 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d179      	bne.n	8007590 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	ed93 7a01 	vldr	s14, [r3, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80074ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	ed93 7a02 	vldr	s14, [r3, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80074c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80074ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80074f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80074fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	ed93 7a03 	vldr	s14, [r3, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	ed93 7a08 	vldr	s14, [r3, #32]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800752e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	ed93 7a08 	vldr	s14, [r3, #32]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755a:	dd04      	ble.n	8007566 <PID_calc+0x250>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	621a      	str	r2, [r3, #32]
 8007564:	e014      	b.n	8007590 <PID_calc+0x27a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	ed93 7a08 	vldr	s14, [r3, #32]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007572:	eef1 7a67 	vneg.f32	s15, s15
 8007576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757e:	d507      	bpl.n	8007590 <PID_calc+0x27a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	edd3 7a04 	vldr	s15, [r3, #16]
 8007586:	eef1 7a67 	vneg.f32	s15, s15
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
}
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eeb0 0a67 	vmov.f32	s0, s15
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 80075b6:	4a12      	ldr	r2, [pc, #72]	@ (8007600 <PWMInit+0x58>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 80075bc:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <PWMInit+0x5c>)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 80075c2:	4a11      	ldr	r2, [pc, #68]	@ (8007608 <PWMInit+0x60>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 80075c8:	4a10      	ldr	r2, [pc, #64]	@ (800760c <PWMInit+0x64>)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 80075ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <PWMInit+0x58>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f003 fe38 	bl	800b248 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <PWMInit+0x5c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f003 fe33 	bl	800b248 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80075e2:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <PWMInit+0x60>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f003 fe2e 	bl	800b248 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <PWMInit+0x64>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f003 fe29 	bl	800b248 <HAL_TIM_Base_Start>
}
 80075f6:	bf00      	nop
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000e7c 	.word	0x20000e7c
 8007604:	20000e80 	.word	0x20000e80
 8007608:	20000e84 	.word	0x20000e84
 800760c:	20000e88 	.word	0x20000e88

08007610 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
 800761a:	e0f1      	b.n	8007800 <PWMTimerStarter+0x1f0>
		switch (i) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b0a      	cmp	r3, #10
 8007620:	f200 80eb 	bhi.w	80077fa <PWMTimerStarter+0x1ea>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <PWMTimerStarter+0x1c>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	08007659 	.word	0x08007659
 8007630:	0800767f 	.word	0x0800767f
 8007634:	080076a5 	.word	0x080076a5
 8007638:	080076cb 	.word	0x080076cb
 800763c:	080076f1 	.word	0x080076f1
 8007640:	08007717 	.word	0x08007717
 8007644:	0800773d 	.word	0x0800773d
 8007648:	08007763 	.word	0x08007763
 800764c:	08007789 	.word	0x08007789
 8007650:	080077af 	.word	0x080077af
 8007654:	080077d5 	.word	0x080077d5
		case 0:
			if (whichPWMisOn[0] == 1) {
 8007658:	4b6e      	ldr	r3, [pc, #440]	@ (8007814 <PWMTimerStarter+0x204>)
 800765a:	f993 3000 	ldrsb.w	r3, [r3]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d106      	bne.n	8007670 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8007662:	4b6d      	ldr	r3, [pc, #436]	@ (8007818 <PWMTimerStarter+0x208>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f003 fea5 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 800766e:	e0c4      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8007670:	4b69      	ldr	r3, [pc, #420]	@ (8007818 <PWMTimerStarter+0x208>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f003 ff66 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 800767c:	e0bd      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 800767e:	4b65      	ldr	r3, [pc, #404]	@ (8007814 <PWMTimerStarter+0x204>)
 8007680:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d106      	bne.n	8007696 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8007688:	4b63      	ldr	r3, [pc, #396]	@ (8007818 <PWMTimerStarter+0x208>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2104      	movs	r1, #4
 800768e:	4618      	mov	r0, r3
 8007690:	f003 fe92 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8007694:	e0b1      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8007696:	4b60      	ldr	r3, [pc, #384]	@ (8007818 <PWMTimerStarter+0x208>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2104      	movs	r1, #4
 800769c:	4618      	mov	r0, r3
 800769e:	f003 ff53 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80076a2:	e0aa      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 80076a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007814 <PWMTimerStarter+0x204>)
 80076a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d106      	bne.n	80076bc <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80076ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007818 <PWMTimerStarter+0x208>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2108      	movs	r1, #8
 80076b4:	4618      	mov	r0, r3
 80076b6:	f003 fe7f 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80076ba:	e09e      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80076bc:	4b56      	ldr	r3, [pc, #344]	@ (8007818 <PWMTimerStarter+0x208>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2108      	movs	r1, #8
 80076c2:	4618      	mov	r0, r3
 80076c4:	f003 ff40 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80076c8:	e097      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80076ca:	4b52      	ldr	r3, [pc, #328]	@ (8007814 <PWMTimerStarter+0x204>)
 80076cc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d106      	bne.n	80076e2 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80076d4:	4b50      	ldr	r3, [pc, #320]	@ (8007818 <PWMTimerStarter+0x208>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	210c      	movs	r1, #12
 80076da:	4618      	mov	r0, r3
 80076dc:	f003 fe6c 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80076e0:	e08b      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80076e2:	4b4d      	ldr	r3, [pc, #308]	@ (8007818 <PWMTimerStarter+0x208>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	210c      	movs	r1, #12
 80076e8:	4618      	mov	r0, r3
 80076ea:	f003 ff2d 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80076ee:	e084      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80076f0:	4b48      	ldr	r3, [pc, #288]	@ (8007814 <PWMTimerStarter+0x204>)
 80076f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d106      	bne.n	8007708 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80076fa:	4b48      	ldr	r3, [pc, #288]	@ (800781c <PWMTimerStarter+0x20c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f003 fe59 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8007706:	e078      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8007708:	4b44      	ldr	r3, [pc, #272]	@ (800781c <PWMTimerStarter+0x20c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f003 ff1a 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 8007714:	e071      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8007716:	4b3f      	ldr	r3, [pc, #252]	@ (8007814 <PWMTimerStarter+0x204>)
 8007718:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d106      	bne.n	800772e <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8007720:	4b3e      	ldr	r3, [pc, #248]	@ (800781c <PWMTimerStarter+0x20c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2104      	movs	r1, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f003 fe46 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 800772c:	e065      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 800772e:	4b3b      	ldr	r3, [pc, #236]	@ (800781c <PWMTimerStarter+0x20c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2104      	movs	r1, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f003 ff07 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 800773a:	e05e      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 800773c:	4b35      	ldr	r3, [pc, #212]	@ (8007814 <PWMTimerStarter+0x204>)
 800773e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d106      	bne.n	8007754 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8007746:	4b35      	ldr	r3, [pc, #212]	@ (800781c <PWMTimerStarter+0x20c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2108      	movs	r1, #8
 800774c:	4618      	mov	r0, r3
 800774e:	f003 fe33 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8007752:	e052      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8007754:	4b31      	ldr	r3, [pc, #196]	@ (800781c <PWMTimerStarter+0x20c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2108      	movs	r1, #8
 800775a:	4618      	mov	r0, r3
 800775c:	f003 fef4 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 8007760:	e04b      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8007762:	4b2c      	ldr	r3, [pc, #176]	@ (8007814 <PWMTimerStarter+0x204>)
 8007764:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d106      	bne.n	800777a <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 800776c:	4b2c      	ldr	r3, [pc, #176]	@ (8007820 <PWMTimerStarter+0x210>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f003 fe20 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8007778:	e03f      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 800777a:	4b29      	ldr	r3, [pc, #164]	@ (8007820 <PWMTimerStarter+0x210>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f003 fee1 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 8007786:	e038      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8007788:	4b22      	ldr	r3, [pc, #136]	@ (8007814 <PWMTimerStarter+0x204>)
 800778a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d106      	bne.n	80077a0 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8007792:	4b23      	ldr	r3, [pc, #140]	@ (8007820 <PWMTimerStarter+0x210>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2104      	movs	r1, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f003 fe0d 	bl	800b3b8 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800779e:	e02c      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 80077a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <PWMTimerStarter+0x210>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2104      	movs	r1, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f003 fece 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80077ac:	e025      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 80077ae:	4b19      	ldr	r3, [pc, #100]	@ (8007814 <PWMTimerStarter+0x204>)
 80077b0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d106      	bne.n	80077c6 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80077b8:	4b19      	ldr	r3, [pc, #100]	@ (8007820 <PWMTimerStarter+0x210>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2108      	movs	r1, #8
 80077be:	4618      	mov	r0, r3
 80077c0:	f003 fdfa 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 80077c4:	e019      	b.n	80077fa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80077c6:	4b16      	ldr	r3, [pc, #88]	@ (8007820 <PWMTimerStarter+0x210>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2108      	movs	r1, #8
 80077cc:	4618      	mov	r0, r3
 80077ce:	f003 febb 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80077d2:	e012      	b.n	80077fa <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80077d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007814 <PWMTimerStarter+0x204>)
 80077d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d106      	bne.n	80077ec <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <PWMTimerStarter+0x214>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2108      	movs	r1, #8
 80077e4:	4618      	mov	r0, r3
 80077e6:	f003 fde7 	bl	800b3b8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 80077ea:	e005      	b.n	80077f8 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 80077ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <PWMTimerStarter+0x214>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2108      	movs	r1, #8
 80077f2:	4618      	mov	r0, r3
 80077f4:	f003 fea8 	bl	800b548 <HAL_TIM_PWM_Stop>
			break;
 80077f8:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3301      	adds	r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b0a      	cmp	r3, #10
 8007804:	f77f af0a 	ble.w	800761c <PWMTimerStarter+0xc>
		}
	}
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000e8c 	.word	0x20000e8c
 8007818:	20000e7c 	.word	0x20000e7c
 800781c:	20000e88 	.word	0x20000e88
 8007820:	20000e84 	.word	0x20000e84
 8007824:	20000e80 	.word	0x20000e80

08007828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	4b12      	ldr	r3, [pc, #72]	@ (800787c <HAL_MspInit+0x54>)
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	4a11      	ldr	r2, [pc, #68]	@ (800787c <HAL_MspInit+0x54>)
 8007838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800783c:	6453      	str	r3, [r2, #68]	@ 0x44
 800783e:	4b0f      	ldr	r3, [pc, #60]	@ (800787c <HAL_MspInit+0x54>)
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <HAL_MspInit+0x54>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <HAL_MspInit+0x54>)
 8007854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007858:	6413      	str	r3, [r2, #64]	@ 0x40
 800785a:	4b08      	ldr	r3, [pc, #32]	@ (800787c <HAL_MspInit+0x54>)
 800785c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007866:	2200      	movs	r2, #0
 8007868:	210f      	movs	r1, #15
 800786a:	f06f 0001 	mvn.w	r0, #1
 800786e:	f001 fdc2 	bl	80093f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800

08007880 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	@ 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007888:	f107 031c 	add.w	r3, r7, #28
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	609a      	str	r2, [r3, #8]
 8007894:	60da      	str	r2, [r3, #12]
 8007896:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a4a      	ldr	r2, [pc, #296]	@ (80079c8 <HAL_CAN_MspInit+0x148>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d13d      	bne.n	800791e <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80078a2:	4b4a      	ldr	r3, [pc, #296]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	4a48      	ldr	r2, [pc, #288]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 80078aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80078ac:	4b47      	ldr	r3, [pc, #284]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10d      	bne.n	80078d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	4b45      	ldr	r3, [pc, #276]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	4a44      	ldr	r2, [pc, #272]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80078c4:	4b42      	ldr	r3, [pc, #264]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	4b3e      	ldr	r3, [pc, #248]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d8:	4a3d      	ldr	r2, [pc, #244]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078da:	f043 0308 	orr.w	r3, r3, #8
 80078de:	6313      	str	r3, [r2, #48]	@ 0x30
 80078e0:	4b3b      	ldr	r3, [pc, #236]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80078ec:	2303      	movs	r3, #3
 80078ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f0:	2302      	movs	r3, #2
 80078f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078f8:	2303      	movs	r3, #3
 80078fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80078fc:	2309      	movs	r3, #9
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007900:	f107 031c 	add.w	r3, r7, #28
 8007904:	4619      	mov	r1, r3
 8007906:	4833      	ldr	r0, [pc, #204]	@ (80079d4 <HAL_CAN_MspInit+0x154>)
 8007908:	f002 f9ae 	bl	8009c68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800790c:	2200      	movs	r2, #0
 800790e:	2105      	movs	r1, #5
 8007910:	2014      	movs	r0, #20
 8007912:	f001 fd70 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007916:	2014      	movs	r0, #20
 8007918:	f001 fd89 	bl	800942e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 800791c:	e04f      	b.n	80079be <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2d      	ldr	r2, [pc, #180]	@ (80079d8 <HAL_CAN_MspInit+0x158>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d14a      	bne.n	80079be <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	4b28      	ldr	r3, [pc, #160]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	4a27      	ldr	r2, [pc, #156]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 8007932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007936:	6413      	str	r3, [r2, #64]	@ 0x40
 8007938:	4b25      	ldr	r3, [pc, #148]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007944:	4b21      	ldr	r3, [pc, #132]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a20      	ldr	r2, [pc, #128]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 800794c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800794e:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <HAL_CAN_MspInit+0x14c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10d      	bne.n	8007972 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	4b1d      	ldr	r3, [pc, #116]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	4a1c      	ldr	r2, [pc, #112]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 8007960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007964:	6413      	str	r3, [r2, #64]	@ 0x40
 8007966:	4b1a      	ldr	r3, [pc, #104]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	4a15      	ldr	r2, [pc, #84]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	6313      	str	r3, [r2, #48]	@ 0x30
 8007982:	4b13      	ldr	r3, [pc, #76]	@ (80079d0 <HAL_CAN_MspInit+0x150>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800798e:	2360      	movs	r3, #96	@ 0x60
 8007990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007992:	2302      	movs	r3, #2
 8007994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007996:	2300      	movs	r3, #0
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800799a:	2303      	movs	r3, #3
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800799e:	2309      	movs	r3, #9
 80079a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079a2:	f107 031c 	add.w	r3, r7, #28
 80079a6:	4619      	mov	r1, r3
 80079a8:	480c      	ldr	r0, [pc, #48]	@ (80079dc <HAL_CAN_MspInit+0x15c>)
 80079aa:	f002 f95d 	bl	8009c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80079ae:	2200      	movs	r2, #0
 80079b0:	2105      	movs	r1, #5
 80079b2:	2040      	movs	r0, #64	@ 0x40
 80079b4:	f001 fd1f 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80079b8:	2040      	movs	r0, #64	@ 0x40
 80079ba:	f001 fd38 	bl	800942e <HAL_NVIC_EnableIRQ>
}
 80079be:	bf00      	nop
 80079c0:	3730      	adds	r7, #48	@ 0x30
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40006400 	.word	0x40006400
 80079cc:	20000e98 	.word	0x20000e98
 80079d0:	40023800 	.word	0x40023800
 80079d4:	40020c00 	.word	0x40020c00
 80079d8:	40006800 	.word	0x40006800
 80079dc:	40020400 	.word	0x40020400

080079e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	@ 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a29      	ldr	r2, [pc, #164]	@ (8007aa4 <HAL_I2C_MspInit+0xc4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d14b      	bne.n	8007a9a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	4b28      	ldr	r3, [pc, #160]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	4a27      	ldr	r2, [pc, #156]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a0c:	f043 0304 	orr.w	r3, r3, #4
 8007a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a12:	4b25      	ldr	r3, [pc, #148]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	4b21      	ldr	r3, [pc, #132]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a26:	4a20      	ldr	r2, [pc, #128]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a40:	2312      	movs	r3, #18
 8007a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a50:	f107 0314 	add.w	r3, r7, #20
 8007a54:	4619      	mov	r1, r3
 8007a56:	4815      	ldr	r0, [pc, #84]	@ (8007aac <HAL_I2C_MspInit+0xcc>)
 8007a58:	f002 f906 	bl	8009c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a62:	2312      	movs	r3, #18
 8007a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a6e:	2304      	movs	r3, #4
 8007a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a72:	f107 0314 	add.w	r3, r7, #20
 8007a76:	4619      	mov	r1, r3
 8007a78:	480d      	ldr	r0, [pc, #52]	@ (8007ab0 <HAL_I2C_MspInit+0xd0>)
 8007a7a:	f002 f8f5 	bl	8009c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60bb      	str	r3, [r7, #8]
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	4a08      	ldr	r2, [pc, #32]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <HAL_I2C_MspInit+0xc8>)
 8007a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a96:	60bb      	str	r3, [r7, #8]
 8007a98:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007a9a:	bf00      	nop
 8007a9c:	3728      	adds	r7, #40	@ 0x28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	40005c00 	.word	0x40005c00
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40020800 	.word	0x40020800
 8007ab0:	40020000 	.word	0x40020000

08007ab4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	@ 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	605a      	str	r2, [r3, #4]
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	@ (8007b74 <HAL_SPI_MspInit+0xc0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d149      	bne.n	8007b6a <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	4b27      	ldr	r3, [pc, #156]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007ae0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ae6:	4b24      	ldr	r3, [pc, #144]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	4b20      	ldr	r3, [pc, #128]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afa:	4a1f      	ldr	r2, [pc, #124]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007afc:	f043 0302 	orr.w	r3, r3, #2
 8007b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b02:	4b1d      	ldr	r3, [pc, #116]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	4b19      	ldr	r3, [pc, #100]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b1e:	4b16      	ldr	r3, [pc, #88]	@ (8007b78 <HAL_SPI_MspInit+0xc4>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	60bb      	str	r3, [r7, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8007b2a:	2318      	movs	r3, #24
 8007b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b36:	2303      	movs	r3, #3
 8007b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b3a:	2305      	movs	r3, #5
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	4619      	mov	r1, r3
 8007b44:	480d      	ldr	r0, [pc, #52]	@ (8007b7c <HAL_SPI_MspInit+0xc8>)
 8007b46:	f002 f88f 	bl	8009c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b4a:	2380      	movs	r3, #128	@ 0x80
 8007b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b56:	2303      	movs	r3, #3
 8007b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b5a:	2305      	movs	r3, #5
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b5e:	f107 0314 	add.w	r3, r7, #20
 8007b62:	4619      	mov	r1, r3
 8007b64:	4806      	ldr	r0, [pc, #24]	@ (8007b80 <HAL_SPI_MspInit+0xcc>)
 8007b66:	f002 f87f 	bl	8009c68 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007b6a:	bf00      	nop
 8007b6c:	3728      	adds	r7, #40	@ 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40013000 	.word	0x40013000
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40020400 	.word	0x40020400
 8007b80:	40020000 	.word	0x40020000

08007b84 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	@ (8007c10 <HAL_TIM_PWM_MspInit+0x8c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d10e      	bne.n	8007bb4 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007bb2:	e026      	b.n	8007c02 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a17      	ldr	r2, [pc, #92]	@ (8007c18 <HAL_TIM_PWM_MspInit+0x94>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10e      	bne.n	8007bdc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	4a13      	ldr	r2, [pc, #76]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bc8:	f043 0308 	orr.w	r3, r3, #8
 8007bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bce:	4b11      	ldr	r3, [pc, #68]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	693b      	ldr	r3, [r7, #16]
}
 8007bda:	e012      	b.n	8007c02 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0e      	ldr	r2, [pc, #56]	@ (8007c1c <HAL_TIM_PWM_MspInit+0x98>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d10d      	bne.n	8007c02 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b0a      	ldr	r3, [pc, #40]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bee:	4a09      	ldr	r2, [pc, #36]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bf6:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <HAL_TIM_PWM_MspInit+0x90>)
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40023800 	.word	0x40023800
 8007c18:	40000c00 	.word	0x40000c00
 8007c1c:	40010400 	.word	0x40010400

08007c20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <HAL_TIM_Base_MspInit+0x64>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10e      	bne.n	8007c50 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4b14      	ldr	r3, [pc, #80]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	4a13      	ldr	r2, [pc, #76]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c42:	4b11      	ldr	r3, [pc, #68]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8007c4e:	e012      	b.n	8007c76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <HAL_TIM_Base_MspInit+0x6c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d10d      	bne.n	8007c76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c62:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c6a:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <HAL_TIM_Base_MspInit+0x68>)
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	68bb      	ldr	r3, [r7, #8]
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40014400 	.word	0x40014400

08007c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08e      	sub	sp, #56	@ 0x38
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6a      	ldr	r2, [pc, #424]	@ (8007e58 <HAL_TIM_MspPostInit+0x1c8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d11f      	bne.n	8007cf2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	623b      	str	r3, [r7, #32]
 8007cb6:	4b69      	ldr	r3, [pc, #420]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	4a68      	ldr	r2, [pc, #416]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007cbc:	f043 0310 	orr.w	r3, r3, #16
 8007cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cc2:	4b66      	ldr	r3, [pc, #408]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8007cce:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce8:	4619      	mov	r1, r3
 8007cea:	485d      	ldr	r0, [pc, #372]	@ (8007e60 <HAL_TIM_MspPostInit+0x1d0>)
 8007cec:	f001 ffbc 	bl	8009c68 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8007cf0:	e0ae      	b.n	8007e50 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8007e64 <HAL_TIM_MspPostInit+0x1d4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d11f      	bne.n	8007d3c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	4b56      	ldr	r3, [pc, #344]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	4a55      	ldr	r2, [pc, #340]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d06:	f043 0308 	orr.w	r3, r3, #8
 8007d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d0c:	4b53      	ldr	r3, [pc, #332]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007d18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d26:	2300      	movs	r3, #0
 8007d28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d32:	4619      	mov	r1, r3
 8007d34:	484c      	ldr	r0, [pc, #304]	@ (8007e68 <HAL_TIM_MspPostInit+0x1d8>)
 8007d36:	f001 ff97 	bl	8009c68 <HAL_GPIO_Init>
}
 8007d3a:	e089      	b.n	8007e50 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a4a      	ldr	r2, [pc, #296]	@ (8007e6c <HAL_TIM_MspPostInit+0x1dc>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d11f      	bne.n	8007d86 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d46:	2300      	movs	r3, #0
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	4b44      	ldr	r3, [pc, #272]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	4a43      	ldr	r2, [pc, #268]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d56:	4b41      	ldr	r3, [pc, #260]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8007d62:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d70:	2300      	movs	r3, #0
 8007d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007d74:	2302      	movs	r3, #2
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	483c      	ldr	r0, [pc, #240]	@ (8007e70 <HAL_TIM_MspPostInit+0x1e0>)
 8007d80:	f001 ff72 	bl	8009c68 <HAL_GPIO_Init>
}
 8007d84:	e064      	b.n	8007e50 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3a      	ldr	r2, [pc, #232]	@ (8007e74 <HAL_TIM_MspPostInit+0x1e4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d13c      	bne.n	8007e0a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	4b31      	ldr	r3, [pc, #196]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d98:	4a30      	ldr	r2, [pc, #192]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007da0:	4b2e      	ldr	r3, [pc, #184]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	4b2a      	ldr	r3, [pc, #168]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	4a29      	ldr	r2, [pc, #164]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007db6:	f043 0304 	orr.w	r3, r3, #4
 8007dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dbc:	4b27      	ldr	r3, [pc, #156]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8007dc8:	23c0      	movs	r3, #192	@ 0xc0
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007de0:	4619      	mov	r1, r3
 8007de2:	4825      	ldr	r0, [pc, #148]	@ (8007e78 <HAL_TIM_MspPostInit+0x1e8>)
 8007de4:	f001 ff40 	bl	8009c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007de8:	2340      	movs	r3, #64	@ 0x40
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dec:	2302      	movs	r3, #2
 8007dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df4:	2300      	movs	r3, #0
 8007df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e00:	4619      	mov	r1, r3
 8007e02:	481e      	ldr	r0, [pc, #120]	@ (8007e7c <HAL_TIM_MspPostInit+0x1ec>)
 8007e04:	f001 ff30 	bl	8009c68 <HAL_GPIO_Init>
}
 8007e08:	e022      	b.n	8007e50 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e80 <HAL_TIM_MspPostInit+0x1f0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d11d      	bne.n	8007e50 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	4b10      	ldr	r3, [pc, #64]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007e1e:	f043 0320 	orr.w	r3, r3, #32
 8007e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e24:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <HAL_TIM_MspPostInit+0x1cc>)
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e30:	2340      	movs	r3, #64	@ 0x40
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e34:	2302      	movs	r3, #2
 8007e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007e40:	2303      	movs	r3, #3
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e48:	4619      	mov	r1, r3
 8007e4a:	480e      	ldr	r0, [pc, #56]	@ (8007e84 <HAL_TIM_MspPostInit+0x1f4>)
 8007e4c:	f001 ff0c 	bl	8009c68 <HAL_GPIO_Init>
}
 8007e50:	bf00      	nop
 8007e52:	3738      	adds	r7, #56	@ 0x38
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40010000 	.word	0x40010000
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	40021000 	.word	0x40021000
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40020c00 	.word	0x40020c00
 8007e6c:	40000c00 	.word	0x40000c00
 8007e70:	40021c00 	.word	0x40021c00
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40022000 	.word	0x40022000
 8007e7c:	40020800 	.word	0x40020800
 8007e80:	40014400 	.word	0x40014400
 8007e84:	40021400 	.word	0x40021400

08007e88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08e      	sub	sp, #56	@ 0x38
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	605a      	str	r2, [r3, #4]
 8007e9a:	609a      	str	r2, [r3, #8]
 8007e9c:	60da      	str	r2, [r3, #12]
 8007e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a74      	ldr	r2, [pc, #464]	@ (8008078 <HAL_UART_MspInit+0x1f0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	f040 8083 	bne.w	8007fb2 <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
 8007eb0:	4b72      	ldr	r3, [pc, #456]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb4:	4a71      	ldr	r2, [pc, #452]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007eb6:	f043 0310 	orr.w	r3, r3, #16
 8007eba:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	623b      	str	r3, [r7, #32]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007ed2:	f043 0302 	orr.w	r3, r3, #2
 8007ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ed8:	4b68      	ldr	r3, [pc, #416]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	4b64      	ldr	r3, [pc, #400]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eec:	4a63      	ldr	r2, [pc, #396]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ef4:	4b61      	ldr	r3, [pc, #388]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007f00:	2380      	movs	r3, #128	@ 0x80
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f04:	2302      	movs	r3, #2
 8007f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f10:	2307      	movs	r3, #7
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4859      	ldr	r0, [pc, #356]	@ (8008080 <HAL_UART_MspInit+0x1f8>)
 8007f1c:	f001 fea4 	bl	8009c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f26:	2302      	movs	r3, #2
 8007f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f32:	2307      	movs	r3, #7
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4851      	ldr	r0, [pc, #324]	@ (8008084 <HAL_UART_MspInit+0x1fc>)
 8007f3e:	f001 fe93 	bl	8009c68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8007f42:	4b51      	ldr	r3, [pc, #324]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f44:	4a51      	ldr	r2, [pc, #324]	@ (800808c <HAL_UART_MspInit+0x204>)
 8007f46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8007f48:	4b4f      	ldr	r3, [pc, #316]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f50:	4b4d      	ldr	r3, [pc, #308]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f56:	4b4c      	ldr	r3, [pc, #304]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f64:	4b48      	ldr	r3, [pc, #288]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f6a:	4b47      	ldr	r3, [pc, #284]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007f70:	4b45      	ldr	r3, [pc, #276]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007f76:	4b44      	ldr	r3, [pc, #272]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f78:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007f7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f7e:	4b42      	ldr	r3, [pc, #264]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007f84:	4840      	ldr	r0, [pc, #256]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f86:	f001 fa6d 	bl	8009464 <HAL_DMA_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8007f90:	f7ff f964 	bl	800725c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3c      	ldr	r2, [pc, #240]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8008088 <HAL_UART_MspInit+0x200>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2105      	movs	r1, #5
 8007fa4:	2025      	movs	r0, #37	@ 0x25
 8007fa6:	f001 fa26 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007faa:	2025      	movs	r0, #37	@ 0x25
 8007fac:	f001 fa3f 	bl	800942e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8007fb0:	e0df      	b.n	8008172 <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a36      	ldr	r2, [pc, #216]	@ (8008090 <HAL_UART_MspInit+0x208>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d171      	bne.n	80080a0 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	4b27      	ldr	r3, [pc, #156]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe0:	4a26      	ldr	r2, [pc, #152]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fe2:	f043 0304 	orr.w	r3, r3, #4
 8007fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fe8:	4b24      	ldr	r3, [pc, #144]	@ (800807c <HAL_UART_MspInit+0x1f4>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007ff4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008002:	2303      	movs	r3, #3
 8008004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008006:	2307      	movs	r3, #7
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800800a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800800e:	4619      	mov	r1, r3
 8008010:	4820      	ldr	r0, [pc, #128]	@ (8008094 <HAL_UART_MspInit+0x20c>)
 8008012:	f001 fe29 	bl	8009c68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8008016:	4b20      	ldr	r3, [pc, #128]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008018:	4a20      	ldr	r2, [pc, #128]	@ (800809c <HAL_UART_MspInit+0x214>)
 800801a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800801c:	4b1e      	ldr	r3, [pc, #120]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800801e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008022:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008024:	4b1c      	ldr	r3, [pc, #112]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800802a:	4b1b      	ldr	r3, [pc, #108]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800802c:	2200      	movs	r2, #0
 800802e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008030:	4b19      	ldr	r3, [pc, #100]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008036:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008038:	4b17      	ldr	r3, [pc, #92]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800803a:	2200      	movs	r2, #0
 800803c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800803e:	4b16      	ldr	r3, [pc, #88]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008040:	2200      	movs	r2, #0
 8008042:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8008044:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800804a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800804c:	4b12      	ldr	r3, [pc, #72]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800804e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008052:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008054:	4b10      	ldr	r3, [pc, #64]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008056:	2200      	movs	r2, #0
 8008058:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800805a:	480f      	ldr	r0, [pc, #60]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800805c:	f001 fa02 	bl	8009464 <HAL_DMA_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8008066:	f7ff f8f9 	bl	800725c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a0a      	ldr	r2, [pc, #40]	@ (8008098 <HAL_UART_MspInit+0x210>)
 800806e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008070:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <HAL_UART_MspInit+0x210>)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008076:	e07c      	b.n	8008172 <HAL_UART_MspInit+0x2ea>
 8008078:	40011000 	.word	0x40011000
 800807c:	40023800 	.word	0x40023800
 8008080:	40020400 	.word	0x40020400
 8008084:	40020000 	.word	0x40020000
 8008088:	20000d4c 	.word	0x20000d4c
 800808c:	40026440 	.word	0x40026440
 8008090:	40004800 	.word	0x40004800
 8008094:	40020800 	.word	0x40020800
 8008098:	20000dac 	.word	0x20000dac
 800809c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a35      	ldr	r2, [pc, #212]	@ (800817c <HAL_UART_MspInit+0x2f4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d163      	bne.n	8008172 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	4b34      	ldr	r3, [pc, #208]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080b2:	4a33      	ldr	r2, [pc, #204]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080b4:	f043 0320 	orr.w	r3, r3, #32
 80080b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80080ba:	4b31      	ldr	r3, [pc, #196]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80080d6:	4b2a      	ldr	r3, [pc, #168]	@ (8008180 <HAL_UART_MspInit+0x2f8>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80080e2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f0:	2303      	movs	r3, #3
 80080f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80080f4:	2308      	movs	r3, #8
 80080f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080fc:	4619      	mov	r1, r3
 80080fe:	4821      	ldr	r0, [pc, #132]	@ (8008184 <HAL_UART_MspInit+0x2fc>)
 8008100:	f001 fdb2 	bl	8009c68 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8008104:	4b20      	ldr	r3, [pc, #128]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008106:	4a21      	ldr	r2, [pc, #132]	@ (800818c <HAL_UART_MspInit+0x304>)
 8008108:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800810a:	4b1f      	ldr	r3, [pc, #124]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800810c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8008110:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008112:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008114:	2200      	movs	r2, #0
 8008116:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008118:	4b1b      	ldr	r3, [pc, #108]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800811a:	2200      	movs	r2, #0
 800811c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800811e:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008120:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008124:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008126:	4b18      	ldr	r3, [pc, #96]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008128:	2200      	movs	r2, #0
 800812a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800812c:	4b16      	ldr	r3, [pc, #88]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800812e:	2200      	movs	r2, #0
 8008130:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8008132:	4b15      	ldr	r3, [pc, #84]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008134:	2200      	movs	r2, #0
 8008136:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008138:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800813a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800813e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008140:	4b11      	ldr	r3, [pc, #68]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008142:	2200      	movs	r2, #0
 8008144:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008146:	4810      	ldr	r0, [pc, #64]	@ (8008188 <HAL_UART_MspInit+0x300>)
 8008148:	f001 f98c 	bl	8009464 <HAL_DMA_Init>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8008152:	f7ff f883 	bl	800725c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a0b      	ldr	r2, [pc, #44]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800815a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800815c:	4a0a      	ldr	r2, [pc, #40]	@ (8008188 <HAL_UART_MspInit+0x300>)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8008162:	2200      	movs	r2, #0
 8008164:	2105      	movs	r1, #5
 8008166:	2047      	movs	r0, #71	@ 0x47
 8008168:	f001 f945 	bl	80093f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800816c:	2047      	movs	r0, #71	@ 0x47
 800816e:	f001 f95e 	bl	800942e <HAL_NVIC_EnableIRQ>
}
 8008172:	bf00      	nop
 8008174:	3738      	adds	r7, #56	@ 0x38
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40011400 	.word	0x40011400
 8008180:	40023800 	.word	0x40023800
 8008184:	40021800 	.word	0x40021800
 8008188:	20000e0c 	.word	0x20000e0c
 800818c:	40026428 	.word	0x40026428

08008190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008194:	f002 fcde 	bl	800ab54 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <NMI_Handler+0x8>

0800819c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <HardFault_Handler+0x4>

080081a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081a8:	bf00      	nop
 80081aa:	e7fd      	b.n	80081a8 <MemManage_Handler+0x4>

080081ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <BusFault_Handler+0x4>

080081b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <UsageFault_Handler+0x4>

080081bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081ce:	f000 f9b1 	bl	8008534 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80081d2:	f006 ff71 	bl	800f0b8 <xTaskGetSchedulerState>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d001      	beq.n	80081e0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80081dc:	f007 fe4c 	bl	800fe78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081e0:	bf00      	nop
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80081e8:	2008      	movs	r0, #8
 80081ea:	f001 fef3 	bl	8009fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80081ee:	bf00      	nop
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80081f6:	2010      	movs	r0, #16
 80081f8:	f001 feec 	bl	8009fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}

08008200 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008204:	4802      	ldr	r0, [pc, #8]	@ (8008210 <DMA1_Stream1_IRQHandler+0x10>)
 8008206:	f001 fac5 	bl	8009794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000dac 	.word	0x20000dac

08008214 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008218:	4802      	ldr	r0, [pc, #8]	@ (8008224 <CAN1_RX0_IRQHandler+0x10>)
 800821a:	f000 fde1 	bl	8008de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800821e:	bf00      	nop
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000a10 	.word	0x20000a10

08008228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800822c:	4802      	ldr	r0, [pc, #8]	@ (8008238 <USART1_IRQHandler+0x10>)
 800822e:	f004 f837 	bl	800c2a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000c74 	.word	0x20000c74

0800823c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008240:	4802      	ldr	r0, [pc, #8]	@ (800824c <DMA2_Stream1_IRQHandler+0x10>)
 8008242:	f001 faa7 	bl	8009794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000e0c 	.word	0x20000e0c

08008250 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008254:	4802      	ldr	r0, [pc, #8]	@ (8008260 <DMA2_Stream2_IRQHandler+0x10>)
 8008256:	f001 fa9d 	bl	8009794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000d4c 	.word	0x20000d4c

08008264 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8008268:	4802      	ldr	r0, [pc, #8]	@ (8008274 <CAN2_RX0_IRQHandler+0x10>)
 800826a:	f000 fdb9 	bl	8008de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000a38 	.word	0x20000a38

08008278 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800827c:	4802      	ldr	r0, [pc, #8]	@ (8008288 <USART6_IRQHandler+0x10>)
 800827e:	f004 f80f 	bl	800c2a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000d04 	.word	0x20000d04

0800828c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return 1;
 8008290:	2301      	movs	r3, #1
}
 8008292:	4618      	mov	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <_kill>:

int _kill(int pid, int sig)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082a6:	f008 fd87 	bl	8010db8 <__errno>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2216      	movs	r2, #22
 80082ae:	601a      	str	r2, [r3, #0]
  return -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_exit>:

void _exit (int status)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80082c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff ffe7 	bl	800829c <_kill>
  while (1) {}    /* Make sure we hang here */
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <_exit+0x12>

080082d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e00a      	b.n	80082fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80082e4:	f3af 8000 	nop.w
 80082e8:	4601      	mov	r1, r0
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	60ba      	str	r2, [r7, #8]
 80082f0:	b2ca      	uxtb	r2, r1
 80082f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3301      	adds	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	dbf0      	blt.n	80082e4 <_read+0x12>
  }

  return len;
 8008302:	687b      	ldr	r3, [r7, #4]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e009      	b.n	8008332 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	60ba      	str	r2, [r7, #8]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3301      	adds	r3, #1
 8008330:	617b      	str	r3, [r7, #20]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	dbf1      	blt.n	800831e <_write+0x12>
  }
  return len;
 800833a:	687b      	ldr	r3, [r7, #4]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_close>:

int _close(int file)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800834c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800836c:	605a      	str	r2, [r3, #4]
  return 0;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <_isatty>:

int _isatty(int file)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008384:	2301      	movs	r3, #1
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b4:	4a14      	ldr	r2, [pc, #80]	@ (8008408 <_sbrk+0x5c>)
 80083b6:	4b15      	ldr	r3, [pc, #84]	@ (800840c <_sbrk+0x60>)
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083c0:	4b13      	ldr	r3, [pc, #76]	@ (8008410 <_sbrk+0x64>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083c8:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <_sbrk+0x64>)
 80083ca:	4a12      	ldr	r2, [pc, #72]	@ (8008414 <_sbrk+0x68>)
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ce:	4b10      	ldr	r3, [pc, #64]	@ (8008410 <_sbrk+0x64>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d207      	bcs.n	80083ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083dc:	f008 fcec 	bl	8010db8 <__errno>
 80083e0:	4603      	mov	r3, r0
 80083e2:	220c      	movs	r2, #12
 80083e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083ea:	e009      	b.n	8008400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083ec:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <_sbrk+0x64>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083f2:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <_sbrk+0x64>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	4a05      	ldr	r2, [pc, #20]	@ (8008410 <_sbrk+0x64>)
 80083fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20020000 	.word	0x20020000
 800840c:	00000400 	.word	0x00000400
 8008410:	20000e9c 	.word	0x20000e9c
 8008414:	200059d8 	.word	0x200059d8

08008418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <SystemInit+0x20>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008422:	4a05      	ldr	r2, [pc, #20]	@ (8008438 <SystemInit+0x20>)
 8008424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800843c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008440:	f7ff ffea 	bl	8008418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008444:	480c      	ldr	r0, [pc, #48]	@ (8008478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008446:	490d      	ldr	r1, [pc, #52]	@ (800847c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008448:	4a0d      	ldr	r2, [pc, #52]	@ (8008480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800844a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800844c:	e002      	b.n	8008454 <LoopCopyDataInit>

0800844e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800844e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008452:	3304      	adds	r3, #4

08008454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008458:	d3f9      	bcc.n	800844e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800845a:	4a0a      	ldr	r2, [pc, #40]	@ (8008484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800845c:	4c0a      	ldr	r4, [pc, #40]	@ (8008488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800845e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008460:	e001      	b.n	8008466 <LoopFillZerobss>

08008462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008464:	3204      	adds	r2, #4

08008466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008468:	d3fb      	bcc.n	8008462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800846a:	f008 fcab 	bl	8010dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800846e:	f7fc fcb5 	bl	8004ddc <main>
  bx  lr    
 8008472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800847c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8008480:	080142e4 	.word	0x080142e4
  ldr r2, =_sbss
 8008484:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8008488:	200059d8 	.word	0x200059d8

0800848c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800848c:	e7fe      	b.n	800848c <ADC_IRQHandler>
	...

08008490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008494:	4b0e      	ldr	r3, [pc, #56]	@ (80084d0 <HAL_Init+0x40>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a0d      	ldr	r2, [pc, #52]	@ (80084d0 <HAL_Init+0x40>)
 800849a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800849e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084a0:	4b0b      	ldr	r3, [pc, #44]	@ (80084d0 <HAL_Init+0x40>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a0a      	ldr	r2, [pc, #40]	@ (80084d0 <HAL_Init+0x40>)
 80084a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80084aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084ac:	4b08      	ldr	r3, [pc, #32]	@ (80084d0 <HAL_Init+0x40>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a07      	ldr	r2, [pc, #28]	@ (80084d0 <HAL_Init+0x40>)
 80084b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084b8:	2003      	movs	r0, #3
 80084ba:	f000 ff91 	bl	80093e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084be:	200f      	movs	r0, #15
 80084c0:	f000 f808 	bl	80084d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084c4:	f7ff f9b0 	bl	8007828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40023c00 	.word	0x40023c00

080084d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <HAL_InitTick+0x54>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4b12      	ldr	r3, [pc, #72]	@ (800852c <HAL_InitTick+0x58>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 ffa9 	bl	800944a <HAL_SYSTICK_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e00e      	b.n	8008520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b0f      	cmp	r3, #15
 8008506:	d80a      	bhi.n	800851e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008508:	2200      	movs	r2, #0
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008510:	f000 ff71 	bl	80093f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008514:	4a06      	ldr	r2, [pc, #24]	@ (8008530 <HAL_InitTick+0x5c>)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e000      	b.n	8008520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000038 	.word	0x20000038
 800852c:	20000040 	.word	0x20000040
 8008530:	2000003c 	.word	0x2000003c

08008534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <HAL_IncTick+0x20>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_IncTick+0x24>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4413      	add	r3, r2
 8008544:	4a04      	ldr	r2, [pc, #16]	@ (8008558 <HAL_IncTick+0x24>)
 8008546:	6013      	str	r3, [r2, #0]
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000040 	.word	0x20000040
 8008558:	20000ea0 	.word	0x20000ea0

0800855c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  return uwTick;
 8008560:	4b03      	ldr	r3, [pc, #12]	@ (8008570 <HAL_GetTick+0x14>)
 8008562:	681b      	ldr	r3, [r3, #0]
}
 8008564:	4618      	mov	r0, r3
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20000ea0 	.word	0x20000ea0

08008574 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e0ed      	b.n	8008762 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff f974 	bl	8007880 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085a8:	f7ff ffd8 	bl	800855c <HAL_GetTick>
 80085ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085ae:	e012      	b.n	80085d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085b0:	f7ff ffd4 	bl	800855c <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b0a      	cmp	r3, #10
 80085bc:	d90b      	bls.n	80085d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2205      	movs	r2, #5
 80085ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e0c5      	b.n	8008762 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0e5      	beq.n	80085b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0202 	bic.w	r2, r2, #2
 80085f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085f4:	f7ff ffb2 	bl	800855c <HAL_GetTick>
 80085f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80085fa:	e012      	b.n	8008622 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085fc:	f7ff ffae 	bl	800855c <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b0a      	cmp	r3, #10
 8008608:	d90b      	bls.n	8008622 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2205      	movs	r2, #5
 800861a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e09f      	b.n	8008762 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e5      	bne.n	80085fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7e1b      	ldrb	r3, [r3, #24]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d108      	bne.n	800864a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e007      	b.n	800865a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008658:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7e5b      	ldrb	r3, [r3, #25]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d108      	bne.n	8008674 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e007      	b.n	8008684 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008682:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7e9b      	ldrb	r3, [r3, #26]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d108      	bne.n	800869e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0220 	orr.w	r2, r2, #32
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e007      	b.n	80086ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0220 	bic.w	r2, r2, #32
 80086ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7edb      	ldrb	r3, [r3, #27]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d108      	bne.n	80086c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0210 	bic.w	r2, r2, #16
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	e007      	b.n	80086d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0210 	orr.w	r2, r2, #16
 80086d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7f1b      	ldrb	r3, [r3, #28]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d108      	bne.n	80086f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0208 	orr.w	r2, r2, #8
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e007      	b.n	8008702 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0208 	bic.w	r2, r2, #8
 8008700:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7f5b      	ldrb	r3, [r3, #29]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d108      	bne.n	800871c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0204 	orr.w	r2, r2, #4
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	e007      	b.n	800872c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0204 	bic.w	r2, r2, #4
 800872a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	ea42 0103 	orr.w	r1, r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800877c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d003      	beq.n	800878c <HAL_CAN_ConfigFilter+0x20>
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b02      	cmp	r3, #2
 8008788:	f040 80be 	bne.w	8008908 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800878c:	4b65      	ldr	r3, [pc, #404]	@ (8008924 <HAL_CAN_ConfigFilter+0x1b8>)
 800878e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80087a6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	431a      	orrs	r2, r3
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	2201      	movs	r2, #1
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	43db      	mvns	r3, r3
 80087de:	401a      	ands	r2, r3
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d123      	bne.n	8008836 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	401a      	ands	r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008810:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	3248      	adds	r2, #72	@ 0x48
 8008816:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800882a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800882c:	6939      	ldr	r1, [r7, #16]
 800882e:	3348      	adds	r3, #72	@ 0x48
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	440b      	add	r3, r1
 8008834:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d122      	bne.n	8008884 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	431a      	orrs	r2, r3
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800885e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3248      	adds	r2, #72	@ 0x48
 8008864:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008878:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800887a:	6939      	ldr	r1, [r7, #16]
 800887c:	3348      	adds	r3, #72	@ 0x48
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	440b      	add	r3, r1
 8008882:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d109      	bne.n	80088a0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	43db      	mvns	r3, r3
 8008896:	401a      	ands	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800889e:	e007      	b.n	80088b0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	431a      	orrs	r2, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80088ca:	e007      	b.n	80088dc <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d107      	bne.n	80088f4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80088fa:	f023 0201 	bic.w	r2, r3, #1
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	e006      	b.n	8008916 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40006400 	.word	0x40006400

08008928 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	d12e      	bne.n	800899a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008954:	f7ff fe02 	bl	800855c <HAL_GetTick>
 8008958:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800895a:	e012      	b.n	8008982 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800895c:	f7ff fdfe 	bl	800855c <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b0a      	cmp	r3, #10
 8008968:	d90b      	bls.n	8008982 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2205      	movs	r2, #5
 800897a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e012      	b.n	80089a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e5      	bne.n	800895c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	e006      	b.n	80089a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
  }
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	@ 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d003      	beq.n	80089dc <HAL_CAN_AddTxMessage+0x2c>
 80089d4:	7ffb      	ldrb	r3, [r7, #31]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	f040 80ad 	bne.w	8008b36 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8095 	beq.w	8008b26 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	0e1b      	lsrs	r3, r3, #24
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008a06:	2201      	movs	r2, #1
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	409a      	lsls	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10d      	bne.n	8008a34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	6809      	ldr	r1, [r1, #0]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	3318      	adds	r3, #24
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	440b      	add	r3, r1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e00f      	b.n	8008a54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008a48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	440b      	add	r3, r1
 8008a52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6819      	ldr	r1, [r3, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	691a      	ldr	r2, [r3, #16]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3318      	adds	r3, #24
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	440b      	add	r3, r1
 8008a64:	3304      	adds	r3, #4
 8008a66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	7d1b      	ldrb	r3, [r3, #20]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d111      	bne.n	8008a94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	3318      	adds	r3, #24
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	6811      	ldr	r1, [r2, #0]
 8008a84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3318      	adds	r3, #24
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	440b      	add	r3, r1
 8008a90:	3304      	adds	r3, #4
 8008a92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3307      	adds	r3, #7
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	061a      	lsls	r2, r3, #24
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3306      	adds	r3, #6
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	041b      	lsls	r3, r3, #16
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3305      	adds	r3, #5
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	3204      	adds	r2, #4
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	6811      	ldr	r1, [r2, #0]
 8008abc:	ea43 0200 	orr.w	r2, r3, r0
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	440b      	add	r3, r1
 8008ac6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8008aca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3303      	adds	r3, #3
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	061a      	lsls	r2, r3, #24
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3302      	adds	r3, #2
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7812      	ldrb	r2, [r2, #0]
 8008aec:	4610      	mov	r0, r2
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	6811      	ldr	r1, [r2, #0]
 8008af2:	ea43 0200 	orr.w	r2, r3, r0
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	440b      	add	r3, r1
 8008afc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8008b00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3318      	adds	r3, #24
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	4413      	add	r3, r2
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	6811      	ldr	r1, [r2, #0]
 8008b14:	f043 0201 	orr.w	r2, r3, #1
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	3318      	adds	r3, #24
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	440b      	add	r3, r1
 8008b20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e00e      	b.n	8008b44 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e006      	b.n	8008b44 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3724      	adds	r7, #36	@ 0x24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d003      	beq.n	8008b74 <HAL_CAN_GetRxMessage+0x24>
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	f040 8103 	bne.w	8008d7a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10e      	bne.n	8008b98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d116      	bne.n	8008bb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0f7      	b.n	8008d88 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d107      	bne.n	8008bb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e0e8      	b.n	8008d88 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	331b      	adds	r3, #27
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	4413      	add	r3, r2
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0204 	and.w	r2, r3, #4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10c      	bne.n	8008bee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	331b      	adds	r3, #27
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	4413      	add	r3, r2
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	0d5b      	lsrs	r3, r3, #21
 8008be4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e00b      	b.n	8008c06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	331b      	adds	r3, #27
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	4413      	add	r3, r2
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	08db      	lsrs	r3, r3, #3
 8008bfe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	331b      	adds	r3, #27
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	4413      	add	r3, r2
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0202 	and.w	r2, r3, #2
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	331b      	adds	r3, #27
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2208      	movs	r2, #8
 8008c38:	611a      	str	r2, [r3, #16]
 8008c3a:	e00b      	b.n	8008c54 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	331b      	adds	r3, #27
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4413      	add	r3, r2
 8008c48:	3304      	adds	r3, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 020f 	and.w	r2, r3, #15
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	331b      	adds	r3, #27
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	4413      	add	r3, r2
 8008c60:	3304      	adds	r3, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	331b      	adds	r3, #27
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	4413      	add	r3, r2
 8008c78:	3304      	adds	r3, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	0c1b      	lsrs	r3, r3, #16
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	0a1a      	lsrs	r2, r3, #8
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	0c1a      	lsrs	r2, r3, #16
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	0e1a      	lsrs	r2, r3, #24
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	3303      	adds	r3, #3
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	0a1a      	lsrs	r2, r3, #8
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	3305      	adds	r3, #5
 8008d16:	b2d2      	uxtb	r2, r2
 8008d18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	0c1a      	lsrs	r2, r3, #16
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3306      	adds	r3, #6
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0e1a      	lsrs	r2, r3, #24
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	3307      	adds	r3, #7
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d108      	bne.n	8008d66 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0220 	orr.w	r2, r2, #32
 8008d62:	60da      	str	r2, [r3, #12]
 8008d64:	e007      	b.n	8008d76 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0220 	orr.w	r2, r2, #32
 8008d74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e006      	b.n	8008d88 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
  }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008da4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d002      	beq.n	8008db2 <HAL_CAN_ActivateNotification+0x1e>
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d109      	bne.n	8008dc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6959      	ldr	r1, [r3, #20]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e006      	b.n	8008dd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
  }
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d07c      	beq.n	8008f20 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d023      	beq.n	8008e78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2201      	movs	r2, #1
 8008e36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f983 	bl	800914e <HAL_CAN_TxMailbox0CompleteCallback>
 8008e48:	e016      	b.n	8008e78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e5c:	e00c      	b.n	8008e78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e70:	e002      	b.n	8008e78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f989 	bl	800918a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d024      	beq.n	8008ecc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f963 	bl	8009162 <HAL_CAN_TxMailbox1CompleteCallback>
 8008e9c:	e016      	b.n	8008ecc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb0:	e00c      	b.n	8008ecc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d004      	beq.n	8008ec6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec4:	e002      	b.n	8008ecc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f969 	bl	800919e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d024      	beq.n	8008f20 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008ede:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f943 	bl	8009176 <HAL_CAN_TxMailbox2CompleteCallback>
 8008ef0:	e016      	b.n	8008f20 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f04:	e00c      	b.n	8008f20 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d004      	beq.n	8008f1a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f18:	e002      	b.n	8008f20 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f949 	bl	80091b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f3a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2210      	movs	r2, #16
 8008f42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2208      	movs	r2, #8
 8008f5e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f930 	bl	80091c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f9 faf2 	bl	8002568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00c      	beq.n	8008fa8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2210      	movs	r2, #16
 8008fa6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f003 0308 	and.w	r3, r3, #8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f912 	bl	80091ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d009      	beq.n	8008fe8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8f9 	bl	80091da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2210      	movs	r2, #16
 8009002:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8fc 	bl	8009202 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d006      	beq.n	800902c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2208      	movs	r2, #8
 8009024:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f8f5 	bl	8009216 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d07b      	beq.n	800912e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d072      	beq.n	8009126 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009072:	f043 0302 	orr.w	r3, r3, #2
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	f043 0304 	orr.w	r3, r3, #4
 8009092:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800909a:	2b00      	cmp	r3, #0
 800909c:	d043      	beq.n	8009126 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d03e      	beq.n	8009126 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090ae:	2b60      	cmp	r3, #96	@ 0x60
 80090b0:	d02b      	beq.n	800910a <HAL_CAN_IRQHandler+0x32a>
 80090b2:	2b60      	cmp	r3, #96	@ 0x60
 80090b4:	d82e      	bhi.n	8009114 <HAL_CAN_IRQHandler+0x334>
 80090b6:	2b50      	cmp	r3, #80	@ 0x50
 80090b8:	d022      	beq.n	8009100 <HAL_CAN_IRQHandler+0x320>
 80090ba:	2b50      	cmp	r3, #80	@ 0x50
 80090bc:	d82a      	bhi.n	8009114 <HAL_CAN_IRQHandler+0x334>
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d019      	beq.n	80090f6 <HAL_CAN_IRQHandler+0x316>
 80090c2:	2b40      	cmp	r3, #64	@ 0x40
 80090c4:	d826      	bhi.n	8009114 <HAL_CAN_IRQHandler+0x334>
 80090c6:	2b30      	cmp	r3, #48	@ 0x30
 80090c8:	d010      	beq.n	80090ec <HAL_CAN_IRQHandler+0x30c>
 80090ca:	2b30      	cmp	r3, #48	@ 0x30
 80090cc:	d822      	bhi.n	8009114 <HAL_CAN_IRQHandler+0x334>
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d002      	beq.n	80090d8 <HAL_CAN_IRQHandler+0x2f8>
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d005      	beq.n	80090e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80090d6:	e01d      	b.n	8009114 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	f043 0308 	orr.w	r3, r3, #8
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80090e0:	e019      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	f043 0310 	orr.w	r3, r3, #16
 80090e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80090ea:	e014      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	f043 0320 	orr.w	r3, r3, #32
 80090f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80090f4:	e00f      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80090fe:	e00a      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009108:	e005      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009112:	e000      	b.n	8009116 <HAL_CAN_IRQHandler+0x336>
            break;
 8009114:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	699a      	ldr	r2, [r3, #24]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009124:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2204      	movs	r2, #4
 800912c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f872 	bl	800922a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009146:	bf00      	nop
 8009148:	3728      	adds	r7, #40	@ 0x28
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009250:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <__NVIC_SetPriorityGrouping+0x44>)
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800925c:	4013      	ands	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800926c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009272:	4a04      	ldr	r2, [pc, #16]	@ (8009284 <__NVIC_SetPriorityGrouping+0x44>)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	60d3      	str	r3, [r2, #12]
}
 8009278:	bf00      	nop
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800928c:	4b04      	ldr	r3, [pc, #16]	@ (80092a0 <__NVIC_GetPriorityGrouping+0x18>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	f003 0307 	and.w	r3, r3, #7
}
 8009296:	4618      	mov	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	e000ed00 	.word	0xe000ed00

080092a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	db0b      	blt.n	80092ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	f003 021f 	and.w	r2, r3, #31
 80092bc:	4907      	ldr	r1, [pc, #28]	@ (80092dc <__NVIC_EnableIRQ+0x38>)
 80092be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	2001      	movs	r0, #1
 80092c6:	fa00 f202 	lsl.w	r2, r0, r2
 80092ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	e000e100 	.word	0xe000e100

080092e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	db0a      	blt.n	800930a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	490c      	ldr	r1, [pc, #48]	@ (800932c <__NVIC_SetPriority+0x4c>)
 80092fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092fe:	0112      	lsls	r2, r2, #4
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	440b      	add	r3, r1
 8009304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009308:	e00a      	b.n	8009320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4908      	ldr	r1, [pc, #32]	@ (8009330 <__NVIC_SetPriority+0x50>)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	3b04      	subs	r3, #4
 8009318:	0112      	lsls	r2, r2, #4
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	440b      	add	r3, r1
 800931e:	761a      	strb	r2, [r3, #24]
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	e000e100 	.word	0xe000e100
 8009330:	e000ed00 	.word	0xe000ed00

08009334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	@ 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	f1c3 0307 	rsb	r3, r3, #7
 800934e:	2b04      	cmp	r3, #4
 8009350:	bf28      	it	cs
 8009352:	2304      	movcs	r3, #4
 8009354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3304      	adds	r3, #4
 800935a:	2b06      	cmp	r3, #6
 800935c:	d902      	bls.n	8009364 <NVIC_EncodePriority+0x30>
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3b03      	subs	r3, #3
 8009362:	e000      	b.n	8009366 <NVIC_EncodePriority+0x32>
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	43da      	mvns	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	401a      	ands	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800937c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	fa01 f303 	lsl.w	r3, r1, r3
 8009386:	43d9      	mvns	r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800938c:	4313      	orrs	r3, r2
         );
}
 800938e:	4618      	mov	r0, r3
 8009390:	3724      	adds	r7, #36	@ 0x24
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ac:	d301      	bcc.n	80093b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093ae:	2301      	movs	r3, #1
 80093b0:	e00f      	b.n	80093d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093b2:	4a0a      	ldr	r2, [pc, #40]	@ (80093dc <SysTick_Config+0x40>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093ba:	210f      	movs	r1, #15
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c0:	f7ff ff8e 	bl	80092e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <SysTick_Config+0x40>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093ca:	4b04      	ldr	r3, [pc, #16]	@ (80093dc <SysTick_Config+0x40>)
 80093cc:	2207      	movs	r2, #7
 80093ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	e000e010 	.word	0xe000e010

080093e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ff29 	bl	8009240 <__NVIC_SetPriorityGrouping>
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b086      	sub	sp, #24
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	4603      	mov	r3, r0
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009408:	f7ff ff3e 	bl	8009288 <__NVIC_GetPriorityGrouping>
 800940c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	6978      	ldr	r0, [r7, #20]
 8009414:	f7ff ff8e 	bl	8009334 <NVIC_EncodePriority>
 8009418:	4602      	mov	r2, r0
 800941a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff ff5d 	bl	80092e0 <__NVIC_SetPriority>
}
 8009426:	bf00      	nop
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	4603      	mov	r3, r0
 8009436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff ff31 	bl	80092a4 <__NVIC_EnableIRQ>
}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ffa2 	bl	800939c <SysTick_Config>
 8009458:	4603      	mov	r3, r0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009470:	f7ff f874 	bl	800855c <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e099      	b.n	80095b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0201 	bic.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80094a0:	e00f      	b.n	80094c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80094a2:	f7ff f85b 	bl	800855c <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b05      	cmp	r3, #5
 80094ae:	d908      	bls.n	80094c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2203      	movs	r2, #3
 80094ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e078      	b.n	80095b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e8      	bne.n	80094a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4b38      	ldr	r3, [pc, #224]	@ (80095bc <HAL_DMA_Init+0x158>)
 80094dc:	4013      	ands	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80094ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80094fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009518:	2b04      	cmp	r3, #4
 800951a:	d107      	bne.n	800952c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009524:	4313      	orrs	r3, r2
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f023 0307 	bic.w	r3, r3, #7
 8009542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009552:	2b04      	cmp	r3, #4
 8009554:	d117      	bne.n	8009586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fb01 	bl	8009b70 <DMA_CheckFifoParam>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d008      	beq.n	8009586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2240      	movs	r2, #64	@ 0x40
 8009578:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8009582:	2301      	movs	r3, #1
 8009584:	e016      	b.n	80095b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fab8 	bl	8009b04 <DMA_CalcBaseAndBitshift>
 8009594:	4603      	mov	r3, r0
 8009596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800959c:	223f      	movs	r2, #63	@ 0x3f
 800959e:	409a      	lsls	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	f010803f 	.word	0xf010803f

080095c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_DMA_Start_IT+0x26>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e040      	b.n	8009668 <HAL_DMA_Start_IT+0xa8>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d12f      	bne.n	800965a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fa4a 	bl	8009aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009618:	223f      	movs	r2, #63	@ 0x3f
 800961a:	409a      	lsls	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0216 	orr.w	r2, r2, #22
 800962e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0201 	orr.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e005      	b.n	8009666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009662:	2302      	movs	r3, #2
 8009664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800967e:	f7fe ff6d 	bl	800855c <HAL_GetTick>
 8009682:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d008      	beq.n	80096a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2280      	movs	r2, #128	@ 0x80
 8009694:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e052      	b.n	8009748 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0216 	bic.w	r2, r2, #22
 80096b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <HAL_DMA_Abort+0x62>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0208 	bic.w	r2, r2, #8
 80096e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0201 	bic.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80096f2:	e013      	b.n	800971c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80096f4:	f7fe ff32 	bl	800855c <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d90c      	bls.n	800971c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2203      	movs	r2, #3
 800970c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e015      	b.n	8009748 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e4      	bne.n	80096f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800972e:	223f      	movs	r2, #63	@ 0x3f
 8009730:	409a      	lsls	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d004      	beq.n	800976e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2280      	movs	r2, #128	@ 0x80
 8009768:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e00c      	b.n	8009788 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2205      	movs	r2, #5
 8009772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097a0:	4b8e      	ldr	r3, [pc, #568]	@ (80099dc <HAL_DMA_IRQHandler+0x248>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a8e      	ldr	r2, [pc, #568]	@ (80099e0 <HAL_DMA_IRQHandler+0x24c>)
 80097a6:	fba2 2303 	umull	r2, r3, r2, r3
 80097aa:	0a9b      	lsrs	r3, r3, #10
 80097ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097be:	2208      	movs	r2, #8
 80097c0:	409a      	lsls	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d01a      	beq.n	8009800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d013      	beq.n	8009800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0204 	bic.w	r2, r2, #4
 80097e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ec:	2208      	movs	r2, #8
 80097ee:	409a      	lsls	r2, r3
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	f043 0201 	orr.w	r2, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009804:	2201      	movs	r2, #1
 8009806:	409a      	lsls	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4013      	ands	r3, r2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d012      	beq.n	8009836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009822:	2201      	movs	r2, #1
 8009824:	409a      	lsls	r2, r3
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982e:	f043 0202 	orr.w	r2, r3, #2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800983a:	2204      	movs	r2, #4
 800983c:	409a      	lsls	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d012      	beq.n	800986c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009858:	2204      	movs	r2, #4
 800985a:	409a      	lsls	r2, r3
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009864:	f043 0204 	orr.w	r2, r3, #4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009870:	2210      	movs	r2, #16
 8009872:	409a      	lsls	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d043      	beq.n	8009904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d03c      	beq.n	8009904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800988e:	2210      	movs	r2, #16
 8009890:	409a      	lsls	r2, r3
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d018      	beq.n	80098d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d108      	bne.n	80098c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d024      	beq.n	8009904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
 80098c2:	e01f      	b.n	8009904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01b      	beq.n	8009904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
 80098d4:	e016      	b.n	8009904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d107      	bne.n	80098f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0208 	bic.w	r2, r2, #8
 80098f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009908:	2220      	movs	r2, #32
 800990a:	409a      	lsls	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4013      	ands	r3, r2
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 808f 	beq.w	8009a34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8087 	beq.w	8009a34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800992a:	2220      	movs	r2, #32
 800992c:	409a      	lsls	r2, r3
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b05      	cmp	r3, #5
 800993c:	d136      	bne.n	80099ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0216 	bic.w	r2, r2, #22
 800994c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	695a      	ldr	r2, [r3, #20]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800995c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <HAL_DMA_IRQHandler+0x1da>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0208 	bic.w	r2, r2, #8
 800997c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009982:	223f      	movs	r2, #63	@ 0x3f
 8009984:	409a      	lsls	r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d07e      	beq.n	8009aa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
        }
        return;
 80099aa:	e079      	b.n	8009aa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01d      	beq.n	80099f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10d      	bne.n	80099e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d031      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
 80099d8:	e02c      	b.n	8009a34 <HAL_DMA_IRQHandler+0x2a0>
 80099da:	bf00      	nop
 80099dc:	20000038 	.word	0x20000038
 80099e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d023      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	e01e      	b.n	8009a34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10f      	bne.n	8009a24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0210 	bic.w	r2, r2, #16
 8009a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d032      	beq.n	8009aa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d022      	beq.n	8009a8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2205      	movs	r2, #5
 8009a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0201 	bic.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	3301      	adds	r3, #1
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d307      	bcc.n	8009a7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f2      	bne.n	8009a60 <HAL_DMA_IRQHandler+0x2cc>
 8009a7a:	e000      	b.n	8009a7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009a7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
 8009a9e:	e000      	b.n	8009aa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009aa0:	bf00      	nop
    }
  }
}
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b40      	cmp	r3, #64	@ 0x40
 8009ad4:	d108      	bne.n	8009ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009ae6:	e007      	b.n	8009af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	3b10      	subs	r3, #16
 8009b14:	4a14      	ldr	r2, [pc, #80]	@ (8009b68 <DMA_CalcBaseAndBitshift+0x64>)
 8009b16:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1a:	091b      	lsrs	r3, r3, #4
 8009b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009b1e:	4a13      	ldr	r2, [pc, #76]	@ (8009b6c <DMA_CalcBaseAndBitshift+0x68>)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d909      	bls.n	8009b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b44:	e007      	b.n	8009b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	aaaaaaab 	.word	0xaaaaaaab
 8009b6c:	08013b88 	.word	0x08013b88

08009b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d11f      	bne.n	8009bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d856      	bhi.n	8009c3e <DMA_CheckFifoParam+0xce>
 8009b90:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <DMA_CheckFifoParam+0x28>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009ba9 	.word	0x08009ba9
 8009b9c:	08009bbb 	.word	0x08009bbb
 8009ba0:	08009ba9 	.word	0x08009ba9
 8009ba4:	08009c3f 	.word	0x08009c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d046      	beq.n	8009c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009bb8:	e043      	b.n	8009c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009bc2:	d140      	bne.n	8009c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009bc8:	e03d      	b.n	8009c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd2:	d121      	bne.n	8009c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d837      	bhi.n	8009c4a <DMA_CheckFifoParam+0xda>
 8009bda:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <DMA_CheckFifoParam+0x70>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009bf1 	.word	0x08009bf1
 8009be4:	08009bf7 	.word	0x08009bf7
 8009be8:	08009bf1 	.word	0x08009bf1
 8009bec:	08009c09 	.word	0x08009c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf4:	e030      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d025      	beq.n	8009c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c06:	e022      	b.n	8009c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009c10:	d11f      	bne.n	8009c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009c16:	e01c      	b.n	8009c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d903      	bls.n	8009c26 <DMA_CheckFifoParam+0xb6>
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d003      	beq.n	8009c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009c24:	e018      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2a:	e015      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00e      	beq.n	8009c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3c:	e00b      	b.n	8009c56 <DMA_CheckFifoParam+0xe6>
      break;
 8009c3e:	bf00      	nop
 8009c40:	e00a      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;
 8009c42:	bf00      	nop
 8009c44:	e008      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;
 8009c46:	bf00      	nop
 8009c48:	e006      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;
 8009c4a:	bf00      	nop
 8009c4c:	e004      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e002      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <DMA_CheckFifoParam+0xe8>
      break;
 8009c56:	bf00      	nop
    }
  } 
  
  return status; 
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop

08009c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b089      	sub	sp, #36	@ 0x24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	e16b      	b.n	8009f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009c84:	2201      	movs	r2, #1
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4013      	ands	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	f040 815a 	bne.w	8009f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d005      	beq.n	8009cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d130      	bne.n	8009d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	43db      	mvns	r3, r3
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	091b      	lsrs	r3, r3, #4
 8009d06:	f003 0201 	and.w	r2, r3, #1
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d017      	beq.n	8009d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	2203      	movs	r2, #3
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	43db      	mvns	r3, r3
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d123      	bne.n	8009dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	08da      	lsrs	r2, r3, #3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3208      	adds	r2, #8
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	220f      	movs	r2, #15
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	43db      	mvns	r3, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	4013      	ands	r3, r2
 8009d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	691a      	ldr	r2, [r3, #16]
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0307 	and.w	r3, r3, #7
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	08da      	lsrs	r2, r3, #3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3208      	adds	r2, #8
 8009da6:	69b9      	ldr	r1, [r7, #24]
 8009da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	2203      	movs	r2, #3
 8009db8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f003 0203 	and.w	r2, r3, #3
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69ba      	ldr	r2, [r7, #24]
 8009dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80b4 	beq.w	8009f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	4b60      	ldr	r3, [pc, #384]	@ (8009f74 <HAL_GPIO_Init+0x30c>)
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	4a5f      	ldr	r2, [pc, #380]	@ (8009f74 <HAL_GPIO_Init+0x30c>)
 8009df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8009f74 <HAL_GPIO_Init+0x30c>)
 8009e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8009f78 <HAL_GPIO_Init+0x310>)
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	089b      	lsrs	r3, r3, #2
 8009e10:	3302      	adds	r3, #2
 8009e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	220f      	movs	r2, #15
 8009e22:	fa02 f303 	lsl.w	r3, r2, r3
 8009e26:	43db      	mvns	r3, r3
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a52      	ldr	r2, [pc, #328]	@ (8009f7c <HAL_GPIO_Init+0x314>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d02b      	beq.n	8009e8e <HAL_GPIO_Init+0x226>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a51      	ldr	r2, [pc, #324]	@ (8009f80 <HAL_GPIO_Init+0x318>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d025      	beq.n	8009e8a <HAL_GPIO_Init+0x222>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a50      	ldr	r2, [pc, #320]	@ (8009f84 <HAL_GPIO_Init+0x31c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d01f      	beq.n	8009e86 <HAL_GPIO_Init+0x21e>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a4f      	ldr	r2, [pc, #316]	@ (8009f88 <HAL_GPIO_Init+0x320>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d019      	beq.n	8009e82 <HAL_GPIO_Init+0x21a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a4e      	ldr	r2, [pc, #312]	@ (8009f8c <HAL_GPIO_Init+0x324>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d013      	beq.n	8009e7e <HAL_GPIO_Init+0x216>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a4d      	ldr	r2, [pc, #308]	@ (8009f90 <HAL_GPIO_Init+0x328>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00d      	beq.n	8009e7a <HAL_GPIO_Init+0x212>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a4c      	ldr	r2, [pc, #304]	@ (8009f94 <HAL_GPIO_Init+0x32c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d007      	beq.n	8009e76 <HAL_GPIO_Init+0x20e>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a4b      	ldr	r2, [pc, #300]	@ (8009f98 <HAL_GPIO_Init+0x330>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d101      	bne.n	8009e72 <HAL_GPIO_Init+0x20a>
 8009e6e:	2307      	movs	r3, #7
 8009e70:	e00e      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e72:	2308      	movs	r3, #8
 8009e74:	e00c      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e76:	2306      	movs	r3, #6
 8009e78:	e00a      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e7a:	2305      	movs	r3, #5
 8009e7c:	e008      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e7e:	2304      	movs	r3, #4
 8009e80:	e006      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e82:	2303      	movs	r3, #3
 8009e84:	e004      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e002      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <HAL_GPIO_Init+0x228>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	f002 0203 	and.w	r2, r2, #3
 8009e96:	0092      	lsls	r2, r2, #2
 8009e98:	4093      	lsls	r3, r2
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ea0:	4935      	ldr	r1, [pc, #212]	@ (8009f78 <HAL_GPIO_Init+0x310>)
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	089b      	lsrs	r3, r3, #2
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009eae:	4b3b      	ldr	r3, [pc, #236]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	43db      	mvns	r3, r3
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009ed2:	4a32      	ldr	r2, [pc, #200]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009ed8:	4b30      	ldr	r3, [pc, #192]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	43db      	mvns	r3, r3
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009efc:	4a27      	ldr	r2, [pc, #156]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009f02:	4b26      	ldr	r3, [pc, #152]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	43db      	mvns	r3, r3
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f26:	4a1d      	ldr	r2, [pc, #116]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	43db      	mvns	r3, r3
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	4013      	ands	r3, r2
 8009f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f50:	4a12      	ldr	r2, [pc, #72]	@ (8009f9c <HAL_GPIO_Init+0x334>)
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	2b0f      	cmp	r3, #15
 8009f60:	f67f ae90 	bls.w	8009c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	3724      	adds	r7, #36	@ 0x24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40023800 	.word	0x40023800
 8009f78:	40013800 	.word	0x40013800
 8009f7c:	40020000 	.word	0x40020000
 8009f80:	40020400 	.word	0x40020400
 8009f84:	40020800 	.word	0x40020800
 8009f88:	40020c00 	.word	0x40020c00
 8009f8c:	40021000 	.word	0x40021000
 8009f90:	40021400 	.word	0x40021400
 8009f94:	40021800 	.word	0x40021800
 8009f98:	40021c00 	.word	0x40021c00
 8009f9c:	40013c00 	.word	0x40013c00

08009fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	807b      	strh	r3, [r7, #2]
 8009fac:	4613      	mov	r3, r2
 8009fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009fb0:	787b      	ldrb	r3, [r7, #1]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009fb6:	887a      	ldrh	r2, [r7, #2]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009fbc:	e003      	b.n	8009fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009fbe:	887b      	ldrh	r3, [r7, #2]
 8009fc0:	041a      	lsls	r2, r3, #16
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	619a      	str	r2, [r3, #24]
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009fde:	4b08      	ldr	r3, [pc, #32]	@ (800a000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fe0:	695a      	ldr	r2, [r3, #20]
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d006      	beq.n	8009ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009fea:	4a05      	ldr	r2, [pc, #20]	@ (800a000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fec:	88fb      	ldrh	r3, [r7, #6]
 8009fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009ff0:	88fb      	ldrh	r3, [r7, #6]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fa febe 	bl	8004d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40013c00 	.word	0x40013c00

0800a004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e12b      	b.n	800a26e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fd fcd8 	bl	80079e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2224      	movs	r2, #36	@ 0x24
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0201 	bic.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a068:	f000 fd4c 	bl	800ab04 <HAL_RCC_GetPCLK1Freq>
 800a06c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	4a81      	ldr	r2, [pc, #516]	@ (800a278 <HAL_I2C_Init+0x274>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d807      	bhi.n	800a088 <HAL_I2C_Init+0x84>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4a80      	ldr	r2, [pc, #512]	@ (800a27c <HAL_I2C_Init+0x278>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	bf94      	ite	ls
 800a080:	2301      	movls	r3, #1
 800a082:	2300      	movhi	r3, #0
 800a084:	b2db      	uxtb	r3, r3
 800a086:	e006      	b.n	800a096 <HAL_I2C_Init+0x92>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a7d      	ldr	r2, [pc, #500]	@ (800a280 <HAL_I2C_Init+0x27c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	bf94      	ite	ls
 800a090:	2301      	movls	r3, #1
 800a092:	2300      	movhi	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e0e7      	b.n	800a26e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4a78      	ldr	r2, [pc, #480]	@ (800a284 <HAL_I2C_Init+0x280>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	0c9b      	lsrs	r3, r3, #18
 800a0a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
 800a0c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4a6a      	ldr	r2, [pc, #424]	@ (800a278 <HAL_I2C_Init+0x274>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d802      	bhi.n	800a0d8 <HAL_I2C_Init+0xd4>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	e009      	b.n	800a0ec <HAL_I2C_Init+0xe8>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a0de:	fb02 f303 	mul.w	r3, r2, r3
 800a0e2:	4a69      	ldr	r2, [pc, #420]	@ (800a288 <HAL_I2C_Init+0x284>)
 800a0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e8:	099b      	lsrs	r3, r3, #6
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a0fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	495c      	ldr	r1, [pc, #368]	@ (800a278 <HAL_I2C_Init+0x274>)
 800a108:	428b      	cmp	r3, r1
 800a10a:	d819      	bhi.n	800a140 <HAL_I2C_Init+0x13c>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1e59      	subs	r1, r3, #1
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	fbb1 f3f3 	udiv	r3, r1, r3
 800a11a:	1c59      	adds	r1, r3, #1
 800a11c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a120:	400b      	ands	r3, r1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <HAL_I2C_Init+0x138>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1e59      	subs	r1, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	fbb1 f3f3 	udiv	r3, r1, r3
 800a134:	3301      	adds	r3, #1
 800a136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a13a:	e051      	b.n	800a1e0 <HAL_I2C_Init+0x1dc>
 800a13c:	2304      	movs	r3, #4
 800a13e:	e04f      	b.n	800a1e0 <HAL_I2C_Init+0x1dc>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d111      	bne.n	800a16c <HAL_I2C_Init+0x168>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	1e58      	subs	r0, r3, #1
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6859      	ldr	r1, [r3, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	440b      	add	r3, r1
 800a156:	fbb0 f3f3 	udiv	r3, r0, r3
 800a15a:	3301      	adds	r3, #1
 800a15c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a160:	2b00      	cmp	r3, #0
 800a162:	bf0c      	ite	eq
 800a164:	2301      	moveq	r3, #1
 800a166:	2300      	movne	r3, #0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	e012      	b.n	800a192 <HAL_I2C_Init+0x18e>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1e58      	subs	r0, r3, #1
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6859      	ldr	r1, [r3, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	0099      	lsls	r1, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a182:	3301      	adds	r3, #1
 800a184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bf0c      	ite	eq
 800a18c:	2301      	moveq	r3, #1
 800a18e:	2300      	movne	r3, #0
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <HAL_I2C_Init+0x196>
 800a196:	2301      	movs	r3, #1
 800a198:	e022      	b.n	800a1e0 <HAL_I2C_Init+0x1dc>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10e      	bne.n	800a1c0 <HAL_I2C_Init+0x1bc>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1e58      	subs	r0, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6859      	ldr	r1, [r3, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	440b      	add	r3, r1
 800a1b0:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1be:	e00f      	b.n	800a1e0 <HAL_I2C_Init+0x1dc>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	1e58      	subs	r0, r3, #1
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6859      	ldr	r1, [r3, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	0099      	lsls	r1, r3, #2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	6809      	ldr	r1, [r1, #0]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69da      	ldr	r2, [r3, #28]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a20e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6911      	ldr	r1, [r2, #16]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68d2      	ldr	r2, [r2, #12]
 800a21a:	4311      	orrs	r1, r2
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6812      	ldr	r2, [r2, #0]
 800a220:	430b      	orrs	r3, r1
 800a222:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695a      	ldr	r2, [r3, #20]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2220      	movs	r2, #32
 800a25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	000186a0 	.word	0x000186a0
 800a27c:	001e847f 	.word	0x001e847f
 800a280:	003d08ff 	.word	0x003d08ff
 800a284:	431bde83 	.word	0x431bde83
 800a288:	10624dd3 	.word	0x10624dd3

0800a28c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e267      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d075      	beq.n	800a396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a2aa:	4b88      	ldr	r3, [pc, #544]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f003 030c 	and.w	r3, r3, #12
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d00c      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2b6:	4b85      	ldr	r3, [pc, #532]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	d112      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2c2:	4b82      	ldr	r3, [pc, #520]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2ce:	d10b      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2d0:	4b7e      	ldr	r3, [pc, #504]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d05b      	beq.n	800a394 <HAL_RCC_OscConfig+0x108>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d157      	bne.n	800a394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e242      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f0:	d106      	bne.n	800a300 <HAL_RCC_OscConfig+0x74>
 800a2f2:	4b76      	ldr	r3, [pc, #472]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a75      	ldr	r2, [pc, #468]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a2f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	e01d      	b.n	800a33c <HAL_RCC_OscConfig+0xb0>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a308:	d10c      	bne.n	800a324 <HAL_RCC_OscConfig+0x98>
 800a30a:	4b70      	ldr	r3, [pc, #448]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a6f      	ldr	r2, [pc, #444]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	4b6d      	ldr	r3, [pc, #436]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a6c      	ldr	r2, [pc, #432]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a31c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	e00b      	b.n	800a33c <HAL_RCC_OscConfig+0xb0>
 800a324:	4b69      	ldr	r3, [pc, #420]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a68      	ldr	r2, [pc, #416]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a32a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	4b66      	ldr	r3, [pc, #408]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a65      	ldr	r2, [pc, #404]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a33a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d013      	beq.n	800a36c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a344:	f7fe f90a 	bl	800855c <HAL_GetTick>
 800a348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a34a:	e008      	b.n	800a35e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a34c:	f7fe f906 	bl	800855c <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b64      	cmp	r3, #100	@ 0x64
 800a358:	d901      	bls.n	800a35e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e207      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a35e:	4b5b      	ldr	r3, [pc, #364]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0f0      	beq.n	800a34c <HAL_RCC_OscConfig+0xc0>
 800a36a:	e014      	b.n	800a396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a36c:	f7fe f8f6 	bl	800855c <HAL_GetTick>
 800a370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a372:	e008      	b.n	800a386 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a374:	f7fe f8f2 	bl	800855c <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b64      	cmp	r3, #100	@ 0x64
 800a380:	d901      	bls.n	800a386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e1f3      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a386:	4b51      	ldr	r3, [pc, #324]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1f0      	bne.n	800a374 <HAL_RCC_OscConfig+0xe8>
 800a392:	e000      	b.n	800a396 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d063      	beq.n	800a46a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a3a2:	4b4a      	ldr	r3, [pc, #296]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f003 030c 	and.w	r3, r3, #12
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3ae:	4b47      	ldr	r3, [pc, #284]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d11c      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3ba:	4b44      	ldr	r3, [pc, #272]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d116      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3c6:	4b41      	ldr	r3, [pc, #260]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <HAL_RCC_OscConfig+0x152>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d001      	beq.n	800a3de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e1c7      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3de:	4b3b      	ldr	r3, [pc, #236]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	4937      	ldr	r1, [pc, #220]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3f2:	e03a      	b.n	800a46a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d020      	beq.n	800a43e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3fc:	4b34      	ldr	r3, [pc, #208]	@ (800a4d0 <HAL_RCC_OscConfig+0x244>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a402:	f7fe f8ab 	bl	800855c <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a408:	e008      	b.n	800a41c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a40a:	f7fe f8a7 	bl	800855c <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e1a8      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a41c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0302 	and.w	r3, r3, #2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0f0      	beq.n	800a40a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a428:	4b28      	ldr	r3, [pc, #160]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	4925      	ldr	r1, [pc, #148]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	600b      	str	r3, [r1, #0]
 800a43c:	e015      	b.n	800a46a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a43e:	4b24      	ldr	r3, [pc, #144]	@ (800a4d0 <HAL_RCC_OscConfig+0x244>)
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a444:	f7fe f88a 	bl	800855c <HAL_GetTick>
 800a448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a44a:	e008      	b.n	800a45e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a44c:	f7fe f886 	bl	800855c <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d901      	bls.n	800a45e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e187      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a45e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1f0      	bne.n	800a44c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0308 	and.w	r3, r3, #8
 800a472:	2b00      	cmp	r3, #0
 800a474:	d036      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d016      	beq.n	800a4ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a47e:	4b15      	ldr	r3, [pc, #84]	@ (800a4d4 <HAL_RCC_OscConfig+0x248>)
 800a480:	2201      	movs	r2, #1
 800a482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a484:	f7fe f86a 	bl	800855c <HAL_GetTick>
 800a488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a48c:	f7fe f866 	bl	800855c <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e167      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a49e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <HAL_RCC_OscConfig+0x240>)
 800a4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f0      	beq.n	800a48c <HAL_RCC_OscConfig+0x200>
 800a4aa:	e01b      	b.n	800a4e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4ac:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <HAL_RCC_OscConfig+0x248>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4b2:	f7fe f853 	bl	800855c <HAL_GetTick>
 800a4b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4b8:	e00e      	b.n	800a4d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4ba:	f7fe f84f 	bl	800855c <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d907      	bls.n	800a4d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e150      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	42470000 	.word	0x42470000
 800a4d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4d8:	4b88      	ldr	r3, [pc, #544]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a4da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1ea      	bne.n	800a4ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8097 	beq.w	800a620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4f6:	4b81      	ldr	r3, [pc, #516]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10f      	bne.n	800a522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	4b7d      	ldr	r3, [pc, #500]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50a:	4a7c      	ldr	r2, [pc, #496]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a50c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a510:	6413      	str	r3, [r2, #64]	@ 0x40
 800a512:	4b7a      	ldr	r3, [pc, #488]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a51a:	60bb      	str	r3, [r7, #8]
 800a51c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a522:	4b77      	ldr	r3, [pc, #476]	@ (800a700 <HAL_RCC_OscConfig+0x474>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d118      	bne.n	800a560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a52e:	4b74      	ldr	r3, [pc, #464]	@ (800a700 <HAL_RCC_OscConfig+0x474>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a73      	ldr	r2, [pc, #460]	@ (800a700 <HAL_RCC_OscConfig+0x474>)
 800a534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a53a:	f7fe f80f 	bl	800855c <HAL_GetTick>
 800a53e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a540:	e008      	b.n	800a554 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a542:	f7fe f80b 	bl	800855c <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d901      	bls.n	800a554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e10c      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a554:	4b6a      	ldr	r3, [pc, #424]	@ (800a700 <HAL_RCC_OscConfig+0x474>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0f0      	beq.n	800a542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d106      	bne.n	800a576 <HAL_RCC_OscConfig+0x2ea>
 800a568:	4b64      	ldr	r3, [pc, #400]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a56a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a56c:	4a63      	ldr	r2, [pc, #396]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	6713      	str	r3, [r2, #112]	@ 0x70
 800a574:	e01c      	b.n	800a5b0 <HAL_RCC_OscConfig+0x324>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d10c      	bne.n	800a598 <HAL_RCC_OscConfig+0x30c>
 800a57e:	4b5f      	ldr	r3, [pc, #380]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a582:	4a5e      	ldr	r2, [pc, #376]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a584:	f043 0304 	orr.w	r3, r3, #4
 800a588:	6713      	str	r3, [r2, #112]	@ 0x70
 800a58a:	4b5c      	ldr	r3, [pc, #368]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	4a5b      	ldr	r2, [pc, #364]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	6713      	str	r3, [r2, #112]	@ 0x70
 800a596:	e00b      	b.n	800a5b0 <HAL_RCC_OscConfig+0x324>
 800a598:	4b58      	ldr	r3, [pc, #352]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a59a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a59c:	4a57      	ldr	r2, [pc, #348]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a59e:	f023 0301 	bic.w	r3, r3, #1
 800a5a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5a4:	4b55      	ldr	r3, [pc, #340]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a5a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5a8:	4a54      	ldr	r2, [pc, #336]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a5aa:	f023 0304 	bic.w	r3, r3, #4
 800a5ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d015      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5b8:	f7fd ffd0 	bl	800855c <HAL_GetTick>
 800a5bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5be:	e00a      	b.n	800a5d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c0:	f7fd ffcc 	bl	800855c <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e0cb      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5d6:	4b49      	ldr	r3, [pc, #292]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0ee      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x334>
 800a5e2:	e014      	b.n	800a60e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5e4:	f7fd ffba 	bl	800855c <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5ea:	e00a      	b.n	800a602 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ec:	f7fd ffb6 	bl	800855c <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d901      	bls.n	800a602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e0b5      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a602:	4b3e      	ldr	r3, [pc, #248]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1ee      	bne.n	800a5ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d105      	bne.n	800a620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a614:	4b39      	ldr	r3, [pc, #228]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	4a38      	ldr	r2, [pc, #224]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a61a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80a1 	beq.w	800a76c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a62a:	4b34      	ldr	r3, [pc, #208]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f003 030c 	and.w	r3, r3, #12
 800a632:	2b08      	cmp	r3, #8
 800a634:	d05c      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d141      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a63e:	4b31      	ldr	r3, [pc, #196]	@ (800a704 <HAL_RCC_OscConfig+0x478>)
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a644:	f7fd ff8a 	bl	800855c <HAL_GetTick>
 800a648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a64a:	e008      	b.n	800a65e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a64c:	f7fd ff86 	bl	800855c <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d901      	bls.n	800a65e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e087      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a65e:	4b27      	ldr	r3, [pc, #156]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f0      	bne.n	800a64c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69da      	ldr	r2, [r3, #28]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a678:	019b      	lsls	r3, r3, #6
 800a67a:	431a      	orrs	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	3b01      	subs	r3, #1
 800a684:	041b      	lsls	r3, r3, #16
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68c:	061b      	lsls	r3, r3, #24
 800a68e:	491b      	ldr	r1, [pc, #108]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a690:	4313      	orrs	r3, r2
 800a692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a694:	4b1b      	ldr	r3, [pc, #108]	@ (800a704 <HAL_RCC_OscConfig+0x478>)
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a69a:	f7fd ff5f 	bl	800855c <HAL_GetTick>
 800a69e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6a2:	f7fd ff5b 	bl	800855c <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e05c      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6b4:	4b11      	ldr	r3, [pc, #68]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0f0      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x416>
 800a6c0:	e054      	b.n	800a76c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6c2:	4b10      	ldr	r3, [pc, #64]	@ (800a704 <HAL_RCC_OscConfig+0x478>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6c8:	f7fd ff48 	bl	800855c <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d0:	f7fd ff44 	bl	800855c <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e045      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6e2:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <HAL_RCC_OscConfig+0x470>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x444>
 800a6ee:	e03d      	b.n	800a76c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d107      	bne.n	800a708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e038      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
 800a6fc:	40023800 	.word	0x40023800
 800a700:	40007000 	.word	0x40007000
 800a704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a708:	4b1b      	ldr	r3, [pc, #108]	@ (800a778 <HAL_RCC_OscConfig+0x4ec>)
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d028      	beq.n	800a768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a720:	429a      	cmp	r2, r3
 800a722:	d121      	bne.n	800a768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a72e:	429a      	cmp	r2, r3
 800a730:	d11a      	bne.n	800a768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a738:	4013      	ands	r3, r2
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a73e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a740:	4293      	cmp	r3, r2
 800a742:	d111      	bne.n	800a768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	3b01      	subs	r3, #1
 800a752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a754:	429a      	cmp	r2, r3
 800a756:	d107      	bne.n	800a768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a764:	429a      	cmp	r2, r3
 800a766:	d001      	beq.n	800a76c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e000      	b.n	800a76e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40023800 	.word	0x40023800

0800a77c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e0cc      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a790:	4b68      	ldr	r3, [pc, #416]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d90c      	bls.n	800a7b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a79e:	4b65      	ldr	r3, [pc, #404]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7a6:	4b63      	ldr	r3, [pc, #396]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d001      	beq.n	800a7b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e0b8      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d020      	beq.n	800a806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7d0:	4b59      	ldr	r3, [pc, #356]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	4a58      	ldr	r2, [pc, #352]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a7d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a7da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0308 	and.w	r3, r3, #8
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a7e8:	4b53      	ldr	r3, [pc, #332]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	4a52      	ldr	r2, [pc, #328]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a7f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7f4:	4b50      	ldr	r3, [pc, #320]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	494d      	ldr	r1, [pc, #308]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a802:	4313      	orrs	r3, r2
 800a804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d044      	beq.n	800a89c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d107      	bne.n	800a82a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a81a:	4b47      	ldr	r3, [pc, #284]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d119      	bne.n	800a85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e07f      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d003      	beq.n	800a83a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a836:	2b03      	cmp	r3, #3
 800a838:	d107      	bne.n	800a84a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a83a:	4b3f      	ldr	r3, [pc, #252]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e06f      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a84a:	4b3b      	ldr	r3, [pc, #236]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e067      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a85a:	4b37      	ldr	r3, [pc, #220]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f023 0203 	bic.w	r2, r3, #3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	4934      	ldr	r1, [pc, #208]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a86c:	f7fd fe76 	bl	800855c <HAL_GetTick>
 800a870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a872:	e00a      	b.n	800a88a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a874:	f7fd fe72 	bl	800855c <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a882:	4293      	cmp	r3, r2
 800a884:	d901      	bls.n	800a88a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e04f      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a88a:	4b2b      	ldr	r3, [pc, #172]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 020c 	and.w	r2, r3, #12
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	429a      	cmp	r2, r3
 800a89a:	d1eb      	bne.n	800a874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a89c:	4b25      	ldr	r3, [pc, #148]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0307 	and.w	r3, r3, #7
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d20c      	bcs.n	800a8c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8aa:	4b22      	ldr	r3, [pc, #136]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	b2d2      	uxtb	r2, r2
 800a8b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8b2:	4b20      	ldr	r3, [pc, #128]	@ (800a934 <HAL_RCC_ClockConfig+0x1b8>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d001      	beq.n	800a8c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e032      	b.n	800a92a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8d0:	4b19      	ldr	r3, [pc, #100]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	4916      	ldr	r1, [pc, #88]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a8ee:	4b12      	ldr	r3, [pc, #72]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	490e      	ldr	r1, [pc, #56]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a902:	f000 f82d 	bl	800a960 <HAL_RCC_GetSysClockFreq>
 800a906:	4602      	mov	r2, r0
 800a908:	4b0b      	ldr	r3, [pc, #44]	@ (800a938 <HAL_RCC_ClockConfig+0x1bc>)
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	091b      	lsrs	r3, r3, #4
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	490a      	ldr	r1, [pc, #40]	@ (800a93c <HAL_RCC_ClockConfig+0x1c0>)
 800a914:	5ccb      	ldrb	r3, [r1, r3]
 800a916:	fa22 f303 	lsr.w	r3, r2, r3
 800a91a:	4a09      	ldr	r2, [pc, #36]	@ (800a940 <HAL_RCC_ClockConfig+0x1c4>)
 800a91c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a91e:	4b09      	ldr	r3, [pc, #36]	@ (800a944 <HAL_RCC_ClockConfig+0x1c8>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd fdd6 	bl	80084d4 <HAL_InitTick>

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	40023c00 	.word	0x40023c00
 800a938:	40023800 	.word	0x40023800
 800a93c:	08013b70 	.word	0x08013b70
 800a940:	20000038 	.word	0x20000038
 800a944:	2000003c 	.word	0x2000003c

0800a948 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a94c:	4b03      	ldr	r3, [pc, #12]	@ (800a95c <HAL_RCC_EnableCSS+0x14>)
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
}
 800a952:	bf00      	nop
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	4247004c 	.word	0x4247004c

0800a960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a964:	b090      	sub	sp, #64	@ 0x40
 800a966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a978:	4b59      	ldr	r3, [pc, #356]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f003 030c 	and.w	r3, r3, #12
 800a980:	2b08      	cmp	r3, #8
 800a982:	d00d      	beq.n	800a9a0 <HAL_RCC_GetSysClockFreq+0x40>
 800a984:	2b08      	cmp	r3, #8
 800a986:	f200 80a1 	bhi.w	800aacc <HAL_RCC_GetSysClockFreq+0x16c>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <HAL_RCC_GetSysClockFreq+0x34>
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d003      	beq.n	800a99a <HAL_RCC_GetSysClockFreq+0x3a>
 800a992:	e09b      	b.n	800aacc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a994:	4b53      	ldr	r3, [pc, #332]	@ (800aae4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a996:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a998:	e09b      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a99a:	4b53      	ldr	r3, [pc, #332]	@ (800aae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a99c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a99e:	e098      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a9a0:	4b4f      	ldr	r3, [pc, #316]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a9aa:	4b4d      	ldr	r3, [pc, #308]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d028      	beq.n	800aa08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9b6:	4b4a      	ldr	r3, [pc, #296]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	099b      	lsrs	r3, r3, #6
 800a9bc:	2200      	movs	r2, #0
 800a9be:	623b      	str	r3, [r7, #32]
 800a9c0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	4b47      	ldr	r3, [pc, #284]	@ (800aae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a9cc:	fb03 f201 	mul.w	r2, r3, r1
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	fb00 f303 	mul.w	r3, r0, r3
 800a9d6:	4413      	add	r3, r2
 800a9d8:	4a43      	ldr	r2, [pc, #268]	@ (800aae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a9da:	fba0 1202 	umull	r1, r2, r0, r2
 800a9de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9e0:	460a      	mov	r2, r1
 800a9e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a9e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9e6:	4413      	add	r3, r2
 800a9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
 800a9f0:	61fa      	str	r2, [r7, #28]
 800a9f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a9fa:	f7f6 f925 	bl	8000c48 <__aeabi_uldivmod>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4613      	mov	r3, r2
 800aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa06:	e053      	b.n	800aab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa08:	4b35      	ldr	r3, [pc, #212]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	099b      	lsrs	r3, r3, #6
 800aa0e:	2200      	movs	r2, #0
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	617a      	str	r2, [r7, #20]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aa1a:	f04f 0b00 	mov.w	fp, #0
 800aa1e:	4652      	mov	r2, sl
 800aa20:	465b      	mov	r3, fp
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f04f 0100 	mov.w	r1, #0
 800aa2a:	0159      	lsls	r1, r3, #5
 800aa2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa30:	0150      	lsls	r0, r2, #5
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	ebb2 080a 	subs.w	r8, r2, sl
 800aa3a:	eb63 090b 	sbc.w	r9, r3, fp
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	f04f 0300 	mov.w	r3, #0
 800aa46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800aa4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800aa4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800aa52:	ebb2 0408 	subs.w	r4, r2, r8
 800aa56:	eb63 0509 	sbc.w	r5, r3, r9
 800aa5a:	f04f 0200 	mov.w	r2, #0
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	00eb      	lsls	r3, r5, #3
 800aa64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa68:	00e2      	lsls	r2, r4, #3
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	461d      	mov	r5, r3
 800aa6e:	eb14 030a 	adds.w	r3, r4, sl
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	eb45 030b 	adc.w	r3, r5, fp
 800aa78:	607b      	str	r3, [r7, #4]
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	f04f 0300 	mov.w	r3, #0
 800aa82:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aa86:	4629      	mov	r1, r5
 800aa88:	028b      	lsls	r3, r1, #10
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa90:	4621      	mov	r1, r4
 800aa92:	028a      	lsls	r2, r1, #10
 800aa94:	4610      	mov	r0, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	60bb      	str	r3, [r7, #8]
 800aa9e:	60fa      	str	r2, [r7, #12]
 800aaa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaa4:	f7f6 f8d0 	bl	8000c48 <__aeabi_uldivmod>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4613      	mov	r3, r2
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aab0:	4b0b      	ldr	r3, [pc, #44]	@ (800aae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	0c1b      	lsrs	r3, r3, #16
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	3301      	adds	r3, #1
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800aac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aaca:	e002      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aacc:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <HAL_RCC_GetSysClockFreq+0x184>)
 800aace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3740      	adds	r7, #64	@ 0x40
 800aad8:	46bd      	mov	sp, r7
 800aada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aade:	bf00      	nop
 800aae0:	40023800 	.word	0x40023800
 800aae4:	00f42400 	.word	0x00f42400
 800aae8:	00b71b00 	.word	0x00b71b00

0800aaec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aaec:	b480      	push	{r7}
 800aaee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aaf0:	4b03      	ldr	r3, [pc, #12]	@ (800ab00 <HAL_RCC_GetHCLKFreq+0x14>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20000038 	.word	0x20000038

0800ab04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab08:	f7ff fff0 	bl	800aaec <HAL_RCC_GetHCLKFreq>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	4b05      	ldr	r3, [pc, #20]	@ (800ab24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	0a9b      	lsrs	r3, r3, #10
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	4903      	ldr	r1, [pc, #12]	@ (800ab28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab1a:	5ccb      	ldrb	r3, [r1, r3]
 800ab1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	40023800 	.word	0x40023800
 800ab28:	08013b80 	.word	0x08013b80

0800ab2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab30:	f7ff ffdc 	bl	800aaec <HAL_RCC_GetHCLKFreq>
 800ab34:	4602      	mov	r2, r0
 800ab36:	4b05      	ldr	r3, [pc, #20]	@ (800ab4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	0b5b      	lsrs	r3, r3, #13
 800ab3c:	f003 0307 	and.w	r3, r3, #7
 800ab40:	4903      	ldr	r1, [pc, #12]	@ (800ab50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab42:	5ccb      	ldrb	r3, [r1, r3]
 800ab44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40023800 	.word	0x40023800
 800ab50:	08013b80 	.word	0x08013b80

0800ab54 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ab58:	4b06      	ldr	r3, [pc, #24]	@ (800ab74 <HAL_RCC_NMI_IRQHandler+0x20>)
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab60:	2b80      	cmp	r3, #128	@ 0x80
 800ab62:	d104      	bne.n	800ab6e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ab64:	f000 f80a 	bl	800ab7c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ab68:	4b03      	ldr	r3, [pc, #12]	@ (800ab78 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ab6a:	2280      	movs	r2, #128	@ 0x80
 800ab6c:	701a      	strb	r2, [r3, #0]
  }
}
 800ab6e:	bf00      	nop
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40023800 	.word	0x40023800
 800ab78:	4002380e 	.word	0x4002380e

0800ab7c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e07b      	b.n	800ac94 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d108      	bne.n	800abb6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abac:	d009      	beq.n	800abc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	61da      	str	r2, [r3, #28]
 800abb4:	e005      	b.n	800abc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d106      	bne.n	800abe2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7fc ff69 	bl	8007ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2202      	movs	r2, #2
 800abe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0302 	and.w	r3, r3, #2
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac46:	ea42 0103 	orr.w	r1, r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	f003 0104 	and.w	r1, r3, #4
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac68:	f003 0210 	and.w	r2, r3, #16
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69da      	ldr	r2, [r3, #28]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	@ 0x28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800acaa:	2301      	movs	r3, #1
 800acac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acae:	f7fd fc55 	bl	800855c <HAL_GetTick>
 800acb2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800acc2:	887b      	ldrh	r3, [r7, #2]
 800acc4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800acc6:	7ffb      	ldrb	r3, [r7, #31]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d00c      	beq.n	800ace6 <HAL_SPI_TransmitReceive+0x4a>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800acd2:	d106      	bne.n	800ace2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <HAL_SPI_TransmitReceive+0x46>
 800acdc:	7ffb      	ldrb	r3, [r7, #31]
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d001      	beq.n	800ace6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ace2:	2302      	movs	r3, #2
 800ace4:	e17f      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_SPI_TransmitReceive+0x5c>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <HAL_SPI_TransmitReceive+0x5c>
 800acf2:	887b      	ldrh	r3, [r7, #2]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e174      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d101      	bne.n	800ad0a <HAL_SPI_TransmitReceive+0x6e>
 800ad06:	2302      	movs	r3, #2
 800ad08:	e16d      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d003      	beq.n	800ad26 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2205      	movs	r2, #5
 800ad22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	887a      	ldrh	r2, [r7, #2]
 800ad36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	887a      	ldrh	r2, [r7, #2]
 800ad3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	887a      	ldrh	r2, [r7, #2]
 800ad48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	887a      	ldrh	r2, [r7, #2]
 800ad4e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d007      	beq.n	800ad7a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad82:	d17e      	bne.n	800ae82 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <HAL_SPI_TransmitReceive+0xf6>
 800ad8c:	8afb      	ldrh	r3, [r7, #22]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d16c      	bne.n	800ae6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad96:	881a      	ldrh	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada2:	1c9a      	adds	r2, r3, #2
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adb6:	e059      	b.n	800ae6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d11b      	bne.n	800adfe <HAL_SPI_TransmitReceive+0x162>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d016      	beq.n	800adfe <HAL_SPI_TransmitReceive+0x162>
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	2b01      	cmp	r3, #1
 800add4:	d113      	bne.n	800adfe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adda:	881a      	ldrh	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade6:	1c9a      	adds	r2, r3, #2
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	3b01      	subs	r3, #1
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d119      	bne.n	800ae40 <HAL_SPI_TransmitReceive+0x1a4>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d014      	beq.n	800ae40 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae20:	b292      	uxth	r2, r2
 800ae22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae28:	1c9a      	adds	r2, r3, #2
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ae40:	f7fd fb8c 	bl	800855c <HAL_GetTick>
 800ae44:	4602      	mov	r2, r0
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d80d      	bhi.n	800ae6c <HAL_SPI_TransmitReceive+0x1d0>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae56:	d009      	beq.n	800ae6c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e0bc      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1a0      	bne.n	800adb8 <HAL_SPI_TransmitReceive+0x11c>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d19b      	bne.n	800adb8 <HAL_SPI_TransmitReceive+0x11c>
 800ae80:	e082      	b.n	800af88 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <HAL_SPI_TransmitReceive+0x1f4>
 800ae8a:	8afb      	ldrh	r3, [r7, #22]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d171      	bne.n	800af74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	330c      	adds	r3, #12
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aeb6:	e05d      	b.n	800af74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d11c      	bne.n	800af00 <HAL_SPI_TransmitReceive+0x264>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d017      	beq.n	800af00 <HAL_SPI_TransmitReceive+0x264>
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d114      	bne.n	800af00 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	330c      	adds	r3, #12
 800aee0:	7812      	ldrb	r2, [r2, #0]
 800aee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	3b01      	subs	r3, #1
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aefc:	2300      	movs	r3, #0
 800aefe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d119      	bne.n	800af42 <HAL_SPI_TransmitReceive+0x2a6>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af12:	b29b      	uxth	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d014      	beq.n	800af42 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af34:	b29b      	uxth	r3, r3
 800af36:	3b01      	subs	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af3e:	2301      	movs	r3, #1
 800af40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800af42:	f7fd fb0b 	bl	800855c <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af4e:	429a      	cmp	r2, r3
 800af50:	d803      	bhi.n	800af5a <HAL_SPI_TransmitReceive+0x2be>
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af58:	d102      	bne.n	800af60 <HAL_SPI_TransmitReceive+0x2c4>
 800af5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d109      	bne.n	800af74 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e038      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d19c      	bne.n	800aeb8 <HAL_SPI_TransmitReceive+0x21c>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d197      	bne.n	800aeb8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af88:	6a3a      	ldr	r2, [r7, #32]
 800af8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 f8b7 	bl	800b100 <SPI_EndRxTxTransaction>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e01d      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afb2:	2300      	movs	r3, #0
 800afb4:	613b      	str	r3, [r7, #16]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	613b      	str	r3, [r7, #16]
 800afc6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e000      	b.n	800afe6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800afe4:	2300      	movs	r3, #0
  }
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3728      	adds	r7, #40	@ 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	4613      	mov	r3, r2
 800affe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b000:	f7fd faac 	bl	800855c <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	1a9b      	subs	r3, r3, r2
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4413      	add	r3, r2
 800b00e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b010:	f7fd faa4 	bl	800855c <HAL_GetTick>
 800b014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b016:	4b39      	ldr	r3, [pc, #228]	@ (800b0fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	015b      	lsls	r3, r3, #5
 800b01c:	0d1b      	lsrs	r3, r3, #20
 800b01e:	69fa      	ldr	r2, [r7, #28]
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b026:	e055      	b.n	800b0d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b02e:	d051      	beq.n	800b0d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b030:	f7fd fa94 	bl	800855c <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d902      	bls.n	800b046 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d13d      	bne.n	800b0c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b05e:	d111      	bne.n	800b084 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b068:	d004      	beq.n	800b074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b072:	d107      	bne.n	800b084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b08c:	d10f      	bne.n	800b0ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e018      	b.n	800b0f4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	e002      	b.n	800b0d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	689a      	ldr	r2, [r3, #8]
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d19a      	bne.n	800b028 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3720      	adds	r7, #32
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20000038 	.word	0x20000038

0800b100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af02      	add	r7, sp, #8
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2201      	movs	r2, #1
 800b114:	2102      	movs	r1, #2
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f7ff ff6a 	bl	800aff0 <SPI_WaitFlagStateUntilTimeout>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d007      	beq.n	800b132 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b126:	f043 0220 	orr.w	r2, r3, #32
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e032      	b.n	800b198 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b132:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a0 <SPI_EndRxTxTransaction+0xa0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a4 <SPI_EndRxTxTransaction+0xa4>)
 800b138:	fba2 2303 	umull	r2, r3, r2, r3
 800b13c:	0d5b      	lsrs	r3, r3, #21
 800b13e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b142:	fb02 f303 	mul.w	r3, r2, r3
 800b146:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b150:	d112      	bne.n	800b178 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2200      	movs	r2, #0
 800b15a:	2180      	movs	r1, #128	@ 0x80
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7ff ff47 	bl	800aff0 <SPI_WaitFlagStateUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d016      	beq.n	800b196 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b16c:	f043 0220 	orr.w	r2, r3, #32
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e00f      	b.n	800b198 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	3b01      	subs	r3, #1
 800b182:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b18e:	2b80      	cmp	r3, #128	@ 0x80
 800b190:	d0f2      	beq.n	800b178 <SPI_EndRxTxTransaction+0x78>
 800b192:	e000      	b.n	800b196 <SPI_EndRxTxTransaction+0x96>
        break;
 800b194:	bf00      	nop
  }

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000038 	.word	0x20000038
 800b1a4:	165e9f81 	.word	0x165e9f81

0800b1a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e041      	b.n	800b23e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7fc fd26 	bl	8007c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	f000 fba8 	bl	800b93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d001      	beq.n	800b260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e046      	b.n	800b2ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2202      	movs	r2, #2
 800b264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a23      	ldr	r2, [pc, #140]	@ (800b2fc <HAL_TIM_Base_Start+0xb4>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d022      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b27a:	d01d      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1f      	ldr	r2, [pc, #124]	@ (800b300 <HAL_TIM_Base_Start+0xb8>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d018      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a1e      	ldr	r2, [pc, #120]	@ (800b304 <HAL_TIM_Base_Start+0xbc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d013      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a1c      	ldr	r2, [pc, #112]	@ (800b308 <HAL_TIM_Base_Start+0xc0>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d00e      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a1b      	ldr	r2, [pc, #108]	@ (800b30c <HAL_TIM_Base_Start+0xc4>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d009      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a19      	ldr	r2, [pc, #100]	@ (800b310 <HAL_TIM_Base_Start+0xc8>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d004      	beq.n	800b2b8 <HAL_TIM_Base_Start+0x70>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a18      	ldr	r2, [pc, #96]	@ (800b314 <HAL_TIM_Base_Start+0xcc>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d111      	bne.n	800b2dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b06      	cmp	r3, #6
 800b2c8:	d010      	beq.n	800b2ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0201 	orr.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2da:	e007      	b.n	800b2ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0201 	orr.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	40010000 	.word	0x40010000
 800b300:	40000400 	.word	0x40000400
 800b304:	40000800 	.word	0x40000800
 800b308:	40000c00 	.word	0x40000c00
 800b30c:	40010400 	.word	0x40010400
 800b310:	40014000 	.word	0x40014000
 800b314:	40001800 	.word	0x40001800

0800b318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e041      	b.n	800b3ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d106      	bne.n	800b344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7fc fc20 	bl	8007b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f000 faf0 	bl	800b93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <HAL_TIM_PWM_Start+0x24>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	bf14      	ite	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e022      	b.n	800b422 <HAL_TIM_PWM_Start+0x6a>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d109      	bne.n	800b3f6 <HAL_TIM_PWM_Start+0x3e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	bf14      	ite	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	2300      	moveq	r3, #0
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	e015      	b.n	800b422 <HAL_TIM_PWM_Start+0x6a>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d109      	bne.n	800b410 <HAL_TIM_PWM_Start+0x58>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e008      	b.n	800b422 <HAL_TIM_PWM_Start+0x6a>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e07c      	b.n	800b524 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <HAL_TIM_PWM_Start+0x82>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b438:	e013      	b.n	800b462 <HAL_TIM_PWM_Start+0xaa>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d104      	bne.n	800b44a <HAL_TIM_PWM_Start+0x92>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b448:	e00b      	b.n	800b462 <HAL_TIM_PWM_Start+0xaa>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d104      	bne.n	800b45a <HAL_TIM_PWM_Start+0xa2>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b458:	e003      	b.n	800b462 <HAL_TIM_PWM_Start+0xaa>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2202      	movs	r2, #2
 800b45e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2201      	movs	r2, #1
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fd56 	bl	800bf1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a2d      	ldr	r2, [pc, #180]	@ (800b52c <HAL_TIM_PWM_Start+0x174>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d004      	beq.n	800b484 <HAL_TIM_PWM_Start+0xcc>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a2c      	ldr	r2, [pc, #176]	@ (800b530 <HAL_TIM_PWM_Start+0x178>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d101      	bne.n	800b488 <HAL_TIM_PWM_Start+0xd0>
 800b484:	2301      	movs	r3, #1
 800b486:	e000      	b.n	800b48a <HAL_TIM_PWM_Start+0xd2>
 800b488:	2300      	movs	r3, #0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b49c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a22      	ldr	r2, [pc, #136]	@ (800b52c <HAL_TIM_PWM_Start+0x174>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d022      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b0:	d01d      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b534 <HAL_TIM_PWM_Start+0x17c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d018      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b538 <HAL_TIM_PWM_Start+0x180>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d013      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b53c <HAL_TIM_PWM_Start+0x184>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d00e      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a16      	ldr	r2, [pc, #88]	@ (800b530 <HAL_TIM_PWM_Start+0x178>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d009      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a18      	ldr	r2, [pc, #96]	@ (800b540 <HAL_TIM_PWM_Start+0x188>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d004      	beq.n	800b4ee <HAL_TIM_PWM_Start+0x136>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <HAL_TIM_PWM_Start+0x18c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d111      	bne.n	800b512 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b06      	cmp	r3, #6
 800b4fe:	d010      	beq.n	800b522 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f042 0201 	orr.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b510:	e007      	b.n	800b522 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f042 0201 	orr.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	40010000 	.word	0x40010000
 800b530:	40010400 	.word	0x40010400
 800b534:	40000400 	.word	0x40000400
 800b538:	40000800 	.word	0x40000800
 800b53c:	40000c00 	.word	0x40000c00
 800b540:	40014000 	.word	0x40014000
 800b544:	40001800 	.word	0x40001800

0800b548 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2200      	movs	r2, #0
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fcde 	bl	800bf1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a2e      	ldr	r2, [pc, #184]	@ (800b620 <HAL_TIM_PWM_Stop+0xd8>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d004      	beq.n	800b574 <HAL_TIM_PWM_Stop+0x2c>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a2d      	ldr	r2, [pc, #180]	@ (800b624 <HAL_TIM_PWM_Stop+0xdc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d101      	bne.n	800b578 <HAL_TIM_PWM_Stop+0x30>
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <HAL_TIM_PWM_Stop+0x32>
 800b578:	2300      	movs	r3, #0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d017      	beq.n	800b5ae <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6a1a      	ldr	r2, [r3, #32]
 800b584:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b588:	4013      	ands	r3, r2
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10f      	bne.n	800b5ae <HAL_TIM_PWM_Stop+0x66>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6a1a      	ldr	r2, [r3, #32]
 800b594:	f240 4344 	movw	r3, #1092	@ 0x444
 800b598:	4013      	ands	r3, r2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d107      	bne.n	800b5ae <HAL_TIM_PWM_Stop+0x66>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b5ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6a1a      	ldr	r2, [r3, #32]
 800b5b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10f      	bne.n	800b5de <HAL_TIM_PWM_Stop+0x96>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6a1a      	ldr	r2, [r3, #32]
 800b5c4:	f240 4344 	movw	r3, #1092	@ 0x444
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d107      	bne.n	800b5de <HAL_TIM_PWM_Stop+0x96>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f022 0201 	bic.w	r2, r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <HAL_TIM_PWM_Stop+0xa6>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5ec:	e013      	b.n	800b616 <HAL_TIM_PWM_Stop+0xce>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d104      	bne.n	800b5fe <HAL_TIM_PWM_Stop+0xb6>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5fc:	e00b      	b.n	800b616 <HAL_TIM_PWM_Stop+0xce>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b08      	cmp	r3, #8
 800b602:	d104      	bne.n	800b60e <HAL_TIM_PWM_Stop+0xc6>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b60c:	e003      	b.n	800b616 <HAL_TIM_PWM_Stop+0xce>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	40010000 	.word	0x40010000
 800b624:	40010400 	.word	0x40010400

0800b628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d101      	bne.n	800b646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b642:	2302      	movs	r3, #2
 800b644:	e0ae      	b.n	800b7a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b0c      	cmp	r3, #12
 800b652:	f200 809f 	bhi.w	800b794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b656:	a201      	add	r2, pc, #4	@ (adr r2, 800b65c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b691 	.word	0x0800b691
 800b660:	0800b795 	.word	0x0800b795
 800b664:	0800b795 	.word	0x0800b795
 800b668:	0800b795 	.word	0x0800b795
 800b66c:	0800b6d1 	.word	0x0800b6d1
 800b670:	0800b795 	.word	0x0800b795
 800b674:	0800b795 	.word	0x0800b795
 800b678:	0800b795 	.word	0x0800b795
 800b67c:	0800b713 	.word	0x0800b713
 800b680:	0800b795 	.word	0x0800b795
 800b684:	0800b795 	.word	0x0800b795
 800b688:	0800b795 	.word	0x0800b795
 800b68c:	0800b753 	.word	0x0800b753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	4618      	mov	r0, r3
 800b698:	f000 f9f6 	bl	800ba88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	699a      	ldr	r2, [r3, #24]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f042 0208 	orr.w	r2, r2, #8
 800b6aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	699a      	ldr	r2, [r3, #24]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0204 	bic.w	r2, r2, #4
 800b6ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6999      	ldr	r1, [r3, #24]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	691a      	ldr	r2, [r3, #16]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	619a      	str	r2, [r3, #24]
      break;
 800b6ce:	e064      	b.n	800b79a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 fa46 	bl	800bb68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	699a      	ldr	r2, [r3, #24]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	699a      	ldr	r2, [r3, #24]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6999      	ldr	r1, [r3, #24]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	021a      	lsls	r2, r3, #8
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	430a      	orrs	r2, r1
 800b70e:	619a      	str	r2, [r3, #24]
      break;
 800b710:	e043      	b.n	800b79a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68b9      	ldr	r1, [r7, #8]
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fa9b 	bl	800bc54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0208 	orr.w	r2, r2, #8
 800b72c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	69da      	ldr	r2, [r3, #28]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f022 0204 	bic.w	r2, r2, #4
 800b73c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69d9      	ldr	r1, [r3, #28]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	61da      	str	r2, [r3, #28]
      break;
 800b750:	e023      	b.n	800b79a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 faef 	bl	800bd3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	69da      	ldr	r2, [r3, #28]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b76c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69da      	ldr	r2, [r3, #28]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b77c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69d9      	ldr	r1, [r3, #28]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	021a      	lsls	r2, r3, #8
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	61da      	str	r2, [r3, #28]
      break;
 800b792:	e002      	b.n	800b79a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	75fb      	strb	r3, [r7, #23]
      break;
 800b798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e0b4      	b.n	800b932 <HAL_TIM_ConfigClockSource+0x186>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b7e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b800:	d03e      	beq.n	800b880 <HAL_TIM_ConfigClockSource+0xd4>
 800b802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b806:	f200 8087 	bhi.w	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b80a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b80e:	f000 8086 	beq.w	800b91e <HAL_TIM_ConfigClockSource+0x172>
 800b812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b816:	d87f      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b818:	2b70      	cmp	r3, #112	@ 0x70
 800b81a:	d01a      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0xa6>
 800b81c:	2b70      	cmp	r3, #112	@ 0x70
 800b81e:	d87b      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b820:	2b60      	cmp	r3, #96	@ 0x60
 800b822:	d050      	beq.n	800b8c6 <HAL_TIM_ConfigClockSource+0x11a>
 800b824:	2b60      	cmp	r3, #96	@ 0x60
 800b826:	d877      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b828:	2b50      	cmp	r3, #80	@ 0x50
 800b82a:	d03c      	beq.n	800b8a6 <HAL_TIM_ConfigClockSource+0xfa>
 800b82c:	2b50      	cmp	r3, #80	@ 0x50
 800b82e:	d873      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b830:	2b40      	cmp	r3, #64	@ 0x40
 800b832:	d058      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x13a>
 800b834:	2b40      	cmp	r3, #64	@ 0x40
 800b836:	d86f      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b838:	2b30      	cmp	r3, #48	@ 0x30
 800b83a:	d064      	beq.n	800b906 <HAL_TIM_ConfigClockSource+0x15a>
 800b83c:	2b30      	cmp	r3, #48	@ 0x30
 800b83e:	d86b      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b840:	2b20      	cmp	r3, #32
 800b842:	d060      	beq.n	800b906 <HAL_TIM_ConfigClockSource+0x15a>
 800b844:	2b20      	cmp	r3, #32
 800b846:	d867      	bhi.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d05c      	beq.n	800b906 <HAL_TIM_ConfigClockSource+0x15a>
 800b84c:	2b10      	cmp	r3, #16
 800b84e:	d05a      	beq.n	800b906 <HAL_TIM_ConfigClockSource+0x15a>
 800b850:	e062      	b.n	800b918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b862:	f000 fb3b 	bl	800bedc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	609a      	str	r2, [r3, #8]
      break;
 800b87e:	e04f      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b890:	f000 fb24 	bl	800bedc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8a2:	609a      	str	r2, [r3, #8]
      break;
 800b8a4:	e03c      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f000 fa98 	bl	800bde8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2150      	movs	r1, #80	@ 0x50
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 faf1 	bl	800bea6 <TIM_ITRx_SetConfig>
      break;
 800b8c4:	e02c      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f000 fab7 	bl	800be46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2160      	movs	r1, #96	@ 0x60
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fae1 	bl	800bea6 <TIM_ITRx_SetConfig>
      break;
 800b8e4:	e01c      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f000 fa78 	bl	800bde8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2140      	movs	r1, #64	@ 0x40
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 fad1 	bl	800bea6 <TIM_ITRx_SetConfig>
      break;
 800b904:	e00c      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f000 fac8 	bl	800bea6 <TIM_ITRx_SetConfig>
      break;
 800b916:	e003      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	73fb      	strb	r3, [r7, #15]
      break;
 800b91c:	e000      	b.n	800b920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b91e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a43      	ldr	r2, [pc, #268]	@ (800ba5c <TIM_Base_SetConfig+0x120>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d013      	beq.n	800b97c <TIM_Base_SetConfig+0x40>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b95a:	d00f      	beq.n	800b97c <TIM_Base_SetConfig+0x40>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a40      	ldr	r2, [pc, #256]	@ (800ba60 <TIM_Base_SetConfig+0x124>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00b      	beq.n	800b97c <TIM_Base_SetConfig+0x40>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a3f      	ldr	r2, [pc, #252]	@ (800ba64 <TIM_Base_SetConfig+0x128>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d007      	beq.n	800b97c <TIM_Base_SetConfig+0x40>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a3e      	ldr	r2, [pc, #248]	@ (800ba68 <TIM_Base_SetConfig+0x12c>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d003      	beq.n	800b97c <TIM_Base_SetConfig+0x40>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a3d      	ldr	r2, [pc, #244]	@ (800ba6c <TIM_Base_SetConfig+0x130>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d108      	bne.n	800b98e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a32      	ldr	r2, [pc, #200]	@ (800ba5c <TIM_Base_SetConfig+0x120>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d02b      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b99c:	d027      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a2f      	ldr	r2, [pc, #188]	@ (800ba60 <TIM_Base_SetConfig+0x124>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d023      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a2e      	ldr	r2, [pc, #184]	@ (800ba64 <TIM_Base_SetConfig+0x128>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d01f      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2d      	ldr	r2, [pc, #180]	@ (800ba68 <TIM_Base_SetConfig+0x12c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d01b      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a2c      	ldr	r2, [pc, #176]	@ (800ba6c <TIM_Base_SetConfig+0x130>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d017      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a2b      	ldr	r2, [pc, #172]	@ (800ba70 <TIM_Base_SetConfig+0x134>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d013      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a2a      	ldr	r2, [pc, #168]	@ (800ba74 <TIM_Base_SetConfig+0x138>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d00f      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a29      	ldr	r2, [pc, #164]	@ (800ba78 <TIM_Base_SetConfig+0x13c>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00b      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a28      	ldr	r2, [pc, #160]	@ (800ba7c <TIM_Base_SetConfig+0x140>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d007      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a27      	ldr	r2, [pc, #156]	@ (800ba80 <TIM_Base_SetConfig+0x144>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d003      	beq.n	800b9ee <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a26      	ldr	r2, [pc, #152]	@ (800ba84 <TIM_Base_SetConfig+0x148>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d108      	bne.n	800ba00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	689a      	ldr	r2, [r3, #8]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a0e      	ldr	r2, [pc, #56]	@ (800ba5c <TIM_Base_SetConfig+0x120>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d003      	beq.n	800ba2e <TIM_Base_SetConfig+0xf2>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a10      	ldr	r2, [pc, #64]	@ (800ba6c <TIM_Base_SetConfig+0x130>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d103      	bne.n	800ba36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	691a      	ldr	r2, [r3, #16]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f043 0204 	orr.w	r2, r3, #4
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	601a      	str	r2, [r3, #0]
}
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	40010000 	.word	0x40010000
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00
 800ba6c:	40010400 	.word	0x40010400
 800ba70:	40014000 	.word	0x40014000
 800ba74:	40014400 	.word	0x40014400
 800ba78:	40014800 	.word	0x40014800
 800ba7c:	40001800 	.word	0x40001800
 800ba80:	40001c00 	.word	0x40001c00
 800ba84:	40002000 	.word	0x40002000

0800ba88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	f023 0201 	bic.w	r2, r3, #1
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f023 0303 	bic.w	r3, r3, #3
 800babe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f023 0302 	bic.w	r3, r3, #2
 800bad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4313      	orrs	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a20      	ldr	r2, [pc, #128]	@ (800bb60 <TIM_OC1_SetConfig+0xd8>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d003      	beq.n	800baec <TIM_OC1_SetConfig+0x64>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a1f      	ldr	r2, [pc, #124]	@ (800bb64 <TIM_OC1_SetConfig+0xdc>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d10c      	bne.n	800bb06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f023 0308 	bic.w	r3, r3, #8
 800baf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f023 0304 	bic.w	r3, r3, #4
 800bb04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a15      	ldr	r2, [pc, #84]	@ (800bb60 <TIM_OC1_SetConfig+0xd8>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d003      	beq.n	800bb16 <TIM_OC1_SetConfig+0x8e>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a14      	ldr	r2, [pc, #80]	@ (800bb64 <TIM_OC1_SetConfig+0xdc>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d111      	bne.n	800bb3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	621a      	str	r2, [r3, #32]
}
 800bb54:	bf00      	nop
 800bb56:	371c      	adds	r7, #28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	40010000 	.word	0x40010000
 800bb64:	40010400 	.word	0x40010400

0800bb68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
 800bb7c:	f023 0210 	bic.w	r2, r3, #16
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f023 0320 	bic.w	r3, r3, #32
 800bbb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a22      	ldr	r2, [pc, #136]	@ (800bc4c <TIM_OC2_SetConfig+0xe4>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d003      	beq.n	800bbd0 <TIM_OC2_SetConfig+0x68>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a21      	ldr	r2, [pc, #132]	@ (800bc50 <TIM_OC2_SetConfig+0xe8>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10d      	bne.n	800bbec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a17      	ldr	r2, [pc, #92]	@ (800bc4c <TIM_OC2_SetConfig+0xe4>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d003      	beq.n	800bbfc <TIM_OC2_SetConfig+0x94>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a16      	ldr	r2, [pc, #88]	@ (800bc50 <TIM_OC2_SetConfig+0xe8>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d113      	bne.n	800bc24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	621a      	str	r2, [r3, #32]
}
 800bc3e:	bf00      	nop
 800bc40:	371c      	adds	r7, #28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	40010000 	.word	0x40010000
 800bc50:	40010400 	.word	0x40010400

0800bc54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a1b      	ldr	r3, [r3, #32]
 800bc68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f023 0303 	bic.w	r3, r3, #3
 800bc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	021b      	lsls	r3, r3, #8
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a21      	ldr	r2, [pc, #132]	@ (800bd34 <TIM_OC3_SetConfig+0xe0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d003      	beq.n	800bcba <TIM_OC3_SetConfig+0x66>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a20      	ldr	r2, [pc, #128]	@ (800bd38 <TIM_OC3_SetConfig+0xe4>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d10d      	bne.n	800bcd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	021b      	lsls	r3, r3, #8
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a16      	ldr	r2, [pc, #88]	@ (800bd34 <TIM_OC3_SetConfig+0xe0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d003      	beq.n	800bce6 <TIM_OC3_SetConfig+0x92>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a15      	ldr	r2, [pc, #84]	@ (800bd38 <TIM_OC3_SetConfig+0xe4>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d113      	bne.n	800bd0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bcf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	621a      	str	r2, [r3, #32]
}
 800bd28:	bf00      	nop
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40010400 	.word	0x40010400

0800bd3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	031b      	lsls	r3, r3, #12
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a12      	ldr	r2, [pc, #72]	@ (800bde0 <TIM_OC4_SetConfig+0xa4>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d003      	beq.n	800bda4 <TIM_OC4_SetConfig+0x68>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a11      	ldr	r2, [pc, #68]	@ (800bde4 <TIM_OC4_SetConfig+0xa8>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d109      	bne.n	800bdb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bdaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	019b      	lsls	r3, r3, #6
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	621a      	str	r2, [r3, #32]
}
 800bdd2:	bf00      	nop
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	40010000 	.word	0x40010000
 800bde4:	40010400 	.word	0x40010400

0800bde8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	f023 0201 	bic.w	r2, r3, #1
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f023 030a 	bic.w	r3, r3, #10
 800be24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	621a      	str	r2, [r3, #32]
}
 800be3a:	bf00      	nop
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be46:	b480      	push	{r7}
 800be48:	b087      	sub	sp, #28
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a1b      	ldr	r3, [r3, #32]
 800be5c:	f023 0210 	bic.w	r2, r3, #16
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	031b      	lsls	r3, r3, #12
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	621a      	str	r2, [r3, #32]
}
 800be9a:	bf00      	nop
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b085      	sub	sp, #20
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	f043 0307 	orr.w	r3, r3, #7
 800bec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	609a      	str	r2, [r3, #8]
}
 800bed0:	bf00      	nop
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	021a      	lsls	r2, r3, #8
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	431a      	orrs	r2, r3
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	609a      	str	r2, [r3, #8]
}
 800bf10:	bf00      	nop
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f003 031f 	and.w	r3, r3, #31
 800bf2e:	2201      	movs	r2, #1
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1a      	ldr	r2, [r3, #32]
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	401a      	ands	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a1a      	ldr	r2, [r3, #32]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 031f 	and.w	r3, r3, #31
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	fa01 f303 	lsl.w	r3, r1, r3
 800bf54:	431a      	orrs	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e05a      	b.n	800c036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a21      	ldr	r2, [pc, #132]	@ (800c044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d022      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfcc:	d01d      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a1d      	ldr	r2, [pc, #116]	@ (800c048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d018      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a1b      	ldr	r2, [pc, #108]	@ (800c04c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d013      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a1a      	ldr	r2, [pc, #104]	@ (800c050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d00e      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a18      	ldr	r2, [pc, #96]	@ (800c054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d009      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a17      	ldr	r2, [pc, #92]	@ (800c058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d004      	beq.n	800c00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a15      	ldr	r2, [pc, #84]	@ (800c05c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d10c      	bne.n	800c024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4313      	orrs	r3, r2
 800c01a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40010000 	.word	0x40010000
 800c048:	40000400 	.word	0x40000400
 800c04c:	40000800 	.word	0x40000800
 800c050:	40000c00 	.word	0x40000c00
 800c054:	40010400 	.word	0x40010400
 800c058:	40014000 	.word	0x40014000
 800c05c:	40001800 	.word	0x40001800

0800c060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c074:	2b01      	cmp	r3, #1
 800c076:	d101      	bne.n	800c07c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c078:	2302      	movs	r3, #2
 800c07a:	e03d      	b.n	800c0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e042      	b.n	800c19c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d106      	bne.n	800c130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7fb feac 	bl	8007e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2224      	movs	r2, #36	@ 0x24
 800c134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fee1 	bl	800cf10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	691a      	ldr	r2, [r3, #16]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c15c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	695a      	ldr	r2, [r3, #20]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c16c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c17c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2220      	movs	r2, #32
 800c188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2220      	movs	r2, #32
 800c190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b20      	cmp	r3, #32
 800c1bc:	d112      	bne.n	800c1e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <HAL_UART_Receive_DMA+0x26>
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e00b      	b.n	800c1e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c1d4:	88fb      	ldrh	r3, [r7, #6]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 fc30 	bl	800ca40 <UART_Start_Receive_DMA>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	e000      	b.n	800c1e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c1e4:	2302      	movs	r3, #2
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b08c      	sub	sp, #48	@ 0x30
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b20      	cmp	r3, #32
 800c206:	d146      	bne.n	800c296 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c20e:	88fb      	ldrh	r3, [r7, #6]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e03f      	b.n	800c298 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2201      	movs	r2, #1
 800c21c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c224:	88fb      	ldrh	r3, [r7, #6]
 800c226:	461a      	mov	r2, r3
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 fc08 	bl	800ca40 <UART_Start_Receive_DMA>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d125      	bne.n	800c28a <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c23e:	2300      	movs	r3, #0
 800c240:	613b      	str	r3, [r7, #16]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	613b      	str	r3, [r7, #16]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	330c      	adds	r3, #12
 800c25a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	e853 3f00 	ldrex	r3, [r3]
 800c262:	617b      	str	r3, [r7, #20]
   return(result);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f043 0310 	orr.w	r3, r3, #16
 800c26a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	330c      	adds	r3, #12
 800c272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c274:	627a      	str	r2, [r7, #36]	@ 0x24
 800c276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c278:	6a39      	ldr	r1, [r7, #32]
 800c27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c27c:	e841 2300 	strex	r3, r2, [r1]
 800c280:	61fb      	str	r3, [r7, #28]
   return(result);
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1e5      	bne.n	800c254 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800c288:	e002      	b.n	800c290 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800c290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c294:	e000      	b.n	800c298 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800c296:	2302      	movs	r3, #2
  }
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3730      	adds	r7, #48	@ 0x30
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b0ba      	sub	sp, #232	@ 0xe8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2d6:	f003 030f 	and.w	r3, r3, #15
 800c2da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c2de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10f      	bne.n	800c306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2ea:	f003 0320 	and.w	r3, r3, #32
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d009      	beq.n	800c306 <HAL_UART_IRQHandler+0x66>
 800c2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fd48 	bl	800cd94 <UART_Receive_IT>
      return;
 800c304:	e273      	b.n	800c7ee <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 80de 	beq.w	800c4cc <HAL_UART_IRQHandler+0x22c>
 800c310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d106      	bne.n	800c32a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c320:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 80d1 	beq.w	800c4cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00b      	beq.n	800c34e <HAL_UART_IRQHandler+0xae>
 800c336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c33a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d005      	beq.n	800c34e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c346:	f043 0201 	orr.w	r2, r3, #1
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <HAL_UART_IRQHandler+0xd2>
 800c35a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d005      	beq.n	800c372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c36a:	f043 0202 	orr.w	r2, r3, #2
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c376:	f003 0302 	and.w	r3, r3, #2
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <HAL_UART_IRQHandler+0xf6>
 800c37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c38e:	f043 0204 	orr.w	r2, r3, #4
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c39a:	f003 0308 	and.w	r3, r3, #8
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d011      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x126>
 800c3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3a6:	f003 0320 	and.w	r3, r3, #32
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d105      	bne.n	800c3ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d005      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3be:	f043 0208 	orr.w	r2, r3, #8
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 820a 	beq.w	800c7e4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d4:	f003 0320 	and.w	r3, r3, #32
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d008      	beq.n	800c3ee <HAL_UART_IRQHandler+0x14e>
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e0:	f003 0320 	and.w	r3, r3, #32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fcd3 	bl	800cd94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f8:	2b40      	cmp	r3, #64	@ 0x40
 800c3fa:	bf0c      	ite	eq
 800c3fc:	2301      	moveq	r3, #1
 800c3fe:	2300      	movne	r3, #0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c40a:	f003 0308 	and.w	r3, r3, #8
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d103      	bne.n	800c41a <HAL_UART_IRQHandler+0x17a>
 800c412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c416:	2b00      	cmp	r3, #0
 800c418:	d04f      	beq.n	800c4ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fbde 	bl	800cbdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42a:	2b40      	cmp	r3, #64	@ 0x40
 800c42c:	d141      	bne.n	800c4b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3314      	adds	r3, #20
 800c434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c44c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3314      	adds	r3, #20
 800c456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c45a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c45e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d9      	bne.n	800c42e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d013      	beq.n	800c4aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c486:	4a8a      	ldr	r2, [pc, #552]	@ (800c6b0 <HAL_UART_IRQHandler+0x410>)
 800c488:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fd f95e 	bl	8009750 <HAL_DMA_Abort_IT>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d016      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c49e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a8:	e00e      	b.n	800c4c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f9c0 	bl	800c830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b0:	e00a      	b.n	800c4c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f9bc 	bl	800c830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b8:	e006      	b.n	800c4c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9b8 	bl	800c830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c4c6:	e18d      	b.n	800c7e4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c8:	bf00      	nop
    return;
 800c4ca:	e18b      	b.n	800c7e4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	f040 8167 	bne.w	800c7a4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4da:	f003 0310 	and.w	r3, r3, #16
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f000 8160 	beq.w	800c7a4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4e8:	f003 0310 	and.w	r3, r3, #16
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 8159 	beq.w	800c7a4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60bb      	str	r3, [r7, #8]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60bb      	str	r3, [r7, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	60bb      	str	r3, [r7, #8]
 800c506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c512:	2b40      	cmp	r3, #64	@ 0x40
 800c514:	f040 80ce 	bne.w	800c6b4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 80a9 	beq.w	800c680 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c536:	429a      	cmp	r2, r3
 800c538:	f080 80a2 	bcs.w	800c680 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c542:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c54e:	f000 8088 	beq.w	800c662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	330c      	adds	r3, #12
 800c558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c560:	e853 3f00 	ldrex	r3, [r3]
 800c564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c56c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c570:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	330c      	adds	r3, #12
 800c57a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c57e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c58a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1d9      	bne.n	800c552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3314      	adds	r3, #20
 800c5a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3314      	adds	r3, #20
 800c5be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e1      	bne.n	800c59e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3314      	adds	r3, #20
 800c5e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5e4:	e853 3f00 	ldrex	r3, [r3]
 800c5e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3314      	adds	r3, #20
 800c5fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c5fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c600:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c602:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c604:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c606:	e841 2300 	strex	r3, r2, [r1]
 800c60a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c60c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1e3      	bne.n	800c5da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	330c      	adds	r3, #12
 800c626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c632:	f023 0310 	bic.w	r3, r3, #16
 800c636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	330c      	adds	r3, #12
 800c640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c644:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c646:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c648:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c64a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c64c:	e841 2300 	strex	r3, r2, [r1]
 800c650:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1e3      	bne.n	800c620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fd f807 	bl	8009670 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2202      	movs	r2, #2
 800c666:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c670:	b29b      	uxth	r3, r3
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	b29b      	uxth	r3, r3
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7f7 f939 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c67e:	e0b3      	b.n	800c7e8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c684:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c688:	429a      	cmp	r2, r3
 800c68a:	f040 80ad 	bne.w	800c7e8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c698:	f040 80a6 	bne.w	800c7e8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7f7 f921 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
      return;
 800c6ae:	e09b      	b.n	800c7e8 <HAL_UART_IRQHandler+0x548>
 800c6b0:	0800cca3 	.word	0x0800cca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 808e 	beq.w	800c7ec <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c6d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 8089 	beq.w	800c7ec <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	330c      	adds	r3, #12
 800c6e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e4:	e853 3f00 	ldrex	r3, [r3]
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	330c      	adds	r3, #12
 800c6fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c6fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800c700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e3      	bne.n	800c6da <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3314      	adds	r3, #20
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	623b      	str	r3, [r7, #32]
   return(result);
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	f023 0301 	bic.w	r3, r3, #1
 800c728:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3314      	adds	r3, #20
 800c732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c736:	633a      	str	r2, [r7, #48]	@ 0x30
 800c738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c73c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c73e:	e841 2300 	strex	r3, r2, [r1]
 800c742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e3      	bne.n	800c712 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	330c      	adds	r3, #12
 800c75e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	60fb      	str	r3, [r7, #12]
   return(result);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 0310 	bic.w	r3, r3, #16
 800c76e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	330c      	adds	r3, #12
 800c778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c77c:	61fa      	str	r2, [r7, #28]
 800c77e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c780:	69b9      	ldr	r1, [r7, #24]
 800c782:	69fa      	ldr	r2, [r7, #28]
 800c784:	e841 2300 	strex	r3, r2, [r1]
 800c788:	617b      	str	r3, [r7, #20]
   return(result);
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e3      	bne.n	800c758 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2202      	movs	r2, #2
 800c794:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7f7 f8a7 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7a2:	e023      	b.n	800c7ec <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d009      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x524>
 800c7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fa81 	bl	800ccc4 <UART_Transmit_IT>
    return;
 800c7c2:	e014      	b.n	800c7ee <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <HAL_UART_IRQHandler+0x54e>
 800c7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d008      	beq.n	800c7ee <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fac1 	bl	800cd64 <UART_EndTransmit_IT>
    return;
 800c7e2:	e004      	b.n	800c7ee <HAL_UART_IRQHandler+0x54e>
    return;
 800c7e4:	bf00      	nop
 800c7e6:	e002      	b.n	800c7ee <HAL_UART_IRQHandler+0x54e>
      return;
 800c7e8:	bf00      	nop
 800c7ea:	e000      	b.n	800c7ee <HAL_UART_IRQHandler+0x54e>
      return;
 800c7ec:	bf00      	nop
  }
}
 800c7ee:	37e8      	adds	r7, #232	@ 0xe8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b09c      	sub	sp, #112	@ 0x70
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c850:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d172      	bne.n	800c946 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c862:	2200      	movs	r2, #0
 800c864:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	330c      	adds	r3, #12
 800c86c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c870:	e853 3f00 	ldrex	r3, [r3]
 800c874:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c87c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c87e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	330c      	adds	r3, #12
 800c884:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c886:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c888:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c88c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c88e:	e841 2300 	strex	r3, r2, [r1]
 800c892:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1e5      	bne.n	800c866 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
 800c8b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3314      	adds	r3, #20
 800c8b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c8ba:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e5      	bne.n	800c89a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3314      	adds	r3, #20
 800c8d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d8:	e853 3f00 	ldrex	r3, [r3]
 800c8dc:	623b      	str	r3, [r7, #32]
   return(result);
 800c8de:	6a3b      	ldr	r3, [r7, #32]
 800c8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3314      	adds	r3, #20
 800c8ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f6:	e841 2300 	strex	r3, r2, [r1]
 800c8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1e5      	bne.n	800c8ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c904:	2220      	movs	r2, #32
 800c906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c90a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d119      	bne.n	800c946 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	330c      	adds	r3, #12
 800c918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	60fb      	str	r3, [r7, #12]
   return(result);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f023 0310 	bic.w	r3, r3, #16
 800c928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c92a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	330c      	adds	r3, #12
 800c930:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c932:	61fa      	str	r2, [r7, #28]
 800c934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c936:	69b9      	ldr	r1, [r7, #24]
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	617b      	str	r3, [r7, #20]
   return(result);
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1e5      	bne.n	800c912 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c948:	2200      	movs	r2, #0
 800c94a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c94c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c950:	2b01      	cmp	r3, #1
 800c952:	d106      	bne.n	800c962 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c956:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c958:	4619      	mov	r1, r3
 800c95a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c95c:	f7f6 ffc8 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c960:	e002      	b.n	800c968 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c962:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c964:	f7ff ff50 	bl	800c808 <HAL_UART_RxCpltCallback>
}
 800c968:	bf00      	nop
 800c96a:	3770      	adds	r7, #112	@ 0x70
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2201      	movs	r2, #1
 800c982:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d108      	bne.n	800c99e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c990:	085b      	lsrs	r3, r3, #1
 800c992:	b29b      	uxth	r3, r3
 800c994:	4619      	mov	r1, r3
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7f6 ffaa 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c99c:	e002      	b.n	800c9a4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff ff3c 	bl	800c81c <HAL_UART_RxHalfCpltCallback>
}
 800c9a4:	bf00      	nop
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c8:	2b80      	cmp	r3, #128	@ 0x80
 800c9ca:	bf0c      	ite	eq
 800c9cc:	2301      	moveq	r3, #1
 800c9ce:	2300      	movne	r3, #0
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b21      	cmp	r3, #33	@ 0x21
 800c9de:	d108      	bne.n	800c9f2 <UART_DMAError+0x46>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d005      	beq.n	800c9f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c9ec:	68b8      	ldr	r0, [r7, #8]
 800c9ee:	f000 f8cd 	bl	800cb8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	bf0c      	ite	eq
 800ca00:	2301      	moveq	r3, #1
 800ca02:	2300      	movne	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b22      	cmp	r3, #34	@ 0x22
 800ca12:	d108      	bne.n	800ca26 <UART_DMAError+0x7a>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d005      	beq.n	800ca26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ca20:	68b8      	ldr	r0, [r7, #8]
 800ca22:	f000 f8db 	bl	800cbdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca2a:	f043 0210 	orr.w	r2, r3, #16
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca32:	68b8      	ldr	r0, [r7, #8]
 800ca34:	f7ff fefc 	bl	800c830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca38:	bf00      	nop
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b098      	sub	sp, #96	@ 0x60
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	88fa      	ldrh	r2, [r7, #6]
 800ca58:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2222      	movs	r2, #34	@ 0x22
 800ca64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca6c:	4a44      	ldr	r2, [pc, #272]	@ (800cb80 <UART_Start_Receive_DMA+0x140>)
 800ca6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca74:	4a43      	ldr	r2, [pc, #268]	@ (800cb84 <UART_Start_Receive_DMA+0x144>)
 800ca76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca7c:	4a42      	ldr	r2, [pc, #264]	@ (800cb88 <UART_Start_Receive_DMA+0x148>)
 800ca7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca84:	2200      	movs	r2, #0
 800ca86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ca88:	f107 0308 	add.w	r3, r7, #8
 800ca8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3304      	adds	r3, #4
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	88fb      	ldrh	r3, [r7, #6]
 800caa0:	f7fc fd8e 	bl	80095c0 <HAL_DMA_Start_IT>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d008      	beq.n	800cabc <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2210      	movs	r2, #16
 800caae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e05d      	b.n	800cb78 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cabc:	2300      	movs	r3, #0
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	613b      	str	r3, [r7, #16]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d019      	beq.n	800cb0e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	330c      	adds	r3, #12
 800cae0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae4:	e853 3f00 	ldrex	r3, [r3]
 800cae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800caea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800caf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	330c      	adds	r3, #12
 800caf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cafa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cafc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cb00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb02:	e841 2300 	strex	r3, r2, [r1]
 800cb06:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cb08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1e5      	bne.n	800cada <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3314      	adds	r3, #20
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb20:	f043 0301 	orr.w	r3, r3, #1
 800cb24:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb2e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cb30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e5      	bne.n	800cb0e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3314      	adds	r3, #20
 800cb48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	617b      	str	r3, [r7, #20]
   return(result);
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb58:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb62:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	6a39      	ldr	r1, [r7, #32]
 800cb68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e5      	bne.n	800cb42 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3760      	adds	r7, #96	@ 0x60
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	0800c845 	.word	0x0800c845
 800cb84:	0800c971 	.word	0x0800c971
 800cb88:	0800c9ad 	.word	0x0800c9ad

0800cb8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b089      	sub	sp, #36	@ 0x24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cbaa:	61fb      	str	r3, [r7, #28]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	330c      	adds	r3, #12
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	61ba      	str	r2, [r7, #24]
 800cbb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	6979      	ldr	r1, [r7, #20]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e5      	bne.n	800cb94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2220      	movs	r2, #32
 800cbcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cbd0:	bf00      	nop
 800cbd2:	3724      	adds	r7, #36	@ 0x24
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b095      	sub	sp, #84	@ 0x54
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	330c      	adds	r3, #12
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc04:	643a      	str	r2, [r7, #64]	@ 0x40
 800cc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e5      	bne.n	800cbe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3314      	adds	r3, #20
 800cc1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	e853 3f00 	ldrex	r3, [r3]
 800cc26:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	f023 0301 	bic.w	r3, r3, #1
 800cc2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3314      	adds	r3, #20
 800cc36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc40:	e841 2300 	strex	r3, r2, [r1]
 800cc44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1e5      	bne.n	800cc18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d119      	bne.n	800cc88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	330c      	adds	r3, #12
 800cc5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f023 0310 	bic.w	r3, r3, #16
 800cc6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	330c      	adds	r3, #12
 800cc72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc74:	61ba      	str	r2, [r7, #24]
 800cc76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6979      	ldr	r1, [r7, #20]
 800cc7a:	69ba      	ldr	r2, [r7, #24]
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	613b      	str	r3, [r7, #16]
   return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e5      	bne.n	800cc54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cc96:	bf00      	nop
 800cc98:	3754      	adds	r7, #84	@ 0x54
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff fdba 	bl	800c830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccbc:	bf00      	nop
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b21      	cmp	r3, #33	@ 0x21
 800ccd6:	d13e      	bne.n	800cd56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce0:	d114      	bne.n	800cd0c <UART_Transmit_IT+0x48>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d110      	bne.n	800cd0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccfe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	1c9a      	adds	r2, r3, #2
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	621a      	str	r2, [r3, #32]
 800cd0a:	e008      	b.n	800cd1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	1c59      	adds	r1, r3, #1
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	6211      	str	r1, [r2, #32]
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10f      	bne.n	800cd52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e000      	b.n	800cd58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd56:	2302      	movs	r3, #2
  }
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2220      	movs	r2, #32
 800cd80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fd35 	bl	800c7f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08c      	sub	sp, #48	@ 0x30
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b22      	cmp	r3, #34	@ 0x22
 800cdae:	f040 80aa 	bne.w	800cf06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdba:	d115      	bne.n	800cde8 <UART_Receive_IT+0x54>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d111      	bne.n	800cde8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde0:	1c9a      	adds	r2, r3, #2
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	629a      	str	r2, [r3, #40]	@ 0x28
 800cde6:	e024      	b.n	800ce32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdf6:	d007      	beq.n	800ce08 <UART_Receive_IT+0x74>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <UART_Receive_IT+0x82>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	e008      	b.n	800ce28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d15d      	bne.n	800cf02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68da      	ldr	r2, [r3, #12]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f022 0220 	bic.w	r2, r2, #32
 800ce54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	695a      	ldr	r2, [r3, #20]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f022 0201 	bic.w	r2, r2, #1
 800ce74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2220      	movs	r2, #32
 800ce7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d135      	bne.n	800cef8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	330c      	adds	r3, #12
 800ce98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	e853 3f00 	ldrex	r3, [r3]
 800cea0:	613b      	str	r3, [r7, #16]
   return(result);
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f023 0310 	bic.w	r3, r3, #16
 800cea8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	330c      	adds	r3, #12
 800ceb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb2:	623a      	str	r2, [r7, #32]
 800ceb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb6:	69f9      	ldr	r1, [r7, #28]
 800ceb8:	6a3a      	ldr	r2, [r7, #32]
 800ceba:	e841 2300 	strex	r3, r2, [r1]
 800cebe:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e5      	bne.n	800ce92 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0310 	and.w	r3, r3, #16
 800ced0:	2b10      	cmp	r3, #16
 800ced2:	d10a      	bne.n	800ceea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7f6 fcfd 	bl	80038f0 <HAL_UARTEx_RxEventCallback>
 800cef6:	e002      	b.n	800cefe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff fc85 	bl	800c808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e002      	b.n	800cf08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	e000      	b.n	800cf08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf06:	2302      	movs	r3, #2
  }
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3730      	adds	r7, #48	@ 0x30
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf14:	b0c0      	sub	sp, #256	@ 0x100
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf2c:	68d9      	ldr	r1, [r3, #12]
 800cf2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	ea40 0301 	orr.w	r3, r0, r1
 800cf38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	431a      	orrs	r2, r3
 800cf48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf68:	f021 010c 	bic.w	r1, r1, #12
 800cf6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf76:	430b      	orrs	r3, r1
 800cf78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf8a:	6999      	ldr	r1, [r3, #24]
 800cf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	ea40 0301 	orr.w	r3, r0, r1
 800cf96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	4b8f      	ldr	r3, [pc, #572]	@ (800d1dc <UART_SetConfig+0x2cc>)
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d005      	beq.n	800cfb0 <UART_SetConfig+0xa0>
 800cfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b8d      	ldr	r3, [pc, #564]	@ (800d1e0 <UART_SetConfig+0x2d0>)
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d104      	bne.n	800cfba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfb0:	f7fd fdbc 	bl	800ab2c <HAL_RCC_GetPCLK2Freq>
 800cfb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cfb8:	e003      	b.n	800cfc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cfba:	f7fd fda3 	bl	800ab04 <HAL_RCC_GetPCLK1Freq>
 800cfbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfcc:	f040 810c 	bne.w	800d1e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cfda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cfde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cfe2:	4622      	mov	r2, r4
 800cfe4:	462b      	mov	r3, r5
 800cfe6:	1891      	adds	r1, r2, r2
 800cfe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cfea:	415b      	adcs	r3, r3
 800cfec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cff2:	4621      	mov	r1, r4
 800cff4:	eb12 0801 	adds.w	r8, r2, r1
 800cff8:	4629      	mov	r1, r5
 800cffa:	eb43 0901 	adc.w	r9, r3, r1
 800cffe:	f04f 0200 	mov.w	r2, #0
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d00a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d00e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d012:	4690      	mov	r8, r2
 800d014:	4699      	mov	r9, r3
 800d016:	4623      	mov	r3, r4
 800d018:	eb18 0303 	adds.w	r3, r8, r3
 800d01c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d020:	462b      	mov	r3, r5
 800d022:	eb49 0303 	adc.w	r3, r9, r3
 800d026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d036:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d03a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d03e:	460b      	mov	r3, r1
 800d040:	18db      	adds	r3, r3, r3
 800d042:	653b      	str	r3, [r7, #80]	@ 0x50
 800d044:	4613      	mov	r3, r2
 800d046:	eb42 0303 	adc.w	r3, r2, r3
 800d04a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d04c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d054:	f7f3 fdf8 	bl	8000c48 <__aeabi_uldivmod>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	4b61      	ldr	r3, [pc, #388]	@ (800d1e4 <UART_SetConfig+0x2d4>)
 800d05e:	fba3 2302 	umull	r2, r3, r3, r2
 800d062:	095b      	lsrs	r3, r3, #5
 800d064:	011c      	lsls	r4, r3, #4
 800d066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d06a:	2200      	movs	r2, #0
 800d06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d070:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d078:	4642      	mov	r2, r8
 800d07a:	464b      	mov	r3, r9
 800d07c:	1891      	adds	r1, r2, r2
 800d07e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d080:	415b      	adcs	r3, r3
 800d082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d088:	4641      	mov	r1, r8
 800d08a:	eb12 0a01 	adds.w	sl, r2, r1
 800d08e:	4649      	mov	r1, r9
 800d090:	eb43 0b01 	adc.w	fp, r3, r1
 800d094:	f04f 0200 	mov.w	r2, #0
 800d098:	f04f 0300 	mov.w	r3, #0
 800d09c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0a8:	4692      	mov	sl, r2
 800d0aa:	469b      	mov	fp, r3
 800d0ac:	4643      	mov	r3, r8
 800d0ae:	eb1a 0303 	adds.w	r3, sl, r3
 800d0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d0b6:	464b      	mov	r3, r9
 800d0b8:	eb4b 0303 	adc.w	r3, fp, r3
 800d0bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d0d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	18db      	adds	r3, r3, r3
 800d0d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0da:	4613      	mov	r3, r2
 800d0dc:	eb42 0303 	adc.w	r3, r2, r3
 800d0e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d0e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d0ea:	f7f3 fdad 	bl	8000c48 <__aeabi_uldivmod>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4b3b      	ldr	r3, [pc, #236]	@ (800d1e4 <UART_SetConfig+0x2d4>)
 800d0f6:	fba3 2301 	umull	r2, r3, r3, r1
 800d0fa:	095b      	lsrs	r3, r3, #5
 800d0fc:	2264      	movs	r2, #100	@ 0x64
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	1acb      	subs	r3, r1, r3
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d10a:	4b36      	ldr	r3, [pc, #216]	@ (800d1e4 <UART_SetConfig+0x2d4>)
 800d10c:	fba3 2302 	umull	r2, r3, r3, r2
 800d110:	095b      	lsrs	r3, r3, #5
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d118:	441c      	add	r4, r3
 800d11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d11e:	2200      	movs	r2, #0
 800d120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d124:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d12c:	4642      	mov	r2, r8
 800d12e:	464b      	mov	r3, r9
 800d130:	1891      	adds	r1, r2, r2
 800d132:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d134:	415b      	adcs	r3, r3
 800d136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d13c:	4641      	mov	r1, r8
 800d13e:	1851      	adds	r1, r2, r1
 800d140:	6339      	str	r1, [r7, #48]	@ 0x30
 800d142:	4649      	mov	r1, r9
 800d144:	414b      	adcs	r3, r1
 800d146:	637b      	str	r3, [r7, #52]	@ 0x34
 800d148:	f04f 0200 	mov.w	r2, #0
 800d14c:	f04f 0300 	mov.w	r3, #0
 800d150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d154:	4659      	mov	r1, fp
 800d156:	00cb      	lsls	r3, r1, #3
 800d158:	4651      	mov	r1, sl
 800d15a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d15e:	4651      	mov	r1, sl
 800d160:	00ca      	lsls	r2, r1, #3
 800d162:	4610      	mov	r0, r2
 800d164:	4619      	mov	r1, r3
 800d166:	4603      	mov	r3, r0
 800d168:	4642      	mov	r2, r8
 800d16a:	189b      	adds	r3, r3, r2
 800d16c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d170:	464b      	mov	r3, r9
 800d172:	460a      	mov	r2, r1
 800d174:	eb42 0303 	adc.w	r3, r2, r3
 800d178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d188:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d18c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d190:	460b      	mov	r3, r1
 800d192:	18db      	adds	r3, r3, r3
 800d194:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d196:	4613      	mov	r3, r2
 800d198:	eb42 0303 	adc.w	r3, r2, r3
 800d19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d19e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d1a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d1a6:	f7f3 fd4f 	bl	8000c48 <__aeabi_uldivmod>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e4 <UART_SetConfig+0x2d4>)
 800d1b0:	fba3 1302 	umull	r1, r3, r3, r2
 800d1b4:	095b      	lsrs	r3, r3, #5
 800d1b6:	2164      	movs	r1, #100	@ 0x64
 800d1b8:	fb01 f303 	mul.w	r3, r1, r3
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	3332      	adds	r3, #50	@ 0x32
 800d1c2:	4a08      	ldr	r2, [pc, #32]	@ (800d1e4 <UART_SetConfig+0x2d4>)
 800d1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c8:	095b      	lsrs	r3, r3, #5
 800d1ca:	f003 0207 	and.w	r2, r3, #7
 800d1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4422      	add	r2, r4
 800d1d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d1d8:	e106      	b.n	800d3e8 <UART_SetConfig+0x4d8>
 800d1da:	bf00      	nop
 800d1dc:	40011000 	.word	0x40011000
 800d1e0:	40011400 	.word	0x40011400
 800d1e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d1fa:	4642      	mov	r2, r8
 800d1fc:	464b      	mov	r3, r9
 800d1fe:	1891      	adds	r1, r2, r2
 800d200:	6239      	str	r1, [r7, #32]
 800d202:	415b      	adcs	r3, r3
 800d204:	627b      	str	r3, [r7, #36]	@ 0x24
 800d206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d20a:	4641      	mov	r1, r8
 800d20c:	1854      	adds	r4, r2, r1
 800d20e:	4649      	mov	r1, r9
 800d210:	eb43 0501 	adc.w	r5, r3, r1
 800d214:	f04f 0200 	mov.w	r2, #0
 800d218:	f04f 0300 	mov.w	r3, #0
 800d21c:	00eb      	lsls	r3, r5, #3
 800d21e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d222:	00e2      	lsls	r2, r4, #3
 800d224:	4614      	mov	r4, r2
 800d226:	461d      	mov	r5, r3
 800d228:	4643      	mov	r3, r8
 800d22a:	18e3      	adds	r3, r4, r3
 800d22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d230:	464b      	mov	r3, r9
 800d232:	eb45 0303 	adc.w	r3, r5, r3
 800d236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d256:	4629      	mov	r1, r5
 800d258:	008b      	lsls	r3, r1, #2
 800d25a:	4621      	mov	r1, r4
 800d25c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d260:	4621      	mov	r1, r4
 800d262:	008a      	lsls	r2, r1, #2
 800d264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d268:	f7f3 fcee 	bl	8000c48 <__aeabi_uldivmod>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4b60      	ldr	r3, [pc, #384]	@ (800d3f4 <UART_SetConfig+0x4e4>)
 800d272:	fba3 2302 	umull	r2, r3, r3, r2
 800d276:	095b      	lsrs	r3, r3, #5
 800d278:	011c      	lsls	r4, r3, #4
 800d27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d28c:	4642      	mov	r2, r8
 800d28e:	464b      	mov	r3, r9
 800d290:	1891      	adds	r1, r2, r2
 800d292:	61b9      	str	r1, [r7, #24]
 800d294:	415b      	adcs	r3, r3
 800d296:	61fb      	str	r3, [r7, #28]
 800d298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d29c:	4641      	mov	r1, r8
 800d29e:	1851      	adds	r1, r2, r1
 800d2a0:	6139      	str	r1, [r7, #16]
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	414b      	adcs	r3, r1
 800d2a6:	617b      	str	r3, [r7, #20]
 800d2a8:	f04f 0200 	mov.w	r2, #0
 800d2ac:	f04f 0300 	mov.w	r3, #0
 800d2b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2b4:	4659      	mov	r1, fp
 800d2b6:	00cb      	lsls	r3, r1, #3
 800d2b8:	4651      	mov	r1, sl
 800d2ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2be:	4651      	mov	r1, sl
 800d2c0:	00ca      	lsls	r2, r1, #3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	189b      	adds	r3, r3, r2
 800d2cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d2d0:	464b      	mov	r3, r9
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	eb42 0303 	adc.w	r3, r2, r3
 800d2d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d2e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d2e8:	f04f 0200 	mov.w	r2, #0
 800d2ec:	f04f 0300 	mov.w	r3, #0
 800d2f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	008b      	lsls	r3, r1, #2
 800d2f8:	4641      	mov	r1, r8
 800d2fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2fe:	4641      	mov	r1, r8
 800d300:	008a      	lsls	r2, r1, #2
 800d302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d306:	f7f3 fc9f 	bl	8000c48 <__aeabi_uldivmod>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4611      	mov	r1, r2
 800d310:	4b38      	ldr	r3, [pc, #224]	@ (800d3f4 <UART_SetConfig+0x4e4>)
 800d312:	fba3 2301 	umull	r2, r3, r3, r1
 800d316:	095b      	lsrs	r3, r3, #5
 800d318:	2264      	movs	r2, #100	@ 0x64
 800d31a:	fb02 f303 	mul.w	r3, r2, r3
 800d31e:	1acb      	subs	r3, r1, r3
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	3332      	adds	r3, #50	@ 0x32
 800d324:	4a33      	ldr	r2, [pc, #204]	@ (800d3f4 <UART_SetConfig+0x4e4>)
 800d326:	fba2 2303 	umull	r2, r3, r2, r3
 800d32a:	095b      	lsrs	r3, r3, #5
 800d32c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d330:	441c      	add	r4, r3
 800d332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d336:	2200      	movs	r2, #0
 800d338:	673b      	str	r3, [r7, #112]	@ 0x70
 800d33a:	677a      	str	r2, [r7, #116]	@ 0x74
 800d33c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d340:	4642      	mov	r2, r8
 800d342:	464b      	mov	r3, r9
 800d344:	1891      	adds	r1, r2, r2
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	415b      	adcs	r3, r3
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d350:	4641      	mov	r1, r8
 800d352:	1851      	adds	r1, r2, r1
 800d354:	6039      	str	r1, [r7, #0]
 800d356:	4649      	mov	r1, r9
 800d358:	414b      	adcs	r3, r1
 800d35a:	607b      	str	r3, [r7, #4]
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d368:	4659      	mov	r1, fp
 800d36a:	00cb      	lsls	r3, r1, #3
 800d36c:	4651      	mov	r1, sl
 800d36e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d372:	4651      	mov	r1, sl
 800d374:	00ca      	lsls	r2, r1, #3
 800d376:	4610      	mov	r0, r2
 800d378:	4619      	mov	r1, r3
 800d37a:	4603      	mov	r3, r0
 800d37c:	4642      	mov	r2, r8
 800d37e:	189b      	adds	r3, r3, r2
 800d380:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d382:	464b      	mov	r3, r9
 800d384:	460a      	mov	r2, r1
 800d386:	eb42 0303 	adc.w	r3, r2, r3
 800d38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	663b      	str	r3, [r7, #96]	@ 0x60
 800d396:	667a      	str	r2, [r7, #100]	@ 0x64
 800d398:	f04f 0200 	mov.w	r2, #0
 800d39c:	f04f 0300 	mov.w	r3, #0
 800d3a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d3a4:	4649      	mov	r1, r9
 800d3a6:	008b      	lsls	r3, r1, #2
 800d3a8:	4641      	mov	r1, r8
 800d3aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3ae:	4641      	mov	r1, r8
 800d3b0:	008a      	lsls	r2, r1, #2
 800d3b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d3b6:	f7f3 fc47 	bl	8000c48 <__aeabi_uldivmod>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <UART_SetConfig+0x4e4>)
 800d3c0:	fba3 1302 	umull	r1, r3, r3, r2
 800d3c4:	095b      	lsrs	r3, r3, #5
 800d3c6:	2164      	movs	r1, #100	@ 0x64
 800d3c8:	fb01 f303 	mul.w	r3, r1, r3
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	011b      	lsls	r3, r3, #4
 800d3d0:	3332      	adds	r3, #50	@ 0x32
 800d3d2:	4a08      	ldr	r2, [pc, #32]	@ (800d3f4 <UART_SetConfig+0x4e4>)
 800d3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d8:	095b      	lsrs	r3, r3, #5
 800d3da:	f003 020f 	and.w	r2, r3, #15
 800d3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4422      	add	r2, r4
 800d3e6:	609a      	str	r2, [r3, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3f4:	51eb851f 	.word	0x51eb851f

0800d3f8 <__NVIC_SetPriority>:
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	6039      	str	r1, [r7, #0]
 800d402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	db0a      	blt.n	800d422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	490c      	ldr	r1, [pc, #48]	@ (800d444 <__NVIC_SetPriority+0x4c>)
 800d412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d416:	0112      	lsls	r2, r2, #4
 800d418:	b2d2      	uxtb	r2, r2
 800d41a:	440b      	add	r3, r1
 800d41c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d420:	e00a      	b.n	800d438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	b2da      	uxtb	r2, r3
 800d426:	4908      	ldr	r1, [pc, #32]	@ (800d448 <__NVIC_SetPriority+0x50>)
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	3b04      	subs	r3, #4
 800d430:	0112      	lsls	r2, r2, #4
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	440b      	add	r3, r1
 800d436:	761a      	strb	r2, [r3, #24]
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	e000e100 	.word	0xe000e100
 800d448:	e000ed00 	.word	0xe000ed00

0800d44c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d450:	2100      	movs	r1, #0
 800d452:	f06f 0004 	mvn.w	r0, #4
 800d456:	f7ff ffcf 	bl	800d3f8 <__NVIC_SetPriority>
#endif
}
 800d45a:	bf00      	nop
 800d45c:	bd80      	pop	{r7, pc}
	...

0800d460 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d466:	f3ef 8305 	mrs	r3, IPSR
 800d46a:	603b      	str	r3, [r7, #0]
  return(result);
 800d46c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d472:	f06f 0305 	mvn.w	r3, #5
 800d476:	607b      	str	r3, [r7, #4]
 800d478:	e00c      	b.n	800d494 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d47a:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a4 <osKernelInitialize+0x44>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d482:	4b08      	ldr	r3, [pc, #32]	@ (800d4a4 <osKernelInitialize+0x44>)
 800d484:	2201      	movs	r2, #1
 800d486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d488:	2300      	movs	r3, #0
 800d48a:	607b      	str	r3, [r7, #4]
 800d48c:	e002      	b.n	800d494 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d48e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d494:	687b      	ldr	r3, [r7, #4]
}
 800d496:	4618      	mov	r0, r3
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20000ea4 	.word	0x20000ea4

0800d4a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4ae:	f3ef 8305 	mrs	r3, IPSR
 800d4b2:	603b      	str	r3, [r7, #0]
  return(result);
 800d4b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d4ba:	f06f 0305 	mvn.w	r3, #5
 800d4be:	607b      	str	r3, [r7, #4]
 800d4c0:	e010      	b.n	800d4e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d4c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d4f0 <osKernelStart+0x48>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d109      	bne.n	800d4de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d4ca:	f7ff ffbf 	bl	800d44c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d4ce:	4b08      	ldr	r3, [pc, #32]	@ (800d4f0 <osKernelStart+0x48>)
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d4d4:	f001 f892 	bl	800e5fc <vTaskStartScheduler>
      stat = osOK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	607b      	str	r3, [r7, #4]
 800d4dc:	e002      	b.n	800d4e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d4e4:	687b      	ldr	r3, [r7, #4]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000ea4 	.word	0x20000ea4

0800d4f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b08e      	sub	sp, #56	@ 0x38
 800d4f8:	af04      	add	r7, sp, #16
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d504:	f3ef 8305 	mrs	r3, IPSR
 800d508:	617b      	str	r3, [r7, #20]
  return(result);
 800d50a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d17e      	bne.n	800d60e <osThreadNew+0x11a>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d07b      	beq.n	800d60e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d516:	2380      	movs	r3, #128	@ 0x80
 800d518:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d51a:	2318      	movs	r3, #24
 800d51c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d526:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d045      	beq.n	800d5ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <osThreadNew+0x48>
        name = attr->name;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d008      	beq.n	800d562 <osThreadNew+0x6e>
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	2b38      	cmp	r3, #56	@ 0x38
 800d554:	d805      	bhi.n	800d562 <osThreadNew+0x6e>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <osThreadNew+0x72>
        return (NULL);
 800d562:	2300      	movs	r3, #0
 800d564:	e054      	b.n	800d610 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	089b      	lsrs	r3, r3, #2
 800d574:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00e      	beq.n	800d59c <osThreadNew+0xa8>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	2ba7      	cmp	r3, #167	@ 0xa7
 800d584:	d90a      	bls.n	800d59c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <osThreadNew+0xa8>
        mem = 1;
 800d596:	2301      	movs	r3, #1
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	e010      	b.n	800d5be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10c      	bne.n	800d5be <osThreadNew+0xca>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d108      	bne.n	800d5be <osThreadNew+0xca>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d104      	bne.n	800d5be <osThreadNew+0xca>
          mem = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61bb      	str	r3, [r7, #24]
 800d5b8:	e001      	b.n	800d5be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d110      	bne.n	800d5e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5cc:	9202      	str	r2, [sp, #8]
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	6a3a      	ldr	r2, [r7, #32]
 800d5d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f000 fe1a 	bl	800e214 <xTaskCreateStatic>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	613b      	str	r3, [r7, #16]
 800d5e4:	e013      	b.n	800d60e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d110      	bne.n	800d60e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	f107 0310 	add.w	r3, r7, #16
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 fe68 	bl	800e2d4 <xTaskCreate>
 800d604:	4603      	mov	r3, r0
 800d606:	2b01      	cmp	r3, #1
 800d608:	d001      	beq.n	800d60e <osThreadNew+0x11a>
            hTask = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d60e:	693b      	ldr	r3, [r7, #16]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3728      	adds	r7, #40	@ 0x28
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d620:	f3ef 8305 	mrs	r3, IPSR
 800d624:	60bb      	str	r3, [r7, #8]
  return(result);
 800d626:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <osDelay+0x1c>
    stat = osErrorISR;
 800d62c:	f06f 0305 	mvn.w	r3, #5
 800d630:	60fb      	str	r3, [r7, #12]
 800d632:	e007      	b.n	800d644 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d634:	2300      	movs	r3, #0
 800d636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 ffa6 	bl	800e590 <vTaskDelay>
    }
  }

  return (stat);
 800d644:	68fb      	ldr	r3, [r7, #12]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	4a07      	ldr	r2, [pc, #28]	@ (800d67c <vApplicationGetIdleTaskMemory+0x2c>)
 800d660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	4a06      	ldr	r2, [pc, #24]	@ (800d680 <vApplicationGetIdleTaskMemory+0x30>)
 800d666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2280      	movs	r2, #128	@ 0x80
 800d66c:	601a      	str	r2, [r3, #0]
}
 800d66e:	bf00      	nop
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	20000ea8 	.word	0x20000ea8
 800d680:	20000f50 	.word	0x20000f50

0800d684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4a07      	ldr	r2, [pc, #28]	@ (800d6b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	4a06      	ldr	r2, [pc, #24]	@ (800d6b4 <vApplicationGetTimerTaskMemory+0x30>)
 800d69a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6a2:	601a      	str	r2, [r3, #0]
}
 800d6a4:	bf00      	nop
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	20001150 	.word	0x20001150
 800d6b4:	200011f8 	.word	0x200011f8

0800d6b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f103 0208 	add.w	r2, r3, #8
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f103 0208 	add.w	r2, r3, #8
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f103 0208 	add.w	r2, r3, #8
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d712:	b480      	push	{r7}
 800d714:	b085      	sub	sp, #20
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	689a      	ldr	r2, [r3, #8]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	601a      	str	r2, [r3, #0]
}
 800d74e:	bf00      	nop
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d75a:	b480      	push	{r7}
 800d75c:	b085      	sub	sp, #20
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d770:	d103      	bne.n	800d77a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	e00c      	b.n	800d794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	3308      	adds	r3, #8
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e002      	b.n	800d788 <vListInsert+0x2e>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	429a      	cmp	r2, r3
 800d792:	d2f6      	bcs.n	800d782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	685a      	ldr	r2, [r3, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	601a      	str	r2, [r3, #0]
}
 800d7c0:	bf00      	nop
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	6892      	ldr	r2, [r2, #8]
 800d7e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	6852      	ldr	r2, [r2, #4]
 800d7ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d103      	bne.n	800d800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	689a      	ldr	r2, [r3, #8]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	1e5a      	subs	r2, r3, #1
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10b      	bne.n	800d84c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	e7fd      	b.n	800d848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d84c:	f002 fa84 	bl	800fd58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d858:	68f9      	ldr	r1, [r7, #12]
 800d85a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d85c:	fb01 f303 	mul.w	r3, r1, r3
 800d860:	441a      	add	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d87c:	3b01      	subs	r3, #1
 800d87e:	68f9      	ldr	r1, [r7, #12]
 800d880:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d882:	fb01 f303 	mul.w	r3, r1, r3
 800d886:	441a      	add	r2, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	22ff      	movs	r2, #255	@ 0xff
 800d890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	22ff      	movs	r2, #255	@ 0xff
 800d898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d114      	bne.n	800d8cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01a      	beq.n	800d8e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f001 fa3c 	bl	800ed2c <xTaskRemoveFromEventList>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d012      	beq.n	800d8e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d8f0 <xQueueGenericReset+0xd0>)
 800d8bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	e009      	b.n	800d8e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	3310      	adds	r3, #16
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff fef1 	bl	800d6b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	3324      	adds	r3, #36	@ 0x24
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff feec 	bl	800d6b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d8e0:	f002 fa6c 	bl	800fdbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8e4:	2301      	movs	r3, #1
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	e000ed04 	.word	0xe000ed04

0800d8f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	@ 0x38
 800d8f8:	af02      	add	r7, sp, #8
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10b      	bne.n	800d920 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d91a:	bf00      	nop
 800d91c:	bf00      	nop
 800d91e:	e7fd      	b.n	800d91c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10b      	bne.n	800d93e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <xQueueGenericCreateStatic+0x56>
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <xQueueGenericCreateStatic+0x5a>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <xQueueGenericCreateStatic+0x5c>
 800d94e:	2300      	movs	r3, #0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10b      	bne.n	800d96c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	623b      	str	r3, [r7, #32]
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	e7fd      	b.n	800d968 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <xQueueGenericCreateStatic+0x84>
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <xQueueGenericCreateStatic+0x88>
 800d978:	2301      	movs	r3, #1
 800d97a:	e000      	b.n	800d97e <xQueueGenericCreateStatic+0x8a>
 800d97c:	2300      	movs	r3, #0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10b      	bne.n	800d99a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	61fb      	str	r3, [r7, #28]
}
 800d994:	bf00      	nop
 800d996:	bf00      	nop
 800d998:	e7fd      	b.n	800d996 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d99a:	2350      	movs	r3, #80	@ 0x50
 800d99c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	2b50      	cmp	r3, #80	@ 0x50
 800d9a2:	d00b      	beq.n	800d9bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a8:	f383 8811 	msr	BASEPRI, r3
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	61bb      	str	r3, [r7, #24]
}
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	e7fd      	b.n	800d9b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d9bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00d      	beq.n	800d9e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	68b9      	ldr	r1, [r7, #8]
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 f805 	bl	800d9ee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3730      	adds	r7, #48	@ 0x30
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d103      	bne.n	800da0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	e002      	b.n	800da10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da1c:	2101      	movs	r1, #1
 800da1e:	69b8      	ldr	r0, [r7, #24]
 800da20:	f7ff fefe 	bl	800d820 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	78fa      	ldrb	r2, [r7, #3]
 800da28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da2c:	bf00      	nop
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08e      	sub	sp, #56	@ 0x38
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da42:	2300      	movs	r3, #0
 800da44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10b      	bne.n	800da68 <xQueueGenericSend+0x34>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da62:	bf00      	nop
 800da64:	bf00      	nop
 800da66:	e7fd      	b.n	800da64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <xQueueGenericSend+0x42>
 800da6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da72:	2b00      	cmp	r3, #0
 800da74:	d101      	bne.n	800da7a <xQueueGenericSend+0x46>
 800da76:	2301      	movs	r3, #1
 800da78:	e000      	b.n	800da7c <xQueueGenericSend+0x48>
 800da7a:	2300      	movs	r3, #0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10b      	bne.n	800da98 <xQueueGenericSend+0x64>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da92:	bf00      	nop
 800da94:	bf00      	nop
 800da96:	e7fd      	b.n	800da94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d103      	bne.n	800daa6 <xQueueGenericSend+0x72>
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d101      	bne.n	800daaa <xQueueGenericSend+0x76>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <xQueueGenericSend+0x78>
 800daaa:	2300      	movs	r3, #0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10b      	bne.n	800dac8 <xQueueGenericSend+0x94>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	623b      	str	r3, [r7, #32]
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	e7fd      	b.n	800dac4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dac8:	f001 faf6 	bl	800f0b8 <xTaskGetSchedulerState>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d102      	bne.n	800dad8 <xQueueGenericSend+0xa4>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <xQueueGenericSend+0xa8>
 800dad8:	2301      	movs	r3, #1
 800dada:	e000      	b.n	800dade <xQueueGenericSend+0xaa>
 800dadc:	2300      	movs	r3, #0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10b      	bne.n	800dafa <xQueueGenericSend+0xc6>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	61fb      	str	r3, [r7, #28]
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	e7fd      	b.n	800daf6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dafa:	f002 f92d 	bl	800fd58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db06:	429a      	cmp	r2, r3
 800db08:	d302      	bcc.n	800db10 <xQueueGenericSend+0xdc>
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d129      	bne.n	800db64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db16:	f000 fa0f 	bl	800df38 <prvCopyDataToQueue>
 800db1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db20:	2b00      	cmp	r3, #0
 800db22:	d010      	beq.n	800db46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db26:	3324      	adds	r3, #36	@ 0x24
 800db28:	4618      	mov	r0, r3
 800db2a:	f001 f8ff 	bl	800ed2c <xTaskRemoveFromEventList>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d013      	beq.n	800db5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db34:	4b3f      	ldr	r3, [pc, #252]	@ (800dc34 <xQueueGenericSend+0x200>)
 800db36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db3a:	601a      	str	r2, [r3, #0]
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	e00a      	b.n	800db5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d007      	beq.n	800db5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db4c:	4b39      	ldr	r3, [pc, #228]	@ (800dc34 <xQueueGenericSend+0x200>)
 800db4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db5c:	f002 f92e 	bl	800fdbc <vPortExitCritical>
				return pdPASS;
 800db60:	2301      	movs	r3, #1
 800db62:	e063      	b.n	800dc2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db6a:	f002 f927 	bl	800fdbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	e05c      	b.n	800dc2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db78:	f107 0314 	add.w	r3, r7, #20
 800db7c:	4618      	mov	r0, r3
 800db7e:	f001 f939 	bl	800edf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db82:	2301      	movs	r3, #1
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db86:	f002 f919 	bl	800fdbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db8a:	f000 fda7 	bl	800e6dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db8e:	f002 f8e3 	bl	800fd58 <vPortEnterCritical>
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db98:	b25b      	sxtb	r3, r3
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db9e:	d103      	bne.n	800dba8 <xQueueGenericSend+0x174>
 800dba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbae:	b25b      	sxtb	r3, r3
 800dbb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbb4:	d103      	bne.n	800dbbe <xQueueGenericSend+0x18a>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbbe:	f002 f8fd 	bl	800fdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbc2:	1d3a      	adds	r2, r7, #4
 800dbc4:	f107 0314 	add.w	r3, r7, #20
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f001 f928 	bl	800ee20 <xTaskCheckForTimeOut>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d124      	bne.n	800dc20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dbd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbd8:	f000 faa6 	bl	800e128 <prvIsQueueFull>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d018      	beq.n	800dc14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe4:	3310      	adds	r3, #16
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 f84c 	bl	800ec88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dbf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbf2:	f000 fa31 	bl	800e058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dbf6:	f000 fd7f 	bl	800e6f8 <xTaskResumeAll>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f47f af7c 	bne.w	800dafa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dc02:	4b0c      	ldr	r3, [pc, #48]	@ (800dc34 <xQueueGenericSend+0x200>)
 800dc04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	e772      	b.n	800dafa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc16:	f000 fa1f 	bl	800e058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc1a:	f000 fd6d 	bl	800e6f8 <xTaskResumeAll>
 800dc1e:	e76c      	b.n	800dafa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc22:	f000 fa19 	bl	800e058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc26:	f000 fd67 	bl	800e6f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3738      	adds	r7, #56	@ 0x38
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b090      	sub	sp, #64	@ 0x40
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10b      	bne.n	800dc68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dc62:	bf00      	nop
 800dc64:	bf00      	nop
 800dc66:	e7fd      	b.n	800dc64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d103      	bne.n	800dc76 <xQueueGenericSendFromISR+0x3e>
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <xQueueGenericSendFromISR+0x42>
 800dc76:	2301      	movs	r3, #1
 800dc78:	e000      	b.n	800dc7c <xQueueGenericSendFromISR+0x44>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10b      	bne.n	800dc98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dc92:	bf00      	nop
 800dc94:	bf00      	nop
 800dc96:	e7fd      	b.n	800dc94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	2b02      	cmp	r3, #2
 800dc9c:	d103      	bne.n	800dca6 <xQueueGenericSendFromISR+0x6e>
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d101      	bne.n	800dcaa <xQueueGenericSendFromISR+0x72>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e000      	b.n	800dcac <xQueueGenericSendFromISR+0x74>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10b      	bne.n	800dcc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	623b      	str	r3, [r7, #32]
}
 800dcc2:	bf00      	nop
 800dcc4:	bf00      	nop
 800dcc6:	e7fd      	b.n	800dcc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcc8:	f002 f926 	bl	800ff18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dccc:	f3ef 8211 	mrs	r2, BASEPRI
 800dcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	61fa      	str	r2, [r7, #28]
 800dce2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dce4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d302      	bcc.n	800dcfa <xQueueGenericSendFromISR+0xc2>
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d12f      	bne.n	800dd5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	68b9      	ldr	r1, [r7, #8]
 800dd0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd10:	f000 f912 	bl	800df38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd1c:	d112      	bne.n	800dd44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d016      	beq.n	800dd54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd28:	3324      	adds	r3, #36	@ 0x24
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 fffe 	bl	800ed2c <xTaskRemoveFromEventList>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00e      	beq.n	800dd54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00b      	beq.n	800dd54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	e007      	b.n	800dd54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dd48:	3301      	adds	r3, #1
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	b25a      	sxtb	r2, r3
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd54:	2301      	movs	r3, #1
 800dd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dd58:	e001      	b.n	800dd5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3740      	adds	r7, #64	@ 0x40
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08c      	sub	sp, #48	@ 0x30
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd80:	2300      	movs	r3, #0
 800dd82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10b      	bne.n	800dda6 <xQueueReceive+0x32>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	623b      	str	r3, [r7, #32]
}
 800dda0:	bf00      	nop
 800dda2:	bf00      	nop
 800dda4:	e7fd      	b.n	800dda2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d103      	bne.n	800ddb4 <xQueueReceive+0x40>
 800ddac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <xQueueReceive+0x44>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e000      	b.n	800ddba <xQueueReceive+0x46>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10b      	bne.n	800ddd6 <xQueueReceive+0x62>
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	61fb      	str	r3, [r7, #28]
}
 800ddd0:	bf00      	nop
 800ddd2:	bf00      	nop
 800ddd4:	e7fd      	b.n	800ddd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddd6:	f001 f96f 	bl	800f0b8 <xTaskGetSchedulerState>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d102      	bne.n	800dde6 <xQueueReceive+0x72>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <xQueueReceive+0x76>
 800dde6:	2301      	movs	r3, #1
 800dde8:	e000      	b.n	800ddec <xQueueReceive+0x78>
 800ddea:	2300      	movs	r3, #0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10b      	bne.n	800de08 <xQueueReceive+0x94>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	61bb      	str	r3, [r7, #24]
}
 800de02:	bf00      	nop
 800de04:	bf00      	nop
 800de06:	e7fd      	b.n	800de04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de08:	f001 ffa6 	bl	800fd58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de14:	2b00      	cmp	r3, #0
 800de16:	d01f      	beq.n	800de58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de1c:	f000 f8f6 	bl	800e00c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de22:	1e5a      	subs	r2, r3, #1
 800de24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00f      	beq.n	800de50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de32:	3310      	adds	r3, #16
 800de34:	4618      	mov	r0, r3
 800de36:	f000 ff79 	bl	800ed2c <xTaskRemoveFromEventList>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d007      	beq.n	800de50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de40:	4b3c      	ldr	r3, [pc, #240]	@ (800df34 <xQueueReceive+0x1c0>)
 800de42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de46:	601a      	str	r2, [r3, #0]
 800de48:	f3bf 8f4f 	dsb	sy
 800de4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de50:	f001 ffb4 	bl	800fdbc <vPortExitCritical>
				return pdPASS;
 800de54:	2301      	movs	r3, #1
 800de56:	e069      	b.n	800df2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d103      	bne.n	800de66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de5e:	f001 ffad 	bl	800fdbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de62:	2300      	movs	r3, #0
 800de64:	e062      	b.n	800df2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d106      	bne.n	800de7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	4618      	mov	r0, r3
 800de72:	f000 ffbf 	bl	800edf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de76:	2301      	movs	r3, #1
 800de78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de7a:	f001 ff9f 	bl	800fdbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de7e:	f000 fc2d 	bl	800e6dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de82:	f001 ff69 	bl	800fd58 <vPortEnterCritical>
 800de86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de8c:	b25b      	sxtb	r3, r3
 800de8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de92:	d103      	bne.n	800de9c <xQueueReceive+0x128>
 800de94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de96:	2200      	movs	r2, #0
 800de98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dea2:	b25b      	sxtb	r3, r3
 800dea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dea8:	d103      	bne.n	800deb2 <xQueueReceive+0x13e>
 800deaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deb2:	f001 ff83 	bl	800fdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deb6:	1d3a      	adds	r2, r7, #4
 800deb8:	f107 0310 	add.w	r3, r7, #16
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 ffae 	bl	800ee20 <xTaskCheckForTimeOut>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d123      	bne.n	800df12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800decc:	f000 f916 	bl	800e0fc <prvIsQueueEmpty>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d017      	beq.n	800df06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ded6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded8:	3324      	adds	r3, #36	@ 0x24
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	4611      	mov	r1, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 fed2 	bl	800ec88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dee6:	f000 f8b7 	bl	800e058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800deea:	f000 fc05 	bl	800e6f8 <xTaskResumeAll>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d189      	bne.n	800de08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800def4:	4b0f      	ldr	r3, [pc, #60]	@ (800df34 <xQueueReceive+0x1c0>)
 800def6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800defa:	601a      	str	r2, [r3, #0]
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	e780      	b.n	800de08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df08:	f000 f8a6 	bl	800e058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df0c:	f000 fbf4 	bl	800e6f8 <xTaskResumeAll>
 800df10:	e77a      	b.n	800de08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df14:	f000 f8a0 	bl	800e058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df18:	f000 fbee 	bl	800e6f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df1e:	f000 f8ed 	bl	800e0fc <prvIsQueueEmpty>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	f43f af6f 	beq.w	800de08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3730      	adds	r7, #48	@ 0x30
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	e000ed04 	.word	0xe000ed04

0800df38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df44:	2300      	movs	r3, #0
 800df46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10d      	bne.n	800df72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d14d      	bne.n	800dffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	4618      	mov	r0, r3
 800df64:	f001 f8c6 	bl	800f0f4 <xTaskPriorityDisinherit>
 800df68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	609a      	str	r2, [r3, #8]
 800df70:	e043      	b.n	800dffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d119      	bne.n	800dfac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6858      	ldr	r0, [r3, #4]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df80:	461a      	mov	r2, r3
 800df82:	68b9      	ldr	r1, [r7, #8]
 800df84:	f002 ffa8 	bl	8010ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d32b      	bcc.n	800dffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	605a      	str	r2, [r3, #4]
 800dfaa:	e026      	b.n	800dffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68d8      	ldr	r0, [r3, #12]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	f002 ff8e 	bl	8010ed8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68da      	ldr	r2, [r3, #12]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc4:	425b      	negs	r3, r3
 800dfc6:	441a      	add	r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	68da      	ldr	r2, [r3, #12]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d207      	bcs.n	800dfe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	689a      	ldr	r2, [r3, #8]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe0:	425b      	negs	r3, r3
 800dfe2:	441a      	add	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d105      	bne.n	800dffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e002:	697b      	ldr	r3, [r7, #20]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d018      	beq.n	800e050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e026:	441a      	add	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68da      	ldr	r2, [r3, #12]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	429a      	cmp	r2, r3
 800e036:	d303      	bcc.n	800e040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	68d9      	ldr	r1, [r3, #12]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e048:	461a      	mov	r2, r3
 800e04a:	6838      	ldr	r0, [r7, #0]
 800e04c:	f002 ff44 	bl	8010ed8 <memcpy>
	}
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e060:	f001 fe7a 	bl	800fd58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e06a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e06c:	e011      	b.n	800e092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e072:	2b00      	cmp	r3, #0
 800e074:	d012      	beq.n	800e09c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	3324      	adds	r3, #36	@ 0x24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 fe56 	bl	800ed2c <xTaskRemoveFromEventList>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e086:	f000 ff2f 	bl	800eee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	dce9      	bgt.n	800e06e <prvUnlockQueue+0x16>
 800e09a:	e000      	b.n	800e09e <prvUnlockQueue+0x46>
					break;
 800e09c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	22ff      	movs	r2, #255	@ 0xff
 800e0a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e0a6:	f001 fe89 	bl	800fdbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e0aa:	f001 fe55 	bl	800fd58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0b6:	e011      	b.n	800e0dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d012      	beq.n	800e0e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3310      	adds	r3, #16
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 fe31 	bl	800ed2c <xTaskRemoveFromEventList>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e0d0:	f000 ff0a 	bl	800eee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dce9      	bgt.n	800e0b8 <prvUnlockQueue+0x60>
 800e0e4:	e000      	b.n	800e0e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e0e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	22ff      	movs	r2, #255	@ 0xff
 800e0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e0f0:	f001 fe64 	bl	800fdbc <vPortExitCritical>
}
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e104:	f001 fe28 	bl	800fd58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e110:	2301      	movs	r3, #1
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e001      	b.n	800e11a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e11a:	f001 fe4f 	bl	800fdbc <vPortExitCritical>

	return xReturn;
 800e11e:	68fb      	ldr	r3, [r7, #12]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e130:	f001 fe12 	bl	800fd58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d102      	bne.n	800e146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e140:	2301      	movs	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	e001      	b.n	800e14a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e146:	2300      	movs	r3, #0
 800e148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e14a:	f001 fe37 	bl	800fdbc <vPortExitCritical>

	return xReturn;
 800e14e:	68fb      	ldr	r3, [r7, #12]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	e014      	b.n	800e192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e168:	4a0f      	ldr	r2, [pc, #60]	@ (800e1a8 <vQueueAddToRegistry+0x50>)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10b      	bne.n	800e18c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e174:	490c      	ldr	r1, [pc, #48]	@ (800e1a8 <vQueueAddToRegistry+0x50>)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e17e:	4a0a      	ldr	r2, [pc, #40]	@ (800e1a8 <vQueueAddToRegistry+0x50>)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	4413      	add	r3, r2
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e18a:	e006      	b.n	800e19a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b07      	cmp	r3, #7
 800e196:	d9e7      	bls.n	800e168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e198:	bf00      	nop
 800e19a:	bf00      	nop
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	200015f8 	.word	0x200015f8

0800e1ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e1bc:	f001 fdcc 	bl	800fd58 <vPortEnterCritical>
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1c6:	b25b      	sxtb	r3, r3
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1cc:	d103      	bne.n	800e1d6 <vQueueWaitForMessageRestricted+0x2a>
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1dc:	b25b      	sxtb	r3, r3
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1e2:	d103      	bne.n	800e1ec <vQueueWaitForMessageRestricted+0x40>
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1ec:	f001 fde6 	bl	800fdbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	3324      	adds	r3, #36	@ 0x24
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	68b9      	ldr	r1, [r7, #8]
 800e200:	4618      	mov	r0, r3
 800e202:	f000 fd67 	bl	800ecd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f7ff ff26 	bl	800e058 <prvUnlockQueue>
	}
 800e20c:	bf00      	nop
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08e      	sub	sp, #56	@ 0x38
 800e218:	af04      	add	r7, sp, #16
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10b      	bne.n	800e240 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	623b      	str	r3, [r7, #32]
}
 800e23a:	bf00      	nop
 800e23c:	bf00      	nop
 800e23e:	e7fd      	b.n	800e23c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10b      	bne.n	800e25e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	61fb      	str	r3, [r7, #28]
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	e7fd      	b.n	800e25a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e25e:	23a8      	movs	r3, #168	@ 0xa8
 800e260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	2ba8      	cmp	r3, #168	@ 0xa8
 800e266:	d00b      	beq.n	800e280 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	61bb      	str	r3, [r7, #24]
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	e7fd      	b.n	800e27c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e280:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01e      	beq.n	800e2c6 <xTaskCreateStatic+0xb2>
 800e288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01b      	beq.n	800e2c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e290:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e296:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9303      	str	r3, [sp, #12]
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a6:	9302      	str	r3, [sp, #8]
 800e2a8:	f107 0314 	add.w	r3, r7, #20
 800e2ac:	9301      	str	r3, [sp, #4]
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 f851 	bl	800e360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e2c0:	f000 f8f6 	bl	800e4b0 <prvAddNewTaskToReadyList>
 800e2c4:	e001      	b.n	800e2ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e2ca:	697b      	ldr	r3, [r7, #20]
	}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3728      	adds	r7, #40	@ 0x28
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08c      	sub	sp, #48	@ 0x30
 800e2d8:	af04      	add	r7, sp, #16
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	603b      	str	r3, [r7, #0]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f001 fe57 	bl	800ff9c <pvPortMalloc>
 800e2ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00e      	beq.n	800e314 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2f6:	20a8      	movs	r0, #168	@ 0xa8
 800e2f8:	f001 fe50 	bl	800ff9c <pvPortMalloc>
 800e2fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d003      	beq.n	800e30c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	697a      	ldr	r2, [r7, #20]
 800e308:	631a      	str	r2, [r3, #48]	@ 0x30
 800e30a:	e005      	b.n	800e318 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e30c:	6978      	ldr	r0, [r7, #20]
 800e30e:	f001 ff13 	bl	8010138 <vPortFree>
 800e312:	e001      	b.n	800e318 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e314:	2300      	movs	r3, #0
 800e316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d017      	beq.n	800e34e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e326:	88fa      	ldrh	r2, [r7, #6]
 800e328:	2300      	movs	r3, #0
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	9302      	str	r3, [sp, #8]
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	68b9      	ldr	r1, [r7, #8]
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f80f 	bl	800e360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e342:	69f8      	ldr	r0, [r7, #28]
 800e344:	f000 f8b4 	bl	800e4b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e348:	2301      	movs	r3, #1
 800e34a:	61bb      	str	r3, [r7, #24]
 800e34c:	e002      	b.n	800e354 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e34e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e354:	69bb      	ldr	r3, [r7, #24]
	}
 800e356:	4618      	mov	r0, r3
 800e358:	3720      	adds	r7, #32
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e370:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	461a      	mov	r2, r3
 800e378:	21a5      	movs	r1, #165	@ 0xa5
 800e37a:	f002 fd15 	bl	8010da8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e388:	3b01      	subs	r3, #1
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4413      	add	r3, r2
 800e38e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	f023 0307 	bic.w	r3, r3, #7
 800e396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	f003 0307 	and.w	r3, r3, #7
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00b      	beq.n	800e3ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	617b      	str	r3, [r7, #20]
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop
 800e3b8:	e7fd      	b.n	800e3b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d01f      	beq.n	800e400 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61fb      	str	r3, [r7, #28]
 800e3c4:	e012      	b.n	800e3ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e3c6:	68ba      	ldr	r2, [r7, #8]
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	7819      	ldrb	r1, [r3, #0]
 800e3ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	3334      	adds	r3, #52	@ 0x34
 800e3d6:	460a      	mov	r2, r1
 800e3d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	4413      	add	r3, r2
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	61fb      	str	r3, [r7, #28]
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2b0f      	cmp	r3, #15
 800e3f0:	d9e9      	bls.n	800e3c6 <prvInitialiseNewTask+0x66>
 800e3f2:	e000      	b.n	800e3f6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e3f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e3fe:	e003      	b.n	800e408 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e402:	2200      	movs	r2, #0
 800e404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	2b37      	cmp	r3, #55	@ 0x37
 800e40c:	d901      	bls.n	800e412 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e40e:	2337      	movs	r3, #55	@ 0x37
 800e410:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e416:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e41c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e420:	2200      	movs	r2, #0
 800e422:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e426:	3304      	adds	r3, #4
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff f965 	bl	800d6f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	3318      	adds	r3, #24
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff f960 	bl	800d6f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e43c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e440:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e446:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e44c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e450:	2200      	movs	r2, #0
 800e452:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	3354      	adds	r3, #84	@ 0x54
 800e462:	224c      	movs	r2, #76	@ 0x4c
 800e464:	2100      	movs	r1, #0
 800e466:	4618      	mov	r0, r3
 800e468:	f002 fc9e 	bl	8010da8 <memset>
 800e46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46e:	4a0d      	ldr	r2, [pc, #52]	@ (800e4a4 <prvInitialiseNewTask+0x144>)
 800e470:	659a      	str	r2, [r3, #88]	@ 0x58
 800e472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e474:	4a0c      	ldr	r2, [pc, #48]	@ (800e4a8 <prvInitialiseNewTask+0x148>)
 800e476:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47a:	4a0c      	ldr	r2, [pc, #48]	@ (800e4ac <prvInitialiseNewTask+0x14c>)
 800e47c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	69b8      	ldr	r0, [r7, #24]
 800e484:	f001 fb36 	bl	800faf4 <pxPortInitialiseStack>
 800e488:	4602      	mov	r2, r0
 800e48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e49a:	bf00      	nop
 800e49c:	3720      	adds	r7, #32
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	2000588c 	.word	0x2000588c
 800e4a8:	200058f4 	.word	0x200058f4
 800e4ac:	2000595c 	.word	0x2000595c

0800e4b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e4b8:	f001 fc4e 	bl	800fd58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	@ (800e574 <prvAddNewTaskToReadyList+0xc4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e574 <prvAddNewTaskToReadyList+0xc4>)
 800e4c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e4c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d109      	bne.n	800e4e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e4ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e4d4:	4b27      	ldr	r3, [pc, #156]	@ (800e574 <prvAddNewTaskToReadyList+0xc4>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d110      	bne.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e4dc:	f000 fd28 	bl	800ef30 <prvInitialiseTaskLists>
 800e4e0:	e00d      	b.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e4e2:	4b26      	ldr	r3, [pc, #152]	@ (800e57c <prvAddNewTaskToReadyList+0xcc>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d109      	bne.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4ea:	4b23      	ldr	r3, [pc, #140]	@ (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d802      	bhi.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e4f8:	4a1f      	ldr	r2, [pc, #124]	@ (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e4fe:	4b20      	ldr	r3, [pc, #128]	@ (800e580 <prvAddNewTaskToReadyList+0xd0>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3301      	adds	r3, #1
 800e504:	4a1e      	ldr	r2, [pc, #120]	@ (800e580 <prvAddNewTaskToReadyList+0xd0>)
 800e506:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e508:	4b1d      	ldr	r3, [pc, #116]	@ (800e580 <prvAddNewTaskToReadyList+0xd0>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e514:	4b1b      	ldr	r3, [pc, #108]	@ (800e584 <prvAddNewTaskToReadyList+0xd4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d903      	bls.n	800e524 <prvAddNewTaskToReadyList+0x74>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e520:	4a18      	ldr	r2, [pc, #96]	@ (800e584 <prvAddNewTaskToReadyList+0xd4>)
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e528:	4613      	mov	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4a15      	ldr	r2, [pc, #84]	@ (800e588 <prvAddNewTaskToReadyList+0xd8>)
 800e532:	441a      	add	r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7ff f8e9 	bl	800d712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e540:	f001 fc3c 	bl	800fdbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e544:	4b0d      	ldr	r3, [pc, #52]	@ (800e57c <prvAddNewTaskToReadyList+0xcc>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00e      	beq.n	800e56a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e54c:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e556:	429a      	cmp	r2, r3
 800e558:	d207      	bcs.n	800e56a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e55a:	4b0c      	ldr	r3, [pc, #48]	@ (800e58c <prvAddNewTaskToReadyList+0xdc>)
 800e55c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e56a:	bf00      	nop
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20001b0c 	.word	0x20001b0c
 800e578:	20001638 	.word	0x20001638
 800e57c:	20001b18 	.word	0x20001b18
 800e580:	20001b28 	.word	0x20001b28
 800e584:	20001b14 	.word	0x20001b14
 800e588:	2000163c 	.word	0x2000163c
 800e58c:	e000ed04 	.word	0xe000ed04

0800e590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e598:	2300      	movs	r3, #0
 800e59a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d018      	beq.n	800e5d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e5a2:	4b14      	ldr	r3, [pc, #80]	@ (800e5f4 <vTaskDelay+0x64>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <vTaskDelay+0x32>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	60bb      	str	r3, [r7, #8]
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	e7fd      	b.n	800e5be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e5c2:	f000 f88b 	bl	800e6dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 fee5 	bl	800f398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e5ce:	f000 f893 	bl	800e6f8 <xTaskResumeAll>
 800e5d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d107      	bne.n	800e5ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e5da:	4b07      	ldr	r3, [pc, #28]	@ (800e5f8 <vTaskDelay+0x68>)
 800e5dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20001b34 	.word	0x20001b34
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08a      	sub	sp, #40	@ 0x28
 800e600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e602:	2300      	movs	r3, #0
 800e604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e60a:	463a      	mov	r2, r7
 800e60c:	1d39      	adds	r1, r7, #4
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff f81c 	bl	800d650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	9202      	str	r2, [sp, #8]
 800e620:	9301      	str	r3, [sp, #4]
 800e622:	2300      	movs	r3, #0
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	2300      	movs	r3, #0
 800e628:	460a      	mov	r2, r1
 800e62a:	4924      	ldr	r1, [pc, #144]	@ (800e6bc <vTaskStartScheduler+0xc0>)
 800e62c:	4824      	ldr	r0, [pc, #144]	@ (800e6c0 <vTaskStartScheduler+0xc4>)
 800e62e:	f7ff fdf1 	bl	800e214 <xTaskCreateStatic>
 800e632:	4603      	mov	r3, r0
 800e634:	4a23      	ldr	r2, [pc, #140]	@ (800e6c4 <vTaskStartScheduler+0xc8>)
 800e636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e638:	4b22      	ldr	r3, [pc, #136]	@ (800e6c4 <vTaskStartScheduler+0xc8>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e640:	2301      	movs	r3, #1
 800e642:	617b      	str	r3, [r7, #20]
 800e644:	e001      	b.n	800e64a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d102      	bne.n	800e656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e650:	f000 fef6 	bl	800f440 <xTimerCreateTimerTask>
 800e654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d11b      	bne.n	800e694 <vTaskStartScheduler+0x98>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	613b      	str	r3, [r7, #16]
}
 800e66e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e670:	4b15      	ldr	r3, [pc, #84]	@ (800e6c8 <vTaskStartScheduler+0xcc>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3354      	adds	r3, #84	@ 0x54
 800e676:	4a15      	ldr	r2, [pc, #84]	@ (800e6cc <vTaskStartScheduler+0xd0>)
 800e678:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e67a:	4b15      	ldr	r3, [pc, #84]	@ (800e6d0 <vTaskStartScheduler+0xd4>)
 800e67c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e680:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e682:	4b14      	ldr	r3, [pc, #80]	@ (800e6d4 <vTaskStartScheduler+0xd8>)
 800e684:	2201      	movs	r2, #1
 800e686:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e688:	4b13      	ldr	r3, [pc, #76]	@ (800e6d8 <vTaskStartScheduler+0xdc>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e68e:	f001 fabf 	bl	800fc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e692:	e00f      	b.n	800e6b4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e69a:	d10b      	bne.n	800e6b4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	60fb      	str	r3, [r7, #12]
}
 800e6ae:	bf00      	nop
 800e6b0:	bf00      	nop
 800e6b2:	e7fd      	b.n	800e6b0 <vTaskStartScheduler+0xb4>
}
 800e6b4:	bf00      	nop
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	080138bc 	.word	0x080138bc
 800e6c0:	0800ef01 	.word	0x0800ef01
 800e6c4:	20001b30 	.word	0x20001b30
 800e6c8:	20001638 	.word	0x20001638
 800e6cc:	20000054 	.word	0x20000054
 800e6d0:	20001b2c 	.word	0x20001b2c
 800e6d4:	20001b18 	.word	0x20001b18
 800e6d8:	20001b10 	.word	0x20001b10

0800e6dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e6dc:	b480      	push	{r7}
 800e6de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e6e0:	4b04      	ldr	r3, [pc, #16]	@ (800e6f4 <vTaskSuspendAll+0x18>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	4a03      	ldr	r2, [pc, #12]	@ (800e6f4 <vTaskSuspendAll+0x18>)
 800e6e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e6ea:	bf00      	nop
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr
 800e6f4:	20001b34 	.word	0x20001b34

0800e6f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e702:	2300      	movs	r3, #0
 800e704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e706:	4b42      	ldr	r3, [pc, #264]	@ (800e810 <xTaskResumeAll+0x118>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10b      	bne.n	800e726 <xTaskResumeAll+0x2e>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	603b      	str	r3, [r7, #0]
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	e7fd      	b.n	800e722 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e726:	f001 fb17 	bl	800fd58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e72a:	4b39      	ldr	r3, [pc, #228]	@ (800e810 <xTaskResumeAll+0x118>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3b01      	subs	r3, #1
 800e730:	4a37      	ldr	r2, [pc, #220]	@ (800e810 <xTaskResumeAll+0x118>)
 800e732:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e734:	4b36      	ldr	r3, [pc, #216]	@ (800e810 <xTaskResumeAll+0x118>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d162      	bne.n	800e802 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e73c:	4b35      	ldr	r3, [pc, #212]	@ (800e814 <xTaskResumeAll+0x11c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d05e      	beq.n	800e802 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e744:	e02f      	b.n	800e7a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e746:	4b34      	ldr	r3, [pc, #208]	@ (800e818 <xTaskResumeAll+0x120>)
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3318      	adds	r3, #24
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff f83a 	bl	800d7cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3304      	adds	r3, #4
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7ff f835 	bl	800d7cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e766:	4b2d      	ldr	r3, [pc, #180]	@ (800e81c <xTaskResumeAll+0x124>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d903      	bls.n	800e776 <xTaskResumeAll+0x7e>
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e772:	4a2a      	ldr	r2, [pc, #168]	@ (800e81c <xTaskResumeAll+0x124>)
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e77a:	4613      	mov	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4413      	add	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4a27      	ldr	r2, [pc, #156]	@ (800e820 <xTaskResumeAll+0x128>)
 800e784:	441a      	add	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3304      	adds	r3, #4
 800e78a:	4619      	mov	r1, r3
 800e78c:	4610      	mov	r0, r2
 800e78e:	f7fe ffc0 	bl	800d712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e796:	4b23      	ldr	r3, [pc, #140]	@ (800e824 <xTaskResumeAll+0x12c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d302      	bcc.n	800e7a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e7a0:	4b21      	ldr	r3, [pc, #132]	@ (800e828 <xTaskResumeAll+0x130>)
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e818 <xTaskResumeAll+0x120>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1cb      	bne.n	800e746 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e7b4:	f000 fc60 	bl	800f078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e7b8:	4b1c      	ldr	r3, [pc, #112]	@ (800e82c <xTaskResumeAll+0x134>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d010      	beq.n	800e7e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e7c4:	f000 f940 	bl	800ea48 <xTaskIncrementTick>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e7ce:	4b16      	ldr	r3, [pc, #88]	@ (800e828 <xTaskResumeAll+0x130>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1f1      	bne.n	800e7c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e7e0:	4b12      	ldr	r3, [pc, #72]	@ (800e82c <xTaskResumeAll+0x134>)
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e7e6:	4b10      	ldr	r3, [pc, #64]	@ (800e828 <xTaskResumeAll+0x130>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800e830 <xTaskResumeAll+0x138>)
 800e7f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e802:	f001 fadb 	bl	800fdbc <vPortExitCritical>

	return xAlreadyYielded;
 800e806:	68bb      	ldr	r3, [r7, #8]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20001b34 	.word	0x20001b34
 800e814:	20001b0c 	.word	0x20001b0c
 800e818:	20001acc 	.word	0x20001acc
 800e81c:	20001b14 	.word	0x20001b14
 800e820:	2000163c 	.word	0x2000163c
 800e824:	20001638 	.word	0x20001638
 800e828:	20001b20 	.word	0x20001b20
 800e82c:	20001b1c 	.word	0x20001b1c
 800e830:	e000ed04 	.word	0xe000ed04

0800e834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e83a:	4b05      	ldr	r3, [pc, #20]	@ (800e850 <xTaskGetTickCount+0x1c>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e840:	687b      	ldr	r3, [r7, #4]
}
 800e842:	4618      	mov	r0, r3
 800e844:	370c      	adds	r7, #12
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	20001b10 	.word	0x20001b10

0800e854 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <pcTaskGetName+0x14>
 800e862:	4b0e      	ldr	r3, [pc, #56]	@ (800e89c <pcTaskGetName+0x48>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	e000      	b.n	800e86a <pcTaskGetName+0x16>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10b      	bne.n	800e88a <pcTaskGetName+0x36>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	60bb      	str	r3, [r7, #8]
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	e7fd      	b.n	800e886 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3334      	adds	r3, #52	@ 0x34
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	20001638 	.word	0x20001638

0800e8a0 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b08b      	sub	sp, #44	@ 0x2c
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d05b      	beq.n	800e96e <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	61bb      	str	r3, [r7, #24]
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	605a      	str	r2, [r3, #4]
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d104      	bne.n	800e8da <prvSearchForNameWithinSingleList+0x3a>
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	605a      	str	r2, [r3, #4]
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	605a      	str	r2, [r3, #4]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d104      	bne.n	800e906 <prvSearchForNameWithinSingleList+0x66>
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	605a      	str	r2, [r3, #4]
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e90e:	2300      	movs	r3, #0
 800e910:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e912:	2300      	movs	r3, #0
 800e914:	623b      	str	r3, [r7, #32]
 800e916:	e01c      	b.n	800e952 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	4413      	add	r3, r2
 800e91e:	3334      	adds	r3, #52	@ 0x34
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	4413      	add	r3, r2
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	7afa      	ldrb	r2, [r7, #11]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d002      	beq.n	800e938 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e932:	2301      	movs	r3, #1
 800e934:	61fb      	str	r3, [r7, #28]
 800e936:	e006      	b.n	800e946 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e938:	7afb      	ldrb	r3, [r7, #11]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d103      	bne.n	800e946 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e942:	2301      	movs	r3, #1
 800e944:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d106      	bne.n	800e95a <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	3301      	adds	r3, #1
 800e950:	623b      	str	r3, [r7, #32]
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	2b0f      	cmp	r3, #15
 800e956:	d9df      	bls.n	800e918 <prvSearchForNameWithinSingleList+0x78>
 800e958:	e000      	b.n	800e95c <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e95a:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d104      	bne.n	800e96c <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	429a      	cmp	r2, r3
 800e968:	d1bb      	bne.n	800e8e2 <prvSearchForNameWithinSingleList+0x42>
 800e96a:	e000      	b.n	800e96e <prvSearchForNameWithinSingleList+0xce>
					break;
 800e96c:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e970:	4618      	mov	r0, r3
 800e972:	372c      	adds	r7, #44	@ 0x2c
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e984:	2338      	movs	r3, #56	@ 0x38
 800e986:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7f1 fc71 	bl	8000270 <strlen>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b0f      	cmp	r3, #15
 800e992:	d90b      	bls.n	800e9ac <xTaskGetHandle+0x30>
	__asm volatile
 800e994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	60fb      	str	r3, [r7, #12]
}
 800e9a6:	bf00      	nop
 800e9a8:	bf00      	nop
 800e9aa:	e7fd      	b.n	800e9a8 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e9ac:	f7ff fe96 	bl	800e6dc <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4a1c      	ldr	r2, [pc, #112]	@ (800ea34 <xTaskGetHandle+0xb8>)
 800e9c2:	4413      	add	r3, r2
 800e9c4:	6879      	ldr	r1, [r7, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff ff6a 	bl	800e8a0 <prvSearchForNameWithinSingleList>
 800e9cc:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d103      	bne.n	800e9dc <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1ea      	bne.n	800e9b0 <xTaskGetHandle+0x34>
 800e9da:	e000      	b.n	800e9de <xTaskGetHandle+0x62>
					break;
 800e9dc:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e9e4:	4b14      	ldr	r3, [pc, #80]	@ (800ea38 <xTaskGetHandle+0xbc>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7ff ff58 	bl	800e8a0 <prvSearchForNameWithinSingleList>
 800e9f0:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d106      	bne.n	800ea06 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e9f8:	4b10      	ldr	r3, [pc, #64]	@ (800ea3c <xTaskGetHandle+0xc0>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff ff4e 	bl	800e8a0 <prvSearchForNameWithinSingleList>
 800ea04:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d104      	bne.n	800ea16 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800ea0c:	6879      	ldr	r1, [r7, #4]
 800ea0e:	480c      	ldr	r0, [pc, #48]	@ (800ea40 <xTaskGetHandle+0xc4>)
 800ea10:	f7ff ff46 	bl	800e8a0 <prvSearchForNameWithinSingleList>
 800ea14:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ea1c:	6879      	ldr	r1, [r7, #4]
 800ea1e:	4809      	ldr	r0, [pc, #36]	@ (800ea44 <xTaskGetHandle+0xc8>)
 800ea20:	f7ff ff3e 	bl	800e8a0 <prvSearchForNameWithinSingleList>
 800ea24:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ea26:	f7ff fe67 	bl	800e6f8 <xTaskResumeAll>

		return pxTCB;
 800ea2a:	693b      	ldr	r3, [r7, #16]
	}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	2000163c 	.word	0x2000163c
 800ea38:	20001ac4 	.word	0x20001ac4
 800ea3c:	20001ac8 	.word	0x20001ac8
 800ea40:	20001af8 	.word	0x20001af8
 800ea44:	20001ae0 	.word	0x20001ae0

0800ea48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea52:	4b4f      	ldr	r3, [pc, #316]	@ (800eb90 <xTaskIncrementTick+0x148>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f040 8090 	bne.w	800eb7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea5c:	4b4d      	ldr	r3, [pc, #308]	@ (800eb94 <xTaskIncrementTick+0x14c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3301      	adds	r3, #1
 800ea62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea64:	4a4b      	ldr	r2, [pc, #300]	@ (800eb94 <xTaskIncrementTick+0x14c>)
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d121      	bne.n	800eab4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea70:	4b49      	ldr	r3, [pc, #292]	@ (800eb98 <xTaskIncrementTick+0x150>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00b      	beq.n	800ea92 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	603b      	str	r3, [r7, #0]
}
 800ea8c:	bf00      	nop
 800ea8e:	bf00      	nop
 800ea90:	e7fd      	b.n	800ea8e <xTaskIncrementTick+0x46>
 800ea92:	4b41      	ldr	r3, [pc, #260]	@ (800eb98 <xTaskIncrementTick+0x150>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	4b40      	ldr	r3, [pc, #256]	@ (800eb9c <xTaskIncrementTick+0x154>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a3e      	ldr	r2, [pc, #248]	@ (800eb98 <xTaskIncrementTick+0x150>)
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	4a3e      	ldr	r2, [pc, #248]	@ (800eb9c <xTaskIncrementTick+0x154>)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6013      	str	r3, [r2, #0]
 800eaa6:	4b3e      	ldr	r3, [pc, #248]	@ (800eba0 <xTaskIncrementTick+0x158>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	4a3c      	ldr	r2, [pc, #240]	@ (800eba0 <xTaskIncrementTick+0x158>)
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	f000 fae2 	bl	800f078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eab4:	4b3b      	ldr	r3, [pc, #236]	@ (800eba4 <xTaskIncrementTick+0x15c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	693a      	ldr	r2, [r7, #16]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d349      	bcc.n	800eb52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eabe:	4b36      	ldr	r3, [pc, #216]	@ (800eb98 <xTaskIncrementTick+0x150>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d104      	bne.n	800ead2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eac8:	4b36      	ldr	r3, [pc, #216]	@ (800eba4 <xTaskIncrementTick+0x15c>)
 800eaca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eace:	601a      	str	r2, [r3, #0]
					break;
 800ead0:	e03f      	b.n	800eb52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead2:	4b31      	ldr	r3, [pc, #196]	@ (800eb98 <xTaskIncrementTick+0x150>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d203      	bcs.n	800eaf2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaea:	4a2e      	ldr	r2, [pc, #184]	@ (800eba4 <xTaskIncrementTick+0x15c>)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaf0:	e02f      	b.n	800eb52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fe68 	bl	800d7cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d004      	beq.n	800eb0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	3318      	adds	r3, #24
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe fe5f 	bl	800d7cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb12:	4b25      	ldr	r3, [pc, #148]	@ (800eba8 <xTaskIncrementTick+0x160>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d903      	bls.n	800eb22 <xTaskIncrementTick+0xda>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1e:	4a22      	ldr	r2, [pc, #136]	@ (800eba8 <xTaskIncrementTick+0x160>)
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb26:	4613      	mov	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4a1f      	ldr	r2, [pc, #124]	@ (800ebac <xTaskIncrementTick+0x164>)
 800eb30:	441a      	add	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f7fe fdea 	bl	800d712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb42:	4b1b      	ldr	r3, [pc, #108]	@ (800ebb0 <xTaskIncrementTick+0x168>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d3b8      	bcc.n	800eabe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb50:	e7b5      	b.n	800eabe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb52:	4b17      	ldr	r3, [pc, #92]	@ (800ebb0 <xTaskIncrementTick+0x168>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb58:	4914      	ldr	r1, [pc, #80]	@ (800ebac <xTaskIncrementTick+0x164>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	440b      	add	r3, r1
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d901      	bls.n	800eb6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eb6e:	4b11      	ldr	r3, [pc, #68]	@ (800ebb4 <xTaskIncrementTick+0x16c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d007      	beq.n	800eb86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800eb76:	2301      	movs	r3, #1
 800eb78:	617b      	str	r3, [r7, #20]
 800eb7a:	e004      	b.n	800eb86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eb7c:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb8 <xTaskIncrementTick+0x170>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	3301      	adds	r3, #1
 800eb82:	4a0d      	ldr	r2, [pc, #52]	@ (800ebb8 <xTaskIncrementTick+0x170>)
 800eb84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eb86:	697b      	ldr	r3, [r7, #20]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3718      	adds	r7, #24
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20001b34 	.word	0x20001b34
 800eb94:	20001b10 	.word	0x20001b10
 800eb98:	20001ac4 	.word	0x20001ac4
 800eb9c:	20001ac8 	.word	0x20001ac8
 800eba0:	20001b24 	.word	0x20001b24
 800eba4:	20001b2c 	.word	0x20001b2c
 800eba8:	20001b14 	.word	0x20001b14
 800ebac:	2000163c 	.word	0x2000163c
 800ebb0:	20001638 	.word	0x20001638
 800ebb4:	20001b20 	.word	0x20001b20
 800ebb8:	20001b1c 	.word	0x20001b1c

0800ebbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ebc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ec70 <vTaskSwitchContext+0xb4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ebca:	4b2a      	ldr	r3, [pc, #168]	@ (800ec74 <vTaskSwitchContext+0xb8>)
 800ebcc:	2201      	movs	r2, #1
 800ebce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ebd0:	e047      	b.n	800ec62 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ebd2:	4b28      	ldr	r3, [pc, #160]	@ (800ec74 <vTaskSwitchContext+0xb8>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd8:	4b27      	ldr	r3, [pc, #156]	@ (800ec78 <vTaskSwitchContext+0xbc>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	60fb      	str	r3, [r7, #12]
 800ebde:	e011      	b.n	800ec04 <vTaskSwitchContext+0x48>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10b      	bne.n	800ebfe <vTaskSwitchContext+0x42>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	607b      	str	r3, [r7, #4]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <vTaskSwitchContext+0x3e>
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	491d      	ldr	r1, [pc, #116]	@ (800ec7c <vTaskSwitchContext+0xc0>)
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	440b      	add	r3, r1
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d0e3      	beq.n	800ebe0 <vTaskSwitchContext+0x24>
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a16      	ldr	r2, [pc, #88]	@ (800ec7c <vTaskSwitchContext+0xc0>)
 800ec24:	4413      	add	r3, r2
 800ec26:	60bb      	str	r3, [r7, #8]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	605a      	str	r2, [r3, #4]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	3308      	adds	r3, #8
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d104      	bne.n	800ec48 <vTaskSwitchContext+0x8c>
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	605a      	str	r2, [r3, #4]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ec80 <vTaskSwitchContext+0xc4>)
 800ec50:	6013      	str	r3, [r2, #0]
 800ec52:	4a09      	ldr	r2, [pc, #36]	@ (800ec78 <vTaskSwitchContext+0xbc>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec58:	4b09      	ldr	r3, [pc, #36]	@ (800ec80 <vTaskSwitchContext+0xc4>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3354      	adds	r3, #84	@ 0x54
 800ec5e:	4a09      	ldr	r2, [pc, #36]	@ (800ec84 <vTaskSwitchContext+0xc8>)
 800ec60:	6013      	str	r3, [r2, #0]
}
 800ec62:	bf00      	nop
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	20001b34 	.word	0x20001b34
 800ec74:	20001b20 	.word	0x20001b20
 800ec78:	20001b14 	.word	0x20001b14
 800ec7c:	2000163c 	.word	0x2000163c
 800ec80:	20001638 	.word	0x20001638
 800ec84:	20000054 	.word	0x20000054

0800ec88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10b      	bne.n	800ecb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	60fb      	str	r3, [r7, #12]
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	e7fd      	b.n	800ecac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecb0:	4b07      	ldr	r3, [pc, #28]	@ (800ecd0 <vTaskPlaceOnEventList+0x48>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3318      	adds	r3, #24
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7fe fd4e 	bl	800d75a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	6838      	ldr	r0, [r7, #0]
 800ecc2:	f000 fb69 	bl	800f398 <prvAddCurrentTaskToDelayedList>
}
 800ecc6:	bf00      	nop
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20001638 	.word	0x20001638

0800ecd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10b      	bne.n	800ecfe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	617b      	str	r3, [r7, #20]
}
 800ecf8:	bf00      	nop
 800ecfa:	bf00      	nop
 800ecfc:	e7fd      	b.n	800ecfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ed28 <vTaskPlaceOnEventListRestricted+0x54>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3318      	adds	r3, #24
 800ed04:	4619      	mov	r1, r3
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f7fe fd03 	bl	800d712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ed12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ed18:	6879      	ldr	r1, [r7, #4]
 800ed1a:	68b8      	ldr	r0, [r7, #8]
 800ed1c:	f000 fb3c 	bl	800f398 <prvAddCurrentTaskToDelayedList>
	}
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	20001638 	.word	0x20001638

0800ed2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10b      	bne.n	800ed5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	60fb      	str	r3, [r7, #12]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3318      	adds	r3, #24
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe fd34 	bl	800d7cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed64:	4b1d      	ldr	r3, [pc, #116]	@ (800eddc <xTaskRemoveFromEventList+0xb0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d11d      	bne.n	800eda8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fe fd2b 	bl	800d7cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed7a:	4b19      	ldr	r3, [pc, #100]	@ (800ede0 <xTaskRemoveFromEventList+0xb4>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d903      	bls.n	800ed8a <xTaskRemoveFromEventList+0x5e>
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed86:	4a16      	ldr	r2, [pc, #88]	@ (800ede0 <xTaskRemoveFromEventList+0xb4>)
 800ed88:	6013      	str	r3, [r2, #0]
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8e:	4613      	mov	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	4413      	add	r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	4a13      	ldr	r2, [pc, #76]	@ (800ede4 <xTaskRemoveFromEventList+0xb8>)
 800ed98:	441a      	add	r2, r3
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4610      	mov	r0, r2
 800eda2:	f7fe fcb6 	bl	800d712 <vListInsertEnd>
 800eda6:	e005      	b.n	800edb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	3318      	adds	r3, #24
 800edac:	4619      	mov	r1, r3
 800edae:	480e      	ldr	r0, [pc, #56]	@ (800ede8 <xTaskRemoveFromEventList+0xbc>)
 800edb0:	f7fe fcaf 	bl	800d712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb8:	4b0c      	ldr	r3, [pc, #48]	@ (800edec <xTaskRemoveFromEventList+0xc0>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d905      	bls.n	800edce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edc2:	2301      	movs	r3, #1
 800edc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edc6:	4b0a      	ldr	r3, [pc, #40]	@ (800edf0 <xTaskRemoveFromEventList+0xc4>)
 800edc8:	2201      	movs	r2, #1
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	e001      	b.n	800edd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edd2:	697b      	ldr	r3, [r7, #20]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20001b34 	.word	0x20001b34
 800ede0:	20001b14 	.word	0x20001b14
 800ede4:	2000163c 	.word	0x2000163c
 800ede8:	20001acc 	.word	0x20001acc
 800edec:	20001638 	.word	0x20001638
 800edf0:	20001b20 	.word	0x20001b20

0800edf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edfc:	4b06      	ldr	r3, [pc, #24]	@ (800ee18 <vTaskInternalSetTimeOutState+0x24>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee04:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <vTaskInternalSetTimeOutState+0x28>)
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	605a      	str	r2, [r3, #4]
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	20001b24 	.word	0x20001b24
 800ee1c:	20001b10 	.word	0x20001b10

0800ee20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10b      	bne.n	800ee48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	613b      	str	r3, [r7, #16]
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	e7fd      	b.n	800ee44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10b      	bne.n	800ee66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	60fb      	str	r3, [r7, #12]
}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	e7fd      	b.n	800ee62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ee66:	f000 ff77 	bl	800fd58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee6a:	4b1d      	ldr	r3, [pc, #116]	@ (800eee0 <xTaskCheckForTimeOut+0xc0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	69ba      	ldr	r2, [r7, #24]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee82:	d102      	bne.n	800ee8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e023      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b15      	ldr	r3, [pc, #84]	@ (800eee4 <xTaskCheckForTimeOut+0xc4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d007      	beq.n	800eea6 <xTaskCheckForTimeOut+0x86>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d302      	bcc.n	800eea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eea0:	2301      	movs	r3, #1
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	e015      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	697a      	ldr	r2, [r7, #20]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d20b      	bcs.n	800eec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	1ad2      	subs	r2, r2, r3
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff ff99 	bl	800edf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eec2:	2300      	movs	r3, #0
 800eec4:	61fb      	str	r3, [r7, #28]
 800eec6:	e004      	b.n	800eed2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eece:	2301      	movs	r3, #1
 800eed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eed2:	f000 ff73 	bl	800fdbc <vPortExitCritical>

	return xReturn;
 800eed6:	69fb      	ldr	r3, [r7, #28]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3720      	adds	r7, #32
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20001b10 	.word	0x20001b10
 800eee4:	20001b24 	.word	0x20001b24

0800eee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eee8:	b480      	push	{r7}
 800eeea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eeec:	4b03      	ldr	r3, [pc, #12]	@ (800eefc <vTaskMissedYield+0x14>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
}
 800eef2:	bf00      	nop
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	20001b20 	.word	0x20001b20

0800ef00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ef08:	f000 f852 	bl	800efb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef0c:	4b06      	ldr	r3, [pc, #24]	@ (800ef28 <prvIdleTask+0x28>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d9f9      	bls.n	800ef08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef14:	4b05      	ldr	r3, [pc, #20]	@ (800ef2c <prvIdleTask+0x2c>)
 800ef16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef24:	e7f0      	b.n	800ef08 <prvIdleTask+0x8>
 800ef26:	bf00      	nop
 800ef28:	2000163c 	.word	0x2000163c
 800ef2c:	e000ed04 	.word	0xe000ed04

0800ef30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef36:	2300      	movs	r3, #0
 800ef38:	607b      	str	r3, [r7, #4]
 800ef3a:	e00c      	b.n	800ef56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4a12      	ldr	r2, [pc, #72]	@ (800ef90 <prvInitialiseTaskLists+0x60>)
 800ef48:	4413      	add	r3, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fbb4 	bl	800d6b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3301      	adds	r3, #1
 800ef54:	607b      	str	r3, [r7, #4]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b37      	cmp	r3, #55	@ 0x37
 800ef5a:	d9ef      	bls.n	800ef3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef5c:	480d      	ldr	r0, [pc, #52]	@ (800ef94 <prvInitialiseTaskLists+0x64>)
 800ef5e:	f7fe fbab 	bl	800d6b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef62:	480d      	ldr	r0, [pc, #52]	@ (800ef98 <prvInitialiseTaskLists+0x68>)
 800ef64:	f7fe fba8 	bl	800d6b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef68:	480c      	ldr	r0, [pc, #48]	@ (800ef9c <prvInitialiseTaskLists+0x6c>)
 800ef6a:	f7fe fba5 	bl	800d6b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef6e:	480c      	ldr	r0, [pc, #48]	@ (800efa0 <prvInitialiseTaskLists+0x70>)
 800ef70:	f7fe fba2 	bl	800d6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef74:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <prvInitialiseTaskLists+0x74>)
 800ef76:	f7fe fb9f 	bl	800d6b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef7a:	4b0b      	ldr	r3, [pc, #44]	@ (800efa8 <prvInitialiseTaskLists+0x78>)
 800ef7c:	4a05      	ldr	r2, [pc, #20]	@ (800ef94 <prvInitialiseTaskLists+0x64>)
 800ef7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef80:	4b0a      	ldr	r3, [pc, #40]	@ (800efac <prvInitialiseTaskLists+0x7c>)
 800ef82:	4a05      	ldr	r2, [pc, #20]	@ (800ef98 <prvInitialiseTaskLists+0x68>)
 800ef84:	601a      	str	r2, [r3, #0]
}
 800ef86:	bf00      	nop
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	2000163c 	.word	0x2000163c
 800ef94:	20001a9c 	.word	0x20001a9c
 800ef98:	20001ab0 	.word	0x20001ab0
 800ef9c:	20001acc 	.word	0x20001acc
 800efa0:	20001ae0 	.word	0x20001ae0
 800efa4:	20001af8 	.word	0x20001af8
 800efa8:	20001ac4 	.word	0x20001ac4
 800efac:	20001ac8 	.word	0x20001ac8

0800efb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efb6:	e019      	b.n	800efec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efb8:	f000 fece 	bl	800fd58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efbc:	4b10      	ldr	r3, [pc, #64]	@ (800f000 <prvCheckTasksWaitingTermination+0x50>)
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe fbff 	bl	800d7cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efce:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <prvCheckTasksWaitingTermination+0x54>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3b01      	subs	r3, #1
 800efd4:	4a0b      	ldr	r2, [pc, #44]	@ (800f004 <prvCheckTasksWaitingTermination+0x54>)
 800efd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efd8:	4b0b      	ldr	r3, [pc, #44]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3b01      	subs	r3, #1
 800efde:	4a0a      	ldr	r2, [pc, #40]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efe2:	f000 feeb 	bl	800fdbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f810 	bl	800f00c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efec:	4b06      	ldr	r3, [pc, #24]	@ (800f008 <prvCheckTasksWaitingTermination+0x58>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1e1      	bne.n	800efb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20001ae0 	.word	0x20001ae0
 800f004:	20001b0c 	.word	0x20001b0c
 800f008:	20001af4 	.word	0x20001af4

0800f00c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3354      	adds	r3, #84	@ 0x54
 800f018:	4618      	mov	r0, r3
 800f01a:	f001 feff 	bl	8010e1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f024:	2b00      	cmp	r3, #0
 800f026:	d108      	bne.n	800f03a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f02c:	4618      	mov	r0, r3
 800f02e:	f001 f883 	bl	8010138 <vPortFree>
				vPortFree( pxTCB );
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f001 f880 	bl	8010138 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f038:	e019      	b.n	800f06e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f040:	2b01      	cmp	r3, #1
 800f042:	d103      	bne.n	800f04c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f001 f877 	bl	8010138 <vPortFree>
	}
 800f04a:	e010      	b.n	800f06e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f052:	2b02      	cmp	r3, #2
 800f054:	d00b      	beq.n	800f06e <prvDeleteTCB+0x62>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	60fb      	str	r3, [r7, #12]
}
 800f068:	bf00      	nop
 800f06a:	bf00      	nop
 800f06c:	e7fd      	b.n	800f06a <prvDeleteTCB+0x5e>
	}
 800f06e:	bf00      	nop
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
	...

0800f078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f07e:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b0 <prvResetNextTaskUnblockTime+0x38>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d104      	bne.n	800f092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f088:	4b0a      	ldr	r3, [pc, #40]	@ (800f0b4 <prvResetNextTaskUnblockTime+0x3c>)
 800f08a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f08e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f090:	e008      	b.n	800f0a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f092:	4b07      	ldr	r3, [pc, #28]	@ (800f0b0 <prvResetNextTaskUnblockTime+0x38>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	4a04      	ldr	r2, [pc, #16]	@ (800f0b4 <prvResetNextTaskUnblockTime+0x3c>)
 800f0a2:	6013      	str	r3, [r2, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	20001ac4 	.word	0x20001ac4
 800f0b4:	20001b2c 	.word	0x20001b2c

0800f0b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0be:	4b0b      	ldr	r3, [pc, #44]	@ (800f0ec <xTaskGetSchedulerState+0x34>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	607b      	str	r3, [r7, #4]
 800f0ca:	e008      	b.n	800f0de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0cc:	4b08      	ldr	r3, [pc, #32]	@ (800f0f0 <xTaskGetSchedulerState+0x38>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	607b      	str	r3, [r7, #4]
 800f0d8:	e001      	b.n	800f0de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0de:	687b      	ldr	r3, [r7, #4]
	}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	370c      	adds	r7, #12
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	20001b18 	.word	0x20001b18
 800f0f0:	20001b34 	.word	0x20001b34

0800f0f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f100:	2300      	movs	r3, #0
 800f102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d058      	beq.n	800f1bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f10a:	4b2f      	ldr	r3, [pc, #188]	@ (800f1c8 <xTaskPriorityDisinherit+0xd4>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	429a      	cmp	r2, r3
 800f112:	d00b      	beq.n	800f12c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f118:	f383 8811 	msr	BASEPRI, r3
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	60fb      	str	r3, [r7, #12]
}
 800f126:	bf00      	nop
 800f128:	bf00      	nop
 800f12a:	e7fd      	b.n	800f128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f130:	2b00      	cmp	r3, #0
 800f132:	d10b      	bne.n	800f14c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	60bb      	str	r3, [r7, #8]
}
 800f146:	bf00      	nop
 800f148:	bf00      	nop
 800f14a:	e7fd      	b.n	800f148 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f150:	1e5a      	subs	r2, r3, #1
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f15e:	429a      	cmp	r2, r3
 800f160:	d02c      	beq.n	800f1bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f166:	2b00      	cmp	r3, #0
 800f168:	d128      	bne.n	800f1bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fe fb2c 	bl	800d7cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f180:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f18c:	4b0f      	ldr	r3, [pc, #60]	@ (800f1cc <xTaskPriorityDisinherit+0xd8>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d903      	bls.n	800f19c <xTaskPriorityDisinherit+0xa8>
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f198:	4a0c      	ldr	r2, [pc, #48]	@ (800f1cc <xTaskPriorityDisinherit+0xd8>)
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	4413      	add	r3, r2
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4a09      	ldr	r2, [pc, #36]	@ (800f1d0 <xTaskPriorityDisinherit+0xdc>)
 800f1aa:	441a      	add	r2, r3
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f7fe faad 	bl	800d712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1bc:	697b      	ldr	r3, [r7, #20]
	}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3718      	adds	r7, #24
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20001638 	.word	0x20001638
 800f1cc:	20001b14 	.word	0x20001b14
 800f1d0:	2000163c 	.word	0x2000163c

0800f1d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f1de:	f000 fdbb 	bl	800fd58 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f1e2:	4b20      	ldr	r3, [pc, #128]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d113      	bne.n	800f216 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00b      	beq.n	800f216 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1fe:	2101      	movs	r1, #1
 800f200:	6838      	ldr	r0, [r7, #0]
 800f202:	f000 f8c9 	bl	800f398 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f206:	4b18      	ldr	r3, [pc, #96]	@ (800f268 <ulTaskNotifyTake+0x94>)
 800f208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f216:	f000 fdd1 	bl	800fdbc <vPortExitCritical>

		taskENTER_CRITICAL();
 800f21a:	f000 fd9d 	bl	800fd58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f21e:	4b11      	ldr	r3, [pc, #68]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f226:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00e      	beq.n	800f24c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f234:	4b0b      	ldr	r3, [pc, #44]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2200      	movs	r2, #0
 800f23a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f23e:	e005      	b.n	800f24c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f240:	4b08      	ldr	r3, [pc, #32]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	3a01      	subs	r2, #1
 800f248:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f24c:	4b05      	ldr	r3, [pc, #20]	@ (800f264 <ulTaskNotifyTake+0x90>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f256:	f000 fdb1 	bl	800fdbc <vPortExitCritical>

		return ulReturn;
 800f25a:	68fb      	ldr	r3, [r7, #12]
	}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	20001638 	.word	0x20001638
 800f268:	e000ed04 	.word	0xe000ed04

0800f26c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08a      	sub	sp, #40	@ 0x28
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10b      	bne.n	800f294 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	61bb      	str	r3, [r7, #24]
}
 800f28e:	bf00      	nop
 800f290:	bf00      	nop
 800f292:	e7fd      	b.n	800f290 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f294:	f000 fe40 	bl	800ff18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800f29c:	f3ef 8211 	mrs	r2, BASEPRI
 800f2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	617a      	str	r2, [r7, #20]
 800f2b2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f2b4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2b6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ba:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f2be:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	2202      	movs	r2, #2
 800f2c4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f2d6:	7ffb      	ldrb	r3, [r7, #31]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d147      	bne.n	800f36c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00b      	beq.n	800f2fc <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e8:	f383 8811 	msr	BASEPRI, r3
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	60fb      	str	r3, [r7, #12]
}
 800f2f6:	bf00      	nop
 800f2f8:	bf00      	nop
 800f2fa:	e7fd      	b.n	800f2f8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2fc:	4b20      	ldr	r3, [pc, #128]	@ (800f380 <vTaskNotifyGiveFromISR+0x114>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d11d      	bne.n	800f340 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f306:	3304      	adds	r3, #4
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fe fa5f 	bl	800d7cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f312:	4b1c      	ldr	r3, [pc, #112]	@ (800f384 <vTaskNotifyGiveFromISR+0x118>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	429a      	cmp	r2, r3
 800f318:	d903      	bls.n	800f322 <vTaskNotifyGiveFromISR+0xb6>
 800f31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f31e:	4a19      	ldr	r2, [pc, #100]	@ (800f384 <vTaskNotifyGiveFromISR+0x118>)
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f326:	4613      	mov	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4a16      	ldr	r2, [pc, #88]	@ (800f388 <vTaskNotifyGiveFromISR+0x11c>)
 800f330:	441a      	add	r2, r3
 800f332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f334:	3304      	adds	r3, #4
 800f336:	4619      	mov	r1, r3
 800f338:	4610      	mov	r0, r2
 800f33a:	f7fe f9ea 	bl	800d712 <vListInsertEnd>
 800f33e:	e005      	b.n	800f34c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f342:	3318      	adds	r3, #24
 800f344:	4619      	mov	r1, r3
 800f346:	4811      	ldr	r0, [pc, #68]	@ (800f38c <vTaskNotifyGiveFromISR+0x120>)
 800f348:	f7fe f9e3 	bl	800d712 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f350:	4b0f      	ldr	r3, [pc, #60]	@ (800f390 <vTaskNotifyGiveFromISR+0x124>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f356:	429a      	cmp	r2, r3
 800f358:	d908      	bls.n	800f36c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d002      	beq.n	800f366 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	2201      	movs	r2, #1
 800f364:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f366:	4b0b      	ldr	r3, [pc, #44]	@ (800f394 <vTaskNotifyGiveFromISR+0x128>)
 800f368:	2201      	movs	r2, #1
 800f36a:	601a      	str	r2, [r3, #0]
 800f36c:	6a3b      	ldr	r3, [r7, #32]
 800f36e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f383 8811 	msr	BASEPRI, r3
}
 800f376:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800f378:	bf00      	nop
 800f37a:	3728      	adds	r7, #40	@ 0x28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20001b34 	.word	0x20001b34
 800f384:	20001b14 	.word	0x20001b14
 800f388:	2000163c 	.word	0x2000163c
 800f38c:	20001acc 	.word	0x20001acc
 800f390:	20001638 	.word	0x20001638
 800f394:	20001b20 	.word	0x20001b20

0800f398 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3a2:	4b21      	ldr	r3, [pc, #132]	@ (800f428 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3a8:	4b20      	ldr	r3, [pc, #128]	@ (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fa0c 	bl	800d7cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3ba:	d10a      	bne.n	800f3d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d007      	beq.n	800f3d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4819      	ldr	r0, [pc, #100]	@ (800f430 <prvAddCurrentTaskToDelayedList+0x98>)
 800f3cc:	f7fe f9a1 	bl	800d712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3d0:	e026      	b.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3da:	4b14      	ldr	r3, [pc, #80]	@ (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d209      	bcs.n	800f3fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3ea:	4b12      	ldr	r3, [pc, #72]	@ (800f434 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	f7fe f9af 	bl	800d75a <vListInsert>
}
 800f3fc:	e010      	b.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f438 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	4b0a      	ldr	r3, [pc, #40]	@ (800f42c <prvAddCurrentTaskToDelayedList+0x94>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3304      	adds	r3, #4
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7fe f9a5 	bl	800d75a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f410:	4b0a      	ldr	r3, [pc, #40]	@ (800f43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	429a      	cmp	r2, r3
 800f418:	d202      	bcs.n	800f420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f41a:	4a08      	ldr	r2, [pc, #32]	@ (800f43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6013      	str	r3, [r2, #0]
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20001b10 	.word	0x20001b10
 800f42c:	20001638 	.word	0x20001638
 800f430:	20001af8 	.word	0x20001af8
 800f434:	20001ac8 	.word	0x20001ac8
 800f438:	20001ac4 	.word	0x20001ac4
 800f43c:	20001b2c 	.word	0x20001b2c

0800f440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	@ 0x28
 800f444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f44a:	f000 fb13 	bl	800fa74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f44e:	4b1d      	ldr	r3, [pc, #116]	@ (800f4c4 <xTimerCreateTimerTask+0x84>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d021      	beq.n	800f49a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f45e:	1d3a      	adds	r2, r7, #4
 800f460:	f107 0108 	add.w	r1, r7, #8
 800f464:	f107 030c 	add.w	r3, r7, #12
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fe f90b 	bl	800d684 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f46e:	6879      	ldr	r1, [r7, #4]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	9202      	str	r2, [sp, #8]
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	2302      	movs	r3, #2
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	2300      	movs	r3, #0
 800f47e:	460a      	mov	r2, r1
 800f480:	4911      	ldr	r1, [pc, #68]	@ (800f4c8 <xTimerCreateTimerTask+0x88>)
 800f482:	4812      	ldr	r0, [pc, #72]	@ (800f4cc <xTimerCreateTimerTask+0x8c>)
 800f484:	f7fe fec6 	bl	800e214 <xTaskCreateStatic>
 800f488:	4603      	mov	r3, r0
 800f48a:	4a11      	ldr	r2, [pc, #68]	@ (800f4d0 <xTimerCreateTimerTask+0x90>)
 800f48c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f48e:	4b10      	ldr	r3, [pc, #64]	@ (800f4d0 <xTimerCreateTimerTask+0x90>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f496:	2301      	movs	r3, #1
 800f498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10b      	bne.n	800f4b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	613b      	str	r3, [r7, #16]
}
 800f4b2:	bf00      	nop
 800f4b4:	bf00      	nop
 800f4b6:	e7fd      	b.n	800f4b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f4b8:	697b      	ldr	r3, [r7, #20]
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20001b68 	.word	0x20001b68
 800f4c8:	080138c4 	.word	0x080138c4
 800f4cc:	0800f60d 	.word	0x0800f60d
 800f4d0:	20001b6c 	.word	0x20001b6c

0800f4d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08a      	sub	sp, #40	@ 0x28
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10b      	bne.n	800f504 <xTimerGenericCommand+0x30>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	623b      	str	r3, [r7, #32]
}
 800f4fe:	bf00      	nop
 800f500:	bf00      	nop
 800f502:	e7fd      	b.n	800f500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f504:	4b19      	ldr	r3, [pc, #100]	@ (800f56c <xTimerGenericCommand+0x98>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d02a      	beq.n	800f562 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	2b05      	cmp	r3, #5
 800f51c:	dc18      	bgt.n	800f550 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f51e:	f7ff fdcb 	bl	800f0b8 <xTaskGetSchedulerState>
 800f522:	4603      	mov	r3, r0
 800f524:	2b02      	cmp	r3, #2
 800f526:	d109      	bne.n	800f53c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f528:	4b10      	ldr	r3, [pc, #64]	@ (800f56c <xTimerGenericCommand+0x98>)
 800f52a:	6818      	ldr	r0, [r3, #0]
 800f52c:	f107 0110 	add.w	r1, r7, #16
 800f530:	2300      	movs	r3, #0
 800f532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f534:	f7fe fa7e 	bl	800da34 <xQueueGenericSend>
 800f538:	6278      	str	r0, [r7, #36]	@ 0x24
 800f53a:	e012      	b.n	800f562 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f53c:	4b0b      	ldr	r3, [pc, #44]	@ (800f56c <xTimerGenericCommand+0x98>)
 800f53e:	6818      	ldr	r0, [r3, #0]
 800f540:	f107 0110 	add.w	r1, r7, #16
 800f544:	2300      	movs	r3, #0
 800f546:	2200      	movs	r2, #0
 800f548:	f7fe fa74 	bl	800da34 <xQueueGenericSend>
 800f54c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f54e:	e008      	b.n	800f562 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f550:	4b06      	ldr	r3, [pc, #24]	@ (800f56c <xTimerGenericCommand+0x98>)
 800f552:	6818      	ldr	r0, [r3, #0]
 800f554:	f107 0110 	add.w	r1, r7, #16
 800f558:	2300      	movs	r3, #0
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	f7fe fb6c 	bl	800dc38 <xQueueGenericSendFromISR>
 800f560:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f564:	4618      	mov	r0, r3
 800f566:	3728      	adds	r7, #40	@ 0x28
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	20001b68 	.word	0x20001b68

0800f570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b088      	sub	sp, #32
 800f574:	af02      	add	r7, sp, #8
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f57a:	4b23      	ldr	r3, [pc, #140]	@ (800f608 <prvProcessExpiredTimer+0x98>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	3304      	adds	r3, #4
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fe f91f 	bl	800d7cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f594:	f003 0304 	and.w	r3, r3, #4
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d023      	beq.n	800f5e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	699a      	ldr	r2, [r3, #24]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	18d1      	adds	r1, r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	6978      	ldr	r0, [r7, #20]
 800f5aa:	f000 f8d5 	bl	800f758 <prvInsertTimerInActiveList>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d020      	beq.n	800f5f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	2100      	movs	r1, #0
 800f5be:	6978      	ldr	r0, [r7, #20]
 800f5c0:	f7ff ff88 	bl	800f4d4 <xTimerGenericCommand>
 800f5c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d114      	bne.n	800f5f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	60fb      	str	r3, [r7, #12]
}
 800f5de:	bf00      	nop
 800f5e0:	bf00      	nop
 800f5e2:	e7fd      	b.n	800f5e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5ea:	f023 0301 	bic.w	r3, r3, #1
 800f5ee:	b2da      	uxtb	r2, r3
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	6978      	ldr	r0, [r7, #20]
 800f5fc:	4798      	blx	r3
}
 800f5fe:	bf00      	nop
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	20001b60 	.word	0x20001b60

0800f60c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f614:	f107 0308 	add.w	r3, r7, #8
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f859 	bl	800f6d0 <prvGetNextExpireTime>
 800f61e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	4619      	mov	r1, r3
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 f805 	bl	800f634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f62a:	f000 f8d7 	bl	800f7dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f62e:	bf00      	nop
 800f630:	e7f0      	b.n	800f614 <prvTimerTask+0x8>
	...

0800f634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f63e:	f7ff f84d 	bl	800e6dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	4618      	mov	r0, r3
 800f648:	f000 f866 	bl	800f718 <prvSampleTimeNow>
 800f64c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d130      	bne.n	800f6b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d10a      	bne.n	800f670 <prvProcessTimerOrBlockTask+0x3c>
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d806      	bhi.n	800f670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f662:	f7ff f849 	bl	800e6f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f666:	68f9      	ldr	r1, [r7, #12]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7ff ff81 	bl	800f570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f66e:	e024      	b.n	800f6ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d008      	beq.n	800f688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f676:	4b13      	ldr	r3, [pc, #76]	@ (800f6c4 <prvProcessTimerOrBlockTask+0x90>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d101      	bne.n	800f684 <prvProcessTimerOrBlockTask+0x50>
 800f680:	2301      	movs	r3, #1
 800f682:	e000      	b.n	800f686 <prvProcessTimerOrBlockTask+0x52>
 800f684:	2300      	movs	r3, #0
 800f686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f688:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c8 <prvProcessTimerOrBlockTask+0x94>)
 800f68a:	6818      	ldr	r0, [r3, #0]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	683a      	ldr	r2, [r7, #0]
 800f694:	4619      	mov	r1, r3
 800f696:	f7fe fd89 	bl	800e1ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f69a:	f7ff f82d 	bl	800e6f8 <xTaskResumeAll>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10a      	bne.n	800f6ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f6a4:	4b09      	ldr	r3, [pc, #36]	@ (800f6cc <prvProcessTimerOrBlockTask+0x98>)
 800f6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	f3bf 8f6f 	isb	sy
}
 800f6b4:	e001      	b.n	800f6ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6b6:	f7ff f81f 	bl	800e6f8 <xTaskResumeAll>
}
 800f6ba:	bf00      	nop
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	20001b64 	.word	0x20001b64
 800f6c8:	20001b68 	.word	0x20001b68
 800f6cc:	e000ed04 	.word	0xe000ed04

0800f6d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f714 <prvGetNextExpireTime+0x44>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <prvGetNextExpireTime+0x16>
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	e000      	b.n	800f6e8 <prvGetNextExpireTime+0x18>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d105      	bne.n	800f700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6f4:	4b07      	ldr	r3, [pc, #28]	@ (800f714 <prvGetNextExpireTime+0x44>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	60fb      	str	r3, [r7, #12]
 800f6fe:	e001      	b.n	800f704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f700:	2300      	movs	r3, #0
 800f702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f704:	68fb      	ldr	r3, [r7, #12]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	20001b60 	.word	0x20001b60

0800f718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f720:	f7ff f888 	bl	800e834 <xTaskGetTickCount>
 800f724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f726:	4b0b      	ldr	r3, [pc, #44]	@ (800f754 <prvSampleTimeNow+0x3c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d205      	bcs.n	800f73c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f730:	f000 f93a 	bl	800f9a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	601a      	str	r2, [r3, #0]
 800f73a:	e002      	b.n	800f742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f742:	4a04      	ldr	r2, [pc, #16]	@ (800f754 <prvSampleTimeNow+0x3c>)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f748:	68fb      	ldr	r3, [r7, #12]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20001b70 	.word	0x20001b70

0800f758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d812      	bhi.n	800f7a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	1ad2      	subs	r2, r2, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d302      	bcc.n	800f792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f78c:	2301      	movs	r3, #1
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e01b      	b.n	800f7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f792:	4b10      	ldr	r3, [pc, #64]	@ (800f7d4 <prvInsertTimerInActiveList+0x7c>)
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3304      	adds	r3, #4
 800f79a:	4619      	mov	r1, r3
 800f79c:	4610      	mov	r0, r2
 800f79e:	f7fd ffdc 	bl	800d75a <vListInsert>
 800f7a2:	e012      	b.n	800f7ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d206      	bcs.n	800f7ba <prvInsertTimerInActiveList+0x62>
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d302      	bcc.n	800f7ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	617b      	str	r3, [r7, #20]
 800f7b8:	e007      	b.n	800f7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7ba:	4b07      	ldr	r3, [pc, #28]	@ (800f7d8 <prvInsertTimerInActiveList+0x80>)
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	f7fd ffc8 	bl	800d75a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7ca:	697b      	ldr	r3, [r7, #20]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3718      	adds	r7, #24
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	20001b64 	.word	0x20001b64
 800f7d8:	20001b60 	.word	0x20001b60

0800f7dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08e      	sub	sp, #56	@ 0x38
 800f7e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7e2:	e0ce      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	da19      	bge.n	800f81e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7ea:	1d3b      	adds	r3, r7, #4
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d10b      	bne.n	800f80e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	61fb      	str	r3, [r7, #28]
}
 800f808:	bf00      	nop
 800f80a:	bf00      	nop
 800f80c:	e7fd      	b.n	800f80a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f814:	6850      	ldr	r0, [r2, #4]
 800f816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f818:	6892      	ldr	r2, [r2, #8]
 800f81a:	4611      	mov	r1, r2
 800f81c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	f2c0 80ae 	blt.w	800f982 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82c:	695b      	ldr	r3, [r3, #20]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d004      	beq.n	800f83c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f834:	3304      	adds	r3, #4
 800f836:	4618      	mov	r0, r3
 800f838:	f7fd ffc8 	bl	800d7cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f83c:	463b      	mov	r3, r7
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff ff6a 	bl	800f718 <prvSampleTimeNow>
 800f844:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b09      	cmp	r3, #9
 800f84a:	f200 8097 	bhi.w	800f97c <prvProcessReceivedCommands+0x1a0>
 800f84e:	a201      	add	r2, pc, #4	@ (adr r2, 800f854 <prvProcessReceivedCommands+0x78>)
 800f850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f854:	0800f87d 	.word	0x0800f87d
 800f858:	0800f87d 	.word	0x0800f87d
 800f85c:	0800f87d 	.word	0x0800f87d
 800f860:	0800f8f3 	.word	0x0800f8f3
 800f864:	0800f907 	.word	0x0800f907
 800f868:	0800f953 	.word	0x0800f953
 800f86c:	0800f87d 	.word	0x0800f87d
 800f870:	0800f87d 	.word	0x0800f87d
 800f874:	0800f8f3 	.word	0x0800f8f3
 800f878:	0800f907 	.word	0x0800f907
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f882:	f043 0301 	orr.w	r3, r3, #1
 800f886:	b2da      	uxtb	r2, r3
 800f888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f892:	699b      	ldr	r3, [r3, #24]
 800f894:	18d1      	adds	r1, r2, r3
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f89a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f89c:	f7ff ff5c 	bl	800f758 <prvInsertTimerInActiveList>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d06c      	beq.n	800f980 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8b4:	f003 0304 	and.w	r3, r3, #4
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d061      	beq.n	800f980 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	441a      	add	r2, r3
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ce:	f7ff fe01 	bl	800f4d4 <xTimerGenericCommand>
 800f8d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d152      	bne.n	800f980 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8de:	f383 8811 	msr	BASEPRI, r3
 800f8e2:	f3bf 8f6f 	isb	sy
 800f8e6:	f3bf 8f4f 	dsb	sy
 800f8ea:	61bb      	str	r3, [r7, #24]
}
 800f8ec:	bf00      	nop
 800f8ee:	bf00      	nop
 800f8f0:	e7fd      	b.n	800f8ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8f8:	f023 0301 	bic.w	r3, r3, #1
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f900:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f904:	e03d      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f90c:	f043 0301 	orr.w	r3, r3, #1
 800f910:	b2da      	uxtb	r2, r3
 800f912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f914:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10b      	bne.n	800f93e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92a:	f383 8811 	msr	BASEPRI, r3
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	617b      	str	r3, [r7, #20]
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	e7fd      	b.n	800f93a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f940:	699a      	ldr	r2, [r3, #24]
 800f942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f944:	18d1      	adds	r1, r2, r3
 800f946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f94c:	f7ff ff04 	bl	800f758 <prvInsertTimerInActiveList>
					break;
 800f950:	e017      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f958:	f003 0302 	and.w	r3, r3, #2
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d103      	bne.n	800f968 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f962:	f000 fbe9 	bl	8010138 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f966:	e00c      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f96e:	f023 0301 	bic.w	r3, r3, #1
 800f972:	b2da      	uxtb	r2, r3
 800f974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f97a:	e002      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f97c:	bf00      	nop
 800f97e:	e000      	b.n	800f982 <prvProcessReceivedCommands+0x1a6>
					break;
 800f980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f982:	4b08      	ldr	r3, [pc, #32]	@ (800f9a4 <prvProcessReceivedCommands+0x1c8>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	1d39      	adds	r1, r7, #4
 800f988:	2200      	movs	r2, #0
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fe f9f2 	bl	800dd74 <xQueueReceive>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	f47f af26 	bne.w	800f7e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f998:	bf00      	nop
 800f99a:	bf00      	nop
 800f99c:	3730      	adds	r7, #48	@ 0x30
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20001b68 	.word	0x20001b68

0800f9a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9ae:	e049      	b.n	800fa44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9b0:	4b2e      	ldr	r3, [pc, #184]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ba:	4b2c      	ldr	r3, [pc, #176]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fd feff 	bl	800d7cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9dc:	f003 0304 	and.w	r3, r3, #4
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d02f      	beq.n	800fa44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	699b      	ldr	r3, [r3, #24]
 800f9e8:	693a      	ldr	r2, [r7, #16]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d90e      	bls.n	800fa14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa02:	4b1a      	ldr	r3, [pc, #104]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7fd fea4 	bl	800d75a <vListInsert>
 800fa12:	e017      	b.n	800fa44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa14:	2300      	movs	r3, #0
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	693a      	ldr	r2, [r7, #16]
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	f7ff fd58 	bl	800f4d4 <xTimerGenericCommand>
 800fa24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10b      	bne.n	800fa44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fa2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa30:	f383 8811 	msr	BASEPRI, r3
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	603b      	str	r3, [r7, #0]
}
 800fa3e:	bf00      	nop
 800fa40:	bf00      	nop
 800fa42:	e7fd      	b.n	800fa40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa44:	4b09      	ldr	r3, [pc, #36]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1b0      	bne.n	800f9b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa4e:	4b07      	ldr	r3, [pc, #28]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa54:	4b06      	ldr	r3, [pc, #24]	@ (800fa70 <prvSwitchTimerLists+0xc8>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a04      	ldr	r2, [pc, #16]	@ (800fa6c <prvSwitchTimerLists+0xc4>)
 800fa5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa5c:	4a04      	ldr	r2, [pc, #16]	@ (800fa70 <prvSwitchTimerLists+0xc8>)
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	6013      	str	r3, [r2, #0]
}
 800fa62:	bf00      	nop
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20001b60 	.word	0x20001b60
 800fa70:	20001b64 	.word	0x20001b64

0800fa74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa7a:	f000 f96d 	bl	800fd58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa7e:	4b15      	ldr	r3, [pc, #84]	@ (800fad4 <prvCheckForValidListAndQueue+0x60>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d120      	bne.n	800fac8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa86:	4814      	ldr	r0, [pc, #80]	@ (800fad8 <prvCheckForValidListAndQueue+0x64>)
 800fa88:	f7fd fe16 	bl	800d6b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa8c:	4813      	ldr	r0, [pc, #76]	@ (800fadc <prvCheckForValidListAndQueue+0x68>)
 800fa8e:	f7fd fe13 	bl	800d6b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa92:	4b13      	ldr	r3, [pc, #76]	@ (800fae0 <prvCheckForValidListAndQueue+0x6c>)
 800fa94:	4a10      	ldr	r2, [pc, #64]	@ (800fad8 <prvCheckForValidListAndQueue+0x64>)
 800fa96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa98:	4b12      	ldr	r3, [pc, #72]	@ (800fae4 <prvCheckForValidListAndQueue+0x70>)
 800fa9a:	4a10      	ldr	r2, [pc, #64]	@ (800fadc <prvCheckForValidListAndQueue+0x68>)
 800fa9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	4b11      	ldr	r3, [pc, #68]	@ (800fae8 <prvCheckForValidListAndQueue+0x74>)
 800faa4:	4a11      	ldr	r2, [pc, #68]	@ (800faec <prvCheckForValidListAndQueue+0x78>)
 800faa6:	2110      	movs	r1, #16
 800faa8:	200a      	movs	r0, #10
 800faaa:	f7fd ff23 	bl	800d8f4 <xQueueGenericCreateStatic>
 800faae:	4603      	mov	r3, r0
 800fab0:	4a08      	ldr	r2, [pc, #32]	@ (800fad4 <prvCheckForValidListAndQueue+0x60>)
 800fab2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fab4:	4b07      	ldr	r3, [pc, #28]	@ (800fad4 <prvCheckForValidListAndQueue+0x60>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d005      	beq.n	800fac8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fabc:	4b05      	ldr	r3, [pc, #20]	@ (800fad4 <prvCheckForValidListAndQueue+0x60>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	490b      	ldr	r1, [pc, #44]	@ (800faf0 <prvCheckForValidListAndQueue+0x7c>)
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe fb48 	bl	800e158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fac8:	f000 f978 	bl	800fdbc <vPortExitCritical>
}
 800facc:	bf00      	nop
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	20001b68 	.word	0x20001b68
 800fad8:	20001b38 	.word	0x20001b38
 800fadc:	20001b4c 	.word	0x20001b4c
 800fae0:	20001b60 	.word	0x20001b60
 800fae4:	20001b64 	.word	0x20001b64
 800fae8:	20001c14 	.word	0x20001c14
 800faec:	20001b74 	.word	0x20001b74
 800faf0:	080138cc 	.word	0x080138cc

0800faf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800faf4:	b480      	push	{r7}
 800faf6:	b085      	sub	sp, #20
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3b04      	subs	r3, #4
 800fb04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3b04      	subs	r3, #4
 800fb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	f023 0201 	bic.w	r2, r3, #1
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3b04      	subs	r3, #4
 800fb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb24:	4a0c      	ldr	r2, [pc, #48]	@ (800fb58 <pxPortInitialiseStack+0x64>)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3b14      	subs	r3, #20
 800fb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	3b04      	subs	r3, #4
 800fb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f06f 0202 	mvn.w	r2, #2
 800fb42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3b20      	subs	r3, #32
 800fb48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3714      	adds	r7, #20
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	0800fb5d 	.word	0x0800fb5d

0800fb5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb66:	4b13      	ldr	r3, [pc, #76]	@ (800fbb4 <prvTaskExitError+0x58>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb6e:	d00b      	beq.n	800fb88 <prvTaskExitError+0x2c>
	__asm volatile
 800fb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	60fb      	str	r3, [r7, #12]
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	e7fd      	b.n	800fb84 <prvTaskExitError+0x28>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	60bb      	str	r3, [r7, #8]
}
 800fb9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb9c:	bf00      	nop
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d0fc      	beq.n	800fb9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	3714      	adds	r7, #20
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20000044 	.word	0x20000044
	...

0800fbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbc0:	4b07      	ldr	r3, [pc, #28]	@ (800fbe0 <pxCurrentTCBConst2>)
 800fbc2:	6819      	ldr	r1, [r3, #0]
 800fbc4:	6808      	ldr	r0, [r1, #0]
 800fbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbca:	f380 8809 	msr	PSP, r0
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f04f 0000 	mov.w	r0, #0
 800fbd6:	f380 8811 	msr	BASEPRI, r0
 800fbda:	4770      	bx	lr
 800fbdc:	f3af 8000 	nop.w

0800fbe0 <pxCurrentTCBConst2>:
 800fbe0:	20001638 	.word	0x20001638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbe4:	bf00      	nop
 800fbe6:	bf00      	nop

0800fbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbe8:	4808      	ldr	r0, [pc, #32]	@ (800fc0c <prvPortStartFirstTask+0x24>)
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	6800      	ldr	r0, [r0, #0]
 800fbee:	f380 8808 	msr	MSP, r0
 800fbf2:	f04f 0000 	mov.w	r0, #0
 800fbf6:	f380 8814 	msr	CONTROL, r0
 800fbfa:	b662      	cpsie	i
 800fbfc:	b661      	cpsie	f
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	df00      	svc	0
 800fc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc0a:	bf00      	nop
 800fc0c:	e000ed08 	.word	0xe000ed08

0800fc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc16:	4b47      	ldr	r3, [pc, #284]	@ (800fd34 <xPortStartScheduler+0x124>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a47      	ldr	r2, [pc, #284]	@ (800fd38 <xPortStartScheduler+0x128>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d10b      	bne.n	800fc38 <xPortStartScheduler+0x28>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	60fb      	str	r3, [r7, #12]
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	e7fd      	b.n	800fc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc38:	4b3e      	ldr	r3, [pc, #248]	@ (800fd34 <xPortStartScheduler+0x124>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd3c <xPortStartScheduler+0x12c>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d10b      	bne.n	800fc5a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	613b      	str	r3, [r7, #16]
}
 800fc54:	bf00      	nop
 800fc56:	bf00      	nop
 800fc58:	e7fd      	b.n	800fc56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc5a:	4b39      	ldr	r3, [pc, #228]	@ (800fd40 <xPortStartScheduler+0x130>)
 800fc5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	22ff      	movs	r2, #255	@ 0xff
 800fc6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc74:	78fb      	ldrb	r3, [r7, #3]
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	4b31      	ldr	r3, [pc, #196]	@ (800fd44 <xPortStartScheduler+0x134>)
 800fc80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc82:	4b31      	ldr	r3, [pc, #196]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fc84:	2207      	movs	r2, #7
 800fc86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc88:	e009      	b.n	800fc9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc8a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	4a2d      	ldr	r2, [pc, #180]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fc92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc94:	78fb      	ldrb	r3, [r7, #3]
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc9e:	78fb      	ldrb	r3, [r7, #3]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fca6:	2b80      	cmp	r3, #128	@ 0x80
 800fca8:	d0ef      	beq.n	800fc8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcaa:	4b27      	ldr	r3, [pc, #156]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f1c3 0307 	rsb	r3, r3, #7
 800fcb2:	2b04      	cmp	r3, #4
 800fcb4:	d00b      	beq.n	800fcce <xPortStartScheduler+0xbe>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	60bb      	str	r3, [r7, #8]
}
 800fcc8:	bf00      	nop
 800fcca:	bf00      	nop
 800fccc:	e7fd      	b.n	800fcca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcce:	4b1e      	ldr	r3, [pc, #120]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	021b      	lsls	r3, r3, #8
 800fcd4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fcd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fcd8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fce0:	4a19      	ldr	r2, [pc, #100]	@ (800fd48 <xPortStartScheduler+0x138>)
 800fce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcec:	4b17      	ldr	r3, [pc, #92]	@ (800fd4c <xPortStartScheduler+0x13c>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4a16      	ldr	r2, [pc, #88]	@ (800fd4c <xPortStartScheduler+0x13c>)
 800fcf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcf8:	4b14      	ldr	r3, [pc, #80]	@ (800fd4c <xPortStartScheduler+0x13c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a13      	ldr	r2, [pc, #76]	@ (800fd4c <xPortStartScheduler+0x13c>)
 800fcfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd04:	f000 f8da 	bl	800febc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd08:	4b11      	ldr	r3, [pc, #68]	@ (800fd50 <xPortStartScheduler+0x140>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd0e:	f000 f8f9 	bl	800ff04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd12:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <xPortStartScheduler+0x144>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a0f      	ldr	r2, [pc, #60]	@ (800fd54 <xPortStartScheduler+0x144>)
 800fd18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fd1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd1e:	f7ff ff63 	bl	800fbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd22:	f7fe ff4b 	bl	800ebbc <vTaskSwitchContext>
	prvTaskExitError();
 800fd26:	f7ff ff19 	bl	800fb5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	e000ed00 	.word	0xe000ed00
 800fd38:	410fc271 	.word	0x410fc271
 800fd3c:	410fc270 	.word	0x410fc270
 800fd40:	e000e400 	.word	0xe000e400
 800fd44:	20001c64 	.word	0x20001c64
 800fd48:	20001c68 	.word	0x20001c68
 800fd4c:	e000ed20 	.word	0xe000ed20
 800fd50:	20000044 	.word	0x20000044
 800fd54:	e000ef34 	.word	0xe000ef34

0800fd58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	607b      	str	r3, [r7, #4]
}
 800fd70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd72:	4b10      	ldr	r3, [pc, #64]	@ (800fdb4 <vPortEnterCritical+0x5c>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3301      	adds	r3, #1
 800fd78:	4a0e      	ldr	r2, [pc, #56]	@ (800fdb4 <vPortEnterCritical+0x5c>)
 800fd7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb4 <vPortEnterCritical+0x5c>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d110      	bne.n	800fda6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd84:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb8 <vPortEnterCritical+0x60>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00b      	beq.n	800fda6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	603b      	str	r3, [r7, #0]
}
 800fda0:	bf00      	nop
 800fda2:	bf00      	nop
 800fda4:	e7fd      	b.n	800fda2 <vPortEnterCritical+0x4a>
	}
}
 800fda6:	bf00      	nop
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	20000044 	.word	0x20000044
 800fdb8:	e000ed04 	.word	0xe000ed04

0800fdbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdc2:	4b12      	ldr	r3, [pc, #72]	@ (800fe0c <vPortExitCritical+0x50>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d10b      	bne.n	800fde2 <vPortExitCritical+0x26>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	607b      	str	r3, [r7, #4]
}
 800fddc:	bf00      	nop
 800fdde:	bf00      	nop
 800fde0:	e7fd      	b.n	800fdde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fde2:	4b0a      	ldr	r3, [pc, #40]	@ (800fe0c <vPortExitCritical+0x50>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	3b01      	subs	r3, #1
 800fde8:	4a08      	ldr	r2, [pc, #32]	@ (800fe0c <vPortExitCritical+0x50>)
 800fdea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdec:	4b07      	ldr	r3, [pc, #28]	@ (800fe0c <vPortExitCritical+0x50>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d105      	bne.n	800fe00 <vPortExitCritical+0x44>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	f383 8811 	msr	BASEPRI, r3
}
 800fdfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	20000044 	.word	0x20000044

0800fe10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe10:	f3ef 8009 	mrs	r0, PSP
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	4b15      	ldr	r3, [pc, #84]	@ (800fe70 <pxCurrentTCBConst>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	f01e 0f10 	tst.w	lr, #16
 800fe20:	bf08      	it	eq
 800fe22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2a:	6010      	str	r0, [r2, #0]
 800fe2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe34:	f380 8811 	msr	BASEPRI, r0
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f7fe febc 	bl	800ebbc <vTaskSwitchContext>
 800fe44:	f04f 0000 	mov.w	r0, #0
 800fe48:	f380 8811 	msr	BASEPRI, r0
 800fe4c:	bc09      	pop	{r0, r3}
 800fe4e:	6819      	ldr	r1, [r3, #0]
 800fe50:	6808      	ldr	r0, [r1, #0]
 800fe52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe56:	f01e 0f10 	tst.w	lr, #16
 800fe5a:	bf08      	it	eq
 800fe5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe60:	f380 8809 	msr	PSP, r0
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	f3af 8000 	nop.w

0800fe70 <pxCurrentTCBConst>:
 800fe70:	20001638 	.word	0x20001638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe74:	bf00      	nop
 800fe76:	bf00      	nop

0800fe78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe82:	f383 8811 	msr	BASEPRI, r3
 800fe86:	f3bf 8f6f 	isb	sy
 800fe8a:	f3bf 8f4f 	dsb	sy
 800fe8e:	607b      	str	r3, [r7, #4]
}
 800fe90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe92:	f7fe fdd9 	bl	800ea48 <xTaskIncrementTick>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d003      	beq.n	800fea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe9c:	4b06      	ldr	r3, [pc, #24]	@ (800feb8 <xPortSysTickHandler+0x40>)
 800fe9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	2300      	movs	r3, #0
 800fea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	f383 8811 	msr	BASEPRI, r3
}
 800feae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	e000ed04 	.word	0xe000ed04

0800febc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800febc:	b480      	push	{r7}
 800febe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fec0:	4b0b      	ldr	r3, [pc, #44]	@ (800fef0 <vPortSetupTimerInterrupt+0x34>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fec6:	4b0b      	ldr	r3, [pc, #44]	@ (800fef4 <vPortSetupTimerInterrupt+0x38>)
 800fec8:	2200      	movs	r2, #0
 800feca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fecc:	4b0a      	ldr	r3, [pc, #40]	@ (800fef8 <vPortSetupTimerInterrupt+0x3c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a0a      	ldr	r2, [pc, #40]	@ (800fefc <vPortSetupTimerInterrupt+0x40>)
 800fed2:	fba2 2303 	umull	r2, r3, r2, r3
 800fed6:	099b      	lsrs	r3, r3, #6
 800fed8:	4a09      	ldr	r2, [pc, #36]	@ (800ff00 <vPortSetupTimerInterrupt+0x44>)
 800feda:	3b01      	subs	r3, #1
 800fedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fede:	4b04      	ldr	r3, [pc, #16]	@ (800fef0 <vPortSetupTimerInterrupt+0x34>)
 800fee0:	2207      	movs	r2, #7
 800fee2:	601a      	str	r2, [r3, #0]
}
 800fee4:	bf00      	nop
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	e000e010 	.word	0xe000e010
 800fef4:	e000e018 	.word	0xe000e018
 800fef8:	20000038 	.word	0x20000038
 800fefc:	10624dd3 	.word	0x10624dd3
 800ff00:	e000e014 	.word	0xe000e014

0800ff04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ff14 <vPortEnableVFP+0x10>
 800ff08:	6801      	ldr	r1, [r0, #0]
 800ff0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ff0e:	6001      	str	r1, [r0, #0]
 800ff10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff12:	bf00      	nop
 800ff14:	e000ed88 	.word	0xe000ed88

0800ff18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff1e:	f3ef 8305 	mrs	r3, IPSR
 800ff22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b0f      	cmp	r3, #15
 800ff28:	d915      	bls.n	800ff56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff2a:	4a18      	ldr	r2, [pc, #96]	@ (800ff8c <vPortValidateInterruptPriority+0x74>)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4413      	add	r3, r2
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff34:	4b16      	ldr	r3, [pc, #88]	@ (800ff90 <vPortValidateInterruptPriority+0x78>)
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	7afa      	ldrb	r2, [r7, #11]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d20b      	bcs.n	800ff56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	607b      	str	r3, [r7, #4]
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	e7fd      	b.n	800ff52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff56:	4b0f      	ldr	r3, [pc, #60]	@ (800ff94 <vPortValidateInterruptPriority+0x7c>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff98 <vPortValidateInterruptPriority+0x80>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d90b      	bls.n	800ff7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	603b      	str	r3, [r7, #0]
}
 800ff78:	bf00      	nop
 800ff7a:	bf00      	nop
 800ff7c:	e7fd      	b.n	800ff7a <vPortValidateInterruptPriority+0x62>
	}
 800ff7e:	bf00      	nop
 800ff80:	3714      	adds	r7, #20
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	e000e3f0 	.word	0xe000e3f0
 800ff90:	20001c64 	.word	0x20001c64
 800ff94:	e000ed0c 	.word	0xe000ed0c
 800ff98:	20001c68 	.word	0x20001c68

0800ff9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08a      	sub	sp, #40	@ 0x28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffa8:	f7fe fb98 	bl	800e6dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffac:	4b5c      	ldr	r3, [pc, #368]	@ (8010120 <pvPortMalloc+0x184>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffb4:	f000 f924 	bl	8010200 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffb8:	4b5a      	ldr	r3, [pc, #360]	@ (8010124 <pvPortMalloc+0x188>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f040 8095 	bne.w	80100f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d01e      	beq.n	801000a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ffcc:	2208      	movs	r2, #8
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f003 0307 	and.w	r3, r3, #7
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d015      	beq.n	801000a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f023 0307 	bic.w	r3, r3, #7
 800ffe4:	3308      	adds	r3, #8
 800ffe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f003 0307 	and.w	r3, r3, #7
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00b      	beq.n	801000a <pvPortMalloc+0x6e>
	__asm volatile
 800fff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff6:	f383 8811 	msr	BASEPRI, r3
 800fffa:	f3bf 8f6f 	isb	sy
 800fffe:	f3bf 8f4f 	dsb	sy
 8010002:	617b      	str	r3, [r7, #20]
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop
 8010008:	e7fd      	b.n	8010006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d06f      	beq.n	80100f0 <pvPortMalloc+0x154>
 8010010:	4b45      	ldr	r3, [pc, #276]	@ (8010128 <pvPortMalloc+0x18c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	429a      	cmp	r2, r3
 8010018:	d86a      	bhi.n	80100f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801001a:	4b44      	ldr	r3, [pc, #272]	@ (801012c <pvPortMalloc+0x190>)
 801001c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801001e:	4b43      	ldr	r3, [pc, #268]	@ (801012c <pvPortMalloc+0x190>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010024:	e004      	b.n	8010030 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801002a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	429a      	cmp	r2, r3
 8010038:	d903      	bls.n	8010042 <pvPortMalloc+0xa6>
 801003a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1f1      	bne.n	8010026 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010042:	4b37      	ldr	r3, [pc, #220]	@ (8010120 <pvPortMalloc+0x184>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010048:	429a      	cmp	r2, r3
 801004a:	d051      	beq.n	80100f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801004c:	6a3b      	ldr	r3, [r7, #32]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2208      	movs	r2, #8
 8010052:	4413      	add	r3, r2
 8010054:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801005e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010060:	685a      	ldr	r2, [r3, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	1ad2      	subs	r2, r2, r3
 8010066:	2308      	movs	r3, #8
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	429a      	cmp	r2, r3
 801006c:	d920      	bls.n	80100b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801006e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4413      	add	r3, r2
 8010074:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	f003 0307 	and.w	r3, r3, #7
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00b      	beq.n	8010098 <pvPortMalloc+0xfc>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	613b      	str	r3, [r7, #16]
}
 8010092:	bf00      	nop
 8010094:	bf00      	nop
 8010096:	e7fd      	b.n	8010094 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009a:	685a      	ldr	r2, [r3, #4]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100aa:	69b8      	ldr	r0, [r7, #24]
 80100ac:	f000 f90a 	bl	80102c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100b0:	4b1d      	ldr	r3, [pc, #116]	@ (8010128 <pvPortMalloc+0x18c>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	4a1b      	ldr	r2, [pc, #108]	@ (8010128 <pvPortMalloc+0x18c>)
 80100bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100be:	4b1a      	ldr	r3, [pc, #104]	@ (8010128 <pvPortMalloc+0x18c>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	4b1b      	ldr	r3, [pc, #108]	@ (8010130 <pvPortMalloc+0x194>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d203      	bcs.n	80100d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100ca:	4b17      	ldr	r3, [pc, #92]	@ (8010128 <pvPortMalloc+0x18c>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4a18      	ldr	r2, [pc, #96]	@ (8010130 <pvPortMalloc+0x194>)
 80100d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	4b13      	ldr	r3, [pc, #76]	@ (8010124 <pvPortMalloc+0x188>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	431a      	orrs	r2, r3
 80100dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100e6:	4b13      	ldr	r3, [pc, #76]	@ (8010134 <pvPortMalloc+0x198>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3301      	adds	r3, #1
 80100ec:	4a11      	ldr	r2, [pc, #68]	@ (8010134 <pvPortMalloc+0x198>)
 80100ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100f0:	f7fe fb02 	bl	800e6f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	f003 0307 	and.w	r3, r3, #7
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00b      	beq.n	8010116 <pvPortMalloc+0x17a>
	__asm volatile
 80100fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	60fb      	str	r3, [r7, #12]
}
 8010110:	bf00      	nop
 8010112:	bf00      	nop
 8010114:	e7fd      	b.n	8010112 <pvPortMalloc+0x176>
	return pvReturn;
 8010116:	69fb      	ldr	r3, [r7, #28]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3728      	adds	r7, #40	@ 0x28
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	20005874 	.word	0x20005874
 8010124:	20005888 	.word	0x20005888
 8010128:	20005878 	.word	0x20005878
 801012c:	2000586c 	.word	0x2000586c
 8010130:	2000587c 	.word	0x2000587c
 8010134:	20005880 	.word	0x20005880

08010138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b086      	sub	sp, #24
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d04f      	beq.n	80101ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801014a:	2308      	movs	r3, #8
 801014c:	425b      	negs	r3, r3
 801014e:	697a      	ldr	r2, [r7, #20]
 8010150:	4413      	add	r3, r2
 8010152:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	685a      	ldr	r2, [r3, #4]
 801015c:	4b25      	ldr	r3, [pc, #148]	@ (80101f4 <vPortFree+0xbc>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4013      	ands	r3, r2
 8010162:	2b00      	cmp	r3, #0
 8010164:	d10b      	bne.n	801017e <vPortFree+0x46>
	__asm volatile
 8010166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801016a:	f383 8811 	msr	BASEPRI, r3
 801016e:	f3bf 8f6f 	isb	sy
 8010172:	f3bf 8f4f 	dsb	sy
 8010176:	60fb      	str	r3, [r7, #12]
}
 8010178:	bf00      	nop
 801017a:	bf00      	nop
 801017c:	e7fd      	b.n	801017a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00b      	beq.n	801019e <vPortFree+0x66>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	60bb      	str	r3, [r7, #8]
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	e7fd      	b.n	801019a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	4b14      	ldr	r3, [pc, #80]	@ (80101f4 <vPortFree+0xbc>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4013      	ands	r3, r2
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01e      	beq.n	80101ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d11a      	bne.n	80101ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	4b0e      	ldr	r3, [pc, #56]	@ (80101f4 <vPortFree+0xbc>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	43db      	mvns	r3, r3
 80101be:	401a      	ands	r2, r3
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101c4:	f7fe fa8a 	bl	800e6dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	4b0a      	ldr	r3, [pc, #40]	@ (80101f8 <vPortFree+0xc0>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4413      	add	r3, r2
 80101d2:	4a09      	ldr	r2, [pc, #36]	@ (80101f8 <vPortFree+0xc0>)
 80101d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101d6:	6938      	ldr	r0, [r7, #16]
 80101d8:	f000 f874 	bl	80102c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80101dc:	4b07      	ldr	r3, [pc, #28]	@ (80101fc <vPortFree+0xc4>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	3301      	adds	r3, #1
 80101e2:	4a06      	ldr	r2, [pc, #24]	@ (80101fc <vPortFree+0xc4>)
 80101e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101e6:	f7fe fa87 	bl	800e6f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101ea:	bf00      	nop
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	20005888 	.word	0x20005888
 80101f8:	20005878 	.word	0x20005878
 80101fc:	20005884 	.word	0x20005884

08010200 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010206:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801020a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801020c:	4b27      	ldr	r3, [pc, #156]	@ (80102ac <prvHeapInit+0xac>)
 801020e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f003 0307 	and.w	r3, r3, #7
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00c      	beq.n	8010234 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	3307      	adds	r3, #7
 801021e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f023 0307 	bic.w	r3, r3, #7
 8010226:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	4a1f      	ldr	r2, [pc, #124]	@ (80102ac <prvHeapInit+0xac>)
 8010230:	4413      	add	r3, r2
 8010232:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010238:	4a1d      	ldr	r2, [pc, #116]	@ (80102b0 <prvHeapInit+0xb0>)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801023e:	4b1c      	ldr	r3, [pc, #112]	@ (80102b0 <prvHeapInit+0xb0>)
 8010240:	2200      	movs	r2, #0
 8010242:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	4413      	add	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801024c:	2208      	movs	r2, #8
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	1a9b      	subs	r3, r3, r2
 8010252:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f023 0307 	bic.w	r3, r3, #7
 801025a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4a15      	ldr	r2, [pc, #84]	@ (80102b4 <prvHeapInit+0xb4>)
 8010260:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010262:	4b14      	ldr	r3, [pc, #80]	@ (80102b4 <prvHeapInit+0xb4>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2200      	movs	r2, #0
 8010268:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801026a:	4b12      	ldr	r3, [pc, #72]	@ (80102b4 <prvHeapInit+0xb4>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2200      	movs	r2, #0
 8010270:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	1ad2      	subs	r2, r2, r3
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010280:	4b0c      	ldr	r3, [pc, #48]	@ (80102b4 <prvHeapInit+0xb4>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	4a0a      	ldr	r2, [pc, #40]	@ (80102b8 <prvHeapInit+0xb8>)
 801028e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	4a09      	ldr	r2, [pc, #36]	@ (80102bc <prvHeapInit+0xbc>)
 8010296:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010298:	4b09      	ldr	r3, [pc, #36]	@ (80102c0 <prvHeapInit+0xc0>)
 801029a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801029e:	601a      	str	r2, [r3, #0]
}
 80102a0:	bf00      	nop
 80102a2:	3714      	adds	r7, #20
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	20001c6c 	.word	0x20001c6c
 80102b0:	2000586c 	.word	0x2000586c
 80102b4:	20005874 	.word	0x20005874
 80102b8:	2000587c 	.word	0x2000587c
 80102bc:	20005878 	.word	0x20005878
 80102c0:	20005888 	.word	0x20005888

080102c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102cc:	4b28      	ldr	r3, [pc, #160]	@ (8010370 <prvInsertBlockIntoFreeList+0xac>)
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	e002      	b.n	80102d8 <prvInsertBlockIntoFreeList+0x14>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	60fb      	str	r3, [r7, #12]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d8f7      	bhi.n	80102d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	4413      	add	r3, r2
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d108      	bne.n	8010306 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	441a      	add	r2, r3
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	441a      	add	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d118      	bne.n	801034c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	4b15      	ldr	r3, [pc, #84]	@ (8010374 <prvInsertBlockIntoFreeList+0xb0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d00d      	beq.n	8010342 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	441a      	add	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	601a      	str	r2, [r3, #0]
 8010340:	e008      	b.n	8010354 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010342:	4b0c      	ldr	r3, [pc, #48]	@ (8010374 <prvInsertBlockIntoFreeList+0xb0>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	e003      	b.n	8010354 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	429a      	cmp	r2, r3
 801035a:	d002      	beq.n	8010362 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010362:	bf00      	nop
 8010364:	3714      	adds	r7, #20
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	2000586c 	.word	0x2000586c
 8010374:	20005874 	.word	0x20005874

08010378 <__cvt>:
 8010378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801037c:	ec57 6b10 	vmov	r6, r7, d0
 8010380:	2f00      	cmp	r7, #0
 8010382:	460c      	mov	r4, r1
 8010384:	4619      	mov	r1, r3
 8010386:	463b      	mov	r3, r7
 8010388:	bfbb      	ittet	lt
 801038a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801038e:	461f      	movlt	r7, r3
 8010390:	2300      	movge	r3, #0
 8010392:	232d      	movlt	r3, #45	@ 0x2d
 8010394:	700b      	strb	r3, [r1, #0]
 8010396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010398:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801039c:	4691      	mov	r9, r2
 801039e:	f023 0820 	bic.w	r8, r3, #32
 80103a2:	bfbc      	itt	lt
 80103a4:	4632      	movlt	r2, r6
 80103a6:	4616      	movlt	r6, r2
 80103a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80103ac:	d005      	beq.n	80103ba <__cvt+0x42>
 80103ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80103b2:	d100      	bne.n	80103b6 <__cvt+0x3e>
 80103b4:	3401      	adds	r4, #1
 80103b6:	2102      	movs	r1, #2
 80103b8:	e000      	b.n	80103bc <__cvt+0x44>
 80103ba:	2103      	movs	r1, #3
 80103bc:	ab03      	add	r3, sp, #12
 80103be:	9301      	str	r3, [sp, #4]
 80103c0:	ab02      	add	r3, sp, #8
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	ec47 6b10 	vmov	d0, r6, r7
 80103c8:	4653      	mov	r3, sl
 80103ca:	4622      	mov	r2, r4
 80103cc:	f000 fe1c 	bl	8011008 <_dtoa_r>
 80103d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80103d4:	4605      	mov	r5, r0
 80103d6:	d119      	bne.n	801040c <__cvt+0x94>
 80103d8:	f019 0f01 	tst.w	r9, #1
 80103dc:	d00e      	beq.n	80103fc <__cvt+0x84>
 80103de:	eb00 0904 	add.w	r9, r0, r4
 80103e2:	2200      	movs	r2, #0
 80103e4:	2300      	movs	r3, #0
 80103e6:	4630      	mov	r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	f7f0 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80103ee:	b108      	cbz	r0, 80103f4 <__cvt+0x7c>
 80103f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80103f4:	2230      	movs	r2, #48	@ 0x30
 80103f6:	9b03      	ldr	r3, [sp, #12]
 80103f8:	454b      	cmp	r3, r9
 80103fa:	d31e      	bcc.n	801043a <__cvt+0xc2>
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010400:	1b5b      	subs	r3, r3, r5
 8010402:	4628      	mov	r0, r5
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	b004      	add	sp, #16
 8010408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801040c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010410:	eb00 0904 	add.w	r9, r0, r4
 8010414:	d1e5      	bne.n	80103e2 <__cvt+0x6a>
 8010416:	7803      	ldrb	r3, [r0, #0]
 8010418:	2b30      	cmp	r3, #48	@ 0x30
 801041a:	d10a      	bne.n	8010432 <__cvt+0xba>
 801041c:	2200      	movs	r2, #0
 801041e:	2300      	movs	r3, #0
 8010420:	4630      	mov	r0, r6
 8010422:	4639      	mov	r1, r7
 8010424:	f7f0 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8010428:	b918      	cbnz	r0, 8010432 <__cvt+0xba>
 801042a:	f1c4 0401 	rsb	r4, r4, #1
 801042e:	f8ca 4000 	str.w	r4, [sl]
 8010432:	f8da 3000 	ldr.w	r3, [sl]
 8010436:	4499      	add	r9, r3
 8010438:	e7d3      	b.n	80103e2 <__cvt+0x6a>
 801043a:	1c59      	adds	r1, r3, #1
 801043c:	9103      	str	r1, [sp, #12]
 801043e:	701a      	strb	r2, [r3, #0]
 8010440:	e7d9      	b.n	80103f6 <__cvt+0x7e>

08010442 <__exponent>:
 8010442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010444:	2900      	cmp	r1, #0
 8010446:	bfba      	itte	lt
 8010448:	4249      	neglt	r1, r1
 801044a:	232d      	movlt	r3, #45	@ 0x2d
 801044c:	232b      	movge	r3, #43	@ 0x2b
 801044e:	2909      	cmp	r1, #9
 8010450:	7002      	strb	r2, [r0, #0]
 8010452:	7043      	strb	r3, [r0, #1]
 8010454:	dd29      	ble.n	80104aa <__exponent+0x68>
 8010456:	f10d 0307 	add.w	r3, sp, #7
 801045a:	461d      	mov	r5, r3
 801045c:	270a      	movs	r7, #10
 801045e:	461a      	mov	r2, r3
 8010460:	fbb1 f6f7 	udiv	r6, r1, r7
 8010464:	fb07 1416 	mls	r4, r7, r6, r1
 8010468:	3430      	adds	r4, #48	@ 0x30
 801046a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801046e:	460c      	mov	r4, r1
 8010470:	2c63      	cmp	r4, #99	@ 0x63
 8010472:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010476:	4631      	mov	r1, r6
 8010478:	dcf1      	bgt.n	801045e <__exponent+0x1c>
 801047a:	3130      	adds	r1, #48	@ 0x30
 801047c:	1e94      	subs	r4, r2, #2
 801047e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010482:	1c41      	adds	r1, r0, #1
 8010484:	4623      	mov	r3, r4
 8010486:	42ab      	cmp	r3, r5
 8010488:	d30a      	bcc.n	80104a0 <__exponent+0x5e>
 801048a:	f10d 0309 	add.w	r3, sp, #9
 801048e:	1a9b      	subs	r3, r3, r2
 8010490:	42ac      	cmp	r4, r5
 8010492:	bf88      	it	hi
 8010494:	2300      	movhi	r3, #0
 8010496:	3302      	adds	r3, #2
 8010498:	4403      	add	r3, r0
 801049a:	1a18      	subs	r0, r3, r0
 801049c:	b003      	add	sp, #12
 801049e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80104a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80104a8:	e7ed      	b.n	8010486 <__exponent+0x44>
 80104aa:	2330      	movs	r3, #48	@ 0x30
 80104ac:	3130      	adds	r1, #48	@ 0x30
 80104ae:	7083      	strb	r3, [r0, #2]
 80104b0:	70c1      	strb	r1, [r0, #3]
 80104b2:	1d03      	adds	r3, r0, #4
 80104b4:	e7f1      	b.n	801049a <__exponent+0x58>
	...

080104b8 <_printf_float>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	b08d      	sub	sp, #52	@ 0x34
 80104be:	460c      	mov	r4, r1
 80104c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80104c4:	4616      	mov	r6, r2
 80104c6:	461f      	mov	r7, r3
 80104c8:	4605      	mov	r5, r0
 80104ca:	f000 fca3 	bl	8010e14 <_localeconv_r>
 80104ce:	6803      	ldr	r3, [r0, #0]
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ef fecc 	bl	8000270 <strlen>
 80104d8:	2300      	movs	r3, #0
 80104da:	930a      	str	r3, [sp, #40]	@ 0x28
 80104dc:	f8d8 3000 	ldr.w	r3, [r8]
 80104e0:	9005      	str	r0, [sp, #20]
 80104e2:	3307      	adds	r3, #7
 80104e4:	f023 0307 	bic.w	r3, r3, #7
 80104e8:	f103 0208 	add.w	r2, r3, #8
 80104ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80104f0:	f8d4 b000 	ldr.w	fp, [r4]
 80104f4:	f8c8 2000 	str.w	r2, [r8]
 80104f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010500:	9307      	str	r3, [sp, #28]
 8010502:	f8cd 8018 	str.w	r8, [sp, #24]
 8010506:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801050a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801050e:	4b9c      	ldr	r3, [pc, #624]	@ (8010780 <_printf_float+0x2c8>)
 8010510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010514:	f7f0 fb0a 	bl	8000b2c <__aeabi_dcmpun>
 8010518:	bb70      	cbnz	r0, 8010578 <_printf_float+0xc0>
 801051a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801051e:	4b98      	ldr	r3, [pc, #608]	@ (8010780 <_printf_float+0x2c8>)
 8010520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010524:	f7f0 fae4 	bl	8000af0 <__aeabi_dcmple>
 8010528:	bb30      	cbnz	r0, 8010578 <_printf_float+0xc0>
 801052a:	2200      	movs	r2, #0
 801052c:	2300      	movs	r3, #0
 801052e:	4640      	mov	r0, r8
 8010530:	4649      	mov	r1, r9
 8010532:	f7f0 fad3 	bl	8000adc <__aeabi_dcmplt>
 8010536:	b110      	cbz	r0, 801053e <_printf_float+0x86>
 8010538:	232d      	movs	r3, #45	@ 0x2d
 801053a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801053e:	4a91      	ldr	r2, [pc, #580]	@ (8010784 <_printf_float+0x2cc>)
 8010540:	4b91      	ldr	r3, [pc, #580]	@ (8010788 <_printf_float+0x2d0>)
 8010542:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010546:	bf8c      	ite	hi
 8010548:	4690      	movhi	r8, r2
 801054a:	4698      	movls	r8, r3
 801054c:	2303      	movs	r3, #3
 801054e:	6123      	str	r3, [r4, #16]
 8010550:	f02b 0304 	bic.w	r3, fp, #4
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	f04f 0900 	mov.w	r9, #0
 801055a:	9700      	str	r7, [sp, #0]
 801055c:	4633      	mov	r3, r6
 801055e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010560:	4621      	mov	r1, r4
 8010562:	4628      	mov	r0, r5
 8010564:	f000 f9d2 	bl	801090c <_printf_common>
 8010568:	3001      	adds	r0, #1
 801056a:	f040 808d 	bne.w	8010688 <_printf_float+0x1d0>
 801056e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010572:	b00d      	add	sp, #52	@ 0x34
 8010574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010578:	4642      	mov	r2, r8
 801057a:	464b      	mov	r3, r9
 801057c:	4640      	mov	r0, r8
 801057e:	4649      	mov	r1, r9
 8010580:	f7f0 fad4 	bl	8000b2c <__aeabi_dcmpun>
 8010584:	b140      	cbz	r0, 8010598 <_printf_float+0xe0>
 8010586:	464b      	mov	r3, r9
 8010588:	2b00      	cmp	r3, #0
 801058a:	bfbc      	itt	lt
 801058c:	232d      	movlt	r3, #45	@ 0x2d
 801058e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010592:	4a7e      	ldr	r2, [pc, #504]	@ (801078c <_printf_float+0x2d4>)
 8010594:	4b7e      	ldr	r3, [pc, #504]	@ (8010790 <_printf_float+0x2d8>)
 8010596:	e7d4      	b.n	8010542 <_printf_float+0x8a>
 8010598:	6863      	ldr	r3, [r4, #4]
 801059a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801059e:	9206      	str	r2, [sp, #24]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	d13b      	bne.n	801061c <_printf_float+0x164>
 80105a4:	2306      	movs	r3, #6
 80105a6:	6063      	str	r3, [r4, #4]
 80105a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80105ac:	2300      	movs	r3, #0
 80105ae:	6022      	str	r2, [r4, #0]
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80105b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80105b8:	ab09      	add	r3, sp, #36	@ 0x24
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	6861      	ldr	r1, [r4, #4]
 80105be:	ec49 8b10 	vmov	d0, r8, r9
 80105c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80105c6:	4628      	mov	r0, r5
 80105c8:	f7ff fed6 	bl	8010378 <__cvt>
 80105cc:	9b06      	ldr	r3, [sp, #24]
 80105ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80105d0:	2b47      	cmp	r3, #71	@ 0x47
 80105d2:	4680      	mov	r8, r0
 80105d4:	d129      	bne.n	801062a <_printf_float+0x172>
 80105d6:	1cc8      	adds	r0, r1, #3
 80105d8:	db02      	blt.n	80105e0 <_printf_float+0x128>
 80105da:	6863      	ldr	r3, [r4, #4]
 80105dc:	4299      	cmp	r1, r3
 80105de:	dd41      	ble.n	8010664 <_printf_float+0x1ac>
 80105e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80105e4:	fa5f fa8a 	uxtb.w	sl, sl
 80105e8:	3901      	subs	r1, #1
 80105ea:	4652      	mov	r2, sl
 80105ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80105f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80105f2:	f7ff ff26 	bl	8010442 <__exponent>
 80105f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105f8:	1813      	adds	r3, r2, r0
 80105fa:	2a01      	cmp	r2, #1
 80105fc:	4681      	mov	r9, r0
 80105fe:	6123      	str	r3, [r4, #16]
 8010600:	dc02      	bgt.n	8010608 <_printf_float+0x150>
 8010602:	6822      	ldr	r2, [r4, #0]
 8010604:	07d2      	lsls	r2, r2, #31
 8010606:	d501      	bpl.n	801060c <_printf_float+0x154>
 8010608:	3301      	adds	r3, #1
 801060a:	6123      	str	r3, [r4, #16]
 801060c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010610:	2b00      	cmp	r3, #0
 8010612:	d0a2      	beq.n	801055a <_printf_float+0xa2>
 8010614:	232d      	movs	r3, #45	@ 0x2d
 8010616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801061a:	e79e      	b.n	801055a <_printf_float+0xa2>
 801061c:	9a06      	ldr	r2, [sp, #24]
 801061e:	2a47      	cmp	r2, #71	@ 0x47
 8010620:	d1c2      	bne.n	80105a8 <_printf_float+0xf0>
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1c0      	bne.n	80105a8 <_printf_float+0xf0>
 8010626:	2301      	movs	r3, #1
 8010628:	e7bd      	b.n	80105a6 <_printf_float+0xee>
 801062a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801062e:	d9db      	bls.n	80105e8 <_printf_float+0x130>
 8010630:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010634:	d118      	bne.n	8010668 <_printf_float+0x1b0>
 8010636:	2900      	cmp	r1, #0
 8010638:	6863      	ldr	r3, [r4, #4]
 801063a:	dd0b      	ble.n	8010654 <_printf_float+0x19c>
 801063c:	6121      	str	r1, [r4, #16]
 801063e:	b913      	cbnz	r3, 8010646 <_printf_float+0x18e>
 8010640:	6822      	ldr	r2, [r4, #0]
 8010642:	07d0      	lsls	r0, r2, #31
 8010644:	d502      	bpl.n	801064c <_printf_float+0x194>
 8010646:	3301      	adds	r3, #1
 8010648:	440b      	add	r3, r1
 801064a:	6123      	str	r3, [r4, #16]
 801064c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801064e:	f04f 0900 	mov.w	r9, #0
 8010652:	e7db      	b.n	801060c <_printf_float+0x154>
 8010654:	b913      	cbnz	r3, 801065c <_printf_float+0x1a4>
 8010656:	6822      	ldr	r2, [r4, #0]
 8010658:	07d2      	lsls	r2, r2, #31
 801065a:	d501      	bpl.n	8010660 <_printf_float+0x1a8>
 801065c:	3302      	adds	r3, #2
 801065e:	e7f4      	b.n	801064a <_printf_float+0x192>
 8010660:	2301      	movs	r3, #1
 8010662:	e7f2      	b.n	801064a <_printf_float+0x192>
 8010664:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801066a:	4299      	cmp	r1, r3
 801066c:	db05      	blt.n	801067a <_printf_float+0x1c2>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	6121      	str	r1, [r4, #16]
 8010672:	07d8      	lsls	r0, r3, #31
 8010674:	d5ea      	bpl.n	801064c <_printf_float+0x194>
 8010676:	1c4b      	adds	r3, r1, #1
 8010678:	e7e7      	b.n	801064a <_printf_float+0x192>
 801067a:	2900      	cmp	r1, #0
 801067c:	bfd4      	ite	le
 801067e:	f1c1 0202 	rsble	r2, r1, #2
 8010682:	2201      	movgt	r2, #1
 8010684:	4413      	add	r3, r2
 8010686:	e7e0      	b.n	801064a <_printf_float+0x192>
 8010688:	6823      	ldr	r3, [r4, #0]
 801068a:	055a      	lsls	r2, r3, #21
 801068c:	d407      	bmi.n	801069e <_printf_float+0x1e6>
 801068e:	6923      	ldr	r3, [r4, #16]
 8010690:	4642      	mov	r2, r8
 8010692:	4631      	mov	r1, r6
 8010694:	4628      	mov	r0, r5
 8010696:	47b8      	blx	r7
 8010698:	3001      	adds	r0, #1
 801069a:	d12b      	bne.n	80106f4 <_printf_float+0x23c>
 801069c:	e767      	b.n	801056e <_printf_float+0xb6>
 801069e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80106a2:	f240 80dd 	bls.w	8010860 <_printf_float+0x3a8>
 80106a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80106aa:	2200      	movs	r2, #0
 80106ac:	2300      	movs	r3, #0
 80106ae:	f7f0 fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d033      	beq.n	801071e <_printf_float+0x266>
 80106b6:	4a37      	ldr	r2, [pc, #220]	@ (8010794 <_printf_float+0x2dc>)
 80106b8:	2301      	movs	r3, #1
 80106ba:	4631      	mov	r1, r6
 80106bc:	4628      	mov	r0, r5
 80106be:	47b8      	blx	r7
 80106c0:	3001      	adds	r0, #1
 80106c2:	f43f af54 	beq.w	801056e <_printf_float+0xb6>
 80106c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80106ca:	4543      	cmp	r3, r8
 80106cc:	db02      	blt.n	80106d4 <_printf_float+0x21c>
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	07d8      	lsls	r0, r3, #31
 80106d2:	d50f      	bpl.n	80106f4 <_printf_float+0x23c>
 80106d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106d8:	4631      	mov	r1, r6
 80106da:	4628      	mov	r0, r5
 80106dc:	47b8      	blx	r7
 80106de:	3001      	adds	r0, #1
 80106e0:	f43f af45 	beq.w	801056e <_printf_float+0xb6>
 80106e4:	f04f 0900 	mov.w	r9, #0
 80106e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80106ec:	f104 0a1a 	add.w	sl, r4, #26
 80106f0:	45c8      	cmp	r8, r9
 80106f2:	dc09      	bgt.n	8010708 <_printf_float+0x250>
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	079b      	lsls	r3, r3, #30
 80106f8:	f100 8103 	bmi.w	8010902 <_printf_float+0x44a>
 80106fc:	68e0      	ldr	r0, [r4, #12]
 80106fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010700:	4298      	cmp	r0, r3
 8010702:	bfb8      	it	lt
 8010704:	4618      	movlt	r0, r3
 8010706:	e734      	b.n	8010572 <_printf_float+0xba>
 8010708:	2301      	movs	r3, #1
 801070a:	4652      	mov	r2, sl
 801070c:	4631      	mov	r1, r6
 801070e:	4628      	mov	r0, r5
 8010710:	47b8      	blx	r7
 8010712:	3001      	adds	r0, #1
 8010714:	f43f af2b 	beq.w	801056e <_printf_float+0xb6>
 8010718:	f109 0901 	add.w	r9, r9, #1
 801071c:	e7e8      	b.n	80106f0 <_printf_float+0x238>
 801071e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010720:	2b00      	cmp	r3, #0
 8010722:	dc39      	bgt.n	8010798 <_printf_float+0x2e0>
 8010724:	4a1b      	ldr	r2, [pc, #108]	@ (8010794 <_printf_float+0x2dc>)
 8010726:	2301      	movs	r3, #1
 8010728:	4631      	mov	r1, r6
 801072a:	4628      	mov	r0, r5
 801072c:	47b8      	blx	r7
 801072e:	3001      	adds	r0, #1
 8010730:	f43f af1d 	beq.w	801056e <_printf_float+0xb6>
 8010734:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010738:	ea59 0303 	orrs.w	r3, r9, r3
 801073c:	d102      	bne.n	8010744 <_printf_float+0x28c>
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	07d9      	lsls	r1, r3, #31
 8010742:	d5d7      	bpl.n	80106f4 <_printf_float+0x23c>
 8010744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010748:	4631      	mov	r1, r6
 801074a:	4628      	mov	r0, r5
 801074c:	47b8      	blx	r7
 801074e:	3001      	adds	r0, #1
 8010750:	f43f af0d 	beq.w	801056e <_printf_float+0xb6>
 8010754:	f04f 0a00 	mov.w	sl, #0
 8010758:	f104 0b1a 	add.w	fp, r4, #26
 801075c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801075e:	425b      	negs	r3, r3
 8010760:	4553      	cmp	r3, sl
 8010762:	dc01      	bgt.n	8010768 <_printf_float+0x2b0>
 8010764:	464b      	mov	r3, r9
 8010766:	e793      	b.n	8010690 <_printf_float+0x1d8>
 8010768:	2301      	movs	r3, #1
 801076a:	465a      	mov	r2, fp
 801076c:	4631      	mov	r1, r6
 801076e:	4628      	mov	r0, r5
 8010770:	47b8      	blx	r7
 8010772:	3001      	adds	r0, #1
 8010774:	f43f aefb 	beq.w	801056e <_printf_float+0xb6>
 8010778:	f10a 0a01 	add.w	sl, sl, #1
 801077c:	e7ee      	b.n	801075c <_printf_float+0x2a4>
 801077e:	bf00      	nop
 8010780:	7fefffff 	.word	0x7fefffff
 8010784:	08013b94 	.word	0x08013b94
 8010788:	08013b90 	.word	0x08013b90
 801078c:	08013b9c 	.word	0x08013b9c
 8010790:	08013b98 	.word	0x08013b98
 8010794:	08013ba0 	.word	0x08013ba0
 8010798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801079a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801079e:	4553      	cmp	r3, sl
 80107a0:	bfa8      	it	ge
 80107a2:	4653      	movge	r3, sl
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	4699      	mov	r9, r3
 80107a8:	dc36      	bgt.n	8010818 <_printf_float+0x360>
 80107aa:	f04f 0b00 	mov.w	fp, #0
 80107ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107b2:	f104 021a 	add.w	r2, r4, #26
 80107b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80107b8:	9306      	str	r3, [sp, #24]
 80107ba:	eba3 0309 	sub.w	r3, r3, r9
 80107be:	455b      	cmp	r3, fp
 80107c0:	dc31      	bgt.n	8010826 <_printf_float+0x36e>
 80107c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c4:	459a      	cmp	sl, r3
 80107c6:	dc3a      	bgt.n	801083e <_printf_float+0x386>
 80107c8:	6823      	ldr	r3, [r4, #0]
 80107ca:	07da      	lsls	r2, r3, #31
 80107cc:	d437      	bmi.n	801083e <_printf_float+0x386>
 80107ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d0:	ebaa 0903 	sub.w	r9, sl, r3
 80107d4:	9b06      	ldr	r3, [sp, #24]
 80107d6:	ebaa 0303 	sub.w	r3, sl, r3
 80107da:	4599      	cmp	r9, r3
 80107dc:	bfa8      	it	ge
 80107de:	4699      	movge	r9, r3
 80107e0:	f1b9 0f00 	cmp.w	r9, #0
 80107e4:	dc33      	bgt.n	801084e <_printf_float+0x396>
 80107e6:	f04f 0800 	mov.w	r8, #0
 80107ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107ee:	f104 0b1a 	add.w	fp, r4, #26
 80107f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107f4:	ebaa 0303 	sub.w	r3, sl, r3
 80107f8:	eba3 0309 	sub.w	r3, r3, r9
 80107fc:	4543      	cmp	r3, r8
 80107fe:	f77f af79 	ble.w	80106f4 <_printf_float+0x23c>
 8010802:	2301      	movs	r3, #1
 8010804:	465a      	mov	r2, fp
 8010806:	4631      	mov	r1, r6
 8010808:	4628      	mov	r0, r5
 801080a:	47b8      	blx	r7
 801080c:	3001      	adds	r0, #1
 801080e:	f43f aeae 	beq.w	801056e <_printf_float+0xb6>
 8010812:	f108 0801 	add.w	r8, r8, #1
 8010816:	e7ec      	b.n	80107f2 <_printf_float+0x33a>
 8010818:	4642      	mov	r2, r8
 801081a:	4631      	mov	r1, r6
 801081c:	4628      	mov	r0, r5
 801081e:	47b8      	blx	r7
 8010820:	3001      	adds	r0, #1
 8010822:	d1c2      	bne.n	80107aa <_printf_float+0x2f2>
 8010824:	e6a3      	b.n	801056e <_printf_float+0xb6>
 8010826:	2301      	movs	r3, #1
 8010828:	4631      	mov	r1, r6
 801082a:	4628      	mov	r0, r5
 801082c:	9206      	str	r2, [sp, #24]
 801082e:	47b8      	blx	r7
 8010830:	3001      	adds	r0, #1
 8010832:	f43f ae9c 	beq.w	801056e <_printf_float+0xb6>
 8010836:	9a06      	ldr	r2, [sp, #24]
 8010838:	f10b 0b01 	add.w	fp, fp, #1
 801083c:	e7bb      	b.n	80107b6 <_printf_float+0x2fe>
 801083e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010842:	4631      	mov	r1, r6
 8010844:	4628      	mov	r0, r5
 8010846:	47b8      	blx	r7
 8010848:	3001      	adds	r0, #1
 801084a:	d1c0      	bne.n	80107ce <_printf_float+0x316>
 801084c:	e68f      	b.n	801056e <_printf_float+0xb6>
 801084e:	9a06      	ldr	r2, [sp, #24]
 8010850:	464b      	mov	r3, r9
 8010852:	4442      	add	r2, r8
 8010854:	4631      	mov	r1, r6
 8010856:	4628      	mov	r0, r5
 8010858:	47b8      	blx	r7
 801085a:	3001      	adds	r0, #1
 801085c:	d1c3      	bne.n	80107e6 <_printf_float+0x32e>
 801085e:	e686      	b.n	801056e <_printf_float+0xb6>
 8010860:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010864:	f1ba 0f01 	cmp.w	sl, #1
 8010868:	dc01      	bgt.n	801086e <_printf_float+0x3b6>
 801086a:	07db      	lsls	r3, r3, #31
 801086c:	d536      	bpl.n	80108dc <_printf_float+0x424>
 801086e:	2301      	movs	r3, #1
 8010870:	4642      	mov	r2, r8
 8010872:	4631      	mov	r1, r6
 8010874:	4628      	mov	r0, r5
 8010876:	47b8      	blx	r7
 8010878:	3001      	adds	r0, #1
 801087a:	f43f ae78 	beq.w	801056e <_printf_float+0xb6>
 801087e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010882:	4631      	mov	r1, r6
 8010884:	4628      	mov	r0, r5
 8010886:	47b8      	blx	r7
 8010888:	3001      	adds	r0, #1
 801088a:	f43f ae70 	beq.w	801056e <_printf_float+0xb6>
 801088e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010892:	2200      	movs	r2, #0
 8010894:	2300      	movs	r3, #0
 8010896:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801089a:	f7f0 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 801089e:	b9c0      	cbnz	r0, 80108d2 <_printf_float+0x41a>
 80108a0:	4653      	mov	r3, sl
 80108a2:	f108 0201 	add.w	r2, r8, #1
 80108a6:	4631      	mov	r1, r6
 80108a8:	4628      	mov	r0, r5
 80108aa:	47b8      	blx	r7
 80108ac:	3001      	adds	r0, #1
 80108ae:	d10c      	bne.n	80108ca <_printf_float+0x412>
 80108b0:	e65d      	b.n	801056e <_printf_float+0xb6>
 80108b2:	2301      	movs	r3, #1
 80108b4:	465a      	mov	r2, fp
 80108b6:	4631      	mov	r1, r6
 80108b8:	4628      	mov	r0, r5
 80108ba:	47b8      	blx	r7
 80108bc:	3001      	adds	r0, #1
 80108be:	f43f ae56 	beq.w	801056e <_printf_float+0xb6>
 80108c2:	f108 0801 	add.w	r8, r8, #1
 80108c6:	45d0      	cmp	r8, sl
 80108c8:	dbf3      	blt.n	80108b2 <_printf_float+0x3fa>
 80108ca:	464b      	mov	r3, r9
 80108cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80108d0:	e6df      	b.n	8010692 <_printf_float+0x1da>
 80108d2:	f04f 0800 	mov.w	r8, #0
 80108d6:	f104 0b1a 	add.w	fp, r4, #26
 80108da:	e7f4      	b.n	80108c6 <_printf_float+0x40e>
 80108dc:	2301      	movs	r3, #1
 80108de:	4642      	mov	r2, r8
 80108e0:	e7e1      	b.n	80108a6 <_printf_float+0x3ee>
 80108e2:	2301      	movs	r3, #1
 80108e4:	464a      	mov	r2, r9
 80108e6:	4631      	mov	r1, r6
 80108e8:	4628      	mov	r0, r5
 80108ea:	47b8      	blx	r7
 80108ec:	3001      	adds	r0, #1
 80108ee:	f43f ae3e 	beq.w	801056e <_printf_float+0xb6>
 80108f2:	f108 0801 	add.w	r8, r8, #1
 80108f6:	68e3      	ldr	r3, [r4, #12]
 80108f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108fa:	1a5b      	subs	r3, r3, r1
 80108fc:	4543      	cmp	r3, r8
 80108fe:	dcf0      	bgt.n	80108e2 <_printf_float+0x42a>
 8010900:	e6fc      	b.n	80106fc <_printf_float+0x244>
 8010902:	f04f 0800 	mov.w	r8, #0
 8010906:	f104 0919 	add.w	r9, r4, #25
 801090a:	e7f4      	b.n	80108f6 <_printf_float+0x43e>

0801090c <_printf_common>:
 801090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010910:	4616      	mov	r6, r2
 8010912:	4698      	mov	r8, r3
 8010914:	688a      	ldr	r2, [r1, #8]
 8010916:	690b      	ldr	r3, [r1, #16]
 8010918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801091c:	4293      	cmp	r3, r2
 801091e:	bfb8      	it	lt
 8010920:	4613      	movlt	r3, r2
 8010922:	6033      	str	r3, [r6, #0]
 8010924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010928:	4607      	mov	r7, r0
 801092a:	460c      	mov	r4, r1
 801092c:	b10a      	cbz	r2, 8010932 <_printf_common+0x26>
 801092e:	3301      	adds	r3, #1
 8010930:	6033      	str	r3, [r6, #0]
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	0699      	lsls	r1, r3, #26
 8010936:	bf42      	ittt	mi
 8010938:	6833      	ldrmi	r3, [r6, #0]
 801093a:	3302      	addmi	r3, #2
 801093c:	6033      	strmi	r3, [r6, #0]
 801093e:	6825      	ldr	r5, [r4, #0]
 8010940:	f015 0506 	ands.w	r5, r5, #6
 8010944:	d106      	bne.n	8010954 <_printf_common+0x48>
 8010946:	f104 0a19 	add.w	sl, r4, #25
 801094a:	68e3      	ldr	r3, [r4, #12]
 801094c:	6832      	ldr	r2, [r6, #0]
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	42ab      	cmp	r3, r5
 8010952:	dc26      	bgt.n	80109a2 <_printf_common+0x96>
 8010954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010958:	6822      	ldr	r2, [r4, #0]
 801095a:	3b00      	subs	r3, #0
 801095c:	bf18      	it	ne
 801095e:	2301      	movne	r3, #1
 8010960:	0692      	lsls	r2, r2, #26
 8010962:	d42b      	bmi.n	80109bc <_printf_common+0xb0>
 8010964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010968:	4641      	mov	r1, r8
 801096a:	4638      	mov	r0, r7
 801096c:	47c8      	blx	r9
 801096e:	3001      	adds	r0, #1
 8010970:	d01e      	beq.n	80109b0 <_printf_common+0xa4>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	f003 0306 	and.w	r3, r3, #6
 801097a:	2b04      	cmp	r3, #4
 801097c:	bf02      	ittt	eq
 801097e:	68e5      	ldreq	r5, [r4, #12]
 8010980:	6833      	ldreq	r3, [r6, #0]
 8010982:	1aed      	subeq	r5, r5, r3
 8010984:	68a3      	ldr	r3, [r4, #8]
 8010986:	bf0c      	ite	eq
 8010988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801098c:	2500      	movne	r5, #0
 801098e:	4293      	cmp	r3, r2
 8010990:	bfc4      	itt	gt
 8010992:	1a9b      	subgt	r3, r3, r2
 8010994:	18ed      	addgt	r5, r5, r3
 8010996:	2600      	movs	r6, #0
 8010998:	341a      	adds	r4, #26
 801099a:	42b5      	cmp	r5, r6
 801099c:	d11a      	bne.n	80109d4 <_printf_common+0xc8>
 801099e:	2000      	movs	r0, #0
 80109a0:	e008      	b.n	80109b4 <_printf_common+0xa8>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4652      	mov	r2, sl
 80109a6:	4641      	mov	r1, r8
 80109a8:	4638      	mov	r0, r7
 80109aa:	47c8      	blx	r9
 80109ac:	3001      	adds	r0, #1
 80109ae:	d103      	bne.n	80109b8 <_printf_common+0xac>
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	3501      	adds	r5, #1
 80109ba:	e7c6      	b.n	801094a <_printf_common+0x3e>
 80109bc:	18e1      	adds	r1, r4, r3
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	2030      	movs	r0, #48	@ 0x30
 80109c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80109c6:	4422      	add	r2, r4
 80109c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80109cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80109d0:	3302      	adds	r3, #2
 80109d2:	e7c7      	b.n	8010964 <_printf_common+0x58>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4622      	mov	r2, r4
 80109d8:	4641      	mov	r1, r8
 80109da:	4638      	mov	r0, r7
 80109dc:	47c8      	blx	r9
 80109de:	3001      	adds	r0, #1
 80109e0:	d0e6      	beq.n	80109b0 <_printf_common+0xa4>
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7d9      	b.n	801099a <_printf_common+0x8e>
	...

080109e8 <_printf_i>:
 80109e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	7e0f      	ldrb	r7, [r1, #24]
 80109ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109f0:	2f78      	cmp	r7, #120	@ 0x78
 80109f2:	4691      	mov	r9, r2
 80109f4:	4680      	mov	r8, r0
 80109f6:	460c      	mov	r4, r1
 80109f8:	469a      	mov	sl, r3
 80109fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109fe:	d807      	bhi.n	8010a10 <_printf_i+0x28>
 8010a00:	2f62      	cmp	r7, #98	@ 0x62
 8010a02:	d80a      	bhi.n	8010a1a <_printf_i+0x32>
 8010a04:	2f00      	cmp	r7, #0
 8010a06:	f000 80d1 	beq.w	8010bac <_printf_i+0x1c4>
 8010a0a:	2f58      	cmp	r7, #88	@ 0x58
 8010a0c:	f000 80b8 	beq.w	8010b80 <_printf_i+0x198>
 8010a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010a18:	e03a      	b.n	8010a90 <_printf_i+0xa8>
 8010a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010a1e:	2b15      	cmp	r3, #21
 8010a20:	d8f6      	bhi.n	8010a10 <_printf_i+0x28>
 8010a22:	a101      	add	r1, pc, #4	@ (adr r1, 8010a28 <_printf_i+0x40>)
 8010a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a28:	08010a81 	.word	0x08010a81
 8010a2c:	08010a95 	.word	0x08010a95
 8010a30:	08010a11 	.word	0x08010a11
 8010a34:	08010a11 	.word	0x08010a11
 8010a38:	08010a11 	.word	0x08010a11
 8010a3c:	08010a11 	.word	0x08010a11
 8010a40:	08010a95 	.word	0x08010a95
 8010a44:	08010a11 	.word	0x08010a11
 8010a48:	08010a11 	.word	0x08010a11
 8010a4c:	08010a11 	.word	0x08010a11
 8010a50:	08010a11 	.word	0x08010a11
 8010a54:	08010b93 	.word	0x08010b93
 8010a58:	08010abf 	.word	0x08010abf
 8010a5c:	08010b4d 	.word	0x08010b4d
 8010a60:	08010a11 	.word	0x08010a11
 8010a64:	08010a11 	.word	0x08010a11
 8010a68:	08010bb5 	.word	0x08010bb5
 8010a6c:	08010a11 	.word	0x08010a11
 8010a70:	08010abf 	.word	0x08010abf
 8010a74:	08010a11 	.word	0x08010a11
 8010a78:	08010a11 	.word	0x08010a11
 8010a7c:	08010b55 	.word	0x08010b55
 8010a80:	6833      	ldr	r3, [r6, #0]
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	6032      	str	r2, [r6, #0]
 8010a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a90:	2301      	movs	r3, #1
 8010a92:	e09c      	b.n	8010bce <_printf_i+0x1e6>
 8010a94:	6833      	ldr	r3, [r6, #0]
 8010a96:	6820      	ldr	r0, [r4, #0]
 8010a98:	1d19      	adds	r1, r3, #4
 8010a9a:	6031      	str	r1, [r6, #0]
 8010a9c:	0606      	lsls	r6, r0, #24
 8010a9e:	d501      	bpl.n	8010aa4 <_printf_i+0xbc>
 8010aa0:	681d      	ldr	r5, [r3, #0]
 8010aa2:	e003      	b.n	8010aac <_printf_i+0xc4>
 8010aa4:	0645      	lsls	r5, r0, #25
 8010aa6:	d5fb      	bpl.n	8010aa0 <_printf_i+0xb8>
 8010aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	da03      	bge.n	8010ab8 <_printf_i+0xd0>
 8010ab0:	232d      	movs	r3, #45	@ 0x2d
 8010ab2:	426d      	negs	r5, r5
 8010ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ab8:	4858      	ldr	r0, [pc, #352]	@ (8010c1c <_printf_i+0x234>)
 8010aba:	230a      	movs	r3, #10
 8010abc:	e011      	b.n	8010ae2 <_printf_i+0xfa>
 8010abe:	6821      	ldr	r1, [r4, #0]
 8010ac0:	6833      	ldr	r3, [r6, #0]
 8010ac2:	0608      	lsls	r0, r1, #24
 8010ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ac8:	d402      	bmi.n	8010ad0 <_printf_i+0xe8>
 8010aca:	0649      	lsls	r1, r1, #25
 8010acc:	bf48      	it	mi
 8010ace:	b2ad      	uxthmi	r5, r5
 8010ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010ad2:	4852      	ldr	r0, [pc, #328]	@ (8010c1c <_printf_i+0x234>)
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	bf14      	ite	ne
 8010ad8:	230a      	movne	r3, #10
 8010ada:	2308      	moveq	r3, #8
 8010adc:	2100      	movs	r1, #0
 8010ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010ae2:	6866      	ldr	r6, [r4, #4]
 8010ae4:	60a6      	str	r6, [r4, #8]
 8010ae6:	2e00      	cmp	r6, #0
 8010ae8:	db05      	blt.n	8010af6 <_printf_i+0x10e>
 8010aea:	6821      	ldr	r1, [r4, #0]
 8010aec:	432e      	orrs	r6, r5
 8010aee:	f021 0104 	bic.w	r1, r1, #4
 8010af2:	6021      	str	r1, [r4, #0]
 8010af4:	d04b      	beq.n	8010b8e <_printf_i+0x1a6>
 8010af6:	4616      	mov	r6, r2
 8010af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8010afc:	fb03 5711 	mls	r7, r3, r1, r5
 8010b00:	5dc7      	ldrb	r7, [r0, r7]
 8010b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b06:	462f      	mov	r7, r5
 8010b08:	42bb      	cmp	r3, r7
 8010b0a:	460d      	mov	r5, r1
 8010b0c:	d9f4      	bls.n	8010af8 <_printf_i+0x110>
 8010b0e:	2b08      	cmp	r3, #8
 8010b10:	d10b      	bne.n	8010b2a <_printf_i+0x142>
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	07df      	lsls	r7, r3, #31
 8010b16:	d508      	bpl.n	8010b2a <_printf_i+0x142>
 8010b18:	6923      	ldr	r3, [r4, #16]
 8010b1a:	6861      	ldr	r1, [r4, #4]
 8010b1c:	4299      	cmp	r1, r3
 8010b1e:	bfde      	ittt	le
 8010b20:	2330      	movle	r3, #48	@ 0x30
 8010b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010b2a:	1b92      	subs	r2, r2, r6
 8010b2c:	6122      	str	r2, [r4, #16]
 8010b2e:	f8cd a000 	str.w	sl, [sp]
 8010b32:	464b      	mov	r3, r9
 8010b34:	aa03      	add	r2, sp, #12
 8010b36:	4621      	mov	r1, r4
 8010b38:	4640      	mov	r0, r8
 8010b3a:	f7ff fee7 	bl	801090c <_printf_common>
 8010b3e:	3001      	adds	r0, #1
 8010b40:	d14a      	bne.n	8010bd8 <_printf_i+0x1f0>
 8010b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b46:	b004      	add	sp, #16
 8010b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	f043 0320 	orr.w	r3, r3, #32
 8010b52:	6023      	str	r3, [r4, #0]
 8010b54:	4832      	ldr	r0, [pc, #200]	@ (8010c20 <_printf_i+0x238>)
 8010b56:	2778      	movs	r7, #120	@ 0x78
 8010b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b5c:	6823      	ldr	r3, [r4, #0]
 8010b5e:	6831      	ldr	r1, [r6, #0]
 8010b60:	061f      	lsls	r7, r3, #24
 8010b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b66:	d402      	bmi.n	8010b6e <_printf_i+0x186>
 8010b68:	065f      	lsls	r7, r3, #25
 8010b6a:	bf48      	it	mi
 8010b6c:	b2ad      	uxthmi	r5, r5
 8010b6e:	6031      	str	r1, [r6, #0]
 8010b70:	07d9      	lsls	r1, r3, #31
 8010b72:	bf44      	itt	mi
 8010b74:	f043 0320 	orrmi.w	r3, r3, #32
 8010b78:	6023      	strmi	r3, [r4, #0]
 8010b7a:	b11d      	cbz	r5, 8010b84 <_printf_i+0x19c>
 8010b7c:	2310      	movs	r3, #16
 8010b7e:	e7ad      	b.n	8010adc <_printf_i+0xf4>
 8010b80:	4826      	ldr	r0, [pc, #152]	@ (8010c1c <_printf_i+0x234>)
 8010b82:	e7e9      	b.n	8010b58 <_printf_i+0x170>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	f023 0320 	bic.w	r3, r3, #32
 8010b8a:	6023      	str	r3, [r4, #0]
 8010b8c:	e7f6      	b.n	8010b7c <_printf_i+0x194>
 8010b8e:	4616      	mov	r6, r2
 8010b90:	e7bd      	b.n	8010b0e <_printf_i+0x126>
 8010b92:	6833      	ldr	r3, [r6, #0]
 8010b94:	6825      	ldr	r5, [r4, #0]
 8010b96:	6961      	ldr	r1, [r4, #20]
 8010b98:	1d18      	adds	r0, r3, #4
 8010b9a:	6030      	str	r0, [r6, #0]
 8010b9c:	062e      	lsls	r6, r5, #24
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	d501      	bpl.n	8010ba6 <_printf_i+0x1be>
 8010ba2:	6019      	str	r1, [r3, #0]
 8010ba4:	e002      	b.n	8010bac <_printf_i+0x1c4>
 8010ba6:	0668      	lsls	r0, r5, #25
 8010ba8:	d5fb      	bpl.n	8010ba2 <_printf_i+0x1ba>
 8010baa:	8019      	strh	r1, [r3, #0]
 8010bac:	2300      	movs	r3, #0
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	e7bc      	b.n	8010b2e <_printf_i+0x146>
 8010bb4:	6833      	ldr	r3, [r6, #0]
 8010bb6:	1d1a      	adds	r2, r3, #4
 8010bb8:	6032      	str	r2, [r6, #0]
 8010bba:	681e      	ldr	r6, [r3, #0]
 8010bbc:	6862      	ldr	r2, [r4, #4]
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f7ef fb05 	bl	80001d0 <memchr>
 8010bc6:	b108      	cbz	r0, 8010bcc <_printf_i+0x1e4>
 8010bc8:	1b80      	subs	r0, r0, r6
 8010bca:	6060      	str	r0, [r4, #4]
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	6123      	str	r3, [r4, #16]
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bd6:	e7aa      	b.n	8010b2e <_printf_i+0x146>
 8010bd8:	6923      	ldr	r3, [r4, #16]
 8010bda:	4632      	mov	r2, r6
 8010bdc:	4649      	mov	r1, r9
 8010bde:	4640      	mov	r0, r8
 8010be0:	47d0      	blx	sl
 8010be2:	3001      	adds	r0, #1
 8010be4:	d0ad      	beq.n	8010b42 <_printf_i+0x15a>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	079b      	lsls	r3, r3, #30
 8010bea:	d413      	bmi.n	8010c14 <_printf_i+0x22c>
 8010bec:	68e0      	ldr	r0, [r4, #12]
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	4298      	cmp	r0, r3
 8010bf2:	bfb8      	it	lt
 8010bf4:	4618      	movlt	r0, r3
 8010bf6:	e7a6      	b.n	8010b46 <_printf_i+0x15e>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	4632      	mov	r2, r6
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	4640      	mov	r0, r8
 8010c00:	47d0      	blx	sl
 8010c02:	3001      	adds	r0, #1
 8010c04:	d09d      	beq.n	8010b42 <_printf_i+0x15a>
 8010c06:	3501      	adds	r5, #1
 8010c08:	68e3      	ldr	r3, [r4, #12]
 8010c0a:	9903      	ldr	r1, [sp, #12]
 8010c0c:	1a5b      	subs	r3, r3, r1
 8010c0e:	42ab      	cmp	r3, r5
 8010c10:	dcf2      	bgt.n	8010bf8 <_printf_i+0x210>
 8010c12:	e7eb      	b.n	8010bec <_printf_i+0x204>
 8010c14:	2500      	movs	r5, #0
 8010c16:	f104 0619 	add.w	r6, r4, #25
 8010c1a:	e7f5      	b.n	8010c08 <_printf_i+0x220>
 8010c1c:	08013ba2 	.word	0x08013ba2
 8010c20:	08013bb3 	.word	0x08013bb3

08010c24 <std>:
 8010c24:	2300      	movs	r3, #0
 8010c26:	b510      	push	{r4, lr}
 8010c28:	4604      	mov	r4, r0
 8010c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8010c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c32:	6083      	str	r3, [r0, #8]
 8010c34:	8181      	strh	r1, [r0, #12]
 8010c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c38:	81c2      	strh	r2, [r0, #14]
 8010c3a:	6183      	str	r3, [r0, #24]
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	2208      	movs	r2, #8
 8010c40:	305c      	adds	r0, #92	@ 0x5c
 8010c42:	f000 f8b1 	bl	8010da8 <memset>
 8010c46:	4b0d      	ldr	r3, [pc, #52]	@ (8010c7c <std+0x58>)
 8010c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c80 <std+0x5c>)
 8010c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c84 <std+0x60>)
 8010c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c52:	4b0d      	ldr	r3, [pc, #52]	@ (8010c88 <std+0x64>)
 8010c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c56:	4b0d      	ldr	r3, [pc, #52]	@ (8010c8c <std+0x68>)
 8010c58:	6224      	str	r4, [r4, #32]
 8010c5a:	429c      	cmp	r4, r3
 8010c5c:	d006      	beq.n	8010c6c <std+0x48>
 8010c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c62:	4294      	cmp	r4, r2
 8010c64:	d002      	beq.n	8010c6c <std+0x48>
 8010c66:	33d0      	adds	r3, #208	@ 0xd0
 8010c68:	429c      	cmp	r4, r3
 8010c6a:	d105      	bne.n	8010c78 <std+0x54>
 8010c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c74:	f000 b8ca 	b.w	8010e0c <__retarget_lock_init_recursive>
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	bf00      	nop
 8010c7c:	080125f5 	.word	0x080125f5
 8010c80:	08012617 	.word	0x08012617
 8010c84:	0801264f 	.word	0x0801264f
 8010c88:	08012673 	.word	0x08012673
 8010c8c:	2000588c 	.word	0x2000588c

08010c90 <stdio_exit_handler>:
 8010c90:	4a02      	ldr	r2, [pc, #8]	@ (8010c9c <stdio_exit_handler+0xc>)
 8010c92:	4903      	ldr	r1, [pc, #12]	@ (8010ca0 <stdio_exit_handler+0x10>)
 8010c94:	4803      	ldr	r0, [pc, #12]	@ (8010ca4 <stdio_exit_handler+0x14>)
 8010c96:	f000 b869 	b.w	8010d6c <_fwalk_sglue>
 8010c9a:	bf00      	nop
 8010c9c:	20000048 	.word	0x20000048
 8010ca0:	08011e99 	.word	0x08011e99
 8010ca4:	20000058 	.word	0x20000058

08010ca8 <cleanup_stdio>:
 8010ca8:	6841      	ldr	r1, [r0, #4]
 8010caa:	4b0c      	ldr	r3, [pc, #48]	@ (8010cdc <cleanup_stdio+0x34>)
 8010cac:	4299      	cmp	r1, r3
 8010cae:	b510      	push	{r4, lr}
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	d001      	beq.n	8010cb8 <cleanup_stdio+0x10>
 8010cb4:	f001 f8f0 	bl	8011e98 <_fflush_r>
 8010cb8:	68a1      	ldr	r1, [r4, #8]
 8010cba:	4b09      	ldr	r3, [pc, #36]	@ (8010ce0 <cleanup_stdio+0x38>)
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	d002      	beq.n	8010cc6 <cleanup_stdio+0x1e>
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f001 f8e9 	bl	8011e98 <_fflush_r>
 8010cc6:	68e1      	ldr	r1, [r4, #12]
 8010cc8:	4b06      	ldr	r3, [pc, #24]	@ (8010ce4 <cleanup_stdio+0x3c>)
 8010cca:	4299      	cmp	r1, r3
 8010ccc:	d004      	beq.n	8010cd8 <cleanup_stdio+0x30>
 8010cce:	4620      	mov	r0, r4
 8010cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd4:	f001 b8e0 	b.w	8011e98 <_fflush_r>
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	bf00      	nop
 8010cdc:	2000588c 	.word	0x2000588c
 8010ce0:	200058f4 	.word	0x200058f4
 8010ce4:	2000595c 	.word	0x2000595c

08010ce8 <global_stdio_init.part.0>:
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	4b0b      	ldr	r3, [pc, #44]	@ (8010d18 <global_stdio_init.part.0+0x30>)
 8010cec:	4c0b      	ldr	r4, [pc, #44]	@ (8010d1c <global_stdio_init.part.0+0x34>)
 8010cee:	4a0c      	ldr	r2, [pc, #48]	@ (8010d20 <global_stdio_init.part.0+0x38>)
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	2104      	movs	r1, #4
 8010cf8:	f7ff ff94 	bl	8010c24 <std>
 8010cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d00:	2201      	movs	r2, #1
 8010d02:	2109      	movs	r1, #9
 8010d04:	f7ff ff8e 	bl	8010c24 <std>
 8010d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d0c:	2202      	movs	r2, #2
 8010d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d12:	2112      	movs	r1, #18
 8010d14:	f7ff bf86 	b.w	8010c24 <std>
 8010d18:	200059c4 	.word	0x200059c4
 8010d1c:	2000588c 	.word	0x2000588c
 8010d20:	08010c91 	.word	0x08010c91

08010d24 <__sfp_lock_acquire>:
 8010d24:	4801      	ldr	r0, [pc, #4]	@ (8010d2c <__sfp_lock_acquire+0x8>)
 8010d26:	f000 b872 	b.w	8010e0e <__retarget_lock_acquire_recursive>
 8010d2a:	bf00      	nop
 8010d2c:	200059c9 	.word	0x200059c9

08010d30 <__sfp_lock_release>:
 8010d30:	4801      	ldr	r0, [pc, #4]	@ (8010d38 <__sfp_lock_release+0x8>)
 8010d32:	f000 b86d 	b.w	8010e10 <__retarget_lock_release_recursive>
 8010d36:	bf00      	nop
 8010d38:	200059c9 	.word	0x200059c9

08010d3c <__sinit>:
 8010d3c:	b510      	push	{r4, lr}
 8010d3e:	4604      	mov	r4, r0
 8010d40:	f7ff fff0 	bl	8010d24 <__sfp_lock_acquire>
 8010d44:	6a23      	ldr	r3, [r4, #32]
 8010d46:	b11b      	cbz	r3, 8010d50 <__sinit+0x14>
 8010d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d4c:	f7ff bff0 	b.w	8010d30 <__sfp_lock_release>
 8010d50:	4b04      	ldr	r3, [pc, #16]	@ (8010d64 <__sinit+0x28>)
 8010d52:	6223      	str	r3, [r4, #32]
 8010d54:	4b04      	ldr	r3, [pc, #16]	@ (8010d68 <__sinit+0x2c>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1f5      	bne.n	8010d48 <__sinit+0xc>
 8010d5c:	f7ff ffc4 	bl	8010ce8 <global_stdio_init.part.0>
 8010d60:	e7f2      	b.n	8010d48 <__sinit+0xc>
 8010d62:	bf00      	nop
 8010d64:	08010ca9 	.word	0x08010ca9
 8010d68:	200059c4 	.word	0x200059c4

08010d6c <_fwalk_sglue>:
 8010d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d70:	4607      	mov	r7, r0
 8010d72:	4688      	mov	r8, r1
 8010d74:	4614      	mov	r4, r2
 8010d76:	2600      	movs	r6, #0
 8010d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8010d80:	d505      	bpl.n	8010d8e <_fwalk_sglue+0x22>
 8010d82:	6824      	ldr	r4, [r4, #0]
 8010d84:	2c00      	cmp	r4, #0
 8010d86:	d1f7      	bne.n	8010d78 <_fwalk_sglue+0xc>
 8010d88:	4630      	mov	r0, r6
 8010d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d8e:	89ab      	ldrh	r3, [r5, #12]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d907      	bls.n	8010da4 <_fwalk_sglue+0x38>
 8010d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	d003      	beq.n	8010da4 <_fwalk_sglue+0x38>
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	4638      	mov	r0, r7
 8010da0:	47c0      	blx	r8
 8010da2:	4306      	orrs	r6, r0
 8010da4:	3568      	adds	r5, #104	@ 0x68
 8010da6:	e7e9      	b.n	8010d7c <_fwalk_sglue+0x10>

08010da8 <memset>:
 8010da8:	4402      	add	r2, r0
 8010daa:	4603      	mov	r3, r0
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d100      	bne.n	8010db2 <memset+0xa>
 8010db0:	4770      	bx	lr
 8010db2:	f803 1b01 	strb.w	r1, [r3], #1
 8010db6:	e7f9      	b.n	8010dac <memset+0x4>

08010db8 <__errno>:
 8010db8:	4b01      	ldr	r3, [pc, #4]	@ (8010dc0 <__errno+0x8>)
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	20000054 	.word	0x20000054

08010dc4 <__libc_init_array>:
 8010dc4:	b570      	push	{r4, r5, r6, lr}
 8010dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8010dfc <__libc_init_array+0x38>)
 8010dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8010e00 <__libc_init_array+0x3c>)
 8010dca:	1b64      	subs	r4, r4, r5
 8010dcc:	10a4      	asrs	r4, r4, #2
 8010dce:	2600      	movs	r6, #0
 8010dd0:	42a6      	cmp	r6, r4
 8010dd2:	d109      	bne.n	8010de8 <__libc_init_array+0x24>
 8010dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8010e04 <__libc_init_array+0x40>)
 8010dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8010e08 <__libc_init_array+0x44>)
 8010dd8:	f002 fd22 	bl	8013820 <_init>
 8010ddc:	1b64      	subs	r4, r4, r5
 8010dde:	10a4      	asrs	r4, r4, #2
 8010de0:	2600      	movs	r6, #0
 8010de2:	42a6      	cmp	r6, r4
 8010de4:	d105      	bne.n	8010df2 <__libc_init_array+0x2e>
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dec:	4798      	blx	r3
 8010dee:	3601      	adds	r6, #1
 8010df0:	e7ee      	b.n	8010dd0 <__libc_init_array+0xc>
 8010df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010df6:	4798      	blx	r3
 8010df8:	3601      	adds	r6, #1
 8010dfa:	e7f2      	b.n	8010de2 <__libc_init_array+0x1e>
 8010dfc:	080142dc 	.word	0x080142dc
 8010e00:	080142dc 	.word	0x080142dc
 8010e04:	080142dc 	.word	0x080142dc
 8010e08:	080142e0 	.word	0x080142e0

08010e0c <__retarget_lock_init_recursive>:
 8010e0c:	4770      	bx	lr

08010e0e <__retarget_lock_acquire_recursive>:
 8010e0e:	4770      	bx	lr

08010e10 <__retarget_lock_release_recursive>:
 8010e10:	4770      	bx	lr
	...

08010e14 <_localeconv_r>:
 8010e14:	4800      	ldr	r0, [pc, #0]	@ (8010e18 <_localeconv_r+0x4>)
 8010e16:	4770      	bx	lr
 8010e18:	20000194 	.word	0x20000194

08010e1c <_reclaim_reent>:
 8010e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8010ed4 <_reclaim_reent+0xb8>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4283      	cmp	r3, r0
 8010e22:	b570      	push	{r4, r5, r6, lr}
 8010e24:	4604      	mov	r4, r0
 8010e26:	d053      	beq.n	8010ed0 <_reclaim_reent+0xb4>
 8010e28:	69c3      	ldr	r3, [r0, #28]
 8010e2a:	b31b      	cbz	r3, 8010e74 <_reclaim_reent+0x58>
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	b163      	cbz	r3, 8010e4a <_reclaim_reent+0x2e>
 8010e30:	2500      	movs	r5, #0
 8010e32:	69e3      	ldr	r3, [r4, #28]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	5959      	ldr	r1, [r3, r5]
 8010e38:	b9b1      	cbnz	r1, 8010e68 <_reclaim_reent+0x4c>
 8010e3a:	3504      	adds	r5, #4
 8010e3c:	2d80      	cmp	r5, #128	@ 0x80
 8010e3e:	d1f8      	bne.n	8010e32 <_reclaim_reent+0x16>
 8010e40:	69e3      	ldr	r3, [r4, #28]
 8010e42:	4620      	mov	r0, r4
 8010e44:	68d9      	ldr	r1, [r3, #12]
 8010e46:	f000 feaf 	bl	8011ba8 <_free_r>
 8010e4a:	69e3      	ldr	r3, [r4, #28]
 8010e4c:	6819      	ldr	r1, [r3, #0]
 8010e4e:	b111      	cbz	r1, 8010e56 <_reclaim_reent+0x3a>
 8010e50:	4620      	mov	r0, r4
 8010e52:	f000 fea9 	bl	8011ba8 <_free_r>
 8010e56:	69e3      	ldr	r3, [r4, #28]
 8010e58:	689d      	ldr	r5, [r3, #8]
 8010e5a:	b15d      	cbz	r5, 8010e74 <_reclaim_reent+0x58>
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	4620      	mov	r0, r4
 8010e60:	682d      	ldr	r5, [r5, #0]
 8010e62:	f000 fea1 	bl	8011ba8 <_free_r>
 8010e66:	e7f8      	b.n	8010e5a <_reclaim_reent+0x3e>
 8010e68:	680e      	ldr	r6, [r1, #0]
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fe9c 	bl	8011ba8 <_free_r>
 8010e70:	4631      	mov	r1, r6
 8010e72:	e7e1      	b.n	8010e38 <_reclaim_reent+0x1c>
 8010e74:	6961      	ldr	r1, [r4, #20]
 8010e76:	b111      	cbz	r1, 8010e7e <_reclaim_reent+0x62>
 8010e78:	4620      	mov	r0, r4
 8010e7a:	f000 fe95 	bl	8011ba8 <_free_r>
 8010e7e:	69e1      	ldr	r1, [r4, #28]
 8010e80:	b111      	cbz	r1, 8010e88 <_reclaim_reent+0x6c>
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 fe90 	bl	8011ba8 <_free_r>
 8010e88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010e8a:	b111      	cbz	r1, 8010e92 <_reclaim_reent+0x76>
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f000 fe8b 	bl	8011ba8 <_free_r>
 8010e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e94:	b111      	cbz	r1, 8010e9c <_reclaim_reent+0x80>
 8010e96:	4620      	mov	r0, r4
 8010e98:	f000 fe86 	bl	8011ba8 <_free_r>
 8010e9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010e9e:	b111      	cbz	r1, 8010ea6 <_reclaim_reent+0x8a>
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	f000 fe81 	bl	8011ba8 <_free_r>
 8010ea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010ea8:	b111      	cbz	r1, 8010eb0 <_reclaim_reent+0x94>
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f000 fe7c 	bl	8011ba8 <_free_r>
 8010eb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010eb2:	b111      	cbz	r1, 8010eba <_reclaim_reent+0x9e>
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f000 fe77 	bl	8011ba8 <_free_r>
 8010eba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010ebc:	b111      	cbz	r1, 8010ec4 <_reclaim_reent+0xa8>
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 fe72 	bl	8011ba8 <_free_r>
 8010ec4:	6a23      	ldr	r3, [r4, #32]
 8010ec6:	b11b      	cbz	r3, 8010ed0 <_reclaim_reent+0xb4>
 8010ec8:	4620      	mov	r0, r4
 8010eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ece:	4718      	bx	r3
 8010ed0:	bd70      	pop	{r4, r5, r6, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20000054 	.word	0x20000054

08010ed8 <memcpy>:
 8010ed8:	440a      	add	r2, r1
 8010eda:	4291      	cmp	r1, r2
 8010edc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010ee0:	d100      	bne.n	8010ee4 <memcpy+0xc>
 8010ee2:	4770      	bx	lr
 8010ee4:	b510      	push	{r4, lr}
 8010ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010eee:	4291      	cmp	r1, r2
 8010ef0:	d1f9      	bne.n	8010ee6 <memcpy+0xe>
 8010ef2:	bd10      	pop	{r4, pc}

08010ef4 <quorem>:
 8010ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	6903      	ldr	r3, [r0, #16]
 8010efa:	690c      	ldr	r4, [r1, #16]
 8010efc:	42a3      	cmp	r3, r4
 8010efe:	4607      	mov	r7, r0
 8010f00:	db7e      	blt.n	8011000 <quorem+0x10c>
 8010f02:	3c01      	subs	r4, #1
 8010f04:	f101 0814 	add.w	r8, r1, #20
 8010f08:	00a3      	lsls	r3, r4, #2
 8010f0a:	f100 0514 	add.w	r5, r0, #20
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	429a      	cmp	r2, r3
 8010f22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f2a:	d32e      	bcc.n	8010f8a <quorem+0x96>
 8010f2c:	f04f 0a00 	mov.w	sl, #0
 8010f30:	46c4      	mov	ip, r8
 8010f32:	46ae      	mov	lr, r5
 8010f34:	46d3      	mov	fp, sl
 8010f36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f3a:	b298      	uxth	r0, r3
 8010f3c:	fb06 a000 	mla	r0, r6, r0, sl
 8010f40:	0c02      	lsrs	r2, r0, #16
 8010f42:	0c1b      	lsrs	r3, r3, #16
 8010f44:	fb06 2303 	mla	r3, r6, r3, r2
 8010f48:	f8de 2000 	ldr.w	r2, [lr]
 8010f4c:	b280      	uxth	r0, r0
 8010f4e:	b292      	uxth	r2, r2
 8010f50:	1a12      	subs	r2, r2, r0
 8010f52:	445a      	add	r2, fp
 8010f54:	f8de 0000 	ldr.w	r0, [lr]
 8010f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f66:	b292      	uxth	r2, r2
 8010f68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f6c:	45e1      	cmp	r9, ip
 8010f6e:	f84e 2b04 	str.w	r2, [lr], #4
 8010f72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f76:	d2de      	bcs.n	8010f36 <quorem+0x42>
 8010f78:	9b00      	ldr	r3, [sp, #0]
 8010f7a:	58eb      	ldr	r3, [r5, r3]
 8010f7c:	b92b      	cbnz	r3, 8010f8a <quorem+0x96>
 8010f7e:	9b01      	ldr	r3, [sp, #4]
 8010f80:	3b04      	subs	r3, #4
 8010f82:	429d      	cmp	r5, r3
 8010f84:	461a      	mov	r2, r3
 8010f86:	d32f      	bcc.n	8010fe8 <quorem+0xf4>
 8010f88:	613c      	str	r4, [r7, #16]
 8010f8a:	4638      	mov	r0, r7
 8010f8c:	f001 fa2a 	bl	80123e4 <__mcmp>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	db25      	blt.n	8010fe0 <quorem+0xec>
 8010f94:	4629      	mov	r1, r5
 8010f96:	2000      	movs	r0, #0
 8010f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f9c:	f8d1 c000 	ldr.w	ip, [r1]
 8010fa0:	fa1f fe82 	uxth.w	lr, r2
 8010fa4:	fa1f f38c 	uxth.w	r3, ip
 8010fa8:	eba3 030e 	sub.w	r3, r3, lr
 8010fac:	4403      	add	r3, r0
 8010fae:	0c12      	lsrs	r2, r2, #16
 8010fb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010fb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fbe:	45c1      	cmp	r9, r8
 8010fc0:	f841 3b04 	str.w	r3, [r1], #4
 8010fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010fc8:	d2e6      	bcs.n	8010f98 <quorem+0xa4>
 8010fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fd2:	b922      	cbnz	r2, 8010fde <quorem+0xea>
 8010fd4:	3b04      	subs	r3, #4
 8010fd6:	429d      	cmp	r5, r3
 8010fd8:	461a      	mov	r2, r3
 8010fda:	d30b      	bcc.n	8010ff4 <quorem+0x100>
 8010fdc:	613c      	str	r4, [r7, #16]
 8010fde:	3601      	adds	r6, #1
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	b003      	add	sp, #12
 8010fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe8:	6812      	ldr	r2, [r2, #0]
 8010fea:	3b04      	subs	r3, #4
 8010fec:	2a00      	cmp	r2, #0
 8010fee:	d1cb      	bne.n	8010f88 <quorem+0x94>
 8010ff0:	3c01      	subs	r4, #1
 8010ff2:	e7c6      	b.n	8010f82 <quorem+0x8e>
 8010ff4:	6812      	ldr	r2, [r2, #0]
 8010ff6:	3b04      	subs	r3, #4
 8010ff8:	2a00      	cmp	r2, #0
 8010ffa:	d1ef      	bne.n	8010fdc <quorem+0xe8>
 8010ffc:	3c01      	subs	r4, #1
 8010ffe:	e7ea      	b.n	8010fd6 <quorem+0xe2>
 8011000:	2000      	movs	r0, #0
 8011002:	e7ee      	b.n	8010fe2 <quorem+0xee>
 8011004:	0000      	movs	r0, r0
	...

08011008 <_dtoa_r>:
 8011008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100c:	69c7      	ldr	r7, [r0, #28]
 801100e:	b097      	sub	sp, #92	@ 0x5c
 8011010:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011014:	ec55 4b10 	vmov	r4, r5, d0
 8011018:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801101a:	9107      	str	r1, [sp, #28]
 801101c:	4681      	mov	r9, r0
 801101e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011020:	9311      	str	r3, [sp, #68]	@ 0x44
 8011022:	b97f      	cbnz	r7, 8011044 <_dtoa_r+0x3c>
 8011024:	2010      	movs	r0, #16
 8011026:	f000 fe09 	bl	8011c3c <malloc>
 801102a:	4602      	mov	r2, r0
 801102c:	f8c9 001c 	str.w	r0, [r9, #28]
 8011030:	b920      	cbnz	r0, 801103c <_dtoa_r+0x34>
 8011032:	4ba9      	ldr	r3, [pc, #676]	@ (80112d8 <_dtoa_r+0x2d0>)
 8011034:	21ef      	movs	r1, #239	@ 0xef
 8011036:	48a9      	ldr	r0, [pc, #676]	@ (80112dc <_dtoa_r+0x2d4>)
 8011038:	f001 fb76 	bl	8012728 <__assert_func>
 801103c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011040:	6007      	str	r7, [r0, #0]
 8011042:	60c7      	str	r7, [r0, #12]
 8011044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011048:	6819      	ldr	r1, [r3, #0]
 801104a:	b159      	cbz	r1, 8011064 <_dtoa_r+0x5c>
 801104c:	685a      	ldr	r2, [r3, #4]
 801104e:	604a      	str	r2, [r1, #4]
 8011050:	2301      	movs	r3, #1
 8011052:	4093      	lsls	r3, r2
 8011054:	608b      	str	r3, [r1, #8]
 8011056:	4648      	mov	r0, r9
 8011058:	f000 ff92 	bl	8011f80 <_Bfree>
 801105c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011060:	2200      	movs	r2, #0
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	1e2b      	subs	r3, r5, #0
 8011066:	bfb9      	ittee	lt
 8011068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801106c:	9305      	strlt	r3, [sp, #20]
 801106e:	2300      	movge	r3, #0
 8011070:	6033      	strge	r3, [r6, #0]
 8011072:	9f05      	ldr	r7, [sp, #20]
 8011074:	4b9a      	ldr	r3, [pc, #616]	@ (80112e0 <_dtoa_r+0x2d8>)
 8011076:	bfbc      	itt	lt
 8011078:	2201      	movlt	r2, #1
 801107a:	6032      	strlt	r2, [r6, #0]
 801107c:	43bb      	bics	r3, r7
 801107e:	d112      	bne.n	80110a6 <_dtoa_r+0x9e>
 8011080:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011082:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011086:	6013      	str	r3, [r2, #0]
 8011088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801108c:	4323      	orrs	r3, r4
 801108e:	f000 855a 	beq.w	8011b46 <_dtoa_r+0xb3e>
 8011092:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011094:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80112f4 <_dtoa_r+0x2ec>
 8011098:	2b00      	cmp	r3, #0
 801109a:	f000 855c 	beq.w	8011b56 <_dtoa_r+0xb4e>
 801109e:	f10a 0303 	add.w	r3, sl, #3
 80110a2:	f000 bd56 	b.w	8011b52 <_dtoa_r+0xb4a>
 80110a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80110aa:	2200      	movs	r2, #0
 80110ac:	ec51 0b17 	vmov	r0, r1, d7
 80110b0:	2300      	movs	r3, #0
 80110b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80110b6:	f7ef fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80110ba:	4680      	mov	r8, r0
 80110bc:	b158      	cbz	r0, 80110d6 <_dtoa_r+0xce>
 80110be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80110c0:	2301      	movs	r3, #1
 80110c2:	6013      	str	r3, [r2, #0]
 80110c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80110c6:	b113      	cbz	r3, 80110ce <_dtoa_r+0xc6>
 80110c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80110ca:	4b86      	ldr	r3, [pc, #536]	@ (80112e4 <_dtoa_r+0x2dc>)
 80110cc:	6013      	str	r3, [r2, #0]
 80110ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80112f8 <_dtoa_r+0x2f0>
 80110d2:	f000 bd40 	b.w	8011b56 <_dtoa_r+0xb4e>
 80110d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80110da:	aa14      	add	r2, sp, #80	@ 0x50
 80110dc:	a915      	add	r1, sp, #84	@ 0x54
 80110de:	4648      	mov	r0, r9
 80110e0:	f001 fa30 	bl	8012544 <__d2b>
 80110e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80110e8:	9002      	str	r0, [sp, #8]
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	d078      	beq.n	80111e0 <_dtoa_r+0x1d8>
 80110ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80110f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80110fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011100:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011104:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011108:	4619      	mov	r1, r3
 801110a:	2200      	movs	r2, #0
 801110c:	4b76      	ldr	r3, [pc, #472]	@ (80112e8 <_dtoa_r+0x2e0>)
 801110e:	f7ef f8bb 	bl	8000288 <__aeabi_dsub>
 8011112:	a36b      	add	r3, pc, #428	@ (adr r3, 80112c0 <_dtoa_r+0x2b8>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	f7ef fa6e 	bl	80005f8 <__aeabi_dmul>
 801111c:	a36a      	add	r3, pc, #424	@ (adr r3, 80112c8 <_dtoa_r+0x2c0>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ef f8b3 	bl	800028c <__adddf3>
 8011126:	4604      	mov	r4, r0
 8011128:	4630      	mov	r0, r6
 801112a:	460d      	mov	r5, r1
 801112c:	f7ef f9fa 	bl	8000524 <__aeabi_i2d>
 8011130:	a367      	add	r3, pc, #412	@ (adr r3, 80112d0 <_dtoa_r+0x2c8>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	4620      	mov	r0, r4
 8011140:	4629      	mov	r1, r5
 8011142:	f7ef f8a3 	bl	800028c <__adddf3>
 8011146:	4604      	mov	r4, r0
 8011148:	460d      	mov	r5, r1
 801114a:	f7ef fd05 	bl	8000b58 <__aeabi_d2iz>
 801114e:	2200      	movs	r2, #0
 8011150:	4607      	mov	r7, r0
 8011152:	2300      	movs	r3, #0
 8011154:	4620      	mov	r0, r4
 8011156:	4629      	mov	r1, r5
 8011158:	f7ef fcc0 	bl	8000adc <__aeabi_dcmplt>
 801115c:	b140      	cbz	r0, 8011170 <_dtoa_r+0x168>
 801115e:	4638      	mov	r0, r7
 8011160:	f7ef f9e0 	bl	8000524 <__aeabi_i2d>
 8011164:	4622      	mov	r2, r4
 8011166:	462b      	mov	r3, r5
 8011168:	f7ef fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 801116c:	b900      	cbnz	r0, 8011170 <_dtoa_r+0x168>
 801116e:	3f01      	subs	r7, #1
 8011170:	2f16      	cmp	r7, #22
 8011172:	d852      	bhi.n	801121a <_dtoa_r+0x212>
 8011174:	4b5d      	ldr	r3, [pc, #372]	@ (80112ec <_dtoa_r+0x2e4>)
 8011176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011182:	f7ef fcab 	bl	8000adc <__aeabi_dcmplt>
 8011186:	2800      	cmp	r0, #0
 8011188:	d049      	beq.n	801121e <_dtoa_r+0x216>
 801118a:	3f01      	subs	r7, #1
 801118c:	2300      	movs	r3, #0
 801118e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011190:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011192:	1b9b      	subs	r3, r3, r6
 8011194:	1e5a      	subs	r2, r3, #1
 8011196:	bf45      	ittet	mi
 8011198:	f1c3 0301 	rsbmi	r3, r3, #1
 801119c:	9300      	strmi	r3, [sp, #0]
 801119e:	2300      	movpl	r3, #0
 80111a0:	2300      	movmi	r3, #0
 80111a2:	9206      	str	r2, [sp, #24]
 80111a4:	bf54      	ite	pl
 80111a6:	9300      	strpl	r3, [sp, #0]
 80111a8:	9306      	strmi	r3, [sp, #24]
 80111aa:	2f00      	cmp	r7, #0
 80111ac:	db39      	blt.n	8011222 <_dtoa_r+0x21a>
 80111ae:	9b06      	ldr	r3, [sp, #24]
 80111b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80111b2:	443b      	add	r3, r7
 80111b4:	9306      	str	r3, [sp, #24]
 80111b6:	2300      	movs	r3, #0
 80111b8:	9308      	str	r3, [sp, #32]
 80111ba:	9b07      	ldr	r3, [sp, #28]
 80111bc:	2b09      	cmp	r3, #9
 80111be:	d863      	bhi.n	8011288 <_dtoa_r+0x280>
 80111c0:	2b05      	cmp	r3, #5
 80111c2:	bfc4      	itt	gt
 80111c4:	3b04      	subgt	r3, #4
 80111c6:	9307      	strgt	r3, [sp, #28]
 80111c8:	9b07      	ldr	r3, [sp, #28]
 80111ca:	f1a3 0302 	sub.w	r3, r3, #2
 80111ce:	bfcc      	ite	gt
 80111d0:	2400      	movgt	r4, #0
 80111d2:	2401      	movle	r4, #1
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d863      	bhi.n	80112a0 <_dtoa_r+0x298>
 80111d8:	e8df f003 	tbb	[pc, r3]
 80111dc:	2b375452 	.word	0x2b375452
 80111e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80111e4:	441e      	add	r6, r3
 80111e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	bfc1      	itttt	gt
 80111ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80111f2:	409f      	lslgt	r7, r3
 80111f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80111f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80111fc:	bfd6      	itet	le
 80111fe:	f1c3 0320 	rsble	r3, r3, #32
 8011202:	ea47 0003 	orrgt.w	r0, r7, r3
 8011206:	fa04 f003 	lslle.w	r0, r4, r3
 801120a:	f7ef f97b 	bl	8000504 <__aeabi_ui2d>
 801120e:	2201      	movs	r2, #1
 8011210:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011214:	3e01      	subs	r6, #1
 8011216:	9212      	str	r2, [sp, #72]	@ 0x48
 8011218:	e776      	b.n	8011108 <_dtoa_r+0x100>
 801121a:	2301      	movs	r3, #1
 801121c:	e7b7      	b.n	801118e <_dtoa_r+0x186>
 801121e:	9010      	str	r0, [sp, #64]	@ 0x40
 8011220:	e7b6      	b.n	8011190 <_dtoa_r+0x188>
 8011222:	9b00      	ldr	r3, [sp, #0]
 8011224:	1bdb      	subs	r3, r3, r7
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	427b      	negs	r3, r7
 801122a:	9308      	str	r3, [sp, #32]
 801122c:	2300      	movs	r3, #0
 801122e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011230:	e7c3      	b.n	80111ba <_dtoa_r+0x1b2>
 8011232:	2301      	movs	r3, #1
 8011234:	9309      	str	r3, [sp, #36]	@ 0x24
 8011236:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011238:	eb07 0b03 	add.w	fp, r7, r3
 801123c:	f10b 0301 	add.w	r3, fp, #1
 8011240:	2b01      	cmp	r3, #1
 8011242:	9303      	str	r3, [sp, #12]
 8011244:	bfb8      	it	lt
 8011246:	2301      	movlt	r3, #1
 8011248:	e006      	b.n	8011258 <_dtoa_r+0x250>
 801124a:	2301      	movs	r3, #1
 801124c:	9309      	str	r3, [sp, #36]	@ 0x24
 801124e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011250:	2b00      	cmp	r3, #0
 8011252:	dd28      	ble.n	80112a6 <_dtoa_r+0x29e>
 8011254:	469b      	mov	fp, r3
 8011256:	9303      	str	r3, [sp, #12]
 8011258:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801125c:	2100      	movs	r1, #0
 801125e:	2204      	movs	r2, #4
 8011260:	f102 0514 	add.w	r5, r2, #20
 8011264:	429d      	cmp	r5, r3
 8011266:	d926      	bls.n	80112b6 <_dtoa_r+0x2ae>
 8011268:	6041      	str	r1, [r0, #4]
 801126a:	4648      	mov	r0, r9
 801126c:	f000 fe48 	bl	8011f00 <_Balloc>
 8011270:	4682      	mov	sl, r0
 8011272:	2800      	cmp	r0, #0
 8011274:	d142      	bne.n	80112fc <_dtoa_r+0x2f4>
 8011276:	4b1e      	ldr	r3, [pc, #120]	@ (80112f0 <_dtoa_r+0x2e8>)
 8011278:	4602      	mov	r2, r0
 801127a:	f240 11af 	movw	r1, #431	@ 0x1af
 801127e:	e6da      	b.n	8011036 <_dtoa_r+0x2e>
 8011280:	2300      	movs	r3, #0
 8011282:	e7e3      	b.n	801124c <_dtoa_r+0x244>
 8011284:	2300      	movs	r3, #0
 8011286:	e7d5      	b.n	8011234 <_dtoa_r+0x22c>
 8011288:	2401      	movs	r4, #1
 801128a:	2300      	movs	r3, #0
 801128c:	9307      	str	r3, [sp, #28]
 801128e:	9409      	str	r4, [sp, #36]	@ 0x24
 8011290:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011294:	2200      	movs	r2, #0
 8011296:	f8cd b00c 	str.w	fp, [sp, #12]
 801129a:	2312      	movs	r3, #18
 801129c:	920c      	str	r2, [sp, #48]	@ 0x30
 801129e:	e7db      	b.n	8011258 <_dtoa_r+0x250>
 80112a0:	2301      	movs	r3, #1
 80112a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80112a4:	e7f4      	b.n	8011290 <_dtoa_r+0x288>
 80112a6:	f04f 0b01 	mov.w	fp, #1
 80112aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80112ae:	465b      	mov	r3, fp
 80112b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80112b4:	e7d0      	b.n	8011258 <_dtoa_r+0x250>
 80112b6:	3101      	adds	r1, #1
 80112b8:	0052      	lsls	r2, r2, #1
 80112ba:	e7d1      	b.n	8011260 <_dtoa_r+0x258>
 80112bc:	f3af 8000 	nop.w
 80112c0:	636f4361 	.word	0x636f4361
 80112c4:	3fd287a7 	.word	0x3fd287a7
 80112c8:	8b60c8b3 	.word	0x8b60c8b3
 80112cc:	3fc68a28 	.word	0x3fc68a28
 80112d0:	509f79fb 	.word	0x509f79fb
 80112d4:	3fd34413 	.word	0x3fd34413
 80112d8:	08013bd1 	.word	0x08013bd1
 80112dc:	08013be8 	.word	0x08013be8
 80112e0:	7ff00000 	.word	0x7ff00000
 80112e4:	08013ba1 	.word	0x08013ba1
 80112e8:	3ff80000 	.word	0x3ff80000
 80112ec:	08013d38 	.word	0x08013d38
 80112f0:	08013c40 	.word	0x08013c40
 80112f4:	08013bcd 	.word	0x08013bcd
 80112f8:	08013ba0 	.word	0x08013ba0
 80112fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011300:	6018      	str	r0, [r3, #0]
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	2b0e      	cmp	r3, #14
 8011306:	f200 80a1 	bhi.w	801144c <_dtoa_r+0x444>
 801130a:	2c00      	cmp	r4, #0
 801130c:	f000 809e 	beq.w	801144c <_dtoa_r+0x444>
 8011310:	2f00      	cmp	r7, #0
 8011312:	dd33      	ble.n	801137c <_dtoa_r+0x374>
 8011314:	4b9c      	ldr	r3, [pc, #624]	@ (8011588 <_dtoa_r+0x580>)
 8011316:	f007 020f 	and.w	r2, r7, #15
 801131a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801131e:	ed93 7b00 	vldr	d7, [r3]
 8011322:	05f8      	lsls	r0, r7, #23
 8011324:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011328:	ea4f 1427 	mov.w	r4, r7, asr #4
 801132c:	d516      	bpl.n	801135c <_dtoa_r+0x354>
 801132e:	4b97      	ldr	r3, [pc, #604]	@ (801158c <_dtoa_r+0x584>)
 8011330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011338:	f7ef fa88 	bl	800084c <__aeabi_ddiv>
 801133c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011340:	f004 040f 	and.w	r4, r4, #15
 8011344:	2603      	movs	r6, #3
 8011346:	4d91      	ldr	r5, [pc, #580]	@ (801158c <_dtoa_r+0x584>)
 8011348:	b954      	cbnz	r4, 8011360 <_dtoa_r+0x358>
 801134a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801134e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011352:	f7ef fa7b 	bl	800084c <__aeabi_ddiv>
 8011356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801135a:	e028      	b.n	80113ae <_dtoa_r+0x3a6>
 801135c:	2602      	movs	r6, #2
 801135e:	e7f2      	b.n	8011346 <_dtoa_r+0x33e>
 8011360:	07e1      	lsls	r1, r4, #31
 8011362:	d508      	bpl.n	8011376 <_dtoa_r+0x36e>
 8011364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011368:	e9d5 2300 	ldrd	r2, r3, [r5]
 801136c:	f7ef f944 	bl	80005f8 <__aeabi_dmul>
 8011370:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011374:	3601      	adds	r6, #1
 8011376:	1064      	asrs	r4, r4, #1
 8011378:	3508      	adds	r5, #8
 801137a:	e7e5      	b.n	8011348 <_dtoa_r+0x340>
 801137c:	f000 80af 	beq.w	80114de <_dtoa_r+0x4d6>
 8011380:	427c      	negs	r4, r7
 8011382:	4b81      	ldr	r3, [pc, #516]	@ (8011588 <_dtoa_r+0x580>)
 8011384:	4d81      	ldr	r5, [pc, #516]	@ (801158c <_dtoa_r+0x584>)
 8011386:	f004 020f 	and.w	r2, r4, #15
 801138a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011396:	f7ef f92f 	bl	80005f8 <__aeabi_dmul>
 801139a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801139e:	1124      	asrs	r4, r4, #4
 80113a0:	2300      	movs	r3, #0
 80113a2:	2602      	movs	r6, #2
 80113a4:	2c00      	cmp	r4, #0
 80113a6:	f040 808f 	bne.w	80114c8 <_dtoa_r+0x4c0>
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1d3      	bne.n	8011356 <_dtoa_r+0x34e>
 80113ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	f000 8094 	beq.w	80114e2 <_dtoa_r+0x4da>
 80113ba:	4b75      	ldr	r3, [pc, #468]	@ (8011590 <_dtoa_r+0x588>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ef fb8b 	bl	8000adc <__aeabi_dcmplt>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	f000 808b 	beq.w	80114e2 <_dtoa_r+0x4da>
 80113cc:	9b03      	ldr	r3, [sp, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f000 8087 	beq.w	80114e2 <_dtoa_r+0x4da>
 80113d4:	f1bb 0f00 	cmp.w	fp, #0
 80113d8:	dd34      	ble.n	8011444 <_dtoa_r+0x43c>
 80113da:	4620      	mov	r0, r4
 80113dc:	4b6d      	ldr	r3, [pc, #436]	@ (8011594 <_dtoa_r+0x58c>)
 80113de:	2200      	movs	r2, #0
 80113e0:	4629      	mov	r1, r5
 80113e2:	f7ef f909 	bl	80005f8 <__aeabi_dmul>
 80113e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113ea:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80113ee:	3601      	adds	r6, #1
 80113f0:	465c      	mov	r4, fp
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ef f896 	bl	8000524 <__aeabi_i2d>
 80113f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113fc:	f7ef f8fc 	bl	80005f8 <__aeabi_dmul>
 8011400:	4b65      	ldr	r3, [pc, #404]	@ (8011598 <_dtoa_r+0x590>)
 8011402:	2200      	movs	r2, #0
 8011404:	f7ee ff42 	bl	800028c <__adddf3>
 8011408:	4605      	mov	r5, r0
 801140a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801140e:	2c00      	cmp	r4, #0
 8011410:	d16a      	bne.n	80114e8 <_dtoa_r+0x4e0>
 8011412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011416:	4b61      	ldr	r3, [pc, #388]	@ (801159c <_dtoa_r+0x594>)
 8011418:	2200      	movs	r2, #0
 801141a:	f7ee ff35 	bl	8000288 <__aeabi_dsub>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011426:	462a      	mov	r2, r5
 8011428:	4633      	mov	r3, r6
 801142a:	f7ef fb75 	bl	8000b18 <__aeabi_dcmpgt>
 801142e:	2800      	cmp	r0, #0
 8011430:	f040 8298 	bne.w	8011964 <_dtoa_r+0x95c>
 8011434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011438:	462a      	mov	r2, r5
 801143a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801143e:	f7ef fb4d 	bl	8000adc <__aeabi_dcmplt>
 8011442:	bb38      	cbnz	r0, 8011494 <_dtoa_r+0x48c>
 8011444:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011448:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801144c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801144e:	2b00      	cmp	r3, #0
 8011450:	f2c0 8157 	blt.w	8011702 <_dtoa_r+0x6fa>
 8011454:	2f0e      	cmp	r7, #14
 8011456:	f300 8154 	bgt.w	8011702 <_dtoa_r+0x6fa>
 801145a:	4b4b      	ldr	r3, [pc, #300]	@ (8011588 <_dtoa_r+0x580>)
 801145c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011460:	ed93 7b00 	vldr	d7, [r3]
 8011464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011466:	2b00      	cmp	r3, #0
 8011468:	ed8d 7b00 	vstr	d7, [sp]
 801146c:	f280 80e5 	bge.w	801163a <_dtoa_r+0x632>
 8011470:	9b03      	ldr	r3, [sp, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	f300 80e1 	bgt.w	801163a <_dtoa_r+0x632>
 8011478:	d10c      	bne.n	8011494 <_dtoa_r+0x48c>
 801147a:	4b48      	ldr	r3, [pc, #288]	@ (801159c <_dtoa_r+0x594>)
 801147c:	2200      	movs	r2, #0
 801147e:	ec51 0b17 	vmov	r0, r1, d7
 8011482:	f7ef f8b9 	bl	80005f8 <__aeabi_dmul>
 8011486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801148a:	f7ef fb3b 	bl	8000b04 <__aeabi_dcmpge>
 801148e:	2800      	cmp	r0, #0
 8011490:	f000 8266 	beq.w	8011960 <_dtoa_r+0x958>
 8011494:	2400      	movs	r4, #0
 8011496:	4625      	mov	r5, r4
 8011498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801149a:	4656      	mov	r6, sl
 801149c:	ea6f 0803 	mvn.w	r8, r3
 80114a0:	2700      	movs	r7, #0
 80114a2:	4621      	mov	r1, r4
 80114a4:	4648      	mov	r0, r9
 80114a6:	f000 fd6b 	bl	8011f80 <_Bfree>
 80114aa:	2d00      	cmp	r5, #0
 80114ac:	f000 80bd 	beq.w	801162a <_dtoa_r+0x622>
 80114b0:	b12f      	cbz	r7, 80114be <_dtoa_r+0x4b6>
 80114b2:	42af      	cmp	r7, r5
 80114b4:	d003      	beq.n	80114be <_dtoa_r+0x4b6>
 80114b6:	4639      	mov	r1, r7
 80114b8:	4648      	mov	r0, r9
 80114ba:	f000 fd61 	bl	8011f80 <_Bfree>
 80114be:	4629      	mov	r1, r5
 80114c0:	4648      	mov	r0, r9
 80114c2:	f000 fd5d 	bl	8011f80 <_Bfree>
 80114c6:	e0b0      	b.n	801162a <_dtoa_r+0x622>
 80114c8:	07e2      	lsls	r2, r4, #31
 80114ca:	d505      	bpl.n	80114d8 <_dtoa_r+0x4d0>
 80114cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80114d0:	f7ef f892 	bl	80005f8 <__aeabi_dmul>
 80114d4:	3601      	adds	r6, #1
 80114d6:	2301      	movs	r3, #1
 80114d8:	1064      	asrs	r4, r4, #1
 80114da:	3508      	adds	r5, #8
 80114dc:	e762      	b.n	80113a4 <_dtoa_r+0x39c>
 80114de:	2602      	movs	r6, #2
 80114e0:	e765      	b.n	80113ae <_dtoa_r+0x3a6>
 80114e2:	9c03      	ldr	r4, [sp, #12]
 80114e4:	46b8      	mov	r8, r7
 80114e6:	e784      	b.n	80113f2 <_dtoa_r+0x3ea>
 80114e8:	4b27      	ldr	r3, [pc, #156]	@ (8011588 <_dtoa_r+0x580>)
 80114ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80114ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80114f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80114f4:	4454      	add	r4, sl
 80114f6:	2900      	cmp	r1, #0
 80114f8:	d054      	beq.n	80115a4 <_dtoa_r+0x59c>
 80114fa:	4929      	ldr	r1, [pc, #164]	@ (80115a0 <_dtoa_r+0x598>)
 80114fc:	2000      	movs	r0, #0
 80114fe:	f7ef f9a5 	bl	800084c <__aeabi_ddiv>
 8011502:	4633      	mov	r3, r6
 8011504:	462a      	mov	r2, r5
 8011506:	f7ee febf 	bl	8000288 <__aeabi_dsub>
 801150a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801150e:	4656      	mov	r6, sl
 8011510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011514:	f7ef fb20 	bl	8000b58 <__aeabi_d2iz>
 8011518:	4605      	mov	r5, r0
 801151a:	f7ef f803 	bl	8000524 <__aeabi_i2d>
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011526:	f7ee feaf 	bl	8000288 <__aeabi_dsub>
 801152a:	3530      	adds	r5, #48	@ 0x30
 801152c:	4602      	mov	r2, r0
 801152e:	460b      	mov	r3, r1
 8011530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011534:	f806 5b01 	strb.w	r5, [r6], #1
 8011538:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801153c:	f7ef face 	bl	8000adc <__aeabi_dcmplt>
 8011540:	2800      	cmp	r0, #0
 8011542:	d172      	bne.n	801162a <_dtoa_r+0x622>
 8011544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011548:	4911      	ldr	r1, [pc, #68]	@ (8011590 <_dtoa_r+0x588>)
 801154a:	2000      	movs	r0, #0
 801154c:	f7ee fe9c 	bl	8000288 <__aeabi_dsub>
 8011550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011554:	f7ef fac2 	bl	8000adc <__aeabi_dcmplt>
 8011558:	2800      	cmp	r0, #0
 801155a:	f040 80b4 	bne.w	80116c6 <_dtoa_r+0x6be>
 801155e:	42a6      	cmp	r6, r4
 8011560:	f43f af70 	beq.w	8011444 <_dtoa_r+0x43c>
 8011564:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011568:	4b0a      	ldr	r3, [pc, #40]	@ (8011594 <_dtoa_r+0x58c>)
 801156a:	2200      	movs	r2, #0
 801156c:	f7ef f844 	bl	80005f8 <__aeabi_dmul>
 8011570:	4b08      	ldr	r3, [pc, #32]	@ (8011594 <_dtoa_r+0x58c>)
 8011572:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011576:	2200      	movs	r2, #0
 8011578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801157c:	f7ef f83c 	bl	80005f8 <__aeabi_dmul>
 8011580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011584:	e7c4      	b.n	8011510 <_dtoa_r+0x508>
 8011586:	bf00      	nop
 8011588:	08013d38 	.word	0x08013d38
 801158c:	08013d10 	.word	0x08013d10
 8011590:	3ff00000 	.word	0x3ff00000
 8011594:	40240000 	.word	0x40240000
 8011598:	401c0000 	.word	0x401c0000
 801159c:	40140000 	.word	0x40140000
 80115a0:	3fe00000 	.word	0x3fe00000
 80115a4:	4631      	mov	r1, r6
 80115a6:	4628      	mov	r0, r5
 80115a8:	f7ef f826 	bl	80005f8 <__aeabi_dmul>
 80115ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80115b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80115b2:	4656      	mov	r6, sl
 80115b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115b8:	f7ef face 	bl	8000b58 <__aeabi_d2iz>
 80115bc:	4605      	mov	r5, r0
 80115be:	f7ee ffb1 	bl	8000524 <__aeabi_i2d>
 80115c2:	4602      	mov	r2, r0
 80115c4:	460b      	mov	r3, r1
 80115c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115ca:	f7ee fe5d 	bl	8000288 <__aeabi_dsub>
 80115ce:	3530      	adds	r5, #48	@ 0x30
 80115d0:	f806 5b01 	strb.w	r5, [r6], #1
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	42a6      	cmp	r6, r4
 80115da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80115de:	f04f 0200 	mov.w	r2, #0
 80115e2:	d124      	bne.n	801162e <_dtoa_r+0x626>
 80115e4:	4baf      	ldr	r3, [pc, #700]	@ (80118a4 <_dtoa_r+0x89c>)
 80115e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80115ea:	f7ee fe4f 	bl	800028c <__adddf3>
 80115ee:	4602      	mov	r2, r0
 80115f0:	460b      	mov	r3, r1
 80115f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115f6:	f7ef fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	d163      	bne.n	80116c6 <_dtoa_r+0x6be>
 80115fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011602:	49a8      	ldr	r1, [pc, #672]	@ (80118a4 <_dtoa_r+0x89c>)
 8011604:	2000      	movs	r0, #0
 8011606:	f7ee fe3f 	bl	8000288 <__aeabi_dsub>
 801160a:	4602      	mov	r2, r0
 801160c:	460b      	mov	r3, r1
 801160e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011612:	f7ef fa63 	bl	8000adc <__aeabi_dcmplt>
 8011616:	2800      	cmp	r0, #0
 8011618:	f43f af14 	beq.w	8011444 <_dtoa_r+0x43c>
 801161c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801161e:	1e73      	subs	r3, r6, #1
 8011620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011622:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011626:	2b30      	cmp	r3, #48	@ 0x30
 8011628:	d0f8      	beq.n	801161c <_dtoa_r+0x614>
 801162a:	4647      	mov	r7, r8
 801162c:	e03b      	b.n	80116a6 <_dtoa_r+0x69e>
 801162e:	4b9e      	ldr	r3, [pc, #632]	@ (80118a8 <_dtoa_r+0x8a0>)
 8011630:	f7ee ffe2 	bl	80005f8 <__aeabi_dmul>
 8011634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011638:	e7bc      	b.n	80115b4 <_dtoa_r+0x5ac>
 801163a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801163e:	4656      	mov	r6, sl
 8011640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011644:	4620      	mov	r0, r4
 8011646:	4629      	mov	r1, r5
 8011648:	f7ef f900 	bl	800084c <__aeabi_ddiv>
 801164c:	f7ef fa84 	bl	8000b58 <__aeabi_d2iz>
 8011650:	4680      	mov	r8, r0
 8011652:	f7ee ff67 	bl	8000524 <__aeabi_i2d>
 8011656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801165a:	f7ee ffcd 	bl	80005f8 <__aeabi_dmul>
 801165e:	4602      	mov	r2, r0
 8011660:	460b      	mov	r3, r1
 8011662:	4620      	mov	r0, r4
 8011664:	4629      	mov	r1, r5
 8011666:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801166a:	f7ee fe0d 	bl	8000288 <__aeabi_dsub>
 801166e:	f806 4b01 	strb.w	r4, [r6], #1
 8011672:	9d03      	ldr	r5, [sp, #12]
 8011674:	eba6 040a 	sub.w	r4, r6, sl
 8011678:	42a5      	cmp	r5, r4
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	d133      	bne.n	80116e8 <_dtoa_r+0x6e0>
 8011680:	f7ee fe04 	bl	800028c <__adddf3>
 8011684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011688:	4604      	mov	r4, r0
 801168a:	460d      	mov	r5, r1
 801168c:	f7ef fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8011690:	b9c0      	cbnz	r0, 80116c4 <_dtoa_r+0x6bc>
 8011692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011696:	4620      	mov	r0, r4
 8011698:	4629      	mov	r1, r5
 801169a:	f7ef fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 801169e:	b110      	cbz	r0, 80116a6 <_dtoa_r+0x69e>
 80116a0:	f018 0f01 	tst.w	r8, #1
 80116a4:	d10e      	bne.n	80116c4 <_dtoa_r+0x6bc>
 80116a6:	9902      	ldr	r1, [sp, #8]
 80116a8:	4648      	mov	r0, r9
 80116aa:	f000 fc69 	bl	8011f80 <_Bfree>
 80116ae:	2300      	movs	r3, #0
 80116b0:	7033      	strb	r3, [r6, #0]
 80116b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80116b4:	3701      	adds	r7, #1
 80116b6:	601f      	str	r7, [r3, #0]
 80116b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f000 824b 	beq.w	8011b56 <_dtoa_r+0xb4e>
 80116c0:	601e      	str	r6, [r3, #0]
 80116c2:	e248      	b.n	8011b56 <_dtoa_r+0xb4e>
 80116c4:	46b8      	mov	r8, r7
 80116c6:	4633      	mov	r3, r6
 80116c8:	461e      	mov	r6, r3
 80116ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116ce:	2a39      	cmp	r2, #57	@ 0x39
 80116d0:	d106      	bne.n	80116e0 <_dtoa_r+0x6d8>
 80116d2:	459a      	cmp	sl, r3
 80116d4:	d1f8      	bne.n	80116c8 <_dtoa_r+0x6c0>
 80116d6:	2230      	movs	r2, #48	@ 0x30
 80116d8:	f108 0801 	add.w	r8, r8, #1
 80116dc:	f88a 2000 	strb.w	r2, [sl]
 80116e0:	781a      	ldrb	r2, [r3, #0]
 80116e2:	3201      	adds	r2, #1
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e7a0      	b.n	801162a <_dtoa_r+0x622>
 80116e8:	4b6f      	ldr	r3, [pc, #444]	@ (80118a8 <_dtoa_r+0x8a0>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	f7ee ff84 	bl	80005f8 <__aeabi_dmul>
 80116f0:	2200      	movs	r2, #0
 80116f2:	2300      	movs	r3, #0
 80116f4:	4604      	mov	r4, r0
 80116f6:	460d      	mov	r5, r1
 80116f8:	f7ef f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d09f      	beq.n	8011640 <_dtoa_r+0x638>
 8011700:	e7d1      	b.n	80116a6 <_dtoa_r+0x69e>
 8011702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011704:	2a00      	cmp	r2, #0
 8011706:	f000 80ea 	beq.w	80118de <_dtoa_r+0x8d6>
 801170a:	9a07      	ldr	r2, [sp, #28]
 801170c:	2a01      	cmp	r2, #1
 801170e:	f300 80cd 	bgt.w	80118ac <_dtoa_r+0x8a4>
 8011712:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011714:	2a00      	cmp	r2, #0
 8011716:	f000 80c1 	beq.w	801189c <_dtoa_r+0x894>
 801171a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801171e:	9c08      	ldr	r4, [sp, #32]
 8011720:	9e00      	ldr	r6, [sp, #0]
 8011722:	9a00      	ldr	r2, [sp, #0]
 8011724:	441a      	add	r2, r3
 8011726:	9200      	str	r2, [sp, #0]
 8011728:	9a06      	ldr	r2, [sp, #24]
 801172a:	2101      	movs	r1, #1
 801172c:	441a      	add	r2, r3
 801172e:	4648      	mov	r0, r9
 8011730:	9206      	str	r2, [sp, #24]
 8011732:	f000 fcd9 	bl	80120e8 <__i2b>
 8011736:	4605      	mov	r5, r0
 8011738:	b166      	cbz	r6, 8011754 <_dtoa_r+0x74c>
 801173a:	9b06      	ldr	r3, [sp, #24]
 801173c:	2b00      	cmp	r3, #0
 801173e:	dd09      	ble.n	8011754 <_dtoa_r+0x74c>
 8011740:	42b3      	cmp	r3, r6
 8011742:	9a00      	ldr	r2, [sp, #0]
 8011744:	bfa8      	it	ge
 8011746:	4633      	movge	r3, r6
 8011748:	1ad2      	subs	r2, r2, r3
 801174a:	9200      	str	r2, [sp, #0]
 801174c:	9a06      	ldr	r2, [sp, #24]
 801174e:	1af6      	subs	r6, r6, r3
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	9306      	str	r3, [sp, #24]
 8011754:	9b08      	ldr	r3, [sp, #32]
 8011756:	b30b      	cbz	r3, 801179c <_dtoa_r+0x794>
 8011758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801175a:	2b00      	cmp	r3, #0
 801175c:	f000 80c6 	beq.w	80118ec <_dtoa_r+0x8e4>
 8011760:	2c00      	cmp	r4, #0
 8011762:	f000 80c0 	beq.w	80118e6 <_dtoa_r+0x8de>
 8011766:	4629      	mov	r1, r5
 8011768:	4622      	mov	r2, r4
 801176a:	4648      	mov	r0, r9
 801176c:	f000 fd74 	bl	8012258 <__pow5mult>
 8011770:	9a02      	ldr	r2, [sp, #8]
 8011772:	4601      	mov	r1, r0
 8011774:	4605      	mov	r5, r0
 8011776:	4648      	mov	r0, r9
 8011778:	f000 fccc 	bl	8012114 <__multiply>
 801177c:	9902      	ldr	r1, [sp, #8]
 801177e:	4680      	mov	r8, r0
 8011780:	4648      	mov	r0, r9
 8011782:	f000 fbfd 	bl	8011f80 <_Bfree>
 8011786:	9b08      	ldr	r3, [sp, #32]
 8011788:	1b1b      	subs	r3, r3, r4
 801178a:	9308      	str	r3, [sp, #32]
 801178c:	f000 80b1 	beq.w	80118f2 <_dtoa_r+0x8ea>
 8011790:	9a08      	ldr	r2, [sp, #32]
 8011792:	4641      	mov	r1, r8
 8011794:	4648      	mov	r0, r9
 8011796:	f000 fd5f 	bl	8012258 <__pow5mult>
 801179a:	9002      	str	r0, [sp, #8]
 801179c:	2101      	movs	r1, #1
 801179e:	4648      	mov	r0, r9
 80117a0:	f000 fca2 	bl	80120e8 <__i2b>
 80117a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117a6:	4604      	mov	r4, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f000 81d8 	beq.w	8011b5e <_dtoa_r+0xb56>
 80117ae:	461a      	mov	r2, r3
 80117b0:	4601      	mov	r1, r0
 80117b2:	4648      	mov	r0, r9
 80117b4:	f000 fd50 	bl	8012258 <__pow5mult>
 80117b8:	9b07      	ldr	r3, [sp, #28]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	4604      	mov	r4, r0
 80117be:	f300 809f 	bgt.w	8011900 <_dtoa_r+0x8f8>
 80117c2:	9b04      	ldr	r3, [sp, #16]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f040 8097 	bne.w	80118f8 <_dtoa_r+0x8f0>
 80117ca:	9b05      	ldr	r3, [sp, #20]
 80117cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f040 8093 	bne.w	80118fc <_dtoa_r+0x8f4>
 80117d6:	9b05      	ldr	r3, [sp, #20]
 80117d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80117dc:	0d1b      	lsrs	r3, r3, #20
 80117de:	051b      	lsls	r3, r3, #20
 80117e0:	b133      	cbz	r3, 80117f0 <_dtoa_r+0x7e8>
 80117e2:	9b00      	ldr	r3, [sp, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	9b06      	ldr	r3, [sp, #24]
 80117ea:	3301      	adds	r3, #1
 80117ec:	9306      	str	r3, [sp, #24]
 80117ee:	2301      	movs	r3, #1
 80117f0:	9308      	str	r3, [sp, #32]
 80117f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 81b8 	beq.w	8011b6a <_dtoa_r+0xb62>
 80117fa:	6923      	ldr	r3, [r4, #16]
 80117fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011800:	6918      	ldr	r0, [r3, #16]
 8011802:	f000 fc25 	bl	8012050 <__hi0bits>
 8011806:	f1c0 0020 	rsb	r0, r0, #32
 801180a:	9b06      	ldr	r3, [sp, #24]
 801180c:	4418      	add	r0, r3
 801180e:	f010 001f 	ands.w	r0, r0, #31
 8011812:	f000 8082 	beq.w	801191a <_dtoa_r+0x912>
 8011816:	f1c0 0320 	rsb	r3, r0, #32
 801181a:	2b04      	cmp	r3, #4
 801181c:	dd73      	ble.n	8011906 <_dtoa_r+0x8fe>
 801181e:	9b00      	ldr	r3, [sp, #0]
 8011820:	f1c0 001c 	rsb	r0, r0, #28
 8011824:	4403      	add	r3, r0
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	9b06      	ldr	r3, [sp, #24]
 801182a:	4403      	add	r3, r0
 801182c:	4406      	add	r6, r0
 801182e:	9306      	str	r3, [sp, #24]
 8011830:	9b00      	ldr	r3, [sp, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	dd05      	ble.n	8011842 <_dtoa_r+0x83a>
 8011836:	9902      	ldr	r1, [sp, #8]
 8011838:	461a      	mov	r2, r3
 801183a:	4648      	mov	r0, r9
 801183c:	f000 fd66 	bl	801230c <__lshift>
 8011840:	9002      	str	r0, [sp, #8]
 8011842:	9b06      	ldr	r3, [sp, #24]
 8011844:	2b00      	cmp	r3, #0
 8011846:	dd05      	ble.n	8011854 <_dtoa_r+0x84c>
 8011848:	4621      	mov	r1, r4
 801184a:	461a      	mov	r2, r3
 801184c:	4648      	mov	r0, r9
 801184e:	f000 fd5d 	bl	801230c <__lshift>
 8011852:	4604      	mov	r4, r0
 8011854:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011856:	2b00      	cmp	r3, #0
 8011858:	d061      	beq.n	801191e <_dtoa_r+0x916>
 801185a:	9802      	ldr	r0, [sp, #8]
 801185c:	4621      	mov	r1, r4
 801185e:	f000 fdc1 	bl	80123e4 <__mcmp>
 8011862:	2800      	cmp	r0, #0
 8011864:	da5b      	bge.n	801191e <_dtoa_r+0x916>
 8011866:	2300      	movs	r3, #0
 8011868:	9902      	ldr	r1, [sp, #8]
 801186a:	220a      	movs	r2, #10
 801186c:	4648      	mov	r0, r9
 801186e:	f000 fba9 	bl	8011fc4 <__multadd>
 8011872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011874:	9002      	str	r0, [sp, #8]
 8011876:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 8177 	beq.w	8011b6e <_dtoa_r+0xb66>
 8011880:	4629      	mov	r1, r5
 8011882:	2300      	movs	r3, #0
 8011884:	220a      	movs	r2, #10
 8011886:	4648      	mov	r0, r9
 8011888:	f000 fb9c 	bl	8011fc4 <__multadd>
 801188c:	f1bb 0f00 	cmp.w	fp, #0
 8011890:	4605      	mov	r5, r0
 8011892:	dc6f      	bgt.n	8011974 <_dtoa_r+0x96c>
 8011894:	9b07      	ldr	r3, [sp, #28]
 8011896:	2b02      	cmp	r3, #2
 8011898:	dc49      	bgt.n	801192e <_dtoa_r+0x926>
 801189a:	e06b      	b.n	8011974 <_dtoa_r+0x96c>
 801189c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801189e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80118a2:	e73c      	b.n	801171e <_dtoa_r+0x716>
 80118a4:	3fe00000 	.word	0x3fe00000
 80118a8:	40240000 	.word	0x40240000
 80118ac:	9b03      	ldr	r3, [sp, #12]
 80118ae:	1e5c      	subs	r4, r3, #1
 80118b0:	9b08      	ldr	r3, [sp, #32]
 80118b2:	42a3      	cmp	r3, r4
 80118b4:	db09      	blt.n	80118ca <_dtoa_r+0x8c2>
 80118b6:	1b1c      	subs	r4, r3, r4
 80118b8:	9b03      	ldr	r3, [sp, #12]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f6bf af30 	bge.w	8011720 <_dtoa_r+0x718>
 80118c0:	9b00      	ldr	r3, [sp, #0]
 80118c2:	9a03      	ldr	r2, [sp, #12]
 80118c4:	1a9e      	subs	r6, r3, r2
 80118c6:	2300      	movs	r3, #0
 80118c8:	e72b      	b.n	8011722 <_dtoa_r+0x71a>
 80118ca:	9b08      	ldr	r3, [sp, #32]
 80118cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118ce:	9408      	str	r4, [sp, #32]
 80118d0:	1ae3      	subs	r3, r4, r3
 80118d2:	441a      	add	r2, r3
 80118d4:	9e00      	ldr	r6, [sp, #0]
 80118d6:	9b03      	ldr	r3, [sp, #12]
 80118d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80118da:	2400      	movs	r4, #0
 80118dc:	e721      	b.n	8011722 <_dtoa_r+0x71a>
 80118de:	9c08      	ldr	r4, [sp, #32]
 80118e0:	9e00      	ldr	r6, [sp, #0]
 80118e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80118e4:	e728      	b.n	8011738 <_dtoa_r+0x730>
 80118e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80118ea:	e751      	b.n	8011790 <_dtoa_r+0x788>
 80118ec:	9a08      	ldr	r2, [sp, #32]
 80118ee:	9902      	ldr	r1, [sp, #8]
 80118f0:	e750      	b.n	8011794 <_dtoa_r+0x78c>
 80118f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80118f6:	e751      	b.n	801179c <_dtoa_r+0x794>
 80118f8:	2300      	movs	r3, #0
 80118fa:	e779      	b.n	80117f0 <_dtoa_r+0x7e8>
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	e777      	b.n	80117f0 <_dtoa_r+0x7e8>
 8011900:	2300      	movs	r3, #0
 8011902:	9308      	str	r3, [sp, #32]
 8011904:	e779      	b.n	80117fa <_dtoa_r+0x7f2>
 8011906:	d093      	beq.n	8011830 <_dtoa_r+0x828>
 8011908:	9a00      	ldr	r2, [sp, #0]
 801190a:	331c      	adds	r3, #28
 801190c:	441a      	add	r2, r3
 801190e:	9200      	str	r2, [sp, #0]
 8011910:	9a06      	ldr	r2, [sp, #24]
 8011912:	441a      	add	r2, r3
 8011914:	441e      	add	r6, r3
 8011916:	9206      	str	r2, [sp, #24]
 8011918:	e78a      	b.n	8011830 <_dtoa_r+0x828>
 801191a:	4603      	mov	r3, r0
 801191c:	e7f4      	b.n	8011908 <_dtoa_r+0x900>
 801191e:	9b03      	ldr	r3, [sp, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	46b8      	mov	r8, r7
 8011924:	dc20      	bgt.n	8011968 <_dtoa_r+0x960>
 8011926:	469b      	mov	fp, r3
 8011928:	9b07      	ldr	r3, [sp, #28]
 801192a:	2b02      	cmp	r3, #2
 801192c:	dd1e      	ble.n	801196c <_dtoa_r+0x964>
 801192e:	f1bb 0f00 	cmp.w	fp, #0
 8011932:	f47f adb1 	bne.w	8011498 <_dtoa_r+0x490>
 8011936:	4621      	mov	r1, r4
 8011938:	465b      	mov	r3, fp
 801193a:	2205      	movs	r2, #5
 801193c:	4648      	mov	r0, r9
 801193e:	f000 fb41 	bl	8011fc4 <__multadd>
 8011942:	4601      	mov	r1, r0
 8011944:	4604      	mov	r4, r0
 8011946:	9802      	ldr	r0, [sp, #8]
 8011948:	f000 fd4c 	bl	80123e4 <__mcmp>
 801194c:	2800      	cmp	r0, #0
 801194e:	f77f ada3 	ble.w	8011498 <_dtoa_r+0x490>
 8011952:	4656      	mov	r6, sl
 8011954:	2331      	movs	r3, #49	@ 0x31
 8011956:	f806 3b01 	strb.w	r3, [r6], #1
 801195a:	f108 0801 	add.w	r8, r8, #1
 801195e:	e59f      	b.n	80114a0 <_dtoa_r+0x498>
 8011960:	9c03      	ldr	r4, [sp, #12]
 8011962:	46b8      	mov	r8, r7
 8011964:	4625      	mov	r5, r4
 8011966:	e7f4      	b.n	8011952 <_dtoa_r+0x94a>
 8011968:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801196c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196e:	2b00      	cmp	r3, #0
 8011970:	f000 8101 	beq.w	8011b76 <_dtoa_r+0xb6e>
 8011974:	2e00      	cmp	r6, #0
 8011976:	dd05      	ble.n	8011984 <_dtoa_r+0x97c>
 8011978:	4629      	mov	r1, r5
 801197a:	4632      	mov	r2, r6
 801197c:	4648      	mov	r0, r9
 801197e:	f000 fcc5 	bl	801230c <__lshift>
 8011982:	4605      	mov	r5, r0
 8011984:	9b08      	ldr	r3, [sp, #32]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d05c      	beq.n	8011a44 <_dtoa_r+0xa3c>
 801198a:	6869      	ldr	r1, [r5, #4]
 801198c:	4648      	mov	r0, r9
 801198e:	f000 fab7 	bl	8011f00 <_Balloc>
 8011992:	4606      	mov	r6, r0
 8011994:	b928      	cbnz	r0, 80119a2 <_dtoa_r+0x99a>
 8011996:	4b82      	ldr	r3, [pc, #520]	@ (8011ba0 <_dtoa_r+0xb98>)
 8011998:	4602      	mov	r2, r0
 801199a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801199e:	f7ff bb4a 	b.w	8011036 <_dtoa_r+0x2e>
 80119a2:	692a      	ldr	r2, [r5, #16]
 80119a4:	3202      	adds	r2, #2
 80119a6:	0092      	lsls	r2, r2, #2
 80119a8:	f105 010c 	add.w	r1, r5, #12
 80119ac:	300c      	adds	r0, #12
 80119ae:	f7ff fa93 	bl	8010ed8 <memcpy>
 80119b2:	2201      	movs	r2, #1
 80119b4:	4631      	mov	r1, r6
 80119b6:	4648      	mov	r0, r9
 80119b8:	f000 fca8 	bl	801230c <__lshift>
 80119bc:	f10a 0301 	add.w	r3, sl, #1
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	eb0a 030b 	add.w	r3, sl, fp
 80119c6:	9308      	str	r3, [sp, #32]
 80119c8:	9b04      	ldr	r3, [sp, #16]
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	462f      	mov	r7, r5
 80119d0:	9306      	str	r3, [sp, #24]
 80119d2:	4605      	mov	r5, r0
 80119d4:	9b00      	ldr	r3, [sp, #0]
 80119d6:	9802      	ldr	r0, [sp, #8]
 80119d8:	4621      	mov	r1, r4
 80119da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80119de:	f7ff fa89 	bl	8010ef4 <quorem>
 80119e2:	4603      	mov	r3, r0
 80119e4:	3330      	adds	r3, #48	@ 0x30
 80119e6:	9003      	str	r0, [sp, #12]
 80119e8:	4639      	mov	r1, r7
 80119ea:	9802      	ldr	r0, [sp, #8]
 80119ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ee:	f000 fcf9 	bl	80123e4 <__mcmp>
 80119f2:	462a      	mov	r2, r5
 80119f4:	9004      	str	r0, [sp, #16]
 80119f6:	4621      	mov	r1, r4
 80119f8:	4648      	mov	r0, r9
 80119fa:	f000 fd0f 	bl	801241c <__mdiff>
 80119fe:	68c2      	ldr	r2, [r0, #12]
 8011a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a02:	4606      	mov	r6, r0
 8011a04:	bb02      	cbnz	r2, 8011a48 <_dtoa_r+0xa40>
 8011a06:	4601      	mov	r1, r0
 8011a08:	9802      	ldr	r0, [sp, #8]
 8011a0a:	f000 fceb 	bl	80123e4 <__mcmp>
 8011a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a10:	4602      	mov	r2, r0
 8011a12:	4631      	mov	r1, r6
 8011a14:	4648      	mov	r0, r9
 8011a16:	920c      	str	r2, [sp, #48]	@ 0x30
 8011a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a1a:	f000 fab1 	bl	8011f80 <_Bfree>
 8011a1e:	9b07      	ldr	r3, [sp, #28]
 8011a20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011a22:	9e00      	ldr	r6, [sp, #0]
 8011a24:	ea42 0103 	orr.w	r1, r2, r3
 8011a28:	9b06      	ldr	r3, [sp, #24]
 8011a2a:	4319      	orrs	r1, r3
 8011a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a2e:	d10d      	bne.n	8011a4c <_dtoa_r+0xa44>
 8011a30:	2b39      	cmp	r3, #57	@ 0x39
 8011a32:	d027      	beq.n	8011a84 <_dtoa_r+0xa7c>
 8011a34:	9a04      	ldr	r2, [sp, #16]
 8011a36:	2a00      	cmp	r2, #0
 8011a38:	dd01      	ble.n	8011a3e <_dtoa_r+0xa36>
 8011a3a:	9b03      	ldr	r3, [sp, #12]
 8011a3c:	3331      	adds	r3, #49	@ 0x31
 8011a3e:	f88b 3000 	strb.w	r3, [fp]
 8011a42:	e52e      	b.n	80114a2 <_dtoa_r+0x49a>
 8011a44:	4628      	mov	r0, r5
 8011a46:	e7b9      	b.n	80119bc <_dtoa_r+0x9b4>
 8011a48:	2201      	movs	r2, #1
 8011a4a:	e7e2      	b.n	8011a12 <_dtoa_r+0xa0a>
 8011a4c:	9904      	ldr	r1, [sp, #16]
 8011a4e:	2900      	cmp	r1, #0
 8011a50:	db04      	blt.n	8011a5c <_dtoa_r+0xa54>
 8011a52:	9807      	ldr	r0, [sp, #28]
 8011a54:	4301      	orrs	r1, r0
 8011a56:	9806      	ldr	r0, [sp, #24]
 8011a58:	4301      	orrs	r1, r0
 8011a5a:	d120      	bne.n	8011a9e <_dtoa_r+0xa96>
 8011a5c:	2a00      	cmp	r2, #0
 8011a5e:	ddee      	ble.n	8011a3e <_dtoa_r+0xa36>
 8011a60:	9902      	ldr	r1, [sp, #8]
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	2201      	movs	r2, #1
 8011a66:	4648      	mov	r0, r9
 8011a68:	f000 fc50 	bl	801230c <__lshift>
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	9002      	str	r0, [sp, #8]
 8011a70:	f000 fcb8 	bl	80123e4 <__mcmp>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	9b00      	ldr	r3, [sp, #0]
 8011a78:	dc02      	bgt.n	8011a80 <_dtoa_r+0xa78>
 8011a7a:	d1e0      	bne.n	8011a3e <_dtoa_r+0xa36>
 8011a7c:	07da      	lsls	r2, r3, #31
 8011a7e:	d5de      	bpl.n	8011a3e <_dtoa_r+0xa36>
 8011a80:	2b39      	cmp	r3, #57	@ 0x39
 8011a82:	d1da      	bne.n	8011a3a <_dtoa_r+0xa32>
 8011a84:	2339      	movs	r3, #57	@ 0x39
 8011a86:	f88b 3000 	strb.w	r3, [fp]
 8011a8a:	4633      	mov	r3, r6
 8011a8c:	461e      	mov	r6, r3
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011a94:	2a39      	cmp	r2, #57	@ 0x39
 8011a96:	d04e      	beq.n	8011b36 <_dtoa_r+0xb2e>
 8011a98:	3201      	adds	r2, #1
 8011a9a:	701a      	strb	r2, [r3, #0]
 8011a9c:	e501      	b.n	80114a2 <_dtoa_r+0x49a>
 8011a9e:	2a00      	cmp	r2, #0
 8011aa0:	dd03      	ble.n	8011aaa <_dtoa_r+0xaa2>
 8011aa2:	2b39      	cmp	r3, #57	@ 0x39
 8011aa4:	d0ee      	beq.n	8011a84 <_dtoa_r+0xa7c>
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	e7c9      	b.n	8011a3e <_dtoa_r+0xa36>
 8011aaa:	9a00      	ldr	r2, [sp, #0]
 8011aac:	9908      	ldr	r1, [sp, #32]
 8011aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011ab2:	428a      	cmp	r2, r1
 8011ab4:	d028      	beq.n	8011b08 <_dtoa_r+0xb00>
 8011ab6:	9902      	ldr	r1, [sp, #8]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	220a      	movs	r2, #10
 8011abc:	4648      	mov	r0, r9
 8011abe:	f000 fa81 	bl	8011fc4 <__multadd>
 8011ac2:	42af      	cmp	r7, r5
 8011ac4:	9002      	str	r0, [sp, #8]
 8011ac6:	f04f 0300 	mov.w	r3, #0
 8011aca:	f04f 020a 	mov.w	r2, #10
 8011ace:	4639      	mov	r1, r7
 8011ad0:	4648      	mov	r0, r9
 8011ad2:	d107      	bne.n	8011ae4 <_dtoa_r+0xadc>
 8011ad4:	f000 fa76 	bl	8011fc4 <__multadd>
 8011ad8:	4607      	mov	r7, r0
 8011ada:	4605      	mov	r5, r0
 8011adc:	9b00      	ldr	r3, [sp, #0]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	e777      	b.n	80119d4 <_dtoa_r+0x9cc>
 8011ae4:	f000 fa6e 	bl	8011fc4 <__multadd>
 8011ae8:	4629      	mov	r1, r5
 8011aea:	4607      	mov	r7, r0
 8011aec:	2300      	movs	r3, #0
 8011aee:	220a      	movs	r2, #10
 8011af0:	4648      	mov	r0, r9
 8011af2:	f000 fa67 	bl	8011fc4 <__multadd>
 8011af6:	4605      	mov	r5, r0
 8011af8:	e7f0      	b.n	8011adc <_dtoa_r+0xad4>
 8011afa:	f1bb 0f00 	cmp.w	fp, #0
 8011afe:	bfcc      	ite	gt
 8011b00:	465e      	movgt	r6, fp
 8011b02:	2601      	movle	r6, #1
 8011b04:	4456      	add	r6, sl
 8011b06:	2700      	movs	r7, #0
 8011b08:	9902      	ldr	r1, [sp, #8]
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	4648      	mov	r0, r9
 8011b10:	f000 fbfc 	bl	801230c <__lshift>
 8011b14:	4621      	mov	r1, r4
 8011b16:	9002      	str	r0, [sp, #8]
 8011b18:	f000 fc64 	bl	80123e4 <__mcmp>
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	dcb4      	bgt.n	8011a8a <_dtoa_r+0xa82>
 8011b20:	d102      	bne.n	8011b28 <_dtoa_r+0xb20>
 8011b22:	9b00      	ldr	r3, [sp, #0]
 8011b24:	07db      	lsls	r3, r3, #31
 8011b26:	d4b0      	bmi.n	8011a8a <_dtoa_r+0xa82>
 8011b28:	4633      	mov	r3, r6
 8011b2a:	461e      	mov	r6, r3
 8011b2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b30:	2a30      	cmp	r2, #48	@ 0x30
 8011b32:	d0fa      	beq.n	8011b2a <_dtoa_r+0xb22>
 8011b34:	e4b5      	b.n	80114a2 <_dtoa_r+0x49a>
 8011b36:	459a      	cmp	sl, r3
 8011b38:	d1a8      	bne.n	8011a8c <_dtoa_r+0xa84>
 8011b3a:	2331      	movs	r3, #49	@ 0x31
 8011b3c:	f108 0801 	add.w	r8, r8, #1
 8011b40:	f88a 3000 	strb.w	r3, [sl]
 8011b44:	e4ad      	b.n	80114a2 <_dtoa_r+0x49a>
 8011b46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011b48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011ba4 <_dtoa_r+0xb9c>
 8011b4c:	b11b      	cbz	r3, 8011b56 <_dtoa_r+0xb4e>
 8011b4e:	f10a 0308 	add.w	r3, sl, #8
 8011b52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	4650      	mov	r0, sl
 8011b58:	b017      	add	sp, #92	@ 0x5c
 8011b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5e:	9b07      	ldr	r3, [sp, #28]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	f77f ae2e 	ble.w	80117c2 <_dtoa_r+0x7ba>
 8011b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b68:	9308      	str	r3, [sp, #32]
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	e64d      	b.n	801180a <_dtoa_r+0x802>
 8011b6e:	f1bb 0f00 	cmp.w	fp, #0
 8011b72:	f77f aed9 	ble.w	8011928 <_dtoa_r+0x920>
 8011b76:	4656      	mov	r6, sl
 8011b78:	9802      	ldr	r0, [sp, #8]
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	f7ff f9ba 	bl	8010ef4 <quorem>
 8011b80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011b84:	f806 3b01 	strb.w	r3, [r6], #1
 8011b88:	eba6 020a 	sub.w	r2, r6, sl
 8011b8c:	4593      	cmp	fp, r2
 8011b8e:	ddb4      	ble.n	8011afa <_dtoa_r+0xaf2>
 8011b90:	9902      	ldr	r1, [sp, #8]
 8011b92:	2300      	movs	r3, #0
 8011b94:	220a      	movs	r2, #10
 8011b96:	4648      	mov	r0, r9
 8011b98:	f000 fa14 	bl	8011fc4 <__multadd>
 8011b9c:	9002      	str	r0, [sp, #8]
 8011b9e:	e7eb      	b.n	8011b78 <_dtoa_r+0xb70>
 8011ba0:	08013c40 	.word	0x08013c40
 8011ba4:	08013bc4 	.word	0x08013bc4

08011ba8 <_free_r>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	4605      	mov	r5, r0
 8011bac:	2900      	cmp	r1, #0
 8011bae:	d041      	beq.n	8011c34 <_free_r+0x8c>
 8011bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bb4:	1f0c      	subs	r4, r1, #4
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	bfb8      	it	lt
 8011bba:	18e4      	addlt	r4, r4, r3
 8011bbc:	f000 f994 	bl	8011ee8 <__malloc_lock>
 8011bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8011c38 <_free_r+0x90>)
 8011bc2:	6813      	ldr	r3, [r2, #0]
 8011bc4:	b933      	cbnz	r3, 8011bd4 <_free_r+0x2c>
 8011bc6:	6063      	str	r3, [r4, #4]
 8011bc8:	6014      	str	r4, [r2, #0]
 8011bca:	4628      	mov	r0, r5
 8011bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bd0:	f000 b990 	b.w	8011ef4 <__malloc_unlock>
 8011bd4:	42a3      	cmp	r3, r4
 8011bd6:	d908      	bls.n	8011bea <_free_r+0x42>
 8011bd8:	6820      	ldr	r0, [r4, #0]
 8011bda:	1821      	adds	r1, r4, r0
 8011bdc:	428b      	cmp	r3, r1
 8011bde:	bf01      	itttt	eq
 8011be0:	6819      	ldreq	r1, [r3, #0]
 8011be2:	685b      	ldreq	r3, [r3, #4]
 8011be4:	1809      	addeq	r1, r1, r0
 8011be6:	6021      	streq	r1, [r4, #0]
 8011be8:	e7ed      	b.n	8011bc6 <_free_r+0x1e>
 8011bea:	461a      	mov	r2, r3
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	b10b      	cbz	r3, 8011bf4 <_free_r+0x4c>
 8011bf0:	42a3      	cmp	r3, r4
 8011bf2:	d9fa      	bls.n	8011bea <_free_r+0x42>
 8011bf4:	6811      	ldr	r1, [r2, #0]
 8011bf6:	1850      	adds	r0, r2, r1
 8011bf8:	42a0      	cmp	r0, r4
 8011bfa:	d10b      	bne.n	8011c14 <_free_r+0x6c>
 8011bfc:	6820      	ldr	r0, [r4, #0]
 8011bfe:	4401      	add	r1, r0
 8011c00:	1850      	adds	r0, r2, r1
 8011c02:	4283      	cmp	r3, r0
 8011c04:	6011      	str	r1, [r2, #0]
 8011c06:	d1e0      	bne.n	8011bca <_free_r+0x22>
 8011c08:	6818      	ldr	r0, [r3, #0]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	6053      	str	r3, [r2, #4]
 8011c0e:	4408      	add	r0, r1
 8011c10:	6010      	str	r0, [r2, #0]
 8011c12:	e7da      	b.n	8011bca <_free_r+0x22>
 8011c14:	d902      	bls.n	8011c1c <_free_r+0x74>
 8011c16:	230c      	movs	r3, #12
 8011c18:	602b      	str	r3, [r5, #0]
 8011c1a:	e7d6      	b.n	8011bca <_free_r+0x22>
 8011c1c:	6820      	ldr	r0, [r4, #0]
 8011c1e:	1821      	adds	r1, r4, r0
 8011c20:	428b      	cmp	r3, r1
 8011c22:	bf04      	itt	eq
 8011c24:	6819      	ldreq	r1, [r3, #0]
 8011c26:	685b      	ldreq	r3, [r3, #4]
 8011c28:	6063      	str	r3, [r4, #4]
 8011c2a:	bf04      	itt	eq
 8011c2c:	1809      	addeq	r1, r1, r0
 8011c2e:	6021      	streq	r1, [r4, #0]
 8011c30:	6054      	str	r4, [r2, #4]
 8011c32:	e7ca      	b.n	8011bca <_free_r+0x22>
 8011c34:	bd38      	pop	{r3, r4, r5, pc}
 8011c36:	bf00      	nop
 8011c38:	200059d4 	.word	0x200059d4

08011c3c <malloc>:
 8011c3c:	4b02      	ldr	r3, [pc, #8]	@ (8011c48 <malloc+0xc>)
 8011c3e:	4601      	mov	r1, r0
 8011c40:	6818      	ldr	r0, [r3, #0]
 8011c42:	f000 b825 	b.w	8011c90 <_malloc_r>
 8011c46:	bf00      	nop
 8011c48:	20000054 	.word	0x20000054

08011c4c <sbrk_aligned>:
 8011c4c:	b570      	push	{r4, r5, r6, lr}
 8011c4e:	4e0f      	ldr	r6, [pc, #60]	@ (8011c8c <sbrk_aligned+0x40>)
 8011c50:	460c      	mov	r4, r1
 8011c52:	6831      	ldr	r1, [r6, #0]
 8011c54:	4605      	mov	r5, r0
 8011c56:	b911      	cbnz	r1, 8011c5e <sbrk_aligned+0x12>
 8011c58:	f000 fd34 	bl	80126c4 <_sbrk_r>
 8011c5c:	6030      	str	r0, [r6, #0]
 8011c5e:	4621      	mov	r1, r4
 8011c60:	4628      	mov	r0, r5
 8011c62:	f000 fd2f 	bl	80126c4 <_sbrk_r>
 8011c66:	1c43      	adds	r3, r0, #1
 8011c68:	d103      	bne.n	8011c72 <sbrk_aligned+0x26>
 8011c6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011c6e:	4620      	mov	r0, r4
 8011c70:	bd70      	pop	{r4, r5, r6, pc}
 8011c72:	1cc4      	adds	r4, r0, #3
 8011c74:	f024 0403 	bic.w	r4, r4, #3
 8011c78:	42a0      	cmp	r0, r4
 8011c7a:	d0f8      	beq.n	8011c6e <sbrk_aligned+0x22>
 8011c7c:	1a21      	subs	r1, r4, r0
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f000 fd20 	bl	80126c4 <_sbrk_r>
 8011c84:	3001      	adds	r0, #1
 8011c86:	d1f2      	bne.n	8011c6e <sbrk_aligned+0x22>
 8011c88:	e7ef      	b.n	8011c6a <sbrk_aligned+0x1e>
 8011c8a:	bf00      	nop
 8011c8c:	200059d0 	.word	0x200059d0

08011c90 <_malloc_r>:
 8011c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c94:	1ccd      	adds	r5, r1, #3
 8011c96:	f025 0503 	bic.w	r5, r5, #3
 8011c9a:	3508      	adds	r5, #8
 8011c9c:	2d0c      	cmp	r5, #12
 8011c9e:	bf38      	it	cc
 8011ca0:	250c      	movcc	r5, #12
 8011ca2:	2d00      	cmp	r5, #0
 8011ca4:	4606      	mov	r6, r0
 8011ca6:	db01      	blt.n	8011cac <_malloc_r+0x1c>
 8011ca8:	42a9      	cmp	r1, r5
 8011caa:	d904      	bls.n	8011cb6 <_malloc_r+0x26>
 8011cac:	230c      	movs	r3, #12
 8011cae:	6033      	str	r3, [r6, #0]
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d8c <_malloc_r+0xfc>
 8011cba:	f000 f915 	bl	8011ee8 <__malloc_lock>
 8011cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8011cc2:	461c      	mov	r4, r3
 8011cc4:	bb44      	cbnz	r4, 8011d18 <_malloc_r+0x88>
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f7ff ffbf 	bl	8011c4c <sbrk_aligned>
 8011cce:	1c43      	adds	r3, r0, #1
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	d158      	bne.n	8011d86 <_malloc_r+0xf6>
 8011cd4:	f8d8 4000 	ldr.w	r4, [r8]
 8011cd8:	4627      	mov	r7, r4
 8011cda:	2f00      	cmp	r7, #0
 8011cdc:	d143      	bne.n	8011d66 <_malloc_r+0xd6>
 8011cde:	2c00      	cmp	r4, #0
 8011ce0:	d04b      	beq.n	8011d7a <_malloc_r+0xea>
 8011ce2:	6823      	ldr	r3, [r4, #0]
 8011ce4:	4639      	mov	r1, r7
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	eb04 0903 	add.w	r9, r4, r3
 8011cec:	f000 fcea 	bl	80126c4 <_sbrk_r>
 8011cf0:	4581      	cmp	r9, r0
 8011cf2:	d142      	bne.n	8011d7a <_malloc_r+0xea>
 8011cf4:	6821      	ldr	r1, [r4, #0]
 8011cf6:	1a6d      	subs	r5, r5, r1
 8011cf8:	4629      	mov	r1, r5
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	f7ff ffa6 	bl	8011c4c <sbrk_aligned>
 8011d00:	3001      	adds	r0, #1
 8011d02:	d03a      	beq.n	8011d7a <_malloc_r+0xea>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	442b      	add	r3, r5
 8011d08:	6023      	str	r3, [r4, #0]
 8011d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	bb62      	cbnz	r2, 8011d6c <_malloc_r+0xdc>
 8011d12:	f8c8 7000 	str.w	r7, [r8]
 8011d16:	e00f      	b.n	8011d38 <_malloc_r+0xa8>
 8011d18:	6822      	ldr	r2, [r4, #0]
 8011d1a:	1b52      	subs	r2, r2, r5
 8011d1c:	d420      	bmi.n	8011d60 <_malloc_r+0xd0>
 8011d1e:	2a0b      	cmp	r2, #11
 8011d20:	d917      	bls.n	8011d52 <_malloc_r+0xc2>
 8011d22:	1961      	adds	r1, r4, r5
 8011d24:	42a3      	cmp	r3, r4
 8011d26:	6025      	str	r5, [r4, #0]
 8011d28:	bf18      	it	ne
 8011d2a:	6059      	strne	r1, [r3, #4]
 8011d2c:	6863      	ldr	r3, [r4, #4]
 8011d2e:	bf08      	it	eq
 8011d30:	f8c8 1000 	streq.w	r1, [r8]
 8011d34:	5162      	str	r2, [r4, r5]
 8011d36:	604b      	str	r3, [r1, #4]
 8011d38:	4630      	mov	r0, r6
 8011d3a:	f000 f8db 	bl	8011ef4 <__malloc_unlock>
 8011d3e:	f104 000b 	add.w	r0, r4, #11
 8011d42:	1d23      	adds	r3, r4, #4
 8011d44:	f020 0007 	bic.w	r0, r0, #7
 8011d48:	1ac2      	subs	r2, r0, r3
 8011d4a:	bf1c      	itt	ne
 8011d4c:	1a1b      	subne	r3, r3, r0
 8011d4e:	50a3      	strne	r3, [r4, r2]
 8011d50:	e7af      	b.n	8011cb2 <_malloc_r+0x22>
 8011d52:	6862      	ldr	r2, [r4, #4]
 8011d54:	42a3      	cmp	r3, r4
 8011d56:	bf0c      	ite	eq
 8011d58:	f8c8 2000 	streq.w	r2, [r8]
 8011d5c:	605a      	strne	r2, [r3, #4]
 8011d5e:	e7eb      	b.n	8011d38 <_malloc_r+0xa8>
 8011d60:	4623      	mov	r3, r4
 8011d62:	6864      	ldr	r4, [r4, #4]
 8011d64:	e7ae      	b.n	8011cc4 <_malloc_r+0x34>
 8011d66:	463c      	mov	r4, r7
 8011d68:	687f      	ldr	r7, [r7, #4]
 8011d6a:	e7b6      	b.n	8011cda <_malloc_r+0x4a>
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	42a3      	cmp	r3, r4
 8011d72:	d1fb      	bne.n	8011d6c <_malloc_r+0xdc>
 8011d74:	2300      	movs	r3, #0
 8011d76:	6053      	str	r3, [r2, #4]
 8011d78:	e7de      	b.n	8011d38 <_malloc_r+0xa8>
 8011d7a:	230c      	movs	r3, #12
 8011d7c:	6033      	str	r3, [r6, #0]
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f000 f8b8 	bl	8011ef4 <__malloc_unlock>
 8011d84:	e794      	b.n	8011cb0 <_malloc_r+0x20>
 8011d86:	6005      	str	r5, [r0, #0]
 8011d88:	e7d6      	b.n	8011d38 <_malloc_r+0xa8>
 8011d8a:	bf00      	nop
 8011d8c:	200059d4 	.word	0x200059d4

08011d90 <__sflush_r>:
 8011d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d98:	0716      	lsls	r6, r2, #28
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	460c      	mov	r4, r1
 8011d9e:	d454      	bmi.n	8011e4a <__sflush_r+0xba>
 8011da0:	684b      	ldr	r3, [r1, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	dc02      	bgt.n	8011dac <__sflush_r+0x1c>
 8011da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	dd48      	ble.n	8011e3e <__sflush_r+0xae>
 8011dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011dae:	2e00      	cmp	r6, #0
 8011db0:	d045      	beq.n	8011e3e <__sflush_r+0xae>
 8011db2:	2300      	movs	r3, #0
 8011db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011db8:	682f      	ldr	r7, [r5, #0]
 8011dba:	6a21      	ldr	r1, [r4, #32]
 8011dbc:	602b      	str	r3, [r5, #0]
 8011dbe:	d030      	beq.n	8011e22 <__sflush_r+0x92>
 8011dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	0759      	lsls	r1, r3, #29
 8011dc6:	d505      	bpl.n	8011dd4 <__sflush_r+0x44>
 8011dc8:	6863      	ldr	r3, [r4, #4]
 8011dca:	1ad2      	subs	r2, r2, r3
 8011dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011dce:	b10b      	cbz	r3, 8011dd4 <__sflush_r+0x44>
 8011dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011dd2:	1ad2      	subs	r2, r2, r3
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011dd8:	6a21      	ldr	r1, [r4, #32]
 8011dda:	4628      	mov	r0, r5
 8011ddc:	47b0      	blx	r6
 8011dde:	1c43      	adds	r3, r0, #1
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	d106      	bne.n	8011df2 <__sflush_r+0x62>
 8011de4:	6829      	ldr	r1, [r5, #0]
 8011de6:	291d      	cmp	r1, #29
 8011de8:	d82b      	bhi.n	8011e42 <__sflush_r+0xb2>
 8011dea:	4a2a      	ldr	r2, [pc, #168]	@ (8011e94 <__sflush_r+0x104>)
 8011dec:	40ca      	lsrs	r2, r1
 8011dee:	07d6      	lsls	r6, r2, #31
 8011df0:	d527      	bpl.n	8011e42 <__sflush_r+0xb2>
 8011df2:	2200      	movs	r2, #0
 8011df4:	6062      	str	r2, [r4, #4]
 8011df6:	04d9      	lsls	r1, r3, #19
 8011df8:	6922      	ldr	r2, [r4, #16]
 8011dfa:	6022      	str	r2, [r4, #0]
 8011dfc:	d504      	bpl.n	8011e08 <__sflush_r+0x78>
 8011dfe:	1c42      	adds	r2, r0, #1
 8011e00:	d101      	bne.n	8011e06 <__sflush_r+0x76>
 8011e02:	682b      	ldr	r3, [r5, #0]
 8011e04:	b903      	cbnz	r3, 8011e08 <__sflush_r+0x78>
 8011e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e0a:	602f      	str	r7, [r5, #0]
 8011e0c:	b1b9      	cbz	r1, 8011e3e <__sflush_r+0xae>
 8011e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e12:	4299      	cmp	r1, r3
 8011e14:	d002      	beq.n	8011e1c <__sflush_r+0x8c>
 8011e16:	4628      	mov	r0, r5
 8011e18:	f7ff fec6 	bl	8011ba8 <_free_r>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e20:	e00d      	b.n	8011e3e <__sflush_r+0xae>
 8011e22:	2301      	movs	r3, #1
 8011e24:	4628      	mov	r0, r5
 8011e26:	47b0      	blx	r6
 8011e28:	4602      	mov	r2, r0
 8011e2a:	1c50      	adds	r0, r2, #1
 8011e2c:	d1c9      	bne.n	8011dc2 <__sflush_r+0x32>
 8011e2e:	682b      	ldr	r3, [r5, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0c6      	beq.n	8011dc2 <__sflush_r+0x32>
 8011e34:	2b1d      	cmp	r3, #29
 8011e36:	d001      	beq.n	8011e3c <__sflush_r+0xac>
 8011e38:	2b16      	cmp	r3, #22
 8011e3a:	d11e      	bne.n	8011e7a <__sflush_r+0xea>
 8011e3c:	602f      	str	r7, [r5, #0]
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e022      	b.n	8011e88 <__sflush_r+0xf8>
 8011e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e46:	b21b      	sxth	r3, r3
 8011e48:	e01b      	b.n	8011e82 <__sflush_r+0xf2>
 8011e4a:	690f      	ldr	r7, [r1, #16]
 8011e4c:	2f00      	cmp	r7, #0
 8011e4e:	d0f6      	beq.n	8011e3e <__sflush_r+0xae>
 8011e50:	0793      	lsls	r3, r2, #30
 8011e52:	680e      	ldr	r6, [r1, #0]
 8011e54:	bf08      	it	eq
 8011e56:	694b      	ldreq	r3, [r1, #20]
 8011e58:	600f      	str	r7, [r1, #0]
 8011e5a:	bf18      	it	ne
 8011e5c:	2300      	movne	r3, #0
 8011e5e:	eba6 0807 	sub.w	r8, r6, r7
 8011e62:	608b      	str	r3, [r1, #8]
 8011e64:	f1b8 0f00 	cmp.w	r8, #0
 8011e68:	dde9      	ble.n	8011e3e <__sflush_r+0xae>
 8011e6a:	6a21      	ldr	r1, [r4, #32]
 8011e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e6e:	4643      	mov	r3, r8
 8011e70:	463a      	mov	r2, r7
 8011e72:	4628      	mov	r0, r5
 8011e74:	47b0      	blx	r6
 8011e76:	2800      	cmp	r0, #0
 8011e78:	dc08      	bgt.n	8011e8c <__sflush_r+0xfc>
 8011e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e82:	81a3      	strh	r3, [r4, #12]
 8011e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e8c:	4407      	add	r7, r0
 8011e8e:	eba8 0800 	sub.w	r8, r8, r0
 8011e92:	e7e7      	b.n	8011e64 <__sflush_r+0xd4>
 8011e94:	20400001 	.word	0x20400001

08011e98 <_fflush_r>:
 8011e98:	b538      	push	{r3, r4, r5, lr}
 8011e9a:	690b      	ldr	r3, [r1, #16]
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	460c      	mov	r4, r1
 8011ea0:	b913      	cbnz	r3, 8011ea8 <_fflush_r+0x10>
 8011ea2:	2500      	movs	r5, #0
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}
 8011ea8:	b118      	cbz	r0, 8011eb2 <_fflush_r+0x1a>
 8011eaa:	6a03      	ldr	r3, [r0, #32]
 8011eac:	b90b      	cbnz	r3, 8011eb2 <_fflush_r+0x1a>
 8011eae:	f7fe ff45 	bl	8010d3c <__sinit>
 8011eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d0f3      	beq.n	8011ea2 <_fflush_r+0xa>
 8011eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011ebc:	07d0      	lsls	r0, r2, #31
 8011ebe:	d404      	bmi.n	8011eca <_fflush_r+0x32>
 8011ec0:	0599      	lsls	r1, r3, #22
 8011ec2:	d402      	bmi.n	8011eca <_fflush_r+0x32>
 8011ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ec6:	f7fe ffa2 	bl	8010e0e <__retarget_lock_acquire_recursive>
 8011eca:	4628      	mov	r0, r5
 8011ecc:	4621      	mov	r1, r4
 8011ece:	f7ff ff5f 	bl	8011d90 <__sflush_r>
 8011ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ed4:	07da      	lsls	r2, r3, #31
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	d4e4      	bmi.n	8011ea4 <_fflush_r+0xc>
 8011eda:	89a3      	ldrh	r3, [r4, #12]
 8011edc:	059b      	lsls	r3, r3, #22
 8011ede:	d4e1      	bmi.n	8011ea4 <_fflush_r+0xc>
 8011ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ee2:	f7fe ff95 	bl	8010e10 <__retarget_lock_release_recursive>
 8011ee6:	e7dd      	b.n	8011ea4 <_fflush_r+0xc>

08011ee8 <__malloc_lock>:
 8011ee8:	4801      	ldr	r0, [pc, #4]	@ (8011ef0 <__malloc_lock+0x8>)
 8011eea:	f7fe bf90 	b.w	8010e0e <__retarget_lock_acquire_recursive>
 8011eee:	bf00      	nop
 8011ef0:	200059c8 	.word	0x200059c8

08011ef4 <__malloc_unlock>:
 8011ef4:	4801      	ldr	r0, [pc, #4]	@ (8011efc <__malloc_unlock+0x8>)
 8011ef6:	f7fe bf8b 	b.w	8010e10 <__retarget_lock_release_recursive>
 8011efa:	bf00      	nop
 8011efc:	200059c8 	.word	0x200059c8

08011f00 <_Balloc>:
 8011f00:	b570      	push	{r4, r5, r6, lr}
 8011f02:	69c6      	ldr	r6, [r0, #28]
 8011f04:	4604      	mov	r4, r0
 8011f06:	460d      	mov	r5, r1
 8011f08:	b976      	cbnz	r6, 8011f28 <_Balloc+0x28>
 8011f0a:	2010      	movs	r0, #16
 8011f0c:	f7ff fe96 	bl	8011c3c <malloc>
 8011f10:	4602      	mov	r2, r0
 8011f12:	61e0      	str	r0, [r4, #28]
 8011f14:	b920      	cbnz	r0, 8011f20 <_Balloc+0x20>
 8011f16:	4b18      	ldr	r3, [pc, #96]	@ (8011f78 <_Balloc+0x78>)
 8011f18:	4818      	ldr	r0, [pc, #96]	@ (8011f7c <_Balloc+0x7c>)
 8011f1a:	216b      	movs	r1, #107	@ 0x6b
 8011f1c:	f000 fc04 	bl	8012728 <__assert_func>
 8011f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f24:	6006      	str	r6, [r0, #0]
 8011f26:	60c6      	str	r6, [r0, #12]
 8011f28:	69e6      	ldr	r6, [r4, #28]
 8011f2a:	68f3      	ldr	r3, [r6, #12]
 8011f2c:	b183      	cbz	r3, 8011f50 <_Balloc+0x50>
 8011f2e:	69e3      	ldr	r3, [r4, #28]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f36:	b9b8      	cbnz	r0, 8011f68 <_Balloc+0x68>
 8011f38:	2101      	movs	r1, #1
 8011f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8011f3e:	1d72      	adds	r2, r6, #5
 8011f40:	0092      	lsls	r2, r2, #2
 8011f42:	4620      	mov	r0, r4
 8011f44:	f000 fc0e 	bl	8012764 <_calloc_r>
 8011f48:	b160      	cbz	r0, 8011f64 <_Balloc+0x64>
 8011f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f4e:	e00e      	b.n	8011f6e <_Balloc+0x6e>
 8011f50:	2221      	movs	r2, #33	@ 0x21
 8011f52:	2104      	movs	r1, #4
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 fc05 	bl	8012764 <_calloc_r>
 8011f5a:	69e3      	ldr	r3, [r4, #28]
 8011f5c:	60f0      	str	r0, [r6, #12]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1e4      	bne.n	8011f2e <_Balloc+0x2e>
 8011f64:	2000      	movs	r0, #0
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
 8011f68:	6802      	ldr	r2, [r0, #0]
 8011f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f6e:	2300      	movs	r3, #0
 8011f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f74:	e7f7      	b.n	8011f66 <_Balloc+0x66>
 8011f76:	bf00      	nop
 8011f78:	08013bd1 	.word	0x08013bd1
 8011f7c:	08013c51 	.word	0x08013c51

08011f80 <_Bfree>:
 8011f80:	b570      	push	{r4, r5, r6, lr}
 8011f82:	69c6      	ldr	r6, [r0, #28]
 8011f84:	4605      	mov	r5, r0
 8011f86:	460c      	mov	r4, r1
 8011f88:	b976      	cbnz	r6, 8011fa8 <_Bfree+0x28>
 8011f8a:	2010      	movs	r0, #16
 8011f8c:	f7ff fe56 	bl	8011c3c <malloc>
 8011f90:	4602      	mov	r2, r0
 8011f92:	61e8      	str	r0, [r5, #28]
 8011f94:	b920      	cbnz	r0, 8011fa0 <_Bfree+0x20>
 8011f96:	4b09      	ldr	r3, [pc, #36]	@ (8011fbc <_Bfree+0x3c>)
 8011f98:	4809      	ldr	r0, [pc, #36]	@ (8011fc0 <_Bfree+0x40>)
 8011f9a:	218f      	movs	r1, #143	@ 0x8f
 8011f9c:	f000 fbc4 	bl	8012728 <__assert_func>
 8011fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fa4:	6006      	str	r6, [r0, #0]
 8011fa6:	60c6      	str	r6, [r0, #12]
 8011fa8:	b13c      	cbz	r4, 8011fba <_Bfree+0x3a>
 8011faa:	69eb      	ldr	r3, [r5, #28]
 8011fac:	6862      	ldr	r2, [r4, #4]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011fb4:	6021      	str	r1, [r4, #0]
 8011fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	08013bd1 	.word	0x08013bd1
 8011fc0:	08013c51 	.word	0x08013c51

08011fc4 <__multadd>:
 8011fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc8:	690d      	ldr	r5, [r1, #16]
 8011fca:	4607      	mov	r7, r0
 8011fcc:	460c      	mov	r4, r1
 8011fce:	461e      	mov	r6, r3
 8011fd0:	f101 0c14 	add.w	ip, r1, #20
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8011fda:	b299      	uxth	r1, r3
 8011fdc:	fb02 6101 	mla	r1, r2, r1, r6
 8011fe0:	0c1e      	lsrs	r6, r3, #16
 8011fe2:	0c0b      	lsrs	r3, r1, #16
 8011fe4:	fb02 3306 	mla	r3, r2, r6, r3
 8011fe8:	b289      	uxth	r1, r1
 8011fea:	3001      	adds	r0, #1
 8011fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ff0:	4285      	cmp	r5, r0
 8011ff2:	f84c 1b04 	str.w	r1, [ip], #4
 8011ff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ffa:	dcec      	bgt.n	8011fd6 <__multadd+0x12>
 8011ffc:	b30e      	cbz	r6, 8012042 <__multadd+0x7e>
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	42ab      	cmp	r3, r5
 8012002:	dc19      	bgt.n	8012038 <__multadd+0x74>
 8012004:	6861      	ldr	r1, [r4, #4]
 8012006:	4638      	mov	r0, r7
 8012008:	3101      	adds	r1, #1
 801200a:	f7ff ff79 	bl	8011f00 <_Balloc>
 801200e:	4680      	mov	r8, r0
 8012010:	b928      	cbnz	r0, 801201e <__multadd+0x5a>
 8012012:	4602      	mov	r2, r0
 8012014:	4b0c      	ldr	r3, [pc, #48]	@ (8012048 <__multadd+0x84>)
 8012016:	480d      	ldr	r0, [pc, #52]	@ (801204c <__multadd+0x88>)
 8012018:	21ba      	movs	r1, #186	@ 0xba
 801201a:	f000 fb85 	bl	8012728 <__assert_func>
 801201e:	6922      	ldr	r2, [r4, #16]
 8012020:	3202      	adds	r2, #2
 8012022:	f104 010c 	add.w	r1, r4, #12
 8012026:	0092      	lsls	r2, r2, #2
 8012028:	300c      	adds	r0, #12
 801202a:	f7fe ff55 	bl	8010ed8 <memcpy>
 801202e:	4621      	mov	r1, r4
 8012030:	4638      	mov	r0, r7
 8012032:	f7ff ffa5 	bl	8011f80 <_Bfree>
 8012036:	4644      	mov	r4, r8
 8012038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801203c:	3501      	adds	r5, #1
 801203e:	615e      	str	r6, [r3, #20]
 8012040:	6125      	str	r5, [r4, #16]
 8012042:	4620      	mov	r0, r4
 8012044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012048:	08013c40 	.word	0x08013c40
 801204c:	08013c51 	.word	0x08013c51

08012050 <__hi0bits>:
 8012050:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012054:	4603      	mov	r3, r0
 8012056:	bf36      	itet	cc
 8012058:	0403      	lslcc	r3, r0, #16
 801205a:	2000      	movcs	r0, #0
 801205c:	2010      	movcc	r0, #16
 801205e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012062:	bf3c      	itt	cc
 8012064:	021b      	lslcc	r3, r3, #8
 8012066:	3008      	addcc	r0, #8
 8012068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801206c:	bf3c      	itt	cc
 801206e:	011b      	lslcc	r3, r3, #4
 8012070:	3004      	addcc	r0, #4
 8012072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012076:	bf3c      	itt	cc
 8012078:	009b      	lslcc	r3, r3, #2
 801207a:	3002      	addcc	r0, #2
 801207c:	2b00      	cmp	r3, #0
 801207e:	db05      	blt.n	801208c <__hi0bits+0x3c>
 8012080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012084:	f100 0001 	add.w	r0, r0, #1
 8012088:	bf08      	it	eq
 801208a:	2020      	moveq	r0, #32
 801208c:	4770      	bx	lr

0801208e <__lo0bits>:
 801208e:	6803      	ldr	r3, [r0, #0]
 8012090:	4602      	mov	r2, r0
 8012092:	f013 0007 	ands.w	r0, r3, #7
 8012096:	d00b      	beq.n	80120b0 <__lo0bits+0x22>
 8012098:	07d9      	lsls	r1, r3, #31
 801209a:	d421      	bmi.n	80120e0 <__lo0bits+0x52>
 801209c:	0798      	lsls	r0, r3, #30
 801209e:	bf49      	itett	mi
 80120a0:	085b      	lsrmi	r3, r3, #1
 80120a2:	089b      	lsrpl	r3, r3, #2
 80120a4:	2001      	movmi	r0, #1
 80120a6:	6013      	strmi	r3, [r2, #0]
 80120a8:	bf5c      	itt	pl
 80120aa:	6013      	strpl	r3, [r2, #0]
 80120ac:	2002      	movpl	r0, #2
 80120ae:	4770      	bx	lr
 80120b0:	b299      	uxth	r1, r3
 80120b2:	b909      	cbnz	r1, 80120b8 <__lo0bits+0x2a>
 80120b4:	0c1b      	lsrs	r3, r3, #16
 80120b6:	2010      	movs	r0, #16
 80120b8:	b2d9      	uxtb	r1, r3
 80120ba:	b909      	cbnz	r1, 80120c0 <__lo0bits+0x32>
 80120bc:	3008      	adds	r0, #8
 80120be:	0a1b      	lsrs	r3, r3, #8
 80120c0:	0719      	lsls	r1, r3, #28
 80120c2:	bf04      	itt	eq
 80120c4:	091b      	lsreq	r3, r3, #4
 80120c6:	3004      	addeq	r0, #4
 80120c8:	0799      	lsls	r1, r3, #30
 80120ca:	bf04      	itt	eq
 80120cc:	089b      	lsreq	r3, r3, #2
 80120ce:	3002      	addeq	r0, #2
 80120d0:	07d9      	lsls	r1, r3, #31
 80120d2:	d403      	bmi.n	80120dc <__lo0bits+0x4e>
 80120d4:	085b      	lsrs	r3, r3, #1
 80120d6:	f100 0001 	add.w	r0, r0, #1
 80120da:	d003      	beq.n	80120e4 <__lo0bits+0x56>
 80120dc:	6013      	str	r3, [r2, #0]
 80120de:	4770      	bx	lr
 80120e0:	2000      	movs	r0, #0
 80120e2:	4770      	bx	lr
 80120e4:	2020      	movs	r0, #32
 80120e6:	4770      	bx	lr

080120e8 <__i2b>:
 80120e8:	b510      	push	{r4, lr}
 80120ea:	460c      	mov	r4, r1
 80120ec:	2101      	movs	r1, #1
 80120ee:	f7ff ff07 	bl	8011f00 <_Balloc>
 80120f2:	4602      	mov	r2, r0
 80120f4:	b928      	cbnz	r0, 8012102 <__i2b+0x1a>
 80120f6:	4b05      	ldr	r3, [pc, #20]	@ (801210c <__i2b+0x24>)
 80120f8:	4805      	ldr	r0, [pc, #20]	@ (8012110 <__i2b+0x28>)
 80120fa:	f240 1145 	movw	r1, #325	@ 0x145
 80120fe:	f000 fb13 	bl	8012728 <__assert_func>
 8012102:	2301      	movs	r3, #1
 8012104:	6144      	str	r4, [r0, #20]
 8012106:	6103      	str	r3, [r0, #16]
 8012108:	bd10      	pop	{r4, pc}
 801210a:	bf00      	nop
 801210c:	08013c40 	.word	0x08013c40
 8012110:	08013c51 	.word	0x08013c51

08012114 <__multiply>:
 8012114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	4617      	mov	r7, r2
 801211a:	690a      	ldr	r2, [r1, #16]
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	429a      	cmp	r2, r3
 8012120:	bfa8      	it	ge
 8012122:	463b      	movge	r3, r7
 8012124:	4689      	mov	r9, r1
 8012126:	bfa4      	itt	ge
 8012128:	460f      	movge	r7, r1
 801212a:	4699      	movge	r9, r3
 801212c:	693d      	ldr	r5, [r7, #16]
 801212e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	6879      	ldr	r1, [r7, #4]
 8012136:	eb05 060a 	add.w	r6, r5, sl
 801213a:	42b3      	cmp	r3, r6
 801213c:	b085      	sub	sp, #20
 801213e:	bfb8      	it	lt
 8012140:	3101      	addlt	r1, #1
 8012142:	f7ff fedd 	bl	8011f00 <_Balloc>
 8012146:	b930      	cbnz	r0, 8012156 <__multiply+0x42>
 8012148:	4602      	mov	r2, r0
 801214a:	4b41      	ldr	r3, [pc, #260]	@ (8012250 <__multiply+0x13c>)
 801214c:	4841      	ldr	r0, [pc, #260]	@ (8012254 <__multiply+0x140>)
 801214e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012152:	f000 fae9 	bl	8012728 <__assert_func>
 8012156:	f100 0414 	add.w	r4, r0, #20
 801215a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801215e:	4623      	mov	r3, r4
 8012160:	2200      	movs	r2, #0
 8012162:	4573      	cmp	r3, lr
 8012164:	d320      	bcc.n	80121a8 <__multiply+0x94>
 8012166:	f107 0814 	add.w	r8, r7, #20
 801216a:	f109 0114 	add.w	r1, r9, #20
 801216e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012172:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012176:	9302      	str	r3, [sp, #8]
 8012178:	1beb      	subs	r3, r5, r7
 801217a:	3b15      	subs	r3, #21
 801217c:	f023 0303 	bic.w	r3, r3, #3
 8012180:	3304      	adds	r3, #4
 8012182:	3715      	adds	r7, #21
 8012184:	42bd      	cmp	r5, r7
 8012186:	bf38      	it	cc
 8012188:	2304      	movcc	r3, #4
 801218a:	9301      	str	r3, [sp, #4]
 801218c:	9b02      	ldr	r3, [sp, #8]
 801218e:	9103      	str	r1, [sp, #12]
 8012190:	428b      	cmp	r3, r1
 8012192:	d80c      	bhi.n	80121ae <__multiply+0x9a>
 8012194:	2e00      	cmp	r6, #0
 8012196:	dd03      	ble.n	80121a0 <__multiply+0x8c>
 8012198:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801219c:	2b00      	cmp	r3, #0
 801219e:	d055      	beq.n	801224c <__multiply+0x138>
 80121a0:	6106      	str	r6, [r0, #16]
 80121a2:	b005      	add	sp, #20
 80121a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121a8:	f843 2b04 	str.w	r2, [r3], #4
 80121ac:	e7d9      	b.n	8012162 <__multiply+0x4e>
 80121ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80121b2:	f1ba 0f00 	cmp.w	sl, #0
 80121b6:	d01f      	beq.n	80121f8 <__multiply+0xe4>
 80121b8:	46c4      	mov	ip, r8
 80121ba:	46a1      	mov	r9, r4
 80121bc:	2700      	movs	r7, #0
 80121be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80121c2:	f8d9 3000 	ldr.w	r3, [r9]
 80121c6:	fa1f fb82 	uxth.w	fp, r2
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80121d0:	443b      	add	r3, r7
 80121d2:	f8d9 7000 	ldr.w	r7, [r9]
 80121d6:	0c12      	lsrs	r2, r2, #16
 80121d8:	0c3f      	lsrs	r7, r7, #16
 80121da:	fb0a 7202 	mla	r2, sl, r2, r7
 80121de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121e8:	4565      	cmp	r5, ip
 80121ea:	f849 3b04 	str.w	r3, [r9], #4
 80121ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80121f2:	d8e4      	bhi.n	80121be <__multiply+0xaa>
 80121f4:	9b01      	ldr	r3, [sp, #4]
 80121f6:	50e7      	str	r7, [r4, r3]
 80121f8:	9b03      	ldr	r3, [sp, #12]
 80121fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80121fe:	3104      	adds	r1, #4
 8012200:	f1b9 0f00 	cmp.w	r9, #0
 8012204:	d020      	beq.n	8012248 <__multiply+0x134>
 8012206:	6823      	ldr	r3, [r4, #0]
 8012208:	4647      	mov	r7, r8
 801220a:	46a4      	mov	ip, r4
 801220c:	f04f 0a00 	mov.w	sl, #0
 8012210:	f8b7 b000 	ldrh.w	fp, [r7]
 8012214:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012218:	fb09 220b 	mla	r2, r9, fp, r2
 801221c:	4452      	add	r2, sl
 801221e:	b29b      	uxth	r3, r3
 8012220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012224:	f84c 3b04 	str.w	r3, [ip], #4
 8012228:	f857 3b04 	ldr.w	r3, [r7], #4
 801222c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012230:	f8bc 3000 	ldrh.w	r3, [ip]
 8012234:	fb09 330a 	mla	r3, r9, sl, r3
 8012238:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801223c:	42bd      	cmp	r5, r7
 801223e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012242:	d8e5      	bhi.n	8012210 <__multiply+0xfc>
 8012244:	9a01      	ldr	r2, [sp, #4]
 8012246:	50a3      	str	r3, [r4, r2]
 8012248:	3404      	adds	r4, #4
 801224a:	e79f      	b.n	801218c <__multiply+0x78>
 801224c:	3e01      	subs	r6, #1
 801224e:	e7a1      	b.n	8012194 <__multiply+0x80>
 8012250:	08013c40 	.word	0x08013c40
 8012254:	08013c51 	.word	0x08013c51

08012258 <__pow5mult>:
 8012258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801225c:	4615      	mov	r5, r2
 801225e:	f012 0203 	ands.w	r2, r2, #3
 8012262:	4607      	mov	r7, r0
 8012264:	460e      	mov	r6, r1
 8012266:	d007      	beq.n	8012278 <__pow5mult+0x20>
 8012268:	4c25      	ldr	r4, [pc, #148]	@ (8012300 <__pow5mult+0xa8>)
 801226a:	3a01      	subs	r2, #1
 801226c:	2300      	movs	r3, #0
 801226e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012272:	f7ff fea7 	bl	8011fc4 <__multadd>
 8012276:	4606      	mov	r6, r0
 8012278:	10ad      	asrs	r5, r5, #2
 801227a:	d03d      	beq.n	80122f8 <__pow5mult+0xa0>
 801227c:	69fc      	ldr	r4, [r7, #28]
 801227e:	b97c      	cbnz	r4, 80122a0 <__pow5mult+0x48>
 8012280:	2010      	movs	r0, #16
 8012282:	f7ff fcdb 	bl	8011c3c <malloc>
 8012286:	4602      	mov	r2, r0
 8012288:	61f8      	str	r0, [r7, #28]
 801228a:	b928      	cbnz	r0, 8012298 <__pow5mult+0x40>
 801228c:	4b1d      	ldr	r3, [pc, #116]	@ (8012304 <__pow5mult+0xac>)
 801228e:	481e      	ldr	r0, [pc, #120]	@ (8012308 <__pow5mult+0xb0>)
 8012290:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012294:	f000 fa48 	bl	8012728 <__assert_func>
 8012298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801229c:	6004      	str	r4, [r0, #0]
 801229e:	60c4      	str	r4, [r0, #12]
 80122a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80122a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122a8:	b94c      	cbnz	r4, 80122be <__pow5mult+0x66>
 80122aa:	f240 2171 	movw	r1, #625	@ 0x271
 80122ae:	4638      	mov	r0, r7
 80122b0:	f7ff ff1a 	bl	80120e8 <__i2b>
 80122b4:	2300      	movs	r3, #0
 80122b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80122ba:	4604      	mov	r4, r0
 80122bc:	6003      	str	r3, [r0, #0]
 80122be:	f04f 0900 	mov.w	r9, #0
 80122c2:	07eb      	lsls	r3, r5, #31
 80122c4:	d50a      	bpl.n	80122dc <__pow5mult+0x84>
 80122c6:	4631      	mov	r1, r6
 80122c8:	4622      	mov	r2, r4
 80122ca:	4638      	mov	r0, r7
 80122cc:	f7ff ff22 	bl	8012114 <__multiply>
 80122d0:	4631      	mov	r1, r6
 80122d2:	4680      	mov	r8, r0
 80122d4:	4638      	mov	r0, r7
 80122d6:	f7ff fe53 	bl	8011f80 <_Bfree>
 80122da:	4646      	mov	r6, r8
 80122dc:	106d      	asrs	r5, r5, #1
 80122de:	d00b      	beq.n	80122f8 <__pow5mult+0xa0>
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	b938      	cbnz	r0, 80122f4 <__pow5mult+0x9c>
 80122e4:	4622      	mov	r2, r4
 80122e6:	4621      	mov	r1, r4
 80122e8:	4638      	mov	r0, r7
 80122ea:	f7ff ff13 	bl	8012114 <__multiply>
 80122ee:	6020      	str	r0, [r4, #0]
 80122f0:	f8c0 9000 	str.w	r9, [r0]
 80122f4:	4604      	mov	r4, r0
 80122f6:	e7e4      	b.n	80122c2 <__pow5mult+0x6a>
 80122f8:	4630      	mov	r0, r6
 80122fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122fe:	bf00      	nop
 8012300:	08013d04 	.word	0x08013d04
 8012304:	08013bd1 	.word	0x08013bd1
 8012308:	08013c51 	.word	0x08013c51

0801230c <__lshift>:
 801230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012310:	460c      	mov	r4, r1
 8012312:	6849      	ldr	r1, [r1, #4]
 8012314:	6923      	ldr	r3, [r4, #16]
 8012316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801231a:	68a3      	ldr	r3, [r4, #8]
 801231c:	4607      	mov	r7, r0
 801231e:	4691      	mov	r9, r2
 8012320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012324:	f108 0601 	add.w	r6, r8, #1
 8012328:	42b3      	cmp	r3, r6
 801232a:	db0b      	blt.n	8012344 <__lshift+0x38>
 801232c:	4638      	mov	r0, r7
 801232e:	f7ff fde7 	bl	8011f00 <_Balloc>
 8012332:	4605      	mov	r5, r0
 8012334:	b948      	cbnz	r0, 801234a <__lshift+0x3e>
 8012336:	4602      	mov	r2, r0
 8012338:	4b28      	ldr	r3, [pc, #160]	@ (80123dc <__lshift+0xd0>)
 801233a:	4829      	ldr	r0, [pc, #164]	@ (80123e0 <__lshift+0xd4>)
 801233c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012340:	f000 f9f2 	bl	8012728 <__assert_func>
 8012344:	3101      	adds	r1, #1
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	e7ee      	b.n	8012328 <__lshift+0x1c>
 801234a:	2300      	movs	r3, #0
 801234c:	f100 0114 	add.w	r1, r0, #20
 8012350:	f100 0210 	add.w	r2, r0, #16
 8012354:	4618      	mov	r0, r3
 8012356:	4553      	cmp	r3, sl
 8012358:	db33      	blt.n	80123c2 <__lshift+0xb6>
 801235a:	6920      	ldr	r0, [r4, #16]
 801235c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012360:	f104 0314 	add.w	r3, r4, #20
 8012364:	f019 091f 	ands.w	r9, r9, #31
 8012368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801236c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012370:	d02b      	beq.n	80123ca <__lshift+0xbe>
 8012372:	f1c9 0e20 	rsb	lr, r9, #32
 8012376:	468a      	mov	sl, r1
 8012378:	2200      	movs	r2, #0
 801237a:	6818      	ldr	r0, [r3, #0]
 801237c:	fa00 f009 	lsl.w	r0, r0, r9
 8012380:	4310      	orrs	r0, r2
 8012382:	f84a 0b04 	str.w	r0, [sl], #4
 8012386:	f853 2b04 	ldr.w	r2, [r3], #4
 801238a:	459c      	cmp	ip, r3
 801238c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012390:	d8f3      	bhi.n	801237a <__lshift+0x6e>
 8012392:	ebac 0304 	sub.w	r3, ip, r4
 8012396:	3b15      	subs	r3, #21
 8012398:	f023 0303 	bic.w	r3, r3, #3
 801239c:	3304      	adds	r3, #4
 801239e:	f104 0015 	add.w	r0, r4, #21
 80123a2:	4560      	cmp	r0, ip
 80123a4:	bf88      	it	hi
 80123a6:	2304      	movhi	r3, #4
 80123a8:	50ca      	str	r2, [r1, r3]
 80123aa:	b10a      	cbz	r2, 80123b0 <__lshift+0xa4>
 80123ac:	f108 0602 	add.w	r6, r8, #2
 80123b0:	3e01      	subs	r6, #1
 80123b2:	4638      	mov	r0, r7
 80123b4:	612e      	str	r6, [r5, #16]
 80123b6:	4621      	mov	r1, r4
 80123b8:	f7ff fde2 	bl	8011f80 <_Bfree>
 80123bc:	4628      	mov	r0, r5
 80123be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80123c6:	3301      	adds	r3, #1
 80123c8:	e7c5      	b.n	8012356 <__lshift+0x4a>
 80123ca:	3904      	subs	r1, #4
 80123cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80123d4:	459c      	cmp	ip, r3
 80123d6:	d8f9      	bhi.n	80123cc <__lshift+0xc0>
 80123d8:	e7ea      	b.n	80123b0 <__lshift+0xa4>
 80123da:	bf00      	nop
 80123dc:	08013c40 	.word	0x08013c40
 80123e0:	08013c51 	.word	0x08013c51

080123e4 <__mcmp>:
 80123e4:	690a      	ldr	r2, [r1, #16]
 80123e6:	4603      	mov	r3, r0
 80123e8:	6900      	ldr	r0, [r0, #16]
 80123ea:	1a80      	subs	r0, r0, r2
 80123ec:	b530      	push	{r4, r5, lr}
 80123ee:	d10e      	bne.n	801240e <__mcmp+0x2a>
 80123f0:	3314      	adds	r3, #20
 80123f2:	3114      	adds	r1, #20
 80123f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80123f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80123fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012404:	4295      	cmp	r5, r2
 8012406:	d003      	beq.n	8012410 <__mcmp+0x2c>
 8012408:	d205      	bcs.n	8012416 <__mcmp+0x32>
 801240a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801240e:	bd30      	pop	{r4, r5, pc}
 8012410:	42a3      	cmp	r3, r4
 8012412:	d3f3      	bcc.n	80123fc <__mcmp+0x18>
 8012414:	e7fb      	b.n	801240e <__mcmp+0x2a>
 8012416:	2001      	movs	r0, #1
 8012418:	e7f9      	b.n	801240e <__mcmp+0x2a>
	...

0801241c <__mdiff>:
 801241c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012420:	4689      	mov	r9, r1
 8012422:	4606      	mov	r6, r0
 8012424:	4611      	mov	r1, r2
 8012426:	4648      	mov	r0, r9
 8012428:	4614      	mov	r4, r2
 801242a:	f7ff ffdb 	bl	80123e4 <__mcmp>
 801242e:	1e05      	subs	r5, r0, #0
 8012430:	d112      	bne.n	8012458 <__mdiff+0x3c>
 8012432:	4629      	mov	r1, r5
 8012434:	4630      	mov	r0, r6
 8012436:	f7ff fd63 	bl	8011f00 <_Balloc>
 801243a:	4602      	mov	r2, r0
 801243c:	b928      	cbnz	r0, 801244a <__mdiff+0x2e>
 801243e:	4b3f      	ldr	r3, [pc, #252]	@ (801253c <__mdiff+0x120>)
 8012440:	f240 2137 	movw	r1, #567	@ 0x237
 8012444:	483e      	ldr	r0, [pc, #248]	@ (8012540 <__mdiff+0x124>)
 8012446:	f000 f96f 	bl	8012728 <__assert_func>
 801244a:	2301      	movs	r3, #1
 801244c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012450:	4610      	mov	r0, r2
 8012452:	b003      	add	sp, #12
 8012454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012458:	bfbc      	itt	lt
 801245a:	464b      	movlt	r3, r9
 801245c:	46a1      	movlt	r9, r4
 801245e:	4630      	mov	r0, r6
 8012460:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012464:	bfba      	itte	lt
 8012466:	461c      	movlt	r4, r3
 8012468:	2501      	movlt	r5, #1
 801246a:	2500      	movge	r5, #0
 801246c:	f7ff fd48 	bl	8011f00 <_Balloc>
 8012470:	4602      	mov	r2, r0
 8012472:	b918      	cbnz	r0, 801247c <__mdiff+0x60>
 8012474:	4b31      	ldr	r3, [pc, #196]	@ (801253c <__mdiff+0x120>)
 8012476:	f240 2145 	movw	r1, #581	@ 0x245
 801247a:	e7e3      	b.n	8012444 <__mdiff+0x28>
 801247c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012480:	6926      	ldr	r6, [r4, #16]
 8012482:	60c5      	str	r5, [r0, #12]
 8012484:	f109 0310 	add.w	r3, r9, #16
 8012488:	f109 0514 	add.w	r5, r9, #20
 801248c:	f104 0e14 	add.w	lr, r4, #20
 8012490:	f100 0b14 	add.w	fp, r0, #20
 8012494:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012498:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801249c:	9301      	str	r3, [sp, #4]
 801249e:	46d9      	mov	r9, fp
 80124a0:	f04f 0c00 	mov.w	ip, #0
 80124a4:	9b01      	ldr	r3, [sp, #4]
 80124a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80124aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80124ae:	9301      	str	r3, [sp, #4]
 80124b0:	fa1f f38a 	uxth.w	r3, sl
 80124b4:	4619      	mov	r1, r3
 80124b6:	b283      	uxth	r3, r0
 80124b8:	1acb      	subs	r3, r1, r3
 80124ba:	0c00      	lsrs	r0, r0, #16
 80124bc:	4463      	add	r3, ip
 80124be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80124c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80124cc:	4576      	cmp	r6, lr
 80124ce:	f849 3b04 	str.w	r3, [r9], #4
 80124d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80124d6:	d8e5      	bhi.n	80124a4 <__mdiff+0x88>
 80124d8:	1b33      	subs	r3, r6, r4
 80124da:	3b15      	subs	r3, #21
 80124dc:	f023 0303 	bic.w	r3, r3, #3
 80124e0:	3415      	adds	r4, #21
 80124e2:	3304      	adds	r3, #4
 80124e4:	42a6      	cmp	r6, r4
 80124e6:	bf38      	it	cc
 80124e8:	2304      	movcc	r3, #4
 80124ea:	441d      	add	r5, r3
 80124ec:	445b      	add	r3, fp
 80124ee:	461e      	mov	r6, r3
 80124f0:	462c      	mov	r4, r5
 80124f2:	4544      	cmp	r4, r8
 80124f4:	d30e      	bcc.n	8012514 <__mdiff+0xf8>
 80124f6:	f108 0103 	add.w	r1, r8, #3
 80124fa:	1b49      	subs	r1, r1, r5
 80124fc:	f021 0103 	bic.w	r1, r1, #3
 8012500:	3d03      	subs	r5, #3
 8012502:	45a8      	cmp	r8, r5
 8012504:	bf38      	it	cc
 8012506:	2100      	movcc	r1, #0
 8012508:	440b      	add	r3, r1
 801250a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801250e:	b191      	cbz	r1, 8012536 <__mdiff+0x11a>
 8012510:	6117      	str	r7, [r2, #16]
 8012512:	e79d      	b.n	8012450 <__mdiff+0x34>
 8012514:	f854 1b04 	ldr.w	r1, [r4], #4
 8012518:	46e6      	mov	lr, ip
 801251a:	0c08      	lsrs	r0, r1, #16
 801251c:	fa1c fc81 	uxtah	ip, ip, r1
 8012520:	4471      	add	r1, lr
 8012522:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012526:	b289      	uxth	r1, r1
 8012528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801252c:	f846 1b04 	str.w	r1, [r6], #4
 8012530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012534:	e7dd      	b.n	80124f2 <__mdiff+0xd6>
 8012536:	3f01      	subs	r7, #1
 8012538:	e7e7      	b.n	801250a <__mdiff+0xee>
 801253a:	bf00      	nop
 801253c:	08013c40 	.word	0x08013c40
 8012540:	08013c51 	.word	0x08013c51

08012544 <__d2b>:
 8012544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012548:	460f      	mov	r7, r1
 801254a:	2101      	movs	r1, #1
 801254c:	ec59 8b10 	vmov	r8, r9, d0
 8012550:	4616      	mov	r6, r2
 8012552:	f7ff fcd5 	bl	8011f00 <_Balloc>
 8012556:	4604      	mov	r4, r0
 8012558:	b930      	cbnz	r0, 8012568 <__d2b+0x24>
 801255a:	4602      	mov	r2, r0
 801255c:	4b23      	ldr	r3, [pc, #140]	@ (80125ec <__d2b+0xa8>)
 801255e:	4824      	ldr	r0, [pc, #144]	@ (80125f0 <__d2b+0xac>)
 8012560:	f240 310f 	movw	r1, #783	@ 0x30f
 8012564:	f000 f8e0 	bl	8012728 <__assert_func>
 8012568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801256c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012570:	b10d      	cbz	r5, 8012576 <__d2b+0x32>
 8012572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012576:	9301      	str	r3, [sp, #4]
 8012578:	f1b8 0300 	subs.w	r3, r8, #0
 801257c:	d023      	beq.n	80125c6 <__d2b+0x82>
 801257e:	4668      	mov	r0, sp
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	f7ff fd84 	bl	801208e <__lo0bits>
 8012586:	e9dd 1200 	ldrd	r1, r2, [sp]
 801258a:	b1d0      	cbz	r0, 80125c2 <__d2b+0x7e>
 801258c:	f1c0 0320 	rsb	r3, r0, #32
 8012590:	fa02 f303 	lsl.w	r3, r2, r3
 8012594:	430b      	orrs	r3, r1
 8012596:	40c2      	lsrs	r2, r0
 8012598:	6163      	str	r3, [r4, #20]
 801259a:	9201      	str	r2, [sp, #4]
 801259c:	9b01      	ldr	r3, [sp, #4]
 801259e:	61a3      	str	r3, [r4, #24]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	bf0c      	ite	eq
 80125a4:	2201      	moveq	r2, #1
 80125a6:	2202      	movne	r2, #2
 80125a8:	6122      	str	r2, [r4, #16]
 80125aa:	b1a5      	cbz	r5, 80125d6 <__d2b+0x92>
 80125ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80125b0:	4405      	add	r5, r0
 80125b2:	603d      	str	r5, [r7, #0]
 80125b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80125b8:	6030      	str	r0, [r6, #0]
 80125ba:	4620      	mov	r0, r4
 80125bc:	b003      	add	sp, #12
 80125be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125c2:	6161      	str	r1, [r4, #20]
 80125c4:	e7ea      	b.n	801259c <__d2b+0x58>
 80125c6:	a801      	add	r0, sp, #4
 80125c8:	f7ff fd61 	bl	801208e <__lo0bits>
 80125cc:	9b01      	ldr	r3, [sp, #4]
 80125ce:	6163      	str	r3, [r4, #20]
 80125d0:	3020      	adds	r0, #32
 80125d2:	2201      	movs	r2, #1
 80125d4:	e7e8      	b.n	80125a8 <__d2b+0x64>
 80125d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80125de:	6038      	str	r0, [r7, #0]
 80125e0:	6918      	ldr	r0, [r3, #16]
 80125e2:	f7ff fd35 	bl	8012050 <__hi0bits>
 80125e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80125ea:	e7e5      	b.n	80125b8 <__d2b+0x74>
 80125ec:	08013c40 	.word	0x08013c40
 80125f0:	08013c51 	.word	0x08013c51

080125f4 <__sread>:
 80125f4:	b510      	push	{r4, lr}
 80125f6:	460c      	mov	r4, r1
 80125f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125fc:	f000 f850 	bl	80126a0 <_read_r>
 8012600:	2800      	cmp	r0, #0
 8012602:	bfab      	itete	ge
 8012604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012606:	89a3      	ldrhlt	r3, [r4, #12]
 8012608:	181b      	addge	r3, r3, r0
 801260a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801260e:	bfac      	ite	ge
 8012610:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012612:	81a3      	strhlt	r3, [r4, #12]
 8012614:	bd10      	pop	{r4, pc}

08012616 <__swrite>:
 8012616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261a:	461f      	mov	r7, r3
 801261c:	898b      	ldrh	r3, [r1, #12]
 801261e:	05db      	lsls	r3, r3, #23
 8012620:	4605      	mov	r5, r0
 8012622:	460c      	mov	r4, r1
 8012624:	4616      	mov	r6, r2
 8012626:	d505      	bpl.n	8012634 <__swrite+0x1e>
 8012628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801262c:	2302      	movs	r3, #2
 801262e:	2200      	movs	r2, #0
 8012630:	f000 f824 	bl	801267c <_lseek_r>
 8012634:	89a3      	ldrh	r3, [r4, #12]
 8012636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801263a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801263e:	81a3      	strh	r3, [r4, #12]
 8012640:	4632      	mov	r2, r6
 8012642:	463b      	mov	r3, r7
 8012644:	4628      	mov	r0, r5
 8012646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801264a:	f000 b84b 	b.w	80126e4 <_write_r>

0801264e <__sseek>:
 801264e:	b510      	push	{r4, lr}
 8012650:	460c      	mov	r4, r1
 8012652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012656:	f000 f811 	bl	801267c <_lseek_r>
 801265a:	1c43      	adds	r3, r0, #1
 801265c:	89a3      	ldrh	r3, [r4, #12]
 801265e:	bf15      	itete	ne
 8012660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801266a:	81a3      	strheq	r3, [r4, #12]
 801266c:	bf18      	it	ne
 801266e:	81a3      	strhne	r3, [r4, #12]
 8012670:	bd10      	pop	{r4, pc}

08012672 <__sclose>:
 8012672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012676:	f000 b847 	b.w	8012708 <_close_r>
	...

0801267c <_lseek_r>:
 801267c:	b538      	push	{r3, r4, r5, lr}
 801267e:	4d07      	ldr	r5, [pc, #28]	@ (801269c <_lseek_r+0x20>)
 8012680:	4604      	mov	r4, r0
 8012682:	4608      	mov	r0, r1
 8012684:	4611      	mov	r1, r2
 8012686:	2200      	movs	r2, #0
 8012688:	602a      	str	r2, [r5, #0]
 801268a:	461a      	mov	r2, r3
 801268c:	f7f5 fe81 	bl	8008392 <_lseek>
 8012690:	1c43      	adds	r3, r0, #1
 8012692:	d102      	bne.n	801269a <_lseek_r+0x1e>
 8012694:	682b      	ldr	r3, [r5, #0]
 8012696:	b103      	cbz	r3, 801269a <_lseek_r+0x1e>
 8012698:	6023      	str	r3, [r4, #0]
 801269a:	bd38      	pop	{r3, r4, r5, pc}
 801269c:	200059cc 	.word	0x200059cc

080126a0 <_read_r>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4d07      	ldr	r5, [pc, #28]	@ (80126c0 <_read_r+0x20>)
 80126a4:	4604      	mov	r4, r0
 80126a6:	4608      	mov	r0, r1
 80126a8:	4611      	mov	r1, r2
 80126aa:	2200      	movs	r2, #0
 80126ac:	602a      	str	r2, [r5, #0]
 80126ae:	461a      	mov	r2, r3
 80126b0:	f7f5 fe0f 	bl	80082d2 <_read>
 80126b4:	1c43      	adds	r3, r0, #1
 80126b6:	d102      	bne.n	80126be <_read_r+0x1e>
 80126b8:	682b      	ldr	r3, [r5, #0]
 80126ba:	b103      	cbz	r3, 80126be <_read_r+0x1e>
 80126bc:	6023      	str	r3, [r4, #0]
 80126be:	bd38      	pop	{r3, r4, r5, pc}
 80126c0:	200059cc 	.word	0x200059cc

080126c4 <_sbrk_r>:
 80126c4:	b538      	push	{r3, r4, r5, lr}
 80126c6:	4d06      	ldr	r5, [pc, #24]	@ (80126e0 <_sbrk_r+0x1c>)
 80126c8:	2300      	movs	r3, #0
 80126ca:	4604      	mov	r4, r0
 80126cc:	4608      	mov	r0, r1
 80126ce:	602b      	str	r3, [r5, #0]
 80126d0:	f7f5 fe6c 	bl	80083ac <_sbrk>
 80126d4:	1c43      	adds	r3, r0, #1
 80126d6:	d102      	bne.n	80126de <_sbrk_r+0x1a>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	b103      	cbz	r3, 80126de <_sbrk_r+0x1a>
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	200059cc 	.word	0x200059cc

080126e4 <_write_r>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	4d07      	ldr	r5, [pc, #28]	@ (8012704 <_write_r+0x20>)
 80126e8:	4604      	mov	r4, r0
 80126ea:	4608      	mov	r0, r1
 80126ec:	4611      	mov	r1, r2
 80126ee:	2200      	movs	r2, #0
 80126f0:	602a      	str	r2, [r5, #0]
 80126f2:	461a      	mov	r2, r3
 80126f4:	f7f5 fe0a 	bl	800830c <_write>
 80126f8:	1c43      	adds	r3, r0, #1
 80126fa:	d102      	bne.n	8012702 <_write_r+0x1e>
 80126fc:	682b      	ldr	r3, [r5, #0]
 80126fe:	b103      	cbz	r3, 8012702 <_write_r+0x1e>
 8012700:	6023      	str	r3, [r4, #0]
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	200059cc 	.word	0x200059cc

08012708 <_close_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4d06      	ldr	r5, [pc, #24]	@ (8012724 <_close_r+0x1c>)
 801270c:	2300      	movs	r3, #0
 801270e:	4604      	mov	r4, r0
 8012710:	4608      	mov	r0, r1
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	f7f5 fe16 	bl	8008344 <_close>
 8012718:	1c43      	adds	r3, r0, #1
 801271a:	d102      	bne.n	8012722 <_close_r+0x1a>
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	b103      	cbz	r3, 8012722 <_close_r+0x1a>
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	bd38      	pop	{r3, r4, r5, pc}
 8012724:	200059cc 	.word	0x200059cc

08012728 <__assert_func>:
 8012728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801272a:	4614      	mov	r4, r2
 801272c:	461a      	mov	r2, r3
 801272e:	4b09      	ldr	r3, [pc, #36]	@ (8012754 <__assert_func+0x2c>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4605      	mov	r5, r0
 8012734:	68d8      	ldr	r0, [r3, #12]
 8012736:	b14c      	cbz	r4, 801274c <__assert_func+0x24>
 8012738:	4b07      	ldr	r3, [pc, #28]	@ (8012758 <__assert_func+0x30>)
 801273a:	9100      	str	r1, [sp, #0]
 801273c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012740:	4906      	ldr	r1, [pc, #24]	@ (801275c <__assert_func+0x34>)
 8012742:	462b      	mov	r3, r5
 8012744:	f000 f834 	bl	80127b0 <fiprintf>
 8012748:	f000 f851 	bl	80127ee <abort>
 801274c:	4b04      	ldr	r3, [pc, #16]	@ (8012760 <__assert_func+0x38>)
 801274e:	461c      	mov	r4, r3
 8012750:	e7f3      	b.n	801273a <__assert_func+0x12>
 8012752:	bf00      	nop
 8012754:	20000054 	.word	0x20000054
 8012758:	08013cb4 	.word	0x08013cb4
 801275c:	08013cc1 	.word	0x08013cc1
 8012760:	08013cef 	.word	0x08013cef

08012764 <_calloc_r>:
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	fba1 5402 	umull	r5, r4, r1, r2
 801276a:	b934      	cbnz	r4, 801277a <_calloc_r+0x16>
 801276c:	4629      	mov	r1, r5
 801276e:	f7ff fa8f 	bl	8011c90 <_malloc_r>
 8012772:	4606      	mov	r6, r0
 8012774:	b928      	cbnz	r0, 8012782 <_calloc_r+0x1e>
 8012776:	4630      	mov	r0, r6
 8012778:	bd70      	pop	{r4, r5, r6, pc}
 801277a:	220c      	movs	r2, #12
 801277c:	6002      	str	r2, [r0, #0]
 801277e:	2600      	movs	r6, #0
 8012780:	e7f9      	b.n	8012776 <_calloc_r+0x12>
 8012782:	462a      	mov	r2, r5
 8012784:	4621      	mov	r1, r4
 8012786:	f7fe fb0f 	bl	8010da8 <memset>
 801278a:	e7f4      	b.n	8012776 <_calloc_r+0x12>

0801278c <__ascii_mbtowc>:
 801278c:	b082      	sub	sp, #8
 801278e:	b901      	cbnz	r1, 8012792 <__ascii_mbtowc+0x6>
 8012790:	a901      	add	r1, sp, #4
 8012792:	b142      	cbz	r2, 80127a6 <__ascii_mbtowc+0x1a>
 8012794:	b14b      	cbz	r3, 80127aa <__ascii_mbtowc+0x1e>
 8012796:	7813      	ldrb	r3, [r2, #0]
 8012798:	600b      	str	r3, [r1, #0]
 801279a:	7812      	ldrb	r2, [r2, #0]
 801279c:	1e10      	subs	r0, r2, #0
 801279e:	bf18      	it	ne
 80127a0:	2001      	movne	r0, #1
 80127a2:	b002      	add	sp, #8
 80127a4:	4770      	bx	lr
 80127a6:	4610      	mov	r0, r2
 80127a8:	e7fb      	b.n	80127a2 <__ascii_mbtowc+0x16>
 80127aa:	f06f 0001 	mvn.w	r0, #1
 80127ae:	e7f8      	b.n	80127a2 <__ascii_mbtowc+0x16>

080127b0 <fiprintf>:
 80127b0:	b40e      	push	{r1, r2, r3}
 80127b2:	b503      	push	{r0, r1, lr}
 80127b4:	4601      	mov	r1, r0
 80127b6:	ab03      	add	r3, sp, #12
 80127b8:	4805      	ldr	r0, [pc, #20]	@ (80127d0 <fiprintf+0x20>)
 80127ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80127be:	6800      	ldr	r0, [r0, #0]
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	f000 f845 	bl	8012850 <_vfiprintf_r>
 80127c6:	b002      	add	sp, #8
 80127c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127cc:	b003      	add	sp, #12
 80127ce:	4770      	bx	lr
 80127d0:	20000054 	.word	0x20000054

080127d4 <__ascii_wctomb>:
 80127d4:	4603      	mov	r3, r0
 80127d6:	4608      	mov	r0, r1
 80127d8:	b141      	cbz	r1, 80127ec <__ascii_wctomb+0x18>
 80127da:	2aff      	cmp	r2, #255	@ 0xff
 80127dc:	d904      	bls.n	80127e8 <__ascii_wctomb+0x14>
 80127de:	228a      	movs	r2, #138	@ 0x8a
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127e6:	4770      	bx	lr
 80127e8:	700a      	strb	r2, [r1, #0]
 80127ea:	2001      	movs	r0, #1
 80127ec:	4770      	bx	lr

080127ee <abort>:
 80127ee:	b508      	push	{r3, lr}
 80127f0:	2006      	movs	r0, #6
 80127f2:	f000 fa63 	bl	8012cbc <raise>
 80127f6:	2001      	movs	r0, #1
 80127f8:	f7f5 fd60 	bl	80082bc <_exit>

080127fc <__sfputc_r>:
 80127fc:	6893      	ldr	r3, [r2, #8]
 80127fe:	3b01      	subs	r3, #1
 8012800:	2b00      	cmp	r3, #0
 8012802:	b410      	push	{r4}
 8012804:	6093      	str	r3, [r2, #8]
 8012806:	da08      	bge.n	801281a <__sfputc_r+0x1e>
 8012808:	6994      	ldr	r4, [r2, #24]
 801280a:	42a3      	cmp	r3, r4
 801280c:	db01      	blt.n	8012812 <__sfputc_r+0x16>
 801280e:	290a      	cmp	r1, #10
 8012810:	d103      	bne.n	801281a <__sfputc_r+0x1e>
 8012812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012816:	f000 b933 	b.w	8012a80 <__swbuf_r>
 801281a:	6813      	ldr	r3, [r2, #0]
 801281c:	1c58      	adds	r0, r3, #1
 801281e:	6010      	str	r0, [r2, #0]
 8012820:	7019      	strb	r1, [r3, #0]
 8012822:	4608      	mov	r0, r1
 8012824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012828:	4770      	bx	lr

0801282a <__sfputs_r>:
 801282a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282c:	4606      	mov	r6, r0
 801282e:	460f      	mov	r7, r1
 8012830:	4614      	mov	r4, r2
 8012832:	18d5      	adds	r5, r2, r3
 8012834:	42ac      	cmp	r4, r5
 8012836:	d101      	bne.n	801283c <__sfputs_r+0x12>
 8012838:	2000      	movs	r0, #0
 801283a:	e007      	b.n	801284c <__sfputs_r+0x22>
 801283c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012840:	463a      	mov	r2, r7
 8012842:	4630      	mov	r0, r6
 8012844:	f7ff ffda 	bl	80127fc <__sfputc_r>
 8012848:	1c43      	adds	r3, r0, #1
 801284a:	d1f3      	bne.n	8012834 <__sfputs_r+0xa>
 801284c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012850 <_vfiprintf_r>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	460d      	mov	r5, r1
 8012856:	b09d      	sub	sp, #116	@ 0x74
 8012858:	4614      	mov	r4, r2
 801285a:	4698      	mov	r8, r3
 801285c:	4606      	mov	r6, r0
 801285e:	b118      	cbz	r0, 8012868 <_vfiprintf_r+0x18>
 8012860:	6a03      	ldr	r3, [r0, #32]
 8012862:	b90b      	cbnz	r3, 8012868 <_vfiprintf_r+0x18>
 8012864:	f7fe fa6a 	bl	8010d3c <__sinit>
 8012868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801286a:	07d9      	lsls	r1, r3, #31
 801286c:	d405      	bmi.n	801287a <_vfiprintf_r+0x2a>
 801286e:	89ab      	ldrh	r3, [r5, #12]
 8012870:	059a      	lsls	r2, r3, #22
 8012872:	d402      	bmi.n	801287a <_vfiprintf_r+0x2a>
 8012874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012876:	f7fe faca 	bl	8010e0e <__retarget_lock_acquire_recursive>
 801287a:	89ab      	ldrh	r3, [r5, #12]
 801287c:	071b      	lsls	r3, r3, #28
 801287e:	d501      	bpl.n	8012884 <_vfiprintf_r+0x34>
 8012880:	692b      	ldr	r3, [r5, #16]
 8012882:	b99b      	cbnz	r3, 80128ac <_vfiprintf_r+0x5c>
 8012884:	4629      	mov	r1, r5
 8012886:	4630      	mov	r0, r6
 8012888:	f000 f938 	bl	8012afc <__swsetup_r>
 801288c:	b170      	cbz	r0, 80128ac <_vfiprintf_r+0x5c>
 801288e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012890:	07dc      	lsls	r4, r3, #31
 8012892:	d504      	bpl.n	801289e <_vfiprintf_r+0x4e>
 8012894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012898:	b01d      	add	sp, #116	@ 0x74
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289e:	89ab      	ldrh	r3, [r5, #12]
 80128a0:	0598      	lsls	r0, r3, #22
 80128a2:	d4f7      	bmi.n	8012894 <_vfiprintf_r+0x44>
 80128a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128a6:	f7fe fab3 	bl	8010e10 <__retarget_lock_release_recursive>
 80128aa:	e7f3      	b.n	8012894 <_vfiprintf_r+0x44>
 80128ac:	2300      	movs	r3, #0
 80128ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80128b0:	2320      	movs	r3, #32
 80128b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ba:	2330      	movs	r3, #48	@ 0x30
 80128bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012a6c <_vfiprintf_r+0x21c>
 80128c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128c4:	f04f 0901 	mov.w	r9, #1
 80128c8:	4623      	mov	r3, r4
 80128ca:	469a      	mov	sl, r3
 80128cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128d0:	b10a      	cbz	r2, 80128d6 <_vfiprintf_r+0x86>
 80128d2:	2a25      	cmp	r2, #37	@ 0x25
 80128d4:	d1f9      	bne.n	80128ca <_vfiprintf_r+0x7a>
 80128d6:	ebba 0b04 	subs.w	fp, sl, r4
 80128da:	d00b      	beq.n	80128f4 <_vfiprintf_r+0xa4>
 80128dc:	465b      	mov	r3, fp
 80128de:	4622      	mov	r2, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	4630      	mov	r0, r6
 80128e4:	f7ff ffa1 	bl	801282a <__sfputs_r>
 80128e8:	3001      	adds	r0, #1
 80128ea:	f000 80a7 	beq.w	8012a3c <_vfiprintf_r+0x1ec>
 80128ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128f0:	445a      	add	r2, fp
 80128f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80128f4:	f89a 3000 	ldrb.w	r3, [sl]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 809f 	beq.w	8012a3c <_vfiprintf_r+0x1ec>
 80128fe:	2300      	movs	r3, #0
 8012900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012908:	f10a 0a01 	add.w	sl, sl, #1
 801290c:	9304      	str	r3, [sp, #16]
 801290e:	9307      	str	r3, [sp, #28]
 8012910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012914:	931a      	str	r3, [sp, #104]	@ 0x68
 8012916:	4654      	mov	r4, sl
 8012918:	2205      	movs	r2, #5
 801291a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801291e:	4853      	ldr	r0, [pc, #332]	@ (8012a6c <_vfiprintf_r+0x21c>)
 8012920:	f7ed fc56 	bl	80001d0 <memchr>
 8012924:	9a04      	ldr	r2, [sp, #16]
 8012926:	b9d8      	cbnz	r0, 8012960 <_vfiprintf_r+0x110>
 8012928:	06d1      	lsls	r1, r2, #27
 801292a:	bf44      	itt	mi
 801292c:	2320      	movmi	r3, #32
 801292e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012932:	0713      	lsls	r3, r2, #28
 8012934:	bf44      	itt	mi
 8012936:	232b      	movmi	r3, #43	@ 0x2b
 8012938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801293c:	f89a 3000 	ldrb.w	r3, [sl]
 8012940:	2b2a      	cmp	r3, #42	@ 0x2a
 8012942:	d015      	beq.n	8012970 <_vfiprintf_r+0x120>
 8012944:	9a07      	ldr	r2, [sp, #28]
 8012946:	4654      	mov	r4, sl
 8012948:	2000      	movs	r0, #0
 801294a:	f04f 0c0a 	mov.w	ip, #10
 801294e:	4621      	mov	r1, r4
 8012950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012954:	3b30      	subs	r3, #48	@ 0x30
 8012956:	2b09      	cmp	r3, #9
 8012958:	d94b      	bls.n	80129f2 <_vfiprintf_r+0x1a2>
 801295a:	b1b0      	cbz	r0, 801298a <_vfiprintf_r+0x13a>
 801295c:	9207      	str	r2, [sp, #28]
 801295e:	e014      	b.n	801298a <_vfiprintf_r+0x13a>
 8012960:	eba0 0308 	sub.w	r3, r0, r8
 8012964:	fa09 f303 	lsl.w	r3, r9, r3
 8012968:	4313      	orrs	r3, r2
 801296a:	9304      	str	r3, [sp, #16]
 801296c:	46a2      	mov	sl, r4
 801296e:	e7d2      	b.n	8012916 <_vfiprintf_r+0xc6>
 8012970:	9b03      	ldr	r3, [sp, #12]
 8012972:	1d19      	adds	r1, r3, #4
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	9103      	str	r1, [sp, #12]
 8012978:	2b00      	cmp	r3, #0
 801297a:	bfbb      	ittet	lt
 801297c:	425b      	neglt	r3, r3
 801297e:	f042 0202 	orrlt.w	r2, r2, #2
 8012982:	9307      	strge	r3, [sp, #28]
 8012984:	9307      	strlt	r3, [sp, #28]
 8012986:	bfb8      	it	lt
 8012988:	9204      	strlt	r2, [sp, #16]
 801298a:	7823      	ldrb	r3, [r4, #0]
 801298c:	2b2e      	cmp	r3, #46	@ 0x2e
 801298e:	d10a      	bne.n	80129a6 <_vfiprintf_r+0x156>
 8012990:	7863      	ldrb	r3, [r4, #1]
 8012992:	2b2a      	cmp	r3, #42	@ 0x2a
 8012994:	d132      	bne.n	80129fc <_vfiprintf_r+0x1ac>
 8012996:	9b03      	ldr	r3, [sp, #12]
 8012998:	1d1a      	adds	r2, r3, #4
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	9203      	str	r2, [sp, #12]
 801299e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129a2:	3402      	adds	r4, #2
 80129a4:	9305      	str	r3, [sp, #20]
 80129a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012a7c <_vfiprintf_r+0x22c>
 80129aa:	7821      	ldrb	r1, [r4, #0]
 80129ac:	2203      	movs	r2, #3
 80129ae:	4650      	mov	r0, sl
 80129b0:	f7ed fc0e 	bl	80001d0 <memchr>
 80129b4:	b138      	cbz	r0, 80129c6 <_vfiprintf_r+0x176>
 80129b6:	9b04      	ldr	r3, [sp, #16]
 80129b8:	eba0 000a 	sub.w	r0, r0, sl
 80129bc:	2240      	movs	r2, #64	@ 0x40
 80129be:	4082      	lsls	r2, r0
 80129c0:	4313      	orrs	r3, r2
 80129c2:	3401      	adds	r4, #1
 80129c4:	9304      	str	r3, [sp, #16]
 80129c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ca:	4829      	ldr	r0, [pc, #164]	@ (8012a70 <_vfiprintf_r+0x220>)
 80129cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80129d0:	2206      	movs	r2, #6
 80129d2:	f7ed fbfd 	bl	80001d0 <memchr>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d03f      	beq.n	8012a5a <_vfiprintf_r+0x20a>
 80129da:	4b26      	ldr	r3, [pc, #152]	@ (8012a74 <_vfiprintf_r+0x224>)
 80129dc:	bb1b      	cbnz	r3, 8012a26 <_vfiprintf_r+0x1d6>
 80129de:	9b03      	ldr	r3, [sp, #12]
 80129e0:	3307      	adds	r3, #7
 80129e2:	f023 0307 	bic.w	r3, r3, #7
 80129e6:	3308      	adds	r3, #8
 80129e8:	9303      	str	r3, [sp, #12]
 80129ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ec:	443b      	add	r3, r7
 80129ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80129f0:	e76a      	b.n	80128c8 <_vfiprintf_r+0x78>
 80129f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80129f6:	460c      	mov	r4, r1
 80129f8:	2001      	movs	r0, #1
 80129fa:	e7a8      	b.n	801294e <_vfiprintf_r+0xfe>
 80129fc:	2300      	movs	r3, #0
 80129fe:	3401      	adds	r4, #1
 8012a00:	9305      	str	r3, [sp, #20]
 8012a02:	4619      	mov	r1, r3
 8012a04:	f04f 0c0a 	mov.w	ip, #10
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a0e:	3a30      	subs	r2, #48	@ 0x30
 8012a10:	2a09      	cmp	r2, #9
 8012a12:	d903      	bls.n	8012a1c <_vfiprintf_r+0x1cc>
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0c6      	beq.n	80129a6 <_vfiprintf_r+0x156>
 8012a18:	9105      	str	r1, [sp, #20]
 8012a1a:	e7c4      	b.n	80129a6 <_vfiprintf_r+0x156>
 8012a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a20:	4604      	mov	r4, r0
 8012a22:	2301      	movs	r3, #1
 8012a24:	e7f0      	b.n	8012a08 <_vfiprintf_r+0x1b8>
 8012a26:	ab03      	add	r3, sp, #12
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	462a      	mov	r2, r5
 8012a2c:	4b12      	ldr	r3, [pc, #72]	@ (8012a78 <_vfiprintf_r+0x228>)
 8012a2e:	a904      	add	r1, sp, #16
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7fd fd41 	bl	80104b8 <_printf_float>
 8012a36:	4607      	mov	r7, r0
 8012a38:	1c78      	adds	r0, r7, #1
 8012a3a:	d1d6      	bne.n	80129ea <_vfiprintf_r+0x19a>
 8012a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a3e:	07d9      	lsls	r1, r3, #31
 8012a40:	d405      	bmi.n	8012a4e <_vfiprintf_r+0x1fe>
 8012a42:	89ab      	ldrh	r3, [r5, #12]
 8012a44:	059a      	lsls	r2, r3, #22
 8012a46:	d402      	bmi.n	8012a4e <_vfiprintf_r+0x1fe>
 8012a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a4a:	f7fe f9e1 	bl	8010e10 <__retarget_lock_release_recursive>
 8012a4e:	89ab      	ldrh	r3, [r5, #12]
 8012a50:	065b      	lsls	r3, r3, #25
 8012a52:	f53f af1f 	bmi.w	8012894 <_vfiprintf_r+0x44>
 8012a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a58:	e71e      	b.n	8012898 <_vfiprintf_r+0x48>
 8012a5a:	ab03      	add	r3, sp, #12
 8012a5c:	9300      	str	r3, [sp, #0]
 8012a5e:	462a      	mov	r2, r5
 8012a60:	4b05      	ldr	r3, [pc, #20]	@ (8012a78 <_vfiprintf_r+0x228>)
 8012a62:	a904      	add	r1, sp, #16
 8012a64:	4630      	mov	r0, r6
 8012a66:	f7fd ffbf 	bl	80109e8 <_printf_i>
 8012a6a:	e7e4      	b.n	8012a36 <_vfiprintf_r+0x1e6>
 8012a6c:	08013cf0 	.word	0x08013cf0
 8012a70:	08013cfa 	.word	0x08013cfa
 8012a74:	080104b9 	.word	0x080104b9
 8012a78:	0801282b 	.word	0x0801282b
 8012a7c:	08013cf6 	.word	0x08013cf6

08012a80 <__swbuf_r>:
 8012a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a82:	460e      	mov	r6, r1
 8012a84:	4614      	mov	r4, r2
 8012a86:	4605      	mov	r5, r0
 8012a88:	b118      	cbz	r0, 8012a92 <__swbuf_r+0x12>
 8012a8a:	6a03      	ldr	r3, [r0, #32]
 8012a8c:	b90b      	cbnz	r3, 8012a92 <__swbuf_r+0x12>
 8012a8e:	f7fe f955 	bl	8010d3c <__sinit>
 8012a92:	69a3      	ldr	r3, [r4, #24]
 8012a94:	60a3      	str	r3, [r4, #8]
 8012a96:	89a3      	ldrh	r3, [r4, #12]
 8012a98:	071a      	lsls	r2, r3, #28
 8012a9a:	d501      	bpl.n	8012aa0 <__swbuf_r+0x20>
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	b943      	cbnz	r3, 8012ab2 <__swbuf_r+0x32>
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	f000 f82a 	bl	8012afc <__swsetup_r>
 8012aa8:	b118      	cbz	r0, 8012ab2 <__swbuf_r+0x32>
 8012aaa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012aae:	4638      	mov	r0, r7
 8012ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	6922      	ldr	r2, [r4, #16]
 8012ab6:	1a98      	subs	r0, r3, r2
 8012ab8:	6963      	ldr	r3, [r4, #20]
 8012aba:	b2f6      	uxtb	r6, r6
 8012abc:	4283      	cmp	r3, r0
 8012abe:	4637      	mov	r7, r6
 8012ac0:	dc05      	bgt.n	8012ace <__swbuf_r+0x4e>
 8012ac2:	4621      	mov	r1, r4
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	f7ff f9e7 	bl	8011e98 <_fflush_r>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	d1ed      	bne.n	8012aaa <__swbuf_r+0x2a>
 8012ace:	68a3      	ldr	r3, [r4, #8]
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	60a3      	str	r3, [r4, #8]
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	1c5a      	adds	r2, r3, #1
 8012ad8:	6022      	str	r2, [r4, #0]
 8012ada:	701e      	strb	r6, [r3, #0]
 8012adc:	6962      	ldr	r2, [r4, #20]
 8012ade:	1c43      	adds	r3, r0, #1
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d004      	beq.n	8012aee <__swbuf_r+0x6e>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	07db      	lsls	r3, r3, #31
 8012ae8:	d5e1      	bpl.n	8012aae <__swbuf_r+0x2e>
 8012aea:	2e0a      	cmp	r6, #10
 8012aec:	d1df      	bne.n	8012aae <__swbuf_r+0x2e>
 8012aee:	4621      	mov	r1, r4
 8012af0:	4628      	mov	r0, r5
 8012af2:	f7ff f9d1 	bl	8011e98 <_fflush_r>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d0d9      	beq.n	8012aae <__swbuf_r+0x2e>
 8012afa:	e7d6      	b.n	8012aaa <__swbuf_r+0x2a>

08012afc <__swsetup_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4b29      	ldr	r3, [pc, #164]	@ (8012ba4 <__swsetup_r+0xa8>)
 8012b00:	4605      	mov	r5, r0
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	460c      	mov	r4, r1
 8012b06:	b118      	cbz	r0, 8012b10 <__swsetup_r+0x14>
 8012b08:	6a03      	ldr	r3, [r0, #32]
 8012b0a:	b90b      	cbnz	r3, 8012b10 <__swsetup_r+0x14>
 8012b0c:	f7fe f916 	bl	8010d3c <__sinit>
 8012b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b14:	0719      	lsls	r1, r3, #28
 8012b16:	d422      	bmi.n	8012b5e <__swsetup_r+0x62>
 8012b18:	06da      	lsls	r2, r3, #27
 8012b1a:	d407      	bmi.n	8012b2c <__swsetup_r+0x30>
 8012b1c:	2209      	movs	r2, #9
 8012b1e:	602a      	str	r2, [r5, #0]
 8012b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b24:	81a3      	strh	r3, [r4, #12]
 8012b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b2a:	e033      	b.n	8012b94 <__swsetup_r+0x98>
 8012b2c:	0758      	lsls	r0, r3, #29
 8012b2e:	d512      	bpl.n	8012b56 <__swsetup_r+0x5a>
 8012b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b32:	b141      	cbz	r1, 8012b46 <__swsetup_r+0x4a>
 8012b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b38:	4299      	cmp	r1, r3
 8012b3a:	d002      	beq.n	8012b42 <__swsetup_r+0x46>
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	f7ff f833 	bl	8011ba8 <_free_r>
 8012b42:	2300      	movs	r3, #0
 8012b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b46:	89a3      	ldrh	r3, [r4, #12]
 8012b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b4c:	81a3      	strh	r3, [r4, #12]
 8012b4e:	2300      	movs	r3, #0
 8012b50:	6063      	str	r3, [r4, #4]
 8012b52:	6923      	ldr	r3, [r4, #16]
 8012b54:	6023      	str	r3, [r4, #0]
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	f043 0308 	orr.w	r3, r3, #8
 8012b5c:	81a3      	strh	r3, [r4, #12]
 8012b5e:	6923      	ldr	r3, [r4, #16]
 8012b60:	b94b      	cbnz	r3, 8012b76 <__swsetup_r+0x7a>
 8012b62:	89a3      	ldrh	r3, [r4, #12]
 8012b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b6c:	d003      	beq.n	8012b76 <__swsetup_r+0x7a>
 8012b6e:	4621      	mov	r1, r4
 8012b70:	4628      	mov	r0, r5
 8012b72:	f000 f83f 	bl	8012bf4 <__smakebuf_r>
 8012b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b7a:	f013 0201 	ands.w	r2, r3, #1
 8012b7e:	d00a      	beq.n	8012b96 <__swsetup_r+0x9a>
 8012b80:	2200      	movs	r2, #0
 8012b82:	60a2      	str	r2, [r4, #8]
 8012b84:	6962      	ldr	r2, [r4, #20]
 8012b86:	4252      	negs	r2, r2
 8012b88:	61a2      	str	r2, [r4, #24]
 8012b8a:	6922      	ldr	r2, [r4, #16]
 8012b8c:	b942      	cbnz	r2, 8012ba0 <__swsetup_r+0xa4>
 8012b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b92:	d1c5      	bne.n	8012b20 <__swsetup_r+0x24>
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	0799      	lsls	r1, r3, #30
 8012b98:	bf58      	it	pl
 8012b9a:	6962      	ldrpl	r2, [r4, #20]
 8012b9c:	60a2      	str	r2, [r4, #8]
 8012b9e:	e7f4      	b.n	8012b8a <__swsetup_r+0x8e>
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	e7f7      	b.n	8012b94 <__swsetup_r+0x98>
 8012ba4:	20000054 	.word	0x20000054

08012ba8 <__swhatbuf_r>:
 8012ba8:	b570      	push	{r4, r5, r6, lr}
 8012baa:	460c      	mov	r4, r1
 8012bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bb0:	2900      	cmp	r1, #0
 8012bb2:	b096      	sub	sp, #88	@ 0x58
 8012bb4:	4615      	mov	r5, r2
 8012bb6:	461e      	mov	r6, r3
 8012bb8:	da0d      	bge.n	8012bd6 <__swhatbuf_r+0x2e>
 8012bba:	89a3      	ldrh	r3, [r4, #12]
 8012bbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012bc0:	f04f 0100 	mov.w	r1, #0
 8012bc4:	bf14      	ite	ne
 8012bc6:	2340      	movne	r3, #64	@ 0x40
 8012bc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012bcc:	2000      	movs	r0, #0
 8012bce:	6031      	str	r1, [r6, #0]
 8012bd0:	602b      	str	r3, [r5, #0]
 8012bd2:	b016      	add	sp, #88	@ 0x58
 8012bd4:	bd70      	pop	{r4, r5, r6, pc}
 8012bd6:	466a      	mov	r2, sp
 8012bd8:	f000 f89c 	bl	8012d14 <_fstat_r>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	dbec      	blt.n	8012bba <__swhatbuf_r+0x12>
 8012be0:	9901      	ldr	r1, [sp, #4]
 8012be2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012be6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012bea:	4259      	negs	r1, r3
 8012bec:	4159      	adcs	r1, r3
 8012bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012bf2:	e7eb      	b.n	8012bcc <__swhatbuf_r+0x24>

08012bf4 <__smakebuf_r>:
 8012bf4:	898b      	ldrh	r3, [r1, #12]
 8012bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bf8:	079d      	lsls	r5, r3, #30
 8012bfa:	4606      	mov	r6, r0
 8012bfc:	460c      	mov	r4, r1
 8012bfe:	d507      	bpl.n	8012c10 <__smakebuf_r+0x1c>
 8012c00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c04:	6023      	str	r3, [r4, #0]
 8012c06:	6123      	str	r3, [r4, #16]
 8012c08:	2301      	movs	r3, #1
 8012c0a:	6163      	str	r3, [r4, #20]
 8012c0c:	b003      	add	sp, #12
 8012c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c10:	ab01      	add	r3, sp, #4
 8012c12:	466a      	mov	r2, sp
 8012c14:	f7ff ffc8 	bl	8012ba8 <__swhatbuf_r>
 8012c18:	9f00      	ldr	r7, [sp, #0]
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	4639      	mov	r1, r7
 8012c1e:	4630      	mov	r0, r6
 8012c20:	f7ff f836 	bl	8011c90 <_malloc_r>
 8012c24:	b948      	cbnz	r0, 8012c3a <__smakebuf_r+0x46>
 8012c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c2a:	059a      	lsls	r2, r3, #22
 8012c2c:	d4ee      	bmi.n	8012c0c <__smakebuf_r+0x18>
 8012c2e:	f023 0303 	bic.w	r3, r3, #3
 8012c32:	f043 0302 	orr.w	r3, r3, #2
 8012c36:	81a3      	strh	r3, [r4, #12]
 8012c38:	e7e2      	b.n	8012c00 <__smakebuf_r+0xc>
 8012c3a:	89a3      	ldrh	r3, [r4, #12]
 8012c3c:	6020      	str	r0, [r4, #0]
 8012c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c42:	81a3      	strh	r3, [r4, #12]
 8012c44:	9b01      	ldr	r3, [sp, #4]
 8012c46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c4a:	b15b      	cbz	r3, 8012c64 <__smakebuf_r+0x70>
 8012c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c50:	4630      	mov	r0, r6
 8012c52:	f000 f83b 	bl	8012ccc <_isatty_r>
 8012c56:	b128      	cbz	r0, 8012c64 <__smakebuf_r+0x70>
 8012c58:	89a3      	ldrh	r3, [r4, #12]
 8012c5a:	f023 0303 	bic.w	r3, r3, #3
 8012c5e:	f043 0301 	orr.w	r3, r3, #1
 8012c62:	81a3      	strh	r3, [r4, #12]
 8012c64:	89a3      	ldrh	r3, [r4, #12]
 8012c66:	431d      	orrs	r5, r3
 8012c68:	81a5      	strh	r5, [r4, #12]
 8012c6a:	e7cf      	b.n	8012c0c <__smakebuf_r+0x18>

08012c6c <_raise_r>:
 8012c6c:	291f      	cmp	r1, #31
 8012c6e:	b538      	push	{r3, r4, r5, lr}
 8012c70:	4605      	mov	r5, r0
 8012c72:	460c      	mov	r4, r1
 8012c74:	d904      	bls.n	8012c80 <_raise_r+0x14>
 8012c76:	2316      	movs	r3, #22
 8012c78:	6003      	str	r3, [r0, #0]
 8012c7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c7e:	bd38      	pop	{r3, r4, r5, pc}
 8012c80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012c82:	b112      	cbz	r2, 8012c8a <_raise_r+0x1e>
 8012c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c88:	b94b      	cbnz	r3, 8012c9e <_raise_r+0x32>
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f000 f840 	bl	8012d10 <_getpid_r>
 8012c90:	4622      	mov	r2, r4
 8012c92:	4601      	mov	r1, r0
 8012c94:	4628      	mov	r0, r5
 8012c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c9a:	f000 b827 	b.w	8012cec <_kill_r>
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d00a      	beq.n	8012cb8 <_raise_r+0x4c>
 8012ca2:	1c59      	adds	r1, r3, #1
 8012ca4:	d103      	bne.n	8012cae <_raise_r+0x42>
 8012ca6:	2316      	movs	r3, #22
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	2001      	movs	r0, #1
 8012cac:	e7e7      	b.n	8012c7e <_raise_r+0x12>
 8012cae:	2100      	movs	r1, #0
 8012cb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	4798      	blx	r3
 8012cb8:	2000      	movs	r0, #0
 8012cba:	e7e0      	b.n	8012c7e <_raise_r+0x12>

08012cbc <raise>:
 8012cbc:	4b02      	ldr	r3, [pc, #8]	@ (8012cc8 <raise+0xc>)
 8012cbe:	4601      	mov	r1, r0
 8012cc0:	6818      	ldr	r0, [r3, #0]
 8012cc2:	f7ff bfd3 	b.w	8012c6c <_raise_r>
 8012cc6:	bf00      	nop
 8012cc8:	20000054 	.word	0x20000054

08012ccc <_isatty_r>:
 8012ccc:	b538      	push	{r3, r4, r5, lr}
 8012cce:	4d06      	ldr	r5, [pc, #24]	@ (8012ce8 <_isatty_r+0x1c>)
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	4608      	mov	r0, r1
 8012cd6:	602b      	str	r3, [r5, #0]
 8012cd8:	f7f5 fb50 	bl	800837c <_isatty>
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d102      	bne.n	8012ce6 <_isatty_r+0x1a>
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	b103      	cbz	r3, 8012ce6 <_isatty_r+0x1a>
 8012ce4:	6023      	str	r3, [r4, #0]
 8012ce6:	bd38      	pop	{r3, r4, r5, pc}
 8012ce8:	200059cc 	.word	0x200059cc

08012cec <_kill_r>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	4d07      	ldr	r5, [pc, #28]	@ (8012d0c <_kill_r+0x20>)
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	4608      	mov	r0, r1
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	602b      	str	r3, [r5, #0]
 8012cfa:	f7f5 facf 	bl	800829c <_kill>
 8012cfe:	1c43      	adds	r3, r0, #1
 8012d00:	d102      	bne.n	8012d08 <_kill_r+0x1c>
 8012d02:	682b      	ldr	r3, [r5, #0]
 8012d04:	b103      	cbz	r3, 8012d08 <_kill_r+0x1c>
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	bd38      	pop	{r3, r4, r5, pc}
 8012d0a:	bf00      	nop
 8012d0c:	200059cc 	.word	0x200059cc

08012d10 <_getpid_r>:
 8012d10:	f7f5 babc 	b.w	800828c <_getpid>

08012d14 <_fstat_r>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	4d07      	ldr	r5, [pc, #28]	@ (8012d34 <_fstat_r+0x20>)
 8012d18:	2300      	movs	r3, #0
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	4608      	mov	r0, r1
 8012d1e:	4611      	mov	r1, r2
 8012d20:	602b      	str	r3, [r5, #0]
 8012d22:	f7f5 fb1b 	bl	800835c <_fstat>
 8012d26:	1c43      	adds	r3, r0, #1
 8012d28:	d102      	bne.n	8012d30 <_fstat_r+0x1c>
 8012d2a:	682b      	ldr	r3, [r5, #0]
 8012d2c:	b103      	cbz	r3, 8012d30 <_fstat_r+0x1c>
 8012d2e:	6023      	str	r3, [r4, #0]
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	bf00      	nop
 8012d34:	200059cc 	.word	0x200059cc

08012d38 <cosf>:
 8012d38:	ee10 3a10 	vmov	r3, s0
 8012d3c:	b507      	push	{r0, r1, r2, lr}
 8012d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8012db8 <cosf+0x80>)
 8012d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d44:	4293      	cmp	r3, r2
 8012d46:	d806      	bhi.n	8012d56 <cosf+0x1e>
 8012d48:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012dbc <cosf+0x84>
 8012d4c:	b003      	add	sp, #12
 8012d4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d52:	f000 b87b 	b.w	8012e4c <__kernel_cosf>
 8012d56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012d5a:	d304      	bcc.n	8012d66 <cosf+0x2e>
 8012d5c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d60:	b003      	add	sp, #12
 8012d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d66:	4668      	mov	r0, sp
 8012d68:	f000 f910 	bl	8012f8c <__ieee754_rem_pio2f>
 8012d6c:	f000 0003 	and.w	r0, r0, #3
 8012d70:	2801      	cmp	r0, #1
 8012d72:	d009      	beq.n	8012d88 <cosf+0x50>
 8012d74:	2802      	cmp	r0, #2
 8012d76:	d010      	beq.n	8012d9a <cosf+0x62>
 8012d78:	b9b0      	cbnz	r0, 8012da8 <cosf+0x70>
 8012d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d7e:	ed9d 0a00 	vldr	s0, [sp]
 8012d82:	f000 f863 	bl	8012e4c <__kernel_cosf>
 8012d86:	e7eb      	b.n	8012d60 <cosf+0x28>
 8012d88:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d8c:	ed9d 0a00 	vldr	s0, [sp]
 8012d90:	f000 f8b4 	bl	8012efc <__kernel_sinf>
 8012d94:	eeb1 0a40 	vneg.f32	s0, s0
 8012d98:	e7e2      	b.n	8012d60 <cosf+0x28>
 8012d9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d9e:	ed9d 0a00 	vldr	s0, [sp]
 8012da2:	f000 f853 	bl	8012e4c <__kernel_cosf>
 8012da6:	e7f5      	b.n	8012d94 <cosf+0x5c>
 8012da8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dac:	ed9d 0a00 	vldr	s0, [sp]
 8012db0:	2001      	movs	r0, #1
 8012db2:	f000 f8a3 	bl	8012efc <__kernel_sinf>
 8012db6:	e7d3      	b.n	8012d60 <cosf+0x28>
 8012db8:	3f490fd8 	.word	0x3f490fd8
 8012dbc:	00000000 	.word	0x00000000

08012dc0 <sinf>:
 8012dc0:	ee10 3a10 	vmov	r3, s0
 8012dc4:	b507      	push	{r0, r1, r2, lr}
 8012dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8012e44 <sinf+0x84>)
 8012dc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d807      	bhi.n	8012de0 <sinf+0x20>
 8012dd0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012e48 <sinf+0x88>
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	b003      	add	sp, #12
 8012dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ddc:	f000 b88e 	b.w	8012efc <__kernel_sinf>
 8012de0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012de4:	d304      	bcc.n	8012df0 <sinf+0x30>
 8012de6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012dea:	b003      	add	sp, #12
 8012dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8012df0:	4668      	mov	r0, sp
 8012df2:	f000 f8cb 	bl	8012f8c <__ieee754_rem_pio2f>
 8012df6:	f000 0003 	and.w	r0, r0, #3
 8012dfa:	2801      	cmp	r0, #1
 8012dfc:	d00a      	beq.n	8012e14 <sinf+0x54>
 8012dfe:	2802      	cmp	r0, #2
 8012e00:	d00f      	beq.n	8012e22 <sinf+0x62>
 8012e02:	b9c0      	cbnz	r0, 8012e36 <sinf+0x76>
 8012e04:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e08:	ed9d 0a00 	vldr	s0, [sp]
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	f000 f875 	bl	8012efc <__kernel_sinf>
 8012e12:	e7ea      	b.n	8012dea <sinf+0x2a>
 8012e14:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e18:	ed9d 0a00 	vldr	s0, [sp]
 8012e1c:	f000 f816 	bl	8012e4c <__kernel_cosf>
 8012e20:	e7e3      	b.n	8012dea <sinf+0x2a>
 8012e22:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e26:	ed9d 0a00 	vldr	s0, [sp]
 8012e2a:	2001      	movs	r0, #1
 8012e2c:	f000 f866 	bl	8012efc <__kernel_sinf>
 8012e30:	eeb1 0a40 	vneg.f32	s0, s0
 8012e34:	e7d9      	b.n	8012dea <sinf+0x2a>
 8012e36:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e3a:	ed9d 0a00 	vldr	s0, [sp]
 8012e3e:	f000 f805 	bl	8012e4c <__kernel_cosf>
 8012e42:	e7f5      	b.n	8012e30 <sinf+0x70>
 8012e44:	3f490fd8 	.word	0x3f490fd8
 8012e48:	00000000 	.word	0x00000000

08012e4c <__kernel_cosf>:
 8012e4c:	ee10 3a10 	vmov	r3, s0
 8012e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012e54:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012e58:	eef0 6a40 	vmov.f32	s13, s0
 8012e5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012e60:	d204      	bcs.n	8012e6c <__kernel_cosf+0x20>
 8012e62:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012e66:	ee17 2a90 	vmov	r2, s15
 8012e6a:	b342      	cbz	r2, 8012ebe <__kernel_cosf+0x72>
 8012e6c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012e70:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012edc <__kernel_cosf+0x90>
 8012e74:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8012ee0 <__kernel_cosf+0x94>
 8012e78:	4a1a      	ldr	r2, [pc, #104]	@ (8012ee4 <__kernel_cosf+0x98>)
 8012e7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012ee8 <__kernel_cosf+0x9c>
 8012e84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012e88:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8012eec <__kernel_cosf+0xa0>
 8012e8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012e90:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012ef0 <__kernel_cosf+0xa4>
 8012e94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012e98:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012ef4 <__kernel_cosf+0xa8>
 8012e9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012ea0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012ea4:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012ea8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012eac:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012eb4:	d804      	bhi.n	8012ec0 <__kernel_cosf+0x74>
 8012eb6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012eba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ebe:	4770      	bx	lr
 8012ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8012ef8 <__kernel_cosf+0xac>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	bf9a      	itte	ls
 8012ec6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8012eca:	ee07 3a10 	vmovls	s14, r3
 8012ece:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8012ed2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012eda:	e7ec      	b.n	8012eb6 <__kernel_cosf+0x6a>
 8012edc:	ad47d74e 	.word	0xad47d74e
 8012ee0:	310f74f6 	.word	0x310f74f6
 8012ee4:	3e999999 	.word	0x3e999999
 8012ee8:	b493f27c 	.word	0xb493f27c
 8012eec:	37d00d01 	.word	0x37d00d01
 8012ef0:	bab60b61 	.word	0xbab60b61
 8012ef4:	3d2aaaab 	.word	0x3d2aaaab
 8012ef8:	3f480000 	.word	0x3f480000

08012efc <__kernel_sinf>:
 8012efc:	ee10 3a10 	vmov	r3, s0
 8012f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f04:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012f08:	d204      	bcs.n	8012f14 <__kernel_sinf+0x18>
 8012f0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f0e:	ee17 3a90 	vmov	r3, s15
 8012f12:	b35b      	cbz	r3, 8012f6c <__kernel_sinf+0x70>
 8012f14:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012f18:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012f70 <__kernel_sinf+0x74>
 8012f1c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012f74 <__kernel_sinf+0x78>
 8012f20:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012f24:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012f78 <__kernel_sinf+0x7c>
 8012f28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f2c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012f7c <__kernel_sinf+0x80>
 8012f30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012f34:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012f80 <__kernel_sinf+0x84>
 8012f38:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012f3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f40:	b930      	cbnz	r0, 8012f50 <__kernel_sinf+0x54>
 8012f42:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012f84 <__kernel_sinf+0x88>
 8012f46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012f4a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012f4e:	4770      	bx	lr
 8012f50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012f54:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012f58:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012f5c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012f60:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012f88 <__kernel_sinf+0x8c>
 8012f64:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012f68:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	2f2ec9d3 	.word	0x2f2ec9d3
 8012f74:	b2d72f34 	.word	0xb2d72f34
 8012f78:	3638ef1b 	.word	0x3638ef1b
 8012f7c:	b9500d01 	.word	0xb9500d01
 8012f80:	3c088889 	.word	0x3c088889
 8012f84:	be2aaaab 	.word	0xbe2aaaab
 8012f88:	3e2aaaab 	.word	0x3e2aaaab

08012f8c <__ieee754_rem_pio2f>:
 8012f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8e:	ee10 6a10 	vmov	r6, s0
 8012f92:	4b88      	ldr	r3, [pc, #544]	@ (80131b4 <__ieee754_rem_pio2f+0x228>)
 8012f94:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012f98:	429d      	cmp	r5, r3
 8012f9a:	b087      	sub	sp, #28
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	d805      	bhi.n	8012fac <__ieee754_rem_pio2f+0x20>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	ed80 0a00 	vstr	s0, [r0]
 8012fa6:	6043      	str	r3, [r0, #4]
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e022      	b.n	8012ff2 <__ieee754_rem_pio2f+0x66>
 8012fac:	4b82      	ldr	r3, [pc, #520]	@ (80131b8 <__ieee754_rem_pio2f+0x22c>)
 8012fae:	429d      	cmp	r5, r3
 8012fb0:	d83a      	bhi.n	8013028 <__ieee754_rem_pio2f+0x9c>
 8012fb2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012fb6:	2e00      	cmp	r6, #0
 8012fb8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80131bc <__ieee754_rem_pio2f+0x230>
 8012fbc:	4a80      	ldr	r2, [pc, #512]	@ (80131c0 <__ieee754_rem_pio2f+0x234>)
 8012fbe:	f023 030f 	bic.w	r3, r3, #15
 8012fc2:	dd18      	ble.n	8012ff6 <__ieee754_rem_pio2f+0x6a>
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012fca:	bf09      	itett	eq
 8012fcc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80131c4 <__ieee754_rem_pio2f+0x238>
 8012fd0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80131c8 <__ieee754_rem_pio2f+0x23c>
 8012fd4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80131cc <__ieee754_rem_pio2f+0x240>
 8012fd8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012fdc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fe4:	ed80 7a00 	vstr	s14, [r0]
 8012fe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012fec:	edc0 7a01 	vstr	s15, [r0, #4]
 8012ff0:	2001      	movs	r0, #1
 8012ff2:	b007      	add	sp, #28
 8012ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012ffc:	bf09      	itett	eq
 8012ffe:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80131c4 <__ieee754_rem_pio2f+0x238>
 8013002:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80131c8 <__ieee754_rem_pio2f+0x23c>
 8013006:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80131cc <__ieee754_rem_pio2f+0x240>
 801300a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801300e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013016:	ed80 7a00 	vstr	s14, [r0]
 801301a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801301e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013026:	e7e4      	b.n	8012ff2 <__ieee754_rem_pio2f+0x66>
 8013028:	4b69      	ldr	r3, [pc, #420]	@ (80131d0 <__ieee754_rem_pio2f+0x244>)
 801302a:	429d      	cmp	r5, r3
 801302c:	d873      	bhi.n	8013116 <__ieee754_rem_pio2f+0x18a>
 801302e:	f000 f8dd 	bl	80131ec <fabsf>
 8013032:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80131d4 <__ieee754_rem_pio2f+0x248>
 8013036:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801303a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801303e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013046:	ee17 0a90 	vmov	r0, s15
 801304a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80131bc <__ieee754_rem_pio2f+0x230>
 801304e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013052:	281f      	cmp	r0, #31
 8013054:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80131c8 <__ieee754_rem_pio2f+0x23c>
 8013058:	ee67 7a27 	vmul.f32	s15, s14, s15
 801305c:	eeb1 6a47 	vneg.f32	s12, s14
 8013060:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013064:	ee16 1a90 	vmov	r1, s13
 8013068:	dc09      	bgt.n	801307e <__ieee754_rem_pio2f+0xf2>
 801306a:	4a5b      	ldr	r2, [pc, #364]	@ (80131d8 <__ieee754_rem_pio2f+0x24c>)
 801306c:	1e47      	subs	r7, r0, #1
 801306e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013072:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013076:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801307a:	4293      	cmp	r3, r2
 801307c:	d107      	bne.n	801308e <__ieee754_rem_pio2f+0x102>
 801307e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013082:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013086:	2a08      	cmp	r2, #8
 8013088:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801308c:	dc14      	bgt.n	80130b8 <__ieee754_rem_pio2f+0x12c>
 801308e:	6021      	str	r1, [r4, #0]
 8013090:	ed94 7a00 	vldr	s14, [r4]
 8013094:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013098:	2e00      	cmp	r6, #0
 801309a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801309e:	ed84 0a01 	vstr	s0, [r4, #4]
 80130a2:	daa6      	bge.n	8012ff2 <__ieee754_rem_pio2f+0x66>
 80130a4:	eeb1 7a47 	vneg.f32	s14, s14
 80130a8:	eeb1 0a40 	vneg.f32	s0, s0
 80130ac:	ed84 7a00 	vstr	s14, [r4]
 80130b0:	ed84 0a01 	vstr	s0, [r4, #4]
 80130b4:	4240      	negs	r0, r0
 80130b6:	e79c      	b.n	8012ff2 <__ieee754_rem_pio2f+0x66>
 80130b8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80131c4 <__ieee754_rem_pio2f+0x238>
 80130bc:	eef0 6a40 	vmov.f32	s13, s0
 80130c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80130c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80130c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80130cc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80131cc <__ieee754_rem_pio2f+0x240>
 80130d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80130d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80130d8:	ee15 2a90 	vmov	r2, s11
 80130dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80130e0:	1a5b      	subs	r3, r3, r1
 80130e2:	2b19      	cmp	r3, #25
 80130e4:	dc04      	bgt.n	80130f0 <__ieee754_rem_pio2f+0x164>
 80130e6:	edc4 5a00 	vstr	s11, [r4]
 80130ea:	eeb0 0a66 	vmov.f32	s0, s13
 80130ee:	e7cf      	b.n	8013090 <__ieee754_rem_pio2f+0x104>
 80130f0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80131dc <__ieee754_rem_pio2f+0x250>
 80130f4:	eeb0 0a66 	vmov.f32	s0, s13
 80130f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80130fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013100:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80131e0 <__ieee754_rem_pio2f+0x254>
 8013104:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013108:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801310c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013110:	ed84 7a00 	vstr	s14, [r4]
 8013114:	e7bc      	b.n	8013090 <__ieee754_rem_pio2f+0x104>
 8013116:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801311a:	d306      	bcc.n	801312a <__ieee754_rem_pio2f+0x19e>
 801311c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013120:	edc0 7a01 	vstr	s15, [r0, #4]
 8013124:	edc0 7a00 	vstr	s15, [r0]
 8013128:	e73e      	b.n	8012fa8 <__ieee754_rem_pio2f+0x1c>
 801312a:	15ea      	asrs	r2, r5, #23
 801312c:	3a86      	subs	r2, #134	@ 0x86
 801312e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013132:	ee07 3a90 	vmov	s15, r3
 8013136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801313a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80131e4 <__ieee754_rem_pio2f+0x258>
 801313e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013146:	ed8d 7a03 	vstr	s14, [sp, #12]
 801314a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801314e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013152:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801315a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801315e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013162:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316a:	edcd 7a05 	vstr	s15, [sp, #20]
 801316e:	d11e      	bne.n	80131ae <__ieee754_rem_pio2f+0x222>
 8013170:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	bf0c      	ite	eq
 801317a:	2301      	moveq	r3, #1
 801317c:	2302      	movne	r3, #2
 801317e:	491a      	ldr	r1, [pc, #104]	@ (80131e8 <__ieee754_rem_pio2f+0x25c>)
 8013180:	9101      	str	r1, [sp, #4]
 8013182:	2102      	movs	r1, #2
 8013184:	9100      	str	r1, [sp, #0]
 8013186:	a803      	add	r0, sp, #12
 8013188:	4621      	mov	r1, r4
 801318a:	f000 f837 	bl	80131fc <__kernel_rem_pio2f>
 801318e:	2e00      	cmp	r6, #0
 8013190:	f6bf af2f 	bge.w	8012ff2 <__ieee754_rem_pio2f+0x66>
 8013194:	edd4 7a00 	vldr	s15, [r4]
 8013198:	eef1 7a67 	vneg.f32	s15, s15
 801319c:	edc4 7a00 	vstr	s15, [r4]
 80131a0:	edd4 7a01 	vldr	s15, [r4, #4]
 80131a4:	eef1 7a67 	vneg.f32	s15, s15
 80131a8:	edc4 7a01 	vstr	s15, [r4, #4]
 80131ac:	e782      	b.n	80130b4 <__ieee754_rem_pio2f+0x128>
 80131ae:	2303      	movs	r3, #3
 80131b0:	e7e5      	b.n	801317e <__ieee754_rem_pio2f+0x1f2>
 80131b2:	bf00      	nop
 80131b4:	3f490fd8 	.word	0x3f490fd8
 80131b8:	4016cbe3 	.word	0x4016cbe3
 80131bc:	3fc90f80 	.word	0x3fc90f80
 80131c0:	3fc90fd0 	.word	0x3fc90fd0
 80131c4:	37354400 	.word	0x37354400
 80131c8:	37354443 	.word	0x37354443
 80131cc:	2e85a308 	.word	0x2e85a308
 80131d0:	43490f80 	.word	0x43490f80
 80131d4:	3f22f984 	.word	0x3f22f984
 80131d8:	08013f04 	.word	0x08013f04
 80131dc:	2e85a300 	.word	0x2e85a300
 80131e0:	248d3132 	.word	0x248d3132
 80131e4:	43800000 	.word	0x43800000
 80131e8:	08013f84 	.word	0x08013f84

080131ec <fabsf>:
 80131ec:	ee10 3a10 	vmov	r3, s0
 80131f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131f4:	ee00 3a10 	vmov	s0, r3
 80131f8:	4770      	bx	lr
	...

080131fc <__kernel_rem_pio2f>:
 80131fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013200:	ed2d 8b04 	vpush	{d8-d9}
 8013204:	b0d9      	sub	sp, #356	@ 0x164
 8013206:	4690      	mov	r8, r2
 8013208:	9001      	str	r0, [sp, #4]
 801320a:	4ab6      	ldr	r2, [pc, #728]	@ (80134e4 <__kernel_rem_pio2f+0x2e8>)
 801320c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801320e:	f118 0f04 	cmn.w	r8, #4
 8013212:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013216:	460f      	mov	r7, r1
 8013218:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801321c:	db26      	blt.n	801326c <__kernel_rem_pio2f+0x70>
 801321e:	f1b8 0203 	subs.w	r2, r8, #3
 8013222:	bf48      	it	mi
 8013224:	f108 0204 	addmi.w	r2, r8, #4
 8013228:	10d2      	asrs	r2, r2, #3
 801322a:	1c55      	adds	r5, r2, #1
 801322c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801322e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 8013232:	00e8      	lsls	r0, r5, #3
 8013234:	eba2 060b 	sub.w	r6, r2, fp
 8013238:	9002      	str	r0, [sp, #8]
 801323a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801323e:	eb0a 0c0b 	add.w	ip, sl, fp
 8013242:	ac1c      	add	r4, sp, #112	@ 0x70
 8013244:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013248:	2000      	movs	r0, #0
 801324a:	4560      	cmp	r0, ip
 801324c:	dd10      	ble.n	8013270 <__kernel_rem_pio2f+0x74>
 801324e:	a91c      	add	r1, sp, #112	@ 0x70
 8013250:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013254:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013258:	2600      	movs	r6, #0
 801325a:	4556      	cmp	r6, sl
 801325c:	dc24      	bgt.n	80132a8 <__kernel_rem_pio2f+0xac>
 801325e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013262:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 8013266:	4684      	mov	ip, r0
 8013268:	2400      	movs	r4, #0
 801326a:	e016      	b.n	801329a <__kernel_rem_pio2f+0x9e>
 801326c:	2200      	movs	r2, #0
 801326e:	e7dc      	b.n	801322a <__kernel_rem_pio2f+0x2e>
 8013270:	42c6      	cmn	r6, r0
 8013272:	bf5d      	ittte	pl
 8013274:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013278:	ee07 1a90 	vmovpl	s15, r1
 801327c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013280:	eef0 7a47 	vmovmi.f32	s15, s14
 8013284:	ece4 7a01 	vstmia	r4!, {s15}
 8013288:	3001      	adds	r0, #1
 801328a:	e7de      	b.n	801324a <__kernel_rem_pio2f+0x4e>
 801328c:	ecfe 6a01 	vldmia	lr!, {s13}
 8013290:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013294:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013298:	3401      	adds	r4, #1
 801329a:	455c      	cmp	r4, fp
 801329c:	ddf6      	ble.n	801328c <__kernel_rem_pio2f+0x90>
 801329e:	ece9 7a01 	vstmia	r9!, {s15}
 80132a2:	3601      	adds	r6, #1
 80132a4:	3004      	adds	r0, #4
 80132a6:	e7d8      	b.n	801325a <__kernel_rem_pio2f+0x5e>
 80132a8:	a908      	add	r1, sp, #32
 80132aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132ae:	9104      	str	r1, [sp, #16]
 80132b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80132b2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80134f0 <__kernel_rem_pio2f+0x2f4>
 80132b6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80134ec <__kernel_rem_pio2f+0x2f0>
 80132ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80132be:	9203      	str	r2, [sp, #12]
 80132c0:	4654      	mov	r4, sl
 80132c2:	00a2      	lsls	r2, r4, #2
 80132c4:	9205      	str	r2, [sp, #20]
 80132c6:	aa58      	add	r2, sp, #352	@ 0x160
 80132c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80132cc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80132d0:	a944      	add	r1, sp, #272	@ 0x110
 80132d2:	aa08      	add	r2, sp, #32
 80132d4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80132d8:	4694      	mov	ip, r2
 80132da:	4626      	mov	r6, r4
 80132dc:	2e00      	cmp	r6, #0
 80132de:	dc4c      	bgt.n	801337a <__kernel_rem_pio2f+0x17e>
 80132e0:	4628      	mov	r0, r5
 80132e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80132e6:	f000 fa35 	bl	8013754 <scalbnf>
 80132ea:	eeb0 8a40 	vmov.f32	s16, s0
 80132ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80132f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80132f6:	f000 f9e9 	bl	80136cc <floorf>
 80132fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80132fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013302:	2d00      	cmp	r5, #0
 8013304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013308:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801330c:	ee17 9a90 	vmov	r9, s15
 8013310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013314:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013318:	dd41      	ble.n	801339e <__kernel_rem_pio2f+0x1a2>
 801331a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801331e:	a908      	add	r1, sp, #32
 8013320:	f1c5 0e08 	rsb	lr, r5, #8
 8013324:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013328:	fa46 f00e 	asr.w	r0, r6, lr
 801332c:	4481      	add	r9, r0
 801332e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013332:	1a36      	subs	r6, r6, r0
 8013334:	f1c5 0007 	rsb	r0, r5, #7
 8013338:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801333c:	4106      	asrs	r6, r0
 801333e:	2e00      	cmp	r6, #0
 8013340:	dd3c      	ble.n	80133bc <__kernel_rem_pio2f+0x1c0>
 8013342:	f04f 0e00 	mov.w	lr, #0
 8013346:	f109 0901 	add.w	r9, r9, #1
 801334a:	4670      	mov	r0, lr
 801334c:	4574      	cmp	r4, lr
 801334e:	dc68      	bgt.n	8013422 <__kernel_rem_pio2f+0x226>
 8013350:	2d00      	cmp	r5, #0
 8013352:	dd03      	ble.n	801335c <__kernel_rem_pio2f+0x160>
 8013354:	2d01      	cmp	r5, #1
 8013356:	d074      	beq.n	8013442 <__kernel_rem_pio2f+0x246>
 8013358:	2d02      	cmp	r5, #2
 801335a:	d07d      	beq.n	8013458 <__kernel_rem_pio2f+0x25c>
 801335c:	2e02      	cmp	r6, #2
 801335e:	d12d      	bne.n	80133bc <__kernel_rem_pio2f+0x1c0>
 8013360:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013364:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013368:	b340      	cbz	r0, 80133bc <__kernel_rem_pio2f+0x1c0>
 801336a:	4628      	mov	r0, r5
 801336c:	9306      	str	r3, [sp, #24]
 801336e:	f000 f9f1 	bl	8013754 <scalbnf>
 8013372:	9b06      	ldr	r3, [sp, #24]
 8013374:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013378:	e020      	b.n	80133bc <__kernel_rem_pio2f+0x1c0>
 801337a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801337e:	3e01      	subs	r6, #1
 8013380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013388:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801338c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013390:	ecac 0a01 	vstmia	ip!, {s0}
 8013394:	ed30 0a01 	vldmdb	r0!, {s0}
 8013398:	ee37 0a80 	vadd.f32	s0, s15, s0
 801339c:	e79e      	b.n	80132dc <__kernel_rem_pio2f+0xe0>
 801339e:	d105      	bne.n	80133ac <__kernel_rem_pio2f+0x1b0>
 80133a0:	1e60      	subs	r0, r4, #1
 80133a2:	a908      	add	r1, sp, #32
 80133a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80133a8:	11f6      	asrs	r6, r6, #7
 80133aa:	e7c8      	b.n	801333e <__kernel_rem_pio2f+0x142>
 80133ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80133b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b8:	da31      	bge.n	801341e <__kernel_rem_pio2f+0x222>
 80133ba:	2600      	movs	r6, #0
 80133bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80133c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c4:	f040 8098 	bne.w	80134f8 <__kernel_rem_pio2f+0x2fc>
 80133c8:	1e60      	subs	r0, r4, #1
 80133ca:	2200      	movs	r2, #0
 80133cc:	4550      	cmp	r0, sl
 80133ce:	da4b      	bge.n	8013468 <__kernel_rem_pio2f+0x26c>
 80133d0:	2a00      	cmp	r2, #0
 80133d2:	d065      	beq.n	80134a0 <__kernel_rem_pio2f+0x2a4>
 80133d4:	3c01      	subs	r4, #1
 80133d6:	ab08      	add	r3, sp, #32
 80133d8:	3d08      	subs	r5, #8
 80133da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d0f8      	beq.n	80133d4 <__kernel_rem_pio2f+0x1d8>
 80133e2:	4628      	mov	r0, r5
 80133e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80133e8:	f000 f9b4 	bl	8013754 <scalbnf>
 80133ec:	1c63      	adds	r3, r4, #1
 80133ee:	aa44      	add	r2, sp, #272	@ 0x110
 80133f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80134f0 <__kernel_rem_pio2f+0x2f4>
 80133f4:	0099      	lsls	r1, r3, #2
 80133f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80133fa:	4623      	mov	r3, r4
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	f280 80a9 	bge.w	8013554 <__kernel_rem_pio2f+0x358>
 8013402:	4623      	mov	r3, r4
 8013404:	2b00      	cmp	r3, #0
 8013406:	f2c0 80c7 	blt.w	8013598 <__kernel_rem_pio2f+0x39c>
 801340a:	aa44      	add	r2, sp, #272	@ 0x110
 801340c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013410:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80134e8 <__kernel_rem_pio2f+0x2ec>
 8013414:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 8013418:	2000      	movs	r0, #0
 801341a:	1ae2      	subs	r2, r4, r3
 801341c:	e0b1      	b.n	8013582 <__kernel_rem_pio2f+0x386>
 801341e:	2602      	movs	r6, #2
 8013420:	e78f      	b.n	8013342 <__kernel_rem_pio2f+0x146>
 8013422:	f852 1b04 	ldr.w	r1, [r2], #4
 8013426:	b948      	cbnz	r0, 801343c <__kernel_rem_pio2f+0x240>
 8013428:	b121      	cbz	r1, 8013434 <__kernel_rem_pio2f+0x238>
 801342a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801342e:	f842 1c04 	str.w	r1, [r2, #-4]
 8013432:	2101      	movs	r1, #1
 8013434:	f10e 0e01 	add.w	lr, lr, #1
 8013438:	4608      	mov	r0, r1
 801343a:	e787      	b.n	801334c <__kernel_rem_pio2f+0x150>
 801343c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013440:	e7f5      	b.n	801342e <__kernel_rem_pio2f+0x232>
 8013442:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8013446:	aa08      	add	r2, sp, #32
 8013448:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801344c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013450:	a908      	add	r1, sp, #32
 8013452:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013456:	e781      	b.n	801335c <__kernel_rem_pio2f+0x160>
 8013458:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801345c:	aa08      	add	r2, sp, #32
 801345e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013462:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013466:	e7f3      	b.n	8013450 <__kernel_rem_pio2f+0x254>
 8013468:	a908      	add	r1, sp, #32
 801346a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801346e:	3801      	subs	r0, #1
 8013470:	430a      	orrs	r2, r1
 8013472:	e7ab      	b.n	80133cc <__kernel_rem_pio2f+0x1d0>
 8013474:	3201      	adds	r2, #1
 8013476:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801347a:	2e00      	cmp	r6, #0
 801347c:	d0fa      	beq.n	8013474 <__kernel_rem_pio2f+0x278>
 801347e:	9905      	ldr	r1, [sp, #20]
 8013480:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013484:	eb0d 0001 	add.w	r0, sp, r1
 8013488:	18e6      	adds	r6, r4, r3
 801348a:	a91c      	add	r1, sp, #112	@ 0x70
 801348c:	f104 0c01 	add.w	ip, r4, #1
 8013490:	384c      	subs	r0, #76	@ 0x4c
 8013492:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013496:	4422      	add	r2, r4
 8013498:	4562      	cmp	r2, ip
 801349a:	da04      	bge.n	80134a6 <__kernel_rem_pio2f+0x2aa>
 801349c:	4614      	mov	r4, r2
 801349e:	e710      	b.n	80132c2 <__kernel_rem_pio2f+0xc6>
 80134a0:	9804      	ldr	r0, [sp, #16]
 80134a2:	2201      	movs	r2, #1
 80134a4:	e7e7      	b.n	8013476 <__kernel_rem_pio2f+0x27a>
 80134a6:	9903      	ldr	r1, [sp, #12]
 80134a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80134ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80134b0:	9105      	str	r1, [sp, #20]
 80134b2:	ee07 1a90 	vmov	s15, r1
 80134b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ba:	2400      	movs	r4, #0
 80134bc:	ece6 7a01 	vstmia	r6!, {s15}
 80134c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 80134c4:	46b1      	mov	r9, r6
 80134c6:	455c      	cmp	r4, fp
 80134c8:	dd04      	ble.n	80134d4 <__kernel_rem_pio2f+0x2d8>
 80134ca:	ece0 7a01 	vstmia	r0!, {s15}
 80134ce:	f10c 0c01 	add.w	ip, ip, #1
 80134d2:	e7e1      	b.n	8013498 <__kernel_rem_pio2f+0x29c>
 80134d4:	ecfe 6a01 	vldmia	lr!, {s13}
 80134d8:	ed39 7a01 	vldmdb	r9!, {s14}
 80134dc:	3401      	adds	r4, #1
 80134de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80134e2:	e7f0      	b.n	80134c6 <__kernel_rem_pio2f+0x2ca>
 80134e4:	080142c8 	.word	0x080142c8
 80134e8:	0801429c 	.word	0x0801429c
 80134ec:	43800000 	.word	0x43800000
 80134f0:	3b800000 	.word	0x3b800000
 80134f4:	00000000 	.word	0x00000000
 80134f8:	9b02      	ldr	r3, [sp, #8]
 80134fa:	eeb0 0a48 	vmov.f32	s0, s16
 80134fe:	eba3 0008 	sub.w	r0, r3, r8
 8013502:	f000 f927 	bl	8013754 <scalbnf>
 8013506:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80134ec <__kernel_rem_pio2f+0x2f0>
 801350a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013512:	db19      	blt.n	8013548 <__kernel_rem_pio2f+0x34c>
 8013514:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80134f0 <__kernel_rem_pio2f+0x2f4>
 8013518:	ee60 7a27 	vmul.f32	s15, s0, s15
 801351c:	aa08      	add	r2, sp, #32
 801351e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013522:	3508      	adds	r5, #8
 8013524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013528:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801352c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013530:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013534:	ee10 3a10 	vmov	r3, s0
 8013538:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801353c:	ee17 3a90 	vmov	r3, s15
 8013540:	3401      	adds	r4, #1
 8013542:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013546:	e74c      	b.n	80133e2 <__kernel_rem_pio2f+0x1e6>
 8013548:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801354c:	aa08      	add	r2, sp, #32
 801354e:	ee10 3a10 	vmov	r3, s0
 8013552:	e7f6      	b.n	8013542 <__kernel_rem_pio2f+0x346>
 8013554:	a808      	add	r0, sp, #32
 8013556:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801355a:	9001      	str	r0, [sp, #4]
 801355c:	ee07 0a90 	vmov	s15, r0
 8013560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013564:	3b01      	subs	r3, #1
 8013566:	ee67 7a80 	vmul.f32	s15, s15, s0
 801356a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801356e:	ed62 7a01 	vstmdb	r2!, {s15}
 8013572:	e743      	b.n	80133fc <__kernel_rem_pio2f+0x200>
 8013574:	ecfc 6a01 	vldmia	ip!, {s13}
 8013578:	ecb5 7a01 	vldmia	r5!, {s14}
 801357c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013580:	3001      	adds	r0, #1
 8013582:	4550      	cmp	r0, sl
 8013584:	dc01      	bgt.n	801358a <__kernel_rem_pio2f+0x38e>
 8013586:	4290      	cmp	r0, r2
 8013588:	ddf4      	ble.n	8013574 <__kernel_rem_pio2f+0x378>
 801358a:	a858      	add	r0, sp, #352	@ 0x160
 801358c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013590:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013594:	3b01      	subs	r3, #1
 8013596:	e735      	b.n	8013404 <__kernel_rem_pio2f+0x208>
 8013598:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801359a:	2b02      	cmp	r3, #2
 801359c:	dc09      	bgt.n	80135b2 <__kernel_rem_pio2f+0x3b6>
 801359e:	2b00      	cmp	r3, #0
 80135a0:	dc27      	bgt.n	80135f2 <__kernel_rem_pio2f+0x3f6>
 80135a2:	d040      	beq.n	8013626 <__kernel_rem_pio2f+0x42a>
 80135a4:	f009 0007 	and.w	r0, r9, #7
 80135a8:	b059      	add	sp, #356	@ 0x164
 80135aa:	ecbd 8b04 	vpop	{d8-d9}
 80135ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d1f5      	bne.n	80135a4 <__kernel_rem_pio2f+0x3a8>
 80135b8:	aa30      	add	r2, sp, #192	@ 0xc0
 80135ba:	1f0b      	subs	r3, r1, #4
 80135bc:	4413      	add	r3, r2
 80135be:	461a      	mov	r2, r3
 80135c0:	4620      	mov	r0, r4
 80135c2:	2800      	cmp	r0, #0
 80135c4:	dc50      	bgt.n	8013668 <__kernel_rem_pio2f+0x46c>
 80135c6:	4622      	mov	r2, r4
 80135c8:	2a01      	cmp	r2, #1
 80135ca:	dc5d      	bgt.n	8013688 <__kernel_rem_pio2f+0x48c>
 80135cc:	ab30      	add	r3, sp, #192	@ 0xc0
 80135ce:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 80135d2:	440b      	add	r3, r1
 80135d4:	2c01      	cmp	r4, #1
 80135d6:	dc67      	bgt.n	80136a8 <__kernel_rem_pio2f+0x4ac>
 80135d8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80135dc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80135e0:	2e00      	cmp	r6, #0
 80135e2:	d167      	bne.n	80136b4 <__kernel_rem_pio2f+0x4b8>
 80135e4:	edc7 6a00 	vstr	s13, [r7]
 80135e8:	ed87 7a01 	vstr	s14, [r7, #4]
 80135ec:	edc7 7a02 	vstr	s15, [r7, #8]
 80135f0:	e7d8      	b.n	80135a4 <__kernel_rem_pio2f+0x3a8>
 80135f2:	ab30      	add	r3, sp, #192	@ 0xc0
 80135f4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 80135f8:	440b      	add	r3, r1
 80135fa:	4622      	mov	r2, r4
 80135fc:	2a00      	cmp	r2, #0
 80135fe:	da24      	bge.n	801364a <__kernel_rem_pio2f+0x44e>
 8013600:	b34e      	cbz	r6, 8013656 <__kernel_rem_pio2f+0x45a>
 8013602:	eef1 7a47 	vneg.f32	s15, s14
 8013606:	edc7 7a00 	vstr	s15, [r7]
 801360a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801360e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013612:	aa31      	add	r2, sp, #196	@ 0xc4
 8013614:	2301      	movs	r3, #1
 8013616:	429c      	cmp	r4, r3
 8013618:	da20      	bge.n	801365c <__kernel_rem_pio2f+0x460>
 801361a:	b10e      	cbz	r6, 8013620 <__kernel_rem_pio2f+0x424>
 801361c:	eef1 7a67 	vneg.f32	s15, s15
 8013620:	edc7 7a01 	vstr	s15, [r7, #4]
 8013624:	e7be      	b.n	80135a4 <__kernel_rem_pio2f+0x3a8>
 8013626:	ab30      	add	r3, sp, #192	@ 0xc0
 8013628:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80134f4 <__kernel_rem_pio2f+0x2f8>
 801362c:	440b      	add	r3, r1
 801362e:	2c00      	cmp	r4, #0
 8013630:	da05      	bge.n	801363e <__kernel_rem_pio2f+0x442>
 8013632:	b10e      	cbz	r6, 8013638 <__kernel_rem_pio2f+0x43c>
 8013634:	eef1 7a67 	vneg.f32	s15, s15
 8013638:	edc7 7a00 	vstr	s15, [r7]
 801363c:	e7b2      	b.n	80135a4 <__kernel_rem_pio2f+0x3a8>
 801363e:	ed33 7a01 	vldmdb	r3!, {s14}
 8013642:	3c01      	subs	r4, #1
 8013644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013648:	e7f1      	b.n	801362e <__kernel_rem_pio2f+0x432>
 801364a:	ed73 7a01 	vldmdb	r3!, {s15}
 801364e:	3a01      	subs	r2, #1
 8013650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013654:	e7d2      	b.n	80135fc <__kernel_rem_pio2f+0x400>
 8013656:	eef0 7a47 	vmov.f32	s15, s14
 801365a:	e7d4      	b.n	8013606 <__kernel_rem_pio2f+0x40a>
 801365c:	ecb2 7a01 	vldmia	r2!, {s14}
 8013660:	3301      	adds	r3, #1
 8013662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013666:	e7d6      	b.n	8013616 <__kernel_rem_pio2f+0x41a>
 8013668:	ed72 7a01 	vldmdb	r2!, {s15}
 801366c:	edd2 6a01 	vldr	s13, [r2, #4]
 8013670:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013674:	3801      	subs	r0, #1
 8013676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801367a:	ed82 7a00 	vstr	s14, [r2]
 801367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013682:	edc2 7a01 	vstr	s15, [r2, #4]
 8013686:	e79c      	b.n	80135c2 <__kernel_rem_pio2f+0x3c6>
 8013688:	ed73 7a01 	vldmdb	r3!, {s15}
 801368c:	edd3 6a01 	vldr	s13, [r3, #4]
 8013690:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013694:	3a01      	subs	r2, #1
 8013696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801369a:	ed83 7a00 	vstr	s14, [r3]
 801369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80136a6:	e78f      	b.n	80135c8 <__kernel_rem_pio2f+0x3cc>
 80136a8:	ed33 7a01 	vldmdb	r3!, {s14}
 80136ac:	3c01      	subs	r4, #1
 80136ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136b2:	e78f      	b.n	80135d4 <__kernel_rem_pio2f+0x3d8>
 80136b4:	eef1 6a66 	vneg.f32	s13, s13
 80136b8:	eeb1 7a47 	vneg.f32	s14, s14
 80136bc:	edc7 6a00 	vstr	s13, [r7]
 80136c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80136c4:	eef1 7a67 	vneg.f32	s15, s15
 80136c8:	e790      	b.n	80135ec <__kernel_rem_pio2f+0x3f0>
 80136ca:	bf00      	nop

080136cc <floorf>:
 80136cc:	ee10 3a10 	vmov	r3, s0
 80136d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80136d4:	3a7f      	subs	r2, #127	@ 0x7f
 80136d6:	2a16      	cmp	r2, #22
 80136d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80136dc:	dc2b      	bgt.n	8013736 <floorf+0x6a>
 80136de:	2a00      	cmp	r2, #0
 80136e0:	da12      	bge.n	8013708 <floorf+0x3c>
 80136e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013748 <floorf+0x7c>
 80136e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80136ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80136ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f2:	dd06      	ble.n	8013702 <floorf+0x36>
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	da24      	bge.n	8013742 <floorf+0x76>
 80136f8:	2900      	cmp	r1, #0
 80136fa:	4b14      	ldr	r3, [pc, #80]	@ (801374c <floorf+0x80>)
 80136fc:	bf08      	it	eq
 80136fe:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013702:	ee00 3a10 	vmov	s0, r3
 8013706:	4770      	bx	lr
 8013708:	4911      	ldr	r1, [pc, #68]	@ (8013750 <floorf+0x84>)
 801370a:	4111      	asrs	r1, r2
 801370c:	420b      	tst	r3, r1
 801370e:	d0fa      	beq.n	8013706 <floorf+0x3a>
 8013710:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013748 <floorf+0x7c>
 8013714:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013718:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013720:	ddef      	ble.n	8013702 <floorf+0x36>
 8013722:	2b00      	cmp	r3, #0
 8013724:	bfbe      	ittt	lt
 8013726:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801372a:	fa40 f202 	asrlt.w	r2, r0, r2
 801372e:	189b      	addlt	r3, r3, r2
 8013730:	ea23 0301 	bic.w	r3, r3, r1
 8013734:	e7e5      	b.n	8013702 <floorf+0x36>
 8013736:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801373a:	d3e4      	bcc.n	8013706 <floorf+0x3a>
 801373c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013740:	4770      	bx	lr
 8013742:	2300      	movs	r3, #0
 8013744:	e7dd      	b.n	8013702 <floorf+0x36>
 8013746:	bf00      	nop
 8013748:	7149f2ca 	.word	0x7149f2ca
 801374c:	bf800000 	.word	0xbf800000
 8013750:	007fffff 	.word	0x007fffff

08013754 <scalbnf>:
 8013754:	ee10 3a10 	vmov	r3, s0
 8013758:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801375c:	d02b      	beq.n	80137b6 <scalbnf+0x62>
 801375e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013762:	d302      	bcc.n	801376a <scalbnf+0x16>
 8013764:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013768:	4770      	bx	lr
 801376a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801376e:	d123      	bne.n	80137b8 <scalbnf+0x64>
 8013770:	4b24      	ldr	r3, [pc, #144]	@ (8013804 <scalbnf+0xb0>)
 8013772:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013808 <scalbnf+0xb4>
 8013776:	4298      	cmp	r0, r3
 8013778:	ee20 0a27 	vmul.f32	s0, s0, s15
 801377c:	db17      	blt.n	80137ae <scalbnf+0x5a>
 801377e:	ee10 3a10 	vmov	r3, s0
 8013782:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013786:	3a19      	subs	r2, #25
 8013788:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801378c:	4288      	cmp	r0, r1
 801378e:	dd15      	ble.n	80137bc <scalbnf+0x68>
 8013790:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801380c <scalbnf+0xb8>
 8013794:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013810 <scalbnf+0xbc>
 8013798:	ee10 3a10 	vmov	r3, s0
 801379c:	eeb0 7a67 	vmov.f32	s14, s15
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	bfb8      	it	lt
 80137a4:	eef0 7a66 	vmovlt.f32	s15, s13
 80137a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80137ac:	4770      	bx	lr
 80137ae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013814 <scalbnf+0xc0>
 80137b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80137b6:	4770      	bx	lr
 80137b8:	0dd2      	lsrs	r2, r2, #23
 80137ba:	e7e5      	b.n	8013788 <scalbnf+0x34>
 80137bc:	4410      	add	r0, r2
 80137be:	28fe      	cmp	r0, #254	@ 0xfe
 80137c0:	dce6      	bgt.n	8013790 <scalbnf+0x3c>
 80137c2:	2800      	cmp	r0, #0
 80137c4:	dd06      	ble.n	80137d4 <scalbnf+0x80>
 80137c6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137ce:	ee00 3a10 	vmov	s0, r3
 80137d2:	4770      	bx	lr
 80137d4:	f110 0f16 	cmn.w	r0, #22
 80137d8:	da09      	bge.n	80137ee <scalbnf+0x9a>
 80137da:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013814 <scalbnf+0xc0>
 80137de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013818 <scalbnf+0xc4>
 80137e2:	ee10 3a10 	vmov	r3, s0
 80137e6:	eeb0 7a67 	vmov.f32	s14, s15
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	e7d9      	b.n	80137a2 <scalbnf+0x4e>
 80137ee:	3019      	adds	r0, #25
 80137f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137f8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801381c <scalbnf+0xc8>
 80137fc:	ee07 3a90 	vmov	s15, r3
 8013800:	e7d7      	b.n	80137b2 <scalbnf+0x5e>
 8013802:	bf00      	nop
 8013804:	ffff3cb0 	.word	0xffff3cb0
 8013808:	4c000000 	.word	0x4c000000
 801380c:	7149f2ca 	.word	0x7149f2ca
 8013810:	f149f2ca 	.word	0xf149f2ca
 8013814:	0da24260 	.word	0x0da24260
 8013818:	8da24260 	.word	0x8da24260
 801381c:	33000000 	.word	0x33000000

08013820 <_init>:
 8013820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013822:	bf00      	nop
 8013824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013826:	bc08      	pop	{r3}
 8013828:	469e      	mov	lr, r3
 801382a:	4770      	bx	lr

0801382c <_fini>:
 801382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382e:	bf00      	nop
 8013830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013832:	bc08      	pop	{r3}
 8013834:	469e      	mov	lr, r3
 8013836:	4770      	bx	lr
