
TurretCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800d330  0800d330  0000e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d450  0800d450  0000f0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d450  0800d450  0000e450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d458  0800d458  0000f0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d458  0800d458  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d45c  0800d45c  0000e45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800d460  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0b0  2**0
                  CONTENTS
 10 .bss          000057e8  200000b0  200000b0  0000f0b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005898  20005898  0000f0b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d0e  00000000  00000000  0000f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000545c  00000000  00000000  00034dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f38  00000000  00000000  0003a250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000185b  00000000  00000000  0003c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e09  00000000  00000000  0003d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000264df  00000000  00000000  000637ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b2a  00000000  00000000  00089ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b7f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008624  00000000  00000000  0016b838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00173e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d318 	.word	0x0800d318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800d318 	.word	0x0800d318

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 80004da:	e003      	b.n	80004e4 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 f80a 	bl	80004f8 <BMI088_delay_us>
    while(ms--)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	80fa      	strh	r2, [r7, #6]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1f6      	bne.n	80004dc <BMI088_delay_ms+0xc>
    }
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	@ 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <BMI088_delay_us+0x84>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	22a8      	movs	r2, #168	@ 0xa8
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <BMI088_delay_us+0x84>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <BMI088_delay_us+0x84>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	429a      	cmp	r2, r3
 8000538:	d0f8      	beq.n	800052c <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	429a      	cmp	r2, r3
 8000540:	d206      	bcs.n	8000550 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	69ba      	ldr	r2, [r7, #24]
 800054a:	4413      	add	r3, r2
 800054c:	61bb      	str	r3, [r7, #24]
 800054e:	e007      	b.n	8000560 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	1ad2      	subs	r2, r2, r3
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	4413      	add	r3, r2
 800055a:	69ba      	ldr	r2, [r7, #24]
 800055c:	4413      	add	r3, r2
 800055e:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	429a      	cmp	r2, r3
 800056a:	d200      	bcs.n	800056e <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 800056c:	e7de      	b.n	800052c <BMI088_delay_us+0x34>
            {
                break;
 800056e:	bf00      	nop
            }
        }
    }


}
 8000570:	bf00      	nop
 8000572:	3724      	adds	r7, #36	@ 0x24
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000e010 	.word	0xe000e010

08000580 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <BMI088_ACCEL_NS_L+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <BMI088_ACCEL_NS_L+0x1c>)
 800058a:	8811      	ldrh	r1, [r2, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fd46 	bl	8006020 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004

080005a0 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 80005a4:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <BMI088_ACCEL_NS_H+0x18>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <BMI088_ACCEL_NS_H+0x1c>)
 80005aa:	8811      	ldrh	r1, [r2, #0]
 80005ac:	2201      	movs	r2, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fd36 	bl	8006020 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000004 	.word	0x20000004

080005c0 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <BMI088_GYRO_NS_L+0x18>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <BMI088_GYRO_NS_L+0x1c>)
 80005ca:	8811      	ldrh	r1, [r2, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fd26 	bl	8006020 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000008 	.word	0x20000008
 80005dc:	2000000c 	.word	0x2000000c

080005e0 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <BMI088_GYRO_NS_H+0x18>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a04      	ldr	r2, [pc, #16]	@ (80005fc <BMI088_GYRO_NS_H+0x1c>)
 80005ea:	8811      	ldrh	r1, [r2, #0]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fd16 	bl	8006020 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000008 	.word	0x20000008
 80005fc:	2000000c 	.word	0x2000000c

08000600 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 800060a:	f107 020f 	add.w	r2, r7, #15
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <BMI088_read_write_byte+0x28>)
 800061a:	f007 fa5f 	bl	8007adc <HAL_SPI_TransmitReceive>
    return rx_data;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000624 	.word	0x20000624

0800062c <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800063a:	f7ff ffa1 	bl	8000580 <BMI088_ACCEL_NS_L>
 800063e:	2080      	movs	r0, #128	@ 0x80
 8000640:	f7ff ffde 	bl	8000600 <BMI088_read_write_byte>
 8000644:	2055      	movs	r0, #85	@ 0x55
 8000646:	f7ff ffdb 	bl	8000600 <BMI088_read_write_byte>
 800064a:	2055      	movs	r0, #85	@ 0x55
 800064c:	f7ff ffd8 	bl	8000600 <BMI088_read_write_byte>
 8000650:	4603      	mov	r3, r0
 8000652:	71bb      	strb	r3, [r7, #6]
 8000654:	f7ff ffa4 	bl	80005a0 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000658:	2096      	movs	r0, #150	@ 0x96
 800065a:	f7ff ff4d 	bl	80004f8 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800065e:	f7ff ff8f 	bl	8000580 <BMI088_ACCEL_NS_L>
 8000662:	2080      	movs	r0, #128	@ 0x80
 8000664:	f7ff ffcc 	bl	8000600 <BMI088_read_write_byte>
 8000668:	2055      	movs	r0, #85	@ 0x55
 800066a:	f7ff ffc9 	bl	8000600 <BMI088_read_write_byte>
 800066e:	2055      	movs	r0, #85	@ 0x55
 8000670:	f7ff ffc6 	bl	8000600 <BMI088_read_write_byte>
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	f7ff ff92 	bl	80005a0 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800067c:	2096      	movs	r0, #150	@ 0x96
 800067e:	f7ff ff3b 	bl	80004f8 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8000682:	f7ff ff7d 	bl	8000580 <BMI088_ACCEL_NS_L>
 8000686:	21b6      	movs	r1, #182	@ 0xb6
 8000688:	207e      	movs	r0, #126	@ 0x7e
 800068a:	f000 fa21 	bl	8000ad0 <BMI088_write_single_reg>
 800068e:	f7ff ff87 	bl	80005a0 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8000692:	2050      	movs	r0, #80	@ 0x50
 8000694:	f7ff ff1c 	bl	80004d0 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8000698:	f7ff ff72 	bl	8000580 <BMI088_ACCEL_NS_L>
 800069c:	2080      	movs	r0, #128	@ 0x80
 800069e:	f7ff ffaf 	bl	8000600 <BMI088_read_write_byte>
 80006a2:	2055      	movs	r0, #85	@ 0x55
 80006a4:	f7ff ffac 	bl	8000600 <BMI088_read_write_byte>
 80006a8:	2055      	movs	r0, #85	@ 0x55
 80006aa:	f7ff ffa9 	bl	8000600 <BMI088_read_write_byte>
 80006ae:	4603      	mov	r3, r0
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	f7ff ff75 	bl	80005a0 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80006b6:	2096      	movs	r0, #150	@ 0x96
 80006b8:	f7ff ff1e 	bl	80004f8 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80006bc:	f7ff ff60 	bl	8000580 <BMI088_ACCEL_NS_L>
 80006c0:	2080      	movs	r0, #128	@ 0x80
 80006c2:	f7ff ff9d 	bl	8000600 <BMI088_read_write_byte>
 80006c6:	2055      	movs	r0, #85	@ 0x55
 80006c8:	f7ff ff9a 	bl	8000600 <BMI088_read_write_byte>
 80006cc:	2055      	movs	r0, #85	@ 0x55
 80006ce:	f7ff ff97 	bl	8000600 <BMI088_read_write_byte>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71bb      	strb	r3, [r7, #6]
 80006d6:	f7ff ff63 	bl	80005a0 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80006da:	2096      	movs	r0, #150	@ 0x96
 80006dc:	f7ff ff0c 	bl	80004f8 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b1e      	cmp	r3, #30
 80006e4:	d001      	beq.n	80006ea <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80006e6:	23ff      	movs	r3, #255	@ 0xff
 80006e8:	e052      	b.n	8000790 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	e04b      	b.n	8000788 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80006f0:	f7ff ff46 	bl	8000580 <BMI088_ACCEL_NS_L>
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	4928      	ldr	r1, [pc, #160]	@ (8000798 <BMI088_accel_init+0x16c>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	440b      	add	r3, r1
 8000700:	7818      	ldrb	r0, [r3, #0]
 8000702:	79fa      	ldrb	r2, [r7, #7]
 8000704:	4924      	ldr	r1, [pc, #144]	@ (8000798 <BMI088_accel_init+0x16c>)
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	440b      	add	r3, r1
 800070e:	3301      	adds	r3, #1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	f000 f9dc 	bl	8000ad0 <BMI088_write_single_reg>
 8000718:	f7ff ff42 	bl	80005a0 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800071c:	2096      	movs	r0, #150	@ 0x96
 800071e:	f7ff feeb 	bl	80004f8 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 8000722:	f7ff ff2d 	bl	8000580 <BMI088_ACCEL_NS_L>
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	491b      	ldr	r1, [pc, #108]	@ (8000798 <BMI088_accel_init+0x16c>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	440b      	add	r3, r1
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff60 	bl	8000600 <BMI088_read_write_byte>
 8000740:	2055      	movs	r0, #85	@ 0x55
 8000742:	f7ff ff5d 	bl	8000600 <BMI088_read_write_byte>
 8000746:	2055      	movs	r0, #85	@ 0x55
 8000748:	f7ff ff5a 	bl	8000600 <BMI088_read_write_byte>
 800074c:	4603      	mov	r3, r0
 800074e:	71bb      	strb	r3, [r7, #6]
 8000750:	f7ff ff26 	bl	80005a0 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000754:	2096      	movs	r0, #150	@ 0x96
 8000756:	f7ff fecf 	bl	80004f8 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	490e      	ldr	r1, [pc, #56]	@ (8000798 <BMI088_accel_init+0x16c>)
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	440b      	add	r3, r1
 8000766:	3301      	adds	r3, #1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	79ba      	ldrb	r2, [r7, #6]
 800076c:	429a      	cmp	r2, r3
 800076e:	d008      	beq.n	8000782 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	4909      	ldr	r1, [pc, #36]	@ (8000798 <BMI088_accel_init+0x16c>)
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	440b      	add	r3, r1
 800077c:	3302      	adds	r3, #2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	e006      	b.n	8000790 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	3301      	adds	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d9b0      	bls.n	80006f0 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000018 	.word	0x20000018

0800079c <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80007aa:	f7ff ff09 	bl	80005c0 <BMI088_GYRO_NS_L>
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	4619      	mov	r1, r3
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f9a0 	bl	8000af8 <BMI088_read_single_reg>
 80007b8:	f7ff ff12 	bl	80005e0 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007bc:	2096      	movs	r0, #150	@ 0x96
 80007be:	f7ff fe9b 	bl	80004f8 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80007c2:	f7ff fefd 	bl	80005c0 <BMI088_GYRO_NS_L>
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	4619      	mov	r1, r3
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f994 	bl	8000af8 <BMI088_read_single_reg>
 80007d0:	f7ff ff06 	bl	80005e0 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007d4:	2096      	movs	r0, #150	@ 0x96
 80007d6:	f7ff fe8f 	bl	80004f8 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80007da:	f7ff fef1 	bl	80005c0 <BMI088_GYRO_NS_L>
 80007de:	21b6      	movs	r1, #182	@ 0xb6
 80007e0:	2014      	movs	r0, #20
 80007e2:	f000 f975 	bl	8000ad0 <BMI088_write_single_reg>
 80007e6:	f7ff fefb 	bl	80005e0 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80007ea:	2050      	movs	r0, #80	@ 0x50
 80007ec:	f7ff fe70 	bl	80004d0 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80007f0:	f7ff fee6 	bl	80005c0 <BMI088_GYRO_NS_L>
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	4619      	mov	r1, r3
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f97d 	bl	8000af8 <BMI088_read_single_reg>
 80007fe:	f7ff feef 	bl	80005e0 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000802:	2096      	movs	r0, #150	@ 0x96
 8000804:	f7ff fe78 	bl	80004f8 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000808:	f7ff feda 	bl	80005c0 <BMI088_GYRO_NS_L>
 800080c:	1dbb      	adds	r3, r7, #6
 800080e:	4619      	mov	r1, r3
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f971 	bl	8000af8 <BMI088_read_single_reg>
 8000816:	f7ff fee3 	bl	80005e0 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800081a:	2096      	movs	r0, #150	@ 0x96
 800081c:	f7ff fe6c 	bl	80004f8 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d001      	beq.n	800082a <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 8000826:	23ff      	movs	r3, #255	@ 0xff
 8000828:	e049      	b.n	80008be <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	e042      	b.n	80008b6 <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8000830:	f7ff fec6 	bl	80005c0 <BMI088_GYRO_NS_L>
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	4924      	ldr	r1, [pc, #144]	@ (80008c8 <BMI088_gyro_init+0x12c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	440b      	add	r3, r1
 8000840:	7818      	ldrb	r0, [r3, #0]
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4920      	ldr	r1, [pc, #128]	@ (80008c8 <BMI088_gyro_init+0x12c>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	440b      	add	r3, r1
 800084e:	3301      	adds	r3, #1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	f000 f93c 	bl	8000ad0 <BMI088_write_single_reg>
 8000858:	f7ff fec2 	bl	80005e0 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800085c:	2096      	movs	r0, #150	@ 0x96
 800085e:	f7ff fe4b 	bl	80004f8 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8000862:	f7ff fead 	bl	80005c0 <BMI088_GYRO_NS_L>
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4917      	ldr	r1, [pc, #92]	@ (80008c8 <BMI088_gyro_init+0x12c>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	440b      	add	r3, r1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	1dba      	adds	r2, r7, #6
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f93d 	bl	8000af8 <BMI088_read_single_reg>
 800087e:	f7ff feaf 	bl	80005e0 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000882:	2096      	movs	r0, #150	@ 0x96
 8000884:	f7ff fe38 	bl	80004f8 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	490f      	ldr	r1, [pc, #60]	@ (80008c8 <BMI088_gyro_init+0x12c>)
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	440b      	add	r3, r1
 8000894:	3301      	adds	r3, #1
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	429a      	cmp	r2, r3
 800089c:	d008      	beq.n	80008b0 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4909      	ldr	r1, [pc, #36]	@ (80008c8 <BMI088_gyro_init+0x12c>)
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	3302      	adds	r3, #2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	e006      	b.n	80008be <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d9b9      	bls.n	8000830 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000002c 	.word	0x2000002c

080008cc <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80008d0:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <IMU_get_temp+0x1c>)
 80008d2:	4906      	ldr	r1, [pc, #24]	@ (80008ec <IMU_get_temp+0x20>)
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <IMU_get_temp+0x24>)
 80008d6:	f000 f80d 	bl	80008f4 <BMI088_read>
	return temp;
 80008da:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <IMU_get_temp+0x1c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	ee07 3a90 	vmov	s15, r3
}
 80008e2:	eeb0 0a67 	vmov.f32	s0, s15
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000e4 	.word	0x200000e4
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	200000cc 	.word	0x200000cc

080008f4 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000900:	4a70      	ldr	r2, [pc, #448]	@ (8000ac4 <BMI088_read+0x1d0>)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090a:	6018      	str	r0, [r3, #0]
 800090c:	3304      	adds	r3, #4
 800090e:	8019      	strh	r1, [r3, #0]
 8000910:	3302      	adds	r3, #2
 8000912:	0c0a      	lsrs	r2, r1, #16
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800091a:	f7ff fe31 	bl	8000580 <BMI088_ACCEL_NS_L>
 800091e:	2092      	movs	r0, #146	@ 0x92
 8000920:	f7ff fe6e 	bl	8000600 <BMI088_read_write_byte>
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2206      	movs	r2, #6
 800092a:	4619      	mov	r1, r3
 800092c:	2012      	movs	r0, #18
 800092e:	f000 f8fb 	bl	8000b28 <BMI088_read_muli_reg>
 8000932:	f7ff fe35 	bl	80005a0 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000936:	7d7b      	ldrb	r3, [r7, #21]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	7d3b      	ldrb	r3, [r7, #20]
 800093e:	b21b      	sxth	r3, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000944:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000950:	4b5d      	ldr	r3, [pc, #372]	@ (8000ac8 <BMI088_read+0x1d4>)
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b21a      	sxth	r2, r3
 8000966:	7dbb      	ldrb	r3, [r7, #22]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800096e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800097a:	4b53      	ldr	r3, [pc, #332]	@ (8000ac8 <BMI088_read+0x1d4>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3304      	adds	r3, #4
 8000984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000988:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800098c:	7e7b      	ldrb	r3, [r7, #25]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7e3b      	ldrb	r3, [r7, #24]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800099a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a6:	4b48      	ldr	r3, [pc, #288]	@ (8000ac8 <BMI088_read+0x1d4>)
 80009a8:	edd3 7a00 	vldr	s15, [r3]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3308      	adds	r3, #8
 80009b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b4:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80009b8:	f7ff fe02 	bl	80005c0 <BMI088_GYRO_NS_L>
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2208      	movs	r2, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f8af 	bl	8000b28 <BMI088_read_muli_reg>
 80009ca:	f7ff fe09 	bl	80005e0 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80009ce:	7d3b      	ldrb	r3, [r7, #20]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d140      	bne.n	8000a56 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7dbb      	ldrb	r3, [r7, #22]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80009e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ee:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <BMI088_read+0x1d8>)
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80009fe:	7e7b      	ldrb	r3, [r7, #25]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	7e3b      	ldrb	r3, [r7, #24]
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000a0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a18:	4b2c      	ldr	r3, [pc, #176]	@ (8000acc <BMI088_read+0x1d8>)
 8000a1a:	edd3 7a00 	vldr	s15, [r3]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3304      	adds	r3, #4
 8000a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a26:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000a2a:	7efb      	ldrb	r3, [r7, #27]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	7ebb      	ldrb	r3, [r7, #26]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000a38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <BMI088_read+0x1d8>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3308      	adds	r3, #8
 8000a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a52:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000a56:	f7ff fd93 	bl	8000580 <BMI088_ACCEL_NS_L>
 8000a5a:	20a2      	movs	r0, #162	@ 0xa2
 8000a5c:	f7ff fdd0 	bl	8000600 <BMI088_read_write_byte>
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2202      	movs	r2, #2
 8000a66:	4619      	mov	r1, r3
 8000a68:	2022      	movs	r0, #34	@ 0x22
 8000a6a:	f000 f85d 	bl	8000b28 <BMI088_read_muli_reg>
 8000a6e:	f7ff fd97 	bl	80005a0 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000a72:	7d3b      	ldrb	r3, [r7, #20]
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	7d7b      	ldrb	r3, [r7, #21]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8000a84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a8c:	db04      	blt.n	8000a98 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8000a8e:	8bfb      	ldrh	r3, [r7, #30]
 8000a90:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000a98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aac:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	edc3 7a00 	vstr	s15, [r3]
}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	0800d330 	.word	0x0800d330
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000014 	.word	0x20000014

08000ad0 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd8c 	bl	8000600 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd88 	bl	8000600 <BMI088_read_write_byte>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd77 	bl	8000600 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8000b12:	2055      	movs	r0, #85	@ 0x55
 8000b14:	f7ff fd74 	bl	8000600 <BMI088_read_write_byte>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd5d 	bl	8000600 <BMI088_read_write_byte>

    while (len != 0)
 8000b46:	e00c      	b.n	8000b62 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000b48:	2055      	movs	r0, #85	@ 0x55
 8000b4a:	f7ff fd59 	bl	8000600 <BMI088_read_write_byte>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	701a      	strb	r2, [r3, #0]
        buf++;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
        len--;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1ef      	bne.n	8000b48 <BMI088_read_muli_reg+0x20>
    }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	f107 0214 	add.w	r2, r7, #20
 8000b84:	2100      	movs	r1, #0
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f004 f80a 	bl	8004ba0 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000b92:	f080 80d9 	bcs.w	8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b9a:	d807      	bhi.n	8000bac <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000b9c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000ba0:	d066      	beq.n	8000c70 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000ba2:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8000ba6:	f000 80a4 	beq.w	8000cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 8000baa:	e0cd      	b.n	8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000bb6:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4a69      	ldr	r2, [pc, #420]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	4b64      	ldr	r3, [pc, #400]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	b210      	sxth	r0, r2
 8000bd4:	4a63      	ldr	r2, [pc, #396]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	3308      	adds	r3, #8
 8000be2:	4602      	mov	r2, r0
 8000be4:	801a      	strh	r2, [r3, #0]
 8000be6:	7b3b      	ldrb	r3, [r7, #12]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	b290      	uxth	r0, r2
 8000bfc:	4a59      	ldr	r2, [pc, #356]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000bfe:	460b      	mov	r3, r1
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	4602      	mov	r2, r0
 8000c0a:	801a      	strh	r2, [r3, #0]
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4952      	ldr	r1, [pc, #328]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c18:	7809      	ldrb	r1, [r1, #0]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	4a51      	ldr	r2, [pc, #324]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c20:	460b      	mov	r3, r1
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	801a      	strh	r2, [r3, #0]
 8000c30:	7c3b      	ldrb	r3, [r7, #16]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	7c7b      	ldrb	r3, [r7, #17]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4949      	ldr	r1, [pc, #292]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c3c:	7809      	ldrb	r1, [r1, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b218      	sxth	r0, r3
 8000c42:	4a48      	ldr	r2, [pc, #288]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c44:	460b      	mov	r3, r1
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3304      	adds	r3, #4
 8000c50:	4602      	mov	r2, r0
 8000c52:	801a      	strh	r2, [r3, #0]
 8000c54:	4b42      	ldr	r3, [pc, #264]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	7cb8      	ldrb	r0, [r7, #18]
 8000c5c:	4a41      	ldr	r2, [pc, #260]	@ (8000d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c5e:	460b      	mov	r3, r1
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	3306      	adds	r3, #6
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	701a      	strb	r2, [r3, #0]
            break;
 8000c6e:	e072      	b.n	8000d56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8000c70:	4b3d      	ldr	r3, [pc, #244]	@ (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	f240 1201 	movw	r2, #257	@ 0x101
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d067      	beq.n	8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	7b7b      	ldrb	r3, [r7, #13]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000c8c:	801a      	strh	r2, [r3, #0]
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000c9e:	805a      	strh	r2, [r3, #2]
 8000ca0:	7c3b      	ldrb	r3, [r7, #16]
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	7c7b      	ldrb	r3, [r7, #17]
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cb0:	809a      	strh	r2, [r3, #4]
 8000cb2:	7cbb      	ldrb	r3, [r7, #18]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	7cfb      	ldrb	r3, [r7, #19]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cc2:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8000cc4:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 8000cce:	db04      	blt.n	8000cda <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cd2:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 8000cd6:	801a      	strh	r2, [r3, #0]
        		break;
 8000cd8:	e03a      	b.n	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce0:	f640 0254 	movw	r2, #2132	@ 0x854
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dc33      	bgt.n	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 8000ce8:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000cea:	f640 0254 	movw	r2, #2132	@ 0x854
 8000cee:	801a      	strh	r2, [r3, #0]
        		break;
 8000cf0:	e02e      	b.n	8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f240 1211 	movw	r2, #273	@ 0x111
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d02a      	beq.n	8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000d0e:	801a      	strh	r2, [r3, #0]
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000d20:	805a      	strh	r2, [r3, #2]
 8000d22:	7c3b      	ldrb	r3, [r7, #16]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	7c7b      	ldrb	r3, [r7, #17]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000d32:	809a      	strh	r2, [r3, #4]
 8000d34:	7cbb      	ldrb	r3, [r7, #18]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000d44:	80da      	strh	r2, [r3, #6]
        	    break;
 8000d46:	e006      	b.n	8000d56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8000d48:	bf00      	nop
 8000d4a:	e004      	b.n	8000d56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000d4c:	bf00      	nop
 8000d4e:	e002      	b.n	8000d56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000d50:	bf00      	nop
 8000d52:	e000      	b.n	8000d56 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000d54:	bf00      	nop
        }
    }
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	@ 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000250 	.word	0x20000250
 8000d64:	20000100 	.word	0x20000100
 8000d68:	2000004c 	.word	0x2000004c
 8000d6c:	20000170 	.word	0x20000170
 8000d70:	20000178 	.word	0x20000178

08000d74 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4a20      	ldr	r2, [pc, #128]	@ (8000e18 <CAN2_cmd_motors+0xa4>)
 8000d96:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <CAN2_cmd_motors+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <CAN2_cmd_motors+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <CAN2_cmd_motors+0xa4>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 8000daa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dae:	121b      	asrs	r3, r3, #8
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000db6:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000dbe:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8000dc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dc4:	121b      	asrs	r3, r3, #8
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000dcc:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000dd4:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 8000dd6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000dda:	121b      	asrs	r3, r3, #8
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000de2:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8000de4:	883b      	ldrh	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000dea:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8000dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000df0:	121b      	asrs	r3, r3, #8
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000df8:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 8000dfa:	8c3b      	ldrh	r3, [r7, #32]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000e00:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <CAN2_cmd_motors+0xa8>)
 8000e08:	4903      	ldr	r1, [pc, #12]	@ (8000e18 <CAN2_cmd_motors+0xa4>)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <CAN2_cmd_motors+0xac>)
 8000e0c:	f003 fdf8 	bl	8004a00 <HAL_CAN_AddTxMessage>
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20000230 	.word	0x20000230
 8000e1c:	20000248 	.word	0x20000248
 8000e20:	200005a8 	.word	0x200005a8

08000e24 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	491c      	ldr	r1, [pc, #112]	@ (8000eac <set_M3508_current+0x88>)
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	dc02      	bgt.n	8000e50 <set_M3508_current+0x2c>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	dc04      	bgt.n	8000e58 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 8000e4e:	e027      	b.n	8000ea0 <set_M3508_current+0x7c>
 8000e50:	3b05      	subs	r3, #5
	switch(motorID) {
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d824      	bhi.n	8000ea0 <set_M3508_current+0x7c>
 8000e56:	e011      	b.n	8000e7c <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <set_M3508_current+0x88>)
 8000e5a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <set_M3508_current+0x88>)
 8000e60:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <set_M3508_current+0x88>)
 8000e66:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <set_M3508_current+0x88>)
 8000e6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	4603      	mov	r3, r0
 8000e74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e78:	f7ff ff7c 	bl	8000d74 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <set_M3508_current+0x88>)
 8000e7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <set_M3508_current+0x88>)
 8000e84:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <set_M3508_current+0x88>)
 8000e8a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <set_M3508_current+0x88>)
 8000e90:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4603      	mov	r3, r0
 8000e98:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000e9c:	f7ff ff6a 	bl	8000d74 <CAN2_cmd_motors>
	        break;
 8000ea0:	bf00      	nop
	    }
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000e8 	.word	0x200000e8

08000eb0 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	eef0 6a40 	vmov.f32	s13, s0
 8000ebe:	eeb0 7a60 	vmov.f32	s14, s1
 8000ec2:	eef0 7a41 	vmov.f32	s15, s2
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	81bb      	strh	r3, [r7, #12]
 8000ecc:	edc7 6a00 	vstr	s13, [r7]
 8000ed0:	ed87 7a01 	vstr	s14, [r7, #4]
 8000ed4:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8000ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8001014 <calc_current2RPM_PID+0x164>)
 8000eea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000eee:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8000ef2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000ef6:	4c48      	ldr	r4, [pc, #288]	@ (8001018 <calc_current2RPM_PID+0x168>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4423      	add	r3, r4
 8000f02:	3302      	adds	r3, #2
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	1ac2      	subs	r2, r0, r3
 8000f0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f0e:	440a      	add	r2, r1
 8000f10:	4940      	ldr	r1, [pc, #256]	@ (8001014 <calc_current2RPM_PID+0x164>)
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8000f16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <calc_current2RPM_PID+0x16c>)
 8000f1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f24:	483c      	ldr	r0, [pc, #240]	@ (8001018 <calc_current2RPM_PID+0x168>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4403      	add	r3, r0
 8000f30:	3302      	adds	r3, #2
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	461a      	mov	r2, r3
 8000f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f3c:	1a8a      	subs	r2, r1, r2
 8000f3e:	4938      	ldr	r1, [pc, #224]	@ (8001020 <calc_current2RPM_PID+0x170>)
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8000f44:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f48:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f4c:	4832      	ldr	r0, [pc, #200]	@ (8001018 <calc_current2RPM_PID+0x168>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4403      	add	r3, r0
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f64:	1a8a      	subs	r2, r1, r2
 8000f66:	492f      	ldr	r1, [pc, #188]	@ (8001024 <calc_current2RPM_PID+0x174>)
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8000f6c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f70:	4929      	ldr	r1, [pc, #164]	@ (8001018 <calc_current2RPM_PID+0x168>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4a24      	ldr	r2, [pc, #144]	@ (800101c <calc_current2RPM_PID+0x16c>)
 8000f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8000f8e:	ed97 7a00 	vldr	s14, [r7]
 8000f92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f96:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <calc_current2RPM_PID+0x174>)
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000fac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fb0:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <calc_current2RPM_PID+0x164>)
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc6:	edd7 6a02 	vldr	s13, [r7, #8]
 8000fca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <calc_current2RPM_PID+0x170>)
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe8:	ee17 3a90 	vmov	r3, s15
 8000fec:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ff4:	dd02      	ble.n	8000ffc <calc_current2RPM_PID+0x14c>
 8000ff6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ffa:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001002:	da01      	bge.n	8001008 <calc_current2RPM_PID+0x158>
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <calc_current2RPM_PID+0x178>)
 8001006:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001008:	697b      	ldr	r3, [r7, #20]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc90      	pop	{r4, r7}
 8001012:	4770      	bx	lr
 8001014:	200001d8 	.word	0x200001d8
 8001018:	20000100 	.word	0x20000100
 800101c:	20000180 	.word	0x20000180
 8001020:	200001ac 	.word	0x200001ac
 8001024:	20000204 	.word	0x20000204
 8001028:	ffffc000 	.word	0xffffc000

0800102c <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	eef0 6a40 	vmov.f32	s13, s0
 800103a:	eeb0 7a60 	vmov.f32	s14, s1
 800103e:	eef0 7a41 	vmov.f32	s15, s2
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	4613      	mov	r3, r2
 8001046:	81bb      	strh	r3, [r7, #12]
 8001048:	edc7 6a00 	vstr	s13, [r7]
 800104c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001050:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001054:	edd7 6a00 	vldr	s13, [r7]
 8001058:	ed97 7a01 	vldr	s14, [r7, #4]
 800105c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001060:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	eeb0 0a66 	vmov.f32	s0, s13
 800106c:	eef0 0a47 	vmov.f32	s1, s14
 8001070:	eeb0 1a67 	vmov.f32	s2, s15
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff1a 	bl	8000eb0 <calc_current2RPM_PID>
 800107c:	4603      	mov	r3, r0
 800107e:	b21a      	sxth	r2, r3
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fecc 	bl	8000e24 <set_M3508_current>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800109c:	4905      	ldr	r1, [pc, #20]	@ (80010b4 <usart_Init+0x20>)
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <usart_Init+0x24>)
 80010a0:	f007 ffac 	bl	8008ffc <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80010a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a8:	4904      	ldr	r1, [pc, #16]	@ (80010bc <usart_Init+0x28>)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <usart_Init+0x2c>)
 80010ac:	f007 ffa6 	bl	8008ffc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000254 	.word	0x20000254
 80010b8:	200009c4 	.word	0x200009c4
 80010bc:	20000354 	.word	0x20000354
 80010c0:	20000a54 	.word	0x20000a54

080010c4 <HAL_UARTEx_RxEventCallback>:
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4aab      	ldr	r2, [pc, #684]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	f040 8228 	bne.w	800152a <HAL_UARTEx_RxEventCallback+0x466>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80010da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010de:	49a9      	ldr	r1, [pc, #676]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80010e0:	48a7      	ldr	r0, [pc, #668]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80010e2:	f007 ff8b 	bl	8008ffc <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[6] << 8) | RxBuff_2[5];
 80010e6:	4ba7      	ldr	r3, [pc, #668]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80010e8:	799b      	ldrb	r3, [r3, #6]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	81fb      	strh	r3, [r7, #14]
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		//usart_printf("test");
		switch (RxBuff16) {
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8001100:	f280 8212 	bge.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001104:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8001108:	f300 8208 	bgt.w	800151c <HAL_UARTEx_RxEventCallback+0x458>
 800110c:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8001110:	f300 820a 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001114:	f240 3202 	movw	r2, #770	@ 0x302
 8001118:	4293      	cmp	r3, r2
 800111a:	f280 80c6 	bge.w	80012aa <HAL_UARTEx_RxEventCallback+0x1e6>
 800111e:	f240 3201 	movw	r2, #769	@ 0x301
 8001122:	4293      	cmp	r3, r2
 8001124:	f000 80bb 	beq.w	800129e <HAL_UARTEx_RxEventCallback+0x1da>
 8001128:	f240 3201 	movw	r2, #769	@ 0x301
 800112c:	4293      	cmp	r3, r2
 800112e:	f300 81fb 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001132:	f240 220e 	movw	r2, #526	@ 0x20e
 8001136:	4293      	cmp	r3, r2
 8001138:	f300 81f6 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 800113c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001140:	dc1f      	bgt.n	8001182 <HAL_UARTEx_RxEventCallback+0xbe>
 8001142:	f240 1205 	movw	r2, #261	@ 0x105
 8001146:	4293      	cmp	r3, r2
 8001148:	d05b      	beq.n	8001202 <HAL_UARTEx_RxEventCallback+0x13e>
 800114a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800114e:	f280 81eb 	bge.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001156:	d04e      	beq.n	80011f6 <HAL_UARTEx_RxEventCallback+0x132>
 8001158:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800115c:	f300 81e4 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001160:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001164:	f300 81e0 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800116c:	dc3e      	bgt.n	80011ec <HAL_UARTEx_RxEventCallback+0x128>
 800116e:	2b03      	cmp	r3, #3
 8001170:	d036      	beq.n	80011e0 <HAL_UARTEx_RxEventCallback+0x11c>
 8001172:	2b03      	cmp	r3, #3
 8001174:	f300 81d8 	bgt.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 8001178:	2b01      	cmp	r3, #1
 800117a:	d027      	beq.n	80011cc <HAL_UARTEx_RxEventCallback+0x108>
 800117c:	2b02      	cmp	r3, #2
 800117e:	d02b      	beq.n	80011d8 <HAL_UARTEx_RxEventCallback+0x114>
		    	//memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
		    }

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001180:	e1d2      	b.n	8001528 <HAL_UARTEx_RxEventCallback+0x464>
		switch (RxBuff16) {
 8001182:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001186:	2b0d      	cmp	r3, #13
 8001188:	f200 81ce 	bhi.w	8001528 <HAL_UARTEx_RxEventCallback+0x464>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <HAL_UARTEx_RxEventCallback+0xd0>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800121b 	.word	0x0800121b
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001233 	.word	0x08001233
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800123f 	.word	0x0800123f
 80011ac:	08001247 	.word	0x08001247
 80011b0:	08001253 	.word	0x08001253
 80011b4:	0800125f 	.word	0x0800125f
 80011b8:	08001269 	.word	0x08001269
 80011bc:	08001275 	.word	0x08001275
 80011c0:	08001281 	.word	0x08001281
 80011c4:	0800128d 	.word	0x0800128d
 80011c8:	08001297 	.word	0x08001297
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 80011cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80011ce:	220b      	movs	r2, #11
 80011d0:	4619      	mov	r1, r3
 80011d2:	486e      	ldr	r0, [pc, #440]	@ (800138c <HAL_UARTEx_RxEventCallback+0x2c8>)
 80011d4:	f00c f83c 	bl	800d250 <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 80011d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <HAL_UARTEx_RxEventCallback+0x2cc>)
 80011de:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 80011e0:	4b69      	ldr	r3, [pc, #420]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80011e2:	220d      	movs	r2, #13
 80011e4:	4619      	mov	r1, r3
 80011e6:	486b      	ldr	r0, [pc, #428]	@ (8001394 <HAL_UARTEx_RxEventCallback+0x2d0>)
 80011e8:	f00c f832 	bl	800d250 <memcpy>
		    	memcpy(&ext_supply_projectile_action, (RxBuff_2 + frame_header_offset), ext_supply_projectile_action_len);
 80011ec:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <HAL_UARTEx_RxEventCallback+0x2d4>)
 80011f4:	601a      	str	r2, [r3, #0]
		    	memcpy(&referee_warning, (RxBuff_2 + frame_header_offset), referee_warning_len);
 80011f6:	4a64      	ldr	r2, [pc, #400]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80011f8:	4b68      	ldr	r3, [pc, #416]	@ (800139c <HAL_UARTEx_RxEventCallback+0x2d8>)
 80011fa:	8811      	ldrh	r1, [r2, #0]
 80011fc:	7892      	ldrb	r2, [r2, #2]
 80011fe:	8019      	strh	r1, [r3, #0]
 8001200:	709a      	strb	r2, [r3, #2]
		    	memcpy(&dart_info, (RxBuff_2 + frame_header_offset), dart_info_len);
 8001202:	4b61      	ldr	r3, [pc, #388]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001204:	2203      	movs	r2, #3
 8001206:	4619      	mov	r1, r3
 8001208:	4865      	ldr	r0, [pc, #404]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800120a:	f00c f821 	bl	800d250 <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 800120e:	4b5e      	ldr	r3, [pc, #376]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001210:	220d      	movs	r2, #13
 8001212:	4619      	mov	r1, r3
 8001214:	485f      	ldr	r0, [pc, #380]	@ (8001394 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001216:	f00c f81b 	bl	800d250 <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800121c:	2210      	movs	r2, #16
 800121e:	4619      	mov	r1, r3
 8001220:	4860      	ldr	r0, [pc, #384]	@ (80013a4 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8001222:	f00c f815 	bl	800d250 <memcpy>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001228:	2210      	movs	r2, #16
 800122a:	4619      	mov	r1, r3
 800122c:	485e      	ldr	r0, [pc, #376]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 800122e:	f00c f80f 	bl	800d250 <memcpy>
		    	memcpy(&buffs, (RxBuff_2 + frame_header_offset), buff_len);
 8001232:	4b55      	ldr	r3, [pc, #340]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001234:	2206      	movs	r2, #6
 8001236:	4619      	mov	r1, r3
 8001238:	485c      	ldr	r0, [pc, #368]	@ (80013ac <HAL_UARTEx_RxEventCallback+0x2e8>)
 800123a:	f00c f809 	bl	800d250 <memcpy>
		    	memcpy(&damage_data, (RxBuff_2 + frame_header_offset), damage_data_len);
 800123e:	4b52      	ldr	r3, [pc, #328]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	4b5b      	ldr	r3, [pc, #364]	@ (80013b0 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8001244:	701a      	strb	r2, [r3, #0]
		    	memcpy(&shoot_data, (RxBuff_2 + frame_header_offset), shoot_data_len);
 8001246:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001248:	2207      	movs	r2, #7
 800124a:	4619      	mov	r1, r3
 800124c:	4859      	ldr	r0, [pc, #356]	@ (80013b4 <HAL_UARTEx_RxEventCallback+0x2f0>)
 800124e:	f00b ffff 	bl	800d250 <memcpy>
		    	memcpy(&projectile_allowance, (RxBuff_2 + frame_header_offset), projectile_allowance_len);
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001254:	2206      	movs	r2, #6
 8001256:	4619      	mov	r1, r3
 8001258:	4857      	ldr	r0, [pc, #348]	@ (80013b8 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800125a:	f00b fff9 	bl	800d250 <memcpy>
		    	memcpy(&rfid_status, (RxBuff_2 + frame_header_offset), rfid_status_len);
 800125e:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4b55      	ldr	r3, [pc, #340]	@ (80013bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 8001266:	601a      	str	r2, [r3, #0]
		    	memcpy(&dart_client_cmd, (RxBuff_2 + frame_header_offset), dart_client_cmd_len);
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800126a:	2206      	movs	r2, #6
 800126c:	4619      	mov	r1, r3
 800126e:	4854      	ldr	r0, [pc, #336]	@ (80013c0 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8001270:	f00b ffee 	bl	800d250 <memcpy>
		    	memcpy(&robot_positions, (RxBuff_2 + frame_header_offset), ground_robot_position_len);
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001276:	2228      	movs	r2, #40	@ 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	4852      	ldr	r0, [pc, #328]	@ (80013c4 <HAL_UARTEx_RxEventCallback+0x300>)
 800127c:	f00b ffe8 	bl	800d250 <memcpy>
		    	memcpy(&radar_mark_data, (RxBuff_2 + frame_header_offset), radar_mark_data_len);
 8001280:	4a41      	ldr	r2, [pc, #260]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001282:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <HAL_UARTEx_RxEventCallback+0x304>)
 8001284:	6810      	ldr	r0, [r2, #0]
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	8892      	ldrh	r2, [r2, #4]
 800128a:	809a      	strh	r2, [r3, #4]
		    	memcpy(&sentry_info, (RxBuff_2 + frame_header_offset), sentry_info_len);
 800128c:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b4e      	ldr	r3, [pc, #312]	@ (80013cc <HAL_UARTEx_RxEventCallback+0x308>)
 8001294:	601a      	str	r2, [r3, #0]
		    	memcpy(&radar_info, (RxBuff_2 + frame_header_offset), radar_info_len);
 8001296:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b4d      	ldr	r3, [pc, #308]	@ (80013d0 <HAL_UARTEx_RxEventCallback+0x30c>)
 800129c:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_interaction_data_len);
 800129e:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	4619      	mov	r1, r3
 80012a4:	4840      	ldr	r0, [pc, #256]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 80012a6:	f00b ffd3 	bl	800d250 <memcpy>
		    	memcpy(&pc_control, (RxBuff_2 + frame_header_offset), pc_control_len);
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80012ac:	220c      	movs	r2, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4848      	ldr	r0, [pc, #288]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012b2:	f00b ffcd 	bl	800d250 <memcpy>
		        if(pc_control.keyboard_values_1 > 127){
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012b8:	7a1b      	ldrb	r3, [r3, #8]
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da09      	bge.n	80012d4 <HAL_UARTEx_RxEventCallback+0x210>
		        	pc_control.e = 1;
 80012c0:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	74da      	strb	r2, [r3, #19]
		        	pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 128;
 80012c6:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012c8:	7a1b      	ldrb	r3, [r3, #8]
 80012ca:	3b80      	subs	r3, #128	@ 0x80
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012d0:	721a      	strb	r2, [r3, #8]
 80012d2:	e002      	b.n	80012da <HAL_UARTEx_RxEventCallback+0x216>
		        	pc_control.e = 0;
 80012d4:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	74da      	strb	r2, [r3, #19]
		        if(pc_control.keyboard_values_1>63){
 80012da:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012dc:	7a1b      	ldrb	r3, [r3, #8]
 80012de:	2b3f      	cmp	r3, #63	@ 0x3f
 80012e0:	d909      	bls.n	80012f6 <HAL_UARTEx_RxEventCallback+0x232>
		        	pc_control.q = 1;
 80012e2:	4b3c      	ldr	r3, [pc, #240]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	749a      	strb	r2, [r3, #18]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 64;
 80012e8:	4b3a      	ldr	r3, [pc, #232]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012ea:	7a1b      	ldrb	r3, [r3, #8]
 80012ec:	3b40      	subs	r3, #64	@ 0x40
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012f2:	721a      	strb	r2, [r3, #8]
 80012f4:	e002      	b.n	80012fc <HAL_UARTEx_RxEventCallback+0x238>
		        	pc_control.q = 0;
 80012f6:	4b37      	ldr	r3, [pc, #220]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	749a      	strb	r2, [r3, #18]
		        if(pc_control.keyboard_values_1>31){
 80012fc:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 80012fe:	7a1b      	ldrb	r3, [r3, #8]
 8001300:	2b1f      	cmp	r3, #31
 8001302:	d909      	bls.n	8001318 <HAL_UARTEx_RxEventCallback+0x254>
		        	pc_control.ctrl = 1;
 8001304:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001306:	2201      	movs	r2, #1
 8001308:	745a      	strb	r2, [r3, #17]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 32;
 800130a:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800130c:	7a1b      	ldrb	r3, [r3, #8]
 800130e:	3b20      	subs	r3, #32
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001314:	721a      	strb	r2, [r3, #8]
 8001316:	e002      	b.n	800131e <HAL_UARTEx_RxEventCallback+0x25a>
		        	pc_control.ctrl = 0;
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800131a:	2200      	movs	r2, #0
 800131c:	745a      	strb	r2, [r3, #17]
		        if(pc_control.keyboard_values_1>15){
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001320:	7a1b      	ldrb	r3, [r3, #8]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d909      	bls.n	800133a <HAL_UARTEx_RxEventCallback+0x276>
		        	pc_control.shift = 1;
 8001326:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001328:	2201      	movs	r2, #1
 800132a:	741a      	strb	r2, [r3, #16]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 16;
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800132e:	7a1b      	ldrb	r3, [r3, #8]
 8001330:	3b10      	subs	r3, #16
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001336:	721a      	strb	r2, [r3, #8]
 8001338:	e002      	b.n	8001340 <HAL_UARTEx_RxEventCallback+0x27c>
		        	pc_control.shift = 0;
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800133c:	2200      	movs	r2, #0
 800133e:	741a      	strb	r2, [r3, #16]
		        if(pc_control.keyboard_values_1>7){
 8001340:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001342:	7a1b      	ldrb	r3, [r3, #8]
 8001344:	2b07      	cmp	r3, #7
 8001346:	d909      	bls.n	800135c <HAL_UARTEx_RxEventCallback+0x298>
		        	pc_control.d = 1;
 8001348:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800134a:	2201      	movs	r2, #1
 800134c:	73da      	strb	r2, [r3, #15]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 8;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	3b08      	subs	r3, #8
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001358:	721a      	strb	r2, [r3, #8]
 800135a:	e002      	b.n	8001362 <HAL_UARTEx_RxEventCallback+0x29e>
		        	pc_control.d = 0;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800135e:	2200      	movs	r2, #0
 8001360:	73da      	strb	r2, [r3, #15]
		        if(pc_control.keyboard_values_1>3){
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001364:	7a1b      	ldrb	r3, [r3, #8]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d936      	bls.n	80013d8 <HAL_UARTEx_RxEventCallback+0x314>
		        	pc_control.a = 1;
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800136c:	2201      	movs	r2, #1
 800136e:	739a      	strb	r2, [r3, #14]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 4;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	3b04      	subs	r3, #4
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x310>)
 800137a:	721a      	strb	r2, [r3, #8]
 800137c:	e02f      	b.n	80013de <HAL_UARTEx_RxEventCallback+0x31a>
 800137e:	bf00      	nop
 8001380:	20000a54 	.word	0x20000a54
 8001384:	20000354 	.word	0x20000354
 8001388:	2000035b 	.word	0x2000035b
 800138c:	20000458 	.word	0x20000458
 8001390:	20000468 	.word	0x20000468
 8001394:	20000478 	.word	0x20000478
 8001398:	2000046c 	.word	0x2000046c
 800139c:	20000470 	.word	0x20000470
 80013a0:	20000474 	.word	0x20000474
 80013a4:	20000488 	.word	0x20000488
 80013a8:	20000498 	.word	0x20000498
 80013ac:	200004a4 	.word	0x200004a4
 80013b0:	200004ac 	.word	0x200004ac
 80013b4:	200004b0 	.word	0x200004b0
 80013b8:	200004b8 	.word	0x200004b8
 80013bc:	200004c0 	.word	0x200004c0
 80013c0:	200004c4 	.word	0x200004c4
 80013c4:	200004cc 	.word	0x200004cc
 80013c8:	200004f4 	.word	0x200004f4
 80013cc:	200004fc 	.word	0x200004fc
 80013d0:	20000500 	.word	0x20000500
 80013d4:	20000504 	.word	0x20000504
		        	pc_control.a = 0;
 80013d8:	4b56      	ldr	r3, [pc, #344]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013da:	2200      	movs	r2, #0
 80013dc:	739a      	strb	r2, [r3, #14]
		        if(pc_control.keyboard_values_1>1){
 80013de:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013e0:	7a1b      	ldrb	r3, [r3, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d909      	bls.n	80013fa <HAL_UARTEx_RxEventCallback+0x336>
		        	pc_control.s = 1;
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	735a      	strb	r2, [r3, #13]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 2;
 80013ec:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	3b02      	subs	r3, #2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013f6:	721a      	strb	r2, [r3, #8]
 80013f8:	e002      	b.n	8001400 <HAL_UARTEx_RxEventCallback+0x33c>
		        	pc_control.s = 0;
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	735a      	strb	r2, [r3, #13]
		        if(pc_control.keyboard_values_1 > 0){
 8001400:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_UARTEx_RxEventCallback+0x34c>
		        	pc_control.w = 1;
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800140a:	2201      	movs	r2, #1
 800140c:	731a      	strb	r2, [r3, #12]
 800140e:	e002      	b.n	8001416 <HAL_UARTEx_RxEventCallback+0x352>
		        	pc_control.w = 0;
 8001410:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001412:	2200      	movs	r2, #0
 8001414:	731a      	strb	r2, [r3, #12]
		        if(pc_control.keyboard_values_2 > 127){
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001418:	7a5b      	ldrb	r3, [r3, #9]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	da09      	bge.n	8001434 <HAL_UARTEx_RxEventCallback+0x370>
					pc_control.b = 1;
 8001420:	4b44      	ldr	r3, [pc, #272]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001422:	2201      	movs	r2, #1
 8001424:	76da      	strb	r2, [r3, #27]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 128;
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001428:	7a5b      	ldrb	r3, [r3, #9]
 800142a:	3b80      	subs	r3, #128	@ 0x80
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b41      	ldr	r3, [pc, #260]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001430:	725a      	strb	r2, [r3, #9]
 8001432:	e002      	b.n	800143a <HAL_UARTEx_RxEventCallback+0x376>
					pc_control.b = 0;
 8001434:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001436:	2200      	movs	r2, #0
 8001438:	76da      	strb	r2, [r3, #27]
				if(pc_control.keyboard_values_2>63){
 800143a:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001440:	d909      	bls.n	8001456 <HAL_UARTEx_RxEventCallback+0x392>
					pc_control.v = 1;
 8001442:	4b3c      	ldr	r3, [pc, #240]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001444:	2201      	movs	r2, #1
 8001446:	769a      	strb	r2, [r3, #26]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 64;
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800144a:	7a5b      	ldrb	r3, [r3, #9]
 800144c:	3b40      	subs	r3, #64	@ 0x40
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001452:	725a      	strb	r2, [r3, #9]
 8001454:	e002      	b.n	800145c <HAL_UARTEx_RxEventCallback+0x398>
					pc_control.v = 0;
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001458:	2200      	movs	r2, #0
 800145a:	769a      	strb	r2, [r3, #26]
				if(pc_control.keyboard_values_2>31){
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	2b1f      	cmp	r3, #31
 8001462:	d909      	bls.n	8001478 <HAL_UARTEx_RxEventCallback+0x3b4>
					pc_control.c = 1;
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001466:	2201      	movs	r2, #1
 8001468:	765a      	strb	r2, [r3, #25]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 32;
 800146a:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	3b20      	subs	r3, #32
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001474:	725a      	strb	r2, [r3, #9]
 8001476:	e002      	b.n	800147e <HAL_UARTEx_RxEventCallback+0x3ba>
					pc_control.c = 0;
 8001478:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800147a:	2200      	movs	r2, #0
 800147c:	765a      	strb	r2, [r3, #25]
				if(pc_control.keyboard_values_2>15){
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001480:	7a5b      	ldrb	r3, [r3, #9]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	d909      	bls.n	800149a <HAL_UARTEx_RxEventCallback+0x3d6>
					pc_control.x = 1;
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001488:	2201      	movs	r2, #1
 800148a:	761a      	strb	r2, [r3, #24]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 16;
 800148c:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800148e:	7a5b      	ldrb	r3, [r3, #9]
 8001490:	3b10      	subs	r3, #16
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001496:	725a      	strb	r2, [r3, #9]
 8001498:	e002      	b.n	80014a0 <HAL_UARTEx_RxEventCallback+0x3dc>
					pc_control.x = 0;
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 800149c:	2200      	movs	r2, #0
 800149e:	761a      	strb	r2, [r3, #24]
				if(pc_control.keyboard_values_2>7){
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014a2:	7a5b      	ldrb	r3, [r3, #9]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	d909      	bls.n	80014bc <HAL_UARTEx_RxEventCallback+0x3f8>
					pc_control.z = 1;
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	75da      	strb	r2, [r3, #23]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 8;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014b0:	7a5b      	ldrb	r3, [r3, #9]
 80014b2:	3b08      	subs	r3, #8
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014b8:	725a      	strb	r2, [r3, #9]
 80014ba:	e002      	b.n	80014c2 <HAL_UARTEx_RxEventCallback+0x3fe>
					pc_control.z = 0;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014be:	2200      	movs	r2, #0
 80014c0:	75da      	strb	r2, [r3, #23]
				if(pc_control.keyboard_values_2>3){
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014c4:	7a5b      	ldrb	r3, [r3, #9]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d909      	bls.n	80014de <HAL_UARTEx_RxEventCallback+0x41a>
					pc_control.g = 1;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	759a      	strb	r2, [r3, #22]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 4;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014d2:	7a5b      	ldrb	r3, [r3, #9]
 80014d4:	3b04      	subs	r3, #4
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014da:	725a      	strb	r2, [r3, #9]
 80014dc:	e002      	b.n	80014e4 <HAL_UARTEx_RxEventCallback+0x420>
					pc_control.g = 0;
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	759a      	strb	r2, [r3, #22]
				if(pc_control.keyboard_values_2>1){
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014e6:	7a5b      	ldrb	r3, [r3, #9]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d909      	bls.n	8001500 <HAL_UARTEx_RxEventCallback+0x43c>
					pc_control.f = 1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	755a      	strb	r2, [r3, #21]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 2;
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014f4:	7a5b      	ldrb	r3, [r3, #9]
 80014f6:	3b02      	subs	r3, #2
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 80014fc:	725a      	strb	r2, [r3, #9]
 80014fe:	e002      	b.n	8001506 <HAL_UARTEx_RxEventCallback+0x442>
					pc_control.f = 0;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001502:	2200      	movs	r2, #0
 8001504:	755a      	strb	r2, [r3, #21]
				if(pc_control.keyboard_values_2 > 0){
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001508:	7a5b      	ldrb	r3, [r3, #9]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_UARTEx_RxEventCallback+0x452>
					pc_control.r = 1;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001510:	2201      	movs	r2, #1
 8001512:	751a      	strb	r2, [r3, #20]
 8001514:	e002      	b.n	800151c <HAL_UARTEx_RxEventCallback+0x458>
					pc_control.r = 0;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x470>)
 8001518:	2200      	movs	r2, #0
 800151a:	751a      	strb	r2, [r3, #20]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), map_data_len);
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_UARTEx_RxEventCallback+0x474>)
 800151e:	2267      	movs	r2, #103	@ 0x67
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <HAL_UARTEx_RxEventCallback+0x478>)
 8001524:	f00b fe94 	bl	800d250 <memcpy>
		        break;
 8001528:	bf00      	nop
		    }
		}
	}
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000504 	.word	0x20000504
 8001538:	2000035b 	.word	0x2000035b
 800153c:	20000498 	.word	0x20000498

08001540 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800156a:	463b      	mov	r3, r7
 800156c:	4619      	mov	r1, r3
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <can_filter_init+0x6c>)
 8001570:	f003 f922 	bl	80047b8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <can_filter_init+0x6c>)
 8001576:	f003 f9ff 	bl	8004978 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800157a:	2102      	movs	r1, #2
 800157c:	480b      	ldr	r0, [pc, #44]	@ (80015ac <can_filter_init+0x6c>)
 800157e:	f003 fc31 	bl	8004de4 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001582:	230e      	movs	r3, #14
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001586:	230e      	movs	r3, #14
 8001588:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <can_filter_init+0x70>)
 8001590:	f003 f912 	bl	80047b8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001594:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <can_filter_init+0x70>)
 8001596:	f003 f9ef 	bl	8004978 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800159a:	2102      	movs	r1, #2
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <can_filter_init+0x70>)
 800159e:	f003 fc21 	bl	8004de4 <HAL_CAN_ActivateNotification>
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000580 	.word	0x20000580
 80015b0:	200005a8 	.word	0x200005a8

080015b4 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <imu_pwm_set+0x1c>)
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40014400 	.word	0x40014400

080015d4 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <RC_init+0xac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <RC_init+0xac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015f0:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <RC_init+0xac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <RC_init+0xac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <RC_init+0xb0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <RC_init+0xb0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001612:	e007      	b.n	8001624 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <RC_init+0xb0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <RC_init+0xb0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001624:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <RC_init+0xb0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <RC_init+0xb0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <RC_init+0xb4>)
 8001638:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <RC_init+0xb0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <RC_init+0xb0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <RC_init+0xb0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <RC_init+0xb0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <RC_init+0xb0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001660:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <RC_init+0xb0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <RC_init+0xb0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000a0c 	.word	0x20000a0c
 8001684:	20000b5c 	.word	0x20000b5c
 8001688:	40004804 	.word	0x40004804

0800168c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001694:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001698:	f008 feaa 	bl	800a3f0 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 800169c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001740 <imu_temp_control_task+0xb4>
 80016a0:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001744 <imu_temp_control_task+0xb8>
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <imu_temp_control_task+0xbc>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4828      	ldr	r0, [pc, #160]	@ (800174c <imu_temp_control_task+0xc0>)
 80016aa:	f001 f8bd 	bl	8002828 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <imu_temp_control_task+0xc4>)
 80016b0:	2210      	movs	r2, #16
 80016b2:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b4:	4826      	ldr	r0, [pc, #152]	@ (8001750 <imu_temp_control_task+0xc4>)
 80016b6:	f006 f988 	bl	80079ca <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80016c0:	f001 f8ac 	bl	800281c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80016c4:	2000      	movs	r0, #0
 80016c6:	f009 ffb1 	bl	800b62c <pcTaskGetName>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a f841 	bl	800b754 <xTaskGetHandle>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <imu_temp_control_task+0xc8>)
 80016d6:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <imu_temp_control_task+0xcc>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80016de:	bf00      	nop
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	2001      	movs	r0, #1
 80016e6:	f00a fc61 	bl	800bfac <ulTaskNotifyTake>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d1f7      	bne.n	80016e0 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80016f0:	f7ff f8ec 	bl	80008cc <IMU_get_temp>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800175c <imu_temp_control_task+0xd0>
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	4812      	ldr	r0, [pc, #72]	@ (800174c <imu_temp_control_task+0xc0>)
 8001702:	f001 f8e8 	bl	80028d6 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <imu_temp_control_task+0xc0>)
 8001708:	edd3 7a08 	vldr	s15, [r3, #32]
 800170c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d503      	bpl.n	800171e <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <imu_temp_control_task+0xc0>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <imu_temp_control_task+0xc0>)
 8001720:	edd3 7a08 	vldr	s15, [r3, #32]
 8001724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001728:	ee17 3a90 	vmov	r3, s15
 800172c:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff3f 	bl	80015b4 <imu_pwm_set>
        osDelay(5);
 8001736:	2005      	movs	r0, #5
 8001738:	f008 fe5a 	bl	800a3f0 <osDelay>
    {
 800173c:	e7cf      	b.n	80016de <imu_temp_control_task+0x52>
 800173e:	bf00      	nop
 8001740:	45898000 	.word	0x45898000
 8001744:	458ca000 	.word	0x458ca000
 8001748:	0800d384 	.word	0x0800d384
 800174c:	20000528 	.word	0x20000528
 8001750:	20000624 	.word	0x20000624
 8001754:	20000520 	.word	0x20000520
 8001758:	20000524 	.word	0x20000524
 800175c:	42200000 	.word	0x42200000

08001760 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_GPIO_EXTI_Callback+0x54>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	429a      	cmp	r2, r3
 8001772:	d11b      	bne.n	80017ac <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800177e:	f00a fb87 	bl	800be90 <xTaskGetSchedulerState>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d011      	beq.n	80017ac <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_GPIO_EXTI_Callback+0x5c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	490c      	ldr	r1, [pc, #48]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x60>)
 800178e:	4618      	mov	r0, r3
 8001790:	f00a fc58 	bl	800c044 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_EXTI_Callback+0x4c>
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x64>)
 800179e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000000e 	.word	0x2000000e
 80017b8:	20000524 	.word	0x20000524
 80017bc:	20000520 	.word	0x20000520
 80017c0:	20000570 	.word	0x20000570
 80017c4:	e000ed04 	.word	0xe000ed04

080017c8 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80017d6:	f000 f8bd 	bl	8001954 <ist8310_GPIO_init>
    ist8310_com_init();
 80017da:	f000 f8c2 	bl	8001962 <ist8310_com_init>

    ist8310_RST_L();
 80017de:	f000 f97b 	bl	8001ad8 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80017e2:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <ist8310_init+0xdc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f916 	bl	8001a18 <ist8310_delay_ms>
    ist8310_RST_H();
 80017ec:	f000 f968 	bl	8001ac0 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 80017f0:	4b2c      	ldr	r3, [pc, #176]	@ (80018a4 <ist8310_init+0xdc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f90f 	bl	8001a18 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f8b8 	bl	8001970 <ist8310_IIC_read_single_reg>
 8001800:	4603      	mov	r3, r0
 8001802:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d001      	beq.n	800180e <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 800180a:	2340      	movs	r3, #64	@ 0x40
 800180c:	e045      	b.n	800189a <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e03e      	b.n	8001892 <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	4924      	ldr	r1, [pc, #144]	@ (80018a8 <ist8310_init+0xe0>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	440b      	add	r3, r1
 8001820:	7818      	ldrb	r0, [r3, #0]
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	4920      	ldr	r1, [pc, #128]	@ (80018a8 <ist8310_init+0xe0>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	440b      	add	r3, r1
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	f000 f8b8 	bl	80019a8 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8001838:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <ist8310_init+0xe4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f8f9 	bl	8001a34 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	4918      	ldr	r1, [pc, #96]	@ (80018a8 <ist8310_init+0xe0>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f88d 	bl	8001970 <ist8310_IIC_read_single_reg>
 8001856:	4603      	mov	r3, r0
 8001858:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <ist8310_init+0xe4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8e8 	bl	8001a34 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	4910      	ldr	r1, [pc, #64]	@ (80018a8 <ist8310_init+0xe0>)
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	3301      	adds	r3, #1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	79ba      	ldrb	r2, [r7, #6]
 8001876:	429a      	cmp	r2, r3
 8001878:	d008      	beq.n	800188c <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	490a      	ldr	r1, [pc, #40]	@ (80018a8 <ist8310_init+0xe0>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	440b      	add	r3, r1
 8001886:	3302      	adds	r3, #2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	e006      	b.n	800189a <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3301      	adds	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d9bd      	bls.n	8001814 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0800d39c 	.word	0x0800d39c
 80018a8:	0800d390 	.word	0x0800d390
 80018ac:	0800d39d 	.word	0x0800d39d

080018b0 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2206      	movs	r2, #6
 80018c2:	4619      	mov	r1, r3
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f88b 	bl	80019e0 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80018ca:	7a7b      	ldrb	r3, [r7, #9]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	7a3b      	ldrb	r3, [r7, #8]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80018d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001950 <ist8310_read_mag+0xa0>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	7abb      	ldrb	r3, [r7, #10]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001950 <ist8310_read_mag+0xa0>
 8001914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001918:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 800191c:	7b7b      	ldrb	r3, [r7, #13]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7b3b      	ldrb	r3, [r7, #12]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800192a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3308      	adds	r3, #8
 800193a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001950 <ist8310_read_mag+0xa0>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001942:	edc3 7a00 	vstr	s15, [r3]
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	3e99999a 	.word	0x3e99999a

08001954 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af04      	add	r7, sp, #16
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	b29a      	uxth	r2, r3
 8001982:	230a      	movs	r3, #10
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f107 030f 	add.w	r3, r7, #15
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	211c      	movs	r1, #28
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <ist8310_IIC_read_single_reg+0x34>)
 8001996:	f004 fdb3 	bl	8006500 <HAL_I2C_Mem_Read>
    return res;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200005d0 	.word	0x200005d0

080019a8 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af04      	add	r7, sp, #16
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	230a      	movs	r3, #10
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	211c      	movs	r1, #28
 80019cc:	4803      	ldr	r0, [pc, #12]	@ (80019dc <ist8310_IIC_write_single_reg+0x34>)
 80019ce:	f004 fc9d 	bl	800630c <HAL_I2C_Mem_Write>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200005d0 	.word	0x200005d0

080019e0 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	210a      	movs	r1, #10
 80019fa:	9102      	str	r1, [sp, #8]
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	211c      	movs	r1, #28
 8001a06:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <ist8310_IIC_read_muli_reg+0x34>)
 8001a08:	f004 fd7a 	bl	8006500 <HAL_I2C_Mem_Read>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200005d0 	.word	0x200005d0

08001a18 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fda7 	bl	8004578 <HAL_Delay>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <ist8310_delay_us+0x88>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <ist8310_delay_us+0x88>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <ist8310_delay_us+0x88>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d0f8      	beq.n	8001a6a <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d206      	bcs.n	8001a8e <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4413      	add	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	e007      	b.n	8001a9e <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d200      	bcs.n	8001aac <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 8001aaa:	e7de      	b.n	8001a6a <ist8310_delay_us+0x36>
            {
                break;
 8001aac:	bf00      	nop
            }
        }
    }
}
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2140      	movs	r1, #64	@ 0x40
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <ist8310_RST_H+0x14>)
 8001aca:	f004 faa9 	bl	8006020 <HAL_GPIO_WritePin>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021800 	.word	0x40021800

08001ad8 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	@ 0x40
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <ist8310_RST_L+0x14>)
 8001ae2:	f004 fa9d 	bl	8006020 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021800 	.word	0x40021800

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af4:	f002 fcce 	bl	8004494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af8:	f000 f876 	bl	8001be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afc:	f000 fd1e 	bl	800253c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b00:	f000 fca6 	bl	8002450 <MX_DMA_Init>
  MX_CAN1_Init();
 8001b04:	f000 f8dc 	bl	8001cc0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001b08:	f000 f910 	bl	8001d2c <MX_CAN2_Init>
  MX_SPI1_Init();
 8001b0c:	f000 f972 	bl	8001df4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001b10:	f000 fa4e 	bl	8001fb0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001b14:	f000 fc1c 	bl	8002350 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b18:	f000 fc70 	bl	80023fc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001b1c:	f000 f9a0 	bl	8001e60 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001b20:	f000 fb2c 	bl	800217c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001b24:	f000 fc3e 	bl	80023a4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001b28:	f000 fbc4 	bl	80022b4 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001b2c:	f000 f934 	bl	8001d98 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001b30:	f000 fab4 	bl	800209c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <main+0xb4>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <main+0xb8>)
 8001b38:	491c      	ldr	r1, [pc, #112]	@ (8001bac <main+0xbc>)
 8001b3a:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <main+0xc0>)
 8001b3c:	f001 f814 	bl	8002b68 <PWMInit>
  can_filter_init();
 8001b40:	f7ff fcfe 	bl	8001540 <can_filter_init>
  remote_control_init();
 8001b44:	f001 fbae 	bl	80032a4 <remote_control_init>
  usart_Init();
 8001b48:	f7ff faa4 	bl	8001094 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001b4c:	f001 fbb8 	bl	80032c0 <get_remote_control_point>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <main+0xc4>)
 8001b54:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b56:	f008 fb6f 	bl	800a238 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001b5a:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <main+0xc8>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4817      	ldr	r0, [pc, #92]	@ (8001bbc <main+0xcc>)
 8001b60:	f008 fbb4 	bl	800a2cc <osThreadNew>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <main+0xd0>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001b6a:	4a16      	ldr	r2, [pc, #88]	@ (8001bc4 <main+0xd4>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4816      	ldr	r0, [pc, #88]	@ (8001bc8 <main+0xd8>)
 8001b70:	f008 fbac 	bl	800a2cc <osThreadNew>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <main+0xdc>)
 8001b78:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8001b7a:	4a15      	ldr	r2, [pc, #84]	@ (8001bd0 <main+0xe0>)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4815      	ldr	r0, [pc, #84]	@ (8001bd4 <main+0xe4>)
 8001b80:	f008 fba4 	bl	800a2cc <osThreadNew>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <main+0xe8>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8001b8a:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <main+0xec>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <main+0xf0>)
 8001b90:	f008 fb9c 	bl	800a2cc <osThreadNew>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a13      	ldr	r2, [pc, #76]	@ (8001be4 <main+0xf4>)
 8001b98:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b9a:	f008 fb71 	bl	800a280 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b9e:	bf00      	nop
 8001ba0:	e7fd      	b.n	8001b9e <main+0xae>
 8001ba2:	bf00      	nop
 8001ba4:	20000754 	.word	0x20000754
 8001ba8:	2000070c 	.word	0x2000070c
 8001bac:	200006c4 	.word	0x200006c4
 8001bb0:	2000067c 	.word	0x2000067c
 8001bb4:	20000c8c 	.word	0x20000c8c
 8001bb8:	0800d3a0 	.word	0x0800d3a0
 8001bbc:	08002749 	.word	0x08002749
 8001bc0:	20000c7c 	.word	0x20000c7c
 8001bc4:	0800d3c4 	.word	0x0800d3c4
 8001bc8:	08002799 	.word	0x08002799
 8001bcc:	20000c80 	.word	0x20000c80
 8001bd0:	0800d3e8 	.word	0x0800d3e8
 8001bd4:	0800168d 	.word	0x0800168d
 8001bd8:	20000c84 	.word	0x20000c84
 8001bdc:	0800d40c 	.word	0x0800d40c
 8001be0:	0800280d 	.word	0x0800280d
 8001be4:	20000c88 	.word	0x20000c88

08001be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	@ 0x50
 8001bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	2230      	movs	r2, #48	@ 0x30
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00b faa6 	bl	800d148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <SystemClock_Config+0xd0>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a28      	ldr	r2, [pc, #160]	@ (8001cb8 <SystemClock_Config+0xd0>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <SystemClock_Config+0xd0>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <SystemClock_Config+0xd4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a22      	ldr	r2, [pc, #136]	@ (8001cbc <SystemClock_Config+0xd4>)
 8001c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <SystemClock_Config+0xd4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c5c:	23a8      	movs	r3, #168	@ 0xa8
 8001c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 fa2d 	bl	80070cc <HAL_RCC_OscConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c78:	f000 fdd0 	bl	800281c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c80:	2302      	movs	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2105      	movs	r1, #5
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 fc8e 	bl	80075bc <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ca6:	f000 fdb9 	bl	800281c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001caa:	f005 fd6d 	bl	8007788 <HAL_RCC_EnableCSS>
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	@ 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <MX_CAN1_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001ccc:	2203      	movs	r2, #3
 8001cce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cde:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001ce2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001ce6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001cea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <MX_CAN1_Init+0x64>)
 8001d12:	f002 fc55 	bl	80045c0 <HAL_CAN_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 fd7e 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000580 	.word	0x20000580
 8001d28:	40006400 	.word	0x40006400

08001d2c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d32:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <MX_CAN2_Init+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d38:	2203      	movs	r2, #3
 8001d3a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d4a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001d4e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d52:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d56:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <MX_CAN2_Init+0x64>)
 8001d7e:	f002 fc1f 	bl	80045c0 <HAL_CAN_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001d88:	f000 fd48 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200005a8 	.word	0x200005a8
 8001d94:	40006800 	.word	0x40006800

08001d98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <MX_I2C3_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <MX_I2C3_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <MX_I2C3_Init+0x50>)
 8001dd6:	f004 f955 	bl	8006084 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 fd1c 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200005d0 	.word	0x200005d0
 8001dec:	40005c00 	.word	0x40005c00
 8001df0:	00061a80 	.word	0x00061a80

08001df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001df8:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <MX_SPI1_Init+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e28:	2238      	movs	r2, #56	@ 0x38
 8001e2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e40:	220a      	movs	r2, #10
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <MX_SPI1_Init+0x64>)
 8001e46:	f005 fdc0 	bl	80079ca <HAL_SPI_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e50:	f000 fce4 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000624 	.word	0x20000624
 8001e5c:	40013000 	.word	0x40013000

08001e60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b092      	sub	sp, #72	@ 0x48
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]
 8001e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2220      	movs	r2, #32
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00b f95c 	bl	800d148 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e90:	4b45      	ldr	r3, [pc, #276]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001e92:	4a46      	ldr	r2, [pc, #280]	@ (8001fac <MX_TIM1_Init+0x14c>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8001e96:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001e98:	f240 124f 	movw	r2, #335	@ 0x14f
 8001e9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ea4:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001ea6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ebe:	483a      	ldr	r0, [pc, #232]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001ec0:	f006 f950 	bl	8008164 <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001eca:	f000 fca7 	bl	800281c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eda:	4619      	mov	r1, r3
 8001edc:	4832      	ldr	r0, [pc, #200]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001ede:	f006 ff6f 	bl	8008dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001ee8:	f000 fc98 	bl	800281c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2360      	movs	r3, #96	@ 0x60
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4825      	ldr	r0, [pc, #148]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f12:	f006 faaf 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001f1c:	f000 fc7e 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	2204      	movs	r2, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	481f      	ldr	r0, [pc, #124]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f2a:	f006 faa3 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001f34:	f000 fc72 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4819      	ldr	r0, [pc, #100]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f42:	f006 fa97 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001f4c:	f000 fc66 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f54:	220c      	movs	r2, #12
 8001f56:	4619      	mov	r1, r3
 8001f58:	4813      	ldr	r0, [pc, #76]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f5a:	f006 fa8b 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001f64:	f000 fc5a 	bl	800281c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f8c:	f006 ff94 	bl	8008eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001f96:	f000 fc41 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9a:	4803      	ldr	r0, [pc, #12]	@ (8001fa8 <MX_TIM1_Init+0x148>)
 8001f9c:	f001 fe84 	bl	8003ca8 <HAL_TIM_MspPostInit>

}
 8001fa0:	bf00      	nop
 8001fa2:	3748      	adds	r7, #72	@ 0x48
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000067c 	.word	0x2000067c
 8001fac:	40010000 	.word	0x40010000

08001fb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <MX_TIM4_Init+0xe8>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8001fe8:	2253      	movs	r2, #83	@ 0x53
 8001fea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001ff2:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8001ff4:	22f9      	movs	r2, #249	@ 0xf9
 8001ff6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002004:	4823      	ldr	r0, [pc, #140]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002006:	f005 fff5 	bl	8007ff4 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002010:	f000 fc04 	bl	800281c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800201e:	4619      	mov	r1, r3
 8002020:	481c      	ldr	r0, [pc, #112]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002022:	f006 fae9 	bl	80085f8 <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800202c:	f000 fbf6 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002030:	4818      	ldr	r0, [pc, #96]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002032:	f006 f897 	bl	8008164 <HAL_TIM_PWM_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800203c:	f000 fbee 	bl	800281c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002048:	f107 0320 	add.w	r3, r7, #32
 800204c:	4619      	mov	r1, r3
 800204e:	4811      	ldr	r0, [pc, #68]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002050:	f006 feb6 	bl	8008dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800205a:	f000 fbdf 	bl	800281c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205e:	2360      	movs	r3, #96	@ 0x60
 8002060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002062:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2208      	movs	r2, #8
 8002074:	4619      	mov	r1, r3
 8002076:	4807      	ldr	r0, [pc, #28]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002078:	f006 f9fc 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002082:	f000 fbcb 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002086:	4803      	ldr	r0, [pc, #12]	@ (8002094 <MX_TIM4_Init+0xe4>)
 8002088:	f001 fe0e 	bl	8003ca8 <HAL_TIM_MspPostInit>

}
 800208c:	bf00      	nop
 800208e:	3738      	adds	r7, #56	@ 0x38
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200006c4 	.word	0x200006c4
 8002098:	40000800 	.word	0x40000800

0800209c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020be:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002178 <MX_TIM5_Init+0xdc>)
 80020c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020c6:	2253      	movs	r2, #83	@ 0x53
 80020c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80020d0:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020d2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80020d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020e4:	4823      	ldr	r0, [pc, #140]	@ (8002174 <MX_TIM5_Init+0xd8>)
 80020e6:	f006 f83d 	bl	8008164 <HAL_TIM_PWM_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020f0:	f000 fb94 	bl	800281c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	4619      	mov	r1, r3
 8002102:	481c      	ldr	r0, [pc, #112]	@ (8002174 <MX_TIM5_Init+0xd8>)
 8002104:	f006 fe5c 	bl	8008dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800210e:	f000 fb85 	bl	800281c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002112:	2360      	movs	r3, #96	@ 0x60
 8002114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	4619      	mov	r1, r3
 8002128:	4812      	ldr	r0, [pc, #72]	@ (8002174 <MX_TIM5_Init+0xd8>)
 800212a:	f006 f9a3 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002134:	f000 fb72 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2204      	movs	r2, #4
 800213c:	4619      	mov	r1, r3
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <MX_TIM5_Init+0xd8>)
 8002140:	f006 f998 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800214a:	f000 fb67 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2208      	movs	r2, #8
 8002152:	4619      	mov	r1, r3
 8002154:	4807      	ldr	r0, [pc, #28]	@ (8002174 <MX_TIM5_Init+0xd8>)
 8002156:	f006 f98d 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002160:	f000 fb5c 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002164:	4803      	ldr	r0, [pc, #12]	@ (8002174 <MX_TIM5_Init+0xd8>)
 8002166:	f001 fd9f 	bl	8003ca8 <HAL_TIM_MspPostInit>

}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000070c 	.word	0x2000070c
 8002178:	40000c00 	.word	0x40000c00

0800217c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b092      	sub	sp, #72	@ 0x48
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002182:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	615a      	str	r2, [r3, #20]
 800219e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2220      	movs	r2, #32
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00a ffce 	bl	800d148 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021ac:	4b3f      	ldr	r3, [pc, #252]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021ae:	4a40      	ldr	r2, [pc, #256]	@ (80022b0 <MX_TIM8_Init+0x134>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80021b2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021b4:	2253      	movs	r2, #83	@ 0x53
 80021b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80021be:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021c0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80021c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021cc:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021d2:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021d4:	2280      	movs	r2, #128	@ 0x80
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021d8:	4834      	ldr	r0, [pc, #208]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021da:	f005 ffc3 	bl	8008164 <HAL_TIM_PWM_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80021e4:	f000 fb1a 	bl	800281c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021f4:	4619      	mov	r1, r3
 80021f6:	482d      	ldr	r0, [pc, #180]	@ (80022ac <MX_TIM8_Init+0x130>)
 80021f8:	f006 fde2 	bl	8008dc0 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002202:	f000 fb0b 	bl	800281c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4820      	ldr	r0, [pc, #128]	@ (80022ac <MX_TIM8_Init+0x130>)
 800222c:	f006 f922 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002236:	f000 faf1 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800223a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800223e:	2204      	movs	r2, #4
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	@ (80022ac <MX_TIM8_Init+0x130>)
 8002244:	f006 f916 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800224e:	f000 fae5 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002256:	2208      	movs	r2, #8
 8002258:	4619      	mov	r1, r3
 800225a:	4814      	ldr	r0, [pc, #80]	@ (80022ac <MX_TIM8_Init+0x130>)
 800225c:	f006 f90a 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002266:	f000 fad9 	bl	800281c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800227e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002282:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4807      	ldr	r0, [pc, #28]	@ (80022ac <MX_TIM8_Init+0x130>)
 800228e:	f006 fe13 	bl	8008eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002298:	f000 fac0 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800229c:	4803      	ldr	r0, [pc, #12]	@ (80022ac <MX_TIM8_Init+0x130>)
 800229e:	f001 fd03 	bl	8003ca8 <HAL_TIM_MspPostInit>

}
 80022a2:	bf00      	nop
 80022a4:	3748      	adds	r7, #72	@ 0x48
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000754 	.word	0x20000754
 80022b0:	40010400 	.word	0x40010400

080022b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022ce:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <MX_TIM10_Init+0x98>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022e0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80022e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022f2:	4815      	ldr	r0, [pc, #84]	@ (8002348 <MX_TIM10_Init+0x94>)
 80022f4:	f005 fe7e 	bl	8007ff4 <HAL_TIM_Base_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80022fe:	f000 fa8d 	bl	800281c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002302:	4811      	ldr	r0, [pc, #68]	@ (8002348 <MX_TIM10_Init+0x94>)
 8002304:	f005 ff2e 	bl	8008164 <HAL_TIM_PWM_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800230e:	f000 fa85 	bl	800281c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002312:	2360      	movs	r3, #96	@ 0x60
 8002314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	4807      	ldr	r0, [pc, #28]	@ (8002348 <MX_TIM10_Init+0x94>)
 800232a:	f006 f8a3 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002334:	f000 fa72 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <MX_TIM10_Init+0x94>)
 800233a:	f001 fcb5 	bl	8003ca8 <HAL_TIM_MspPostInit>

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000079c 	.word	0x2000079c
 800234c:	40014400 	.word	0x40014400

08002350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <MX_USART1_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <MX_USART1_UART_Init+0x4c>)
 8002388:	f006 fde8 	bl	8008f5c <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f000 fa43 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200009c4 	.word	0x200009c4
 80023a0:	40011000 	.word	0x40011000

080023a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a8:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <MX_USART3_UART_Init+0x50>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <MX_USART3_UART_Init+0x54>)
 80023b2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <MX_USART3_UART_Init+0x4c>)
 80023dc:	f006 fdbe 	bl	8008f5c <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023e6:	f000 fa19 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000a0c 	.word	0x20000a0c
 80023f4:	40004800 	.word	0x40004800
 80023f8:	000186a0 	.word	0x000186a0

080023fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <MX_USART6_UART_Init+0x50>)
 8002404:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800240c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_USART6_UART_Init+0x4c>)
 8002434:	f006 fd92 	bl	8008f5c <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800243e:	f000 f9ed 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000a54 	.word	0x20000a54
 800244c:	40011400 	.word	0x40011400

08002450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <MX_DMA_Init+0xe8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <MX_DMA_Init+0xe8>)
 8002460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <MX_DMA_Init+0xe8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <MX_DMA_Init+0xe8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <MX_DMA_Init+0xe8>)
 800247c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <MX_DMA_Init+0xe8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	200c      	movs	r0, #12
 8002494:	f002 ffd7 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002498:	200c      	movs	r0, #12
 800249a:	f002 fff0 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	200d      	movs	r0, #13
 80024a4:	f002 ffcf 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80024a8:	200d      	movs	r0, #13
 80024aa:	f002 ffe8 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2105      	movs	r1, #5
 80024b2:	200f      	movs	r0, #15
 80024b4:	f002 ffc7 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80024b8:	200f      	movs	r0, #15
 80024ba:	f002 ffe0 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2105      	movs	r1, #5
 80024c2:	202f      	movs	r0, #47	@ 0x2f
 80024c4:	f002 ffbf 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80024c8:	202f      	movs	r0, #47	@ 0x2f
 80024ca:	f002 ffd8 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2105      	movs	r1, #5
 80024d2:	2039      	movs	r0, #57	@ 0x39
 80024d4:	f002 ffb7 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024d8:	2039      	movs	r0, #57	@ 0x39
 80024da:	f002 ffd0 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2105      	movs	r1, #5
 80024e2:	203a      	movs	r0, #58	@ 0x3a
 80024e4:	f002 ffaf 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024e8:	203a      	movs	r0, #58	@ 0x3a
 80024ea:	f002 ffc8 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2105      	movs	r1, #5
 80024f2:	203b      	movs	r0, #59	@ 0x3b
 80024f4:	f002 ffa7 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80024f8:	203b      	movs	r0, #59	@ 0x3b
 80024fa:	f002 ffc0 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2105      	movs	r1, #5
 8002502:	2044      	movs	r0, #68	@ 0x44
 8002504:	f002 ff9f 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002508:	2044      	movs	r0, #68	@ 0x44
 800250a:	f002 ffb8 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2105      	movs	r1, #5
 8002512:	2045      	movs	r0, #69	@ 0x45
 8002514:	f002 ff97 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002518:	2045      	movs	r0, #69	@ 0x45
 800251a:	f002 ffb0 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2105      	movs	r1, #5
 8002522:	2046      	movs	r0, #70	@ 0x46
 8002524:	f002 ff8f 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002528:	2046      	movs	r0, #70	@ 0x46
 800252a:	f002 ffa8 	bl	800547e <HAL_NVIC_EnableIRQ>

}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	@ 0x38
 8002540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	4b77      	ldr	r3, [pc, #476]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a76      	ldr	r2, [pc, #472]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b74      	ldr	r3, [pc, #464]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a6f      	ldr	r2, [pc, #444]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b6d      	ldr	r3, [pc, #436]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	4b69      	ldr	r3, [pc, #420]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a68      	ldr	r2, [pc, #416]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	4b62      	ldr	r3, [pc, #392]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a61      	ldr	r2, [pc, #388]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b58      	ldr	r3, [pc, #352]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a53      	ldr	r2, [pc, #332]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b51      	ldr	r3, [pc, #324]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a4c      	ldr	r2, [pc, #304]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b46      	ldr	r3, [pc, #280]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a45      	ldr	r2, [pc, #276]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002620:	f043 0320 	orr.w	r3, r3, #32
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a3e      	ldr	r2, [pc, #248]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 800263c:	f043 0310 	orr.w	r3, r3, #16
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <MX_GPIO_Init+0x1f8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	2140      	movs	r1, #64	@ 0x40
 8002652:	4839      	ldr	r0, [pc, #228]	@ (8002738 <MX_GPIO_Init+0x1fc>)
 8002654:	f003 fce4 	bl	8006020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	2110      	movs	r1, #16
 800265c:	4837      	ldr	r0, [pc, #220]	@ (800273c <MX_GPIO_Init+0x200>)
 800265e:	f003 fcdf 	bl	8006020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	2101      	movs	r1, #1
 8002666:	4836      	ldr	r0, [pc, #216]	@ (8002740 <MX_GPIO_Init+0x204>)
 8002668:	f003 fcda 	bl	8006020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800266c:	2340      	movs	r3, #64	@ 0x40
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	482d      	ldr	r0, [pc, #180]	@ (8002738 <MX_GPIO_Init+0x1fc>)
 8002684:	f003 fb18 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002688:	2308      	movs	r3, #8
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800268c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269a:	4619      	mov	r1, r3
 800269c:	4826      	ldr	r0, [pc, #152]	@ (8002738 <MX_GPIO_Init+0x1fc>)
 800269e:	f003 fb0b 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	4619      	mov	r1, r3
 80026b4:	4821      	ldr	r0, [pc, #132]	@ (800273c <MX_GPIO_Init+0x200>)
 80026b6:	f003 faff 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026ba:	2310      	movs	r3, #16
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	481a      	ldr	r0, [pc, #104]	@ (800273c <MX_GPIO_Init+0x200>)
 80026d2:	f003 faf1 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80026d6:	2330      	movs	r3, #48	@ 0x30
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4816      	ldr	r0, [pc, #88]	@ (8002744 <MX_GPIO_Init+0x208>)
 80026ec:	f003 fae4 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f0:	2301      	movs	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002704:	4619      	mov	r1, r3
 8002706:	480e      	ldr	r0, [pc, #56]	@ (8002740 <MX_GPIO_Init+0x204>)
 8002708:	f003 fad6 	bl	8005cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2105      	movs	r1, #5
 8002710:	2009      	movs	r0, #9
 8002712:	f002 fe98 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002716:	2009      	movs	r0, #9
 8002718:	f002 feb1 	bl	800547e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2105      	movs	r1, #5
 8002720:	200a      	movs	r0, #10
 8002722:	f002 fe90 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002726:	200a      	movs	r0, #10
 8002728:	f002 fea9 	bl	800547e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272c:	bf00      	nop
 800272e:	3738      	adds	r7, #56	@ 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	40021800 	.word	0x40021800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800

08002748 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8002750:	f7fd ff6c 	bl	800062c <BMI088_accel_init>
		// usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8002754:	f7fe f822 	bl	800079c <BMI088_gyro_init>
		// usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
	}
	if (ist8310_init()) {
 8002758:	f7ff f836 	bl	80017c8 <ist8310_init>
		//set_motor_voltage(5, 4000);

		// HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);

		// PWMOn(LED,1);
		PWMOutput(LED, 1, 500);
 800275c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002760:	2101      	movs	r1, #1
 8002762:	2001      	movs	r0, #1
 8002764:	f000 fc36 	bl	8002fd4 <PWMOutput>
		PWMInitialize(LED, FR, 1, 0.9);
 8002768:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002794 <TaskMain+0x4c>
 800276c:	2201      	movs	r2, #1
 800276e:	2101      	movs	r1, #1
 8002770:	2001      	movs	r0, #1
 8002772:	f000 fb17 	bl	8002da4 <PWMInitialize>
		// PWMTimerStarter();
		// usart_printf("on\r\n");
		osDelay(500);
 8002776:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800277a:	f007 fe39 	bl	800a3f0 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
		//set_motor_voltage(5, -4000);
		// HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
		PWMOff(LED, 1);
 800277e:	2101      	movs	r1, #1
 8002780:	2001      	movs	r0, #1
 8002782:	f000 fc57 	bl	8003034 <PWMOff>
		// PWMTimerStarter();
		// usart_printf("off\r\n");
		osDelay(500);
 8002786:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800278a:	f007 fe31 	bl	800a3f0 <osDelay>
		PWMOutput(LED, 1, 500);
 800278e:	bf00      	nop
 8002790:	e7e4      	b.n	800275c <TaskMain+0x14>
 8002792:	bf00      	nop
 8002794:	3f666666 	.word	0x3f666666

08002798 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	/* USER CODE BEGIN TaskChassis */

	for(;;) {

		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)) {
 80027a0:	2101      	movs	r1, #1
 80027a2:	4817      	ldr	r0, [pc, #92]	@ (8002800 <TaskChassis+0x68>)
 80027a4:	f003 fc24 	bl	8005ff0 <HAL_GPIO_ReadPin>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d011      	beq.n	80027d2 <TaskChassis+0x3a>
			setM3508RPM(1, 0, chassisPreset);
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <TaskChassis+0x6c>)
 80027b0:	edd3 6a00 	vldr	s13, [r3]
 80027b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027bc:	eeb0 0a66 	vmov.f32	s0, s13
 80027c0:	eef0 0a47 	vmov.f32	s1, s14
 80027c4:	eeb0 1a67 	vmov.f32	s2, s15
 80027c8:	2100      	movs	r1, #0
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe fc2e 	bl	800102c <setM3508RPM>
 80027d0:	e010      	b.n	80027f4 <TaskChassis+0x5c>
		} else {
			setM3508RPM(1, -5000, chassisPreset);
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <TaskChassis+0x6c>)
 80027d4:	edd3 6a00 	vldr	s13, [r3]
 80027d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80027dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eef0 0a47 	vmov.f32	s1, s14
 80027e8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ec:	4906      	ldr	r1, [pc, #24]	@ (8002808 <TaskChassis+0x70>)
 80027ee:	2001      	movs	r0, #1
 80027f0:	f7fe fc1c 	bl	800102c <setM3508RPM>
		}


		PWMTimerStarter();
 80027f4:	f000 fc4a 	bl	800308c <PWMTimerStarter>
		osDelay(5);
 80027f8:	2005      	movs	r0, #5
 80027fa:	f007 fdf9 	bl	800a3f0 <osDelay>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)) {
 80027fe:	e7cf      	b.n	80027a0 <TaskChassis+0x8>
 8002800:	40020000 	.word	0x40020000
 8002804:	20000040 	.word	0x20000040
 8002808:	ffffec78 	.word	0xffffec78

0800280c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f007 fdeb 	bl	800a3f0 <osDelay>
 800281a:	e7fb      	b.n	8002814 <TaskTurret+0x8>

0800281c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
}
 8002822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <Error_Handler+0x8>

08002828 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6178      	str	r0, [r7, #20]
 8002830:	460b      	mov	r3, r1
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	ed87 0a02 	vstr	s0, [r7, #8]
 8002838:	edc7 0a01 	vstr	s1, [r7, #4]
 800283c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d042      	beq.n	80028ca <PID_init+0xa2>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03f      	beq.n	80028ca <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	7cfa      	ldrb	r2, [r7, #19]
 800284e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3304      	adds	r3, #4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3308      	adds	r3, #8
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028c8:	e000      	b.n	80028cc <PID_init+0xa4>
        return;
 80028ca:	bf00      	nop
}
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	ed87 0a02 	vstr	s0, [r7, #8]
 80028e2:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <PID_calc+0x1c>
    {
        return 0.0f;
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e130      	b.n	8002b54 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800290e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002912:	edd7 7a02 	vldr	s15, [r7, #8]
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f040 8095 	bne.w	8002a54 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	edd3 6a02 	vldr	s13, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800297c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	ed93 7a03 	vldr	s14, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd04      	ble.n	80029bc <PID_calc+0xe6>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ba:	e014      	b.n	80029e6 <PID_calc+0x110>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029c8:	eef1 7a67 	vneg.f32	s15, s15
 80029cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d4:	d507      	bpl.n	80029e6 <PID_calc+0x110>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80029dc:	eef1 7a67 	vneg.f32	s15, s15
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80029f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80029fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	dd04      	ble.n	8002a26 <PID_calc+0x150>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]
 8002a24:	e094      	b.n	8002b50 <PID_calc+0x27a>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a32:	eef1 7a67 	vneg.f32	s15, s15
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	f140 8087 	bpl.w	8002b50 <PID_calc+0x27a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a48:	eef1 7a67 	vneg.f32	s15, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edc3 7a08 	vstr	s15, [r3, #32]
 8002a52:	e07d      	b.n	8002b50 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d179      	bne.n	8002b50 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002a6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002aae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002aee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	dd04      	ble.n	8002b26 <PID_calc+0x250>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e014      	b.n	8002b50 <PID_calc+0x27a>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b32:	eef1 7a67 	vneg.f32	s15, s15
 8002b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d507      	bpl.n	8002b50 <PID_calc+0x27a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b46:	eef1 7a67 	vneg.f32	s15, s15
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
}
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <PWMInit+0x58>)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8002b7c:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <PWMInit+0x5c>)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8002b82:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <PWMInit+0x60>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8002b88:	4a10      	ldr	r2, [pc, #64]	@ (8002bcc <PWMInit+0x64>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <PWMInit+0x58>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f005 fa7e 	bl	8008094 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <PWMInit+0x5c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 fa79 	bl	8008094 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <PWMInit+0x60>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 fa74 	bl	8008094 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <PWMInit+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f005 fa6f 	bl	8008094 <HAL_TIM_Base_Start>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000c90 	.word	0x20000c90
 8002bc4:	20000c94 	.word	0x20000c94
 8002bc8:	20000c98 	.word	0x20000c98
 8002bcc:	20000c9c 	.word	0x20000c9c

08002bd0 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d02c      	beq.n	8002c40 <calculateOutputPeriodToGetFrequency+0x70>
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	dc3d      	bgt.n	8002c66 <calculateOutputPeriodToGetFrequency+0x96>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <calculateOutputPeriodToGetFrequency+0x24>
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d013      	beq.n	8002c1a <calculateOutputPeriodToGetFrequency+0x4a>
 8002bf2:	e038      	b.n	8002c66 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002c74 <calculateOutputPeriodToGetFrequency+0xa4>
 8002c02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c12:	ee17 3a90 	vmov	r3, s15
 8002c16:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8002c18:	e025      	b.n	8002c66 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c78 <calculateOutputPeriodToGetFrequency+0xa8>
 8002c28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c38:	ee17 3a90 	vmov	r3, s15
 8002c3c:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8002c3e:	e012      	b.n	8002c66 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c78 <calculateOutputPeriodToGetFrequency+0xa8>
 8002c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5e:	ee17 3a90 	vmov	r3, s15
 8002c62:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8002c64:	bf00      	nop
	}

	return finalVal;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	360637bd 	.word	0x360637bd
 8002c78:	358637bd 	.word	0x358637bd

08002c7c <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c92:	edd7 7a00 	vldr	s15, [r7]
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9e:	ee17 3a90 	vmov	r3, s15
 8002ca2:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d902      	bls.n	8002cb2 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e004      	b.n	8002cbc <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8002cbc:	68fb      	ldr	r3, [r7, #12]

}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	ed87 0a00 	vstr	s0, [r7]
 8002cd8:	71fb      	strb	r3, [r7, #7]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	71bb      	strb	r3, [r7, #6]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d03c      	beq.n	8002d66 <calculateOutputPeriodValue+0x9a>
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	dc51      	bgt.n	8002d94 <calculateOutputPeriodValue+0xc8>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <calculateOutputPeriodValue+0x2e>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d01b      	beq.n	8002d30 <calculateOutputPeriodValue+0x64>
 8002cf8:	e04c      	b.n	8002d94 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8002d00:	edd7 7a00 	vldr	s15, [r7]
 8002d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d08:	ee17 2a90 	vmov	r2, s15
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8002d14:	e03e      	b.n	8002d94 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8002d16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	4a20      	ldr	r2, [pc, #128]	@ (8002da0 <calculateOutputPeriodValue+0xd4>)
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	ed97 0a00 	vldr	s0, [r7]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ffa8 	bl	8002c7c <safeOutputPeriodValueCalculator>
 8002d2c:	60f8      	str	r0, [r7, #12]
			break;
 8002d2e:	e031      	b.n	8002d94 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8002d36:	edd7 7a00 	vldr	s15, [r7]
 8002d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3e:	ee17 2a90 	vmov	r2, s15
 8002d42:	2301      	movs	r3, #1
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 8002d4a:	e023      	b.n	8002d94 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8002d4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d50:	3306      	adds	r3, #6
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <calculateOutputPeriodValue+0xd4>)
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	ed97 0a00 	vldr	s0, [r7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff8d 	bl	8002c7c <safeOutputPeriodValueCalculator>
 8002d62:	60f8      	str	r0, [r7, #12]
			break;
 8002d64:	e016      	b.n	8002d94 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d74:	ee17 2a90 	vmov	r2, s15
 8002d78:	2301      	movs	r3, #1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8002d80:	e007      	b.n	8002d92 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <calculateOutputPeriodValue+0xd4>)
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	ed97 0a00 	vldr	s0, [r7]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff76 	bl	8002c7c <safeOutputPeriodValueCalculator>
 8002d90:	60f8      	str	r0, [r7, #12]
			break;
 8002d92:	bf00      	nop
		default:
	}
	return returnVal;
 8002d94:	68fb      	ldr	r3, [r7, #12]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000cd8 	.word	0x20000cd8

08002da4 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	ed87 0a00 	vstr	s0, [r7]
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	460b      	mov	r3, r1
 8002db4:	71bb      	strb	r3, [r7, #6]
 8002db6:	4613      	mov	r3, r2
 8002db8:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8002dba:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8002dbe:	79b9      	ldrb	r1, [r7, #6]
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	ed97 0a00 	vldr	s0, [r7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff80 	bl	8002ccc <calculateOutputPeriodValue>
 8002dcc:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d076      	beq.n	8002ec2 <PWMInitialize+0x11e>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	dc7e      	bgt.n	8002ed6 <PWMInitialize+0x132>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <PWMInitialize+0x3e>
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d04a      	beq.n	8002e76 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8002de0:	e079      	b.n	8002ed6 <PWMInitialize+0x132>
		switch (position) {
 8002de2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d83b      	bhi.n	8002e64 <PWMInitialize+0xc0>
 8002dec:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <PWMInitialize+0x50>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e11 	.word	0x08002e11
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e35 	.word	0x08002e35
 8002e04:	08002e41 	.word	0x08002e41
 8002e08:	08002e4d 	.word	0x08002e4d
 8002e0c:	08002e59 	.word	0x08002e59
			(*tim1).Instance->CCR1=value;
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <PWMInitialize+0x13c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002e1a:	e024      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8002e1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ee0 <PWMInitialize+0x13c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002e26:	e01e      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <PWMInitialize+0x13c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002e32:	e018      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8002e34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <PWMInitialize+0x13c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8002e3e:	e012      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <PWMInitialize+0x140>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002e4a:	e00c      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <PWMInitialize+0x140>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002e56:	e006      	b.n	8002e66 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8002e58:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <PWMInitialize+0x140>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002e62:	e000      	b.n	8002e66 <PWMInitialize+0xc2>
			break;
 8002e64:	bf00      	nop
		subPeriod[position-1] = value;
 8002e66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	491e      	ldr	r1, [pc, #120]	@ (8002ee8 <PWMInitialize+0x144>)
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8002e74:	e02e      	b.n	8002ed4 <PWMInitialize+0x130>
		switch (position) {
 8002e76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d012      	beq.n	8002ea4 <PWMInitialize+0x100>
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	dc16      	bgt.n	8002eb0 <PWMInitialize+0x10c>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d002      	beq.n	8002e8c <PWMInitialize+0xe8>
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d006      	beq.n	8002e98 <PWMInitialize+0xf4>
			break;
 8002e8a:	e011      	b.n	8002eb0 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <PWMInitialize+0x148>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002e96:	e00c      	b.n	8002eb2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <PWMInitialize+0x148>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002ea2:	e006      	b.n	8002eb2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <PWMInitialize+0x148>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8002eae:	e000      	b.n	8002eb2 <PWMInitialize+0x10e>
			break;
 8002eb0:	bf00      	nop
		subPeriod[position+6] = value;
 8002eb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002eb6:	3306      	adds	r3, #6
 8002eb8:	490b      	ldr	r1, [pc, #44]	@ (8002ee8 <PWMInitialize+0x144>)
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8002ec0:	e008      	b.n	8002ed4 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <PWMInitialize+0x14c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8002ecc:	4a06      	ldr	r2, [pc, #24]	@ (8002ee8 <PWMInitialize+0x144>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8002ed2:	bf00      	nop
	return;
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
}
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000c90 	.word	0x20000c90
 8002ee4:	20000c9c 	.word	0x20000c9c
 8002ee8:	20000cac 	.word	0x20000cac
 8002eec:	20000c98 	.word	0x20000c98
 8002ef0:	20000c94 	.word	0x20000c94

08002ef4 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	dc0c      	bgt.n	8002f22 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <MotorPositionForInitializingPeriod+0x54>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <MotorPositionForInitializingPeriod+0x58>)
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8002f20:	e00b      	b.n	8002f3a <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <MotorPositionForInitializingPeriod+0x5c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <MotorPositionForInitializingPeriod+0x58>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000c90 	.word	0x20000c90
 8002f4c:	20000cd8 	.word	0x20000cd8
 8002f50:	20000c9c 	.word	0x20000c9c

08002f54 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	603a      	str	r2, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	460b      	mov	r3, r1
 8002f62:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe31 	bl	8002bd0 <calculateOutputPeriodToGetFrequency>
 8002f6e:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d01a      	beq.n	8002fac <initializePeriod+0x58>
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	dc22      	bgt.n	8002fc0 <initializePeriod+0x6c>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <initializePeriod+0x30>
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8002f82:	e01d      	b.n	8002fc0 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8002f84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ffb2 	bl	8002ef4 <MotorPositionForInitializingPeriod>
		break;
 8002f90:	e015      	b.n	8002fbe <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <initializePeriod+0x74>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8002f9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002fa0:	3306      	adds	r3, #6
 8002fa2:	490a      	ldr	r1, [pc, #40]	@ (8002fcc <initializePeriod+0x78>)
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8002faa:	e008      	b.n	8002fbe <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <initializePeriod+0x7c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8002fb6:	4a05      	ldr	r2, [pc, #20]	@ (8002fcc <initializePeriod+0x78>)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8002fbc:	bf00      	nop
	return;
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
}
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000c98 	.word	0x20000c98
 8002fcc:	20000cd8 	.word	0x20000cd8
 8002fd0:	20000c94 	.word	0x20000c94

08002fd4 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	603a      	str	r2, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8002fe4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ffb1 	bl	8002f54 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d014      	beq.n	8003022 <PWMOutput+0x4e>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	dc16      	bgt.n	800302a <PWMOutput+0x56>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <PWMOutput+0x32>
 8003000:	2b01      	cmp	r3, #1
 8003002:	d007      	beq.n	8003014 <PWMOutput+0x40>
 8003004:	e011      	b.n	800302a <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8003006:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800300a:	3b01      	subs	r3, #1
 800300c:	4a08      	ldr	r2, [pc, #32]	@ (8003030 <PWMOutput+0x5c>)
 800300e:	2101      	movs	r1, #1
 8003010:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8003012:	e00a      	b.n	800302a <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8003014:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003018:	3306      	adds	r3, #6
 800301a:	4a05      	ldr	r2, [pc, #20]	@ (8003030 <PWMOutput+0x5c>)
 800301c:	2101      	movs	r1, #1
 800301e:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8003020:	e003      	b.n	800302a <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8003022:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <PWMOutput+0x5c>)
 8003024:	2201      	movs	r2, #1
 8003026:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8003028:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000ca0 	.word	0x20000ca0

08003034 <PWMOff>:
		// usart_printf("Buzzer %d\r\n", Position);
		return;
	}
}

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	460a      	mov	r2, r1
 800303e:	71fb      	strb	r3, [r7, #7]
 8003040:	4613      	mov	r3, r2
 8003042:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d014      	beq.n	8003074 <PWMOff+0x40>
 800304a:	2b02      	cmp	r3, #2
 800304c:	dc16      	bgt.n	800307c <PWMOff+0x48>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <PWMOff+0x24>
 8003052:	2b01      	cmp	r3, #1
 8003054:	d007      	beq.n	8003066 <PWMOff+0x32>
 8003056:	e011      	b.n	800307c <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8003058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800305c:	3b01      	subs	r3, #1
 800305e:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <PWMOff+0x54>)
 8003060:	2100      	movs	r1, #0
 8003062:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8003064:	e00a      	b.n	800307c <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 8003066:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800306a:	3306      	adds	r3, #6
 800306c:	4a06      	ldr	r2, [pc, #24]	@ (8003088 <PWMOff+0x54>)
 800306e:	2100      	movs	r1, #0
 8003070:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8003072:	e003      	b.n	800307c <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <PWMOff+0x54>)
 8003076:	2200      	movs	r2, #0
 8003078:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800307a:	bf00      	nop
	}
}
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000ca0 	.word	0x20000ca0

0800308c <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	e0f1      	b.n	800327c <PWMTimerStarter+0x1f0>
		switch (i) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b0a      	cmp	r3, #10
 800309c:	f200 80eb 	bhi.w	8003276 <PWMTimerStarter+0x1ea>
 80030a0:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <PWMTimerStarter+0x1c>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	080030fb 	.word	0x080030fb
 80030b0:	08003121 	.word	0x08003121
 80030b4:	08003147 	.word	0x08003147
 80030b8:	0800316d 	.word	0x0800316d
 80030bc:	08003193 	.word	0x08003193
 80030c0:	080031b9 	.word	0x080031b9
 80030c4:	080031df 	.word	0x080031df
 80030c8:	08003205 	.word	0x08003205
 80030cc:	0800322b 	.word	0x0800322b
 80030d0:	08003251 	.word	0x08003251
		case 0:
			if (whichPWMisOn[0] == 1) {
 80030d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003290 <PWMTimerStarter+0x204>)
 80030d6:	f993 3000 	ldrsb.w	r3, [r3]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d106      	bne.n	80030ec <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 80030de:	4b6d      	ldr	r3, [pc, #436]	@ (8003294 <PWMTimerStarter+0x208>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 f88d 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 80030ea:	e0c4      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 80030ec:	4b69      	ldr	r3, [pc, #420]	@ (8003294 <PWMTimerStarter+0x208>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 f94e 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 80030f8:	e0bd      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 80030fa:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <PWMTimerStarter+0x204>)
 80030fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003104:	4b63      	ldr	r3, [pc, #396]	@ (8003294 <PWMTimerStarter+0x208>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2104      	movs	r1, #4
 800310a:	4618      	mov	r0, r3
 800310c:	f005 f87a 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8003110:	e0b1      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8003112:	4b60      	ldr	r3, [pc, #384]	@ (8003294 <PWMTimerStarter+0x208>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2104      	movs	r1, #4
 8003118:	4618      	mov	r0, r3
 800311a:	f005 f93b 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 800311e:	e0aa      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8003120:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <PWMTimerStarter+0x204>)
 8003122:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 800312a:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <PWMTimerStarter+0x208>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2108      	movs	r1, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f005 f867 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003136:	e09e      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003138:	4b56      	ldr	r3, [pc, #344]	@ (8003294 <PWMTimerStarter+0x208>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2108      	movs	r1, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f928 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 8003144:	e097      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8003146:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <PWMTimerStarter+0x204>)
 8003148:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8003150:	4b50      	ldr	r3, [pc, #320]	@ (8003294 <PWMTimerStarter+0x208>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	210c      	movs	r1, #12
 8003156:	4618      	mov	r0, r3
 8003158:	f005 f854 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 800315c:	e08b      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 800315e:	4b4d      	ldr	r3, [pc, #308]	@ (8003294 <PWMTimerStarter+0x208>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	210c      	movs	r1, #12
 8003164:	4618      	mov	r0, r3
 8003166:	f005 f915 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 800316a:	e084      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 800316c:	4b48      	ldr	r3, [pc, #288]	@ (8003290 <PWMTimerStarter+0x204>)
 800316e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8003176:	4b48      	ldr	r3, [pc, #288]	@ (8003298 <PWMTimerStarter+0x20c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f005 f841 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8003182:	e078      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8003184:	4b44      	ldr	r3, [pc, #272]	@ (8003298 <PWMTimerStarter+0x20c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f005 f902 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 8003190:	e071      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <PWMTimerStarter+0x204>)
 8003194:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 800319c:	4b3e      	ldr	r3, [pc, #248]	@ (8003298 <PWMTimerStarter+0x20c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2104      	movs	r1, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f005 f82e 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80031a8:	e065      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80031aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003298 <PWMTimerStarter+0x20c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2104      	movs	r1, #4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 f8ef 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 80031b6:	e05e      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 80031b8:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <PWMTimerStarter+0x204>)
 80031ba:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 80031c2:	4b35      	ldr	r3, [pc, #212]	@ (8003298 <PWMTimerStarter+0x20c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2108      	movs	r1, #8
 80031c8:	4618      	mov	r0, r3
 80031ca:	f005 f81b 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 80031ce:	e052      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 80031d0:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <PWMTimerStarter+0x20c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2108      	movs	r1, #8
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 f8dc 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 80031dc:	e04b      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 80031de:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <PWMTimerStarter+0x204>)
 80031e0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 80031e8:	4b2c      	ldr	r3, [pc, #176]	@ (800329c <PWMTimerStarter+0x210>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f005 f808 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 80031f4:	e03f      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 80031f6:	4b29      	ldr	r3, [pc, #164]	@ (800329c <PWMTimerStarter+0x210>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f005 f8c9 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 8003202:	e038      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003204:	4b22      	ldr	r3, [pc, #136]	@ (8003290 <PWMTimerStarter+0x204>)
 8003206:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d106      	bne.n	800321c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800320e:	4b23      	ldr	r3, [pc, #140]	@ (800329c <PWMTimerStarter+0x210>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2104      	movs	r1, #4
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fff5 	bl	8008204 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800321a:	e02c      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800321c:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <PWMTimerStarter+0x210>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2104      	movs	r1, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f005 f8b6 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 8003228:	e025      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800322a:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <PWMTimerStarter+0x204>)
 800322c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <PWMTimerStarter+0x210>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2108      	movs	r1, #8
 800323a:	4618      	mov	r0, r3
 800323c:	f004 ffe2 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003240:	e019      	b.n	8003276 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003242:	4b16      	ldr	r3, [pc, #88]	@ (800329c <PWMTimerStarter+0x210>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2108      	movs	r1, #8
 8003248:	4618      	mov	r0, r3
 800324a:	f005 f8a3 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 800324e:	e012      	b.n	8003276 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <PWMTimerStarter+0x204>)
 8003252:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d106      	bne.n	8003268 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 800325a:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <PWMTimerStarter+0x214>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2108      	movs	r1, #8
 8003260:	4618      	mov	r0, r3
 8003262:	f004 ffcf 	bl	8008204 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003266:	e005      	b.n	8003274 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <PWMTimerStarter+0x214>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2108      	movs	r1, #8
 800326e:	4618      	mov	r0, r3
 8003270:	f005 f890 	bl	8008394 <HAL_TIM_PWM_Stop>
			break;
 8003274:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3301      	adds	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b0a      	cmp	r3, #10
 8003280:	f77f af0a 	ble.w	8003098 <PWMTimerStarter+0xc>
		}
	}
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000ca0 	.word	0x20000ca0
 8003294:	20000c90 	.word	0x20000c90
 8003298:	20000c9c 	.word	0x20000c9c
 800329c:	20000c98 	.word	0x20000c98
 80032a0:	20000c94 	.word	0x20000c94

080032a4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80032a8:	2224      	movs	r2, #36	@ 0x24
 80032aa:	4903      	ldr	r1, [pc, #12]	@ (80032b8 <remote_control_init+0x14>)
 80032ac:	4803      	ldr	r0, [pc, #12]	@ (80032bc <remote_control_init+0x18>)
 80032ae:	f7fe f991 	bl	80015d4 <RC_init>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000d40 	.word	0x20000d40
 80032bc:	20000d1c 	.word	0x20000d1c

080032c0 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80032c4:	4b02      	ldr	r3, [pc, #8]	@ (80032d0 <get_remote_control_point+0x10>)
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	20000d04 	.word	0x20000d04

080032d4 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80032da:	4b44      	ldr	r3, [pc, #272]	@ (80033ec <USART3_IRQHandler+0x118>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <USART3_IRQHandler+0x118>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <USART3_IRQHandler+0x118>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 80032fe:	e070      	b.n	80033e2 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003300:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <USART3_IRQHandler+0x11c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d06a      	beq.n	80033e2 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4b36      	ldr	r3, [pc, #216]	@ (80033ec <USART3_IRQHandler+0x118>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <USART3_IRQHandler+0x118>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12d      	bne.n	800338c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003330:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003340:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <USART3_IRQHandler+0x124>)
 8003350:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003352:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800335a:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <USART3_IRQHandler+0x120>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003368:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <USART3_IRQHandler+0x120>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800337a:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <USART3_IRQHandler+0x124>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	2b12      	cmp	r3, #18
 8003380:	d12f      	bne.n	80033e2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003382:	491e      	ldr	r1, [pc, #120]	@ (80033fc <USART3_IRQHandler+0x128>)
 8003384:	481e      	ldr	r0, [pc, #120]	@ (8003400 <USART3_IRQHandler+0x12c>)
 8003386:	f000 f841 	bl	800340c <sbus_to_rc>
}
 800338a:	e02a      	b.n	80033e2 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800338c:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <USART3_IRQHandler+0x120>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b18      	ldr	r3, [pc, #96]	@ (80033f4 <USART3_IRQHandler+0x120>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 800339c:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <USART3_IRQHandler+0x120>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <USART3_IRQHandler+0x124>)
 80033ac:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80033ae:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <USART3_IRQHandler+0x120>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2224      	movs	r2, #36	@ 0x24
 80033b4:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80033b6:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <USART3_IRQHandler+0x130>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <USART3_IRQHandler+0x130>)
 80033bc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80033c0:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <USART3_IRQHandler+0x120>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <USART3_IRQHandler+0x120>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80033d2:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <USART3_IRQHandler+0x124>)
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d103      	bne.n	80033e2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80033da:	4908      	ldr	r1, [pc, #32]	@ (80033fc <USART3_IRQHandler+0x128>)
 80033dc:	480a      	ldr	r0, [pc, #40]	@ (8003408 <USART3_IRQHandler+0x134>)
 80033de:	f000 f815 	bl	800340c <sbus_to_rc>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000a0c 	.word	0x20000a0c
 80033f0:	40004800 	.word	0x40004800
 80033f4:	20000b5c 	.word	0x20000b5c
 80033f8:	20000d64 	.word	0x20000d64
 80033fc:	20000d04 	.word	0x20000d04
 8003400:	20000d1c 	.word	0x20000d1c
 8003404:	40026028 	.word	0x40026028
 8003408:	20000d40 	.word	0x20000d40

0800340c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8101 	beq.w	8003620 <sbus_to_rc+0x214>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80fd 	beq.w	8003620 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	b21a      	sxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	b21b      	sxth	r3, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	b21b      	sxth	r3, r3
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	b21a      	sxth	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3301      	adds	r3, #1
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b21a      	sxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3302      	adds	r3, #2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	b21b      	sxth	r3, r3
 8003462:	4313      	orrs	r3, r2
 8003464:	b21b      	sxth	r3, r3
 8003466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346a:	b21a      	sxth	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3302      	adds	r3, #2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	b2db      	uxtb	r3, r3
 800347c:	b21a      	sxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3303      	adds	r3, #3
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	b21b      	sxth	r3, r3
 800348a:	4313      	orrs	r3, r2
 800348c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003498:	b21b      	sxth	r3, r3
 800349a:	4313      	orrs	r3, r2
 800349c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800349e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	b21a      	sxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3305      	adds	r3, #5
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3305      	adds	r3, #5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3305      	adds	r3, #5
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	109b      	asrs	r3, r3, #2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3306      	adds	r3, #6
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	b21a      	sxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3307      	adds	r3, #7
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	b21b      	sxth	r3, r3
 8003516:	4313      	orrs	r3, r2
 8003518:	b21a      	sxth	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3308      	adds	r3, #8
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	b21a      	sxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3309      	adds	r3, #9
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	b21b      	sxth	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b21a      	sxth	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	330a      	adds	r3, #10
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	b21a      	sxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	330b      	adds	r3, #11
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	b21b      	sxth	r3, r3
 8003552:	4313      	orrs	r3, r2
 8003554:	b21a      	sxth	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	330c      	adds	r3, #12
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	330d      	adds	r3, #13
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	330e      	adds	r3, #14
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	b21a      	sxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	330f      	adds	r3, #15
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	b21b      	sxth	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b21b      	sxth	r3, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3310      	adds	r3, #16
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	b21a      	sxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3311      	adds	r3, #17
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b21a      	sxth	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003600:	b29b      	uxth	r3, r3
 8003602:	b21a      	sxth	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800360e:	b21b      	sxth	r3, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003616:	b29b      	uxth	r3, r3
 8003618:	b21a      	sxth	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	811a      	strh	r2, [r3, #8]
 800361e:	e000      	b.n	8003622 <sbus_to_rc+0x216>
        return;
 8003620:	bf00      	nop
}
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_MspInit+0x54>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	4a11      	ldr	r2, [pc, #68]	@ (8003680 <HAL_MspInit+0x54>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003640:	6453      	str	r3, [r2, #68]	@ 0x44
 8003642:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <HAL_MspInit+0x54>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_MspInit+0x54>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <HAL_MspInit+0x54>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	@ 0x40
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_MspInit+0x54>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	210f      	movs	r1, #15
 800366e:	f06f 0001 	mvn.w	r0, #1
 8003672:	f001 fee8 	bl	8005446 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	@ 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4a      	ldr	r2, [pc, #296]	@ (80037cc <HAL_CAN_MspInit+0x148>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d13d      	bne.n	8003722 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80036a6:	4b4a      	ldr	r3, [pc, #296]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4a48      	ldr	r2, [pc, #288]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 80036ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80036b0:	4b47      	ldr	r3, [pc, #284]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10d      	bne.n	80036d4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	4a44      	ldr	r2, [pc, #272]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c8:	4b42      	ldr	r3, [pc, #264]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	4a3d      	ldr	r2, [pc, #244]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036f0:	2303      	movs	r3, #3
 80036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003700:	2309      	movs	r3, #9
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	4619      	mov	r1, r3
 800370a:	4833      	ldr	r0, [pc, #204]	@ (80037d8 <HAL_CAN_MspInit+0x154>)
 800370c:	f002 fad4 	bl	8005cb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	2105      	movs	r1, #5
 8003714:	2014      	movs	r0, #20
 8003716:	f001 fe96 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800371a:	2014      	movs	r0, #20
 800371c:	f001 feaf 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003720:	e04f      	b.n	80037c2 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_CAN_MspInit+0x158>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d14a      	bne.n	80037c2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	4b28      	ldr	r3, [pc, #160]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	4a27      	ldr	r2, [pc, #156]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800373a:	6413      	str	r3, [r2, #64]	@ 0x40
 800373c:	4b25      	ldr	r3, [pc, #148]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003748:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	4a20      	ldr	r2, [pc, #128]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 8003750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003752:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <HAL_CAN_MspInit+0x14c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10d      	bne.n	8003776 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a15      	ldr	r2, [pc, #84]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <HAL_CAN_MspInit+0x150>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003792:	2360      	movs	r3, #96	@ 0x60
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80037a2:	2309      	movs	r3, #9
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	480c      	ldr	r0, [pc, #48]	@ (80037e0 <HAL_CAN_MspInit+0x15c>)
 80037ae:	f002 fa83 	bl	8005cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2105      	movs	r1, #5
 80037b6:	2040      	movs	r0, #64	@ 0x40
 80037b8:	f001 fe45 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80037bc:	2040      	movs	r0, #64	@ 0x40
 80037be:	f001 fe5e 	bl	800547e <HAL_NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3730      	adds	r7, #48	@ 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40006400 	.word	0x40006400
 80037d0:	20000d68 	.word	0x20000d68
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40006800 	.word	0x40006800
 80037e0:	40020400 	.word	0x40020400

080037e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_I2C_MspInit+0xc4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d14b      	bne.n	800389e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a20      	ldr	r2, [pc, #128]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800383e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003844:	2312      	movs	r3, #18
 8003846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003850:	2304      	movs	r3, #4
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4619      	mov	r1, r3
 800385a:	4815      	ldr	r0, [pc, #84]	@ (80038b0 <HAL_I2C_MspInit+0xcc>)
 800385c:	f002 fa2c 	bl	8005cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003866:	2312      	movs	r3, #18
 8003868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003872:	2304      	movs	r3, #4
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	4619      	mov	r1, r3
 800387c:	480d      	ldr	r0, [pc, #52]	@ (80038b4 <HAL_I2C_MspInit+0xd0>)
 800387e:	f002 fa1b 	bl	8005cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 800388c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_I2C_MspInit+0xc8>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800389e:	bf00      	nop
 80038a0:	3728      	adds	r7, #40	@ 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40005c00 	.word	0x40005c00
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	@ 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a28      	ldr	r2, [pc, #160]	@ (8003978 <HAL_SPI_MspInit+0xc0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d149      	bne.n	800396e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4a26      	ldr	r2, [pc, #152]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 80038e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	4b24      	ldr	r3, [pc, #144]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b20      	ldr	r3, [pc, #128]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	4a1f      	ldr	r2, [pc, #124]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	6313      	str	r3, [r2, #48]	@ 0x30
 8003906:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6313      	str	r3, [r2, #48]	@ 0x30
 8003922:	4b16      	ldr	r3, [pc, #88]	@ (800397c <HAL_SPI_MspInit+0xc4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800392e:	2318      	movs	r3, #24
 8003930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800393e:	2305      	movs	r3, #5
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	4619      	mov	r1, r3
 8003948:	480d      	ldr	r0, [pc, #52]	@ (8003980 <HAL_SPI_MspInit+0xc8>)
 800394a:	f002 f9b5 	bl	8005cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395a:	2303      	movs	r3, #3
 800395c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800395e:	2305      	movs	r3, #5
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	4619      	mov	r1, r3
 8003968:	4806      	ldr	r0, [pc, #24]	@ (8003984 <HAL_SPI_MspInit+0xcc>)
 800396a:	f002 f9a5 	bl	8005cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800396e:	bf00      	nop
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40013000 	.word	0x40013000
 800397c:	40023800 	.word	0x40023800
 8003980:	40020400 	.word	0x40020400
 8003984:	40020000 	.word	0x40020000

08003988 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a83      	ldr	r2, [pc, #524]	@ (8003ba4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d13e      	bne.n	8003a18 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	4b82      	ldr	r3, [pc, #520]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	4a81      	ldr	r2, [pc, #516]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039aa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80039b6:	4b7d      	ldr	r3, [pc, #500]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039b8:	4a7d      	ldr	r2, [pc, #500]	@ (8003bb0 <HAL_TIM_PWM_MspInit+0x228>)
 80039ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80039bc:	4b7b      	ldr	r3, [pc, #492]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039be:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039c2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c4:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ca:	4b78      	ldr	r3, [pc, #480]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039d0:	4b76      	ldr	r3, [pc, #472]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039d8:	4b74      	ldr	r3, [pc, #464]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039de:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039e0:	4b72      	ldr	r3, [pc, #456]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039e6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80039e8:	4b70      	ldr	r3, [pc, #448]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80039ee:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039f4:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80039fa:	486c      	ldr	r0, [pc, #432]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 80039fc:	f001 fd5a 	bl	80054b4 <HAL_DMA_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8003a06:	f7fe ff09 	bl	800281c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a67      	ldr	r2, [pc, #412]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a10:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_TIM_PWM_MspInit+0x224>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a16:	e0c1      	b.n	8003b9c <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM5)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_TIM_PWM_MspInit+0x22c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d16e      	bne.n	8003b00 <HAL_TIM_PWM_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	4b60      	ldr	r3, [pc, #384]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a40:	4a5e      	ldr	r2, [pc, #376]	@ (8003bbc <HAL_TIM_PWM_MspInit+0x234>)
 8003a42:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8003a44:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a46:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003a4a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a52:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a58:	4b57      	ldr	r3, [pc, #348]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a5e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a60:	4b55      	ldr	r3, [pc, #340]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a66:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a68:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a6e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8003a70:	4b51      	ldr	r3, [pc, #324]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003a76:	4b50      	ldr	r3, [pc, #320]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8003a82:	484d      	ldr	r0, [pc, #308]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a84:	f001 fd16 	bl	80054b4 <HAL_DMA_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8003a8e:	f7fe fec5 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a48      	ldr	r2, [pc, #288]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a98:	4a47      	ldr	r2, [pc, #284]	@ (8003bb8 <HAL_TIM_PWM_MspInit+0x230>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8003a9e:	4b48      	ldr	r3, [pc, #288]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003aa0:	4a48      	ldr	r2, [pc, #288]	@ (8003bc4 <HAL_TIM_PWM_MspInit+0x23c>)
 8003aa2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8003aa4:	4b46      	ldr	r3, [pc, #280]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003aa6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003aaa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aac:	4b44      	ldr	r3, [pc, #272]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab2:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003abe:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ac2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ac6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ace:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003adc:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8003ae2:	4837      	ldr	r0, [pc, #220]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003ae4:	f001 fce6 	bl	80054b4 <HAL_DMA_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_TIM_PWM_MspInit+0x16a>
      Error_Handler();
 8003aee:	f7fe fe95 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a32      	ldr	r2, [pc, #200]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af8:	4a31      	ldr	r2, [pc, #196]	@ (8003bc0 <HAL_TIM_PWM_MspInit+0x238>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003afe:	e04d      	b.n	8003b9c <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <HAL_TIM_PWM_MspInit+0x240>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d148      	bne.n	8003b9c <HAL_TIM_PWM_MspInit+0x214>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	4a25      	ldr	r2, [pc, #148]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x220>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <HAL_TIM_PWM_MspInit+0x248>)
 8003b2a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8003b2c:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b32:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003b3e:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b44:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b46:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b4c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b54:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 8003b68:	4818      	ldr	r0, [pc, #96]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b6a:	f001 fca3 	bl	80054b4 <HAL_DMA_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 8003b74:	f7fe fe52 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b7e:	4a13      	ldr	r2, [pc, #76]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8a:	4a10      	ldr	r2, [pc, #64]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0e      	ldr	r2, [pc, #56]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b96:	4a0d      	ldr	r2, [pc, #52]	@ (8003bcc <HAL_TIM_PWM_MspInit+0x244>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b9c:	bf00      	nop
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	200007e4 	.word	0x200007e4
 8003bb0:	40026458 	.word	0x40026458
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	200008a4 	.word	0x200008a4
 8003bbc:	40026040 	.word	0x40026040
 8003bc0:	20000904 	.word	0x20000904
 8003bc4:	40026070 	.word	0x40026070
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	20000964 	.word	0x20000964
 8003bd0:	40026440 	.word	0x40026440

08003bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c94 <HAL_TIM_Base_MspInit+0xc0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d13e      	bne.n	8003c64 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b2b      	ldr	r3, [pc, #172]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf6:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003c02:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8003c06:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003c08:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003c0e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c10:	4b22      	ldr	r3, [pc, #136]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c22:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c2a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c32:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003c34:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c40:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003c46:	4815      	ldr	r0, [pc, #84]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c48:	f001 fc34 	bl	80054b4 <HAL_DMA_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003c52:	f7fe fde3 	bl	800281c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a10      	ldr	r2, [pc, #64]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc8>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003c62:	e012      	b.n	8003c8a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca4 <HAL_TIM_Base_MspInit+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10d      	bne.n	8003c8a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4a08      	ldr	r2, [pc, #32]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_TIM_Base_MspInit+0xc4>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	20000844 	.word	0x20000844
 8003ca0:	400260b8 	.word	0x400260b8
 8003ca4:	40014400 	.word	0x40014400

08003ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08e      	sub	sp, #56	@ 0x38
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e70 <HAL_TIM_MspPostInit+0x1c8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d11f      	bne.n	8003d0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	4b69      	ldr	r3, [pc, #420]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	4a68      	ldr	r2, [pc, #416]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003cd4:	f043 0310 	orr.w	r3, r3, #16
 8003cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cda:	4b66      	ldr	r3, [pc, #408]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003ce6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d00:	4619      	mov	r1, r3
 8003d02:	485d      	ldr	r0, [pc, #372]	@ (8003e78 <HAL_TIM_MspPostInit+0x1d0>)
 8003d04:	f001 ffd8 	bl	8005cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003d08:	e0ae      	b.n	8003e68 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e7c <HAL_TIM_MspPostInit+0x1d4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d11f      	bne.n	8003d54 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	4b56      	ldr	r3, [pc, #344]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	4a55      	ldr	r2, [pc, #340]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d42:	2302      	movs	r3, #2
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	484c      	ldr	r0, [pc, #304]	@ (8003e80 <HAL_TIM_MspPostInit+0x1d8>)
 8003d4e:	f001 ffb3 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003d52:	e089      	b.n	8003e68 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4a      	ldr	r2, [pc, #296]	@ (8003e84 <HAL_TIM_MspPostInit+0x1dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d11f      	bne.n	8003d9e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	4b44      	ldr	r3, [pc, #272]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	4a43      	ldr	r2, [pc, #268]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d6e:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003d7a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d94:	4619      	mov	r1, r3
 8003d96:	483c      	ldr	r0, [pc, #240]	@ (8003e88 <HAL_TIM_MspPostInit+0x1e0>)
 8003d98:	f001 ff8e 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003d9c:	e064      	b.n	8003e68 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	@ (8003e8c <HAL_TIM_MspPostInit+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d13c      	bne.n	8003e22 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	4a30      	ldr	r2, [pc, #192]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd4:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003de0:	23c0      	movs	r3, #192	@ 0xc0
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dec:	2300      	movs	r3, #0
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003df0:	2303      	movs	r3, #3
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4825      	ldr	r0, [pc, #148]	@ (8003e90 <HAL_TIM_MspPostInit+0x1e8>)
 8003dfc:	f001 ff5c 	bl	8005cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e00:	2340      	movs	r3, #64	@ 0x40
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e10:	2303      	movs	r3, #3
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e18:	4619      	mov	r1, r3
 8003e1a:	481e      	ldr	r0, [pc, #120]	@ (8003e94 <HAL_TIM_MspPostInit+0x1ec>)
 8003e1c:	f001 ff4c 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003e20:	e022      	b.n	8003e68 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <HAL_TIM_MspPostInit+0x1f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d11d      	bne.n	8003e68 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	4a0f      	ldr	r2, [pc, #60]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_TIM_MspPostInit+0x1cc>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e48:	2340      	movs	r3, #64	@ 0x40
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e54:	2302      	movs	r3, #2
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e60:	4619      	mov	r1, r3
 8003e62:	480e      	ldr	r0, [pc, #56]	@ (8003e9c <HAL_TIM_MspPostInit+0x1f4>)
 8003e64:	f001 ff28 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003e68:	bf00      	nop
 8003e6a:	3738      	adds	r7, #56	@ 0x38
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40020c00 	.word	0x40020c00
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40021c00 	.word	0x40021c00
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40022000 	.word	0x40022000
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40021400 	.word	0x40021400

08003ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	@ 0x38
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a90      	ldr	r2, [pc, #576]	@ (8004100 <HAL_UART_MspInit+0x260>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f040 80b2 	bne.w	8004028 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	4a8d      	ldr	r2, [pc, #564]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003ece:	f043 0310 	orr.w	r3, r3, #16
 8003ed2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed4:	4b8b      	ldr	r3, [pc, #556]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	4b87      	ldr	r3, [pc, #540]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	4a86      	ldr	r2, [pc, #536]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef0:	4b84      	ldr	r3, [pc, #528]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	4b80      	ldr	r3, [pc, #512]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	4a7f      	ldr	r2, [pc, #508]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0c:	4b7d      	ldr	r3, [pc, #500]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f28:	2307      	movs	r3, #7
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f30:	4619      	mov	r1, r3
 8003f32:	4875      	ldr	r0, [pc, #468]	@ (8004108 <HAL_UART_MspInit+0x268>)
 8003f34:	f001 fec0 	bl	8005cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f52:	4619      	mov	r1, r3
 8003f54:	486d      	ldr	r0, [pc, #436]	@ (800410c <HAL_UART_MspInit+0x26c>)
 8003f56:	f001 feaf 	bl	8005cb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f5c:	4a6d      	ldr	r2, [pc, #436]	@ (8004114 <HAL_UART_MspInit+0x274>)
 8003f5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f60:	4b6b      	ldr	r3, [pc, #428]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f68:	4b69      	ldr	r3, [pc, #420]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f6e:	4b68      	ldr	r3, [pc, #416]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f74:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f7c:	4b64      	ldr	r3, [pc, #400]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f82:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f88:	4b61      	ldr	r3, [pc, #388]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f8e:	4b60      	ldr	r3, [pc, #384]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f90:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003f94:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f96:	4b5e      	ldr	r3, [pc, #376]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f9c:	485c      	ldr	r0, [pc, #368]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003f9e:	f001 fa89 	bl	80054b4 <HAL_DMA_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003fa8:	f7fe fc38 	bl	800281c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a58      	ldr	r2, [pc, #352]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fb2:	4a57      	ldr	r2, [pc, #348]	@ (8004110 <HAL_UART_MspInit+0x270>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003fb8:	4b57      	ldr	r3, [pc, #348]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fba:	4a58      	ldr	r2, [pc, #352]	@ (800411c <HAL_UART_MspInit+0x27c>)
 8003fbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003fbe:	4b56      	ldr	r3, [pc, #344]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003fc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fc6:	4b54      	ldr	r3, [pc, #336]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fcc:	4b52      	ldr	r3, [pc, #328]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fd2:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fda:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fec:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003fee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ff2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ff4:	4b48      	ldr	r3, [pc, #288]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ffa:	4847      	ldr	r0, [pc, #284]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8003ffc:	f001 fa5a 	bl	80054b4 <HAL_DMA_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8004006:	f7fe fc09 	bl	800281c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <HAL_UART_MspInit+0x278>)
 800400e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004010:	4a41      	ldr	r2, [pc, #260]	@ (8004118 <HAL_UART_MspInit+0x278>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	2105      	movs	r1, #5
 800401a:	2025      	movs	r0, #37	@ 0x25
 800401c:	f001 fa13 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004020:	2025      	movs	r0, #37	@ 0x25
 8004022:	f001 fa2c 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004026:	e11c      	b.n	8004262 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3c      	ldr	r2, [pc, #240]	@ (8004120 <HAL_UART_MspInit+0x280>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d17e      	bne.n	8004130 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	4a32      	ldr	r2, [pc, #200]	@ (8004104 <HAL_UART_MspInit+0x264>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004040:	6413      	str	r3, [r2, #64]	@ 0x40
 8004042:	4b30      	ldr	r3, [pc, #192]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b2c      	ldr	r3, [pc, #176]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6313      	str	r3, [r2, #48]	@ 0x30
 800405e:	4b29      	ldr	r3, [pc, #164]	@ (8004104 <HAL_UART_MspInit+0x264>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800406a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800407c:	2307      	movs	r3, #7
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004084:	4619      	mov	r1, r3
 8004086:	4827      	ldr	r0, [pc, #156]	@ (8004124 <HAL_UART_MspInit+0x284>)
 8004088:	f001 fe16 	bl	8005cb8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800408c:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <HAL_UART_MspInit+0x288>)
 800408e:	4a27      	ldr	r2, [pc, #156]	@ (800412c <HAL_UART_MspInit+0x28c>)
 8004090:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004092:	4b25      	ldr	r3, [pc, #148]	@ (8004128 <HAL_UART_MspInit+0x288>)
 8004094:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004098:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800409a:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <HAL_UART_MspInit+0x288>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a0:	4b21      	ldr	r3, [pc, #132]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80040ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040c2:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80040c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ca:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040d0:	4815      	ldr	r0, [pc, #84]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040d2:	f001 f9ef 	bl	80054b4 <HAL_DMA_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80040dc:	f7fe fb9e 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040e6:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <HAL_UART_MspInit+0x288>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2105      	movs	r1, #5
 80040f0:	2027      	movs	r0, #39	@ 0x27
 80040f2:	f001 f9a8 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040f6:	2027      	movs	r0, #39	@ 0x27
 80040f8:	f001 f9c1 	bl	800547e <HAL_NVIC_EnableIRQ>
}
 80040fc:	e0b1      	b.n	8004262 <HAL_UART_MspInit+0x3c2>
 80040fe:	bf00      	nop
 8004100:	40011000 	.word	0x40011000
 8004104:	40023800 	.word	0x40023800
 8004108:	40020400 	.word	0x40020400
 800410c:	40020000 	.word	0x40020000
 8004110:	20000a9c 	.word	0x20000a9c
 8004114:	400264b8 	.word	0x400264b8
 8004118:	20000afc 	.word	0x20000afc
 800411c:	40026488 	.word	0x40026488
 8004120:	40004800 	.word	0x40004800
 8004124:	40020800 	.word	0x40020800
 8004128:	20000b5c 	.word	0x20000b5c
 800412c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a4d      	ldr	r2, [pc, #308]	@ (800426c <HAL_UART_MspInit+0x3cc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	f040 8093 	bne.w	8004262 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	4a4a      	ldr	r2, [pc, #296]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	6453      	str	r3, [r2, #68]	@ 0x44
 800414c:	4b48      	ldr	r3, [pc, #288]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 800414e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	4b44      	ldr	r3, [pc, #272]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	4a43      	ldr	r2, [pc, #268]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 8004162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004166:	6313      	str	r3, [r2, #48]	@ 0x30
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_UART_MspInit+0x3d0>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004174:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004182:	2303      	movs	r3, #3
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004186:	2308      	movs	r3, #8
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800418a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800418e:	4619      	mov	r1, r3
 8004190:	4838      	ldr	r0, [pc, #224]	@ (8004274 <HAL_UART_MspInit+0x3d4>)
 8004192:	f001 fd91 	bl	8005cb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004196:	4b38      	ldr	r3, [pc, #224]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 8004198:	4a38      	ldr	r2, [pc, #224]	@ (800427c <HAL_UART_MspInit+0x3dc>)
 800419a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800419c:	4b36      	ldr	r3, [pc, #216]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 800419e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80041a2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a4:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041aa:	4b33      	ldr	r3, [pc, #204]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041b0:	4b31      	ldr	r3, [pc, #196]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041b6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041be:	4b2e      	ldr	r3, [pc, #184]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80041c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80041ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041d0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041d2:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80041d8:	4827      	ldr	r0, [pc, #156]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041da:	f001 f96b 	bl	80054b4 <HAL_DMA_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80041e4:	f7fe fb1a 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a23      	ldr	r2, [pc, #140]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041ee:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <HAL_UART_MspInit+0x3d8>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80041f4:	4b22      	ldr	r3, [pc, #136]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 80041f6:	4a23      	ldr	r2, [pc, #140]	@ (8004284 <HAL_UART_MspInit+0x3e4>)
 80041f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80041fa:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 80041fc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004200:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004202:	4b1f      	ldr	r3, [pc, #124]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004204:	2240      	movs	r2, #64	@ 0x40
 8004206:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004208:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 800420a:	2200      	movs	r2, #0
 800420c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800420e:	4b1c      	ldr	r3, [pc, #112]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004210:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004214:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004216:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004218:	2200      	movs	r2, #0
 800421a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800421c:	4b18      	ldr	r3, [pc, #96]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004222:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004224:	2200      	movs	r2, #0
 8004226:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004228:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 800422a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800422e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004232:	2200      	movs	r2, #0
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004236:	4812      	ldr	r0, [pc, #72]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 8004238:	f001 f93c 	bl	80054b4 <HAL_DMA_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004242:	f7fe faeb 	bl	800281c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0d      	ldr	r2, [pc, #52]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
 800424c:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <HAL_UART_MspInit+0x3e0>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2105      	movs	r1, #5
 8004256:	2047      	movs	r0, #71	@ 0x47
 8004258:	f001 f8f5 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800425c:	2047      	movs	r0, #71	@ 0x47
 800425e:	f001 f90e 	bl	800547e <HAL_NVIC_EnableIRQ>
}
 8004262:	bf00      	nop
 8004264:	3738      	adds	r7, #56	@ 0x38
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40011400 	.word	0x40011400
 8004270:	40023800 	.word	0x40023800
 8004274:	40021800 	.word	0x40021800
 8004278:	20000bbc 	.word	0x20000bbc
 800427c:	40026428 	.word	0x40026428
 8004280:	20000c1c 	.word	0x20000c1c
 8004284:	400264a0 	.word	0x400264a0

08004288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800428c:	f003 fb82 	bl	8007994 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004290:	bf00      	nop
 8004292:	e7fd      	b.n	8004290 <NMI_Handler+0x8>

08004294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <HardFault_Handler+0x4>

0800429c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <MemManage_Handler+0x4>

080042a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <BusFault_Handler+0x4>

080042ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <UsageFault_Handler+0x4>

080042b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c6:	f000 f937 	bl	8004538 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042ca:	f007 fde1 	bl	800be90 <xTaskGetSchedulerState>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80042d4:	f008 fcb8 	bl	800cc48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80042e0:	2008      	movs	r0, #8
 80042e2:	f001 feb7 	bl	8006054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 80042e6:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <EXTI3_IRQHandler+0x14>)
 80042e8:	f7fd fae2 	bl	80018b0 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000574 	.word	0x20000574

080042f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80042f8:	2010      	movs	r0, #16
 80042fa:	f001 feab 	bl	8006054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004308:	4802      	ldr	r0, [pc, #8]	@ (8004314 <DMA1_Stream1_IRQHandler+0x10>)
 800430a:	f001 fa6b 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000b5c 	.word	0x20000b5c

08004318 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800431c:	4802      	ldr	r0, [pc, #8]	@ (8004328 <DMA1_Stream2_IRQHandler+0x10>)
 800431e:	f001 fa61 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200008a4 	.word	0x200008a4

0800432c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004330:	4802      	ldr	r0, [pc, #8]	@ (800433c <DMA1_Stream4_IRQHandler+0x10>)
 8004332:	f001 fa57 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000904 	.word	0x20000904

08004340 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004344:	4802      	ldr	r0, [pc, #8]	@ (8004350 <CAN1_RX0_IRQHandler+0x10>)
 8004346:	f000 fd73 	bl	8004e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000580 	.word	0x20000580

08004354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004358:	4802      	ldr	r0, [pc, #8]	@ (8004364 <USART1_IRQHandler+0x10>)
 800435a:	f004 fead 	bl	80090b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200009c4 	.word	0x200009c4

08004368 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800436c:	4802      	ldr	r0, [pc, #8]	@ (8004378 <DMA1_Stream7_IRQHandler+0x10>)
 800436e:	f001 fa39 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000844 	.word	0x20000844

0800437c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004380:	4802      	ldr	r0, [pc, #8]	@ (800438c <DMA2_Stream1_IRQHandler+0x10>)
 8004382:	f001 fa2f 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000bbc 	.word	0x20000bbc

08004390 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 8004394:	4802      	ldr	r0, [pc, #8]	@ (80043a0 <DMA2_Stream2_IRQHandler+0x10>)
 8004396:	f001 fa25 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000964 	.word	0x20000964

080043a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80043a8:	4802      	ldr	r0, [pc, #8]	@ (80043b4 <DMA2_Stream3_IRQHandler+0x10>)
 80043aa:	f001 fa1b 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200007e4 	.word	0x200007e4

080043b8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80043bc:	4802      	ldr	r0, [pc, #8]	@ (80043c8 <CAN2_RX0_IRQHandler+0x10>)
 80043be:	f000 fd37 	bl	8004e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200005a8 	.word	0x200005a8

080043cc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043d0:	4802      	ldr	r0, [pc, #8]	@ (80043dc <DMA2_Stream5_IRQHandler+0x10>)
 80043d2:	f001 fa07 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000afc 	.word	0x20000afc

080043e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80043e4:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <DMA2_Stream6_IRQHandler+0x10>)
 80043e6:	f001 f9fd 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000c1c 	.word	0x20000c1c

080043f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043f8:	4802      	ldr	r0, [pc, #8]	@ (8004404 <DMA2_Stream7_IRQHandler+0x10>)
 80043fa:	f001 f9f3 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000a9c 	.word	0x20000a9c

08004408 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800440c:	4802      	ldr	r0, [pc, #8]	@ (8004418 <USART6_IRQHandler+0x10>)
 800440e:	f004 fe53 	bl	80090b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000a54 	.word	0x20000a54

0800441c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <SystemInit+0x20>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	4a05      	ldr	r2, [pc, #20]	@ (800443c <SystemInit+0x20>)
 8004428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800442c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004478 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004444:	f7ff ffea 	bl	800441c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004448:	480c      	ldr	r0, [pc, #48]	@ (800447c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800444a:	490d      	ldr	r1, [pc, #52]	@ (8004480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800444e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004450:	e002      	b.n	8004458 <LoopCopyDataInit>

08004452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004456:	3304      	adds	r3, #4

08004458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800445a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800445c:	d3f9      	bcc.n	8004452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800445e:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004460:	4c0a      	ldr	r4, [pc, #40]	@ (800448c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004464:	e001      	b.n	800446a <LoopFillZerobss>

08004466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004468:	3204      	adds	r2, #4

0800446a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800446a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800446c:	d3fb      	bcc.n	8004466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800446e:	f008 fec9 	bl	800d204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004472:	f7fd fb3d 	bl	8001af0 <main>
  bx  lr    
 8004476:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800447c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004480:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004484:	0800d460 	.word	0x0800d460
  ldr r2, =_sbss
 8004488:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800448c:	20005898 	.word	0x20005898

08004490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004490:	e7fe      	b.n	8004490 <ADC_IRQHandler>
	...

08004494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004498:	4b0e      	ldr	r3, [pc, #56]	@ (80044d4 <HAL_Init+0x40>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0d      	ldr	r2, [pc, #52]	@ (80044d4 <HAL_Init+0x40>)
 800449e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0a      	ldr	r2, [pc, #40]	@ (80044d4 <HAL_Init+0x40>)
 80044aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b0:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <HAL_Init+0x40>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <HAL_Init+0x40>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044bc:	2003      	movs	r0, #3
 80044be:	f000 ffb7 	bl	8005430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044c2:	200f      	movs	r0, #15
 80044c4:	f000 f808 	bl	80044d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044c8:	f7ff f8b0 	bl	800362c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023c00 	.word	0x40023c00

080044d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_InitTick+0x54>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_InitTick+0x58>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ffcf 	bl	800549a <HAL_SYSTICK_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e00e      	b.n	8004524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d80a      	bhi.n	8004522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800450c:	2200      	movs	r2, #0
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f000 ff97 	bl	8005446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004518:	4a06      	ldr	r2, [pc, #24]	@ (8004534 <HAL_InitTick+0x5c>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000050 	.word	0x20000050
 8004530:	20000058 	.word	0x20000058
 8004534:	20000054 	.word	0x20000054

08004538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_IncTick+0x20>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_IncTick+0x24>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4413      	add	r3, r2
 8004548:	4a04      	ldr	r2, [pc, #16]	@ (800455c <HAL_IncTick+0x24>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000058 	.word	0x20000058
 800455c:	20000d6c 	.word	0x20000d6c

08004560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return uwTick;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_GetTick+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000d6c 	.word	0x20000d6c

08004578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7ff ffee 	bl	8004560 <HAL_GetTick>
 8004584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d005      	beq.n	800459e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004592:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <HAL_Delay+0x44>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800459e:	bf00      	nop
 80045a0:	f7ff ffde 	bl	8004560 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d8f7      	bhi.n	80045a0 <HAL_Delay+0x28>
  {
  }
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000058 	.word	0x20000058

080045c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0ed      	b.n	80047ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff f850 	bl	8003684 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f4:	f7ff ffb4 	bl	8004560 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045fa:	e012      	b.n	8004622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045fc:	f7ff ffb0 	bl	8004560 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b0a      	cmp	r3, #10
 8004608:	d90b      	bls.n	8004622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2205      	movs	r2, #5
 800461a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0c5      	b.n	80047ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0e5      	beq.n	80045fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0202 	bic.w	r2, r2, #2
 800463e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004640:	f7ff ff8e 	bl	8004560 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004646:	e012      	b.n	800466e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004648:	f7ff ff8a 	bl	8004560 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b0a      	cmp	r3, #10
 8004654:	d90b      	bls.n	800466e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2205      	movs	r2, #5
 8004666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e09f      	b.n	80047ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7e1b      	ldrb	r3, [r3, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d108      	bne.n	8004696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e007      	b.n	80046a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7e5b      	ldrb	r3, [r3, #25]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d108      	bne.n	80046c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e007      	b.n	80046d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7e9b      	ldrb	r3, [r3, #26]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d108      	bne.n	80046ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0220 	orr.w	r2, r2, #32
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e007      	b.n	80046fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0220 	bic.w	r2, r2, #32
 80046f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	7edb      	ldrb	r3, [r3, #27]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0210 	bic.w	r2, r2, #16
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0210 	orr.w	r2, r2, #16
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7f1b      	ldrb	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e007      	b.n	800474e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0208 	bic.w	r2, r2, #8
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7f5b      	ldrb	r3, [r3, #29]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d108      	bne.n	8004768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0204 	orr.w	r2, r2, #4
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e007      	b.n	8004778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0204 	bic.w	r2, r2, #4
 8004776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	ea42 0103 	orr.w	r1, r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d003      	beq.n	80047de <HAL_CAN_ConfigFilter+0x26>
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f040 80be 	bne.w	800495a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80047de:	4b65      	ldr	r3, [pc, #404]	@ (8004974 <HAL_CAN_ConfigFilter+0x1bc>)
 80047e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	431a      	orrs	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2201      	movs	r2, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	43db      	mvns	r3, r3
 8004830:	401a      	ands	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d123      	bne.n	8004888 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004862:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3248      	adds	r2, #72	@ 0x48
 8004868:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800487c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	3348      	adds	r3, #72	@ 0x48
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d122      	bne.n	80048d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80048b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	3248      	adds	r2, #72	@ 0x48
 80048b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048cc:	6979      	ldr	r1, [r7, #20]
 80048ce:	3348      	adds	r3, #72	@ 0x48
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	401a      	ands	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80048f0:	e007      	b.n	8004902 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	43db      	mvns	r3, r3
 8004914:	401a      	ands	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800491c:	e007      	b.n	800492e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	431a      	orrs	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	431a      	orrs	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800494c:	f023 0201 	bic.w	r2, r3, #1
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e006      	b.n	8004968 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40006400 	.word	0x40006400

08004978 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d12e      	bne.n	80049ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049a4:	f7ff fddc 	bl	8004560 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049aa:	e012      	b.n	80049d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049ac:	f7ff fdd8 	bl	8004560 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b0a      	cmp	r3, #10
 80049b8:	d90b      	bls.n	80049d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2205      	movs	r2, #5
 80049ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e012      	b.n	80049f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e5      	bne.n	80049ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e006      	b.n	80049f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	@ 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d003      	beq.n	8004a2c <HAL_CAN_AddTxMessage+0x2c>
 8004a24:	7ffb      	ldrb	r3, [r7, #31]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	f040 80ad 	bne.w	8004b86 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8095 	beq.w	8004b76 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004a56:	2201      	movs	r2, #1
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	6809      	ldr	r1, [r1, #0]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	440b      	add	r3, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e00f      	b.n	8004aa4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a8e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a98:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	440b      	add	r3, r1
 8004aa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	7d1b      	ldrb	r3, [r3, #20]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d111      	bne.n	8004ae4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	3318      	adds	r3, #24
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	4413      	add	r3, r2
 8004acc:	3304      	adds	r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6811      	ldr	r1, [r2, #0]
 8004ad4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3318      	adds	r3, #24
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	440b      	add	r3, r1
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	061a      	lsls	r2, r3, #24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3306      	adds	r3, #6
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3305      	adds	r3, #5
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	4313      	orrs	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	3204      	adds	r2, #4
 8004b04:	7812      	ldrb	r2, [r2, #0]
 8004b06:	4610      	mov	r0, r2
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6811      	ldr	r1, [r2, #0]
 8004b0c:	ea43 0200 	orr.w	r2, r3, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	440b      	add	r3, r1
 8004b16:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004b1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3303      	adds	r3, #3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	061a      	lsls	r2, r3, #24
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3302      	adds	r3, #2
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3301      	adds	r3, #1
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	4313      	orrs	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	ea43 0200 	orr.w	r2, r3, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004b50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3318      	adds	r3, #24
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	4413      	add	r3, r2
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6811      	ldr	r1, [r2, #0]
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	440b      	add	r3, r1
 8004b70:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e00e      	b.n	8004b94 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e006      	b.n	8004b94 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3724      	adds	r7, #36	@ 0x24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d003      	beq.n	8004bc4 <HAL_CAN_GetRxMessage+0x24>
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	f040 8103 	bne.w	8004dca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0f7      	b.n	8004dd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d107      	bne.n	8004c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e8      	b.n	8004dd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	331b      	adds	r3, #27
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	4413      	add	r3, r2
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0204 	and.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10c      	bne.n	8004c3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	331b      	adds	r3, #27
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	0d5b      	lsrs	r3, r3, #21
 8004c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e00b      	b.n	8004c56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	331b      	adds	r3, #27
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	08db      	lsrs	r3, r3, #3
 8004c4e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	331b      	adds	r3, #27
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	4413      	add	r3, r2
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0202 	and.w	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	331b      	adds	r3, #27
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2208      	movs	r2, #8
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e00b      	b.n	8004ca4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	331b      	adds	r3, #27
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	4413      	add	r3, r2
 8004c98:	3304      	adds	r3, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 020f 	and.w	r2, r3, #15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	331b      	adds	r3, #27
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	4413      	add	r3, r2
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	331b      	adds	r3, #27
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3304      	adds	r3, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0a1a      	lsrs	r2, r3, #8
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0c1a      	lsrs	r2, r3, #16
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	0e1a      	lsrs	r2, r3, #24
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	3303      	adds	r3, #3
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0a1a      	lsrs	r2, r3, #8
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3305      	adds	r3, #5
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	0c1a      	lsrs	r2, r3, #16
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3306      	adds	r3, #6
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0e1a      	lsrs	r2, r3, #24
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	3307      	adds	r3, #7
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0220 	orr.w	r2, r2, #32
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e007      	b.n	8004dc6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0220 	orr.w	r2, r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e006      	b.n	8004dd8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d002      	beq.n	8004e02 <HAL_CAN_ActivateNotification+0x1e>
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d109      	bne.n	8004e16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6959      	ldr	r1, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e006      	b.n	8004e24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	@ 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d07c      	beq.n	8004f70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d023      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f983 	bl	800519e <HAL_CAN_TxMailbox0CompleteCallback>
 8004e98:	e016      	b.n	8004ec8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eac:	e00c      	b.n	8004ec8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d004      	beq.n	8004ec2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	e002      	b.n	8004ec8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f989 	bl	80051da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d024      	beq.n	8004f1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f963 	bl	80051b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8004eec:	e016      	b.n	8004f1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f00:	e00c      	b.n	8004f1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f14:	e002      	b.n	8004f1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f969 	bl	80051ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d024      	beq.n	8004f70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f943 	bl	80051c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004f40:	e016      	b.n	8004f70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f54:	e00c      	b.n	8004f70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f68:	e002      	b.n	8004f70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f949 	bl	8005202 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2208      	movs	r2, #8
 8004fae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f930 	bl	8005216 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fb fdd0 	bl	8000b74 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d006      	beq.n	800501a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f912 	bl	800523e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8f9 	bl	800522a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d006      	beq.n	800505a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2210      	movs	r2, #16
 8005052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8fc 	bl	8005252 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00b      	beq.n	800507c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8f5 	bl	8005266 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d07b      	beq.n	800517e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d072      	beq.n	8005176 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	f043 0302 	orr.w	r3, r3, #2
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d043      	beq.n	8005176 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d03e      	beq.n	8005176 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050fe:	2b60      	cmp	r3, #96	@ 0x60
 8005100:	d02b      	beq.n	800515a <HAL_CAN_IRQHandler+0x32a>
 8005102:	2b60      	cmp	r3, #96	@ 0x60
 8005104:	d82e      	bhi.n	8005164 <HAL_CAN_IRQHandler+0x334>
 8005106:	2b50      	cmp	r3, #80	@ 0x50
 8005108:	d022      	beq.n	8005150 <HAL_CAN_IRQHandler+0x320>
 800510a:	2b50      	cmp	r3, #80	@ 0x50
 800510c:	d82a      	bhi.n	8005164 <HAL_CAN_IRQHandler+0x334>
 800510e:	2b40      	cmp	r3, #64	@ 0x40
 8005110:	d019      	beq.n	8005146 <HAL_CAN_IRQHandler+0x316>
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	d826      	bhi.n	8005164 <HAL_CAN_IRQHandler+0x334>
 8005116:	2b30      	cmp	r3, #48	@ 0x30
 8005118:	d010      	beq.n	800513c <HAL_CAN_IRQHandler+0x30c>
 800511a:	2b30      	cmp	r3, #48	@ 0x30
 800511c:	d822      	bhi.n	8005164 <HAL_CAN_IRQHandler+0x334>
 800511e:	2b10      	cmp	r3, #16
 8005120:	d002      	beq.n	8005128 <HAL_CAN_IRQHandler+0x2f8>
 8005122:	2b20      	cmp	r3, #32
 8005124:	d005      	beq.n	8005132 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005126:	e01d      	b.n	8005164 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	f043 0308 	orr.w	r3, r3, #8
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005130:	e019      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	f043 0310 	orr.w	r3, r3, #16
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800513a:	e014      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	f043 0320 	orr.w	r3, r3, #32
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005144:	e00f      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800514e:	e00a      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005158:	e005      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005162:	e000      	b.n	8005166 <HAL_CAN_IRQHandler+0x336>
            break;
 8005164:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005174:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2204      	movs	r2, #4
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f872 	bl	800527a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005196:	bf00      	nop
 8005198:	3728      	adds	r7, #40	@ 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052a0:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052ac:	4013      	ands	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	60d3      	str	r3, [r2, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__NVIC_GetPriorityGrouping+0x18>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f003 0307 	and.w	r3, r3, #7
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	2b00      	cmp	r3, #0
 8005304:	db0b      	blt.n	800531e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 021f 	and.w	r2, r3, #31
 800530c:	4907      	ldr	r1, [pc, #28]	@ (800532c <__NVIC_EnableIRQ+0x38>)
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2001      	movs	r0, #1
 8005316:	fa00 f202 	lsl.w	r2, r0, r2
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e100 	.word	0xe000e100

08005330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	6039      	str	r1, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db0a      	blt.n	800535a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	490c      	ldr	r1, [pc, #48]	@ (800537c <__NVIC_SetPriority+0x4c>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005358:	e00a      	b.n	8005370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4908      	ldr	r1, [pc, #32]	@ (8005380 <__NVIC_SetPriority+0x50>)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3b04      	subs	r3, #4
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	440b      	add	r3, r1
 800536e:	761a      	strb	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	bf28      	it	cs
 80053a2:	2304      	movcs	r3, #4
 80053a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d902      	bls.n	80053b4 <NVIC_EncodePriority+0x30>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3b03      	subs	r3, #3
 80053b2:	e000      	b.n	80053b6 <NVIC_EncodePriority+0x32>
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	401a      	ands	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	43d9      	mvns	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053dc:	4313      	orrs	r3, r2
         );
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	@ 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053fc:	d301      	bcc.n	8005402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053fe:	2301      	movs	r3, #1
 8005400:	e00f      	b.n	8005422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005402:	4a0a      	ldr	r2, [pc, #40]	@ (800542c <SysTick_Config+0x40>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800540a:	210f      	movs	r1, #15
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	f7ff ff8e 	bl	8005330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <SysTick_Config+0x40>)
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800541a:	4b04      	ldr	r3, [pc, #16]	@ (800542c <SysTick_Config+0x40>)
 800541c:	2207      	movs	r2, #7
 800541e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	e000e010 	.word	0xe000e010

08005430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff29 	bl	8005290 <__NVIC_SetPriorityGrouping>
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005446:	b580      	push	{r7, lr}
 8005448:	b086      	sub	sp, #24
 800544a:	af00      	add	r7, sp, #0
 800544c:	4603      	mov	r3, r0
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005458:	f7ff ff3e 	bl	80052d8 <__NVIC_GetPriorityGrouping>
 800545c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f7ff ff8e 	bl	8005384 <NVIC_EncodePriority>
 8005468:	4602      	mov	r2, r0
 800546a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff5d 	bl	8005330 <__NVIC_SetPriority>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	4603      	mov	r3, r0
 8005486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff31 	bl	80052f4 <__NVIC_EnableIRQ>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ffa2 	bl	80053ec <SysTick_Config>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054c0:	f7ff f84e 	bl	8004560 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e099      	b.n	8005604 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f0:	e00f      	b.n	8005512 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054f2:	f7ff f835 	bl	8004560 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d908      	bls.n	8005512 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e078      	b.n	8005604 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e8      	bne.n	80054f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4b38      	ldr	r3, [pc, #224]	@ (800560c <HAL_DMA_Init+0x158>)
 800552c:	4013      	ands	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800553e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	2b04      	cmp	r3, #4
 800556a:	d107      	bne.n	800557c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	4313      	orrs	r3, r2
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d117      	bne.n	80055d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb01 	bl	8005bc0 <DMA_CheckFifoParam>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80055d2:	2301      	movs	r3, #1
 80055d4:	e016      	b.n	8005604 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fab8 	bl	8005b54 <DMA_CalcBaseAndBitshift>
 80055e4:	4603      	mov	r3, r0
 80055e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ec:	223f      	movs	r2, #63	@ 0x3f
 80055ee:	409a      	lsls	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	f010803f 	.word	0xf010803f

08005610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_DMA_Start_IT+0x26>
 8005632:	2302      	movs	r3, #2
 8005634:	e040      	b.n	80056b8 <HAL_DMA_Start_IT+0xa8>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d12f      	bne.n	80056aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa4a 	bl	8005af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005668:	223f      	movs	r2, #63	@ 0x3f
 800566a:	409a      	lsls	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0216 	orr.w	r2, r2, #22
 800567e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e005      	b.n	80056b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056ce:	f7fe ff47 	bl	8004560 <HAL_GetTick>
 80056d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d008      	beq.n	80056f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	@ 0x80
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e052      	b.n	8005798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0216 	bic.w	r2, r2, #22
 8005700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_DMA_Abort+0x62>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0208 	bic.w	r2, r2, #8
 8005730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005742:	e013      	b.n	800576c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005744:	f7fe ff0c 	bl	8004560 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b05      	cmp	r3, #5
 8005750:	d90c      	bls.n	800576c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2203      	movs	r2, #3
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e015      	b.n	8005798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e4      	bne.n	8005744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	223f      	movs	r2, #63	@ 0x3f
 8005780:	409a      	lsls	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2280      	movs	r2, #128	@ 0x80
 80057b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00c      	b.n	80057d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2205      	movs	r2, #5
 80057c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057f0:	4b8e      	ldr	r3, [pc, #568]	@ (8005a2c <HAL_DMA_IRQHandler+0x248>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a30 <HAL_DMA_IRQHandler+0x24c>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580e:	2208      	movs	r2, #8
 8005810:	409a      	lsls	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583c:	2208      	movs	r2, #8
 800583e:	409a      	lsls	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	f043 0201 	orr.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	2201      	movs	r2, #1
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	2201      	movs	r2, #1
 8005874:	409a      	lsls	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	2204      	movs	r2, #4
 800588c:	409a      	lsls	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a8:	2204      	movs	r2, #4
 80058aa:	409a      	lsls	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	f043 0204 	orr.w	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	2210      	movs	r2, #16
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d043      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03c      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058de:	2210      	movs	r2, #16
 80058e0:	409a      	lsls	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	e01f      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4798      	blx	r3
 8005924:	e016      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d107      	bne.n	8005944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0208 	bic.w	r2, r2, #8
 8005942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005958:	2220      	movs	r2, #32
 800595a:	409a      	lsls	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 808f 	beq.w	8005a84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8087 	beq.w	8005a84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597a:	2220      	movs	r2, #32
 800597c:	409a      	lsls	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b05      	cmp	r3, #5
 800598c:	d136      	bne.n	80059fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0216 	bic.w	r2, r2, #22
 800599c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_DMA_IRQHandler+0x1da>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0208 	bic.w	r2, r2, #8
 80059cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d2:	223f      	movs	r2, #63	@ 0x3f
 80059d4:	409a      	lsls	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d07e      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
        }
        return;
 80059fa:	e079      	b.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01d      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d031      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
 8005a28:	e02c      	b.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
 8005a2a:	bf00      	nop
 8005a2c:	20000050 	.word	0x20000050
 8005a30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d023      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e01e      	b.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10f      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0210 	bic.w	r2, r2, #16
 8005a62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d032      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d307      	bcc.n	8005acc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f2      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x2cc>
 8005aca:	e000      	b.n	8005ace <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005acc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005af0:	bf00      	nop
    }
  }
}
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b40      	cmp	r3, #64	@ 0x40
 8005b24:	d108      	bne.n	8005b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b36:	e007      	b.n	8005b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3b10      	subs	r3, #16
 8005b64:	4a14      	ldr	r2, [pc, #80]	@ (8005bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b6e:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <DMA_CalcBaseAndBitshift+0x68>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d909      	bls.n	8005b96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b94:	e007      	b.n	8005ba6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	aaaaaaab 	.word	0xaaaaaaab
 8005bbc:	0800d448 	.word	0x0800d448

08005bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11f      	bne.n	8005c1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d856      	bhi.n	8005c8e <DMA_CheckFifoParam+0xce>
 8005be0:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <DMA_CheckFifoParam+0x28>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c0b 	.word	0x08005c0b
 8005bf0:	08005bf9 	.word	0x08005bf9
 8005bf4:	08005c8f 	.word	0x08005c8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d046      	beq.n	8005c92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c08:	e043      	b.n	8005c92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c12:	d140      	bne.n	8005c96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c18:	e03d      	b.n	8005c96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c22:	d121      	bne.n	8005c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d837      	bhi.n	8005c9a <DMA_CheckFifoParam+0xda>
 8005c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <DMA_CheckFifoParam+0x70>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c47 	.word	0x08005c47
 8005c38:	08005c41 	.word	0x08005c41
 8005c3c:	08005c59 	.word	0x08005c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e030      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d025      	beq.n	8005c9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c56:	e022      	b.n	8005c9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c60:	d11f      	bne.n	8005ca2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c66:	e01c      	b.n	8005ca2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d903      	bls.n	8005c76 <DMA_CheckFifoParam+0xb6>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d003      	beq.n	8005c7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c74:	e018      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7a:	e015      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e00b      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e00a      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8005c92:	bf00      	nop
 8005c94:	e008      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8005c96:	bf00      	nop
 8005c98:	e006      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e004      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e002      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ca6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop

08005cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b089      	sub	sp, #36	@ 0x24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e16b      	b.n	8005fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	f040 815a 	bne.w	8005fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d005      	beq.n	8005d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d130      	bne.n	8005d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	2203      	movs	r2, #3
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d40:	2201      	movs	r2, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 0201 	and.w	r2, r3, #1
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d017      	beq.n	8005da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d123      	bne.n	8005dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	08da      	lsrs	r2, r3, #3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3208      	adds	r2, #8
 8005dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	220f      	movs	r2, #15
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	08da      	lsrs	r2, r3, #3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3208      	adds	r2, #8
 8005df6:	69b9      	ldr	r1, [r7, #24]
 8005df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	2203      	movs	r2, #3
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f003 0203 	and.w	r2, r3, #3
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80b4 	beq.w	8005fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	4b60      	ldr	r3, [pc, #384]	@ (8005fc4 <HAL_GPIO_Init+0x30c>)
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	4a5f      	ldr	r2, [pc, #380]	@ (8005fc4 <HAL_GPIO_Init+0x30c>)
 8005e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005fc4 <HAL_GPIO_Init+0x30c>)
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005fc8 <HAL_GPIO_Init+0x310>)
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	089b      	lsrs	r3, r3, #2
 8005e60:	3302      	adds	r3, #2
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	220f      	movs	r2, #15
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a52      	ldr	r2, [pc, #328]	@ (8005fcc <HAL_GPIO_Init+0x314>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d02b      	beq.n	8005ede <HAL_GPIO_Init+0x226>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a51      	ldr	r2, [pc, #324]	@ (8005fd0 <HAL_GPIO_Init+0x318>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d025      	beq.n	8005eda <HAL_GPIO_Init+0x222>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a50      	ldr	r2, [pc, #320]	@ (8005fd4 <HAL_GPIO_Init+0x31c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <HAL_GPIO_Init+0x21e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a4f      	ldr	r2, [pc, #316]	@ (8005fd8 <HAL_GPIO_Init+0x320>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d019      	beq.n	8005ed2 <HAL_GPIO_Init+0x21a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8005fdc <HAL_GPIO_Init+0x324>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_GPIO_Init+0x216>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8005fe0 <HAL_GPIO_Init+0x328>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00d      	beq.n	8005eca <HAL_GPIO_Init+0x212>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8005fe4 <HAL_GPIO_Init+0x32c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <HAL_GPIO_Init+0x20e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005fe8 <HAL_GPIO_Init+0x330>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d101      	bne.n	8005ec2 <HAL_GPIO_Init+0x20a>
 8005ebe:	2307      	movs	r3, #7
 8005ec0:	e00e      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	e00c      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	e00a      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005eca:	2305      	movs	r3, #5
 8005ecc:	e008      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e006      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e004      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e002      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_GPIO_Init+0x228>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	f002 0203 	and.w	r2, r2, #3
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	4093      	lsls	r3, r2
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ef0:	4935      	ldr	r1, [pc, #212]	@ (8005fc8 <HAL_GPIO_Init+0x310>)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	089b      	lsrs	r3, r3, #2
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005efe:	4b3b      	ldr	r3, [pc, #236]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f22:	4a32      	ldr	r2, [pc, #200]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f28:	4b30      	ldr	r3, [pc, #192]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f4c:	4a27      	ldr	r2, [pc, #156]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f76:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fa0:	4a12      	ldr	r2, [pc, #72]	@ (8005fec <HAL_GPIO_Init+0x334>)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	f67f ae90 	bls.w	8005cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	@ 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40013800 	.word	0x40013800
 8005fcc:	40020000 	.word	0x40020000
 8005fd0:	40020400 	.word	0x40020400
 8005fd4:	40020800 	.word	0x40020800
 8005fd8:	40020c00 	.word	0x40020c00
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40021400 	.word	0x40021400
 8005fe4:	40021800 	.word	0x40021800
 8005fe8:	40021c00 	.word	0x40021c00
 8005fec:	40013c00 	.word	0x40013c00

08005ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	e001      	b.n	8006012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	807b      	strh	r3, [r7, #2]
 800602c:	4613      	mov	r3, r2
 800602e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006030:	787b      	ldrb	r3, [r7, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006036:	887a      	ldrh	r2, [r7, #2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800603c:	e003      	b.n	8006046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800603e:	887b      	ldrh	r3, [r7, #2]
 8006040:	041a      	lsls	r2, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	619a      	str	r2, [r3, #24]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800605e:	4b08      	ldr	r3, [pc, #32]	@ (8006080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800606a:	4a05      	ldr	r2, [pc, #20]	@ (8006080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb fb74 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40013c00 	.word	0x40013c00

08006084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e12b      	b.n	80062ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd fb9a 	bl	80037e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	@ 0x24
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060e8:	f001 fc2c 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 80060ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4a81      	ldr	r2, [pc, #516]	@ (80062f8 <HAL_I2C_Init+0x274>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d807      	bhi.n	8006108 <HAL_I2C_Init+0x84>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a80      	ldr	r2, [pc, #512]	@ (80062fc <HAL_I2C_Init+0x278>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	bf94      	ite	ls
 8006100:	2301      	movls	r3, #1
 8006102:	2300      	movhi	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e006      	b.n	8006116 <HAL_I2C_Init+0x92>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a7d      	ldr	r2, [pc, #500]	@ (8006300 <HAL_I2C_Init+0x27c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	bf94      	ite	ls
 8006110:	2301      	movls	r3, #1
 8006112:	2300      	movhi	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e0e7      	b.n	80062ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a78      	ldr	r2, [pc, #480]	@ (8006304 <HAL_I2C_Init+0x280>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	0c9b      	lsrs	r3, r3, #18
 8006128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4a6a      	ldr	r2, [pc, #424]	@ (80062f8 <HAL_I2C_Init+0x274>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d802      	bhi.n	8006158 <HAL_I2C_Init+0xd4>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3301      	adds	r3, #1
 8006156:	e009      	b.n	800616c <HAL_I2C_Init+0xe8>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	4a69      	ldr	r2, [pc, #420]	@ (8006308 <HAL_I2C_Init+0x284>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	099b      	lsrs	r3, r3, #6
 800616a:	3301      	adds	r3, #1
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	430b      	orrs	r3, r1
 8006172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800617e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	495c      	ldr	r1, [pc, #368]	@ (80062f8 <HAL_I2C_Init+0x274>)
 8006188:	428b      	cmp	r3, r1
 800618a:	d819      	bhi.n	80061c0 <HAL_I2C_Init+0x13c>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1e59      	subs	r1, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	fbb1 f3f3 	udiv	r3, r1, r3
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061a0:	400b      	ands	r3, r1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <HAL_I2C_Init+0x138>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1e59      	subs	r1, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061b4:	3301      	adds	r3, #1
 80061b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ba:	e051      	b.n	8006260 <HAL_I2C_Init+0x1dc>
 80061bc:	2304      	movs	r3, #4
 80061be:	e04f      	b.n	8006260 <HAL_I2C_Init+0x1dc>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d111      	bne.n	80061ec <HAL_I2C_Init+0x168>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1e58      	subs	r0, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	440b      	add	r3, r1
 80061d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061da:	3301      	adds	r3, #1
 80061dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	e012      	b.n	8006212 <HAL_I2C_Init+0x18e>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1e58      	subs	r0, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	0099      	lsls	r1, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006202:	3301      	adds	r3, #1
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	2b00      	cmp	r3, #0
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_I2C_Init+0x196>
 8006216:	2301      	movs	r3, #1
 8006218:	e022      	b.n	8006260 <HAL_I2C_Init+0x1dc>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10e      	bne.n	8006240 <HAL_I2C_Init+0x1bc>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1e58      	subs	r0, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	440b      	add	r3, r1
 8006230:	fbb0 f3f3 	udiv	r3, r0, r3
 8006234:	3301      	adds	r3, #1
 8006236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800623e:	e00f      	b.n	8006260 <HAL_I2C_Init+0x1dc>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1e58      	subs	r0, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	0099      	lsls	r1, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	fbb0 f3f3 	udiv	r3, r0, r3
 8006256:	3301      	adds	r3, #1
 8006258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	6809      	ldr	r1, [r1, #0]
 8006264:	4313      	orrs	r3, r2
 8006266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800628e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6911      	ldr	r1, [r2, #16]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68d2      	ldr	r2, [r2, #12]
 800629a:	4311      	orrs	r1, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	000186a0 	.word	0x000186a0
 80062fc:	001e847f 	.word	0x001e847f
 8006300:	003d08ff 	.word	0x003d08ff
 8006304:	431bde83 	.word	0x431bde83
 8006308:	10624dd3 	.word	0x10624dd3

0800630c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	817b      	strh	r3, [r7, #10]
 800631e:	460b      	mov	r3, r1
 8006320:	813b      	strh	r3, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006326:	f7fe f91b 	bl	8004560 <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b20      	cmp	r3, #32
 8006336:	f040 80d9 	bne.w	80064ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2319      	movs	r3, #25
 8006340:	2201      	movs	r2, #1
 8006342:	496d      	ldr	r1, [pc, #436]	@ (80064f8 <HAL_I2C_Mem_Write+0x1ec>)
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fc8b 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
 8006352:	e0cc      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_I2C_Mem_Write+0x56>
 800635e:	2302      	movs	r3, #2
 8006360:	e0c5      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d007      	beq.n	8006388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2221      	movs	r2, #33	@ 0x21
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2240      	movs	r2, #64	@ 0x40
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a4d      	ldr	r2, [pc, #308]	@ (80064fc <HAL_I2C_Mem_Write+0x1f0>)
 80063c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063ca:	88f8      	ldrh	r0, [r7, #6]
 80063cc:	893a      	ldrh	r2, [r7, #8]
 80063ce:	8979      	ldrh	r1, [r7, #10]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	4603      	mov	r3, r0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fac2 	bl	8006964 <I2C_RequestMemoryWrite>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d052      	beq.n	800648c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e081      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fd50 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d107      	bne.n	8006412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e06b      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_I2C_Mem_Write+0x180>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d017      	beq.n	800648c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1aa      	bne.n	80063ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fd43 	bl	8006f24 <I2C_WaitOnBTFFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00d      	beq.n	80064c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d107      	bne.n	80064bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e016      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	00100002 	.word	0x00100002
 80064fc:	ffff0000 	.word	0xffff0000

08006500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	@ 0x30
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4603      	mov	r3, r0
 8006510:	817b      	strh	r3, [r7, #10]
 8006512:	460b      	mov	r3, r1
 8006514:	813b      	strh	r3, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800651a:	f7fe f821 	bl	8004560 <HAL_GetTick>
 800651e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b20      	cmp	r3, #32
 800652a:	f040 8214 	bne.w	8006956 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2319      	movs	r3, #25
 8006534:	2201      	movs	r2, #1
 8006536:	497b      	ldr	r1, [pc, #492]	@ (8006724 <HAL_I2C_Mem_Read+0x224>)
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fb91 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
 8006546:	e207      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_I2C_Mem_Read+0x56>
 8006552:	2302      	movs	r3, #2
 8006554:	e200      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d007      	beq.n	800657c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800658a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2222      	movs	r2, #34	@ 0x22
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2240      	movs	r2, #64	@ 0x40
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80065ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006728 <HAL_I2C_Mem_Read+0x228>)
 80065bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065be:	88f8      	ldrh	r0, [r7, #6]
 80065c0:	893a      	ldrh	r2, [r7, #8]
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	4603      	mov	r3, r0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fa5e 	bl	8006a90 <I2C_RequestMemoryRead>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e1bc      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d113      	bne.n	800660e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	623b      	str	r3, [r7, #32]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	623b      	str	r3, [r7, #32]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e190      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006612:	2b01      	cmp	r3, #1
 8006614:	d11b      	bne.n	800664e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e170      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006652:	2b02      	cmp	r3, #2
 8006654:	d11b      	bne.n	800668e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	e150      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066a4:	e144      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	f200 80f1 	bhi.w	8006892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d123      	bne.n	8006700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fc79 	bl	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e145      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066fe:	e117      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006704:	2b02      	cmp	r3, #2
 8006706:	d14e      	bne.n	80067a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	2200      	movs	r2, #0
 8006710:	4906      	ldr	r1, [pc, #24]	@ (800672c <HAL_I2C_Mem_Read+0x22c>)
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 faa4 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e11a      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
 8006722:	bf00      	nop
 8006724:	00100002 	.word	0x00100002
 8006728:	ffff0000 	.word	0xffff0000
 800672c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800673e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067a4:	e0c4      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	2200      	movs	r2, #0
 80067ae:	496c      	ldr	r1, [pc, #432]	@ (8006960 <HAL_I2C_Mem_Read+0x460>)
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fa55 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e0cb      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006808:	2200      	movs	r2, #0
 800680a:	4955      	ldr	r1, [pc, #340]	@ (8006960 <HAL_I2C_Mem_Read+0x460>)
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fa27 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e09d      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800682a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006890:	e04e      	b.n	8006930 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fb8c 	bl	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e058      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d124      	bne.n	8006930 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d107      	bne.n	80068fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f aeb6 	bne.w	80066a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	@ 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	00010004 	.word	0x00010004

08006964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	817b      	strh	r3, [r7, #10]
 8006976:	460b      	mov	r3, r1
 8006978:	813b      	strh	r3, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800698c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2200      	movs	r2, #0
 8006996:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f960 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b4:	d103      	bne.n	80069be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e05f      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069c2:	897b      	ldrh	r3, [r7, #10]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	492d      	ldr	r1, [pc, #180]	@ (8006a8c <I2C_RequestMemoryWrite+0x128>)
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f9bb 	bl	8006d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04c      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a00:	6a39      	ldr	r1, [r7, #32]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fa46 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d107      	bne.n	8006a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e02b      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d105      	bne.n	8006a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	611a      	str	r2, [r3, #16]
 8006a3a:	e021      	b.n	8006a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a3c:	893b      	ldrh	r3, [r7, #8]
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4c:	6a39      	ldr	r1, [r7, #32]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fa20 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d107      	bne.n	8006a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e005      	b.n	8006a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	00010002 	.word	0x00010002

08006a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8c2 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af0:	d103      	bne.n	8006afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e0aa      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	4952      	ldr	r1, [pc, #328]	@ (8006c5c <I2C_RequestMemoryRead+0x1cc>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f91d 	bl	8006d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e097      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b3c:	6a39      	ldr	r1, [r7, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f9a8 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d107      	bne.n	8006b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e076      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]
 8006b76:	e021      	b.n	8006bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f982 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e050      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bbe:	6a39      	ldr	r1, [r7, #32]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f967 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d107      	bne.n	8006be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e035      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f82b 	bl	8006c60 <I2C_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00d      	beq.n	8006c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1e:	d103      	bne.n	8006c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e013      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c2c:	897b      	ldrh	r3, [r7, #10]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	4906      	ldr	r1, [pc, #24]	@ (8006c5c <I2C_RequestMemoryRead+0x1cc>)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f886 	bl	8006d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	00010002 	.word	0x00010002

08006c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c70:	e048      	b.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d044      	beq.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7a:	f7fd fc71 	bl	8004560 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d302      	bcc.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d139      	bne.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d10d      	bne.n	8006cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	43da      	mvns	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf0c      	ite	eq
 8006cac:	2301      	moveq	r3, #1
 8006cae:	2300      	movne	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	e00c      	b.n	8006cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	43da      	mvns	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d116      	bne.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e023      	b.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d10d      	bne.n	8006d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	43da      	mvns	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	e00c      	b.n	8006d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	43da      	mvns	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4013      	ands	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d093      	beq.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d62:	e071      	b.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d72:	d123      	bne.n	8006dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da8:	f043 0204 	orr.w	r2, r3, #4
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e067      	b.n	8006e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d041      	beq.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc4:	f7fd fbcc 	bl	8004560 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d136      	bne.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10c      	bne.n	8006dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	43da      	mvns	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4013      	ands	r3, r2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf14      	ite	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	2300      	moveq	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	e00b      	b.n	8006e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	43da      	mvns	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d016      	beq.n	8006e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e021      	b.n	8006e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d10c      	bne.n	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	43da      	mvns	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e00b      	b.n	8006e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	43da      	mvns	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4013      	ands	r3, r2
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bf14      	ite	ne
 8006e7e:	2301      	movne	r3, #1
 8006e80:	2300      	moveq	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f af6d 	bne.w	8006d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea0:	e034      	b.n	8006f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f8e3 	bl	800706e <I2C_IsAcknowledgeFailed>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e034      	b.n	8006f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d028      	beq.n	8006f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fd fb51 	bl	8004560 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11d      	bne.n	8006f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eda:	2b80      	cmp	r3, #128	@ 0x80
 8006edc:	d016      	beq.n	8006f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e007      	b.n	8006f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f16:	2b80      	cmp	r3, #128	@ 0x80
 8006f18:	d1c3      	bne.n	8006ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f30:	e034      	b.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f89b 	bl	800706e <I2C_IsAcknowledgeFailed>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e034      	b.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d028      	beq.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4a:	f7fd fb09 	bl	8004560 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11d      	bne.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d016      	beq.n	8006f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e007      	b.n	8006fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d1c3      	bne.n	8006f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fc0:	e049      	b.n	8007056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d119      	bne.n	8007004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0210 	mvn.w	r2, #16
 8006fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e030      	b.n	8007066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007004:	f7fd faac 	bl	8004560 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d302      	bcc.n	800701a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d11d      	bne.n	8007056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007024:	2b40      	cmp	r3, #64	@ 0x40
 8007026:	d016      	beq.n	8007056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e007      	b.n	8007066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d1ae      	bne.n	8006fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007084:	d11b      	bne.n	80070be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800708e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e267      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d075      	beq.n	80071d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ea:	4b88      	ldr	r3, [pc, #544]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d00c      	beq.n	8007110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070f6:	4b85      	ldr	r3, [pc, #532]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d112      	bne.n	8007128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007102:	4b82      	ldr	r3, [pc, #520]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800710e:	d10b      	bne.n	8007128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007110:	4b7e      	ldr	r3, [pc, #504]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d05b      	beq.n	80071d4 <HAL_RCC_OscConfig+0x108>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d157      	bne.n	80071d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e242      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007130:	d106      	bne.n	8007140 <HAL_RCC_OscConfig+0x74>
 8007132:	4b76      	ldr	r3, [pc, #472]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a75      	ldr	r2, [pc, #468]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	e01d      	b.n	800717c <HAL_RCC_OscConfig+0xb0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007148:	d10c      	bne.n	8007164 <HAL_RCC_OscConfig+0x98>
 800714a:	4b70      	ldr	r3, [pc, #448]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a6f      	ldr	r2, [pc, #444]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4b6d      	ldr	r3, [pc, #436]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6c      	ldr	r2, [pc, #432]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e00b      	b.n	800717c <HAL_RCC_OscConfig+0xb0>
 8007164:	4b69      	ldr	r3, [pc, #420]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a68      	ldr	r2, [pc, #416]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800716a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	4b66      	ldr	r3, [pc, #408]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a65      	ldr	r2, [pc, #404]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800717a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d013      	beq.n	80071ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fd f9ec 	bl	8004560 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800718c:	f7fd f9e8 	bl	8004560 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b64      	cmp	r3, #100	@ 0x64
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e207      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800719e:	4b5b      	ldr	r3, [pc, #364]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0f0      	beq.n	800718c <HAL_RCC_OscConfig+0xc0>
 80071aa:	e014      	b.n	80071d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7fd f9d8 	bl	8004560 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b4:	f7fd f9d4 	bl	8004560 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b64      	cmp	r3, #100	@ 0x64
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e1f3      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071c6:	4b51      	ldr	r3, [pc, #324]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0xe8>
 80071d2:	e000      	b.n	80071d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d063      	beq.n	80072aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071e2:	4b4a      	ldr	r3, [pc, #296]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ee:	4b47      	ldr	r3, [pc, #284]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d11c      	bne.n	8007234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071fa:	4b44      	ldr	r3, [pc, #272]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d116      	bne.n	8007234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007206:	4b41      	ldr	r3, [pc, #260]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_RCC_OscConfig+0x152>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d001      	beq.n	800721e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e1c7      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721e:	4b3b      	ldr	r3, [pc, #236]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4937      	ldr	r1, [pc, #220]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007232:	e03a      	b.n	80072aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d020      	beq.n	800727e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800723c:	4b34      	ldr	r3, [pc, #208]	@ (8007310 <HAL_RCC_OscConfig+0x244>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007242:	f7fd f98d 	bl	8004560 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800724a:	f7fd f989 	bl	8004560 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e1a8      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800725c:	4b2b      	ldr	r3, [pc, #172]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007268:	4b28      	ldr	r3, [pc, #160]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	4925      	ldr	r1, [pc, #148]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 8007278:	4313      	orrs	r3, r2
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	e015      	b.n	80072aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <HAL_RCC_OscConfig+0x244>)
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fd f96c 	bl	8004560 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800728c:	f7fd f968 	bl	8004560 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e187      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800729e:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d036      	beq.n	8007324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d016      	beq.n	80072ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072be:	4b15      	ldr	r3, [pc, #84]	@ (8007314 <HAL_RCC_OscConfig+0x248>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c4:	f7fd f94c 	bl	8004560 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072cc:	f7fd f948 	bl	8004560 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e167      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072de:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <HAL_RCC_OscConfig+0x240>)
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCC_OscConfig+0x200>
 80072ea:	e01b      	b.n	8007324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ec:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <HAL_RCC_OscConfig+0x248>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f2:	f7fd f935 	bl	8004560 <HAL_GetTick>
 80072f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f8:	e00e      	b.n	8007318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072fa:	f7fd f931 	bl	8004560 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d907      	bls.n	8007318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e150      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
 800730c:	40023800 	.word	0x40023800
 8007310:	42470000 	.word	0x42470000
 8007314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007318:	4b88      	ldr	r3, [pc, #544]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 800731a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1ea      	bne.n	80072fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8097 	beq.w	8007460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007336:	4b81      	ldr	r3, [pc, #516]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10f      	bne.n	8007362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	4b7d      	ldr	r3, [pc, #500]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	4a7c      	ldr	r2, [pc, #496]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 800734c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007350:	6413      	str	r3, [r2, #64]	@ 0x40
 8007352:	4b7a      	ldr	r3, [pc, #488]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800735e:	2301      	movs	r3, #1
 8007360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007362:	4b77      	ldr	r3, [pc, #476]	@ (8007540 <HAL_RCC_OscConfig+0x474>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736a:	2b00      	cmp	r3, #0
 800736c:	d118      	bne.n	80073a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800736e:	4b74      	ldr	r3, [pc, #464]	@ (8007540 <HAL_RCC_OscConfig+0x474>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a73      	ldr	r2, [pc, #460]	@ (8007540 <HAL_RCC_OscConfig+0x474>)
 8007374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800737a:	f7fd f8f1 	bl	8004560 <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007382:	f7fd f8ed 	bl	8004560 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e10c      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007394:	4b6a      	ldr	r3, [pc, #424]	@ (8007540 <HAL_RCC_OscConfig+0x474>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d106      	bne.n	80073b6 <HAL_RCC_OscConfig+0x2ea>
 80073a8:	4b64      	ldr	r3, [pc, #400]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ac:	4a63      	ldr	r2, [pc, #396]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b4:	e01c      	b.n	80073f0 <HAL_RCC_OscConfig+0x324>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCC_OscConfig+0x30c>
 80073be:	4b5f      	ldr	r3, [pc, #380]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c2:	4a5e      	ldr	r2, [pc, #376]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073c4:	f043 0304 	orr.w	r3, r3, #4
 80073c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ca:	4b5c      	ldr	r3, [pc, #368]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ce:	4a5b      	ldr	r2, [pc, #364]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073d0:	f043 0301 	orr.w	r3, r3, #1
 80073d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d6:	e00b      	b.n	80073f0 <HAL_RCC_OscConfig+0x324>
 80073d8:	4b58      	ldr	r3, [pc, #352]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073dc:	4a57      	ldr	r2, [pc, #348]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e4:	4b55      	ldr	r3, [pc, #340]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e8:	4a54      	ldr	r2, [pc, #336]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80073ea:	f023 0304 	bic.w	r3, r3, #4
 80073ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f8:	f7fd f8b2 	bl	8004560 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073fe:	e00a      	b.n	8007416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007400:	f7fd f8ae 	bl	8004560 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740e:	4293      	cmp	r3, r2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e0cb      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007416:	4b49      	ldr	r3, [pc, #292]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0ee      	beq.n	8007400 <HAL_RCC_OscConfig+0x334>
 8007422:	e014      	b.n	800744e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007424:	f7fd f89c 	bl	8004560 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800742a:	e00a      	b.n	8007442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800742c:	f7fd f898 	bl	8004560 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e0b5      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007442:	4b3e      	ldr	r3, [pc, #248]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1ee      	bne.n	800742c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d105      	bne.n	8007460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007454:	4b39      	ldr	r3, [pc, #228]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	4a38      	ldr	r2, [pc, #224]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 800745a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80a1 	beq.w	80075ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800746a:	4b34      	ldr	r3, [pc, #208]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b08      	cmp	r3, #8
 8007474:	d05c      	beq.n	8007530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d141      	bne.n	8007502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747e:	4b31      	ldr	r3, [pc, #196]	@ (8007544 <HAL_RCC_OscConfig+0x478>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007484:	f7fd f86c 	bl	8004560 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800748c:	f7fd f868 	bl	8004560 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e087      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749e:	4b27      	ldr	r3, [pc, #156]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f0      	bne.n	800748c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69da      	ldr	r2, [r3, #28]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	019b      	lsls	r3, r3, #6
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	3b01      	subs	r3, #1
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	061b      	lsls	r3, r3, #24
 80074ce:	491b      	ldr	r1, [pc, #108]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007544 <HAL_RCC_OscConfig+0x478>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074da:	f7fd f841 	bl	8004560 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e2:	f7fd f83d 	bl	8004560 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e05c      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f4:	4b11      	ldr	r3, [pc, #68]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0f0      	beq.n	80074e2 <HAL_RCC_OscConfig+0x416>
 8007500:	e054      	b.n	80075ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <HAL_RCC_OscConfig+0x478>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007508:	f7fd f82a 	bl	8004560 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007510:	f7fd f826 	bl	8004560 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e045      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007522:	4b06      	ldr	r3, [pc, #24]	@ (800753c <HAL_RCC_OscConfig+0x470>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f0      	bne.n	8007510 <HAL_RCC_OscConfig+0x444>
 800752e:	e03d      	b.n	80075ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d107      	bne.n	8007548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e038      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
 800753c:	40023800 	.word	0x40023800
 8007540:	40007000 	.word	0x40007000
 8007544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007548:	4b1b      	ldr	r3, [pc, #108]	@ (80075b8 <HAL_RCC_OscConfig+0x4ec>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d028      	beq.n	80075a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007560:	429a      	cmp	r2, r3
 8007562:	d121      	bne.n	80075a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756e:	429a      	cmp	r2, r3
 8007570:	d11a      	bne.n	80075a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800757e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007580:	4293      	cmp	r3, r2
 8007582:	d111      	bne.n	80075a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758e:	085b      	lsrs	r3, r3, #1
 8007590:	3b01      	subs	r3, #1
 8007592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007594:	429a      	cmp	r2, r3
 8007596:	d107      	bne.n	80075a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800

080075bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0cc      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075d0:	4b68      	ldr	r3, [pc, #416]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d90c      	bls.n	80075f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b65      	ldr	r3, [pc, #404]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b63      	ldr	r3, [pc, #396]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0b8      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d020      	beq.n	8007646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007610:	4b59      	ldr	r3, [pc, #356]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	4a58      	ldr	r2, [pc, #352]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800761a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007628:	4b53      	ldr	r3, [pc, #332]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4a52      	ldr	r2, [pc, #328]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007634:	4b50      	ldr	r3, [pc, #320]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	494d      	ldr	r1, [pc, #308]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	4313      	orrs	r3, r2
 8007644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d044      	beq.n	80076dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d107      	bne.n	800766a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800765a:	4b47      	ldr	r3, [pc, #284]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d119      	bne.n	800769a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e07f      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d003      	beq.n	800767a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007676:	2b03      	cmp	r3, #3
 8007678:	d107      	bne.n	800768a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767a:	4b3f      	ldr	r3, [pc, #252]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e06f      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800768a:	4b3b      	ldr	r3, [pc, #236]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e067      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800769a:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0203 	bic.w	r2, r3, #3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4934      	ldr	r1, [pc, #208]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076ac:	f7fc ff58 	bl	8004560 <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	e00a      	b.n	80076ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b4:	f7fc ff54 	bl	8004560 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e04f      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 020c 	and.w	r2, r3, #12
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1eb      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076dc:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d20c      	bcs.n	8007704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ea:	4b22      	ldr	r3, [pc, #136]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f2:	4b20      	ldr	r3, [pc, #128]	@ (8007774 <HAL_RCC_ClockConfig+0x1b8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d001      	beq.n	8007704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e032      	b.n	800776a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007710:	4b19      	ldr	r3, [pc, #100]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	4916      	ldr	r1, [pc, #88]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800772e:	4b12      	ldr	r3, [pc, #72]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	490e      	ldr	r1, [pc, #56]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007742:	f000 f82d 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 8007746:	4602      	mov	r2, r0
 8007748:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <HAL_RCC_ClockConfig+0x1bc>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	091b      	lsrs	r3, r3, #4
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	490a      	ldr	r1, [pc, #40]	@ (800777c <HAL_RCC_ClockConfig+0x1c0>)
 8007754:	5ccb      	ldrb	r3, [r1, r3]
 8007756:	fa22 f303 	lsr.w	r3, r2, r3
 800775a:	4a09      	ldr	r2, [pc, #36]	@ (8007780 <HAL_RCC_ClockConfig+0x1c4>)
 800775c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800775e:	4b09      	ldr	r3, [pc, #36]	@ (8007784 <HAL_RCC_ClockConfig+0x1c8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fc feb8 	bl	80044d8 <HAL_InitTick>

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	40023c00 	.word	0x40023c00
 8007778:	40023800 	.word	0x40023800
 800777c:	0800d430 	.word	0x0800d430
 8007780:	20000050 	.word	0x20000050
 8007784:	20000054 	.word	0x20000054

08007788 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800778c:	4b03      	ldr	r3, [pc, #12]	@ (800779c <HAL_RCC_EnableCSS+0x14>)
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	4247004c 	.word	0x4247004c

080077a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b090      	sub	sp, #64	@ 0x40
 80077a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	2300      	movs	r3, #0
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b0:	2300      	movs	r3, #0
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b8:	4b59      	ldr	r3, [pc, #356]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 030c 	and.w	r3, r3, #12
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d00d      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x40>
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	f200 80a1 	bhi.w	800790c <HAL_RCC_GetSysClockFreq+0x16c>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x34>
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d003      	beq.n	80077da <HAL_RCC_GetSysClockFreq+0x3a>
 80077d2:	e09b      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077d4:	4b53      	ldr	r3, [pc, #332]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x184>)
 80077d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80077d8:	e09b      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077da:	4b53      	ldr	r3, [pc, #332]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x188>)
 80077dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80077de:	e098      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077e0:	4b4f      	ldr	r3, [pc, #316]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d028      	beq.n	8007848 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	099b      	lsrs	r3, r3, #6
 80077fc:	2200      	movs	r2, #0
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	627a      	str	r2, [r7, #36]	@ 0x24
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007808:	2100      	movs	r1, #0
 800780a:	4b47      	ldr	r3, [pc, #284]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x188>)
 800780c:	fb03 f201 	mul.w	r2, r3, r1
 8007810:	2300      	movs	r3, #0
 8007812:	fb00 f303 	mul.w	r3, r0, r3
 8007816:	4413      	add	r3, r2
 8007818:	4a43      	ldr	r2, [pc, #268]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x188>)
 800781a:	fba0 1202 	umull	r1, r2, r0, r2
 800781e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007820:	460a      	mov	r2, r1
 8007822:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007826:	4413      	add	r3, r2
 8007828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800782a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782c:	2200      	movs	r2, #0
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	61fa      	str	r2, [r7, #28]
 8007832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800783a:	f7f8 fcd1 	bl	80001e0 <__aeabi_uldivmod>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4613      	mov	r3, r2
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007846:	e053      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007848:	4b35      	ldr	r3, [pc, #212]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	099b      	lsrs	r3, r3, #6
 800784e:	2200      	movs	r2, #0
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	617a      	str	r2, [r7, #20]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800785a:	f04f 0b00 	mov.w	fp, #0
 800785e:	4652      	mov	r2, sl
 8007860:	465b      	mov	r3, fp
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f04f 0100 	mov.w	r1, #0
 800786a:	0159      	lsls	r1, r3, #5
 800786c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007870:	0150      	lsls	r0, r2, #5
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	ebb2 080a 	subs.w	r8, r2, sl
 800787a:	eb63 090b 	sbc.w	r9, r3, fp
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800788a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800788e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007892:	ebb2 0408 	subs.w	r4, r2, r8
 8007896:	eb63 0509 	sbc.w	r5, r3, r9
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	00eb      	lsls	r3, r5, #3
 80078a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078a8:	00e2      	lsls	r2, r4, #3
 80078aa:	4614      	mov	r4, r2
 80078ac:	461d      	mov	r5, r3
 80078ae:	eb14 030a 	adds.w	r3, r4, sl
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	eb45 030b 	adc.w	r3, r5, fp
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	f04f 0200 	mov.w	r2, #0
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078c6:	4629      	mov	r1, r5
 80078c8:	028b      	lsls	r3, r1, #10
 80078ca:	4621      	mov	r1, r4
 80078cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d0:	4621      	mov	r1, r4
 80078d2:	028a      	lsls	r2, r1, #10
 80078d4:	4610      	mov	r0, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	2200      	movs	r2, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	60fa      	str	r2, [r7, #12]
 80078e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078e4:	f7f8 fc7c 	bl	80001e0 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4613      	mov	r3, r2
 80078ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x180>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	3301      	adds	r3, #1
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007900:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	fbb2 f3f3 	udiv	r3, r2, r3
 8007908:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800790a:	e002      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x184>)
 800790e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007914:	4618      	mov	r0, r3
 8007916:	3740      	adds	r7, #64	@ 0x40
 8007918:	46bd      	mov	sp, r7
 800791a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800791e:	bf00      	nop
 8007920:	40023800 	.word	0x40023800
 8007924:	00f42400 	.word	0x00f42400
 8007928:	00b71b00 	.word	0x00b71b00

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000050 	.word	0x20000050

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	@ (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	0800d440 	.word	0x0800d440

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007970:	f7ff ffdc 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	@ (800798c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	@ (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	0800d440 	.word	0x0800d440

08007994 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b80      	cmp	r3, #128	@ 0x80
 80079a2:	d104      	bne.n	80079ae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80079a4:	f000 f80a 	bl	80079bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80079a8:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80079aa:	2280      	movs	r2, #128	@ 0x80
 80079ac:	701a      	strb	r2, [r3, #0]
  }
}
 80079ae:	bf00      	nop
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40023800 	.word	0x40023800
 80079b8:	4002380e 	.word	0x4002380e

080079bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e07b      	b.n	8007ad4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d108      	bne.n	80079f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ec:	d009      	beq.n	8007a02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	61da      	str	r2, [r3, #28]
 80079f4:	e005      	b.n	8007a02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fb ff4b 	bl	80038b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	ea42 0103 	orr.w	r1, r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	f003 0104 	and.w	r1, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	f003 0210 	and.w	r2, r3, #16
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69da      	ldr	r2, [r3, #28]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ac2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	@ 0x30
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aea:	2301      	movs	r3, #1
 8007aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x26>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e198      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x358>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b0a:	f7fc fd29 	bl	8004560 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b20:	887b      	ldrh	r3, [r7, #2]
 8007b22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d00f      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x70>
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b32:	d107      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x68>
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d003      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007b4a:	e16d      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_SPI_TransmitReceive+0x82>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_SPI_TransmitReceive+0x82>
 8007b58:	887b      	ldrh	r3, [r7, #2]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d103      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007b64:	e160      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d003      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2205      	movs	r2, #5
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	887a      	ldrh	r2, [r7, #2]
 8007b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	887a      	ldrh	r2, [r7, #2]
 8007b90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	887a      	ldrh	r2, [r7, #2]
 8007b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	887a      	ldrh	r2, [r7, #2]
 8007ba2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bba:	2b40      	cmp	r3, #64	@ 0x40
 8007bbc:	d007      	beq.n	8007bce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd6:	d17c      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x10a>
 8007be0:	8b7b      	ldrh	r3, [r7, #26]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d16a      	bne.n	8007cbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0a:	e057      	b.n	8007cbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d11b      	bne.n	8007c52 <HAL_SPI_TransmitReceive+0x176>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d016      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x176>
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d113      	bne.n	8007c52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3a:	1c9a      	adds	r2, r3, #2
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d119      	bne.n	8007c94 <HAL_SPI_TransmitReceive+0x1b8>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d014      	beq.n	8007c94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c74:	b292      	uxth	r2, r2
 8007c76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7c:	1c9a      	adds	r2, r3, #2
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c90:	2301      	movs	r3, #1
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c94:	f7fc fc64 	bl	8004560 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d80b      	bhi.n	8007cbc <HAL_SPI_TransmitReceive+0x1e0>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d007      	beq.n	8007cbc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007cba:	e0b5      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1a2      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x130>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d19d      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x130>
 8007cd0:	e080      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_SPI_TransmitReceive+0x204>
 8007cda:	8b7b      	ldrh	r3, [r7, #26]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d16f      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d06:	e05b      	b.n	8007dc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d11c      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x274>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d017      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x274>
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d114      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d119      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x2b6>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d014      	beq.n	8007d92 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d92:	f7fc fbe5 	bl	8004560 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d803      	bhi.n	8007daa <HAL_SPI_TransmitReceive+0x2ce>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d102      	bne.n	8007db0 <HAL_SPI_TransmitReceive+0x2d4>
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d107      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007dbe:	e033      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d19e      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x22c>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d199      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f8b7 	bl	8007f4c <SPI_EndRxTxTransaction>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d006      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007df0:	e01a      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1e:	e003      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3730      	adds	r7, #48	@ 0x30
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e4c:	f7fc fb88 	bl	8004560 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4413      	add	r3, r2
 8007e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e5c:	f7fc fb80 	bl	8004560 <HAL_GetTick>
 8007e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e62:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	015b      	lsls	r3, r3, #5
 8007e68:	0d1b      	lsrs	r3, r3, #20
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	fb02 f303 	mul.w	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e72:	e054      	b.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d050      	beq.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e7c:	f7fc fb70 	bl	8004560 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d902      	bls.n	8007e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d13d      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eaa:	d111      	bne.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb4:	d004      	beq.n	8007ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ebe:	d107      	bne.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ed8:	d10f      	bne.n	8007efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e017      	b.n	8007f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4013      	ands	r3, r2
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d19b      	bne.n	8007e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3720      	adds	r7, #32
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000050 	.word	0x20000050

08007f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	2102      	movs	r1, #2
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff ff6a 	bl	8007e3c <SPI_WaitFlagStateUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f72:	f043 0220 	orr.w	r2, r3, #32
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e032      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fec <SPI_EndRxTxTransaction+0xa0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff0 <SPI_EndRxTxTransaction+0xa4>)
 8007f84:	fba2 2303 	umull	r2, r3, r2, r3
 8007f88:	0d5b      	lsrs	r3, r3, #21
 8007f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9c:	d112      	bne.n	8007fc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2180      	movs	r1, #128	@ 0x80
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff ff47 	bl	8007e3c <SPI_WaitFlagStateUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d016      	beq.n	8007fe2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb8:	f043 0220 	orr.w	r2, r3, #32
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e00f      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fda:	2b80      	cmp	r3, #128	@ 0x80
 8007fdc:	d0f2      	beq.n	8007fc4 <SPI_EndRxTxTransaction+0x78>
 8007fde:	e000      	b.n	8007fe2 <SPI_EndRxTxTransaction+0x96>
        break;
 8007fe0:	bf00      	nop
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000050 	.word	0x20000050
 8007ff0:	165e9f81 	.word	0x165e9f81

08007ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e041      	b.n	800808a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fb fdda 	bl	8003bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f000 fba8 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d001      	beq.n	80080ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e046      	b.n	800813a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a23      	ldr	r2, [pc, #140]	@ (8008148 <HAL_TIM_Base_Start+0xb4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d022      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c6:	d01d      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1f      	ldr	r2, [pc, #124]	@ (800814c <HAL_TIM_Base_Start+0xb8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008150 <HAL_TIM_Base_Start+0xbc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <HAL_TIM_Base_Start+0xc0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <HAL_TIM_Base_Start+0xc4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a19      	ldr	r2, [pc, #100]	@ (800815c <HAL_TIM_Base_Start+0xc8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_Base_Start+0x70>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a18      	ldr	r2, [pc, #96]	@ (8008160 <HAL_TIM_Base_Start+0xcc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d111      	bne.n	8008128 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d010      	beq.n	8008138 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008126:	e007      	b.n	8008138 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40010000 	.word	0x40010000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40010400 	.word	0x40010400
 800815c:	40014000 	.word	0x40014000
 8008160:	40001800 	.word	0x40001800

08008164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e041      	b.n	80081fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb fbfc 	bl	8003988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f000 faf0 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HAL_TIM_PWM_Start+0x24>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	bf14      	ite	ne
 8008220:	2301      	movne	r3, #1
 8008222:	2300      	moveq	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	e022      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b04      	cmp	r3, #4
 800822c:	d109      	bne.n	8008242 <HAL_TIM_PWM_Start+0x3e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	bf14      	ite	ne
 800823a:	2301      	movne	r3, #1
 800823c:	2300      	moveq	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e015      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d109      	bne.n	800825c <HAL_TIM_PWM_Start+0x58>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	bf14      	ite	ne
 8008254:	2301      	movne	r3, #1
 8008256:	2300      	moveq	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e008      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b01      	cmp	r3, #1
 8008266:	bf14      	ite	ne
 8008268:	2301      	movne	r3, #1
 800826a:	2300      	moveq	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e07c      	b.n	8008370 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0x82>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008284:	e013      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Start+0x92>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008294:	e00b      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_PWM_Start+0xa2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082a4:	e003      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2201      	movs	r2, #1
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fd5c 	bl	8008d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008378 <HAL_TIM_PWM_Start+0x174>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_TIM_PWM_Start+0xcc>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2c      	ldr	r2, [pc, #176]	@ (800837c <HAL_TIM_PWM_Start+0x178>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d101      	bne.n	80082d4 <HAL_TIM_PWM_Start+0xd0>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <HAL_TIM_PWM_Start+0xd2>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a22      	ldr	r2, [pc, #136]	@ (8008378 <HAL_TIM_PWM_Start+0x174>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d022      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fc:	d01d      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1f      	ldr	r2, [pc, #124]	@ (8008380 <HAL_TIM_PWM_Start+0x17c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d018      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1d      	ldr	r2, [pc, #116]	@ (8008384 <HAL_TIM_PWM_Start+0x180>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1c      	ldr	r2, [pc, #112]	@ (8008388 <HAL_TIM_PWM_Start+0x184>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00e      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a16      	ldr	r2, [pc, #88]	@ (800837c <HAL_TIM_PWM_Start+0x178>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a18      	ldr	r2, [pc, #96]	@ (800838c <HAL_TIM_PWM_Start+0x188>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIM_PWM_Start+0x136>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a16      	ldr	r2, [pc, #88]	@ (8008390 <HAL_TIM_PWM_Start+0x18c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d111      	bne.n	800835e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b06      	cmp	r3, #6
 800834a:	d010      	beq.n	800836e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	e007      	b.n	800836e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f042 0201 	orr.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40010000 	.word	0x40010000
 800837c:	40010400 	.word	0x40010400
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	40014000 	.word	0x40014000
 8008390:	40001800 	.word	0x40001800

08008394 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fce4 	bl	8008d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2e      	ldr	r2, [pc, #184]	@ (800846c <HAL_TIM_PWM_Stop+0xd8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_TIM_PWM_Stop+0x2c>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008470 <HAL_TIM_PWM_Stop+0xdc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <HAL_TIM_PWM_Stop+0x30>
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <HAL_TIM_PWM_Stop+0x32>
 80083c4:	2300      	movs	r3, #0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d017      	beq.n	80083fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10f      	bne.n	80083fa <HAL_TIM_PWM_Stop+0x66>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d107      	bne.n	80083fa <HAL_TIM_PWM_Stop+0x66>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1a      	ldr	r2, [r3, #32]
 8008400:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008404:	4013      	ands	r3, r2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10f      	bne.n	800842a <HAL_TIM_PWM_Stop+0x96>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a1a      	ldr	r2, [r3, #32]
 8008410:	f240 4344 	movw	r3, #1092	@ 0x444
 8008414:	4013      	ands	r3, r2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d107      	bne.n	800842a <HAL_TIM_PWM_Stop+0x96>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <HAL_TIM_PWM_Stop+0xa6>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008438:	e013      	b.n	8008462 <HAL_TIM_PWM_Stop+0xce>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d104      	bne.n	800844a <HAL_TIM_PWM_Stop+0xb6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008448:	e00b      	b.n	8008462 <HAL_TIM_PWM_Stop+0xce>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b08      	cmp	r3, #8
 800844e:	d104      	bne.n	800845a <HAL_TIM_PWM_Stop+0xc6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008458:	e003      	b.n	8008462 <HAL_TIM_PWM_Stop+0xce>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	40010000 	.word	0x40010000
 8008470:	40010400 	.word	0x40010400

08008474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800848a:	2b01      	cmp	r3, #1
 800848c:	d101      	bne.n	8008492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800848e:	2302      	movs	r3, #2
 8008490:	e0ae      	b.n	80085f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	f200 809f 	bhi.w	80085e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084a2:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084dd 	.word	0x080084dd
 80084ac:	080085e1 	.word	0x080085e1
 80084b0:	080085e1 	.word	0x080085e1
 80084b4:	080085e1 	.word	0x080085e1
 80084b8:	0800851d 	.word	0x0800851d
 80084bc:	080085e1 	.word	0x080085e1
 80084c0:	080085e1 	.word	0x080085e1
 80084c4:	080085e1 	.word	0x080085e1
 80084c8:	0800855f 	.word	0x0800855f
 80084cc:	080085e1 	.word	0x080085e1
 80084d0:	080085e1 	.word	0x080085e1
 80084d4:	080085e1 	.word	0x080085e1
 80084d8:	0800859f 	.word	0x0800859f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f9fc 	bl	80088e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0208 	orr.w	r2, r2, #8
 80084f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0204 	bic.w	r2, r2, #4
 8008506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6999      	ldr	r1, [r3, #24]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	619a      	str	r2, [r3, #24]
      break;
 800851a:	e064      	b.n	80085e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fa4c 	bl	80089c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6999      	ldr	r1, [r3, #24]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	021a      	lsls	r2, r3, #8
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	619a      	str	r2, [r3, #24]
      break;
 800855c:	e043      	b.n	80085e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 faa1 	bl	8008aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69da      	ldr	r2, [r3, #28]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0208 	orr.w	r2, r2, #8
 8008578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0204 	bic.w	r2, r2, #4
 8008588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69d9      	ldr	r1, [r3, #28]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	61da      	str	r2, [r3, #28]
      break;
 800859c:	e023      	b.n	80085e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 faf5 	bl	8008b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69d9      	ldr	r1, [r3, #28]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	021a      	lsls	r2, r3, #8
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	61da      	str	r2, [r3, #28]
      break;
 80085de:	e002      	b.n	80085e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
      break;
 80085e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_TIM_ConfigClockSource+0x1c>
 8008610:	2302      	movs	r3, #2
 8008612:	e0b4      	b.n	800877e <HAL_TIM_ConfigClockSource+0x186>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800863a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864c:	d03e      	beq.n	80086cc <HAL_TIM_ConfigClockSource+0xd4>
 800864e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008652:	f200 8087 	bhi.w	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865a:	f000 8086 	beq.w	800876a <HAL_TIM_ConfigClockSource+0x172>
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008662:	d87f      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b70      	cmp	r3, #112	@ 0x70
 8008666:	d01a      	beq.n	800869e <HAL_TIM_ConfigClockSource+0xa6>
 8008668:	2b70      	cmp	r3, #112	@ 0x70
 800866a:	d87b      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b60      	cmp	r3, #96	@ 0x60
 800866e:	d050      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x11a>
 8008670:	2b60      	cmp	r3, #96	@ 0x60
 8008672:	d877      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b50      	cmp	r3, #80	@ 0x50
 8008676:	d03c      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0xfa>
 8008678:	2b50      	cmp	r3, #80	@ 0x50
 800867a:	d873      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b40      	cmp	r3, #64	@ 0x40
 800867e:	d058      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x13a>
 8008680:	2b40      	cmp	r3, #64	@ 0x40
 8008682:	d86f      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b30      	cmp	r3, #48	@ 0x30
 8008686:	d064      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x15a>
 8008688:	2b30      	cmp	r3, #48	@ 0x30
 800868a:	d86b      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b20      	cmp	r3, #32
 800868e:	d060      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x15a>
 8008690:	2b20      	cmp	r3, #32
 8008692:	d867      	bhi.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d05c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x15a>
 8008698:	2b10      	cmp	r3, #16
 800869a:	d05a      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x15a>
 800869c:	e062      	b.n	8008764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086ae:	f000 fb41 	bl	8008d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	609a      	str	r2, [r3, #8]
      break;
 80086ca:	e04f      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086dc:	f000 fb2a 	bl	8008d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086ee:	609a      	str	r2, [r3, #8]
      break;
 80086f0:	e03c      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086fe:	461a      	mov	r2, r3
 8008700:	f000 fa9e 	bl	8008c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2150      	movs	r1, #80	@ 0x50
 800870a:	4618      	mov	r0, r3
 800870c:	f000 faf7 	bl	8008cfe <TIM_ITRx_SetConfig>
      break;
 8008710:	e02c      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800871e:	461a      	mov	r2, r3
 8008720:	f000 fabd 	bl	8008c9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2160      	movs	r1, #96	@ 0x60
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fae7 	bl	8008cfe <TIM_ITRx_SetConfig>
      break;
 8008730:	e01c      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800873e:	461a      	mov	r2, r3
 8008740:	f000 fa7e 	bl	8008c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2140      	movs	r1, #64	@ 0x40
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fad7 	bl	8008cfe <TIM_ITRx_SetConfig>
      break;
 8008750:	e00c      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f000 face 	bl	8008cfe <TIM_ITRx_SetConfig>
      break;
 8008762:	e003      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
      break;
 8008768:	e000      	b.n	800876c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800876a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a46      	ldr	r2, [pc, #280]	@ (80088b4 <TIM_Base_SetConfig+0x12c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a6:	d00f      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a43      	ldr	r2, [pc, #268]	@ (80088b8 <TIM_Base_SetConfig+0x130>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a42      	ldr	r2, [pc, #264]	@ (80088bc <TIM_Base_SetConfig+0x134>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d007      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a41      	ldr	r2, [pc, #260]	@ (80088c0 <TIM_Base_SetConfig+0x138>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a40      	ldr	r2, [pc, #256]	@ (80088c4 <TIM_Base_SetConfig+0x13c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d108      	bne.n	80087da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a35      	ldr	r2, [pc, #212]	@ (80088b4 <TIM_Base_SetConfig+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d02b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e8:	d027      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a32      	ldr	r2, [pc, #200]	@ (80088b8 <TIM_Base_SetConfig+0x130>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d023      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a31      	ldr	r2, [pc, #196]	@ (80088bc <TIM_Base_SetConfig+0x134>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d01f      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a30      	ldr	r2, [pc, #192]	@ (80088c0 <TIM_Base_SetConfig+0x138>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d01b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2f      	ldr	r2, [pc, #188]	@ (80088c4 <TIM_Base_SetConfig+0x13c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d017      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2e      	ldr	r2, [pc, #184]	@ (80088c8 <TIM_Base_SetConfig+0x140>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2d      	ldr	r2, [pc, #180]	@ (80088cc <TIM_Base_SetConfig+0x144>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00f      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2c      	ldr	r2, [pc, #176]	@ (80088d0 <TIM_Base_SetConfig+0x148>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a2b      	ldr	r2, [pc, #172]	@ (80088d4 <TIM_Base_SetConfig+0x14c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a2a      	ldr	r2, [pc, #168]	@ (80088d8 <TIM_Base_SetConfig+0x150>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d003      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a29      	ldr	r2, [pc, #164]	@ (80088dc <TIM_Base_SetConfig+0x154>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d108      	bne.n	800884c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a10      	ldr	r2, [pc, #64]	@ (80088b4 <TIM_Base_SetConfig+0x12c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a12      	ldr	r2, [pc, #72]	@ (80088c4 <TIM_Base_SetConfig+0x13c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d103      	bne.n	8008888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b01      	cmp	r3, #1
 8008898:	d105      	bne.n	80088a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	611a      	str	r2, [r3, #16]
  }
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40010400 	.word	0x40010400
 80088c8:	40014000 	.word	0x40014000
 80088cc:	40014400 	.word	0x40014400
 80088d0:	40014800 	.word	0x40014800
 80088d4:	40001800 	.word	0x40001800
 80088d8:	40001c00 	.word	0x40001c00
 80088dc:	40002000 	.word	0x40002000

080088e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f023 0201 	bic.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 0302 	bic.w	r3, r3, #2
 8008928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a20      	ldr	r2, [pc, #128]	@ (80089b8 <TIM_OC1_SetConfig+0xd8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_OC1_SetConfig+0x64>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a1f      	ldr	r2, [pc, #124]	@ (80089bc <TIM_OC1_SetConfig+0xdc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d10c      	bne.n	800895e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0308 	bic.w	r3, r3, #8
 800894a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 0304 	bic.w	r3, r3, #4
 800895c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a15      	ldr	r2, [pc, #84]	@ (80089b8 <TIM_OC1_SetConfig+0xd8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d003      	beq.n	800896e <TIM_OC1_SetConfig+0x8e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a14      	ldr	r2, [pc, #80]	@ (80089bc <TIM_OC1_SetConfig+0xdc>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d111      	bne.n	8008992 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800897c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4313      	orrs	r3, r2
 8008986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	621a      	str	r2, [r3, #32]
}
 80089ac:	bf00      	nop
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	40010000 	.word	0x40010000
 80089bc:	40010400 	.word	0x40010400

080089c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	f023 0210 	bic.w	r2, r3, #16
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f023 0320 	bic.w	r3, r3, #32
 8008a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a22      	ldr	r2, [pc, #136]	@ (8008aa4 <TIM_OC2_SetConfig+0xe4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d003      	beq.n	8008a28 <TIM_OC2_SetConfig+0x68>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a21      	ldr	r2, [pc, #132]	@ (8008aa8 <TIM_OC2_SetConfig+0xe8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d10d      	bne.n	8008a44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a17      	ldr	r2, [pc, #92]	@ (8008aa4 <TIM_OC2_SetConfig+0xe4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC2_SetConfig+0x94>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <TIM_OC2_SetConfig+0xe8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d113      	bne.n	8008a7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	621a      	str	r2, [r3, #32]
}
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40010000 	.word	0x40010000
 8008aa8:	40010400 	.word	0x40010400

08008aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a21      	ldr	r2, [pc, #132]	@ (8008b8c <TIM_OC3_SetConfig+0xe0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_OC3_SetConfig+0x66>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a20      	ldr	r2, [pc, #128]	@ (8008b90 <TIM_OC3_SetConfig+0xe4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d10d      	bne.n	8008b2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <TIM_OC3_SetConfig+0xe0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d003      	beq.n	8008b3e <TIM_OC3_SetConfig+0x92>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a15      	ldr	r2, [pc, #84]	@ (8008b90 <TIM_OC3_SetConfig+0xe4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d113      	bne.n	8008b66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	621a      	str	r2, [r3, #32]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40010400 	.word	0x40010400

08008b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a12      	ldr	r2, [pc, #72]	@ (8008c38 <TIM_OC4_SetConfig+0xa4>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d003      	beq.n	8008bfc <TIM_OC4_SetConfig+0x68>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a11      	ldr	r2, [pc, #68]	@ (8008c3c <TIM_OC4_SetConfig+0xa8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d109      	bne.n	8008c10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	019b      	lsls	r3, r3, #6
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40010400 	.word	0x40010400

08008c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	f023 0201 	bic.w	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f023 030a 	bic.w	r3, r3, #10
 8008c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	621a      	str	r2, [r3, #32]
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f023 0210 	bic.w	r2, r3, #16
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	031b      	lsls	r3, r3, #12
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	f043 0307 	orr.w	r3, r3, #7
 8008d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	609a      	str	r2, [r3, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	021a      	lsls	r2, r3, #8
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	431a      	orrs	r2, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	609a      	str	r2, [r3, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2201      	movs	r2, #1
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1a      	ldr	r2, [r3, #32]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	43db      	mvns	r3, r3
 8008d96:	401a      	ands	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1a      	ldr	r2, [r3, #32]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dac:	431a      	orrs	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
	...

08008dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e05a      	b.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a21      	ldr	r2, [pc, #132]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d022      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e24:	d01d      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d018      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00e      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a18      	ldr	r2, [pc, #96]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d009      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a17      	ldr	r2, [pc, #92]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d004      	beq.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a15      	ldr	r2, [pc, #84]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d10c      	bne.n	8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	40010000 	.word	0x40010000
 8008ea0:	40000400 	.word	0x40000400
 8008ea4:	40000800 	.word	0x40000800
 8008ea8:	40000c00 	.word	0x40000c00
 8008eac:	40010400 	.word	0x40010400
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40001800 	.word	0x40001800

08008eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e03d      	b.n	8008f50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e042      	b.n	8008ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fa ff8c 	bl	8003ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	@ 0x24
 8008f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fea1 	bl	8009ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695a      	ldr	r2, [r3, #20]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08c      	sub	sp, #48	@ 0x30
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b20      	cmp	r3, #32
 8009014:	d14a      	bne.n	80090ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e043      	b.n	80090ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	461a      	mov	r2, r3
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fbf5 	bl	8009828 <UART_Start_Receive_DMA>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009048:	2b00      	cmp	r3, #0
 800904a:	d12c      	bne.n	80090a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009050:	2b01      	cmp	r3, #1
 8009052:	d125      	bne.n	80090a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009054:	2300      	movs	r3, #0
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	617b      	str	r3, [r7, #20]
   return(result);
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f043 0310 	orr.w	r3, r3, #16
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	330c      	adds	r3, #12
 8009088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800908a:	627a      	str	r2, [r7, #36]	@ 0x24
 800908c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6a39      	ldr	r1, [r7, #32]
 8009090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	61fb      	str	r3, [r7, #28]
   return(result);
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800909e:	e002      	b.n	80090a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80090a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090aa:	e000      	b.n	80090ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3730      	adds	r7, #48	@ 0x30
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b0ba      	sub	sp, #232	@ 0xe8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80090de:	2300      	movs	r3, #0
 80090e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80090f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10f      	bne.n	800911e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fd27 	bl	8009b6a <UART_Receive_IT>
      return;
 800911c:	e25b      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800911e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80de 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
 8009128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009138:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80d1 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915e:	f043 0201 	orr.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
 8009172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a6:	f043 0204 	orr.w	r2, r3, #4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d011      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
 80091ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d105      	bne.n	80091d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d6:	f043 0208 	orr.w	r2, r3, #8
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 81f2 	beq.w	80095cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fcb2 	bl	8009b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b40      	cmp	r3, #64	@ 0x40
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <HAL_UART_IRQHandler+0x17a>
 800922a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d04f      	beq.n	80092d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fbba 	bl	80099ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009242:	2b40      	cmp	r3, #64	@ 0x40
 8009244:	d141      	bne.n	80092ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3314      	adds	r3, #20
 800924c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800925c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009272:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800927e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800928a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1d9      	bne.n	8009246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d013      	beq.n	80092c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929e:	4a7e      	ldr	r2, [pc, #504]	@ (8009498 <HAL_UART_IRQHandler+0x3e0>)
 80092a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fc fa7a 	bl	80057a0 <HAL_DMA_Abort_IT>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d016      	beq.n	80092e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	e00e      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9a8 	bl	8009618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c8:	e00a      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9a4 	bl	8009618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d0:	e006      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9a0 	bl	8009618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80092de:	e175      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	bf00      	nop
    return;
 80092e2:	e173      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 814f 	bne.w	800958c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8148 	beq.w	800958c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8141 	beq.w	800958c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	f040 80b6 	bne.w	800949c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800933c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8145 	beq.w	80095d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800934a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800934e:	429a      	cmp	r2, r3
 8009350:	f080 813e 	bcs.w	80095d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800935a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009366:	f000 8088 	beq.w	800947a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	330c      	adds	r3, #12
 8009370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80093ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d9      	bne.n	800936a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3314      	adds	r3, #20
 80093bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e1      	bne.n	80093b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3314      	adds	r3, #20
 8009412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009416:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009418:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800941c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800944a:	f023 0310 	bic.w	r3, r3, #16
 800944e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800945c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800945e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800946a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e3      	bne.n	8009438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009474:	4618      	mov	r0, r3
 8009476:	f7fc f923 	bl	80056c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009488:	b29b      	uxth	r3, r3
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	b29b      	uxth	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7f7 fe17 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009496:	e09b      	b.n	80095d0 <HAL_UART_IRQHandler+0x518>
 8009498:	08009a73 	.word	0x08009a73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 808e 	beq.w	80095d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8089 	beq.w	80095d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	330c      	adds	r3, #12
 80094e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e3      	bne.n	80094c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	623b      	str	r3, [r7, #32]
   return(result);
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f023 0301 	bic.w	r3, r3, #1
 8009510:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3314      	adds	r3, #20
 800951a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800951e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e3      	bne.n	80094fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0310 	bic.w	r3, r3, #16
 8009556:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009564:	61fa      	str	r2, [r7, #28]
 8009566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	69b9      	ldr	r1, [r7, #24]
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	617b      	str	r3, [r7, #20]
   return(result);
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e3      	bne.n	8009540 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800957e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7f7 fd9d 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800958a:	e023      	b.n	80095d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800958c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	d009      	beq.n	80095ac <HAL_UART_IRQHandler+0x4f4>
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800959c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fa78 	bl	8009a9a <UART_Transmit_IT>
    return;
 80095aa:	e014      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00e      	beq.n	80095d6 <HAL_UART_IRQHandler+0x51e>
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fab8 	bl	8009b3a <UART_EndTransmit_IT>
    return;
 80095ca:	e004      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80095cc:	bf00      	nop
 80095ce:	e002      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095d0:	bf00      	nop
 80095d2:	e000      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095d4:	bf00      	nop
  }
}
 80095d6:	37e8      	adds	r7, #232	@ 0xe8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b09c      	sub	sp, #112	@ 0x70
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009644:	2b00      	cmp	r3, #0
 8009646:	d172      	bne.n	800972e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800964a:	2200      	movs	r2, #0
 800964c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800965e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	330c      	adds	r3, #12
 800966c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800966e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009670:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009674:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800967c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e5      	bne.n	800964e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3314      	adds	r3, #20
 8009688:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	667b      	str	r3, [r7, #100]	@ 0x64
 800969a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3314      	adds	r3, #20
 80096a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80096a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80096a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3314      	adds	r3, #20
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	623b      	str	r3, [r7, #32]
   return(result);
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80096ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3314      	adds	r3, #20
 80096d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80096d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d119      	bne.n	800972e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	330c      	adds	r3, #12
 8009700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	60fb      	str	r3, [r7, #12]
   return(result);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f023 0310 	bic.w	r3, r3, #16
 8009710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	330c      	adds	r3, #12
 8009718:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800971a:	61fa      	str	r2, [r7, #28]
 800971c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	69b9      	ldr	r1, [r7, #24]
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	617b      	str	r3, [r7, #20]
   return(result);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e5      	bne.n	80096fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800972e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009730:	2200      	movs	r2, #0
 8009732:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009738:	2b01      	cmp	r3, #1
 800973a:	d106      	bne.n	800974a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800973c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800973e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009740:	4619      	mov	r1, r3
 8009742:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009744:	f7f7 fcbe 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009748:	e002      	b.n	8009750 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800974a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800974c:	f7ff ff50 	bl	80095f0 <HAL_UART_RxCpltCallback>
}
 8009750:	bf00      	nop
 8009752:	3770      	adds	r7, #112	@ 0x70
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009770:	2b01      	cmp	r3, #1
 8009772:	d108      	bne.n	8009786 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	4619      	mov	r1, r3
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7f7 fca0 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009784:	e002      	b.n	800978c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff ff3c 	bl	8009604 <HAL_UART_RxHalfCpltCallback>
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b0:	2b80      	cmp	r3, #128	@ 0x80
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b21      	cmp	r3, #33	@ 0x21
 80097c6:	d108      	bne.n	80097da <UART_DMAError+0x46>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f000 f8c1 	bl	800995c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e4:	2b40      	cmp	r3, #64	@ 0x40
 80097e6:	bf0c      	ite	eq
 80097e8:	2301      	moveq	r3, #1
 80097ea:	2300      	movne	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b22      	cmp	r3, #34	@ 0x22
 80097fa:	d108      	bne.n	800980e <UART_DMAError+0x7a>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2200      	movs	r2, #0
 8009806:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009808:	68b8      	ldr	r0, [r7, #8]
 800980a:	f000 f8cf 	bl	80099ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	f043 0210 	orr.w	r2, r3, #16
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800981a:	68b8      	ldr	r0, [r7, #8]
 800981c:	f7ff fefc 	bl	8009618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b098      	sub	sp, #96	@ 0x60
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	88fa      	ldrh	r2, [r7, #6]
 8009840:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2222      	movs	r2, #34	@ 0x22
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009854:	4a3e      	ldr	r2, [pc, #248]	@ (8009950 <UART_Start_Receive_DMA+0x128>)
 8009856:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985c:	4a3d      	ldr	r2, [pc, #244]	@ (8009954 <UART_Start_Receive_DMA+0x12c>)
 800985e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009864:	4a3c      	ldr	r2, [pc, #240]	@ (8009958 <UART_Start_Receive_DMA+0x130>)
 8009866:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800986c:	2200      	movs	r2, #0
 800986e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009870:	f107 0308 	add.w	r3, r7, #8
 8009874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3304      	adds	r3, #4
 8009880:	4619      	mov	r1, r3
 8009882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	f7fb fec2 	bl	8005610 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	613b      	str	r3, [r7, #16]
 80098a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d019      	beq.n	80098de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	330c      	adds	r3, #12
 80098b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	330c      	adds	r3, #12
 80098c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80098cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80098d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e5      	bne.n	80098aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3314      	adds	r3, #20
 80098e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3314      	adds	r3, #20
 80098fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e5      	bne.n	80098de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3314      	adds	r3, #20
 8009918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	617b      	str	r3, [r7, #20]
   return(result);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009928:	653b      	str	r3, [r7, #80]	@ 0x50
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3314      	adds	r3, #20
 8009930:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009932:	627a      	str	r2, [r7, #36]	@ 0x24
 8009934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6a39      	ldr	r1, [r7, #32]
 8009938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e5      	bne.n	8009912 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3760      	adds	r7, #96	@ 0x60
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	0800962d 	.word	0x0800962d
 8009954:	08009759 	.word	0x08009759
 8009958:	08009795 	.word	0x08009795

0800995c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b089      	sub	sp, #36	@ 0x24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	60bb      	str	r3, [r7, #8]
   return(result);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800997a:	61fb      	str	r3, [r7, #28]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	330c      	adds	r3, #12
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	61ba      	str	r2, [r7, #24]
 8009986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	613b      	str	r3, [r7, #16]
   return(result);
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e5      	bne.n	8009964 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80099a0:	bf00      	nop
 80099a2:	3724      	adds	r7, #36	@ 0x24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b095      	sub	sp, #84	@ 0x54
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	330c      	adds	r3, #12
 80099d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3314      	adds	r3, #20
 80099ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e5      	bne.n	80099e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d119      	bne.n	8009a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	330c      	adds	r3, #12
 8009a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f023 0310 	bic.w	r3, r3, #16
 8009a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	330c      	adds	r3, #12
 8009a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a44:	61ba      	str	r2, [r7, #24]
 8009a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6979      	ldr	r1, [r7, #20]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	613b      	str	r3, [r7, #16]
   return(result);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e5      	bne.n	8009a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a66:	bf00      	nop
 8009a68:	3754      	adds	r7, #84	@ 0x54
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff fdc3 	bl	8009618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b085      	sub	sp, #20
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b21      	cmp	r3, #33	@ 0x21
 8009aac:	d13e      	bne.n	8009b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab6:	d114      	bne.n	8009ae2 <UART_Transmit_IT+0x48>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	1c9a      	adds	r2, r3, #2
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	621a      	str	r2, [r3, #32]
 8009ae0:	e008      	b.n	8009af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	1c59      	adds	r1, r3, #1
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6211      	str	r1, [r2, #32]
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b01      	subs	r3, #1
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	4619      	mov	r1, r3
 8009b02:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10f      	bne.n	8009b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fd3e 	bl	80095dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b08c      	sub	sp, #48	@ 0x30
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b22      	cmp	r3, #34	@ 0x22
 8009b7c:	f040 80ae 	bne.w	8009cdc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b88:	d117      	bne.n	8009bba <UART_Receive_IT+0x50>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d113      	bne.n	8009bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb2:	1c9a      	adds	r2, r3, #2
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bb8:	e026      	b.n	8009c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bcc:	d007      	beq.n	8009bde <UART_Receive_IT+0x74>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <UART_Receive_IT+0x82>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	e008      	b.n	8009bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4619      	mov	r1, r3
 8009c16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d15d      	bne.n	8009cd8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0220 	bic.w	r2, r2, #32
 8009c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	695a      	ldr	r2, [r3, #20]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 0201 	bic.w	r2, r2, #1
 8009c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d135      	bne.n	8009cce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	613b      	str	r3, [r7, #16]
   return(result);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f023 0310 	bic.w	r3, r3, #16
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c88:	623a      	str	r2, [r7, #32]
 8009c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	69f9      	ldr	r1, [r7, #28]
 8009c8e:	6a3a      	ldr	r2, [r7, #32]
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e5      	bne.n	8009c68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0310 	and.w	r3, r3, #16
 8009ca6:	2b10      	cmp	r3, #16
 8009ca8:	d10a      	bne.n	8009cc0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7f7 f9fc 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
 8009ccc:	e002      	b.n	8009cd4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff fc8e 	bl	80095f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e002      	b.n	8009cde <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e000      	b.n	8009cde <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009cdc:	2302      	movs	r3, #2
  }
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3730      	adds	r7, #48	@ 0x30
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cec:	b0c0      	sub	sp, #256	@ 0x100
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d04:	68d9      	ldr	r1, [r3, #12]
 8009d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	ea40 0301 	orr.w	r3, r0, r1
 8009d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	431a      	orrs	r2, r3
 8009d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009d40:	f021 010c 	bic.w	r1, r1, #12
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d4e:	430b      	orrs	r3, r1
 8009d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d62:	6999      	ldr	r1, [r3, #24]
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	ea40 0301 	orr.w	r3, r0, r1
 8009d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb4 <UART_SetConfig+0x2cc>)
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d005      	beq.n	8009d88 <UART_SetConfig+0xa0>
 8009d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b8d      	ldr	r3, [pc, #564]	@ (8009fb8 <UART_SetConfig+0x2d0>)
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d104      	bne.n	8009d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d88:	f7fd fdf0 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 8009d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d90:	e003      	b.n	8009d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d92:	f7fd fdd7 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8009d96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da4:	f040 810c 	bne.w	8009fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009db2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	1891      	adds	r1, r2, r2
 8009dc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009dc2:	415b      	adcs	r3, r3
 8009dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009dca:	4621      	mov	r1, r4
 8009dcc:	eb12 0801 	adds.w	r8, r2, r1
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	eb43 0901 	adc.w	r9, r3, r1
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dea:	4690      	mov	r8, r2
 8009dec:	4699      	mov	r9, r3
 8009dee:	4623      	mov	r3, r4
 8009df0:	eb18 0303 	adds.w	r3, r8, r3
 8009df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009df8:	462b      	mov	r3, r5
 8009dfa:	eb49 0303 	adc.w	r3, r9, r3
 8009dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009e16:	460b      	mov	r3, r1
 8009e18:	18db      	adds	r3, r3, r3
 8009e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	eb42 0303 	adc.w	r3, r2, r3
 8009e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009e2c:	f7f6 f9d8 	bl	80001e0 <__aeabi_uldivmod>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4b61      	ldr	r3, [pc, #388]	@ (8009fbc <UART_SetConfig+0x2d4>)
 8009e36:	fba3 2302 	umull	r2, r3, r3, r2
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	011c      	lsls	r4, r3, #4
 8009e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009e50:	4642      	mov	r2, r8
 8009e52:	464b      	mov	r3, r9
 8009e54:	1891      	adds	r1, r2, r2
 8009e56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009e58:	415b      	adcs	r3, r3
 8009e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009e60:	4641      	mov	r1, r8
 8009e62:	eb12 0a01 	adds.w	sl, r2, r1
 8009e66:	4649      	mov	r1, r9
 8009e68:	eb43 0b01 	adc.w	fp, r3, r1
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e80:	4692      	mov	sl, r2
 8009e82:	469b      	mov	fp, r3
 8009e84:	4643      	mov	r3, r8
 8009e86:	eb1a 0303 	adds.w	r3, sl, r3
 8009e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	eb4b 0303 	adc.w	r3, fp, r3
 8009e94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009eac:	460b      	mov	r3, r1
 8009eae:	18db      	adds	r3, r3, r3
 8009eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	eb42 0303 	adc.w	r3, r2, r3
 8009eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ec2:	f7f6 f98d 	bl	80001e0 <__aeabi_uldivmod>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8009fbc <UART_SetConfig+0x2d4>)
 8009ece:	fba3 2301 	umull	r2, r3, r3, r1
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	2264      	movs	r2, #100	@ 0x64
 8009ed6:	fb02 f303 	mul.w	r3, r2, r3
 8009eda:	1acb      	subs	r3, r1, r3
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ee2:	4b36      	ldr	r3, [pc, #216]	@ (8009fbc <UART_SetConfig+0x2d4>)
 8009ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8009ee8:	095b      	lsrs	r3, r3, #5
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ef0:	441c      	add	r4, r3
 8009ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009efc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009f04:	4642      	mov	r2, r8
 8009f06:	464b      	mov	r3, r9
 8009f08:	1891      	adds	r1, r2, r2
 8009f0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009f0c:	415b      	adcs	r3, r3
 8009f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009f14:	4641      	mov	r1, r8
 8009f16:	1851      	adds	r1, r2, r1
 8009f18:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	414b      	adcs	r3, r1
 8009f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f20:	f04f 0200 	mov.w	r2, #0
 8009f24:	f04f 0300 	mov.w	r3, #0
 8009f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009f2c:	4659      	mov	r1, fp
 8009f2e:	00cb      	lsls	r3, r1, #3
 8009f30:	4651      	mov	r1, sl
 8009f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f36:	4651      	mov	r1, sl
 8009f38:	00ca      	lsls	r2, r1, #3
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4642      	mov	r2, r8
 8009f42:	189b      	adds	r3, r3, r2
 8009f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f48:	464b      	mov	r3, r9
 8009f4a:	460a      	mov	r2, r1
 8009f4c:	eb42 0303 	adc.w	r3, r2, r3
 8009f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f68:	460b      	mov	r3, r1
 8009f6a:	18db      	adds	r3, r3, r3
 8009f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f6e:	4613      	mov	r3, r2
 8009f70:	eb42 0303 	adc.w	r3, r2, r3
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009f7e:	f7f6 f92f 	bl	80001e0 <__aeabi_uldivmod>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4b0d      	ldr	r3, [pc, #52]	@ (8009fbc <UART_SetConfig+0x2d4>)
 8009f88:	fba3 1302 	umull	r1, r3, r3, r2
 8009f8c:	095b      	lsrs	r3, r3, #5
 8009f8e:	2164      	movs	r1, #100	@ 0x64
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	3332      	adds	r3, #50	@ 0x32
 8009f9a:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <UART_SetConfig+0x2d4>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	f003 0207 	and.w	r2, r3, #7
 8009fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4422      	add	r2, r4
 8009fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fb0:	e106      	b.n	800a1c0 <UART_SetConfig+0x4d8>
 8009fb2:	bf00      	nop
 8009fb4:	40011000 	.word	0x40011000
 8009fb8:	40011400 	.word	0x40011400
 8009fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009fca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009fd2:	4642      	mov	r2, r8
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	1891      	adds	r1, r2, r2
 8009fd8:	6239      	str	r1, [r7, #32]
 8009fda:	415b      	adcs	r3, r3
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	1854      	adds	r4, r2, r1
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	eb43 0501 	adc.w	r5, r3, r1
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	f04f 0300 	mov.w	r3, #0
 8009ff4:	00eb      	lsls	r3, r5, #3
 8009ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ffa:	00e2      	lsls	r2, r4, #3
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	461d      	mov	r5, r3
 800a000:	4643      	mov	r3, r8
 800a002:	18e3      	adds	r3, r4, r3
 800a004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a008:	464b      	mov	r3, r9
 800a00a:	eb45 0303 	adc.w	r3, r5, r3
 800a00e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a01e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a02e:	4629      	mov	r1, r5
 800a030:	008b      	lsls	r3, r1, #2
 800a032:	4621      	mov	r1, r4
 800a034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a038:	4621      	mov	r1, r4
 800a03a:	008a      	lsls	r2, r1, #2
 800a03c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a040:	f7f6 f8ce 	bl	80001e0 <__aeabi_uldivmod>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4b60      	ldr	r3, [pc, #384]	@ (800a1cc <UART_SetConfig+0x4e4>)
 800a04a:	fba3 2302 	umull	r2, r3, r3, r2
 800a04e:	095b      	lsrs	r3, r3, #5
 800a050:	011c      	lsls	r4, r3, #4
 800a052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a056:	2200      	movs	r2, #0
 800a058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a05c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	1891      	adds	r1, r2, r2
 800a06a:	61b9      	str	r1, [r7, #24]
 800a06c:	415b      	adcs	r3, r3
 800a06e:	61fb      	str	r3, [r7, #28]
 800a070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a074:	4641      	mov	r1, r8
 800a076:	1851      	adds	r1, r2, r1
 800a078:	6139      	str	r1, [r7, #16]
 800a07a:	4649      	mov	r1, r9
 800a07c:	414b      	adcs	r3, r1
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	f04f 0300 	mov.w	r3, #0
 800a088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a08c:	4659      	mov	r1, fp
 800a08e:	00cb      	lsls	r3, r1, #3
 800a090:	4651      	mov	r1, sl
 800a092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a096:	4651      	mov	r1, sl
 800a098:	00ca      	lsls	r2, r1, #3
 800a09a:	4610      	mov	r0, r2
 800a09c:	4619      	mov	r1, r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	189b      	adds	r3, r3, r2
 800a0a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	eb42 0303 	adc.w	r3, r2, r3
 800a0b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a0c0:	f04f 0200 	mov.w	r2, #0
 800a0c4:	f04f 0300 	mov.w	r3, #0
 800a0c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	008b      	lsls	r3, r1, #2
 800a0d0:	4641      	mov	r1, r8
 800a0d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0d6:	4641      	mov	r1, r8
 800a0d8:	008a      	lsls	r2, r1, #2
 800a0da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a0de:	f7f6 f87f 	bl	80001e0 <__aeabi_uldivmod>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4b38      	ldr	r3, [pc, #224]	@ (800a1cc <UART_SetConfig+0x4e4>)
 800a0ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ee:	095b      	lsrs	r3, r3, #5
 800a0f0:	2264      	movs	r2, #100	@ 0x64
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	1acb      	subs	r3, r1, r3
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	3332      	adds	r3, #50	@ 0x32
 800a0fc:	4a33      	ldr	r2, [pc, #204]	@ (800a1cc <UART_SetConfig+0x4e4>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	095b      	lsrs	r3, r3, #5
 800a104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a108:	441c      	add	r4, r3
 800a10a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a10e:	2200      	movs	r2, #0
 800a110:	673b      	str	r3, [r7, #112]	@ 0x70
 800a112:	677a      	str	r2, [r7, #116]	@ 0x74
 800a114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	1891      	adds	r1, r2, r2
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	415b      	adcs	r3, r3
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a128:	4641      	mov	r1, r8
 800a12a:	1851      	adds	r1, r2, r1
 800a12c:	6039      	str	r1, [r7, #0]
 800a12e:	4649      	mov	r1, r9
 800a130:	414b      	adcs	r3, r1
 800a132:	607b      	str	r3, [r7, #4]
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	f04f 0300 	mov.w	r3, #0
 800a13c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a140:	4659      	mov	r1, fp
 800a142:	00cb      	lsls	r3, r1, #3
 800a144:	4651      	mov	r1, sl
 800a146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a14a:	4651      	mov	r1, sl
 800a14c:	00ca      	lsls	r2, r1, #3
 800a14e:	4610      	mov	r0, r2
 800a150:	4619      	mov	r1, r3
 800a152:	4603      	mov	r3, r0
 800a154:	4642      	mov	r2, r8
 800a156:	189b      	adds	r3, r3, r2
 800a158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a15a:	464b      	mov	r3, r9
 800a15c:	460a      	mov	r2, r1
 800a15e:	eb42 0303 	adc.w	r3, r2, r3
 800a162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a16e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a170:	f04f 0200 	mov.w	r2, #0
 800a174:	f04f 0300 	mov.w	r3, #0
 800a178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a17c:	4649      	mov	r1, r9
 800a17e:	008b      	lsls	r3, r1, #2
 800a180:	4641      	mov	r1, r8
 800a182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a186:	4641      	mov	r1, r8
 800a188:	008a      	lsls	r2, r1, #2
 800a18a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a18e:	f7f6 f827 	bl	80001e0 <__aeabi_uldivmod>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <UART_SetConfig+0x4e4>)
 800a198:	fba3 1302 	umull	r1, r3, r3, r2
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	2164      	movs	r1, #100	@ 0x64
 800a1a0:	fb01 f303 	mul.w	r3, r1, r3
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	3332      	adds	r3, #50	@ 0x32
 800a1aa:	4a08      	ldr	r2, [pc, #32]	@ (800a1cc <UART_SetConfig+0x4e4>)
 800a1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b0:	095b      	lsrs	r3, r3, #5
 800a1b2:	f003 020f 	and.w	r2, r3, #15
 800a1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4422      	add	r2, r4
 800a1be:	609a      	str	r2, [r3, #8]
}
 800a1c0:	bf00      	nop
 800a1c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1cc:	51eb851f 	.word	0x51eb851f

0800a1d0 <__NVIC_SetPriority>:
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	db0a      	blt.n	800a1fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	490c      	ldr	r1, [pc, #48]	@ (800a21c <__NVIC_SetPriority+0x4c>)
 800a1ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ee:	0112      	lsls	r2, r2, #4
 800a1f0:	b2d2      	uxtb	r2, r2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a1f8:	e00a      	b.n	800a210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	4908      	ldr	r1, [pc, #32]	@ (800a220 <__NVIC_SetPriority+0x50>)
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	f003 030f 	and.w	r3, r3, #15
 800a206:	3b04      	subs	r3, #4
 800a208:	0112      	lsls	r2, r2, #4
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	440b      	add	r3, r1
 800a20e:	761a      	strb	r2, [r3, #24]
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	e000e100 	.word	0xe000e100
 800a220:	e000ed00 	.word	0xe000ed00

0800a224 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a228:	2100      	movs	r1, #0
 800a22a:	f06f 0004 	mvn.w	r0, #4
 800a22e:	f7ff ffcf 	bl	800a1d0 <__NVIC_SetPriority>
#endif
}
 800a232:	bf00      	nop
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	603b      	str	r3, [r7, #0]
  return(result);
 800a244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a24a:	f06f 0305 	mvn.w	r3, #5
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	e00c      	b.n	800a26c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a252:	4b0a      	ldr	r3, [pc, #40]	@ (800a27c <osKernelInitialize+0x44>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a25a:	4b08      	ldr	r3, [pc, #32]	@ (800a27c <osKernelInitialize+0x44>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a260:	2300      	movs	r3, #0
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	e002      	b.n	800a26c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a26c:	687b      	ldr	r3, [r7, #4]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	20000d70 	.word	0x20000d70

0800a280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a286:	f3ef 8305 	mrs	r3, IPSR
 800a28a:	603b      	str	r3, [r7, #0]
  return(result);
 800a28c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a292:	f06f 0305 	mvn.w	r3, #5
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	e010      	b.n	800a2bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a29a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <osKernelStart+0x48>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d109      	bne.n	800a2b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2a2:	f7ff ffbf 	bl	800a224 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2a6:	4b08      	ldr	r3, [pc, #32]	@ (800a2c8 <osKernelStart+0x48>)
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2ac:	f001 f892 	bl	800b3d4 <vTaskStartScheduler>
      stat = osOK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	e002      	b.n	800a2bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2bc:	687b      	ldr	r3, [r7, #4]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000d70 	.word	0x20000d70

0800a2cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08e      	sub	sp, #56	@ 0x38
 800a2d0:	af04      	add	r7, sp, #16
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2dc:	f3ef 8305 	mrs	r3, IPSR
 800a2e0:	617b      	str	r3, [r7, #20]
  return(result);
 800a2e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d17e      	bne.n	800a3e6 <osThreadNew+0x11a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d07b      	beq.n	800a3e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2ee:	2380      	movs	r3, #128	@ 0x80
 800a2f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2f2:	2318      	movs	r3, #24
 800a2f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d045      	beq.n	800a392 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <osThreadNew+0x48>
        name = attr->name;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d008      	beq.n	800a33a <osThreadNew+0x6e>
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b38      	cmp	r3, #56	@ 0x38
 800a32c:	d805      	bhi.n	800a33a <osThreadNew+0x6e>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <osThreadNew+0x72>
        return (NULL);
 800a33a:	2300      	movs	r3, #0
 800a33c:	e054      	b.n	800a3e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00e      	beq.n	800a374 <osThreadNew+0xa8>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a35c:	d90a      	bls.n	800a374 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a362:	2b00      	cmp	r3, #0
 800a364:	d006      	beq.n	800a374 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <osThreadNew+0xa8>
        mem = 1;
 800a36e:	2301      	movs	r3, #1
 800a370:	61bb      	str	r3, [r7, #24]
 800a372:	e010      	b.n	800a396 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10c      	bne.n	800a396 <osThreadNew+0xca>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d108      	bne.n	800a396 <osThreadNew+0xca>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <osThreadNew+0xca>
          mem = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	61bb      	str	r3, [r7, #24]
 800a390:	e001      	b.n	800a396 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d110      	bne.n	800a3be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3a4:	9202      	str	r2, [sp, #8]
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fe1a 	bl	800afec <xTaskCreateStatic>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	e013      	b.n	800a3e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d110      	bne.n	800a3e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	f107 0310 	add.w	r3, r7, #16
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 fe68 	bl	800b0ac <xTaskCreate>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d001      	beq.n	800a3e6 <osThreadNew+0x11a>
            hTask = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3e6:	693b      	ldr	r3, [r7, #16]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3728      	adds	r7, #40	@ 0x28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f8:	f3ef 8305 	mrs	r3, IPSR
 800a3fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <osDelay+0x1c>
    stat = osErrorISR;
 800a404:	f06f 0305 	mvn.w	r3, #5
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e007      	b.n	800a41c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 ffa6 	bl	800b368 <vTaskDelay>
    }
  }

  return (stat);
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4a07      	ldr	r2, [pc, #28]	@ (800a454 <vApplicationGetIdleTaskMemory+0x2c>)
 800a438:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a06      	ldr	r2, [pc, #24]	@ (800a458 <vApplicationGetIdleTaskMemory+0x30>)
 800a43e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2280      	movs	r2, #128	@ 0x80
 800a444:	601a      	str	r2, [r3, #0]
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000d74 	.word	0x20000d74
 800a458:	20000e1c 	.word	0x20000e1c

0800a45c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4a07      	ldr	r2, [pc, #28]	@ (800a488 <vApplicationGetTimerTaskMemory+0x2c>)
 800a46c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4a06      	ldr	r2, [pc, #24]	@ (800a48c <vApplicationGetTimerTaskMemory+0x30>)
 800a472:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a47a:	601a      	str	r2, [r3, #0]
}
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	2000101c 	.word	0x2000101c
 800a48c:	200010c4 	.word	0x200010c4

0800a490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 0208 	add.w	r2, r3, #8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f103 0208 	add.w	r2, r3, #8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 0208 	add.w	r2, r3, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
}
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d103      	bne.n	800a552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	e00c      	b.n	800a56c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3308      	adds	r3, #8
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e002      	b.n	800a560 <vListInsert+0x2e>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d2f6      	bcs.n	800a55a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	601a      	str	r2, [r3, #0]
}
 800a598:	bf00      	nop
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6892      	ldr	r2, [r2, #8]
 800a5ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6852      	ldr	r2, [r2, #4]
 800a5c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d103      	bne.n	800a5d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10b      	bne.n	800a624 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	e7fd      	b.n	800a620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a624:	f002 fa80 	bl	800cb28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a630:	68f9      	ldr	r1, [r7, #12]
 800a632:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a634:	fb01 f303 	mul.w	r3, r1, r3
 800a638:	441a      	add	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a654:	3b01      	subs	r3, #1
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	441a      	add	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	22ff      	movs	r2, #255	@ 0xff
 800a668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	22ff      	movs	r2, #255	@ 0xff
 800a670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d114      	bne.n	800a6a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01a      	beq.n	800a6b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3310      	adds	r3, #16
 800a686:	4618      	mov	r0, r3
 800a688:	f001 fa3c 	bl	800bb04 <xTaskRemoveFromEventList>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d012      	beq.n	800a6b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a692:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c8 <xQueueGenericReset+0xd0>)
 800a694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	e009      	b.n	800a6b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3310      	adds	r3, #16
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff fef1 	bl	800a490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3324      	adds	r3, #36	@ 0x24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff feec 	bl	800a490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6b8:	f002 fa68 	bl	800cb8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6bc:	2301      	movs	r3, #1
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	@ 0x38
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10b      	bne.n	800a6f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <xQueueGenericCreateStatic+0x56>
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <xQueueGenericCreateStatic+0x5a>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <xQueueGenericCreateStatic+0x5c>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10b      	bne.n	800a744 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	623b      	str	r3, [r7, #32]
}
 800a73e:	bf00      	nop
 800a740:	bf00      	nop
 800a742:	e7fd      	b.n	800a740 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <xQueueGenericCreateStatic+0x84>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <xQueueGenericCreateStatic+0x88>
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <xQueueGenericCreateStatic+0x8a>
 800a754:	2300      	movs	r3, #0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	61fb      	str	r3, [r7, #28]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a772:	2350      	movs	r3, #80	@ 0x50
 800a774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b50      	cmp	r3, #80	@ 0x50
 800a77a:	d00b      	beq.n	800a794 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	61bb      	str	r3, [r7, #24]
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	e7fd      	b.n	800a790 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a794:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00d      	beq.n	800a7bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f805 	bl	800a7c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3730      	adds	r7, #48	@ 0x30
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	e002      	b.n	800a7e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	69b8      	ldr	r0, [r7, #24]
 800a7f8:	f7ff fefe 	bl	800a5f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	78fa      	ldrb	r2, [r7, #3]
 800a800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08e      	sub	sp, #56	@ 0x38
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a81a:	2300      	movs	r3, #0
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10b      	bne.n	800a840 <xQueueGenericSend+0x34>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a83a:	bf00      	nop
 800a83c:	bf00      	nop
 800a83e:	e7fd      	b.n	800a83c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <xQueueGenericSend+0x42>
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <xQueueGenericSend+0x46>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueGenericSend+0x48>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <xQueueGenericSend+0x64>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b02      	cmp	r3, #2
 800a874:	d103      	bne.n	800a87e <xQueueGenericSend+0x72>
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d101      	bne.n	800a882 <xQueueGenericSend+0x76>
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <xQueueGenericSend+0x78>
 800a882:	2300      	movs	r3, #0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10b      	bne.n	800a8a0 <xQueueGenericSend+0x94>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	623b      	str	r3, [r7, #32]
}
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	e7fd      	b.n	800a89c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8a0:	f001 faf6 	bl	800be90 <xTaskGetSchedulerState>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <xQueueGenericSend+0xa4>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <xQueueGenericSend+0xa8>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <xQueueGenericSend+0xaa>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	61fb      	str	r3, [r7, #28]
}
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
 800a8d0:	e7fd      	b.n	800a8ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8d2:	f002 f929 	bl	800cb28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d302      	bcc.n	800a8e8 <xQueueGenericSend+0xdc>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d129      	bne.n	800a93c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ee:	f000 fa0f 	bl	800ad10 <prvCopyDataToQueue>
 800a8f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d010      	beq.n	800a91e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	3324      	adds	r3, #36	@ 0x24
 800a900:	4618      	mov	r0, r3
 800a902:	f001 f8ff 	bl	800bb04 <xTaskRemoveFromEventList>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d013      	beq.n	800a934 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a90c:	4b3f      	ldr	r3, [pc, #252]	@ (800aa0c <xQueueGenericSend+0x200>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	e00a      	b.n	800a934 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a924:	4b39      	ldr	r3, [pc, #228]	@ (800aa0c <xQueueGenericSend+0x200>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a934:	f002 f92a 	bl	800cb8c <vPortExitCritical>
				return pdPASS;
 800a938:	2301      	movs	r3, #1
 800a93a:	e063      	b.n	800aa04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a942:	f002 f923 	bl	800cb8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a946:	2300      	movs	r3, #0
 800a948:	e05c      	b.n	800aa04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	4618      	mov	r0, r3
 800a956:	f001 f939 	bl	800bbcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a95a:	2301      	movs	r3, #1
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a95e:	f002 f915 	bl	800cb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a962:	f000 fda7 	bl	800b4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a966:	f002 f8df 	bl	800cb28 <vPortEnterCritical>
 800a96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a970:	b25b      	sxtb	r3, r3
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d103      	bne.n	800a980 <xQueueGenericSend+0x174>
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a986:	b25b      	sxtb	r3, r3
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d103      	bne.n	800a996 <xQueueGenericSend+0x18a>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a996:	f002 f8f9 	bl	800cb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a99a:	1d3a      	adds	r2, r7, #4
 800a99c:	f107 0314 	add.w	r3, r7, #20
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f001 f928 	bl	800bbf8 <xTaskCheckForTimeOut>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d124      	bne.n	800a9f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9b0:	f000 faa6 	bl	800af00 <prvIsQueueFull>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d018      	beq.n	800a9ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	3310      	adds	r3, #16
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 f84c 	bl	800ba60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ca:	f000 fa31 	bl	800ae30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9ce:	f000 fd7f 	bl	800b4d0 <xTaskResumeAll>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f47f af7c 	bne.w	800a8d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a9da:	4b0c      	ldr	r3, [pc, #48]	@ (800aa0c <xQueueGenericSend+0x200>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	e772      	b.n	800a8d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ee:	f000 fa1f 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9f2:	f000 fd6d 	bl	800b4d0 <xTaskResumeAll>
 800a9f6:	e76c      	b.n	800a8d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9fa:	f000 fa19 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9fe:	f000 fd67 	bl	800b4d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3738      	adds	r7, #56	@ 0x38
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b090      	sub	sp, #64	@ 0x40
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	e7fd      	b.n	800aa3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d103      	bne.n	800aa4e <xQueueGenericSendFromISR+0x3e>
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <xQueueGenericSendFromISR+0x42>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <xQueueGenericSendFromISR+0x44>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10b      	bne.n	800aa70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa6a:	bf00      	nop
 800aa6c:	bf00      	nop
 800aa6e:	e7fd      	b.n	800aa6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d103      	bne.n	800aa7e <xQueueGenericSendFromISR+0x6e>
 800aa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <xQueueGenericSendFromISR+0x72>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <xQueueGenericSendFromISR+0x74>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	623b      	str	r3, [r7, #32]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaa0:	f002 f922 	bl	800cce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaa4:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	61fa      	str	r2, [r7, #28]
 800aaba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aabc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d302      	bcc.n	800aad2 <xQueueGenericSendFromISR+0xc2>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d12f      	bne.n	800ab32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aad8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	68b9      	ldr	r1, [r7, #8]
 800aae6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aae8:	f000 f912 	bl	800ad10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aaec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d112      	bne.n	800ab1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d016      	beq.n	800ab2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	3324      	adds	r3, #36	@ 0x24
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fffe 	bl	800bb04 <xTaskRemoveFromEventList>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00e      	beq.n	800ab2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	e007      	b.n	800ab2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab20:	3301      	adds	r3, #1
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	b25a      	sxtb	r2, r3
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ab30:	e001      	b.n	800ab36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3740      	adds	r7, #64	@ 0x40
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08c      	sub	sp, #48	@ 0x30
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <xQueueReceive+0x32>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	623b      	str	r3, [r7, #32]
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d103      	bne.n	800ab8c <xQueueReceive+0x40>
 800ab84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <xQueueReceive+0x44>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e000      	b.n	800ab92 <xQueueReceive+0x46>
 800ab90:	2300      	movs	r3, #0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <xQueueReceive+0x62>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	61fb      	str	r3, [r7, #28]
}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	e7fd      	b.n	800abaa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abae:	f001 f96f 	bl	800be90 <xTaskGetSchedulerState>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d102      	bne.n	800abbe <xQueueReceive+0x72>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <xQueueReceive+0x76>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <xQueueReceive+0x78>
 800abc2:	2300      	movs	r3, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10b      	bne.n	800abe0 <xQueueReceive+0x94>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	61bb      	str	r3, [r7, #24]
}
 800abda:	bf00      	nop
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abe0:	f001 ffa2 	bl	800cb28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01f      	beq.n	800ac30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf4:	f000 f8f6 	bl	800ade4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	1e5a      	subs	r2, r3, #1
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00f      	beq.n	800ac28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	3310      	adds	r3, #16
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 ff79 	bl	800bb04 <xTaskRemoveFromEventList>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d007      	beq.n	800ac28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac18:	4b3c      	ldr	r3, [pc, #240]	@ (800ad0c <xQueueReceive+0x1c0>)
 800ac1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac28:	f001 ffb0 	bl	800cb8c <vPortExitCritical>
				return pdPASS;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e069      	b.n	800ad04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d103      	bne.n	800ac3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac36:	f001 ffa9 	bl	800cb8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e062      	b.n	800ad04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac44:	f107 0310 	add.w	r3, r7, #16
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 ffbf 	bl	800bbcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac52:	f001 ff9b 	bl	800cb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac56:	f000 fc2d 	bl	800b4b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac5a:	f001 ff65 	bl	800cb28 <vPortEnterCritical>
 800ac5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac64:	b25b      	sxtb	r3, r3
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d103      	bne.n	800ac74 <xQueueReceive+0x128>
 800ac6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac7a:	b25b      	sxtb	r3, r3
 800ac7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac80:	d103      	bne.n	800ac8a <xQueueReceive+0x13e>
 800ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac8a:	f001 ff7f 	bl	800cb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac8e:	1d3a      	adds	r2, r7, #4
 800ac90:	f107 0310 	add.w	r3, r7, #16
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 ffae 	bl	800bbf8 <xTaskCheckForTimeOut>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d123      	bne.n	800acea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aca4:	f000 f916 	bl	800aed4 <prvIsQueueEmpty>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d017      	beq.n	800acde <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	3324      	adds	r3, #36	@ 0x24
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fed2 	bl	800ba60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acbe:	f000 f8b7 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acc2:	f000 fc05 	bl	800b4d0 <xTaskResumeAll>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d189      	bne.n	800abe0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800accc:	4b0f      	ldr	r3, [pc, #60]	@ (800ad0c <xQueueReceive+0x1c0>)
 800acce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	e780      	b.n	800abe0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace0:	f000 f8a6 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ace4:	f000 fbf4 	bl	800b4d0 <xTaskResumeAll>
 800ace8:	e77a      	b.n	800abe0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acec:	f000 f8a0 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acf0:	f000 fbee 	bl	800b4d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acf6:	f000 f8ed 	bl	800aed4 <prvIsQueueEmpty>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f43f af6f 	beq.w	800abe0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3730      	adds	r7, #48	@ 0x30
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10d      	bne.n	800ad4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d14d      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 f8c6 	bl	800becc <xTaskPriorityDisinherit>
 800ad40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e043      	b.n	800add2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d119      	bne.n	800ad84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6858      	ldr	r0, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	f002 fa78 	bl	800d250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad68:	441a      	add	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d32b      	bcc.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	e026      	b.n	800add2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68d8      	ldr	r0, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	f002 fa5e 	bl	800d250 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d207      	bcs.n	800adc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb8:	425b      	negs	r3, r3
 800adba:	441a      	add	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d105      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d303      	bcc.n	800ae18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68d9      	ldr	r1, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae20:	461a      	mov	r2, r3
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f002 fa14 	bl	800d250 <memcpy>
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae38:	f001 fe76 	bl	800cb28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae44:	e011      	b.n	800ae6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d012      	beq.n	800ae74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3324      	adds	r3, #36	@ 0x24
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fe56 	bl	800bb04 <xTaskRemoveFromEventList>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae5e:	f000 ff2f 	bl	800bcc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dce9      	bgt.n	800ae46 <prvUnlockQueue+0x16>
 800ae72:	e000      	b.n	800ae76 <prvUnlockQueue+0x46>
					break;
 800ae74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	@ 0xff
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae7e:	f001 fe85 	bl	800cb8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae82:	f001 fe51 	bl	800cb28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8e:	e011      	b.n	800aeb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3310      	adds	r3, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fe31 	bl	800bb04 <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea8:	f000 ff0a 	bl	800bcc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dce9      	bgt.n	800ae90 <prvUnlockQueue+0x60>
 800aebc:	e000      	b.n	800aec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	@ 0xff
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fe60 	bl	800cb8c <vPortExitCritical>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aedc:	f001 fe24 	bl	800cb28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef2:	f001 fe4b 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af08:	f001 fe0e 	bl	800cb28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af14:	429a      	cmp	r2, r3
 800af16:	d102      	bne.n	800af1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e001      	b.n	800af22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af22:	f001 fe33 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800af26:	68fb      	ldr	r3, [r7, #12]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e014      	b.n	800af6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af40:	4a0f      	ldr	r2, [pc, #60]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10b      	bne.n	800af64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af4c:	490c      	ldr	r1, [pc, #48]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af56:	4a0a      	ldr	r2, [pc, #40]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af62:	e006      	b.n	800af72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b07      	cmp	r3, #7
 800af6e:	d9e7      	bls.n	800af40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	200014c4 	.word	0x200014c4

0800af84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af94:	f001 fdc8 	bl	800cb28 <vPortEnterCritical>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af9e:	b25b      	sxtb	r3, r3
 800afa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa4:	d103      	bne.n	800afae <vQueueWaitForMessageRestricted+0x2a>
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afb4:	b25b      	sxtb	r3, r3
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afba:	d103      	bne.n	800afc4 <vQueueWaitForMessageRestricted+0x40>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afc4:	f001 fde2 	bl	800cb8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	3324      	adds	r3, #36	@ 0x24
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fd67 	bl	800baac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afde:	6978      	ldr	r0, [r7, #20]
 800afe0:	f7ff ff26 	bl	800ae30 <prvUnlockQueue>
	}
 800afe4:	bf00      	nop
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08e      	sub	sp, #56	@ 0x38
 800aff0:	af04      	add	r7, sp, #16
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800affa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10b      	bne.n	800b036 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	61fb      	str	r3, [r7, #28]
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	e7fd      	b.n	800b032 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b036:	23a8      	movs	r3, #168	@ 0xa8
 800b038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b03e:	d00b      	beq.n	800b058 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	61bb      	str	r3, [r7, #24]
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b058:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01e      	beq.n	800b09e <xTaskCreateStatic+0xb2>
 800b060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01b      	beq.n	800b09e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b06e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b072:	2202      	movs	r2, #2
 800b074:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b078:	2300      	movs	r3, #0
 800b07a:	9303      	str	r3, [sp, #12]
 800b07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07e:	9302      	str	r3, [sp, #8]
 800b080:	f107 0314 	add.w	r3, r7, #20
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f851 	bl	800b138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b096:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b098:	f000 f8f6 	bl	800b288 <prvAddNewTaskToReadyList>
 800b09c:	e001      	b.n	800b0a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0a2:	697b      	ldr	r3, [r7, #20]
	}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3728      	adds	r7, #40	@ 0x28
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08c      	sub	sp, #48	@ 0x30
 800b0b0:	af04      	add	r7, sp, #16
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	603b      	str	r3, [r7, #0]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 fe53 	bl	800cd6c <pvPortMalloc>
 800b0c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00e      	beq.n	800b0ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0ce:	20a8      	movs	r0, #168	@ 0xa8
 800b0d0:	f001 fe4c 	bl	800cd6c <pvPortMalloc>
 800b0d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0e2:	e005      	b.n	800b0f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0e4:	6978      	ldr	r0, [r7, #20]
 800b0e6:	f001 ff0f 	bl	800cf08 <vPortFree>
 800b0ea:	e001      	b.n	800b0f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d017      	beq.n	800b126 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0fe:	88fa      	ldrh	r2, [r7, #6]
 800b100:	2300      	movs	r3, #0
 800b102:	9303      	str	r3, [sp, #12]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 f80f 	bl	800b138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b11a:	69f8      	ldr	r0, [r7, #28]
 800b11c:	f000 f8b4 	bl	800b288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b120:	2301      	movs	r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	e002      	b.n	800b12c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b12c:	69bb      	ldr	r3, [r7, #24]
	}
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	461a      	mov	r2, r3
 800b150:	21a5      	movs	r1, #165	@ 0xa5
 800b152:	f001 fff9 	bl	800d148 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b160:	3b01      	subs	r3, #1
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	617b      	str	r3, [r7, #20]
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	e7fd      	b.n	800b18e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01f      	beq.n	800b1d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b198:	2300      	movs	r3, #0
 800b19a:	61fb      	str	r3, [r7, #28]
 800b19c:	e012      	b.n	800b1c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	7819      	ldrb	r1, [r3, #0]
 800b1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3334      	adds	r3, #52	@ 0x34
 800b1ae:	460a      	mov	r2, r1
 800b1b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d006      	beq.n	800b1cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	61fb      	str	r3, [r7, #28]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b0f      	cmp	r3, #15
 800b1c8:	d9e9      	bls.n	800b19e <prvInitialiseNewTask+0x66>
 800b1ca:	e000      	b.n	800b1ce <prvInitialiseNewTask+0x96>
			{
				break;
 800b1cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b1d6:	e003      	b.n	800b1e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	2b37      	cmp	r3, #55	@ 0x37
 800b1e4:	d901      	bls.n	800b1ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1e6:	2337      	movs	r3, #55	@ 0x37
 800b1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	3304      	adds	r3, #4
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff f965 	bl	800a4d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	3318      	adds	r3, #24
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff f960 	bl	800a4d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b214:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b224:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b230:	2200      	movs	r2, #0
 800b232:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	3354      	adds	r3, #84	@ 0x54
 800b23a:	224c      	movs	r2, #76	@ 0x4c
 800b23c:	2100      	movs	r1, #0
 800b23e:	4618      	mov	r0, r3
 800b240:	f001 ff82 	bl	800d148 <memset>
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	4a0d      	ldr	r2, [pc, #52]	@ (800b27c <prvInitialiseNewTask+0x144>)
 800b248:	659a      	str	r2, [r3, #88]	@ 0x58
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	4a0c      	ldr	r2, [pc, #48]	@ (800b280 <prvInitialiseNewTask+0x148>)
 800b24e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b252:	4a0c      	ldr	r2, [pc, #48]	@ (800b284 <prvInitialiseNewTask+0x14c>)
 800b254:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	68f9      	ldr	r1, [r7, #12]
 800b25a:	69b8      	ldr	r0, [r7, #24]
 800b25c:	f001 fb36 	bl	800c8cc <pxPortInitialiseStack>
 800b260:	4602      	mov	r2, r0
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b272:	bf00      	nop
 800b274:	3720      	adds	r7, #32
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20005758 	.word	0x20005758
 800b280:	200057c0 	.word	0x200057c0
 800b284:	20005828 	.word	0x20005828

0800b288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b290:	f001 fc4a 	bl	800cb28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b294:	4b2d      	ldr	r3, [pc, #180]	@ (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	4a2c      	ldr	r2, [pc, #176]	@ (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b29c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b29e:	4b2c      	ldr	r3, [pc, #176]	@ (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2ac:	4b27      	ldr	r3, [pc, #156]	@ (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d110      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2b4:	f000 fd28 	bl	800bd08 <prvInitialiseTaskLists>
 800b2b8:	e00d      	b.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2ba:	4b26      	ldr	r3, [pc, #152]	@ (800b354 <prvAddNewTaskToReadyList+0xcc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2c2:	4b23      	ldr	r3, [pc, #140]	@ (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d802      	bhi.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2d6:	4b20      	ldr	r3, [pc, #128]	@ (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b35c <prvAddNewTaskToReadyList+0xd4>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d903      	bls.n	800b2fc <prvAddNewTaskToReadyList+0x74>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f8:	4a18      	ldr	r2, [pc, #96]	@ (800b35c <prvAddNewTaskToReadyList+0xd4>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4a15      	ldr	r2, [pc, #84]	@ (800b360 <prvAddNewTaskToReadyList+0xd8>)
 800b30a:	441a      	add	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f7ff f8e9 	bl	800a4ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b318:	f001 fc38 	bl	800cb8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b31c:	4b0d      	ldr	r3, [pc, #52]	@ (800b354 <prvAddNewTaskToReadyList+0xcc>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00e      	beq.n	800b342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b324:	4b0a      	ldr	r3, [pc, #40]	@ (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	429a      	cmp	r2, r3
 800b330:	d207      	bcs.n	800b342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b332:	4b0c      	ldr	r3, [pc, #48]	@ (800b364 <prvAddNewTaskToReadyList+0xdc>)
 800b334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200019d8 	.word	0x200019d8
 800b350:	20001504 	.word	0x20001504
 800b354:	200019e4 	.word	0x200019e4
 800b358:	200019f4 	.word	0x200019f4
 800b35c:	200019e0 	.word	0x200019e0
 800b360:	20001508 	.word	0x20001508
 800b364:	e000ed04 	.word	0xe000ed04

0800b368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d018      	beq.n	800b3ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b37a:	4b14      	ldr	r3, [pc, #80]	@ (800b3cc <vTaskDelay+0x64>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <vTaskDelay+0x32>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	60bb      	str	r3, [r7, #8]
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop
 800b398:	e7fd      	b.n	800b396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b39a:	f000 f88b 	bl	800b4b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b39e:	2100      	movs	r1, #0
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fee5 	bl	800c170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3a6:	f000 f893 	bl	800b4d0 <xTaskResumeAll>
 800b3aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d107      	bne.n	800b3c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3b2:	4b07      	ldr	r3, [pc, #28]	@ (800b3d0 <vTaskDelay+0x68>)
 800b3b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20001a00 	.word	0x20001a00
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	@ 0x28
 800b3d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	1d39      	adds	r1, r7, #4
 800b3e6:	f107 0308 	add.w	r3, r7, #8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff f81c 	bl	800a428 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	9202      	str	r2, [sp, #8]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	2300      	movs	r3, #0
 800b400:	460a      	mov	r2, r1
 800b402:	4924      	ldr	r1, [pc, #144]	@ (800b494 <vTaskStartScheduler+0xc0>)
 800b404:	4824      	ldr	r0, [pc, #144]	@ (800b498 <vTaskStartScheduler+0xc4>)
 800b406:	f7ff fdf1 	bl	800afec <xTaskCreateStatic>
 800b40a:	4603      	mov	r3, r0
 800b40c:	4a23      	ldr	r2, [pc, #140]	@ (800b49c <vTaskStartScheduler+0xc8>)
 800b40e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b410:	4b22      	ldr	r3, [pc, #136]	@ (800b49c <vTaskStartScheduler+0xc8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b418:	2301      	movs	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e001      	b.n	800b422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d102      	bne.n	800b42e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b428:	f000 fef6 	bl	800c218 <xTimerCreateTimerTask>
 800b42c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d11b      	bne.n	800b46c <vTaskStartScheduler+0x98>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	613b      	str	r3, [r7, #16]
}
 800b446:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b448:	4b15      	ldr	r3, [pc, #84]	@ (800b4a0 <vTaskStartScheduler+0xcc>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3354      	adds	r3, #84	@ 0x54
 800b44e:	4a15      	ldr	r2, [pc, #84]	@ (800b4a4 <vTaskStartScheduler+0xd0>)
 800b450:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b452:	4b15      	ldr	r3, [pc, #84]	@ (800b4a8 <vTaskStartScheduler+0xd4>)
 800b454:	f04f 32ff 	mov.w	r2, #4294967295
 800b458:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b45a:	4b14      	ldr	r3, [pc, #80]	@ (800b4ac <vTaskStartScheduler+0xd8>)
 800b45c:	2201      	movs	r2, #1
 800b45e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b460:	4b13      	ldr	r3, [pc, #76]	@ (800b4b0 <vTaskStartScheduler+0xdc>)
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b466:	f001 fabb 	bl	800c9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b46a:	e00f      	b.n	800b48c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b472:	d10b      	bne.n	800b48c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	60fb      	str	r3, [r7, #12]
}
 800b486:	bf00      	nop
 800b488:	bf00      	nop
 800b48a:	e7fd      	b.n	800b488 <vTaskStartScheduler+0xb4>
}
 800b48c:	bf00      	nop
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	0800d36c 	.word	0x0800d36c
 800b498:	0800bcd9 	.word	0x0800bcd9
 800b49c:	200019fc 	.word	0x200019fc
 800b4a0:	20001504 	.word	0x20001504
 800b4a4:	20000060 	.word	0x20000060
 800b4a8:	200019f8 	.word	0x200019f8
 800b4ac:	200019e4 	.word	0x200019e4
 800b4b0:	200019dc 	.word	0x200019dc

0800b4b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4b8:	4b04      	ldr	r3, [pc, #16]	@ (800b4cc <vTaskSuspendAll+0x18>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	4a03      	ldr	r2, [pc, #12]	@ (800b4cc <vTaskSuspendAll+0x18>)
 800b4c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4c2:	bf00      	nop
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	20001a00 	.word	0x20001a00

0800b4d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4de:	4b42      	ldr	r3, [pc, #264]	@ (800b5e8 <xTaskResumeAll+0x118>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	603b      	str	r3, [r7, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4fe:	f001 fb13 	bl	800cb28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b502:	4b39      	ldr	r3, [pc, #228]	@ (800b5e8 <xTaskResumeAll+0x118>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3b01      	subs	r3, #1
 800b508:	4a37      	ldr	r2, [pc, #220]	@ (800b5e8 <xTaskResumeAll+0x118>)
 800b50a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b50c:	4b36      	ldr	r3, [pc, #216]	@ (800b5e8 <xTaskResumeAll+0x118>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d162      	bne.n	800b5da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b514:	4b35      	ldr	r3, [pc, #212]	@ (800b5ec <xTaskResumeAll+0x11c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d05e      	beq.n	800b5da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b51c:	e02f      	b.n	800b57e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51e:	4b34      	ldr	r3, [pc, #208]	@ (800b5f0 <xTaskResumeAll+0x120>)
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3318      	adds	r3, #24
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff f83a 	bl	800a5a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3304      	adds	r3, #4
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff f835 	bl	800a5a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53e:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f4 <xTaskResumeAll+0x124>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d903      	bls.n	800b54e <xTaskResumeAll+0x7e>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54a:	4a2a      	ldr	r2, [pc, #168]	@ (800b5f4 <xTaskResumeAll+0x124>)
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4a27      	ldr	r2, [pc, #156]	@ (800b5f8 <xTaskResumeAll+0x128>)
 800b55c:	441a      	add	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3304      	adds	r3, #4
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f7fe ffc0 	bl	800a4ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56e:	4b23      	ldr	r3, [pc, #140]	@ (800b5fc <xTaskResumeAll+0x12c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b574:	429a      	cmp	r2, r3
 800b576:	d302      	bcc.n	800b57e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b578:	4b21      	ldr	r3, [pc, #132]	@ (800b600 <xTaskResumeAll+0x130>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b57e:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f0 <xTaskResumeAll+0x120>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1cb      	bne.n	800b51e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b58c:	f000 fc60 	bl	800be50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b590:	4b1c      	ldr	r3, [pc, #112]	@ (800b604 <xTaskResumeAll+0x134>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d010      	beq.n	800b5be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b59c:	f000 f940 	bl	800b820 <xTaskIncrementTick>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5a6:	4b16      	ldr	r3, [pc, #88]	@ (800b600 <xTaskResumeAll+0x130>)
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1f1      	bne.n	800b59c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b5b8:	4b12      	ldr	r3, [pc, #72]	@ (800b604 <xTaskResumeAll+0x134>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5be:	4b10      	ldr	r3, [pc, #64]	@ (800b600 <xTaskResumeAll+0x130>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b608 <xTaskResumeAll+0x138>)
 800b5cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5da:	f001 fad7 	bl	800cb8c <vPortExitCritical>

	return xAlreadyYielded;
 800b5de:	68bb      	ldr	r3, [r7, #8]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20001a00 	.word	0x20001a00
 800b5ec:	200019d8 	.word	0x200019d8
 800b5f0:	20001998 	.word	0x20001998
 800b5f4:	200019e0 	.word	0x200019e0
 800b5f8:	20001508 	.word	0x20001508
 800b5fc:	20001504 	.word	0x20001504
 800b600:	200019ec 	.word	0x200019ec
 800b604:	200019e8 	.word	0x200019e8
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b612:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <xTaskGetTickCount+0x1c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b618:	687b      	ldr	r3, [r7, #4]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	200019dc 	.word	0x200019dc

0800b62c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d102      	bne.n	800b640 <pcTaskGetName+0x14>
 800b63a:	4b0e      	ldr	r3, [pc, #56]	@ (800b674 <pcTaskGetName+0x48>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	e000      	b.n	800b642 <pcTaskGetName+0x16>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <pcTaskGetName+0x36>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	60bb      	str	r3, [r7, #8]
}
 800b65c:	bf00      	nop
 800b65e:	bf00      	nop
 800b660:	e7fd      	b.n	800b65e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3334      	adds	r3, #52	@ 0x34
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20001504 	.word	0x20001504

0800b678 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800b678:	b480      	push	{r7}
 800b67a:	b08b      	sub	sp, #44	@ 0x2c
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d05b      	beq.n	800b746 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	605a      	str	r2, [r3, #4]
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d104      	bne.n	800b6b2 <prvSearchForNameWithinSingleList+0x3a>
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	613b      	str	r3, [r7, #16]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	605a      	str	r2, [r3, #4]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d104      	bne.n	800b6de <prvSearchForNameWithinSingleList+0x66>
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	605a      	str	r2, [r3, #4]
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	623b      	str	r3, [r7, #32]
 800b6ee:	e01c      	b.n	800b72a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3334      	adds	r3, #52	@ 0x34
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	4413      	add	r3, r2
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	7afa      	ldrb	r2, [r7, #11]
 800b706:	429a      	cmp	r2, r3
 800b708:	d002      	beq.n	800b710 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800b70a:	2301      	movs	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	e006      	b.n	800b71e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d103      	bne.n	800b71e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800b71a:	2301      	movs	r3, #1
 800b71c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d106      	bne.n	800b732 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	3301      	adds	r3, #1
 800b728:	623b      	str	r3, [r7, #32]
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d9df      	bls.n	800b6f0 <prvSearchForNameWithinSingleList+0x78>
 800b730:	e000      	b.n	800b734 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800b732:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	2b00      	cmp	r3, #0
 800b738:	d104      	bne.n	800b744 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d1bb      	bne.n	800b6ba <prvSearchForNameWithinSingleList+0x42>
 800b742:	e000      	b.n	800b746 <prvSearchForNameWithinSingleList+0xce>
					break;
 800b744:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b748:	4618      	mov	r0, r3
 800b74a:	372c      	adds	r7, #44	@ 0x2c
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800b75c:	2338      	movs	r3, #56	@ 0x38
 800b75e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7f4 fd35 	bl	80001d0 <strlen>
 800b766:	4603      	mov	r3, r0
 800b768:	2b0f      	cmp	r3, #15
 800b76a:	d90b      	bls.n	800b784 <xTaskGetHandle+0x30>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	60fb      	str	r3, [r7, #12]
}
 800b77e:	bf00      	nop
 800b780:	bf00      	nop
 800b782:	e7fd      	b.n	800b780 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800b784:	f7ff fe96 	bl	800b4b4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4a1c      	ldr	r2, [pc, #112]	@ (800b80c <xTaskGetHandle+0xb8>)
 800b79a:	4413      	add	r3, r2
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff ff6a 	bl	800b678 <prvSearchForNameWithinSingleList>
 800b7a4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1ea      	bne.n	800b788 <xTaskGetHandle+0x34>
 800b7b2:	e000      	b.n	800b7b6 <xTaskGetHandle+0x62>
					break;
 800b7b4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800b7bc:	4b14      	ldr	r3, [pc, #80]	@ (800b810 <xTaskGetHandle+0xbc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff ff58 	bl	800b678 <prvSearchForNameWithinSingleList>
 800b7c8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d106      	bne.n	800b7de <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800b7d0:	4b10      	ldr	r3, [pc, #64]	@ (800b814 <xTaskGetHandle+0xc0>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff ff4e 	bl	800b678 <prvSearchForNameWithinSingleList>
 800b7dc:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	480c      	ldr	r0, [pc, #48]	@ (800b818 <xTaskGetHandle+0xc4>)
 800b7e8:	f7ff ff46 	bl	800b678 <prvSearchForNameWithinSingleList>
 800b7ec:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d104      	bne.n	800b7fe <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800b7f4:	6879      	ldr	r1, [r7, #4]
 800b7f6:	4809      	ldr	r0, [pc, #36]	@ (800b81c <xTaskGetHandle+0xc8>)
 800b7f8:	f7ff ff3e 	bl	800b678 <prvSearchForNameWithinSingleList>
 800b7fc:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800b7fe:	f7ff fe67 	bl	800b4d0 <xTaskResumeAll>

		return pxTCB;
 800b802:	693b      	ldr	r3, [r7, #16]
	}
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20001508 	.word	0x20001508
 800b810:	20001990 	.word	0x20001990
 800b814:	20001994 	.word	0x20001994
 800b818:	200019c4 	.word	0x200019c4
 800b81c:	200019ac 	.word	0x200019ac

0800b820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b82a:	4b4f      	ldr	r3, [pc, #316]	@ (800b968 <xTaskIncrementTick+0x148>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f040 8090 	bne.w	800b954 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b834:	4b4d      	ldr	r3, [pc, #308]	@ (800b96c <xTaskIncrementTick+0x14c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3301      	adds	r3, #1
 800b83a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b83c:	4a4b      	ldr	r2, [pc, #300]	@ (800b96c <xTaskIncrementTick+0x14c>)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d121      	bne.n	800b88c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b848:	4b49      	ldr	r3, [pc, #292]	@ (800b970 <xTaskIncrementTick+0x150>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00b      	beq.n	800b86a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	603b      	str	r3, [r7, #0]
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <xTaskIncrementTick+0x46>
 800b86a:	4b41      	ldr	r3, [pc, #260]	@ (800b970 <xTaskIncrementTick+0x150>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	4b40      	ldr	r3, [pc, #256]	@ (800b974 <xTaskIncrementTick+0x154>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a3e      	ldr	r2, [pc, #248]	@ (800b970 <xTaskIncrementTick+0x150>)
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	4a3e      	ldr	r2, [pc, #248]	@ (800b974 <xTaskIncrementTick+0x154>)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	4b3e      	ldr	r3, [pc, #248]	@ (800b978 <xTaskIncrementTick+0x158>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a3c      	ldr	r2, [pc, #240]	@ (800b978 <xTaskIncrementTick+0x158>)
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	f000 fae2 	bl	800be50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b88c:	4b3b      	ldr	r3, [pc, #236]	@ (800b97c <xTaskIncrementTick+0x15c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	429a      	cmp	r2, r3
 800b894:	d349      	bcc.n	800b92a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b896:	4b36      	ldr	r3, [pc, #216]	@ (800b970 <xTaskIncrementTick+0x150>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d104      	bne.n	800b8aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a0:	4b36      	ldr	r3, [pc, #216]	@ (800b97c <xTaskIncrementTick+0x15c>)
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a6:	601a      	str	r2, [r3, #0]
					break;
 800b8a8:	e03f      	b.n	800b92a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8aa:	4b31      	ldr	r3, [pc, #196]	@ (800b970 <xTaskIncrementTick+0x150>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d203      	bcs.n	800b8ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b97c <xTaskIncrementTick+0x15c>)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8c8:	e02f      	b.n	800b92a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fe68 	bl	800a5a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	3318      	adds	r3, #24
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fe5f 	bl	800a5a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ea:	4b25      	ldr	r3, [pc, #148]	@ (800b980 <xTaskIncrementTick+0x160>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d903      	bls.n	800b8fa <xTaskIncrementTick+0xda>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f6:	4a22      	ldr	r2, [pc, #136]	@ (800b980 <xTaskIncrementTick+0x160>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4a1f      	ldr	r2, [pc, #124]	@ (800b984 <xTaskIncrementTick+0x164>)
 800b908:	441a      	add	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fe fdea 	bl	800a4ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b91a:	4b1b      	ldr	r3, [pc, #108]	@ (800b988 <xTaskIncrementTick+0x168>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b920:	429a      	cmp	r2, r3
 800b922:	d3b8      	bcc.n	800b896 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b924:	2301      	movs	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b928:	e7b5      	b.n	800b896 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b92a:	4b17      	ldr	r3, [pc, #92]	@ (800b988 <xTaskIncrementTick+0x168>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b930:	4914      	ldr	r1, [pc, #80]	@ (800b984 <xTaskIncrementTick+0x164>)
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d901      	bls.n	800b946 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b946:	4b11      	ldr	r3, [pc, #68]	@ (800b98c <xTaskIncrementTick+0x16c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	617b      	str	r3, [r7, #20]
 800b952:	e004      	b.n	800b95e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b954:	4b0e      	ldr	r3, [pc, #56]	@ (800b990 <xTaskIncrementTick+0x170>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	4a0d      	ldr	r2, [pc, #52]	@ (800b990 <xTaskIncrementTick+0x170>)
 800b95c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b95e:	697b      	ldr	r3, [r7, #20]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20001a00 	.word	0x20001a00
 800b96c:	200019dc 	.word	0x200019dc
 800b970:	20001990 	.word	0x20001990
 800b974:	20001994 	.word	0x20001994
 800b978:	200019f0 	.word	0x200019f0
 800b97c:	200019f8 	.word	0x200019f8
 800b980:	200019e0 	.word	0x200019e0
 800b984:	20001508 	.word	0x20001508
 800b988:	20001504 	.word	0x20001504
 800b98c:	200019ec 	.word	0x200019ec
 800b990:	200019e8 	.word	0x200019e8

0800b994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b99a:	4b2b      	ldr	r3, [pc, #172]	@ (800ba48 <vTaskSwitchContext+0xb4>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9a2:	4b2a      	ldr	r3, [pc, #168]	@ (800ba4c <vTaskSwitchContext+0xb8>)
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9a8:	e047      	b.n	800ba3a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b9aa:	4b28      	ldr	r3, [pc, #160]	@ (800ba4c <vTaskSwitchContext+0xb8>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9b0:	4b27      	ldr	r3, [pc, #156]	@ (800ba50 <vTaskSwitchContext+0xbc>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]
 800b9b6:	e011      	b.n	800b9dc <vTaskSwitchContext+0x48>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10b      	bne.n	800b9d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	607b      	str	r3, [r7, #4]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <vTaskSwitchContext+0x3e>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	491d      	ldr	r1, [pc, #116]	@ (800ba54 <vTaskSwitchContext+0xc0>)
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0e3      	beq.n	800b9b8 <vTaskSwitchContext+0x24>
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a16      	ldr	r2, [pc, #88]	@ (800ba54 <vTaskSwitchContext+0xc0>)
 800b9fc:	4413      	add	r3, r2
 800b9fe:	60bb      	str	r3, [r7, #8]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	605a      	str	r2, [r3, #4]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	3308      	adds	r3, #8
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d104      	bne.n	800ba20 <vTaskSwitchContext+0x8c>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	4a0c      	ldr	r2, [pc, #48]	@ (800ba58 <vTaskSwitchContext+0xc4>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	4a09      	ldr	r2, [pc, #36]	@ (800ba50 <vTaskSwitchContext+0xbc>)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba30:	4b09      	ldr	r3, [pc, #36]	@ (800ba58 <vTaskSwitchContext+0xc4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3354      	adds	r3, #84	@ 0x54
 800ba36:	4a09      	ldr	r2, [pc, #36]	@ (800ba5c <vTaskSwitchContext+0xc8>)
 800ba38:	6013      	str	r3, [r2, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	20001a00 	.word	0x20001a00
 800ba4c:	200019ec 	.word	0x200019ec
 800ba50:	200019e0 	.word	0x200019e0
 800ba54:	20001508 	.word	0x20001508
 800ba58:	20001504 	.word	0x20001504
 800ba5c:	20000060 	.word	0x20000060

0800ba60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10b      	bne.n	800ba88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
}
 800ba82:	bf00      	nop
 800ba84:	bf00      	nop
 800ba86:	e7fd      	b.n	800ba84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba88:	4b07      	ldr	r3, [pc, #28]	@ (800baa8 <vTaskPlaceOnEventList+0x48>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3318      	adds	r3, #24
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7fe fd4e 	bl	800a532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba96:	2101      	movs	r1, #1
 800ba98:	6838      	ldr	r0, [r7, #0]
 800ba9a:	f000 fb69 	bl	800c170 <prvAddCurrentTaskToDelayedList>
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20001504 	.word	0x20001504

0800baac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10b      	bne.n	800bad6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	617b      	str	r3, [r7, #20]
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	e7fd      	b.n	800bad2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bad6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb00 <vTaskPlaceOnEventListRestricted+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3318      	adds	r3, #24
 800badc:	4619      	mov	r1, r3
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7fe fd03 	bl	800a4ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
 800baee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	68b8      	ldr	r0, [r7, #8]
 800baf4:	f000 fb3c 	bl	800c170 <prvAddCurrentTaskToDelayedList>
	}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20001504 	.word	0x20001504

0800bb04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10b      	bne.n	800bb32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	60fb      	str	r3, [r7, #12]
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	e7fd      	b.n	800bb2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3318      	adds	r3, #24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fd34 	bl	800a5a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <xTaskRemoveFromEventList+0xb0>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11d      	bne.n	800bb80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fd2b 	bl	800a5a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb52:	4b19      	ldr	r3, [pc, #100]	@ (800bbb8 <xTaskRemoveFromEventList+0xb4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d903      	bls.n	800bb62 <xTaskRemoveFromEventList+0x5e>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5e:	4a16      	ldr	r2, [pc, #88]	@ (800bbb8 <xTaskRemoveFromEventList+0xb4>)
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb66:	4613      	mov	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4a13      	ldr	r2, [pc, #76]	@ (800bbbc <xTaskRemoveFromEventList+0xb8>)
 800bb70:	441a      	add	r2, r3
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	3304      	adds	r3, #4
 800bb76:	4619      	mov	r1, r3
 800bb78:	4610      	mov	r0, r2
 800bb7a:	f7fe fcb6 	bl	800a4ea <vListInsertEnd>
 800bb7e:	e005      	b.n	800bb8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4619      	mov	r1, r3
 800bb86:	480e      	ldr	r0, [pc, #56]	@ (800bbc0 <xTaskRemoveFromEventList+0xbc>)
 800bb88:	f7fe fcaf 	bl	800a4ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <xTaskRemoveFromEventList+0xc0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d905      	bls.n	800bba6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc8 <xTaskRemoveFromEventList+0xc4>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	e001      	b.n	800bbaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbaa:	697b      	ldr	r3, [r7, #20]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20001a00 	.word	0x20001a00
 800bbb8:	200019e0 	.word	0x200019e0
 800bbbc:	20001508 	.word	0x20001508
 800bbc0:	20001998 	.word	0x20001998
 800bbc4:	20001504 	.word	0x20001504
 800bbc8:	200019ec 	.word	0x200019ec

0800bbcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbd4:	4b06      	ldr	r3, [pc, #24]	@ (800bbf0 <vTaskInternalSetTimeOutState+0x24>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbdc:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <vTaskInternalSetTimeOutState+0x28>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	605a      	str	r2, [r3, #4]
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	200019f0 	.word	0x200019f0
 800bbf4:	200019dc 	.word	0x200019dc

0800bbf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	613b      	str	r3, [r7, #16]
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10b      	bne.n	800bc3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60fb      	str	r3, [r7, #12]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bc3e:	f000 ff73 	bl	800cb28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc42:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <xTaskCheckForTimeOut+0xc0>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5a:	d102      	bne.n	800bc62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61fb      	str	r3, [r7, #28]
 800bc60:	e023      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b15      	ldr	r3, [pc, #84]	@ (800bcbc <xTaskCheckForTimeOut+0xc4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d007      	beq.n	800bc7e <xTaskCheckForTimeOut+0x86>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d302      	bcc.n	800bc7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
 800bc7c:	e015      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d20b      	bcs.n	800bca0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ff99 	bl	800bbcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e004      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bca6:	2301      	movs	r3, #1
 800bca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcaa:	f000 ff6f 	bl	800cb8c <vPortExitCritical>

	return xReturn;
 800bcae:	69fb      	ldr	r3, [r7, #28]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3720      	adds	r7, #32
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	200019dc 	.word	0x200019dc
 800bcbc:	200019f0 	.word	0x200019f0

0800bcc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcc4:	4b03      	ldr	r3, [pc, #12]	@ (800bcd4 <vTaskMissedYield+0x14>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]
}
 800bcca:	bf00      	nop
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	200019ec 	.word	0x200019ec

0800bcd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bce0:	f000 f852 	bl	800bd88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bce4:	4b06      	ldr	r3, [pc, #24]	@ (800bd00 <prvIdleTask+0x28>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d9f9      	bls.n	800bce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcec:	4b05      	ldr	r3, [pc, #20]	@ (800bd04 <prvIdleTask+0x2c>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcfc:	e7f0      	b.n	800bce0 <prvIdleTask+0x8>
 800bcfe:	bf00      	nop
 800bd00:	20001508 	.word	0x20001508
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd0e:	2300      	movs	r3, #0
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	e00c      	b.n	800bd2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a12      	ldr	r2, [pc, #72]	@ (800bd68 <prvInitialiseTaskLists+0x60>)
 800bd20:	4413      	add	r3, r2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fbb4 	bl	800a490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	607b      	str	r3, [r7, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b37      	cmp	r3, #55	@ 0x37
 800bd32:	d9ef      	bls.n	800bd14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd34:	480d      	ldr	r0, [pc, #52]	@ (800bd6c <prvInitialiseTaskLists+0x64>)
 800bd36:	f7fe fbab 	bl	800a490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd3a:	480d      	ldr	r0, [pc, #52]	@ (800bd70 <prvInitialiseTaskLists+0x68>)
 800bd3c:	f7fe fba8 	bl	800a490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd40:	480c      	ldr	r0, [pc, #48]	@ (800bd74 <prvInitialiseTaskLists+0x6c>)
 800bd42:	f7fe fba5 	bl	800a490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd46:	480c      	ldr	r0, [pc, #48]	@ (800bd78 <prvInitialiseTaskLists+0x70>)
 800bd48:	f7fe fba2 	bl	800a490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd4c:	480b      	ldr	r0, [pc, #44]	@ (800bd7c <prvInitialiseTaskLists+0x74>)
 800bd4e:	f7fe fb9f 	bl	800a490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd52:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <prvInitialiseTaskLists+0x78>)
 800bd54:	4a05      	ldr	r2, [pc, #20]	@ (800bd6c <prvInitialiseTaskLists+0x64>)
 800bd56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd58:	4b0a      	ldr	r3, [pc, #40]	@ (800bd84 <prvInitialiseTaskLists+0x7c>)
 800bd5a:	4a05      	ldr	r2, [pc, #20]	@ (800bd70 <prvInitialiseTaskLists+0x68>)
 800bd5c:	601a      	str	r2, [r3, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20001508 	.word	0x20001508
 800bd6c:	20001968 	.word	0x20001968
 800bd70:	2000197c 	.word	0x2000197c
 800bd74:	20001998 	.word	0x20001998
 800bd78:	200019ac 	.word	0x200019ac
 800bd7c:	200019c4 	.word	0x200019c4
 800bd80:	20001990 	.word	0x20001990
 800bd84:	20001994 	.word	0x20001994

0800bd88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd8e:	e019      	b.n	800bdc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd90:	f000 feca 	bl	800cb28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd94:	4b10      	ldr	r3, [pc, #64]	@ (800bdd8 <prvCheckTasksWaitingTermination+0x50>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fbff 	bl	800a5a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bda6:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <prvCheckTasksWaitingTermination+0x54>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	4a0b      	ldr	r2, [pc, #44]	@ (800bddc <prvCheckTasksWaitingTermination+0x54>)
 800bdae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdba:	f000 fee7 	bl	800cb8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f810 	bl	800bde4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc4:	4b06      	ldr	r3, [pc, #24]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e1      	bne.n	800bd90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	200019ac 	.word	0x200019ac
 800bddc:	200019d8 	.word	0x200019d8
 800bde0:	200019c0 	.word	0x200019c0

0800bde4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3354      	adds	r3, #84	@ 0x54
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f001 f9b1 	bl	800d158 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d108      	bne.n	800be12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be04:	4618      	mov	r0, r3
 800be06:	f001 f87f 	bl	800cf08 <vPortFree>
				vPortFree( pxTCB );
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 f87c 	bl	800cf08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be10:	e019      	b.n	800be46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d103      	bne.n	800be24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f873 	bl	800cf08 <vPortFree>
	}
 800be22:	e010      	b.n	800be46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d00b      	beq.n	800be46 <prvDeleteTCB+0x62>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	60fb      	str	r3, [r7, #12]
}
 800be40:	bf00      	nop
 800be42:	bf00      	nop
 800be44:	e7fd      	b.n	800be42 <prvDeleteTCB+0x5e>
	}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be56:	4b0c      	ldr	r3, [pc, #48]	@ (800be88 <prvResetNextTaskUnblockTime+0x38>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be60:	4b0a      	ldr	r3, [pc, #40]	@ (800be8c <prvResetNextTaskUnblockTime+0x3c>)
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be68:	e008      	b.n	800be7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6a:	4b07      	ldr	r3, [pc, #28]	@ (800be88 <prvResetNextTaskUnblockTime+0x38>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	4a04      	ldr	r2, [pc, #16]	@ (800be8c <prvResetNextTaskUnblockTime+0x3c>)
 800be7a:	6013      	str	r3, [r2, #0]
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	20001990 	.word	0x20001990
 800be8c:	200019f8 	.word	0x200019f8

0800be90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be96:	4b0b      	ldr	r3, [pc, #44]	@ (800bec4 <xTaskGetSchedulerState+0x34>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be9e:	2301      	movs	r3, #1
 800bea0:	607b      	str	r3, [r7, #4]
 800bea2:	e008      	b.n	800beb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bea4:	4b08      	ldr	r3, [pc, #32]	@ (800bec8 <xTaskGetSchedulerState+0x38>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800beac:	2302      	movs	r3, #2
 800beae:	607b      	str	r3, [r7, #4]
 800beb0:	e001      	b.n	800beb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beb2:	2300      	movs	r3, #0
 800beb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800beb6:	687b      	ldr	r3, [r7, #4]
	}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	200019e4 	.word	0x200019e4
 800bec8:	20001a00 	.word	0x20001a00

0800becc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d058      	beq.n	800bf94 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bee2:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa0 <xTaskPriorityDisinherit+0xd4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d00b      	beq.n	800bf04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	60fb      	str	r3, [r7, #12]
}
 800befe:	bf00      	nop
 800bf00:	bf00      	nop
 800bf02:	e7fd      	b.n	800bf00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10b      	bne.n	800bf24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60bb      	str	r3, [r7, #8]
}
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
 800bf22:	e7fd      	b.n	800bf20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf28:	1e5a      	subs	r2, r3, #1
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d02c      	beq.n	800bf94 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d128      	bne.n	800bf94 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	3304      	adds	r3, #4
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fb2c 	bl	800a5a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf64:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <xTaskPriorityDisinherit+0xd8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d903      	bls.n	800bf74 <xTaskPriorityDisinherit+0xa8>
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf70:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa4 <xTaskPriorityDisinherit+0xd8>)
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf78:	4613      	mov	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4a09      	ldr	r2, [pc, #36]	@ (800bfa8 <xTaskPriorityDisinherit+0xdc>)
 800bf82:	441a      	add	r2, r3
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	f7fe faad 	bl	800a4ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf94:	697b      	ldr	r3, [r7, #20]
	}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3718      	adds	r7, #24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20001504 	.word	0x20001504
 800bfa4:	200019e0 	.word	0x200019e0
 800bfa8:	20001508 	.word	0x20001508

0800bfac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bfb6:	f000 fdb7 	bl	800cb28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bfba:	4b20      	ldr	r3, [pc, #128]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d113      	bne.n	800bfee <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bfc6:	4b1d      	ldr	r3, [pc, #116]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00b      	beq.n	800bfee <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	6838      	ldr	r0, [r7, #0]
 800bfda:	f000 f8c9 	bl	800c170 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bfde:	4b18      	ldr	r3, [pc, #96]	@ (800c040 <ulTaskNotifyTake+0x94>)
 800bfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bfee:	f000 fdcd 	bl	800cb8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bff2:	f000 fd99 	bl	800cb28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bff6:	4b11      	ldr	r3, [pc, #68]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bffe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00e      	beq.n	800c024 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c00c:	4b0b      	ldr	r3, [pc, #44]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2200      	movs	r2, #0
 800c012:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c016:	e005      	b.n	800c024 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c018:	4b08      	ldr	r3, [pc, #32]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	3a01      	subs	r2, #1
 800c020:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c024:	4b05      	ldr	r3, [pc, #20]	@ (800c03c <ulTaskNotifyTake+0x90>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c02e:	f000 fdad 	bl	800cb8c <vPortExitCritical>

		return ulReturn;
 800c032:	68fb      	ldr	r3, [r7, #12]
	}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20001504 	.word	0x20001504
 800c040:	e000ed04 	.word	0xe000ed04

0800c044 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08a      	sub	sp, #40	@ 0x28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10b      	bne.n	800c06c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	61bb      	str	r3, [r7, #24]
}
 800c066:	bf00      	nop
 800c068:	bf00      	nop
 800c06a:	e7fd      	b.n	800c068 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c06c:	f000 fe3c 	bl	800cce8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c074:	f3ef 8211 	mrs	r2, BASEPRI
 800c078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	617a      	str	r2, [r7, #20]
 800c08a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c08c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c08e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c096:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c0ae:	7ffb      	ldrb	r3, [r7, #31]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d147      	bne.n	800c144 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	60fb      	str	r3, [r7, #12]
}
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	e7fd      	b.n	800c0d0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d4:	4b20      	ldr	r3, [pc, #128]	@ (800c158 <vTaskNotifyGiveFromISR+0x114>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d11d      	bne.n	800c118 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fe fa5f 	bl	800a5a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	@ (800c15c <vTaskNotifyGiveFromISR+0x118>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d903      	bls.n	800c0fa <vTaskNotifyGiveFromISR+0xb6>
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f6:	4a19      	ldr	r2, [pc, #100]	@ (800c15c <vTaskNotifyGiveFromISR+0x118>)
 800c0f8:	6013      	str	r3, [r2, #0]
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4a16      	ldr	r2, [pc, #88]	@ (800c160 <vTaskNotifyGiveFromISR+0x11c>)
 800c108:	441a      	add	r2, r3
 800c10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10c:	3304      	adds	r3, #4
 800c10e:	4619      	mov	r1, r3
 800c110:	4610      	mov	r0, r2
 800c112:	f7fe f9ea 	bl	800a4ea <vListInsertEnd>
 800c116:	e005      	b.n	800c124 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11a:	3318      	adds	r3, #24
 800c11c:	4619      	mov	r1, r3
 800c11e:	4811      	ldr	r0, [pc, #68]	@ (800c164 <vTaskNotifyGiveFromISR+0x120>)
 800c120:	f7fe f9e3 	bl	800a4ea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c128:	4b0f      	ldr	r3, [pc, #60]	@ (800c168 <vTaskNotifyGiveFromISR+0x124>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d908      	bls.n	800c144 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c13e:	4b0b      	ldr	r3, [pc, #44]	@ (800c16c <vTaskNotifyGiveFromISR+0x128>)
 800c140:	2201      	movs	r2, #1
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f383 8811 	msr	BASEPRI, r3
}
 800c14e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c150:	bf00      	nop
 800c152:	3728      	adds	r7, #40	@ 0x28
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	20001a00 	.word	0x20001a00
 800c15c:	200019e0 	.word	0x200019e0
 800c160:	20001508 	.word	0x20001508
 800c164:	20001998 	.word	0x20001998
 800c168:	20001504 	.word	0x20001504
 800c16c:	200019ec 	.word	0x200019ec

0800c170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c17a:	4b21      	ldr	r3, [pc, #132]	@ (800c200 <prvAddCurrentTaskToDelayedList+0x90>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c180:	4b20      	ldr	r3, [pc, #128]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3304      	adds	r3, #4
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fa0c 	bl	800a5a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d10a      	bne.n	800c1aa <prvAddCurrentTaskToDelayedList+0x3a>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c19a:	4b1a      	ldr	r3, [pc, #104]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4819      	ldr	r0, [pc, #100]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1a4:	f7fe f9a1 	bl	800a4ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1a8:	e026      	b.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1b2:	4b14      	ldr	r3, [pc, #80]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d209      	bcs.n	800c1d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1c2:	4b12      	ldr	r3, [pc, #72]	@ (800c20c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7fe f9af 	bl	800a532 <vListInsert>
}
 800c1d4:	e010      	b.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c210 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	4b0a      	ldr	r3, [pc, #40]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f7fe f9a5 	bl	800a532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c214 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d202      	bcs.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1f2:	4a08      	ldr	r2, [pc, #32]	@ (800c214 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6013      	str	r3, [r2, #0]
}
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	200019dc 	.word	0x200019dc
 800c204:	20001504 	.word	0x20001504
 800c208:	200019c4 	.word	0x200019c4
 800c20c:	20001994 	.word	0x20001994
 800c210:	20001990 	.word	0x20001990
 800c214:	200019f8 	.word	0x200019f8

0800c218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	@ 0x28
 800c21c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c21e:	2300      	movs	r3, #0
 800c220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c222:	f000 fb13 	bl	800c84c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c226:	4b1d      	ldr	r3, [pc, #116]	@ (800c29c <xTimerCreateTimerTask+0x84>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d021      	beq.n	800c272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c236:	1d3a      	adds	r2, r7, #4
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	f107 030c 	add.w	r3, r7, #12
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe f90b 	bl	800a45c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	9202      	str	r2, [sp, #8]
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	2302      	movs	r3, #2
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	2300      	movs	r3, #0
 800c256:	460a      	mov	r2, r1
 800c258:	4911      	ldr	r1, [pc, #68]	@ (800c2a0 <xTimerCreateTimerTask+0x88>)
 800c25a:	4812      	ldr	r0, [pc, #72]	@ (800c2a4 <xTimerCreateTimerTask+0x8c>)
 800c25c:	f7fe fec6 	bl	800afec <xTaskCreateStatic>
 800c260:	4603      	mov	r3, r0
 800c262:	4a11      	ldr	r2, [pc, #68]	@ (800c2a8 <xTimerCreateTimerTask+0x90>)
 800c264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c266:	4b10      	ldr	r3, [pc, #64]	@ (800c2a8 <xTimerCreateTimerTask+0x90>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c26e:	2301      	movs	r3, #1
 800c270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	613b      	str	r3, [r7, #16]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c290:	697b      	ldr	r3, [r7, #20]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20001a34 	.word	0x20001a34
 800c2a0:	0800d374 	.word	0x0800d374
 800c2a4:	0800c3e5 	.word	0x0800c3e5
 800c2a8:	20001a38 	.word	0x20001a38

0800c2ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b08a      	sub	sp, #40	@ 0x28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10b      	bne.n	800c2dc <xTimerGenericCommand+0x30>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	623b      	str	r3, [r7, #32]
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2dc:	4b19      	ldr	r3, [pc, #100]	@ (800c344 <xTimerGenericCommand+0x98>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d02a      	beq.n	800c33a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b05      	cmp	r3, #5
 800c2f4:	dc18      	bgt.n	800c328 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2f6:	f7ff fdcb 	bl	800be90 <xTaskGetSchedulerState>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d109      	bne.n	800c314 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c300:	4b10      	ldr	r3, [pc, #64]	@ (800c344 <xTimerGenericCommand+0x98>)
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	f107 0110 	add.w	r1, r7, #16
 800c308:	2300      	movs	r3, #0
 800c30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c30c:	f7fe fa7e 	bl	800a80c <xQueueGenericSend>
 800c310:	6278      	str	r0, [r7, #36]	@ 0x24
 800c312:	e012      	b.n	800c33a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c314:	4b0b      	ldr	r3, [pc, #44]	@ (800c344 <xTimerGenericCommand+0x98>)
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	f107 0110 	add.w	r1, r7, #16
 800c31c:	2300      	movs	r3, #0
 800c31e:	2200      	movs	r2, #0
 800c320:	f7fe fa74 	bl	800a80c <xQueueGenericSend>
 800c324:	6278      	str	r0, [r7, #36]	@ 0x24
 800c326:	e008      	b.n	800c33a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c328:	4b06      	ldr	r3, [pc, #24]	@ (800c344 <xTimerGenericCommand+0x98>)
 800c32a:	6818      	ldr	r0, [r3, #0]
 800c32c:	f107 0110 	add.w	r1, r7, #16
 800c330:	2300      	movs	r3, #0
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	f7fe fb6c 	bl	800aa10 <xQueueGenericSendFromISR>
 800c338:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3728      	adds	r7, #40	@ 0x28
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20001a34 	.word	0x20001a34

0800c348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c352:	4b23      	ldr	r3, [pc, #140]	@ (800c3e0 <prvProcessExpiredTimer+0x98>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7fe f91f 	bl	800a5a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b00      	cmp	r3, #0
 800c372:	d023      	beq.n	800c3bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	699a      	ldr	r2, [r3, #24]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	18d1      	adds	r1, r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	6978      	ldr	r0, [r7, #20]
 800c382:	f000 f8d5 	bl	800c530 <prvInsertTimerInActiveList>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d020      	beq.n	800c3ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c38c:	2300      	movs	r3, #0
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	2300      	movs	r3, #0
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	2100      	movs	r1, #0
 800c396:	6978      	ldr	r0, [r7, #20]
 800c398:	f7ff ff88 	bl	800c2ac <xTimerGenericCommand>
 800c39c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d114      	bne.n	800c3ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	60fb      	str	r3, [r7, #12]
}
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
 800c3ba:	e7fd      	b.n	800c3b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3c2:	f023 0301 	bic.w	r3, r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	6978      	ldr	r0, [r7, #20]
 800c3d4:	4798      	blx	r3
}
 800c3d6:	bf00      	nop
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20001a2c 	.word	0x20001a2c

0800c3e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f859 	bl	800c4a8 <prvGetNextExpireTime>
 800c3f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 f805 	bl	800c40c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c402:	f000 f8d7 	bl	800c5b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c406:	bf00      	nop
 800c408:	e7f0      	b.n	800c3ec <prvTimerTask+0x8>
	...

0800c40c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c416:	f7ff f84d 	bl	800b4b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c41a:	f107 0308 	add.w	r3, r7, #8
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f866 	bl	800c4f0 <prvSampleTimeNow>
 800c424:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d130      	bne.n	800c48e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <prvProcessTimerOrBlockTask+0x3c>
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	429a      	cmp	r2, r3
 800c438:	d806      	bhi.n	800c448 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c43a:	f7ff f849 	bl	800b4d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c43e:	68f9      	ldr	r1, [r7, #12]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff ff81 	bl	800c348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c446:	e024      	b.n	800c492 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d008      	beq.n	800c460 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c44e:	4b13      	ldr	r3, [pc, #76]	@ (800c49c <prvProcessTimerOrBlockTask+0x90>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <prvProcessTimerOrBlockTask+0x50>
 800c458:	2301      	movs	r3, #1
 800c45a:	e000      	b.n	800c45e <prvProcessTimerOrBlockTask+0x52>
 800c45c:	2300      	movs	r3, #0
 800c45e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c460:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <prvProcessTimerOrBlockTask+0x94>)
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	f7fe fd89 	bl	800af84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c472:	f7ff f82d 	bl	800b4d0 <xTaskResumeAll>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10a      	bne.n	800c492 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c47c:	4b09      	ldr	r3, [pc, #36]	@ (800c4a4 <prvProcessTimerOrBlockTask+0x98>)
 800c47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	f3bf 8f6f 	isb	sy
}
 800c48c:	e001      	b.n	800c492 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c48e:	f7ff f81f 	bl	800b4d0 <xTaskResumeAll>
}
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20001a30 	.word	0x20001a30
 800c4a0:	20001a34 	.word	0x20001a34
 800c4a4:	e000ed04 	.word	0xe000ed04

0800c4a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ec <prvGetNextExpireTime+0x44>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <prvGetNextExpireTime+0x16>
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	e000      	b.n	800c4c0 <prvGetNextExpireTime+0x18>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d105      	bne.n	800c4d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4cc:	4b07      	ldr	r3, [pc, #28]	@ (800c4ec <prvGetNextExpireTime+0x44>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	e001      	b.n	800c4dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20001a2c 	.word	0x20001a2c

0800c4f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4f8:	f7ff f888 	bl	800b60c <xTaskGetTickCount>
 800c4fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c52c <prvSampleTimeNow+0x3c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	429a      	cmp	r2, r3
 800c506:	d205      	bcs.n	800c514 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c508:	f000 f93a 	bl	800c780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e002      	b.n	800c51a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c51a:	4a04      	ldr	r2, [pc, #16]	@ (800c52c <prvSampleTimeNow+0x3c>)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20001a3c 	.word	0x20001a3c

0800c530 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c53e:	2300      	movs	r3, #0
 800c540:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d812      	bhi.n	800c57c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	1ad2      	subs	r2, r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	429a      	cmp	r2, r3
 800c562:	d302      	bcc.n	800c56a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c564:	2301      	movs	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	e01b      	b.n	800c5a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c56a:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <prvInsertTimerInActiveList+0x7c>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3304      	adds	r3, #4
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f7fd ffdc 	bl	800a532 <vListInsert>
 800c57a:	e012      	b.n	800c5a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d206      	bcs.n	800c592 <prvInsertTimerInActiveList+0x62>
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d302      	bcc.n	800c592 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c58c:	2301      	movs	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e007      	b.n	800c5a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c592:	4b07      	ldr	r3, [pc, #28]	@ (800c5b0 <prvInsertTimerInActiveList+0x80>)
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3304      	adds	r3, #4
 800c59a:	4619      	mov	r1, r3
 800c59c:	4610      	mov	r0, r2
 800c59e:	f7fd ffc8 	bl	800a532 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5a2:	697b      	ldr	r3, [r7, #20]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20001a30 	.word	0x20001a30
 800c5b0:	20001a2c 	.word	0x20001a2c

0800c5b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08e      	sub	sp, #56	@ 0x38
 800c5b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ba:	e0ce      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	da19      	bge.n	800c5f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5c2:	1d3b      	adds	r3, r7, #4
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10b      	bne.n	800c5e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	61fb      	str	r3, [r7, #28]
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	e7fd      	b.n	800c5e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ec:	6850      	ldr	r0, [r2, #4]
 800c5ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5f0:	6892      	ldr	r2, [r2, #8]
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f2c0 80ae 	blt.w	800c75a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60c:	3304      	adds	r3, #4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fd ffc8 	bl	800a5a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c614:	463b      	mov	r3, r7
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ff6a 	bl	800c4f0 <prvSampleTimeNow>
 800c61c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b09      	cmp	r3, #9
 800c622:	f200 8097 	bhi.w	800c754 <prvProcessReceivedCommands+0x1a0>
 800c626:	a201      	add	r2, pc, #4	@ (adr r2, 800c62c <prvProcessReceivedCommands+0x78>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c655 	.word	0x0800c655
 800c630:	0800c655 	.word	0x0800c655
 800c634:	0800c655 	.word	0x0800c655
 800c638:	0800c6cb 	.word	0x0800c6cb
 800c63c:	0800c6df 	.word	0x0800c6df
 800c640:	0800c72b 	.word	0x0800c72b
 800c644:	0800c655 	.word	0x0800c655
 800c648:	0800c655 	.word	0x0800c655
 800c64c:	0800c6cb 	.word	0x0800c6cb
 800c650:	0800c6df 	.word	0x0800c6df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c65a:	f043 0301 	orr.w	r3, r3, #1
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	18d1      	adds	r1, r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c674:	f7ff ff5c 	bl	800c530 <prvInsertTimerInActiveList>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d06c      	beq.n	800c758 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c68c:	f003 0304 	and.w	r3, r3, #4
 800c690:	2b00      	cmp	r3, #0
 800c692:	d061      	beq.n	800c758 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	441a      	add	r2, r3
 800c69c:	2300      	movs	r3, #0
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6a6:	f7ff fe01 	bl	800c2ac <xTimerGenericCommand>
 800c6aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d152      	bne.n	800c758 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	61bb      	str	r3, [r7, #24]
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	e7fd      	b.n	800c6c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6d0:	f023 0301 	bic.w	r3, r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c6dc:	e03d      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6e4:	f043 0301 	orr.w	r3, r3, #1
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10b      	bne.n	800c716 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	617b      	str	r3, [r7, #20]
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	e7fd      	b.n	800c712 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	18d1      	adds	r1, r2, r3
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c724:	f7ff ff04 	bl	800c530 <prvInsertTimerInActiveList>
					break;
 800c728:	e017      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c730:	f003 0302 	and.w	r3, r3, #2
 800c734:	2b00      	cmp	r3, #0
 800c736:	d103      	bne.n	800c740 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c73a:	f000 fbe5 	bl	800cf08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c73e:	e00c      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c746:	f023 0301 	bic.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c752:	e002      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c754:	bf00      	nop
 800c756:	e000      	b.n	800c75a <prvProcessReceivedCommands+0x1a6>
					break;
 800c758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c75a:	4b08      	ldr	r3, [pc, #32]	@ (800c77c <prvProcessReceivedCommands+0x1c8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	1d39      	adds	r1, r7, #4
 800c760:	2200      	movs	r2, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe f9f2 	bl	800ab4c <xQueueReceive>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f47f af26 	bne.w	800c5bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	3730      	adds	r7, #48	@ 0x30
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20001a34 	.word	0x20001a34

0800c780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c786:	e049      	b.n	800c81c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c788:	4b2e      	ldr	r3, [pc, #184]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c792:	4b2c      	ldr	r3, [pc, #176]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3304      	adds	r3, #4
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7fd feff 	bl	800a5a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d02f      	beq.n	800c81c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d90e      	bls.n	800c7ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7da:	4b1a      	ldr	r3, [pc, #104]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	f7fd fea4 	bl	800a532 <vListInsert>
 800c7ea:	e017      	b.n	800c81c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff fd58 	bl	800c2ac <xTimerGenericCommand>
 800c7fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10b      	bne.n	800c81c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	603b      	str	r3, [r7, #0]
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	e7fd      	b.n	800c818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c81c:	4b09      	ldr	r3, [pc, #36]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1b0      	bne.n	800c788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c826:	4b07      	ldr	r3, [pc, #28]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c82c:	4b06      	ldr	r3, [pc, #24]	@ (800c848 <prvSwitchTimerLists+0xc8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a04      	ldr	r2, [pc, #16]	@ (800c844 <prvSwitchTimerLists+0xc4>)
 800c832:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c834:	4a04      	ldr	r2, [pc, #16]	@ (800c848 <prvSwitchTimerLists+0xc8>)
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	6013      	str	r3, [r2, #0]
}
 800c83a:	bf00      	nop
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20001a2c 	.word	0x20001a2c
 800c848:	20001a30 	.word	0x20001a30

0800c84c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c852:	f000 f969 	bl	800cb28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c856:	4b15      	ldr	r3, [pc, #84]	@ (800c8ac <prvCheckForValidListAndQueue+0x60>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d120      	bne.n	800c8a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c85e:	4814      	ldr	r0, [pc, #80]	@ (800c8b0 <prvCheckForValidListAndQueue+0x64>)
 800c860:	f7fd fe16 	bl	800a490 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c864:	4813      	ldr	r0, [pc, #76]	@ (800c8b4 <prvCheckForValidListAndQueue+0x68>)
 800c866:	f7fd fe13 	bl	800a490 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c86a:	4b13      	ldr	r3, [pc, #76]	@ (800c8b8 <prvCheckForValidListAndQueue+0x6c>)
 800c86c:	4a10      	ldr	r2, [pc, #64]	@ (800c8b0 <prvCheckForValidListAndQueue+0x64>)
 800c86e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c870:	4b12      	ldr	r3, [pc, #72]	@ (800c8bc <prvCheckForValidListAndQueue+0x70>)
 800c872:	4a10      	ldr	r2, [pc, #64]	@ (800c8b4 <prvCheckForValidListAndQueue+0x68>)
 800c874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c876:	2300      	movs	r3, #0
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	4b11      	ldr	r3, [pc, #68]	@ (800c8c0 <prvCheckForValidListAndQueue+0x74>)
 800c87c:	4a11      	ldr	r2, [pc, #68]	@ (800c8c4 <prvCheckForValidListAndQueue+0x78>)
 800c87e:	2110      	movs	r1, #16
 800c880:	200a      	movs	r0, #10
 800c882:	f7fd ff23 	bl	800a6cc <xQueueGenericCreateStatic>
 800c886:	4603      	mov	r3, r0
 800c888:	4a08      	ldr	r2, [pc, #32]	@ (800c8ac <prvCheckForValidListAndQueue+0x60>)
 800c88a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c88c:	4b07      	ldr	r3, [pc, #28]	@ (800c8ac <prvCheckForValidListAndQueue+0x60>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d005      	beq.n	800c8a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c894:	4b05      	ldr	r3, [pc, #20]	@ (800c8ac <prvCheckForValidListAndQueue+0x60>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	490b      	ldr	r1, [pc, #44]	@ (800c8c8 <prvCheckForValidListAndQueue+0x7c>)
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fb48 	bl	800af30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8a0:	f000 f974 	bl	800cb8c <vPortExitCritical>
}
 800c8a4:	bf00      	nop
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20001a34 	.word	0x20001a34
 800c8b0:	20001a04 	.word	0x20001a04
 800c8b4:	20001a18 	.word	0x20001a18
 800c8b8:	20001a2c 	.word	0x20001a2c
 800c8bc:	20001a30 	.word	0x20001a30
 800c8c0:	20001ae0 	.word	0x20001ae0
 800c8c4:	20001a40 	.word	0x20001a40
 800c8c8:	0800d37c 	.word	0x0800d37c

0800c8cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3b04      	subs	r3, #4
 800c8dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3b04      	subs	r3, #4
 800c8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	f023 0201 	bic.w	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3b04      	subs	r3, #4
 800c8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c930 <pxPortInitialiseStack+0x64>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3b14      	subs	r3, #20
 800c906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3b04      	subs	r3, #4
 800c912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f06f 0202 	mvn.w	r2, #2
 800c91a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3b20      	subs	r3, #32
 800c920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c922:	68fb      	ldr	r3, [r7, #12]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	0800c935 	.word	0x0800c935

0800c934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c93e:	4b13      	ldr	r3, [pc, #76]	@ (800c98c <prvTaskExitError+0x58>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d00b      	beq.n	800c960 <prvTaskExitError+0x2c>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	60fb      	str	r3, [r7, #12]
}
 800c95a:	bf00      	nop
 800c95c:	bf00      	nop
 800c95e:	e7fd      	b.n	800c95c <prvTaskExitError+0x28>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	60bb      	str	r3, [r7, #8]
}
 800c972:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c974:	bf00      	nop
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d0fc      	beq.n	800c976 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	2000005c 	.word	0x2000005c

0800c990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c990:	4b07      	ldr	r3, [pc, #28]	@ (800c9b0 <pxCurrentTCBConst2>)
 800c992:	6819      	ldr	r1, [r3, #0]
 800c994:	6808      	ldr	r0, [r1, #0]
 800c996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99a:	f380 8809 	msr	PSP, r0
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8811 	msr	BASEPRI, r0
 800c9aa:	4770      	bx	lr
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pxCurrentTCBConst2>:
 800c9b0:	20001504 	.word	0x20001504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop

0800c9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9b8:	4808      	ldr	r0, [pc, #32]	@ (800c9dc <prvPortStartFirstTask+0x24>)
 800c9ba:	6800      	ldr	r0, [r0, #0]
 800c9bc:	6800      	ldr	r0, [r0, #0]
 800c9be:	f380 8808 	msr	MSP, r0
 800c9c2:	f04f 0000 	mov.w	r0, #0
 800c9c6:	f380 8814 	msr	CONTROL, r0
 800c9ca:	b662      	cpsie	i
 800c9cc:	b661      	cpsie	f
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	df00      	svc	0
 800c9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9da:	bf00      	nop
 800c9dc:	e000ed08 	.word	0xe000ed08

0800c9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9e6:	4b47      	ldr	r3, [pc, #284]	@ (800cb04 <xPortStartScheduler+0x124>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a47      	ldr	r2, [pc, #284]	@ (800cb08 <xPortStartScheduler+0x128>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d10b      	bne.n	800ca08 <xPortStartScheduler+0x28>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	bf00      	nop
 800ca06:	e7fd      	b.n	800ca04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca08:	4b3e      	ldr	r3, [pc, #248]	@ (800cb04 <xPortStartScheduler+0x124>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a3f      	ldr	r2, [pc, #252]	@ (800cb0c <xPortStartScheduler+0x12c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d10b      	bne.n	800ca2a <xPortStartScheduler+0x4a>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	60fb      	str	r3, [r7, #12]
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	e7fd      	b.n	800ca26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca2a:	4b39      	ldr	r3, [pc, #228]	@ (800cb10 <xPortStartScheduler+0x130>)
 800ca2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	22ff      	movs	r2, #255	@ 0xff
 800ca3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	4b31      	ldr	r3, [pc, #196]	@ (800cb14 <xPortStartScheduler+0x134>)
 800ca50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca52:	4b31      	ldr	r3, [pc, #196]	@ (800cb18 <xPortStartScheduler+0x138>)
 800ca54:	2207      	movs	r2, #7
 800ca56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca58:	e009      	b.n	800ca6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca5a:	4b2f      	ldr	r3, [pc, #188]	@ (800cb18 <xPortStartScheduler+0x138>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	4a2d      	ldr	r2, [pc, #180]	@ (800cb18 <xPortStartScheduler+0x138>)
 800ca62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca64:	78fb      	ldrb	r3, [r7, #3]
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca76:	2b80      	cmp	r3, #128	@ 0x80
 800ca78:	d0ef      	beq.n	800ca5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca7a:	4b27      	ldr	r3, [pc, #156]	@ (800cb18 <xPortStartScheduler+0x138>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f1c3 0307 	rsb	r3, r3, #7
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d00b      	beq.n	800ca9e <xPortStartScheduler+0xbe>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60bb      	str	r3, [r7, #8]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca9e:	4b1e      	ldr	r3, [pc, #120]	@ (800cb18 <xPortStartScheduler+0x138>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	021b      	lsls	r3, r3, #8
 800caa4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb18 <xPortStartScheduler+0x138>)
 800caa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caa8:	4b1b      	ldr	r3, [pc, #108]	@ (800cb18 <xPortStartScheduler+0x138>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cab0:	4a19      	ldr	r2, [pc, #100]	@ (800cb18 <xPortStartScheduler+0x138>)
 800cab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cabc:	4b17      	ldr	r3, [pc, #92]	@ (800cb1c <xPortStartScheduler+0x13c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a16      	ldr	r2, [pc, #88]	@ (800cb1c <xPortStartScheduler+0x13c>)
 800cac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cac8:	4b14      	ldr	r3, [pc, #80]	@ (800cb1c <xPortStartScheduler+0x13c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a13      	ldr	r2, [pc, #76]	@ (800cb1c <xPortStartScheduler+0x13c>)
 800cace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cad4:	f000 f8da 	bl	800cc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cad8:	4b11      	ldr	r3, [pc, #68]	@ (800cb20 <xPortStartScheduler+0x140>)
 800cada:	2200      	movs	r2, #0
 800cadc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cade:	f000 f8f9 	bl	800ccd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cae2:	4b10      	ldr	r3, [pc, #64]	@ (800cb24 <xPortStartScheduler+0x144>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a0f      	ldr	r2, [pc, #60]	@ (800cb24 <xPortStartScheduler+0x144>)
 800cae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800caec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800caee:	f7ff ff63 	bl	800c9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caf2:	f7fe ff4f 	bl	800b994 <vTaskSwitchContext>
	prvTaskExitError();
 800caf6:	f7ff ff1d 	bl	800c934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed00 	.word	0xe000ed00
 800cb08:	410fc271 	.word	0x410fc271
 800cb0c:	410fc270 	.word	0x410fc270
 800cb10:	e000e400 	.word	0xe000e400
 800cb14:	20001b30 	.word	0x20001b30
 800cb18:	20001b34 	.word	0x20001b34
 800cb1c:	e000ed20 	.word	0xe000ed20
 800cb20:	2000005c 	.word	0x2000005c
 800cb24:	e000ef34 	.word	0xe000ef34

0800cb28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	607b      	str	r3, [r7, #4]
}
 800cb40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb42:	4b10      	ldr	r3, [pc, #64]	@ (800cb84 <vPortEnterCritical+0x5c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3301      	adds	r3, #1
 800cb48:	4a0e      	ldr	r2, [pc, #56]	@ (800cb84 <vPortEnterCritical+0x5c>)
 800cb4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb84 <vPortEnterCritical+0x5c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d110      	bne.n	800cb76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb54:	4b0c      	ldr	r3, [pc, #48]	@ (800cb88 <vPortEnterCritical+0x60>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00b      	beq.n	800cb76 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	603b      	str	r3, [r7, #0]
}
 800cb70:	bf00      	nop
 800cb72:	bf00      	nop
 800cb74:	e7fd      	b.n	800cb72 <vPortEnterCritical+0x4a>
	}
}
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	2000005c 	.word	0x2000005c
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb92:	4b12      	ldr	r3, [pc, #72]	@ (800cbdc <vPortExitCritical+0x50>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10b      	bne.n	800cbb2 <vPortExitCritical+0x26>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	607b      	str	r3, [r7, #4]
}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	e7fd      	b.n	800cbae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbdc <vPortExitCritical+0x50>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	4a08      	ldr	r2, [pc, #32]	@ (800cbdc <vPortExitCritical+0x50>)
 800cbba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbbc:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <vPortExitCritical+0x50>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d105      	bne.n	800cbd0 <vPortExitCritical+0x44>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	f383 8811 	msr	BASEPRI, r3
}
 800cbce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	2000005c 	.word	0x2000005c

0800cbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbe0:	f3ef 8009 	mrs	r0, PSP
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4b15      	ldr	r3, [pc, #84]	@ (800cc40 <pxCurrentTCBConst>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	f01e 0f10 	tst.w	lr, #16
 800cbf0:	bf08      	it	eq
 800cbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfa:	6010      	str	r0, [r2, #0]
 800cbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cc04:	f380 8811 	msr	BASEPRI, r0
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f7fe fec0 	bl	800b994 <vTaskSwitchContext>
 800cc14:	f04f 0000 	mov.w	r0, #0
 800cc18:	f380 8811 	msr	BASEPRI, r0
 800cc1c:	bc09      	pop	{r0, r3}
 800cc1e:	6819      	ldr	r1, [r3, #0]
 800cc20:	6808      	ldr	r0, [r1, #0]
 800cc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc26:	f01e 0f10 	tst.w	lr, #16
 800cc2a:	bf08      	it	eq
 800cc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc30:	f380 8809 	msr	PSP, r0
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	f3af 8000 	nop.w

0800cc40 <pxCurrentTCBConst>:
 800cc40:	20001504 	.word	0x20001504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop

0800cc48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	607b      	str	r3, [r7, #4]
}
 800cc60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc62:	f7fe fddd 	bl	800b820 <xTaskIncrementTick>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc6c:	4b06      	ldr	r3, [pc, #24]	@ (800cc88 <xPortSysTickHandler+0x40>)
 800cc6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	2300      	movs	r3, #0
 800cc76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	f383 8811 	msr	BASEPRI, r3
}
 800cc7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc90:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc96:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc4 <vPortSetupTimerInterrupt+0x38>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ccc8 <vPortSetupTimerInterrupt+0x3c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a0a      	ldr	r2, [pc, #40]	@ (800cccc <vPortSetupTimerInterrupt+0x40>)
 800cca2:	fba2 2303 	umull	r2, r3, r2, r3
 800cca6:	099b      	lsrs	r3, r3, #6
 800cca8:	4a09      	ldr	r2, [pc, #36]	@ (800ccd0 <vPortSetupTimerInterrupt+0x44>)
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccae:	4b04      	ldr	r3, [pc, #16]	@ (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800ccb0:	2207      	movs	r2, #7
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	e000e010 	.word	0xe000e010
 800ccc4:	e000e018 	.word	0xe000e018
 800ccc8:	20000050 	.word	0x20000050
 800cccc:	10624dd3 	.word	0x10624dd3
 800ccd0:	e000e014 	.word	0xe000e014

0800ccd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ccd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cce4 <vPortEnableVFP+0x10>
 800ccd8:	6801      	ldr	r1, [r0, #0]
 800ccda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ccde:	6001      	str	r1, [r0, #0]
 800cce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cce2:	bf00      	nop
 800cce4:	e000ed88 	.word	0xe000ed88

0800cce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccee:	f3ef 8305 	mrs	r3, IPSR
 800ccf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b0f      	cmp	r3, #15
 800ccf8:	d915      	bls.n	800cd26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccfa:	4a18      	ldr	r2, [pc, #96]	@ (800cd5c <vPortValidateInterruptPriority+0x74>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	4413      	add	r3, r2
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd04:	4b16      	ldr	r3, [pc, #88]	@ (800cd60 <vPortValidateInterruptPriority+0x78>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	7afa      	ldrb	r2, [r7, #11]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d20b      	bcs.n	800cd26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	e7fd      	b.n	800cd22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd26:	4b0f      	ldr	r3, [pc, #60]	@ (800cd64 <vPortValidateInterruptPriority+0x7c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cd2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd68 <vPortValidateInterruptPriority+0x80>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d90b      	bls.n	800cd4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	603b      	str	r3, [r7, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	e7fd      	b.n	800cd4a <vPortValidateInterruptPriority+0x62>
	}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	e000e3f0 	.word	0xe000e3f0
 800cd60:	20001b30 	.word	0x20001b30
 800cd64:	e000ed0c 	.word	0xe000ed0c
 800cd68:	20001b34 	.word	0x20001b34

0800cd6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b08a      	sub	sp, #40	@ 0x28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd78:	f7fe fb9c 	bl	800b4b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd7c:	4b5c      	ldr	r3, [pc, #368]	@ (800cef0 <pvPortMalloc+0x184>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd84:	f000 f924 	bl	800cfd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd88:	4b5a      	ldr	r3, [pc, #360]	@ (800cef4 <pvPortMalloc+0x188>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f040 8095 	bne.w	800cec0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d01e      	beq.n	800cdda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cd9c:	2208      	movs	r2, #8
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4413      	add	r3, r2
 800cda2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f003 0307 	and.w	r3, r3, #7
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d015      	beq.n	800cdda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f023 0307 	bic.w	r3, r3, #7
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f003 0307 	and.w	r3, r3, #7
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00b      	beq.n	800cdda <pvPortMalloc+0x6e>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	617b      	str	r3, [r7, #20]
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop
 800cdd8:	e7fd      	b.n	800cdd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d06f      	beq.n	800cec0 <pvPortMalloc+0x154>
 800cde0:	4b45      	ldr	r3, [pc, #276]	@ (800cef8 <pvPortMalloc+0x18c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d86a      	bhi.n	800cec0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cdea:	4b44      	ldr	r3, [pc, #272]	@ (800cefc <pvPortMalloc+0x190>)
 800cdec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdee:	4b43      	ldr	r3, [pc, #268]	@ (800cefc <pvPortMalloc+0x190>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdf4:	e004      	b.n	800ce00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d903      	bls.n	800ce12 <pvPortMalloc+0xa6>
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1f1      	bne.n	800cdf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce12:	4b37      	ldr	r3, [pc, #220]	@ (800cef0 <pvPortMalloc+0x184>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d051      	beq.n	800cec0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2208      	movs	r2, #8
 800ce22:	4413      	add	r3, r2
 800ce24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	1ad2      	subs	r2, r2, r3
 800ce36:	2308      	movs	r3, #8
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d920      	bls.n	800ce80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4413      	add	r3, r2
 800ce44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <pvPortMalloc+0xfc>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	613b      	str	r3, [r7, #16]
}
 800ce62:	bf00      	nop
 800ce64:	bf00      	nop
 800ce66:	e7fd      	b.n	800ce64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce7a:	69b8      	ldr	r0, [r7, #24]
 800ce7c:	f000 f90a 	bl	800d094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce80:	4b1d      	ldr	r3, [pc, #116]	@ (800cef8 <pvPortMalloc+0x18c>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	4a1b      	ldr	r2, [pc, #108]	@ (800cef8 <pvPortMalloc+0x18c>)
 800ce8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cef8 <pvPortMalloc+0x18c>)
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	4b1b      	ldr	r3, [pc, #108]	@ (800cf00 <pvPortMalloc+0x194>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d203      	bcs.n	800cea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce9a:	4b17      	ldr	r3, [pc, #92]	@ (800cef8 <pvPortMalloc+0x18c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a18      	ldr	r2, [pc, #96]	@ (800cf00 <pvPortMalloc+0x194>)
 800cea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	4b13      	ldr	r3, [pc, #76]	@ (800cef4 <pvPortMalloc+0x188>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ceb6:	4b13      	ldr	r3, [pc, #76]	@ (800cf04 <pvPortMalloc+0x198>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3301      	adds	r3, #1
 800cebc:	4a11      	ldr	r2, [pc, #68]	@ (800cf04 <pvPortMalloc+0x198>)
 800cebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cec0:	f7fe fb06 	bl	800b4d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f003 0307 	and.w	r3, r3, #7
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <pvPortMalloc+0x17a>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	60fb      	str	r3, [r7, #12]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <pvPortMalloc+0x176>
	return pvReturn;
 800cee6:	69fb      	ldr	r3, [r7, #28]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3728      	adds	r7, #40	@ 0x28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20005740 	.word	0x20005740
 800cef4:	20005754 	.word	0x20005754
 800cef8:	20005744 	.word	0x20005744
 800cefc:	20005738 	.word	0x20005738
 800cf00:	20005748 	.word	0x20005748
 800cf04:	2000574c 	.word	0x2000574c

0800cf08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d04f      	beq.n	800cfba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf1a:	2308      	movs	r3, #8
 800cf1c:	425b      	negs	r3, r3
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	4413      	add	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	4b25      	ldr	r3, [pc, #148]	@ (800cfc4 <vPortFree+0xbc>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4013      	ands	r3, r2
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <vPortFree+0x46>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	60fb      	str	r3, [r7, #12]
}
 800cf48:	bf00      	nop
 800cf4a:	bf00      	nop
 800cf4c:	e7fd      	b.n	800cf4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00b      	beq.n	800cf6e <vPortFree+0x66>
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	60bb      	str	r3, [r7, #8]
}
 800cf68:	bf00      	nop
 800cf6a:	bf00      	nop
 800cf6c:	e7fd      	b.n	800cf6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	685a      	ldr	r2, [r3, #4]
 800cf72:	4b14      	ldr	r3, [pc, #80]	@ (800cfc4 <vPortFree+0xbc>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4013      	ands	r3, r2
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d01e      	beq.n	800cfba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d11a      	bne.n	800cfba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	4b0e      	ldr	r3, [pc, #56]	@ (800cfc4 <vPortFree+0xbc>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	43db      	mvns	r3, r3
 800cf8e:	401a      	ands	r2, r3
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf94:	f7fe fa8e 	bl	800b4b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfc8 <vPortFree+0xc0>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	4a09      	ldr	r2, [pc, #36]	@ (800cfc8 <vPortFree+0xc0>)
 800cfa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cfa6:	6938      	ldr	r0, [r7, #16]
 800cfa8:	f000 f874 	bl	800d094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cfac:	4b07      	ldr	r3, [pc, #28]	@ (800cfcc <vPortFree+0xc4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	4a06      	ldr	r2, [pc, #24]	@ (800cfcc <vPortFree+0xc4>)
 800cfb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cfb6:	f7fe fa8b 	bl	800b4d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfba:	bf00      	nop
 800cfbc:	3718      	adds	r7, #24
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20005754 	.word	0x20005754
 800cfc8:	20005744 	.word	0x20005744
 800cfcc:	20005750 	.word	0x20005750

0800cfd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cfd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cfda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cfdc:	4b27      	ldr	r3, [pc, #156]	@ (800d07c <prvHeapInit+0xac>)
 800cfde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00c      	beq.n	800d004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3307      	adds	r3, #7
 800cfee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f023 0307 	bic.w	r3, r3, #7
 800cff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	4a1f      	ldr	r2, [pc, #124]	@ (800d07c <prvHeapInit+0xac>)
 800d000:	4413      	add	r3, r2
 800d002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d008:	4a1d      	ldr	r2, [pc, #116]	@ (800d080 <prvHeapInit+0xb0>)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d00e:	4b1c      	ldr	r3, [pc, #112]	@ (800d080 <prvHeapInit+0xb0>)
 800d010:	2200      	movs	r2, #0
 800d012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	4413      	add	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d01c:	2208      	movs	r2, #8
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1a9b      	subs	r3, r3, r2
 800d022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f023 0307 	bic.w	r3, r3, #7
 800d02a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4a15      	ldr	r2, [pc, #84]	@ (800d084 <prvHeapInit+0xb4>)
 800d030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d032:	4b14      	ldr	r3, [pc, #80]	@ (800d084 <prvHeapInit+0xb4>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2200      	movs	r2, #0
 800d038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d03a:	4b12      	ldr	r3, [pc, #72]	@ (800d084 <prvHeapInit+0xb4>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	1ad2      	subs	r2, r2, r3
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d050:	4b0c      	ldr	r3, [pc, #48]	@ (800d084 <prvHeapInit+0xb4>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	4a0a      	ldr	r2, [pc, #40]	@ (800d088 <prvHeapInit+0xb8>)
 800d05e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	4a09      	ldr	r2, [pc, #36]	@ (800d08c <prvHeapInit+0xbc>)
 800d066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d068:	4b09      	ldr	r3, [pc, #36]	@ (800d090 <prvHeapInit+0xc0>)
 800d06a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d06e:	601a      	str	r2, [r3, #0]
}
 800d070:	bf00      	nop
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	20001b38 	.word	0x20001b38
 800d080:	20005738 	.word	0x20005738
 800d084:	20005740 	.word	0x20005740
 800d088:	20005748 	.word	0x20005748
 800d08c:	20005744 	.word	0x20005744
 800d090:	20005754 	.word	0x20005754

0800d094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d09c:	4b28      	ldr	r3, [pc, #160]	@ (800d140 <prvInsertBlockIntoFreeList+0xac>)
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	e002      	b.n	800d0a8 <prvInsertBlockIntoFreeList+0x14>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d8f7      	bhi.n	800d0a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	4413      	add	r3, r2
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d108      	bne.n	800d0d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	441a      	add	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	441a      	add	r2, r3
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d118      	bne.n	800d11c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	4b15      	ldr	r3, [pc, #84]	@ (800d144 <prvInsertBlockIntoFreeList+0xb0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d00d      	beq.n	800d112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	441a      	add	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	e008      	b.n	800d124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d112:	4b0c      	ldr	r3, [pc, #48]	@ (800d144 <prvInsertBlockIntoFreeList+0xb0>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	e003      	b.n	800d124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d002      	beq.n	800d132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d132:	bf00      	nop
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	20005738 	.word	0x20005738
 800d144:	20005740 	.word	0x20005740

0800d148 <memset>:
 800d148:	4402      	add	r2, r0
 800d14a:	4603      	mov	r3, r0
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d100      	bne.n	800d152 <memset+0xa>
 800d150:	4770      	bx	lr
 800d152:	f803 1b01 	strb.w	r1, [r3], #1
 800d156:	e7f9      	b.n	800d14c <memset+0x4>

0800d158 <_reclaim_reent>:
 800d158:	4b29      	ldr	r3, [pc, #164]	@ (800d200 <_reclaim_reent+0xa8>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4283      	cmp	r3, r0
 800d15e:	b570      	push	{r4, r5, r6, lr}
 800d160:	4604      	mov	r4, r0
 800d162:	d04b      	beq.n	800d1fc <_reclaim_reent+0xa4>
 800d164:	69c3      	ldr	r3, [r0, #28]
 800d166:	b1ab      	cbz	r3, 800d194 <_reclaim_reent+0x3c>
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	b16b      	cbz	r3, 800d188 <_reclaim_reent+0x30>
 800d16c:	2500      	movs	r5, #0
 800d16e:	69e3      	ldr	r3, [r4, #28]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	5959      	ldr	r1, [r3, r5]
 800d174:	2900      	cmp	r1, #0
 800d176:	d13b      	bne.n	800d1f0 <_reclaim_reent+0x98>
 800d178:	3504      	adds	r5, #4
 800d17a:	2d80      	cmp	r5, #128	@ 0x80
 800d17c:	d1f7      	bne.n	800d16e <_reclaim_reent+0x16>
 800d17e:	69e3      	ldr	r3, [r4, #28]
 800d180:	4620      	mov	r0, r4
 800d182:	68d9      	ldr	r1, [r3, #12]
 800d184:	f000 f872 	bl	800d26c <_free_r>
 800d188:	69e3      	ldr	r3, [r4, #28]
 800d18a:	6819      	ldr	r1, [r3, #0]
 800d18c:	b111      	cbz	r1, 800d194 <_reclaim_reent+0x3c>
 800d18e:	4620      	mov	r0, r4
 800d190:	f000 f86c 	bl	800d26c <_free_r>
 800d194:	6961      	ldr	r1, [r4, #20]
 800d196:	b111      	cbz	r1, 800d19e <_reclaim_reent+0x46>
 800d198:	4620      	mov	r0, r4
 800d19a:	f000 f867 	bl	800d26c <_free_r>
 800d19e:	69e1      	ldr	r1, [r4, #28]
 800d1a0:	b111      	cbz	r1, 800d1a8 <_reclaim_reent+0x50>
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 f862 	bl	800d26c <_free_r>
 800d1a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d1aa:	b111      	cbz	r1, 800d1b2 <_reclaim_reent+0x5a>
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f000 f85d 	bl	800d26c <_free_r>
 800d1b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1b4:	b111      	cbz	r1, 800d1bc <_reclaim_reent+0x64>
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 f858 	bl	800d26c <_free_r>
 800d1bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d1be:	b111      	cbz	r1, 800d1c6 <_reclaim_reent+0x6e>
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 f853 	bl	800d26c <_free_r>
 800d1c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d1c8:	b111      	cbz	r1, 800d1d0 <_reclaim_reent+0x78>
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 f84e 	bl	800d26c <_free_r>
 800d1d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d1d2:	b111      	cbz	r1, 800d1da <_reclaim_reent+0x82>
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 f849 	bl	800d26c <_free_r>
 800d1da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d1dc:	b111      	cbz	r1, 800d1e4 <_reclaim_reent+0x8c>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 f844 	bl	800d26c <_free_r>
 800d1e4:	6a23      	ldr	r3, [r4, #32]
 800d1e6:	b14b      	cbz	r3, 800d1fc <_reclaim_reent+0xa4>
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1ee:	4718      	bx	r3
 800d1f0:	680e      	ldr	r6, [r1, #0]
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 f83a 	bl	800d26c <_free_r>
 800d1f8:	4631      	mov	r1, r6
 800d1fa:	e7bb      	b.n	800d174 <_reclaim_reent+0x1c>
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	bf00      	nop
 800d200:	20000060 	.word	0x20000060

0800d204 <__libc_init_array>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	4d0d      	ldr	r5, [pc, #52]	@ (800d23c <__libc_init_array+0x38>)
 800d208:	4c0d      	ldr	r4, [pc, #52]	@ (800d240 <__libc_init_array+0x3c>)
 800d20a:	1b64      	subs	r4, r4, r5
 800d20c:	10a4      	asrs	r4, r4, #2
 800d20e:	2600      	movs	r6, #0
 800d210:	42a6      	cmp	r6, r4
 800d212:	d109      	bne.n	800d228 <__libc_init_array+0x24>
 800d214:	4d0b      	ldr	r5, [pc, #44]	@ (800d244 <__libc_init_array+0x40>)
 800d216:	4c0c      	ldr	r4, [pc, #48]	@ (800d248 <__libc_init_array+0x44>)
 800d218:	f000 f87e 	bl	800d318 <_init>
 800d21c:	1b64      	subs	r4, r4, r5
 800d21e:	10a4      	asrs	r4, r4, #2
 800d220:	2600      	movs	r6, #0
 800d222:	42a6      	cmp	r6, r4
 800d224:	d105      	bne.n	800d232 <__libc_init_array+0x2e>
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22c:	4798      	blx	r3
 800d22e:	3601      	adds	r6, #1
 800d230:	e7ee      	b.n	800d210 <__libc_init_array+0xc>
 800d232:	f855 3b04 	ldr.w	r3, [r5], #4
 800d236:	4798      	blx	r3
 800d238:	3601      	adds	r6, #1
 800d23a:	e7f2      	b.n	800d222 <__libc_init_array+0x1e>
 800d23c:	0800d458 	.word	0x0800d458
 800d240:	0800d458 	.word	0x0800d458
 800d244:	0800d458 	.word	0x0800d458
 800d248:	0800d45c 	.word	0x0800d45c

0800d24c <__retarget_lock_acquire_recursive>:
 800d24c:	4770      	bx	lr

0800d24e <__retarget_lock_release_recursive>:
 800d24e:	4770      	bx	lr

0800d250 <memcpy>:
 800d250:	440a      	add	r2, r1
 800d252:	4291      	cmp	r1, r2
 800d254:	f100 33ff 	add.w	r3, r0, #4294967295
 800d258:	d100      	bne.n	800d25c <memcpy+0xc>
 800d25a:	4770      	bx	lr
 800d25c:	b510      	push	{r4, lr}
 800d25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d262:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d266:	4291      	cmp	r1, r2
 800d268:	d1f9      	bne.n	800d25e <memcpy+0xe>
 800d26a:	bd10      	pop	{r4, pc}

0800d26c <_free_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4605      	mov	r5, r0
 800d270:	2900      	cmp	r1, #0
 800d272:	d041      	beq.n	800d2f8 <_free_r+0x8c>
 800d274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d278:	1f0c      	subs	r4, r1, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	bfb8      	it	lt
 800d27e:	18e4      	addlt	r4, r4, r3
 800d280:	f000 f83e 	bl	800d300 <__malloc_lock>
 800d284:	4a1d      	ldr	r2, [pc, #116]	@ (800d2fc <_free_r+0x90>)
 800d286:	6813      	ldr	r3, [r2, #0]
 800d288:	b933      	cbnz	r3, 800d298 <_free_r+0x2c>
 800d28a:	6063      	str	r3, [r4, #4]
 800d28c:	6014      	str	r4, [r2, #0]
 800d28e:	4628      	mov	r0, r5
 800d290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d294:	f000 b83a 	b.w	800d30c <__malloc_unlock>
 800d298:	42a3      	cmp	r3, r4
 800d29a:	d908      	bls.n	800d2ae <_free_r+0x42>
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	1821      	adds	r1, r4, r0
 800d2a0:	428b      	cmp	r3, r1
 800d2a2:	bf01      	itttt	eq
 800d2a4:	6819      	ldreq	r1, [r3, #0]
 800d2a6:	685b      	ldreq	r3, [r3, #4]
 800d2a8:	1809      	addeq	r1, r1, r0
 800d2aa:	6021      	streq	r1, [r4, #0]
 800d2ac:	e7ed      	b.n	800d28a <_free_r+0x1e>
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	b10b      	cbz	r3, 800d2b8 <_free_r+0x4c>
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	d9fa      	bls.n	800d2ae <_free_r+0x42>
 800d2b8:	6811      	ldr	r1, [r2, #0]
 800d2ba:	1850      	adds	r0, r2, r1
 800d2bc:	42a0      	cmp	r0, r4
 800d2be:	d10b      	bne.n	800d2d8 <_free_r+0x6c>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	4401      	add	r1, r0
 800d2c4:	1850      	adds	r0, r2, r1
 800d2c6:	4283      	cmp	r3, r0
 800d2c8:	6011      	str	r1, [r2, #0]
 800d2ca:	d1e0      	bne.n	800d28e <_free_r+0x22>
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	6053      	str	r3, [r2, #4]
 800d2d2:	4408      	add	r0, r1
 800d2d4:	6010      	str	r0, [r2, #0]
 800d2d6:	e7da      	b.n	800d28e <_free_r+0x22>
 800d2d8:	d902      	bls.n	800d2e0 <_free_r+0x74>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	602b      	str	r3, [r5, #0]
 800d2de:	e7d6      	b.n	800d28e <_free_r+0x22>
 800d2e0:	6820      	ldr	r0, [r4, #0]
 800d2e2:	1821      	adds	r1, r4, r0
 800d2e4:	428b      	cmp	r3, r1
 800d2e6:	bf04      	itt	eq
 800d2e8:	6819      	ldreq	r1, [r3, #0]
 800d2ea:	685b      	ldreq	r3, [r3, #4]
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	bf04      	itt	eq
 800d2f0:	1809      	addeq	r1, r1, r0
 800d2f2:	6021      	streq	r1, [r4, #0]
 800d2f4:	6054      	str	r4, [r2, #4]
 800d2f6:	e7ca      	b.n	800d28e <_free_r+0x22>
 800d2f8:	bd38      	pop	{r3, r4, r5, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20005894 	.word	0x20005894

0800d300 <__malloc_lock>:
 800d300:	4801      	ldr	r0, [pc, #4]	@ (800d308 <__malloc_lock+0x8>)
 800d302:	f7ff bfa3 	b.w	800d24c <__retarget_lock_acquire_recursive>
 800d306:	bf00      	nop
 800d308:	20005890 	.word	0x20005890

0800d30c <__malloc_unlock>:
 800d30c:	4801      	ldr	r0, [pc, #4]	@ (800d314 <__malloc_unlock+0x8>)
 800d30e:	f7ff bf9e 	b.w	800d24e <__retarget_lock_release_recursive>
 800d312:	bf00      	nop
 800d314:	20005890 	.word	0x20005890

0800d318 <_init>:
 800d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31a:	bf00      	nop
 800d31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31e:	bc08      	pop	{r3}
 800d320:	469e      	mov	lr, r3
 800d322:	4770      	bx	lr

0800d324 <_fini>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	bf00      	nop
 800d328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32a:	bc08      	pop	{r3}
 800d32c:	469e      	mov	lr, r3
 800d32e:	4770      	bx	lr
