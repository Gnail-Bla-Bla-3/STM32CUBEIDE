
SentrySwerve2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e104  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800e294  0800e294  0000f294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e41c  0800e41c  0001007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e41c  0800e41c  0000f41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e424  0800e424  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e424  0800e424  0000f424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e428  0800e428  0000f428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800e42c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001007c  2**0
                  CONTENTS
 10 .bss          00005838  2000007c  2000007c  0001007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200058b4  200058b4  0001007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025bfa  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005521  00000000  00000000  00035ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f00  00000000  00000000  0003b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000183f  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002626b  00000000  00000000  0003e907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e6c  00000000  00000000  00064b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e159b  00000000  00000000  0008a9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016bf79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088b0  00000000  00000000  0016bfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0017486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e27c 	.word	0x0800e27c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800e27c 	.word	0x0800e27c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <BMI088_ACCEL_NS_L+0x18>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <BMI088_ACCEL_NS_L+0x1c>)
 8000e06:	8811      	ldrh	r1, [r2, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fcb0 	bl	8006770 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000004 	.word	0x20000004

08000e1c <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <BMI088_ACCEL_NS_H+0x18>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <BMI088_ACCEL_NS_H+0x1c>)
 8000e26:	8811      	ldrh	r1, [r2, #0]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 fca0 	bl	8006770 <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <BMI088_GYRO_NS_L+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <BMI088_GYRO_NS_L+0x1c>)
 8000e46:	8811      	ldrh	r1, [r2, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 fc90 	bl	8006770 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000008 	.word	0x20000008
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <BMI088_GYRO_NS_H+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <BMI088_GYRO_NS_H+0x1c>)
 8000e66:	8811      	ldrh	r1, [r2, #0]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 fc80 	bl	8006770 <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000e86:	f107 020f 	add.w	r2, r7, #15
 8000e8a:	1df9      	adds	r1, r7, #7
 8000e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <BMI088_read_write_byte+0x28>)
 8000e96:	f006 fff1 	bl	8007e7c <HAL_SPI_TransmitReceive>
    return rx_data;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000074c 	.word	0x2000074c

08000ea8 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <IMU_get_temp+0x1c>)
 8000eae:	4906      	ldr	r1, [pc, #24]	@ (8000ec8 <IMU_get_temp+0x20>)
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <IMU_get_temp+0x24>)
 8000eb2:	f000 f80d 	bl	8000ed0 <BMI088_read>
	return temp;
 8000eb6:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <IMU_get_temp+0x1c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	ee07 3a90 	vmov	s15, r3
}
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000b0 	.word	0x200000b0
 8000ec8:	200000a4 	.word	0x200000a4
 8000ecc:	20000098 	.word	0x20000098

08000ed0 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000edc:	4a70      	ldr	r2, [pc, #448]	@ (80010a0 <BMI088_read+0x1d0>)
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee6:	6018      	str	r0, [r3, #0]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	8019      	strh	r1, [r3, #0]
 8000eec:	3302      	adds	r3, #2
 8000eee:	0c0a      	lsrs	r2, r1, #16
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000ef6:	f7ff ff81 	bl	8000dfc <BMI088_ACCEL_NS_L>
 8000efa:	2092      	movs	r0, #146	@ 0x92
 8000efc:	f7ff ffbe 	bl	8000e7c <BMI088_read_write_byte>
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2206      	movs	r2, #6
 8000f06:	4619      	mov	r1, r3
 8000f08:	2012      	movs	r0, #18
 8000f0a:	f000 f8cf 	bl	80010ac <BMI088_read_muli_reg>
 8000f0e:	f7ff ff85 	bl	8000e1c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000f12:	7d7b      	ldrb	r3, [r7, #21]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7d3b      	ldrb	r3, [r7, #20]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2c:	4b5d      	ldr	r3, [pc, #372]	@ (80010a4 <BMI088_read+0x1d4>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	4b53      	ldr	r3, [pc, #332]	@ (80010a4 <BMI088_read+0x1d4>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f68:	7e7b      	ldrb	r3, [r7, #25]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	7e3b      	ldrb	r3, [r7, #24]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <BMI088_read+0x1d4>)
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000f94:	f7ff ff52 	bl	8000e3c <BMI088_GYRO_NS_L>
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f883 	bl	80010ac <BMI088_read_muli_reg>
 8000fa6:	f7ff ff59 	bl	8000e5c <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000faa:	7d3b      	ldrb	r3, [r7, #20]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d140      	bne.n	8001032 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7dbb      	ldrb	r3, [r7, #22]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	4b37      	ldr	r3, [pc, #220]	@ (80010a8 <BMI088_read+0x1d8>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000fda:	7e7b      	ldrb	r3, [r7, #25]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	7e3b      	ldrb	r3, [r7, #24]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000fe8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <BMI088_read+0x1d8>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8001006:	7efb      	ldrb	r3, [r7, #27]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7ebb      	ldrb	r3, [r7, #26]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001014:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <BMI088_read+0x1d8>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3308      	adds	r3, #8
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001032:	f7ff fee3 	bl	8000dfc <BMI088_ACCEL_NS_L>
 8001036:	20a2      	movs	r0, #162	@ 0xa2
 8001038:	f7ff ff20 	bl	8000e7c <BMI088_read_write_byte>
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2202      	movs	r2, #2
 8001042:	4619      	mov	r1, r3
 8001044:	2022      	movs	r0, #34	@ 0x22
 8001046:	f000 f831 	bl	80010ac <BMI088_read_muli_reg>
 800104a:	f7ff fee7 	bl	8000e1c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800104e:	7d3b      	ldrb	r3, [r7, #20]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	b21a      	sxth	r2, r3
 8001054:	7d7b      	ldrb	r3, [r7, #21]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	b2db      	uxtb	r3, r3
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001060:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001068:	db04      	blt.n	8001074 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800106a:	8bfb      	ldrh	r3, [r7, #30]
 800106c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001070:	b29b      	uxth	r3, r3
 8001072:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001074:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001088:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800108c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edc3 7a00 	vstr	s15, [r3]
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800e294 	.word	0x0800e294
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000014 	.word	0x20000014

080010ac <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fed9 	bl	8000e7c <BMI088_read_write_byte>

    while (len != 0)
 80010ca:	e00c      	b.n	80010e6 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 80010cc:	2055      	movs	r0, #85	@ 0x55
 80010ce:	f7ff fed5 	bl	8000e7c <BMI088_read_write_byte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	701a      	strb	r2, [r3, #0]
        buf++;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
        len--;
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1ef      	bne.n	80010cc <BMI088_read_muli_reg+0x20>
    }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	@ 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	f107 0210 	add.w	r2, r7, #16
 8001108:	2100      	movs	r1, #0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f004 f908 	bl	8005320 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001116:	d813      	bhi.n	8001140 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8001118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800111c:	f240 809c 	bls.w	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001120:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001124:	2b03      	cmp	r3, #3
 8001126:	f200 8097 	bhi.w	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800112a:	a201      	add	r2, pc, #4	@ (adr r2, 8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001235 	.word	0x08001235
 8001134:	08001247 	.word	0x08001247
 8001138:	08001259 	.word	0x08001259
 800113c:	08001259 	.word	0x08001259
 8001140:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001144:	2b0a      	cmp	r3, #10
 8001146:	f200 8087 	bhi.w	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a44      	ldr	r2, [pc, #272]	@ (8001268 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d131      	bne.n	80011c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 800115c:	7a3b      	ldrb	r3, [r7, #8]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800116e:	b291      	uxth	r1, r2
 8001170:	4a3e      	ldr	r2, [pc, #248]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001172:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001176:	7abb      	ldrb	r3, [r7, #10]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b219      	sxth	r1, r3
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	b21a      	sxth	r2, r3
 8001180:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001184:	430a      	orrs	r2, r1
 8001186:	b211      	sxth	r1, r2
 8001188:	4a38      	ldr	r2, [pc, #224]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	460a      	mov	r2, r1
 8001190:	805a      	strh	r2, [r3, #2]
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b219      	sxth	r1, r3
 8001198:	7b7b      	ldrb	r3, [r7, #13]
 800119a:	b21a      	sxth	r2, r3
 800119c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011a0:	430a      	orrs	r2, r1
 80011a2:	b211      	sxth	r1, r2
 80011a4:	4a31      	ldr	r2, [pc, #196]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	460a      	mov	r2, r1
 80011ac:	809a      	strh	r2, [r3, #4]
 80011ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b2:	7bb9      	ldrb	r1, [r7, #14]
 80011b4:	4a2d      	ldr	r2, [pc, #180]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	460a      	mov	r2, r1
 80011bc:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 80011be:	e04d      	b.n	800125c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d149      	bne.n	800125c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 80011c8:	7a3b      	ldrb	r3, [r7, #8]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a7b      	ldrb	r3, [r7, #9]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011da:	b291      	uxth	r1, r2
 80011dc:	4a23      	ldr	r2, [pc, #140]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011de:	330b      	adds	r3, #11
 80011e0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80011e4:	7abb      	ldrb	r3, [r7, #10]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b219      	sxth	r1, r3
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f2:	430a      	orrs	r2, r1
 80011f4:	b211      	sxth	r1, r2
 80011f6:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011f8:	330b      	adds	r3, #11
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	460a      	mov	r2, r1
 8001200:	805a      	strh	r2, [r3, #2]
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b219      	sxth	r1, r3
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	b21a      	sxth	r2, r3
 800120c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001210:	430a      	orrs	r2, r1
 8001212:	b211      	sxth	r1, r2
 8001214:	4a15      	ldr	r2, [pc, #84]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001216:	330b      	adds	r3, #11
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	460a      	mov	r2, r1
 800121e:	809a      	strh	r2, [r3, #4]
 8001220:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001224:	7bb9      	ldrb	r1, [r7, #14]
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001228:	330b      	adds	r3, #11
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	719a      	strb	r2, [r3, #6]
            break;
 8001232:	e013      	b.n	800125c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001236:	461a      	mov	r2, r3
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001240:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 8001244:	e00b      	b.n	800125e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001248:	3308      	adds	r3, #8
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001252:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8001256:	e002      	b.n	800125e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 8001258:	bf00      	nop
 800125a:	e000      	b.n	800125e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 800125c:	bf00      	nop
        }
    }
}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	@ 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200006a8 	.word	0x200006a8
 800126c:	20000104 	.word	0x20000104
 8001270:	200006d0 	.word	0x200006d0
 8001274:	20000514 	.word	0x20000514

08001278 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	4603      	mov	r3, r0
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001296:	88bb      	ldrh	r3, [r7, #4]
 8001298:	4a27      	ldr	r2, [pc, #156]	@ (8001338 <CAN_DriveMotor+0xc0>)
 800129a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <CAN_DriveMotor+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <CAN_DriveMotor+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <CAN_DriveMotor+0xc0>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 80012ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012b2:	121b      	asrs	r3, r3, #8
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012ba:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012c2:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80012c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012c8:	121b      	asrs	r3, r3, #8
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012d0:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80012d2:	883b      	ldrh	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012d8:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80012da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012de:	121b      	asrs	r3, r3, #8
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012e6:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 80012e8:	8c3b      	ldrh	r3, [r7, #32]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012ee:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80012f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012f4:	121b      	asrs	r3, r3, #8
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <CAN_DriveMotor+0xc4>)
 80012fc:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80012fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <CAN_DriveMotor+0xc4>)
 8001304:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d107      	bne.n	800131c <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <CAN_DriveMotor+0xc4>)
 8001312:	4909      	ldr	r1, [pc, #36]	@ (8001338 <CAN_DriveMotor+0xc0>)
 8001314:	480a      	ldr	r0, [pc, #40]	@ (8001340 <CAN_DriveMotor+0xc8>)
 8001316:	f003 ff33 	bl	8005180 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 800131a:	e009      	b.n	8001330 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d106      	bne.n	8001330 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <CAN_DriveMotor+0xc4>)
 8001328:	4903      	ldr	r1, [pc, #12]	@ (8001338 <CAN_DriveMotor+0xc0>)
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <CAN_DriveMotor+0xcc>)
 800132c:	f003 ff28 	bl	8005180 <HAL_CAN_AddTxMessage>
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	200000b4 	.word	0x200000b4
 800133c:	200000cc 	.word	0x200000cc
 8001340:	200006a8 	.word	0x200006a8
 8001344:	200006d0 	.word	0x200006d0

08001348 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	2b04      	cmp	r3, #4
 800136a:	f000 8142 	beq.w	80015f2 <CAN_setMotorCtrlVal+0x2aa>
 800136e:	2b04      	cmp	r3, #4
 8001370:	f300 81e1 	bgt.w	8001736 <CAN_setMotorCtrlVal+0x3ee>
 8001374:	2b02      	cmp	r3, #2
 8001376:	dc02      	bgt.n	800137e <CAN_setMotorCtrlVal+0x36>
 8001378:	2b00      	cmp	r3, #0
 800137a:	dc04      	bgt.n	8001386 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 800137c:	e1db      	b.n	8001736 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800137e:	2b03      	cmp	r3, #3
 8001380:	f000 8097 	beq.w	80014b2 <CAN_setMotorCtrlVal+0x16a>
}
 8001384:	e1d7      	b.n	8001736 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001386:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800138a:	2b04      	cmp	r3, #4
 800138c:	dc02      	bgt.n	8001394 <CAN_setMotorCtrlVal+0x4c>
 800138e:	2b00      	cmp	r3, #0
 8001390:	dc05      	bgt.n	800139e <CAN_setMotorCtrlVal+0x56>
					break;
 8001392:	e08c      	b.n	80014ae <CAN_setMotorCtrlVal+0x166>
 8001394:	3b05      	subs	r3, #5
 8001396:	2b03      	cmp	r3, #3
 8001398:	f200 8089 	bhi.w	80014ae <CAN_setMotorCtrlVal+0x166>
 800139c:	e042      	b.n	8001424 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	1e5a      	subs	r2, r3, #1
 80013a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013a6:	1e59      	subs	r1, r3, #1
 80013a8:	48bd      	ldr	r0, [pc, #756]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	49b8      	ldr	r1, [pc, #736]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	f9b3 4000 	ldrsh.w	r4, [r3]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	49b3      	ldr	r1, [pc, #716]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3302      	adds	r3, #2
 80013e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	49ad      	ldr	r1, [pc, #692]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3304      	adds	r3, #4
 80013f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	48a8      	ldr	r0, [pc, #672]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4403      	add	r3, r0
 800140a:	3306      	adds	r3, #6
 800140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001410:	79f8      	ldrb	r0, [r7, #7]
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	9100      	str	r1, [sp, #0]
 8001416:	462b      	mov	r3, r5
 8001418:	4622      	mov	r2, r4
 800141a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141e:	f7ff ff2b 	bl	8001278 <CAN_DriveMotor>
					break;
 8001422:	e045      	b.n	80014b0 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800142c:	1f59      	subs	r1, r3, #5
 800142e:	489c      	ldr	r0, [pc, #624]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	887a      	ldrh	r2, [r7, #2]
 800143e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	4996      	ldr	r1, [pc, #600]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	4990      	ldr	r1, [pc, #576]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	330a      	adds	r3, #10
 800146a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	498b      	ldr	r1, [pc, #556]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	330c      	adds	r3, #12
 8001480:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	4885      	ldr	r0, [pc, #532]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4403      	add	r3, r0
 8001494:	330e      	adds	r3, #14
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	79f8      	ldrb	r0, [r7, #7]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	462b      	mov	r3, r5
 80014a2:	4622      	mov	r2, r4
 80014a4:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014a8:	f7ff fee6 	bl	8001278 <CAN_DriveMotor>
					break;
 80014ac:	e000      	b.n	80014b0 <CAN_setMotorCtrlVal+0x168>
					break;
 80014ae:	bf00      	nop
			break;
 80014b0:	e141      	b.n	8001736 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80014b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	f000 8097 	beq.w	80015ea <CAN_setMotorCtrlVal+0x2a2>
 80014bc:	2b08      	cmp	r3, #8
 80014be:	f300 8096 	bgt.w	80015ee <CAN_setMotorCtrlVal+0x2a6>
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	dc02      	bgt.n	80014cc <CAN_setMotorCtrlVal+0x184>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc05      	bgt.n	80014d6 <CAN_setMotorCtrlVal+0x18e>
					break;
 80014ca:	e090      	b.n	80015ee <CAN_setMotorCtrlVal+0x2a6>
 80014cc:	3b05      	subs	r3, #5
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	f200 808d 	bhi.w	80015ee <CAN_setMotorCtrlVal+0x2a6>
 80014d4:	e044      	b.n	8001560 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014de:	1e59      	subs	r1, r3, #1
 80014e0:	486f      	ldr	r0, [pc, #444]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	4969      	ldr	r1, [pc, #420]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3308      	adds	r3, #8
 8001506:	f9b3 4000 	ldrsh.w	r4, [r3]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	4964      	ldr	r1, [pc, #400]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	330a      	adds	r3, #10
 800151c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	495e      	ldr	r1, [pc, #376]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	330c      	adds	r3, #12
 8001532:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	4859      	ldr	r0, [pc, #356]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4403      	add	r3, r0
 8001546:	330e      	adds	r3, #14
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	79f8      	ldrb	r0, [r7, #7]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9100      	str	r1, [sp, #0]
 8001552:	462b      	mov	r3, r5
 8001554:	4622      	mov	r2, r4
 8001556:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800155a:	f7ff fe8d 	bl	8001278 <CAN_DriveMotor>
					break;
 800155e:	e047      	b.n	80015f0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001568:	1f59      	subs	r1, r3, #5
 800156a:	484d      	ldr	r0, [pc, #308]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3308      	adds	r3, #8
 8001578:	887a      	ldrh	r2, [r7, #2]
 800157a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	4947      	ldr	r1, [pc, #284]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3310      	adds	r3, #16
 8001590:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	4941      	ldr	r1, [pc, #260]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3312      	adds	r3, #18
 80015a6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	493c      	ldr	r1, [pc, #240]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	3314      	adds	r3, #20
 80015bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	4836      	ldr	r0, [pc, #216]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4403      	add	r3, r0
 80015d0:	3316      	adds	r3, #22
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	79f8      	ldrb	r0, [r7, #7]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	9100      	str	r1, [sp, #0]
 80015dc:	462b      	mov	r3, r5
 80015de:	4622      	mov	r2, r4
 80015e0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80015e4:	f7ff fe48 	bl	8001278 <CAN_DriveMotor>
					break;
 80015e8:	e002      	b.n	80015f0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 80015ea:	bf00      	nop
 80015ec:	e0a3      	b.n	8001736 <CAN_setMotorCtrlVal+0x3ee>
					break;
 80015ee:	bf00      	nop
			break;
 80015f0:	e0a1      	b.n	8001736 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80015f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	f000 8099 	beq.w	800172e <CAN_setMotorCtrlVal+0x3e6>
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	f300 8098 	bgt.w	8001732 <CAN_setMotorCtrlVal+0x3ea>
 8001602:	2b04      	cmp	r3, #4
 8001604:	dc02      	bgt.n	800160c <CAN_setMotorCtrlVal+0x2c4>
 8001606:	2b00      	cmp	r3, #0
 8001608:	dc05      	bgt.n	8001616 <CAN_setMotorCtrlVal+0x2ce>
					break;
 800160a:	e092      	b.n	8001732 <CAN_setMotorCtrlVal+0x3ea>
 800160c:	3b05      	subs	r3, #5
 800160e:	2b02      	cmp	r3, #2
 8001610:	f200 808f 	bhi.w	8001732 <CAN_setMotorCtrlVal+0x3ea>
 8001614:	e046      	b.n	80016a4 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800161e:	1e59      	subs	r1, r3, #1
 8001620:	481f      	ldr	r0, [pc, #124]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3304      	adds	r3, #4
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	4919      	ldr	r1, [pc, #100]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3308      	adds	r3, #8
 8001646:	f9b3 4000 	ldrsh.w	r4, [r3]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	4914      	ldr	r1, [pc, #80]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	330a      	adds	r3, #10
 800165c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	330c      	adds	r3, #12
 8001672:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <CAN_setMotorCtrlVal+0x358>)
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4403      	add	r3, r0
 8001686:	330e      	adds	r3, #14
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	79f8      	ldrb	r0, [r7, #7]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9100      	str	r1, [sp, #0]
 8001692:	462b      	mov	r3, r5
 8001694:	4622      	mov	r2, r4
 8001696:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800169a:	f7ff fded 	bl	8001278 <CAN_DriveMotor>
					break;
 800169e:	e049      	b.n	8001734 <CAN_setMotorCtrlVal+0x3ec>
 80016a0:	200000d4 	.word	0x200000d4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016ac:	1f59      	subs	r1, r3, #5
 80016ae:	4824      	ldr	r0, [pc, #144]	@ (8001740 <CAN_setMotorCtrlVal+0x3f8>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3308      	adds	r3, #8
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	491e      	ldr	r1, [pc, #120]	@ (8001740 <CAN_setMotorCtrlVal+0x3f8>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3310      	adds	r3, #16
 80016d4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	1e5a      	subs	r2, r3, #1
 80016dc:	4918      	ldr	r1, [pc, #96]	@ (8001740 <CAN_setMotorCtrlVal+0x3f8>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3312      	adds	r3, #18
 80016ea:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	4913      	ldr	r1, [pc, #76]	@ (8001740 <CAN_setMotorCtrlVal+0x3f8>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3314      	adds	r3, #20
 8001700:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <CAN_setMotorCtrlVal+0x3f8>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4403      	add	r3, r0
 8001714:	3316      	adds	r3, #22
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	79f8      	ldrb	r0, [r7, #7]
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	9100      	str	r1, [sp, #0]
 8001720:	462b      	mov	r3, r5
 8001722:	4622      	mov	r2, r4
 8001724:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001728:	f7ff fda6 	bl	8001278 <CAN_DriveMotor>
					break;
 800172c:	e002      	b.n	8001734 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001732:	bf00      	nop
			break;
 8001734:	bf00      	nop
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bdb0      	pop	{r4, r5, r7, pc}
 800173e:	bf00      	nop
 8001740:	200000d4 	.word	0x200000d4

08001744 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	eef0 6a40 	vmov.f32	s13, s0
 8001756:	eeb0 7a60 	vmov.f32	s14, s1
 800175a:	eef0 7a41 	vmov.f32	s15, s2
 800175e:	4623      	mov	r3, r4
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	4603      	mov	r3, r0
 8001764:	75bb      	strb	r3, [r7, #22]
 8001766:	460b      	mov	r3, r1
 8001768:	757b      	strb	r3, [r7, #21]
 800176a:	4613      	mov	r3, r2
 800176c:	827b      	strh	r3, [r7, #18]
 800176e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001772:	ed87 7a02 	vstr	s14, [r7, #8]
 8001776:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3b01      	subs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001784:	7dbb      	ldrb	r3, [r7, #22]
 8001786:	2b02      	cmp	r3, #2
 8001788:	dc02      	bgt.n	8001790 <calcRPM_PID+0x4c>
 800178a:	2b00      	cmp	r3, #0
 800178c:	dc04      	bgt.n	8001798 <calcRPM_PID+0x54>
 800178e:	e00d      	b.n	80017ac <calcRPM_PID+0x68>
 8001790:	3b03      	subs	r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d80a      	bhi.n	80017ac <calcRPM_PID+0x68>
 8001796:	e004      	b.n	80017a2 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001798:	7d7b      	ldrb	r3, [r7, #21]
 800179a:	3b01      	subs	r3, #1
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80017a0:	e009      	b.n	80017b6 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80017a2:	7d7b      	ldrb	r3, [r7, #21]
 80017a4:	3303      	adds	r3, #3
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80017aa:	e004      	b.n	80017b6 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80017ac:	7d7b      	ldrb	r3, [r7, #21]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80017b4:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80017b6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80017ba:	7ffa      	ldrb	r2, [r7, #31]
 80017bc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80017c0:	4c70      	ldr	r4, [pc, #448]	@ (8001984 <calcRPM_PID+0x240>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	4403      	add	r3, r0
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4423      	add	r3, r4
 80017d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d6:	7ffa      	ldrb	r2, [r7, #31]
 80017d8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80017dc:	1ac9      	subs	r1, r1, r3
 80017de:	4c6a      	ldr	r4, [pc, #424]	@ (8001988 <calcRPM_PID+0x244>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	4403      	add	r3, r0
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4423      	add	r3, r4
 80017f0:	3304      	adds	r3, #4
 80017f2:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80017f4:	7ffa      	ldrb	r2, [r7, #31]
 80017f6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80017fa:	4863      	ldr	r0, [pc, #396]	@ (8001988 <calcRPM_PID+0x244>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	440b      	add	r3, r1
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4403      	add	r3, r0
 800180c:	3308      	adds	r3, #8
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	7ffa      	ldrb	r2, [r7, #31]
 8001812:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001816:	4c5c      	ldr	r4, [pc, #368]	@ (8001988 <calcRPM_PID+0x244>)
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	4403      	add	r3, r0
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4423      	add	r3, r4
 8001828:	3304      	adds	r3, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	7ffa      	ldrb	r2, [r7, #31]
 800182e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001832:	4419      	add	r1, r3
 8001834:	4c54      	ldr	r4, [pc, #336]	@ (8001988 <calcRPM_PID+0x244>)
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	4403      	add	r3, r0
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4423      	add	r3, r4
 8001846:	3308      	adds	r3, #8
 8001848:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800184a:	7ffa      	ldrb	r2, [r7, #31]
 800184c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001850:	484d      	ldr	r0, [pc, #308]	@ (8001988 <calcRPM_PID+0x244>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	440b      	add	r3, r1
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4403      	add	r3, r0
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	7ffa      	ldrb	r2, [r7, #31]
 8001866:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800186a:	4c46      	ldr	r4, [pc, #280]	@ (8001984 <calcRPM_PID+0x240>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	4403      	add	r3, r0
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4423      	add	r3, r4
 800187c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001880:	7ffa      	ldrb	r2, [r7, #31]
 8001882:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001886:	1ac9      	subs	r1, r1, r3
 8001888:	4c3f      	ldr	r4, [pc, #252]	@ (8001988 <calcRPM_PID+0x244>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	4403      	add	r3, r0
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4423      	add	r3, r4
 800189a:	330c      	adds	r3, #12
 800189c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 800189e:	7ffa      	ldrb	r2, [r7, #31]
 80018a0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80018a4:	4837      	ldr	r0, [pc, #220]	@ (8001984 <calcRPM_PID+0x240>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4403      	add	r3, r0
 80018b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ba:	7ffa      	ldrb	r2, [r7, #31]
 80018bc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80018c0:	461c      	mov	r4, r3
 80018c2:	4831      	ldr	r0, [pc, #196]	@ (8001988 <calcRPM_PID+0x244>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4403      	add	r3, r0
 80018d4:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80018d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018da:	7ffa      	ldrb	r2, [r7, #31]
 80018dc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80018e0:	4829      	ldr	r0, [pc, #164]	@ (8001988 <calcRPM_PID+0x244>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4403      	add	r3, r0
 80018f2:	3304      	adds	r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001902:	edd7 6a02 	vldr	s13, [r7, #8]
 8001906:	7ffa      	ldrb	r2, [r7, #31]
 8001908:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800190c:	481e      	ldr	r0, [pc, #120]	@ (8001988 <calcRPM_PID+0x244>)
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	440b      	add	r3, r1
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4403      	add	r3, r0
 800191e:	3308      	adds	r3, #8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001932:	edd7 6a03 	vldr	s13, [r7, #12]
 8001936:	7ffa      	ldrb	r2, [r7, #31]
 8001938:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800193c:	4812      	ldr	r0, [pc, #72]	@ (8001988 <calcRPM_PID+0x244>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	440b      	add	r3, r1
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4403      	add	r3, r0
 800194e:	330c      	adds	r3, #12
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f80b 	bl	800198c <applyCtrlLimit>
 8001976:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001978:	6a3b      	ldr	r3, [r7, #32]
}
 800197a:	4618      	mov	r0, r3
 800197c:	372c      	adds	r7, #44	@ 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	20000104 	.word	0x20000104
 8001988:	200001b4 	.word	0x200001b4

0800198c <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d009      	beq.n	80019b2 <applyCtrlLimit+0x26>
 800199e:	2b04      	cmp	r3, #4
 80019a0:	dc29      	bgt.n	80019f6 <applyCtrlLimit+0x6a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	dc02      	bgt.n	80019ac <applyCtrlLimit+0x20>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc03      	bgt.n	80019b2 <applyCtrlLimit+0x26>
 80019aa:	e024      	b.n	80019f6 <applyCtrlLimit+0x6a>
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d00f      	beq.n	80019d0 <applyCtrlLimit+0x44>
 80019b0:	e021      	b.n	80019f6 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019b8:	dd03      	ble.n	80019c2 <applyCtrlLimit+0x36>
				val = 16384;
 80019ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019be:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80019c0:	e016      	b.n	80019f0 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80019c8:	da12      	bge.n	80019f0 <applyCtrlLimit+0x64>
				val = -16384;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <applyCtrlLimit+0x78>)
 80019cc:	603b      	str	r3, [r7, #0]
			break;
 80019ce:	e00f      	b.n	80019f0 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80019d6:	4293      	cmp	r3, r2
 80019d8:	dd03      	ble.n	80019e2 <applyCtrlLimit+0x56>
				val = 25000;
 80019da:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80019de:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 80019e0:	e008      	b.n	80019f4 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <applyCtrlLimit+0x7c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	da04      	bge.n	80019f4 <applyCtrlLimit+0x68>
				val = -25000;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <applyCtrlLimit+0x7c>)
 80019ec:	603b      	str	r3, [r7, #0]
			break;
 80019ee:	e001      	b.n	80019f4 <applyCtrlLimit+0x68>
			break;
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <applyCtrlLimit+0x6a>
			break;
 80019f4:	bf00      	nop
		}
	}
	return val;
 80019f6:	683b      	ldr	r3, [r7, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	ffffc000 	.word	0xffffc000
 8001a08:	ffff9e58 	.word	0xffff9e58

08001a0c <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	eef0 6a40 	vmov.f32	s13, s0
 8001a1e:	eeb0 7a60 	vmov.f32	s14, s1
 8001a22:	eef0 7a41 	vmov.f32	s15, s2
 8001a26:	4623      	mov	r3, r4
 8001a28:	75fb      	strb	r3, [r7, #23]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	75bb      	strb	r3, [r7, #22]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	757b      	strb	r3, [r7, #21]
 8001a32:	4613      	mov	r3, r2
 8001a34:	827b      	strh	r3, [r7, #18]
 8001a36:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a3a:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a3e:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001a42:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a46:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a52:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a56:	7db9      	ldrb	r1, [r7, #22]
 8001a58:	7df8      	ldrb	r0, [r7, #23]
 8001a5a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a5e:	eef0 0a47 	vmov.f32	s1, s14
 8001a62:	eeb0 1a67 	vmov.f32	s2, s15
 8001a66:	f7ff fe6d 	bl	8001744 <calcRPM_PID>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a72:	7db9      	ldrb	r1, [r7, #22]
 8001a74:	7df8      	ldrb	r0, [r7, #23]
 8001a76:	f7ff fc67 	bl	8001348 <CAN_setMotorCtrlVal>
}
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}
	...

08001a84 <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	4613      	mov	r3, r2
 8001a94:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	dc02      	bgt.n	8001aa2 <getRotorPosition+0x1e>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dc04      	bgt.n	8001aaa <getRotorPosition+0x26>
 8001aa0:	e034      	b.n	8001b0c <getRotorPosition+0x88>
 8001aa2:	3b03      	subs	r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d831      	bhi.n	8001b0c <getRotorPosition+0x88>
 8001aa8:	e016      	b.n	8001ad8 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001aaa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dd29      	ble.n	8001b06 <getRotorPosition+0x82>
 8001ab2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	dc25      	bgt.n	8001b06 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ac2:	1e59      	subs	r1, r3, #1
 8001ac4:	4815      	ldr	r0, [pc, #84]	@ (8001b1c <getRotorPosition+0x98>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001ad6:	e01b      	b.n	8001b10 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001ad8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dd14      	ble.n	8001b0a <getRotorPosition+0x86>
 8001ae0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	dc10      	bgt.n	8001b0a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001af0:	1cd9      	adds	r1, r3, #3
 8001af2:	480a      	ldr	r0, [pc, #40]	@ (8001b1c <getRotorPosition+0x98>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001b04:	e004      	b.n	8001b10 <getRotorPosition+0x8c>
			break;
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <getRotorPosition+0x88>
			}
			break;
 8001b0a:	bf00      	nop
		}
	}
	return -1;
 8001b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20000104 	.word	0x20000104

08001b20 <getMotorCurrent>:
		}
	}
	return -1;
}

int16_t getMotorCurrent(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	dc02      	bgt.n	8001b3e <getMotorCurrent+0x1e>
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dc04      	bgt.n	8001b46 <getMotorCurrent+0x26>
 8001b3c:	e038      	b.n	8001bb0 <getMotorCurrent+0x90>
 8001b3e:	3b03      	subs	r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d835      	bhi.n	8001bb0 <getMotorCurrent+0x90>
 8001b44:	e018      	b.n	8001b78 <getMotorCurrent+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001b46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd2d      	ble.n	8001baa <getMotorCurrent+0x8a>
 8001b4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	dc29      	bgt.n	8001baa <getMotorCurrent+0x8a>
				return motorFeedback[bus - 1][motorID - 1].torque_current;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	4817      	ldr	r0, [pc, #92]	@ (8001bc0 <getMotorCurrent+0xa0>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4403      	add	r3, r0
 8001b72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b76:	e01d      	b.n	8001bb4 <getMotorCurrent+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001b78:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dd16      	ble.n	8001bae <getMotorCurrent+0x8e>
 8001b80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	dc12      	bgt.n	8001bae <getMotorCurrent+0x8e>
				return motorFeedback[bus - 1][motorID + 3].torque_current;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b90:	1cd9      	adds	r1, r3, #3
 8001b92:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <getMotorCurrent+0xa0>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4403      	add	r3, r0
 8001ba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ba8:	e004      	b.n	8001bb4 <getMotorCurrent+0x94>
			break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <getMotorCurrent+0x90>
			}
			break;
 8001bae:	bf00      	nop
		}
	}
	return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20000104 	.word	0x20000104

08001bc4 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <usart_Init+0x20>)
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <usart_Init+0x24>)
 8001bd0:	f007 fc54 	bl	800947c <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bd8:	4904      	ldr	r1, [pc, #16]	@ (8001bec <usart_Init+0x28>)
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <usart_Init+0x2c>)
 8001bdc:	f007 fc4e 	bl	800947c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000314 	.word	0x20000314
 8001be8:	20000a2c 	.word	0x20000a2c
 8001bec:	20000414 	.word	0x20000414
 8001bf0:	20000abc 	.word	0x20000abc

08001bf4 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001bf4:	b40f      	push	{r0, r1, r2, r3}
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <usart_printf+0x3c>)
 8001c00:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <usart_printf+0x3c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <usart_printf+0x40>)
 8001c0a:	f00b fd5b 	bl	800d6c4 <vsiprintf>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <usart_printf+0x44>)
 8001c14:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <usart_printf+0x44>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4905      	ldr	r1, [pc, #20]	@ (8001c34 <usart_printf+0x40>)
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <usart_printf+0x48>)
 8001c20:	f007 fbbc 	bl	800939c <HAL_UART_Transmit_DMA>
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c2c:	b004      	add	sp, #16
 8001c2e:	4770      	bx	lr
 8001c30:	20000540 	.word	0x20000540
 8001c34:	20000544 	.word	0x20000544
 8001c38:	20000644 	.word	0x20000644
 8001c3c:	20000a2c 	.word	0x20000a2c

08001c40 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	480f      	ldr	r0, [pc, #60]	@ (8001cc4 <can_filter_init+0x6c>)
 8001c88:	f003 f956 	bl	8004f38 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <can_filter_init+0x6c>)
 8001c8e:	f003 fa33 	bl	80050f8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c92:	2102      	movs	r1, #2
 8001c94:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <can_filter_init+0x6c>)
 8001c96:	f003 fc65 	bl	8005564 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001c9a:	230e      	movs	r3, #14
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001c9e:	230e      	movs	r3, #14
 8001ca0:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <can_filter_init+0x70>)
 8001ca8:	f003 f946 	bl	8004f38 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001cac:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <can_filter_init+0x70>)
 8001cae:	f003 fa23 	bl	80050f8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <can_filter_init+0x70>)
 8001cb6:	f003 fc55 	bl	8005564 <HAL_CAN_ActivateNotification>
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200006a8 	.word	0x200006a8
 8001cc8:	200006d0 	.word	0x200006d0

08001ccc <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <imu_pwm_set+0x1c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40014400 	.word	0x40014400

08001cec <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8001cfa:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <RC_init+0xac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <RC_init+0xac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d08:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <RC_init+0xac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <RC_init+0xac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0210 	orr.w	r2, r2, #16
 8001d18:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <RC_init+0xb0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <RC_init+0xb0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001d2a:	e007      	b.n	8001d3c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <RC_init+0xb0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <RC_init+0xb0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <RC_init+0xb0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <RC_init+0xb0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <RC_init+0xb4>)
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <RC_init+0xb0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <RC_init+0xb0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <RC_init+0xb0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	88fa      	ldrh	r2, [r7, #6]
 8001d68:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <RC_init+0xb0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <RC_init+0xb0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001d78:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <RC_init+0xb0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <RC_init+0xb0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000a74 	.word	0x20000a74
 8001d9c:	20000bc4 	.word	0x20000bc4
 8001da0:	40004804 	.word	0x40004804

08001da4 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001dac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001db0:	f008 fdc4 	bl	800a93c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001db4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001e58 <imu_temp_control_task+0xb4>
 8001db8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001e5c <imu_temp_control_task+0xb8>
 8001dbc:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <imu_temp_control_task+0xbc>)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4828      	ldr	r0, [pc, #160]	@ (8001e64 <imu_temp_control_task+0xc0>)
 8001dc2:	f001 fa9d 	bl	8003300 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <imu_temp_control_task+0xc4>)
 8001dc8:	2210      	movs	r2, #16
 8001dca:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dcc:	4826      	ldr	r0, [pc, #152]	@ (8001e68 <imu_temp_control_task+0xc4>)
 8001dce:	f005 ffcc 	bl	8007d6a <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8001dd8:	f001 fa8c 	bl	80032f4 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f009 fecb 	bl	800bb78 <pcTaskGetName>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f009 ff5b 	bl	800bca0 <xTaskGetHandle>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <imu_temp_control_task+0xc8>)
 8001dee:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <imu_temp_control_task+0xcc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001df6:	bf00      	nop
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f00a fb7b 	bl	800c4f8 <ulTaskNotifyTake>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d1f7      	bne.n	8001df8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001e08:	f7ff f84e 	bl	8000ea8 <IMU_get_temp>
 8001e0c:	eef0 7a40 	vmov.f32	s15, s0
 8001e10:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001e74 <imu_temp_control_task+0xd0>
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	4812      	ldr	r0, [pc, #72]	@ (8001e64 <imu_temp_control_task+0xc0>)
 8001e1a:	f001 fac8 	bl	80033ae <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <imu_temp_control_task+0xc0>)
 8001e20:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d503      	bpl.n	8001e36 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <imu_temp_control_task+0xc0>)
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <imu_temp_control_task+0xc0>)
 8001e38:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e40:	ee17 3a90 	vmov	r3, s15
 8001e44:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff3f 	bl	8001ccc <imu_pwm_set>
        osDelay(5);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f008 fd74 	bl	800a93c <osDelay>
    {
 8001e54:	e7cf      	b.n	8001df6 <imu_temp_control_task+0x52>
 8001e56:	bf00      	nop
 8001e58:	45898000 	.word	0x45898000
 8001e5c:	458ca000 	.word	0x458ca000
 8001e60:	0800e30c 	.word	0x0800e30c
 8001e64:	20000650 	.word	0x20000650
 8001e68:	2000074c 	.word	0x2000074c
 8001e6c:	20000648 	.word	0x20000648
 8001e70:	2000064c 	.word	0x2000064c
 8001e74:	42200000 	.word	0x42200000

08001e78 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x54>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e96:	f00a faa1 	bl	800c3dc <xTaskGetSchedulerState>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d011      	beq.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00a fb72 	bl	800c590 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x4c>
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_GPIO_EXTI_Callback+0x64>)
 8001eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000000e 	.word	0x2000000e
 8001ed0:	2000064c 	.word	0x2000064c
 8001ed4:	20000648 	.word	0x20000648
 8001ed8:	20000698 	.word	0x20000698
 8001edc:	e000ed04 	.word	0xe000ed04

08001ee0 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f845 	bl	8001f84 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001efa:	7a7b      	ldrb	r3, [r7, #9]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	7a3b      	ldrb	r3, [r7, #8]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001f80 <ist8310_read_mag+0xa0>
 8001f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001f80 <ist8310_read_mag+0xa0>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001f4c:	7b7b      	ldrb	r3, [r7, #13]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	7b3b      	ldrb	r3, [r7, #12]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8001f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3308      	adds	r3, #8
 8001f6a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001f80 <ist8310_read_mag+0xa0>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	edc3 7a00 	vstr	s15, [r3]
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	3e99999a 	.word	0x3e99999a

08001f84 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	210a      	movs	r1, #10
 8001f9e:	9102      	str	r1, [sp, #8]
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	211c      	movs	r1, #28
 8001faa:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <ist8310_IIC_read_muli_reg+0x34>)
 8001fac:	f004 fd56 	bl	8006a5c <HAL_I2C_Mem_Read>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200006f8 	.word	0x200006f8

08001fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc0:	f002 fe4c 	bl	8004c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc4:	f000 f868 	bl	8002098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc8:	f000 fd02 	bl	80029d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fcc:	f000 fc9a 	bl	8002904 <MX_DMA_Init>
  MX_CAN1_Init();
 8001fd0:	f000 f8ce 	bl	8002170 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001fd4:	f000 f902 	bl	80021dc <MX_CAN2_Init>
  MX_SPI1_Init();
 8001fd8:	f000 f964 	bl	80022a4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001fdc:	f000 fa40 	bl	8002460 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001fe0:	f000 fc10 	bl	8002804 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001fe4:	f000 fc64 	bl	80028b0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001fe8:	f000 f992 	bl	8002310 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001fec:	f000 fb20 	bl	8002630 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001ff0:	f000 fc32 	bl	8002858 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001ff4:	f000 fbb8 	bl	8002768 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001ff8:	f000 f926 	bl	8002248 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001ffc:	f000 faa8 	bl	8002550 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002000:	f7ff fe2a 	bl	8001c58 <can_filter_init>
  remote_control_init();
 8002004:	f001 fc5c 	bl	80038c0 <remote_control_init>
  usart_Init();
 8002008:	f7ff fddc 	bl	8001bc4 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 800200c:	f001 fc66 	bl	80038dc <get_remote_control_point>
 8002010:	4603      	mov	r3, r0
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <main+0xa8>)
 8002014:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002016:	f008 fbb5 	bl	800a784 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 800201a:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <main+0xac>)
 800201c:	2100      	movs	r1, #0
 800201e:	4813      	ldr	r0, [pc, #76]	@ (800206c <main+0xb0>)
 8002020:	f008 fbfa 	bl	800a818 <osThreadNew>
 8002024:	4603      	mov	r3, r0
 8002026:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <main+0xb4>)
 8002028:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <main+0xb8>)
 800202c:	2100      	movs	r1, #0
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <main+0xbc>)
 8002030:	f008 fbf2 	bl	800a818 <osThreadNew>
 8002034:	4603      	mov	r3, r0
 8002036:	4a11      	ldr	r2, [pc, #68]	@ (800207c <main+0xc0>)
 8002038:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 800203a:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <main+0xc4>)
 800203c:	2100      	movs	r1, #0
 800203e:	4811      	ldr	r0, [pc, #68]	@ (8002084 <main+0xc8>)
 8002040:	f008 fbea 	bl	800a818 <osThreadNew>
 8002044:	4603      	mov	r3, r0
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <main+0xcc>)
 8002048:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 800204a:	4a10      	ldr	r2, [pc, #64]	@ (800208c <main+0xd0>)
 800204c:	2100      	movs	r1, #0
 800204e:	4810      	ldr	r0, [pc, #64]	@ (8002090 <main+0xd4>)
 8002050:	f008 fbe2 	bl	800a818 <osThreadNew>
 8002054:	4603      	mov	r3, r0
 8002056:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <main+0xd8>)
 8002058:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800205a:	f008 fbb7 	bl	800a7cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <main+0xa2>
 8002062:	bf00      	nop
 8002064:	20000cf4 	.word	0x20000cf4
 8002068:	0800e318 	.word	0x0800e318
 800206c:	08002eaf 	.word	0x08002eaf
 8002070:	20000ce4 	.word	0x20000ce4
 8002074:	0800e33c 	.word	0x0800e33c
 8002078:	08002ec1 	.word	0x08002ec1
 800207c:	20000ce8 	.word	0x20000ce8
 8002080:	0800e360 	.word	0x0800e360
 8002084:	08001da5 	.word	0x08001da5
 8002088:	20000cec 	.word	0x20000cec
 800208c:	0800e384 	.word	0x0800e384
 8002090:	080032e5 	.word	0x080032e5
 8002094:	20000cf0 	.word	0x20000cf0

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b094      	sub	sp, #80	@ 0x50
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	2230      	movs	r2, #48	@ 0x30
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00b fb16 	bl	800d6d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <SystemClock_Config+0xd0>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <SystemClock_Config+0xd0>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80020cc:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <SystemClock_Config+0xd0>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	4b23      	ldr	r3, [pc, #140]	@ (800216c <SystemClock_Config+0xd4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a22      	ldr	r2, [pc, #136]	@ (800216c <SystemClock_Config+0xd4>)
 80020e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <SystemClock_Config+0xd4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fe:	2302      	movs	r3, #2
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002108:	2306      	movs	r3, #6
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800210c:	23a8      	movs	r3, #168	@ 0xa8
 800210e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002110:	2302      	movs	r3, #2
 8002112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002114:	2304      	movs	r3, #4
 8002116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	4618      	mov	r0, r3
 800211e:	f005 f9a5 	bl	800746c <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002128:	f001 f8e4 	bl	80032f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212c:	230f      	movs	r3, #15
 800212e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002130:	2302      	movs	r3, #2
 8002132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002138:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800213c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800213e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2105      	movs	r1, #5
 800214a:	4618      	mov	r0, r3
 800214c:	f005 fc06 	bl	800795c <HAL_RCC_ClockConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002156:	f001 f8cd 	bl	80032f4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800215a:	f005 fce5 	bl	8007b28 <HAL_RCC_EnableCSS>
}
 800215e:	bf00      	nop
 8002160:	3750      	adds	r7, #80	@ 0x50
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000

08002170 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <MX_CAN1_Init+0x64>)
 8002176:	4a18      	ldr	r2, [pc, #96]	@ (80021d8 <MX_CAN1_Init+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800217a:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <MX_CAN1_Init+0x64>)
 800217c:	2203      	movs	r2, #3
 800217e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <MX_CAN1_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002186:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <MX_CAN1_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_CAN1_Init+0x64>)
 800218e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002192:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <MX_CAN1_Init+0x64>)
 8002196:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800219a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800219c:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <MX_CAN1_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80021c0:	4804      	ldr	r0, [pc, #16]	@ (80021d4 <MX_CAN1_Init+0x64>)
 80021c2:	f002 fdbd 	bl	8004d40 <HAL_CAN_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80021cc:	f001 f892 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200006a8 	.word	0x200006a8
 80021d8:	40006400 	.word	0x40006400

080021dc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <MX_CAN2_Init+0x64>)
 80021e2:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <MX_CAN2_Init+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <MX_CAN2_Init+0x64>)
 80021e8:	2203      	movs	r2, #3
 80021ea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <MX_CAN2_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <MX_CAN2_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <MX_CAN2_Init+0x64>)
 80021fa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80021fe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002200:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <MX_CAN2_Init+0x64>)
 8002202:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002206:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002208:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <MX_CAN2_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <MX_CAN2_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <MX_CAN2_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <MX_CAN2_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <MX_CAN2_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <MX_CAN2_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_CAN2_Init+0x64>)
 800222e:	f002 fd87 	bl	8004d40 <HAL_CAN_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002238:	f001 f85c 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200006d0 	.word	0x200006d0
 8002244:	40006800 	.word	0x40006800

08002248 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <MX_I2C3_Init+0x50>)
 800224e:	4a13      	ldr	r2, [pc, #76]	@ (800229c <MX_I2C3_Init+0x54>)
 8002250:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <MX_I2C3_Init+0x58>)
 8002256:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_I2C3_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800226a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <MX_I2C3_Init+0x50>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <MX_I2C3_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002284:	4804      	ldr	r0, [pc, #16]	@ (8002298 <MX_I2C3_Init+0x50>)
 8002286:	f004 faa5 	bl	80067d4 <HAL_I2C_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002290:	f001 f830 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200006f8 	.word	0x200006f8
 800229c:	40005c00 	.word	0x40005c00
 80022a0:	00061a80 	.word	0x00061a80

080022a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022aa:	4a18      	ldr	r2, [pc, #96]	@ (800230c <MX_SPI1_Init+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022bc:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022d8:	2238      	movs	r2, #56	@ 0x38
 80022da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e8:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022f0:	220a      	movs	r2, #10
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <MX_SPI1_Init+0x64>)
 80022f6:	f005 fd38 	bl	8007d6a <HAL_SPI_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002300:	f000 fff8 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2000074c 	.word	0x2000074c
 800230c:	40013000 	.word	0x40013000

08002310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b092      	sub	sp, #72	@ 0x48
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002316:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2220      	movs	r2, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f00b f9cc 	bl	800d6d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002340:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002342:	4a46      	ldr	r2, [pc, #280]	@ (800245c <MX_TIM1_Init+0x14c>)
 8002344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002346:	4b44      	ldr	r3, [pc, #272]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002348:	2253      	movs	r2, #83	@ 0x53
 800234a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b42      	ldr	r3, [pc, #264]	@ (8002458 <MX_TIM1_Init+0x148>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002352:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002354:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235a:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <MX_TIM1_Init+0x148>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002360:	4b3d      	ldr	r3, [pc, #244]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002366:	4b3c      	ldr	r3, [pc, #240]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800236c:	483a      	ldr	r0, [pc, #232]	@ (8002458 <MX_TIM1_Init+0x148>)
 800236e:	f006 f8c9 	bl	8008504 <HAL_TIM_PWM_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002378:	f000 ffbc 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002384:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002388:	4619      	mov	r1, r3
 800238a:	4833      	ldr	r0, [pc, #204]	@ (8002458 <MX_TIM1_Init+0x148>)
 800238c:	f006 fee8 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002396:	f000 ffad 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239a:	2360      	movs	r3, #96	@ 0x60
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	4826      	ldr	r0, [pc, #152]	@ (8002458 <MX_TIM1_Init+0x148>)
 80023c0:	f006 fa28 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80023ca:	f000 ff93 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d2:	2204      	movs	r2, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4820      	ldr	r0, [pc, #128]	@ (8002458 <MX_TIM1_Init+0x148>)
 80023d8:	f006 fa1c 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80023e2:	f000 ff87 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ea:	2208      	movs	r2, #8
 80023ec:	4619      	mov	r1, r3
 80023ee:	481a      	ldr	r0, [pc, #104]	@ (8002458 <MX_TIM1_Init+0x148>)
 80023f0:	f006 fa10 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80023fa:	f000 ff7b 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002402:	220c      	movs	r2, #12
 8002404:	4619      	mov	r1, r3
 8002406:	4814      	ldr	r0, [pc, #80]	@ (8002458 <MX_TIM1_Init+0x148>)
 8002408:	f006 fa04 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002412:	f000 ff6f 	bl	80032f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800242a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4807      	ldr	r0, [pc, #28]	@ (8002458 <MX_TIM1_Init+0x148>)
 800243a:	f006 ff0d 	bl	8009258 <HAL_TIMEx_ConfigBreakDeadTime>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002444:	f000 ff56 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002448:	4803      	ldr	r0, [pc, #12]	@ (8002458 <MX_TIM1_Init+0x148>)
 800244a:	f001 ffef 	bl	800442c <HAL_TIM_MspPostInit>

}
 800244e:	bf00      	nop
 8002450:	3748      	adds	r7, #72	@ 0x48
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200007a4 	.word	0x200007a4
 800245c:	40010000 	.word	0x40010000

08002460 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
 800248c:	615a      	str	r2, [r3, #20]
 800248e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <MX_TIM4_Init+0xe8>)
 8002492:	4a2e      	ldr	r2, [pc, #184]	@ (800254c <MX_TIM4_Init+0xec>)
 8002494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002496:	4b2c      	ldr	r3, [pc, #176]	@ (8002548 <MX_TIM4_Init+0xe8>)
 8002498:	2253      	movs	r2, #83	@ 0x53
 800249a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <MX_TIM4_Init+0xe8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024a4:	f245 2207 	movw	r2, #20999	@ 0x5207
 80024a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024b6:	4824      	ldr	r0, [pc, #144]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024b8:	f005 ff6c 	bl	8008394 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80024c2:	f000 ff17 	bl	80032f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d0:	4619      	mov	r1, r3
 80024d2:	481d      	ldr	r0, [pc, #116]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024d4:	f006 fa60 	bl	8008998 <HAL_TIM_ConfigClockSource>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80024de:	f000 ff09 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024e2:	4819      	ldr	r0, [pc, #100]	@ (8002548 <MX_TIM4_Init+0xe8>)
 80024e4:	f006 f80e 	bl	8008504 <HAL_TIM_PWM_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80024ee:	f000 ff01 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	4619      	mov	r1, r3
 8002500:	4811      	ldr	r0, [pc, #68]	@ (8002548 <MX_TIM4_Init+0xe8>)
 8002502:	f006 fe2d 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800250c:	f000 fef2 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002510:	2360      	movs	r3, #96	@ 0x60
 8002512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002514:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2208      	movs	r2, #8
 8002526:	4619      	mov	r1, r3
 8002528:	4807      	ldr	r0, [pc, #28]	@ (8002548 <MX_TIM4_Init+0xe8>)
 800252a:	f006 f973 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002534:	f000 fede 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002538:	4803      	ldr	r0, [pc, #12]	@ (8002548 <MX_TIM4_Init+0xe8>)
 800253a:	f001 ff77 	bl	800442c <HAL_TIM_MspPostInit>

}
 800253e:	bf00      	nop
 8002540:	3738      	adds	r7, #56	@ 0x38
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200007ec 	.word	0x200007ec
 800254c:	40000800 	.word	0x40000800

08002550 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002572:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <MX_TIM5_Init+0xd8>)
 8002574:	4a2d      	ldr	r2, [pc, #180]	@ (800262c <MX_TIM5_Init+0xdc>)
 8002576:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002578:	4b2b      	ldr	r3, [pc, #172]	@ (8002628 <MX_TIM5_Init+0xd8>)
 800257a:	2253      	movs	r2, #83	@ 0x53
 800257c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <MX_TIM5_Init+0xd8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002584:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <MX_TIM5_Init+0xd8>)
 8002586:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800258a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <MX_TIM5_Init+0xd8>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <MX_TIM5_Init+0xd8>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002598:	4823      	ldr	r0, [pc, #140]	@ (8002628 <MX_TIM5_Init+0xd8>)
 800259a:	f005 ffb3 	bl	8008504 <HAL_TIM_PWM_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80025a4:	f000 fea6 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4619      	mov	r1, r3
 80025b6:	481c      	ldr	r0, [pc, #112]	@ (8002628 <MX_TIM5_Init+0xd8>)
 80025b8:	f006 fdd2 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80025c2:	f000 fe97 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c6:	2360      	movs	r3, #96	@ 0x60
 80025c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	4812      	ldr	r0, [pc, #72]	@ (8002628 <MX_TIM5_Init+0xd8>)
 80025de:	f006 f919 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80025e8:	f000 fe84 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2204      	movs	r2, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_TIM5_Init+0xd8>)
 80025f4:	f006 f90e 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80025fe:	f000 fe79 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2208      	movs	r2, #8
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	@ (8002628 <MX_TIM5_Init+0xd8>)
 800260a:	f006 f903 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002614:	f000 fe6e 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <MX_TIM5_Init+0xd8>)
 800261a:	f001 ff07 	bl	800442c <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	@ 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000834 	.word	0x20000834
 800262c:	40000c00 	.word	0x40000c00

08002630 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b092      	sub	sp, #72	@ 0x48
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002636:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2220      	movs	r2, #32
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f00b f83c 	bl	800d6d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002660:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002662:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <MX_TIM8_Init+0x134>)
 8002664:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002668:	2253      	movs	r2, #83	@ 0x53
 800266a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b3c      	ldr	r3, [pc, #240]	@ (8002760 <MX_TIM8_Init+0x130>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002674:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002678:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <MX_TIM8_Init+0x130>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002680:	4b37      	ldr	r3, [pc, #220]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002686:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800268c:	4834      	ldr	r0, [pc, #208]	@ (8002760 <MX_TIM8_Init+0x130>)
 800268e:	f005 ff39 	bl	8008504 <HAL_TIM_PWM_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002698:	f000 fe2c 	bl	80032f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026a8:	4619      	mov	r1, r3
 80026aa:	482d      	ldr	r0, [pc, #180]	@ (8002760 <MX_TIM8_Init+0x130>)
 80026ac:	f006 fd58 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80026b6:	f000 fe1d 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ba:	2360      	movs	r3, #96	@ 0x60
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	4820      	ldr	r0, [pc, #128]	@ (8002760 <MX_TIM8_Init+0x130>)
 80026e0:	f006 f898 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80026ea:	f000 fe03 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	2204      	movs	r2, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	481a      	ldr	r0, [pc, #104]	@ (8002760 <MX_TIM8_Init+0x130>)
 80026f8:	f006 f88c 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002702:	f000 fdf7 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	2208      	movs	r2, #8
 800270c:	4619      	mov	r1, r3
 800270e:	4814      	ldr	r0, [pc, #80]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002710:	f006 f880 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800271a:	f000 fdeb 	bl	80032f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	4619      	mov	r1, r3
 8002740:	4807      	ldr	r0, [pc, #28]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002742:	f006 fd89 	bl	8009258 <HAL_TIMEx_ConfigBreakDeadTime>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 800274c:	f000 fdd2 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002750:	4803      	ldr	r0, [pc, #12]	@ (8002760 <MX_TIM8_Init+0x130>)
 8002752:	f001 fe6b 	bl	800442c <HAL_TIM_MspPostInit>

}
 8002756:	bf00      	nop
 8002758:	3748      	adds	r7, #72	@ 0x48
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000087c 	.word	0x2000087c
 8002764:	40010400 	.word	0x40010400

08002768 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	615a      	str	r2, [r3, #20]
 800277e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002780:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002782:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <MX_TIM10_Init+0x98>)
 8002784:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <MX_TIM10_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002794:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002798:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279a:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <MX_TIM10_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80027a6:	4815      	ldr	r0, [pc, #84]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027a8:	f005 fdf4 	bl	8008394 <HAL_TIM_Base_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80027b2:	f000 fd9f 	bl	80032f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80027b6:	4811      	ldr	r0, [pc, #68]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027b8:	f005 fea4 	bl	8008504 <HAL_TIM_PWM_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80027c2:	f000 fd97 	bl	80032f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c6:	2360      	movs	r3, #96	@ 0x60
 80027c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	4619      	mov	r1, r3
 80027dc:	4807      	ldr	r0, [pc, #28]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027de:	f006 f819 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80027e8:	f000 fd84 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80027ec:	4803      	ldr	r0, [pc, #12]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027ee:	f001 fe1d 	bl	800442c <HAL_TIM_MspPostInit>

}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200008c4 	.word	0x200008c4
 8002800:	40014400 	.word	0x40014400

08002804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <MX_USART1_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	@ (8002850 <MX_USART1_UART_Init+0x4c>)
 800283c:	f006 fd5e 	bl	80092fc <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f000 fd55 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000a2c 	.word	0x20000a2c
 8002854:	40011000 	.word	0x40011000

08002858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <MX_USART3_UART_Init+0x50>)
 8002860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002864:	4a11      	ldr	r2, [pc, #68]	@ (80028ac <MX_USART3_UART_Init+0x54>)
 8002866:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800287a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 800287e:	220c      	movs	r2, #12
 8002880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002890:	f006 fd34 	bl	80092fc <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800289a:	f000 fd2b 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000a74 	.word	0x20000a74
 80028a8:	40004800 	.word	0x40004800
 80028ac:	000186a0 	.word	0x000186a0

080028b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <MX_USART6_UART_Init+0x50>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <MX_USART6_UART_Init+0x4c>)
 80028e8:	f006 fd08 	bl	80092fc <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80028f2:	f000 fcff 	bl	80032f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000abc 	.word	0x20000abc
 8002900:	40011400 	.word	0x40011400

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <MX_DMA_Init+0xc8>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a2e      	ldr	r2, [pc, #184]	@ (80029cc <MX_DMA_Init+0xc8>)
 8002914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b2c      	ldr	r3, [pc, #176]	@ (80029cc <MX_DMA_Init+0xc8>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <MX_DMA_Init+0xc8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a27      	ldr	r2, [pc, #156]	@ (80029cc <MX_DMA_Init+0xc8>)
 8002930:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <MX_DMA_Init+0xc8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2105      	movs	r1, #5
 8002946:	200c      	movs	r0, #12
 8002948:	f003 f93d 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800294c:	200c      	movs	r0, #12
 800294e:	f003 f956 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	200d      	movs	r0, #13
 8002958:	f003 f935 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800295c:	200d      	movs	r0, #13
 800295e:	f003 f94e 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2105      	movs	r1, #5
 8002966:	200f      	movs	r0, #15
 8002968:	f003 f92d 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800296c:	200f      	movs	r0, #15
 800296e:	f003 f946 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2105      	movs	r1, #5
 8002976:	202f      	movs	r0, #47	@ 0x2f
 8002978:	f003 f925 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800297c:	202f      	movs	r0, #47	@ 0x2f
 800297e:	f003 f93e 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2105      	movs	r1, #5
 8002986:	2039      	movs	r0, #57	@ 0x39
 8002988:	f003 f91d 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800298c:	2039      	movs	r0, #57	@ 0x39
 800298e:	f003 f936 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2105      	movs	r1, #5
 8002996:	203a      	movs	r0, #58	@ 0x3a
 8002998:	f003 f915 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800299c:	203a      	movs	r0, #58	@ 0x3a
 800299e:	f003 f92e 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2105      	movs	r1, #5
 80029a6:	2045      	movs	r0, #69	@ 0x45
 80029a8:	f003 f90d 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80029ac:	2045      	movs	r0, #69	@ 0x45
 80029ae:	f003 f926 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
 80029b6:	2046      	movs	r0, #70	@ 0x46
 80029b8:	f003 f905 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80029bc:	2046      	movs	r0, #70	@ 0x46
 80029be:	f003 f91e 	bl	8005bfe <HAL_NVIC_EnableIRQ>

}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	@ 0x38
 80029d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	4b71      	ldr	r3, [pc, #452]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a70      	ldr	r2, [pc, #448]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a69      	ldr	r2, [pc, #420]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b67      	ldr	r3, [pc, #412]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a62      	ldr	r2, [pc, #392]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b60      	ldr	r3, [pc, #384]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a54      	ldr	r2, [pc, #336]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a46      	ldr	r2, [pc, #280]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a38      	ldr	r2, [pc, #224]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <MX_GPIO_Init+0x1e0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4833      	ldr	r0, [pc, #204]	@ (8002bb4 <MX_GPIO_Init+0x1e4>)
 8002ae8:	f003 fe42 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2110      	movs	r1, #16
 8002af0:	4831      	ldr	r0, [pc, #196]	@ (8002bb8 <MX_GPIO_Init+0x1e8>)
 8002af2:	f003 fe3d 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2101      	movs	r1, #1
 8002afa:	4830      	ldr	r0, [pc, #192]	@ (8002bbc <MX_GPIO_Init+0x1ec>)
 8002afc:	f003 fe38 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b00:	2340      	movs	r3, #64	@ 0x40
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b14:	4619      	mov	r1, r3
 8002b16:	4827      	ldr	r0, [pc, #156]	@ (8002bb4 <MX_GPIO_Init+0x1e4>)
 8002b18:	f003 fc8e 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4820      	ldr	r0, [pc, #128]	@ (8002bb4 <MX_GPIO_Init+0x1e4>)
 8002b32:	f003 fc81 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b36:	2310      	movs	r3, #16
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	481a      	ldr	r0, [pc, #104]	@ (8002bb8 <MX_GPIO_Init+0x1e8>)
 8002b4e:	f003 fc73 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8002b52:	2330      	movs	r3, #48	@ 0x30
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b64:	4619      	mov	r1, r3
 8002b66:	4816      	ldr	r0, [pc, #88]	@ (8002bc0 <MX_GPIO_Init+0x1f0>)
 8002b68:	f003 fc66 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b80:	4619      	mov	r1, r3
 8002b82:	480e      	ldr	r0, [pc, #56]	@ (8002bbc <MX_GPIO_Init+0x1ec>)
 8002b84:	f003 fc58 	bl	8006438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2105      	movs	r1, #5
 8002b8c:	2009      	movs	r0, #9
 8002b8e:	f003 f81a 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b92:	2009      	movs	r0, #9
 8002b94:	f003 f833 	bl	8005bfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2105      	movs	r1, #5
 8002b9c:	200a      	movs	r0, #10
 8002b9e:	f003 f812 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ba2:	200a      	movs	r0, #10
 8002ba4:	f003 f82b 	bl	8005bfe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ba8:	bf00      	nop
 8002baa:	3738      	adds	r7, #56	@ 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <determiningTrigAngle>:

/* USER CODE BEGIN 4 */

float determiningTrigAngle (int16_t motorAngle[4]) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da2c      	bge.n	8002c34 <determiningTrigAngle+0x6c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da26      	bge.n	8002c34 <determiningTrigAngle+0x6c>
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c08:	eeb0 0a66 	vmov.f32	s0, s13
 8002c0c:	f00b fa58 	bl	800e0c0 <atanf>
 8002c10:	ee10 3a10 	vmov	r3, s0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc97 	bl	8000548 <__aeabi_f2d>
 8002c1a:	a335      	add	r3, pc, #212	@ (adr r3, 8002cf0 <determiningTrigAngle+0x128>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fb32 	bl	8000288 <__aeabi_dsub>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ff1e 	bl	8000a6c <__aeabi_d2f>
 8002c30:	4603      	mov	r3, r0
 8002c32:	e056      	b.n	8002ce2 <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db2c      	blt.n	8002c98 <determiningTrigAngle+0xd0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3302      	adds	r3, #2
 8002c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da26      	bge.n	8002c98 <determiningTrigAngle+0xd0>
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c6c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c70:	f00b fa26 	bl	800e0c0 <atanf>
 8002c74:	ee10 3a10 	vmov	r3, s0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc65 	bl	8000548 <__aeabi_f2d>
 8002c7e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002cf0 <determiningTrigAngle+0x128>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fb02 	bl	800028c <__adddf3>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd feec 	bl	8000a6c <__aeabi_d2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	e024      	b.n	8002ce2 <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <determiningTrigAngle+0xec>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <determiningTrigAngle+0xec>
		return 0;
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e016      	b.n	8002ce2 <determiningTrigAngle+0x11a>
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cd6:	eeb0 0a66 	vmov.f32	s0, s13
 8002cda:	f00b f9f1 	bl	800e0c0 <atanf>
 8002cde:	ee10 3a10 	vmov	r3, s0
	}
}
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	54442d18 	.word	0x54442d18
 8002cf4:	400921fb 	.word	0x400921fb

08002cf8 <wheelRotation>:

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	460a      	mov	r2, r1
 8002d02:	80fb      	strh	r3, [r7, #6]
 8002d04:	4613      	mov	r3, r2
 8002d06:	80bb      	strh	r3, [r7, #4]
	int8_t newTargetRotationCounter = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
	int16_t ACD = abs(destinationRotation - currentRotation);
 8002d0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfb8      	it	lt
 8002d1a:	425b      	neglt	r3, r3
 8002d1c:	81bb      	strh	r3, [r7, #12]
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
 8002d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d22:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8002d26:	3b1f      	subs	r3, #31
 8002d28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bfb8      	it	lt
 8002d32:	425b      	neglt	r3, r3
 8002d34:	817b      	strh	r3, [r7, #10]
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
 8002d36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d3a:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8002d3e:	331f      	adds	r3, #31
 8002d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	425b      	neglt	r3, r3
 8002d4c:	813b      	strh	r3, [r7, #8]
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
 8002d4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	da08      	bge.n	8002d6c <wheelRotation+0x74>
 8002d5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	da02      	bge.n	8002d6c <wheelRotation+0x74>
		newTargetRotationCounter = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e010      	b.n	8002d8e <wheelRotation+0x96>
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
 8002d6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	da08      	bge.n	8002d8a <wheelRotation+0x92>
 8002d78:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	da02      	bge.n	8002d8a <wheelRotation+0x92>
		newTargetRotationCounter = -1;
 8002d84:	23ff      	movs	r3, #255	@ 0xff
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e001      	b.n	8002d8e <wheelRotation+0x96>
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	0352      	lsls	r2, r2, #13
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	88bb      	ldrh	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b21b      	sxth	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <swerveScaler>:

float swerveScaler (int16_t motorInfo[4][4]) {
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	int16_t largestVal = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	737b      	strb	r3, [r7, #13]
 8002dc8:	e017      	b.n	8002dfa <swerveScaler+0x42>
		if (motorInfo[i][2] > largestVal) {
 8002dca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dd8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	da06      	bge.n	8002dee <swerveScaler+0x36>
			largestVal = motorInfo[i][2];
 8002de0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	889b      	ldrh	r3, [r3, #4]
 8002dec:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002dee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	737b      	strb	r3, [r7, #13]
 8002dfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	dde3      	ble.n	8002dca <swerveScaler+0x12>
	if (largestVal == 0) {
		usart_printf("ERROR_WITH_SCALER\r\n");
	}
	*/
	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAllowed) {
 8002e02:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	dc02      	bgt.n	8002e14 <swerveScaler+0x5c>
		return 1;
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e12:	e00b      	b.n	8002e2c <swerveScaler+0x74>
	} else {
		return ((float)(maxValAllowed)/(float)(largestVal));
 8002e14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002e40 <swerveScaler+0x88>
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e28:	eec7 6a27 	vdiv.f32	s13, s14, s15
	}
}
 8002e2c:	eef0 7a66 	vmov.f32	s15, s13
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	00000320 	.word	0x00000320

08002e44 <PD>:

int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e52:	edc7 0a00 	vstr	s1, [r7]
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	81bb      	strh	r3, [r7, #12]

	return applyCtrlLimit(motorType, (currentDelta*kP + (*previousDelta - currentDelta)*kD));
 8002e5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e86:	edd7 7a00 	vldr	s15, [r7]
 8002e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	ee17 1a90 	vmov	r1, s15
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fd75 	bl	800198c <applyCtrlLimit>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b21b      	sxth	r3, r3
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8002eb6:	2005      	movs	r0, #5
 8002eb8:	f007 fd40 	bl	800a93c <osDelay>
 8002ebc:	e7fb      	b.n	8002eb6 <TaskMain+0x8>
	...

08002ec0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b09c      	sub	sp, #112	@ 0x70
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002ec8:	4bad      	ldr	r3, [pc, #692]	@ (8003180 <TaskChassis+0x2c0>)
 8002eca:	4aae      	ldr	r2, [pc, #696]	@ (8003184 <TaskChassis+0x2c4>)
 8002ecc:	49ae      	ldr	r1, [pc, #696]	@ (8003188 <TaskChassis+0x2c8>)
 8002ece:	48af      	ldr	r0, [pc, #700]	@ (800318c <TaskChassis+0x2cc>)
 8002ed0:	f000 fbb6 	bl	8003640 <PWMInit>
	PID_preset_t test = {5.0, 0.0, 0.0};
 8002ed4:	4bae      	ldr	r3, [pc, #696]	@ (8003190 <TaskChassis+0x2d0>)
 8002ed6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	PID_preset_t test2 = {300.0, 0.0, 30.0};
 8002ee4:	4aab      	ldr	r2, [pc, #684]	@ (8003194 <TaskChassis+0x2d4>)
 8002ee6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//
	int16_t wheelPrev[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002ef0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
		1   0

		2   3
	*/

	int8_t rotationVectors[4][2] =  {{1,  -1},
 8002efe:	4aa6      	ldr	r2, [pc, #664]	@ (8003198 <TaskChassis+0x2d8>)
 8002f00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f08:	e883 0003 	stmia.w	r3, {r0, r1}
							 		 {1,   1},
									 {-1,  1},
									 {-1, -1}};

	int16_t forwardsID[4] = {380, 5070, 348, 5140};
 8002f0c:	4aa3      	ldr	r2, [pc, #652]	@ (800319c <TaskChassis+0x2dc>)
 8002f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f16:	e883 0003 	stmia.w	r3, {r0, r1}
	// [MotorID][0 = MotorXVal, 1 = MotorYVal, 2 = MotorABSVal, 3 = MotorConvertedAngle]
	int16_t motorInfo[4][4];

  /* Infinite loop */
    for(;;) {
		int16_t FB = getRCchannel(3);
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	f000 fe94 	bl	8003c48 <getRCchannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
		int16_t LR = getRCchannel(2);
 8002f26:	2002      	movs	r0, #2
 8002f28:	f000 fe8e 	bl	8003c48 <getRCchannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		int16_t Rotate = getRCchannel(0);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 fe88 	bl	8003c48 <getRCchannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

		for (int8_t i = 0; i < 4; i++ ) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002f44:	e071      	b.n	800302a <TaskChassis+0x16a>
			motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
 8002f46:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	3370      	adds	r3, #112	@ 0x70
 8002f4e:	443b      	add	r3, r7
 8002f50:	f913 3c40 	ldrsb.w	r3, [r3, #-64]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f5a:	fb12 f303 	smulbb	r3, r2, r3
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002f64:	4413      	add	r3, r2
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f6c:	b212      	sxth	r2, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	3370      	adds	r3, #112	@ 0x70
 8002f72:	443b      	add	r3, r7
 8002f74:	f823 2c68 	strh.w	r2, [r3, #-104]
			motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
 8002f78:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	3370      	adds	r3, #112	@ 0x70
 8002f80:	443b      	add	r3, r7
 8002f82:	f913 3c3f 	ldrsb.w	r3, [r3, #-63]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f8c:	fb12 f303 	smulbb	r3, r2, r3
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8002f96:	4413      	add	r3, r2
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f9e:	b212      	sxth	r2, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	3370      	adds	r3, #112	@ 0x70
 8002fa4:	443b      	add	r3, r7
 8002fa6:	f823 2c66 	strh.w	r2, [r3, #-102]
			motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
 8002faa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3370      	adds	r3, #112	@ 0x70
 8002fb2:	443b      	add	r3, r7
 8002fb4:	f933 3c68 	ldrsh.w	r3, [r3, #-104]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	3370      	adds	r3, #112	@ 0x70
 8002fc2:	443b      	add	r3, r7
 8002fc4:	f933 3c68 	ldrsh.w	r3, [r3, #-104]
 8002fc8:	fb03 f202 	mul.w	r2, r3, r2
 8002fcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	3370      	adds	r3, #112	@ 0x70
 8002fd4:	443b      	add	r3, r7
 8002fd6:	f933 3c66 	ldrsh.w	r3, [r3, #-102]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	3370      	adds	r3, #112	@ 0x70
 8002fe4:	443b      	add	r3, r7
 8002fe6:	f933 3c66 	ldrsh.w	r3, [r3, #-102]
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffc:	f00b f842 	bl	800e084 <sqrtf>
 8003000:	eef0 7a40 	vmov.f32	s15, s0
 8003004:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300c:	ee17 2a90 	vmov	r2, s15
 8003010:	b212      	sxth	r2, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	3370      	adds	r3, #112	@ 0x70
 8003016:	443b      	add	r3, r7
 8003018:	f823 2c64 	strh.w	r2, [r3, #-100]
		for (int8_t i = 0; i < 4; i++ ) {
 800301c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3301      	adds	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800302a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800302e:	2b03      	cmp	r3, #3
 8003030:	dd89      	ble.n	8002f46 <TaskChassis+0x86>
		}

		float SScalerVal = swerveScaler(motorInfo);
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff febe 	bl	8002db8 <swerveScaler>
 800303c:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60

		// Swerve Motor
		for (int8_t j = 0; j < 4; j++) {
 8003040:	2300      	movs	r3, #0
 8003042:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003046:	e089      	b.n	800315c <TaskChassis+0x29c>
			// Scales Motor Speed Output
			// 800*11.25 = 9000
			motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;
 8003048:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	3370      	adds	r3, #112	@ 0x70
 8003050:	443b      	add	r3, r7
 8003052:	f933 3c64 	ldrsh.w	r3, [r3, #-100]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800305e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	ee17 0a90 	vmov	r0, s15
 800306a:	f7fd fa6d 	bl	8000548 <__aeabi_f2d>
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	4b4b      	ldr	r3, [pc, #300]	@ (80031a0 <TaskChassis+0x2e0>)
 8003074:	f7fd fac0 	bl	80005f8 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	f997 406e 	ldrsb.w	r4, [r7, #110]	@ 0x6e
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f7fd fcca 	bl	8000a1c <__aeabi_d2iz>
 8003088:	4603      	mov	r3, r0
 800308a:	b21a      	sxth	r2, r3
 800308c:	00e3      	lsls	r3, r4, #3
 800308e:	3370      	adds	r3, #112	@ 0x70
 8003090:	443b      	add	r3, r7
 8003092:	f823 2c64 	strh.w	r2, [r3, #-100]

			int16_t tempAngle = (int16_t)((4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI))+forwardsID[j]);
 8003096:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 800309a:	f107 0208 	add.w	r2, r7, #8
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fd90 	bl	8002bc8 <determiningTrigAngle>
 80030a8:	ee10 3a10 	vmov	r3, s0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa4b 	bl	8000548 <__aeabi_f2d>
 80030b2:	a32f      	add	r3, pc, #188	@ (adr r3, 8003170 <TaskChassis+0x2b0>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f7fd fbc8 	bl	800084c <__aeabi_ddiv>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8003178 <TaskChassis+0x2b8>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f7fd fa95 	bl	80005f8 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	461d      	mov	r5, r3
 80030d6:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	3370      	adds	r3, #112	@ 0x70
 80030de:	443b      	add	r3, r7
 80030e0:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa1d 	bl	8000524 <__aeabi_i2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4620      	mov	r0, r4
 80030f0:	4629      	mov	r1, r5
 80030f2:	f7fd f8cb 	bl	800028c <__adddf3>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fc8d 	bl	8000a1c <__aeabi_d2iz>
 8003102:	4603      	mov	r3, r0
 8003104:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			if (tempAngle > 8191) {
 8003108:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003110:	db08      	blt.n	8003124 <TaskChassis+0x264>
				tempAngle = tempAngle-8191;
 8003112:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003116:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 800311a:	3b1f      	subs	r3, #31
 800311c:	b29b      	uxth	r3, r3
 800311e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003122:	e00b      	b.n	800313c <TaskChassis+0x27c>
			} else if (tempAngle < 0) {
 8003124:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8003128:	2b00      	cmp	r3, #0
 800312a:	da07      	bge.n	800313c <TaskChassis+0x27c>
				tempAngle = tempAngle+8191;
 800312c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003130:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8003134:	331f      	adds	r3, #31
 8003136:	b29b      	uxth	r3, r3
 8003138:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			}
			motorInfo[j][3] = tempAngle;
 800313c:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	3370      	adds	r3, #112	@ 0x70
 8003144:	443b      	add	r3, r7
 8003146:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800314a:	f823 2c62 	strh.w	r2, [r3, #-98]
		for (int8_t j = 0; j < 4; j++) {
 800314e:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800315c:	f997 306e 	ldrsb.w	r3, [r7, #110]	@ 0x6e
 8003160:	2b03      	cmp	r3, #3
 8003162:	f77f af71 	ble.w	8003048 <TaskChassis+0x188>
		}

		// Drive Motor

		for (int8_t k = 0; k < 4; k++) {
 8003166:	2300      	movs	r3, #0
 8003168:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800316c:	e06f      	b.n	800324e <TaskChassis+0x38e>
 800316e:	bf00      	nop
 8003170:	54442d18 	.word	0x54442d18
 8003174:	400921fb 	.word	0x400921fb
 8003178:	00000000 	.word	0x00000000
 800317c:	40afff00 	.word	0x40afff00
 8003180:	2000087c 	.word	0x2000087c
 8003184:	20000834 	.word	0x20000834
 8003188:	200007ec 	.word	0x200007ec
 800318c:	200007a4 	.word	0x200007a4
 8003190:	40a00000 	.word	0x40a00000
 8003194:	0800e2d8 	.word	0x0800e2d8
 8003198:	0800e2e4 	.word	0x0800e2e4
 800319c:	0800e2ec 	.word	0x0800e2ec
 80031a0:	40268000 	.word	0x40268000
			CAN_setMotorCtrlVal(Bus1, GM6020, k+1, PD(GM6020, &wheelPrev[k], wheelRotation (getRotorPosition(Bus1, GM6020, k+1), motorInfo[k][3]), 20, 10));
 80031a4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80031a8:	3301      	adds	r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	b25c      	sxtb	r4, r3
 80031ae:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 80031b2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	18d5      	adds	r5, r2, r3
 80031ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80031be:	3301      	adds	r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	b25b      	sxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	2103      	movs	r1, #3
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fe fc5b 	bl	8001a84 <getRotorPosition>
 80031ce:	4603      	mov	r3, r0
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	3370      	adds	r3, #112	@ 0x70
 80031da:	443b      	add	r3, r7
 80031dc:	f933 3c62 	ldrsh.w	r3, [r3, #-98]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7ff fd88 	bl	8002cf8 <wheelRotation>
 80031e8:	4603      	mov	r3, r0
 80031ea:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80031ee:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80031f2:	461a      	mov	r2, r3
 80031f4:	4629      	mov	r1, r5
 80031f6:	2003      	movs	r0, #3
 80031f8:	f7ff fe24 	bl	8002e44 <PD>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4622      	mov	r2, r4
 8003200:	2103      	movs	r1, #3
 8003202:	2001      	movs	r0, #1
 8003204:	f7fe f8a0 	bl	8001348 <CAN_setMotorCtrlVal>
			setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
 8003208:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800320c:	3301      	adds	r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	b25a      	sxtb	r2, r3
 8003212:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3370      	adds	r3, #112	@ 0x70
 800321a:	443b      	add	r3, r7
 800321c:	f933 3c64 	ldrsh.w	r3, [r3, #-100]
 8003220:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8003224:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003228:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800322c:	eeb0 0a66 	vmov.f32	s0, s13
 8003230:	eef0 0a47 	vmov.f32	s1, s14
 8003234:	eeb0 1a67 	vmov.f32	s2, s15
 8003238:	2101      	movs	r1, #1
 800323a:	2001      	movs	r0, #1
 800323c:	f7fe fbe6 	bl	8001a0c <setMotorRPM>
		for (int8_t k = 0; k < 4; k++) {
 8003240:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800324e:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 8003252:	2b03      	cmp	r3, #3
 8003254:	dda6      	ble.n	80031a4 <TaskChassis+0x2e4>
		}
		//setMotorRPM(Bus1, M3508, 3, 500, test);
		// setMotorRPM(Bus1, M3508, 3, 500, test);
		usart_printf("%d \r\n", getMotorCurrent(Bus1, GM6020, 1) + getMotorCurrent(Bus1, GM6020, 2) + getMotorCurrent(Bus1, GM6020, 3) + getMotorCurrent(Bus1, GM6020, 4) + getMotorCurrent(Bus1, M3508, 1) + getMotorCurrent(Bus1, M3508, 2) + getMotorCurrent(Bus1, M3508, 3) + getMotorCurrent(Bus1, M3508, 4));
 8003256:	2201      	movs	r2, #1
 8003258:	2103      	movs	r1, #3
 800325a:	2001      	movs	r0, #1
 800325c:	f7fe fc60 	bl	8001b20 <getMotorCurrent>
 8003260:	4603      	mov	r3, r0
 8003262:	461c      	mov	r4, r3
 8003264:	2202      	movs	r2, #2
 8003266:	2103      	movs	r1, #3
 8003268:	2001      	movs	r0, #1
 800326a:	f7fe fc59 	bl	8001b20 <getMotorCurrent>
 800326e:	4603      	mov	r3, r0
 8003270:	441c      	add	r4, r3
 8003272:	2203      	movs	r2, #3
 8003274:	2103      	movs	r1, #3
 8003276:	2001      	movs	r0, #1
 8003278:	f7fe fc52 	bl	8001b20 <getMotorCurrent>
 800327c:	4603      	mov	r3, r0
 800327e:	441c      	add	r4, r3
 8003280:	2204      	movs	r2, #4
 8003282:	2103      	movs	r1, #3
 8003284:	2001      	movs	r0, #1
 8003286:	f7fe fc4b 	bl	8001b20 <getMotorCurrent>
 800328a:	4603      	mov	r3, r0
 800328c:	441c      	add	r4, r3
 800328e:	2201      	movs	r2, #1
 8003290:	2101      	movs	r1, #1
 8003292:	2001      	movs	r0, #1
 8003294:	f7fe fc44 	bl	8001b20 <getMotorCurrent>
 8003298:	4603      	mov	r3, r0
 800329a:	441c      	add	r4, r3
 800329c:	2202      	movs	r2, #2
 800329e:	2101      	movs	r1, #1
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fe fc3d 	bl	8001b20 <getMotorCurrent>
 80032a6:	4603      	mov	r3, r0
 80032a8:	441c      	add	r4, r3
 80032aa:	2203      	movs	r2, #3
 80032ac:	2101      	movs	r1, #1
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7fe fc36 	bl	8001b20 <getMotorCurrent>
 80032b4:	4603      	mov	r3, r0
 80032b6:	441c      	add	r4, r3
 80032b8:	2204      	movs	r2, #4
 80032ba:	2101      	movs	r1, #1
 80032bc:	2001      	movs	r0, #1
 80032be:	f7fe fc2f 	bl	8001b20 <getMotorCurrent>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4423      	add	r3, r4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <TaskChassis+0x420>)
 80032ca:	f7fe fc93 	bl	8001bf4 <usart_printf>
		// usart_printf("Motor1Angle: %d\r\n", motorInfo[0][3]);
    	// usart_printf("FB: %d   LR: %d   Rot: %d\r\n", FB, LR, Rotate);
    	// usart_printf("M1x: %d| M1y: %d| M1Speed: %d\r\nM2x: %d| M2y: %d| M2Speed: %d\r\nM3x: %d| M3y: %d| M3Speed: %d\r\nM4x: %d| M4y: %d| M4Speed: %d\r\n\r\n", motorInfo[0][0], motorInfo[0][1], motorInfo[0][2], motorInfo[1][0], motorInfo[1][1], motorInfo[1][2], motorInfo[2][0], motorInfo[2][1], motorInfo[2][2], motorInfo[3][0], motorInfo[3][1], motorInfo[3][2]);
    	// usart_printf("Scaler = %d\r\n", (int16_t)(SScalerVal*100));

		PWMTimerStarter();
 80032ce:	f000 f9eb 	bl	80036a8 <PWMTimerStarter>
		RCkeysRefresh();
 80032d2:	f000 fccd 	bl	8003c70 <RCkeysRefresh>
        osDelay(10);
 80032d6:	200a      	movs	r0, #10
 80032d8:	f007 fb30 	bl	800a93c <osDelay>
    for(;;) {
 80032dc:	e61d      	b.n	8002f1a <TaskChassis+0x5a>
 80032de:	bf00      	nop
 80032e0:	0800e2d0 	.word	0x0800e2d0

080032e4 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 80032ec:	2005      	movs	r0, #5
 80032ee:	f007 fb25 	bl	800a93c <osDelay>
 80032f2:	e7fb      	b.n	80032ec <TaskTurret+0x8>

080032f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f8:	b672      	cpsid	i
}
 80032fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <Error_Handler+0x8>

08003300 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6178      	str	r0, [r7, #20]
 8003308:	460b      	mov	r3, r1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003310:	edc7 0a01 	vstr	s1, [r7, #4]
 8003314:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d042      	beq.n	80033a2 <PID_init+0xa2>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d03f      	beq.n	80033a2 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	7cfa      	ldrb	r2, [r7, #19]
 8003326:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3304      	adds	r3, #4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3308      	adds	r3, #8
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	625a      	str	r2, [r3, #36]	@ 0x24
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033a0:	e000      	b.n	80033a4 <PID_init+0xa4>
        return;
 80033a2:	bf00      	nop
}
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80033ba:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <PID_calc+0x1c>
    {
        return 0.0f;
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e130      	b.n	800362c <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80033e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80033ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 8095 	bne.w	800352c <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	ed93 7a01 	vldr	s14, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	edd3 6a02 	vldr	s13, [r3, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800342a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	ed93 7a03 	vldr	s14, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003488:	dd04      	ble.n	8003494 <PID_calc+0xe6>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28
 8003492:	e014      	b.n	80034be <PID_calc+0x110>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	edd3 7a05 	vldr	s15, [r3, #20]
 80034a0:	eef1 7a67 	vneg.f32	s15, s15
 80034a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	d507      	bpl.n	80034be <PID_calc+0x110>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80034b4:	eef1 7a67 	vneg.f32	s15, s15
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80034ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80034d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	dd04      	ble.n	80034fe <PID_calc+0x150>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e094      	b.n	8003628 <PID_calc+0x27a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	ed93 7a08 	vldr	s14, [r3, #32]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	edd3 7a04 	vldr	s15, [r3, #16]
 800350a:	eef1 7a67 	vneg.f32	s15, s15
 800350e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	f140 8087 	bpl.w	8003628 <PID_calc+0x27a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003520:	eef1 7a67 	vneg.f32	s15, s15
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edc3 7a08 	vstr	s15, [r3, #32]
 800352a:	e07d      	b.n	8003628 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d179      	bne.n	8003628 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	ed93 7a01 	vldr	s14, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003546:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	ed93 7a02 	vldr	s14, [r3, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003586:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800358a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80035c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80035d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80035ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	dd04      	ble.n	80035fe <PID_calc+0x250>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
 80035fc:	e014      	b.n	8003628 <PID_calc+0x27a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	ed93 7a08 	vldr	s14, [r3, #32]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	edd3 7a04 	vldr	s15, [r3, #16]
 800360a:	eef1 7a67 	vneg.f32	s15, s15
 800360e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d507      	bpl.n	8003628 <PID_calc+0x27a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	edd3 7a04 	vldr	s15, [r3, #16]
 800361e:	eef1 7a67 	vneg.f32	s15, s15
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
}
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <PWMInit+0x58>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8003654:	4a11      	ldr	r2, [pc, #68]	@ (800369c <PWMInit+0x5c>)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800365a:	4a11      	ldr	r2, [pc, #68]	@ (80036a0 <PWMInit+0x60>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8003660:	4a10      	ldr	r2, [pc, #64]	@ (80036a4 <PWMInit+0x64>)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <PWMInit+0x58>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f004 fee2 	bl	8008434 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8003670:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <PWMInit+0x5c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fedd 	bl	8008434 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <PWMInit+0x60>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 fed8 	bl	8008434 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8003684:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <PWMInit+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f004 fed3 	bl	8008434 <HAL_TIM_Base_Start>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000cf8 	.word	0x20000cf8
 800369c:	20000cfc 	.word	0x20000cfc
 80036a0:	20000d00 	.word	0x20000d00
 80036a4:	20000d04 	.word	0x20000d04

080036a8 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	e0f1      	b.n	8003898 <PWMTimerStarter+0x1f0>
		switch (i) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b0a      	cmp	r3, #10
 80036b8:	f200 80eb 	bhi.w	8003892 <PWMTimerStarter+0x1ea>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <PWMTimerStarter+0x1c>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036f1 	.word	0x080036f1
 80036c8:	08003717 	.word	0x08003717
 80036cc:	0800373d 	.word	0x0800373d
 80036d0:	08003763 	.word	0x08003763
 80036d4:	08003789 	.word	0x08003789
 80036d8:	080037af 	.word	0x080037af
 80036dc:	080037d5 	.word	0x080037d5
 80036e0:	080037fb 	.word	0x080037fb
 80036e4:	08003821 	.word	0x08003821
 80036e8:	08003847 	.word	0x08003847
 80036ec:	0800386d 	.word	0x0800386d
		case 0:
			if (whichPWMisOn[0] == 1) {
 80036f0:	4b6e      	ldr	r3, [pc, #440]	@ (80038ac <PWMTimerStarter+0x204>)
 80036f2:	f993 3000 	ldrsb.w	r3, [r3]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d106      	bne.n	8003708 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 80036fa:	4b6d      	ldr	r3, [pc, #436]	@ (80038b0 <PWMTimerStarter+0x208>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f004 ff4f 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8003706:	e0c4      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8003708:	4b69      	ldr	r3, [pc, #420]	@ (80038b0 <PWMTimerStarter+0x208>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f005 f810 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 8003714:	e0bd      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8003716:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <PWMTimerStarter+0x204>)
 8003718:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003720:	4b63      	ldr	r3, [pc, #396]	@ (80038b0 <PWMTimerStarter+0x208>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2104      	movs	r1, #4
 8003726:	4618      	mov	r0, r3
 8003728:	f004 ff3c 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 800372c:	e0b1      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 800372e:	4b60      	ldr	r3, [pc, #384]	@ (80038b0 <PWMTimerStarter+0x208>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2104      	movs	r1, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fffd 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 800373a:	e0aa      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 800373c:	4b5b      	ldr	r3, [pc, #364]	@ (80038ac <PWMTimerStarter+0x204>)
 800373e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d106      	bne.n	8003754 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8003746:	4b5a      	ldr	r3, [pc, #360]	@ (80038b0 <PWMTimerStarter+0x208>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2108      	movs	r1, #8
 800374c:	4618      	mov	r0, r3
 800374e:	f004 ff29 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003752:	e09e      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003754:	4b56      	ldr	r3, [pc, #344]	@ (80038b0 <PWMTimerStarter+0x208>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2108      	movs	r1, #8
 800375a:	4618      	mov	r0, r3
 800375c:	f004 ffea 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 8003760:	e097      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8003762:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <PWMTimerStarter+0x204>)
 8003764:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <PWMTimerStarter+0x208>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	210c      	movs	r1, #12
 8003772:	4618      	mov	r0, r3
 8003774:	f004 ff16 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8003778:	e08b      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 800377a:	4b4d      	ldr	r3, [pc, #308]	@ (80038b0 <PWMTimerStarter+0x208>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	210c      	movs	r1, #12
 8003780:	4618      	mov	r0, r3
 8003782:	f004 ffd7 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 8003786:	e084      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8003788:	4b48      	ldr	r3, [pc, #288]	@ (80038ac <PWMTimerStarter+0x204>)
 800378a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d106      	bne.n	80037a0 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8003792:	4b48      	ldr	r3, [pc, #288]	@ (80038b4 <PWMTimerStarter+0x20c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f004 ff03 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 800379e:	e078      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 80037a0:	4b44      	ldr	r3, [pc, #272]	@ (80038b4 <PWMTimerStarter+0x20c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 ffc4 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 80037ac:	e071      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 80037ae:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <PWMTimerStarter+0x204>)
 80037b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 80037b8:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <PWMTimerStarter+0x20c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2104      	movs	r1, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 fef0 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80037c4:	e065      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80037c6:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <PWMTimerStarter+0x20c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2104      	movs	r1, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 ffb1 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 80037d2:	e05e      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 80037d4:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <PWMTimerStarter+0x204>)
 80037d6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d106      	bne.n	80037ec <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 80037de:	4b35      	ldr	r3, [pc, #212]	@ (80038b4 <PWMTimerStarter+0x20c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2108      	movs	r1, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fedd 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 80037ea:	e052      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 80037ec:	4b31      	ldr	r3, [pc, #196]	@ (80038b4 <PWMTimerStarter+0x20c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2108      	movs	r1, #8
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 ff9e 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 80037f8:	e04b      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 80037fa:	4b2c      	ldr	r3, [pc, #176]	@ (80038ac <PWMTimerStarter+0x204>)
 80037fc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d106      	bne.n	8003812 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003804:	4b2c      	ldr	r3, [pc, #176]	@ (80038b8 <PWMTimerStarter+0x210>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f004 feca 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003810:	e03f      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003812:	4b29      	ldr	r3, [pc, #164]	@ (80038b8 <PWMTimerStarter+0x210>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f004 ff8b 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 800381e:	e038      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <PWMTimerStarter+0x204>)
 8003822:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d106      	bne.n	8003838 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800382a:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <PWMTimerStarter+0x210>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2104      	movs	r1, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f004 feb7 	bl	80085a4 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8003836:	e02c      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <PWMTimerStarter+0x210>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2104      	movs	r1, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f004 ff78 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 8003844:	e025      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8003846:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <PWMTimerStarter+0x204>)
 8003848:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d106      	bne.n	800385e <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <PWMTimerStarter+0x210>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2108      	movs	r1, #8
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fea4 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 800385c:	e019      	b.n	8003892 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <PWMTimerStarter+0x210>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2108      	movs	r1, #8
 8003864:	4618      	mov	r0, r3
 8003866:	f004 ff65 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 800386a:	e012      	b.n	8003892 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <PWMTimerStarter+0x204>)
 800386e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d106      	bne.n	8003884 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8003876:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <PWMTimerStarter+0x214>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2108      	movs	r1, #8
 800387c:	4618      	mov	r0, r3
 800387e:	f004 fe91 	bl	80085a4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003882:	e005      	b.n	8003890 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003884:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <PWMTimerStarter+0x214>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2108      	movs	r1, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f004 ff52 	bl	8008734 <HAL_TIM_PWM_Stop>
			break;
 8003890:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3301      	adds	r3, #1
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b0a      	cmp	r3, #10
 800389c:	f77f af0a 	ble.w	80036b4 <PWMTimerStarter+0xc>
		}
	}
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000d08 	.word	0x20000d08
 80038b0:	20000cf8 	.word	0x20000cf8
 80038b4:	20000d04 	.word	0x20000d04
 80038b8:	20000d00 	.word	0x20000d00
 80038bc:	20000cfc 	.word	0x20000cfc

080038c0 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80038c4:	2224      	movs	r2, #36	@ 0x24
 80038c6:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <remote_control_init+0x14>)
 80038c8:	4803      	ldr	r0, [pc, #12]	@ (80038d8 <remote_control_init+0x18>)
 80038ca:	f7fe fa0f 	bl	8001cec <RC_init>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000d50 	.word	0x20000d50
 80038d8:	20000d2c 	.word	0x20000d2c

080038dc <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80038e0:	4b02      	ldr	r3, [pc, #8]	@ (80038ec <get_remote_control_point+0x10>)
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20000d14 	.word	0x20000d14

080038f0 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80038f6:	4b44      	ldr	r3, [pc, #272]	@ (8003a08 <USART3_IRQHandler+0x118>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	4b3f      	ldr	r3, [pc, #252]	@ (8003a08 <USART3_IRQHandler+0x118>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <USART3_IRQHandler+0x118>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800391a:	e070      	b.n	80039fe <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 800391c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <USART3_IRQHandler+0x11c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d06a      	beq.n	80039fe <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <USART3_IRQHandler+0x118>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <USART3_IRQHandler+0x118>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 800393e:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <USART3_IRQHandler+0x120>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d12d      	bne.n	80039a8 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800394c:	4b30      	ldr	r3, [pc, #192]	@ (8003a10 <USART3_IRQHandler+0x120>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b2f      	ldr	r3, [pc, #188]	@ (8003a10 <USART3_IRQHandler+0x120>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 800395c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a10 <USART3_IRQHandler+0x120>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003968:	b29a      	uxth	r2, r3
 800396a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a14 <USART3_IRQHandler+0x124>)
 800396c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 800396e:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <USART3_IRQHandler+0x120>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003976:	4b26      	ldr	r3, [pc, #152]	@ (8003a10 <USART3_IRQHandler+0x120>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b24      	ldr	r3, [pc, #144]	@ (8003a10 <USART3_IRQHandler+0x120>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003984:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003986:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <USART3_IRQHandler+0x120>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <USART3_IRQHandler+0x120>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003996:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <USART3_IRQHandler+0x124>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b12      	cmp	r3, #18
 800399c:	d12f      	bne.n	80039fe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 800399e:	491e      	ldr	r1, [pc, #120]	@ (8003a18 <USART3_IRQHandler+0x128>)
 80039a0:	481e      	ldr	r0, [pc, #120]	@ (8003a1c <USART3_IRQHandler+0x12c>)
 80039a2:	f000 f841 	bl	8003a28 <sbus_to_rc>
}
 80039a6:	e02a      	b.n	80039fe <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80039b8:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <USART3_IRQHandler+0x124>)
 80039c8:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2224      	movs	r2, #36	@ 0x24
 80039d0:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80039d2:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <USART3_IRQHandler+0x130>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <USART3_IRQHandler+0x130>)
 80039d8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80039dc:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <USART3_IRQHandler+0x120>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <USART3_IRQHandler+0x124>)
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d103      	bne.n	80039fe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80039f6:	4908      	ldr	r1, [pc, #32]	@ (8003a18 <USART3_IRQHandler+0x128>)
 80039f8:	480a      	ldr	r0, [pc, #40]	@ (8003a24 <USART3_IRQHandler+0x134>)
 80039fa:	f000 f815 	bl	8003a28 <sbus_to_rc>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000a74 	.word	0x20000a74
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	20000bc4 	.word	0x20000bc4
 8003a14:	20000d74 	.word	0x20000d74
 8003a18:	20000d14 	.word	0x20000d14
 8003a1c:	20000d2c 	.word	0x20000d2c
 8003a20:	40026028 	.word	0x40026028
 8003a24:	20000d50 	.word	0x20000d50

08003a28 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8101 	beq.w	8003c3c <sbus_to_rc+0x214>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80fd 	beq.w	8003c3c <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a5e:	b21a      	sxth	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3301      	adds	r3, #1
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	08db      	lsrs	r3, r3, #3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3302      	adds	r3, #2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	b21b      	sxth	r3, r3
 8003a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a86:	b21a      	sxth	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3302      	adds	r3, #2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	b21a      	sxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3303      	adds	r3, #3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003abe:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3305      	adds	r3, #5
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	01db      	lsls	r3, r3, #7
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b21b      	sxth	r3, r3
 8003ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae6:	b21a      	sxth	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3305      	adds	r3, #5
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3305      	adds	r3, #5
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	109b      	asrs	r3, r3, #2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3306      	adds	r3, #6
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b21a      	sxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3307      	adds	r3, #7
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3309      	adds	r3, #9
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	b21b      	sxth	r3, r3
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b21a      	sxth	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	330a      	adds	r3, #10
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	330b      	adds	r3, #11
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	330d      	adds	r3, #13
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	330e      	adds	r3, #14
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	b21a      	sxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	330f      	adds	r3, #15
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b21b      	sxth	r3, r3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3311      	adds	r3, #17
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	b21a      	sxth	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	b21a      	sxth	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	811a      	strh	r2, [r3, #8]
 8003c3a:	e000      	b.n	8003c3e <sbus_to_rc+0x216>
        return;
 8003c3c:	bf00      	nop
}
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <getRCchannel+0x24>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003c5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003c5e:	b21b      	sxth	r3, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000018 	.word	0x20000018

08003c70 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8003c76:	4b85      	ldr	r3, [pc, #532]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	7d1a      	ldrb	r2, [r3, #20]
 8003c7c:	7d5b      	ldrb	r3, [r3, #21]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	4313      	orrs	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8003c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da07      	bge.n	8003c9c <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8003c8c:	4b80      	ldr	r3, [pc, #512]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003c98:	80fb      	strh	r3, [r7, #6]
 8003c9a:	e002      	b.n	8003ca2 <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca8:	d307      	bcc.n	8003cba <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8003caa:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003cb6:	80fb      	strh	r3, [r7, #6]
 8003cb8:	e002      	b.n	8003cc0 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8003cba:	4b75      	ldr	r3, [pc, #468]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	d307      	bcc.n	8003cd8 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003cc8:	4b71      	ldr	r3, [pc, #452]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003cd4:	80fb      	strh	r3, [r7, #6]
 8003cd6:	e002      	b.n	8003cde <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce4:	d307      	bcc.n	8003cf6 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003cf2:	80fb      	strh	r3, [r7, #6]
 8003cf4:	e002      	b.n	8003cfc <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003cf6:	4b66      	ldr	r3, [pc, #408]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d02:	d307      	bcc.n	8003d14 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003d04:	4b62      	ldr	r3, [pc, #392]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003d10:	80fb      	strh	r3, [r7, #6]
 8003d12:	e002      	b.n	8003d1a <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003d14:	4b5e      	ldr	r3, [pc, #376]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d20:	d307      	bcc.n	8003d32 <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8003d22:	4b5b      	ldr	r3, [pc, #364]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d2e:	80fb      	strh	r3, [r7, #6]
 8003d30:	e002      	b.n	8003d38 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8003d32:	4b57      	ldr	r3, [pc, #348]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3e:	d307      	bcc.n	8003d50 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8003d40:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003d4c:	80fb      	strh	r3, [r7, #6]
 8003d4e:	e002      	b.n	8003d56 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8003d50:	4b4f      	ldr	r3, [pc, #316]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2bff      	cmp	r3, #255	@ 0xff
 8003d5a:	d907      	bls.n	8003d6c <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d68:	80fb      	strh	r3, [r7, #6]
 8003d6a:	e002      	b.n	8003d72 <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8003d6c:	4b48      	ldr	r3, [pc, #288]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d76:	d906      	bls.n	8003d86 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003d78:	4b45      	ldr	r3, [pc, #276]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	3b80      	subs	r3, #128	@ 0x80
 8003d82:	80fb      	strh	r3, [r7, #6]
 8003d84:	e002      	b.n	8003d8c <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8003d86:	4b42      	ldr	r3, [pc, #264]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d90:	d906      	bls.n	8003da0 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003d92:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	3b40      	subs	r3, #64	@ 0x40
 8003d9c:	80fb      	strh	r3, [r7, #6]
 8003d9e:	e002      	b.n	8003da6 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003da0:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b1f      	cmp	r3, #31
 8003daa:	d906      	bls.n	8003dba <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003dac:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	3b20      	subs	r3, #32
 8003db6:	80fb      	strh	r3, [r7, #6]
 8003db8:	e002      	b.n	8003dc0 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003dba:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d906      	bls.n	8003dd4 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003dc6:	4b32      	ldr	r3, [pc, #200]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	3b10      	subs	r3, #16
 8003dd0:	80fb      	strh	r3, [r7, #6]
 8003dd2:	e002      	b.n	8003dda <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	d906      	bls.n	8003dee <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8003de0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	3b08      	subs	r3, #8
 8003dea:	80fb      	strh	r3, [r7, #6]
 8003dec:	e002      	b.n	8003df4 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 8003dee:	4b28      	ldr	r3, [pc, #160]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d906      	bls.n	8003e08 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8003dfa:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	3b04      	subs	r3, #4
 8003e04:	80fb      	strh	r3, [r7, #6]
 8003e06:	e002      	b.n	8003e0e <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d906      	bls.n	8003e22 <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8003e14:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	3b02      	subs	r3, #2
 8003e1e:	80fb      	strh	r3, [r7, #6]
 8003e20:	e002      	b.n	8003e28 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 8003e22:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	731a      	strb	r2, [r3, #12]
 8003e34:	e002      	b.n	8003e3c <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8003e36:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8003e3c:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e44:	b21a      	sxth	r2, r3
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e48:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e56:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e64:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	7c9b      	ldrb	r3, [r3, #18]
 8003e6c:	b25a      	sxtb	r2, r3
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e70:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <RCkeysRefresh+0x21c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	7cdb      	ldrb	r3, [r3, #19]
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <RCkeysRefresh+0x220>)
 8003e7c:	71da      	strb	r2, [r3, #7]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000018 	.word	0x20000018
 8003e90:	20000524 	.word	0x20000524

08003e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	4a11      	ldr	r2, [pc, #68]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_MspInit+0x54>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	210f      	movs	r1, #15
 8003ed6:	f06f 0001 	mvn.w	r0, #1
 8003eda:	f001 fe74 	bl	8005bc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800

08003eec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	@ (8004034 <HAL_CAN_MspInit+0x148>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d13d      	bne.n	8003f8a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a48      	ldr	r2, [pc, #288]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f18:	4b47      	ldr	r3, [pc, #284]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10d      	bne.n	8003f3c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	4a44      	ldr	r2, [pc, #272]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f30:	4b42      	ldr	r3, [pc, #264]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	4b3e      	ldr	r3, [pc, #248]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4a3d      	ldr	r2, [pc, #244]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f46:	f043 0308 	orr.w	r3, r3, #8
 8003f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f64:	2303      	movs	r3, #3
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f68:	2309      	movs	r3, #9
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f6c:	f107 031c 	add.w	r3, r7, #28
 8003f70:	4619      	mov	r1, r3
 8003f72:	4833      	ldr	r0, [pc, #204]	@ (8004040 <HAL_CAN_MspInit+0x154>)
 8003f74:	f002 fa60 	bl	8006438 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2105      	movs	r1, #5
 8003f7c:	2014      	movs	r0, #20
 8003f7e:	f001 fe22 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f82:	2014      	movs	r0, #20
 8003f84:	f001 fe3b 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f88:	e04f      	b.n	800402a <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <HAL_CAN_MspInit+0x158>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d14a      	bne.n	800402a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	4b28      	ldr	r3, [pc, #160]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	4a27      	ldr	r2, [pc, #156]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fa4:	4b25      	ldr	r3, [pc, #148]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a20      	ldr	r2, [pc, #128]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003fb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003fba:	4b1f      	ldr	r3, [pc, #124]	@ (8004038 <HAL_CAN_MspInit+0x14c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10d      	bne.n	8003fde <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b16      	ldr	r3, [pc, #88]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	4a15      	ldr	r2, [pc, #84]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fee:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_CAN_MspInit+0x150>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ffa:	2360      	movs	r3, #96	@ 0x60
 8003ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800400a:	2309      	movs	r3, #9
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400e:	f107 031c 	add.w	r3, r7, #28
 8004012:	4619      	mov	r1, r3
 8004014:	480c      	ldr	r0, [pc, #48]	@ (8004048 <HAL_CAN_MspInit+0x15c>)
 8004016:	f002 fa0f 	bl	8006438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2105      	movs	r1, #5
 800401e:	2040      	movs	r0, #64	@ 0x40
 8004020:	f001 fdd1 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004024:	2040      	movs	r0, #64	@ 0x40
 8004026:	f001 fdea 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3730      	adds	r7, #48	@ 0x30
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40006400 	.word	0x40006400
 8004038:	20000d78 	.word	0x20000d78
 800403c:	40023800 	.word	0x40023800
 8004040:	40020c00 	.word	0x40020c00
 8004044:	40006800 	.word	0x40006800
 8004048:	40020400 	.word	0x40020400

0800404c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a29      	ldr	r2, [pc, #164]	@ (8004110 <HAL_I2C_MspInit+0xc4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d14b      	bne.n	8004106 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	4a27      	ldr	r2, [pc, #156]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	6313      	str	r3, [r2, #48]	@ 0x30
 800407e:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6313      	str	r3, [r2, #48]	@ 0x30
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ac:	2312      	movs	r3, #18
 80040ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b4:	2303      	movs	r3, #3
 80040b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040b8:	2304      	movs	r3, #4
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4619      	mov	r1, r3
 80040c2:	4815      	ldr	r0, [pc, #84]	@ (8004118 <HAL_I2C_MspInit+0xcc>)
 80040c4:	f002 f9b8 	bl	8006438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ce:	2312      	movs	r3, #18
 80040d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040da:	2304      	movs	r3, #4
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4619      	mov	r1, r3
 80040e4:	480d      	ldr	r0, [pc, #52]	@ (800411c <HAL_I2C_MspInit+0xd0>)
 80040e6:	f002 f9a7 	bl	8006438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4a08      	ldr	r2, [pc, #32]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 80040f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_I2C_MspInit+0xc8>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004106:	bf00      	nop
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40005c00 	.word	0x40005c00
 8004114:	40023800 	.word	0x40023800
 8004118:	40020800 	.word	0x40020800
 800411c:	40020000 	.word	0x40020000

08004120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <HAL_SPI_MspInit+0xc0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d149      	bne.n	80041d6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 800414c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a1f      	ldr	r2, [pc, #124]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6313      	str	r3, [r2, #48]	@ 0x30
 800418a:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <HAL_SPI_MspInit+0xc4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004196:	2318      	movs	r3, #24
 8004198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a2:	2303      	movs	r3, #3
 80041a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041a6:	2305      	movs	r3, #5
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <HAL_SPI_MspInit+0xc8>)
 80041b2:	f002 f941 	bl	8006438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c2:	2303      	movs	r3, #3
 80041c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041c6:	2305      	movs	r3, #5
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	4806      	ldr	r0, [pc, #24]	@ (80041ec <HAL_SPI_MspInit+0xcc>)
 80041d2:	f002 f931 	bl	8006438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041d6:	bf00      	nop
 80041d8:	3728      	adds	r7, #40	@ 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40013000 	.word	0x40013000
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40020400 	.word	0x40020400
 80041ec:	40020000 	.word	0x40020000

080041f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004338 <HAL_TIM_PWM_MspInit+0x148>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	4b4d      	ldr	r3, [pc, #308]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	4a4c      	ldr	r2, [pc, #304]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6453      	str	r3, [r2, #68]	@ 0x44
 8004212:	4b4a      	ldr	r3, [pc, #296]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800421e:	e086      	b.n	800432e <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a46      	ldr	r2, [pc, #280]	@ (8004340 <HAL_TIM_PWM_MspInit+0x150>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d16e      	bne.n	8004308 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a42      	ldr	r2, [pc, #264]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b40      	ldr	r3, [pc, #256]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8004246:	4b3f      	ldr	r3, [pc, #252]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004248:	4a3f      	ldr	r2, [pc, #252]	@ (8004348 <HAL_TIM_PWM_MspInit+0x158>)
 800424a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800424c:	4b3d      	ldr	r3, [pc, #244]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800424e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004252:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004254:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800425a:	4b3a      	ldr	r3, [pc, #232]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800425c:	2200      	movs	r2, #0
 800425e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004260:	4b38      	ldr	r3, [pc, #224]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004266:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004268:	4b36      	ldr	r3, [pc, #216]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800426a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800426e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004270:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004276:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8004278:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800427e:	4b31      	ldr	r3, [pc, #196]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004280:	2200      	movs	r2, #0
 8004282:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004284:	4b2f      	ldr	r3, [pc, #188]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 8004286:	2200      	movs	r2, #0
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800428a:	482e      	ldr	r0, [pc, #184]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800428c:	f001 fcd2 	bl	8005c34 <HAL_DMA_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8004296:	f7ff f82d 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24
 80042a0:	4a28      	ldr	r2, [pc, #160]	@ (8004344 <HAL_TIM_PWM_MspInit+0x154>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80042a6:	4b29      	ldr	r3, [pc, #164]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042a8:	4a29      	ldr	r2, [pc, #164]	@ (8004350 <HAL_TIM_PWM_MspInit+0x160>)
 80042aa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80042ac:	4b27      	ldr	r3, [pc, #156]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042ae:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80042b2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042b4:	4b25      	ldr	r3, [pc, #148]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80042c0:	4b22      	ldr	r3, [pc, #136]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042c6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042c8:	4b20      	ldr	r3, [pc, #128]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042ce:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042d0:	4b1e      	ldr	r3, [pc, #120]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042d6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80042d8:	4b1c      	ldr	r3, [pc, #112]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80042de:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e4:	4b19      	ldr	r3, [pc, #100]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80042ea:	4818      	ldr	r0, [pc, #96]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042ec:	f001 fca2 	bl	8005c34 <HAL_DMA_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 80042f6:	f7fe fffd 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a13      	ldr	r2, [pc, #76]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 80042fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004300:	4a12      	ldr	r2, [pc, #72]	@ (800434c <HAL_TIM_PWM_MspInit+0x15c>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004306:	e012      	b.n	800432e <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a11      	ldr	r2, [pc, #68]	@ (8004354 <HAL_TIM_PWM_MspInit+0x164>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10d      	bne.n	800432e <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	4a08      	ldr	r2, [pc, #32]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	6453      	str	r3, [r2, #68]	@ 0x44
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_TIM_PWM_MspInit+0x14c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40023800 	.word	0x40023800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	2000096c 	.word	0x2000096c
 8004348:	40026040 	.word	0x40026040
 800434c:	200009cc 	.word	0x200009cc
 8004350:	40026070 	.word	0x40026070
 8004354:	40010400 	.word	0x40010400

08004358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2c      	ldr	r2, [pc, #176]	@ (8004418 <HAL_TIM_Base_MspInit+0xc0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d13e      	bne.n	80043e8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	4a2a      	ldr	r2, [pc, #168]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6413      	str	r3, [r2, #64]	@ 0x40
 800437a:	4b28      	ldr	r3, [pc, #160]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8004386:	4b26      	ldr	r3, [pc, #152]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 8004388:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <HAL_TIM_Base_MspInit+0xcc>)
 800438a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800438c:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 800438e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004392:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004394:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800439a:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 800439c:	2200      	movs	r2, #0
 800439e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80043a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043a6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ae:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043b6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80043b8:	4b19      	ldr	r3, [pc, #100]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80043be:	4b18      	ldr	r3, [pc, #96]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c4:	4b16      	ldr	r3, [pc, #88]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80043ca:	4815      	ldr	r0, [pc, #84]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043cc:	f001 fc32 	bl	8005c34 <HAL_DMA_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80043d6:	f7fe ff8d 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a10      	ldr	r2, [pc, #64]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043e0:	4a0f      	ldr	r2, [pc, #60]	@ (8004420 <HAL_TIM_Base_MspInit+0xc8>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80043e6:	e012      	b.n	800440e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004428 <HAL_TIM_Base_MspInit+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	4b09      	ldr	r3, [pc, #36]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	4a08      	ldr	r2, [pc, #32]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 80043fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004400:	6453      	str	r3, [r2, #68]	@ 0x44
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_TIM_Base_MspInit+0xc4>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40000800 	.word	0x40000800
 800441c:	40023800 	.word	0x40023800
 8004420:	2000090c 	.word	0x2000090c
 8004424:	400260b8 	.word	0x400260b8
 8004428:	40014400 	.word	0x40014400

0800442c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	@ 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6a      	ldr	r2, [pc, #424]	@ (80045f4 <HAL_TIM_MspPostInit+0x1c8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d11f      	bne.n	800448e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	4b69      	ldr	r3, [pc, #420]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a68      	ldr	r2, [pc, #416]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004458:	f043 0310 	orr.w	r3, r3, #16
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b66      	ldr	r3, [pc, #408]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800446a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800447c:	2301      	movs	r3, #1
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004484:	4619      	mov	r1, r3
 8004486:	485d      	ldr	r0, [pc, #372]	@ (80045fc <HAL_TIM_MspPostInit+0x1d0>)
 8004488:	f001 ffd6 	bl	8006438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800448c:	e0ae      	b.n	80045ec <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5b      	ldr	r2, [pc, #364]	@ (8004600 <HAL_TIM_MspPostInit+0x1d4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d11f      	bne.n	80044d8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	4b56      	ldr	r3, [pc, #344]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	4a55      	ldr	r2, [pc, #340]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80044a2:	f043 0308 	orr.w	r3, r3, #8
 80044a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a8:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044c6:	2302      	movs	r3, #2
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ce:	4619      	mov	r1, r3
 80044d0:	484c      	ldr	r0, [pc, #304]	@ (8004604 <HAL_TIM_MspPostInit+0x1d8>)
 80044d2:	f001 ffb1 	bl	8006438 <HAL_GPIO_Init>
}
 80044d6:	e089      	b.n	80045ec <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004608 <HAL_TIM_MspPostInit+0x1dc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d11f      	bne.n	8004522 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	4b44      	ldr	r3, [pc, #272]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	4a43      	ldr	r2, [pc, #268]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80044ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044f2:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80044fe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450c:	2300      	movs	r3, #0
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004510:	2302      	movs	r3, #2
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004518:	4619      	mov	r1, r3
 800451a:	483c      	ldr	r0, [pc, #240]	@ (800460c <HAL_TIM_MspPostInit+0x1e0>)
 800451c:	f001 ff8c 	bl	8006438 <HAL_GPIO_Init>
}
 8004520:	e064      	b.n	80045ec <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3a      	ldr	r2, [pc, #232]	@ (8004610 <HAL_TIM_MspPostInit+0x1e4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d13c      	bne.n	80045a6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	4a30      	ldr	r2, [pc, #192]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453a:	6313      	str	r3, [r2, #48]	@ 0x30
 800453c:	4b2e      	ldr	r3, [pc, #184]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	4a29      	ldr	r2, [pc, #164]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 8004552:	f043 0304 	orr.w	r3, r3, #4
 8004556:	6313      	str	r3, [r2, #48]	@ 0x30
 8004558:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004564:	23c0      	movs	r3, #192	@ 0xc0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004570:	2300      	movs	r3, #0
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004574:	2303      	movs	r3, #3
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457c:	4619      	mov	r1, r3
 800457e:	4825      	ldr	r0, [pc, #148]	@ (8004614 <HAL_TIM_MspPostInit+0x1e8>)
 8004580:	f001 ff5a 	bl	8006438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004584:	2340      	movs	r3, #64	@ 0x40
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004590:	2300      	movs	r3, #0
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004594:	2303      	movs	r3, #3
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800459c:	4619      	mov	r1, r3
 800459e:	481e      	ldr	r0, [pc, #120]	@ (8004618 <HAL_TIM_MspPostInit+0x1ec>)
 80045a0:	f001 ff4a 	bl	8006438 <HAL_GPIO_Init>
}
 80045a4:	e022      	b.n	80045ec <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <HAL_TIM_MspPostInit+0x1f0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d11d      	bne.n	80045ec <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	4a0f      	ldr	r2, [pc, #60]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c0:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045cc:	2340      	movs	r3, #64	@ 0x40
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d0:	2302      	movs	r3, #2
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d4:	2301      	movs	r3, #1
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045d8:	2302      	movs	r3, #2
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80045dc:	2303      	movs	r3, #3
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e4:	4619      	mov	r1, r3
 80045e6:	480e      	ldr	r0, [pc, #56]	@ (8004620 <HAL_TIM_MspPostInit+0x1f4>)
 80045e8:	f001 ff26 	bl	8006438 <HAL_GPIO_Init>
}
 80045ec:	bf00      	nop
 80045ee:	3738      	adds	r7, #56	@ 0x38
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40021000 	.word	0x40021000
 8004600:	40000800 	.word	0x40000800
 8004604:	40020c00 	.word	0x40020c00
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40021c00 	.word	0x40021c00
 8004610:	40010400 	.word	0x40010400
 8004614:	40022000 	.word	0x40022000
 8004618:	40020800 	.word	0x40020800
 800461c:	40014400 	.word	0x40014400
 8004620:	40021400 	.word	0x40021400

08004624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	@ 0x38
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a90      	ldr	r2, [pc, #576]	@ (8004884 <HAL_UART_MspInit+0x260>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f040 80b2 	bne.w	80047ac <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004648:	2300      	movs	r3, #0
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	4b8e      	ldr	r3, [pc, #568]	@ (8004888 <HAL_UART_MspInit+0x264>)
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	4a8d      	ldr	r2, [pc, #564]	@ (8004888 <HAL_UART_MspInit+0x264>)
 8004652:	f043 0310 	orr.w	r3, r3, #16
 8004656:	6453      	str	r3, [r2, #68]	@ 0x44
 8004658:	4b8b      	ldr	r3, [pc, #556]	@ (8004888 <HAL_UART_MspInit+0x264>)
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	4b87      	ldr	r3, [pc, #540]	@ (8004888 <HAL_UART_MspInit+0x264>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	4a86      	ldr	r2, [pc, #536]	@ (8004888 <HAL_UART_MspInit+0x264>)
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	6313      	str	r3, [r2, #48]	@ 0x30
 8004674:	4b84      	ldr	r3, [pc, #528]	@ (8004888 <HAL_UART_MspInit+0x264>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	4b80      	ldr	r3, [pc, #512]	@ (8004888 <HAL_UART_MspInit+0x264>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	4a7f      	ldr	r2, [pc, #508]	@ (8004888 <HAL_UART_MspInit+0x264>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004690:	4b7d      	ldr	r3, [pc, #500]	@ (8004888 <HAL_UART_MspInit+0x264>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046ac:	2307      	movs	r3, #7
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b4:	4619      	mov	r1, r3
 80046b6:	4875      	ldr	r0, [pc, #468]	@ (800488c <HAL_UART_MspInit+0x268>)
 80046b8:	f001 febe 	bl	8006438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046ce:	2307      	movs	r3, #7
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d6:	4619      	mov	r1, r3
 80046d8:	486d      	ldr	r0, [pc, #436]	@ (8004890 <HAL_UART_MspInit+0x26c>)
 80046da:	f001 fead 	bl	8006438 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80046de:	4b6d      	ldr	r3, [pc, #436]	@ (8004894 <HAL_UART_MspInit+0x270>)
 80046e0:	4a6d      	ldr	r2, [pc, #436]	@ (8004898 <HAL_UART_MspInit+0x274>)
 80046e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80046e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004894 <HAL_UART_MspInit+0x270>)
 80046e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ec:	4b69      	ldr	r3, [pc, #420]	@ (8004894 <HAL_UART_MspInit+0x270>)
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046f2:	4b68      	ldr	r3, [pc, #416]	@ (8004894 <HAL_UART_MspInit+0x270>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046f8:	4b66      	ldr	r3, [pc, #408]	@ (8004894 <HAL_UART_MspInit+0x270>)
 80046fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004700:	4b64      	ldr	r3, [pc, #400]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004702:	2200      	movs	r2, #0
 8004704:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004706:	4b63      	ldr	r3, [pc, #396]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800470c:	4b61      	ldr	r3, [pc, #388]	@ (8004894 <HAL_UART_MspInit+0x270>)
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004712:	4b60      	ldr	r3, [pc, #384]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004714:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004718:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800471a:	4b5e      	ldr	r3, [pc, #376]	@ (8004894 <HAL_UART_MspInit+0x270>)
 800471c:	2200      	movs	r2, #0
 800471e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004720:	485c      	ldr	r0, [pc, #368]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004722:	f001 fa87 	bl	8005c34 <HAL_DMA_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800472c:	f7fe fde2 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a58      	ldr	r2, [pc, #352]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
 8004736:	4a57      	ldr	r2, [pc, #348]	@ (8004894 <HAL_UART_MspInit+0x270>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800473c:	4b57      	ldr	r3, [pc, #348]	@ (800489c <HAL_UART_MspInit+0x278>)
 800473e:	4a58      	ldr	r2, [pc, #352]	@ (80048a0 <HAL_UART_MspInit+0x27c>)
 8004740:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004742:	4b56      	ldr	r3, [pc, #344]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004744:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004748:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800474a:	4b54      	ldr	r3, [pc, #336]	@ (800489c <HAL_UART_MspInit+0x278>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004750:	4b52      	ldr	r3, [pc, #328]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004756:	4b51      	ldr	r3, [pc, #324]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004758:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800475c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800475e:	4b4f      	ldr	r3, [pc, #316]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004764:	4b4d      	ldr	r3, [pc, #308]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800476a:	4b4c      	ldr	r3, [pc, #304]	@ (800489c <HAL_UART_MspInit+0x278>)
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004770:	4b4a      	ldr	r3, [pc, #296]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004772:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004776:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004778:	4b48      	ldr	r3, [pc, #288]	@ (800489c <HAL_UART_MspInit+0x278>)
 800477a:	2200      	movs	r2, #0
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800477e:	4847      	ldr	r0, [pc, #284]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004780:	f001 fa58 	bl	8005c34 <HAL_DMA_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800478a:	f7fe fdb3 	bl	80032f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a42      	ldr	r2, [pc, #264]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004792:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004794:	4a41      	ldr	r2, [pc, #260]	@ (800489c <HAL_UART_MspInit+0x278>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	2105      	movs	r1, #5
 800479e:	2025      	movs	r0, #37	@ 0x25
 80047a0:	f001 fa11 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047a4:	2025      	movs	r0, #37	@ 0x25
 80047a6:	f001 fa2a 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80047aa:	e11c      	b.n	80049e6 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3c      	ldr	r2, [pc, #240]	@ (80048a4 <HAL_UART_MspInit+0x280>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d17e      	bne.n	80048b4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	4a32      	ldr	r2, [pc, #200]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047c6:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_UART_MspInit+0x264>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80047ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	2302      	movs	r3, #2
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fc:	2303      	movs	r3, #3
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004800:	2307      	movs	r3, #7
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004808:	4619      	mov	r1, r3
 800480a:	4827      	ldr	r0, [pc, #156]	@ (80048a8 <HAL_UART_MspInit+0x284>)
 800480c:	f001 fe14 	bl	8006438 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004810:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004812:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <HAL_UART_MspInit+0x28c>)
 8004814:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004816:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004818:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800481c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004824:	4b21      	ldr	r3, [pc, #132]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_UART_MspInit+0x288>)
 800482c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004830:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004832:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004838:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_UART_MspInit+0x288>)
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004844:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004846:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004848:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800484c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484e:	4b17      	ldr	r3, [pc, #92]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004850:	2200      	movs	r2, #0
 8004852:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004854:	4815      	ldr	r0, [pc, #84]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004856:	f001 f9ed 	bl	8005c34 <HAL_DMA_Init>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004860:	f7fe fd48 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <HAL_UART_MspInit+0x288>)
 8004868:	63da      	str	r2, [r3, #60]	@ 0x3c
 800486a:	4a10      	ldr	r2, [pc, #64]	@ (80048ac <HAL_UART_MspInit+0x288>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004870:	2200      	movs	r2, #0
 8004872:	2105      	movs	r1, #5
 8004874:	2027      	movs	r0, #39	@ 0x27
 8004876:	f001 f9a6 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800487a:	2027      	movs	r0, #39	@ 0x27
 800487c:	f001 f9bf 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 8004880:	e0b1      	b.n	80049e6 <HAL_UART_MspInit+0x3c2>
 8004882:	bf00      	nop
 8004884:	40011000 	.word	0x40011000
 8004888:	40023800 	.word	0x40023800
 800488c:	40020400 	.word	0x40020400
 8004890:	40020000 	.word	0x40020000
 8004894:	20000b04 	.word	0x20000b04
 8004898:	400264b8 	.word	0x400264b8
 800489c:	20000b64 	.word	0x20000b64
 80048a0:	40026440 	.word	0x40026440
 80048a4:	40004800 	.word	0x40004800
 80048a8:	40020800 	.word	0x40020800
 80048ac:	20000bc4 	.word	0x20000bc4
 80048b0:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4d      	ldr	r2, [pc, #308]	@ (80049f0 <HAL_UART_MspInit+0x3cc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f040 8093 	bne.w	80049e6 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	4b4b      	ldr	r3, [pc, #300]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c8:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048ca:	f043 0320 	orr.w	r3, r3, #32
 80048ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80048d0:	4b48      	ldr	r3, [pc, #288]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	4b44      	ldr	r3, [pc, #272]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	4a43      	ldr	r2, [pc, #268]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ec:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_UART_MspInit+0x3d0>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80048f8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fe:	2302      	movs	r3, #2
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004906:	2303      	movs	r3, #3
 8004908:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800490a:	2308      	movs	r3, #8
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800490e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004912:	4619      	mov	r1, r3
 8004914:	4838      	ldr	r0, [pc, #224]	@ (80049f8 <HAL_UART_MspInit+0x3d4>)
 8004916:	f001 fd8f 	bl	8006438 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800491a:	4b38      	ldr	r3, [pc, #224]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 800491c:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_UART_MspInit+0x3dc>)
 800491e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004920:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004922:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004926:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004928:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800492e:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004930:	2200      	movs	r2, #0
 8004932:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004934:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800493a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800493c:	4b2f      	ldr	r3, [pc, #188]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 800493e:	2200      	movs	r2, #0
 8004940:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004942:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004948:	4b2c      	ldr	r3, [pc, #176]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004950:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004954:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004956:	4b29      	ldr	r3, [pc, #164]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004958:	2200      	movs	r2, #0
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800495c:	4827      	ldr	r0, [pc, #156]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 800495e:	f001 f969 	bl	8005c34 <HAL_DMA_Init>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004968:	f7fe fcc4 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a23      	ldr	r2, [pc, #140]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004970:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004972:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <HAL_UART_MspInit+0x3d8>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004978:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 800497a:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_UART_MspInit+0x3e4>)
 800497c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800497e:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 8004980:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004984:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004986:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 8004988:	2240      	movs	r2, #64	@ 0x40
 800498a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800498c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 800498e:	2200      	movs	r2, #0
 8004990:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004992:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 8004994:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004998:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800499a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049a0:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80049a6:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049ac:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80049b2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80049ba:	4812      	ldr	r0, [pc, #72]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049bc:	f001 f93a 	bl	8005c34 <HAL_DMA_Init>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80049c6:	f7fe fc95 	bl	80032f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80049d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004a04 <HAL_UART_MspInit+0x3e0>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2105      	movs	r1, #5
 80049da:	2047      	movs	r0, #71	@ 0x47
 80049dc:	f001 f8f3 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049e0:	2047      	movs	r0, #71	@ 0x47
 80049e2:	f001 f90c 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3738      	adds	r7, #56	@ 0x38
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40011400 	.word	0x40011400
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40021800 	.word	0x40021800
 80049fc:	20000c24 	.word	0x20000c24
 8004a00:	40026428 	.word	0x40026428
 8004a04:	20000c84 	.word	0x20000c84
 8004a08:	400264a0 	.word	0x400264a0

08004a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004a10:	f003 f990 	bl	8007d34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <NMI_Handler+0x8>

08004a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <HardFault_Handler+0x4>

08004a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <MemManage_Handler+0x4>

08004a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <BusFault_Handler+0x4>

08004a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <UsageFault_Handler+0x4>

08004a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a4a:	f000 f959 	bl	8004d00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a4e:	f007 fcc5 	bl	800c3dc <xTaskGetSchedulerState>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d001      	beq.n	8004a5c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a58:	f008 fb9e 	bl	800d198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004a64:	2008      	movs	r0, #8
 8004a66:	f001 fe9d 	bl	80067a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004a6a:	4802      	ldr	r0, [pc, #8]	@ (8004a74 <EXTI3_IRQHandler+0x14>)
 8004a6c:	f7fd fa38 	bl	8001ee0 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	2000069c 	.word	0x2000069c

08004a78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004a7c:	2010      	movs	r0, #16
 8004a7e:	f001 fe91 	bl	80067a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a8c:	4802      	ldr	r0, [pc, #8]	@ (8004a98 <DMA1_Stream1_IRQHandler+0x10>)
 8004a8e:	f001 fa69 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000bc4 	.word	0x20000bc4

08004a9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8004aa0:	4802      	ldr	r0, [pc, #8]	@ (8004aac <DMA1_Stream2_IRQHandler+0x10>)
 8004aa2:	f001 fa5f 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000096c 	.word	0x2000096c

08004ab0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004ab4:	4802      	ldr	r0, [pc, #8]	@ (8004ac0 <DMA1_Stream4_IRQHandler+0x10>)
 8004ab6:	f001 fa55 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	200009cc 	.word	0x200009cc

08004ac4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004ac8:	4802      	ldr	r0, [pc, #8]	@ (8004ad4 <CAN1_RX0_IRQHandler+0x10>)
 8004aca:	f000 fd71 	bl	80055b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200006a8 	.word	0x200006a8

08004ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004adc:	4802      	ldr	r0, [pc, #8]	@ (8004ae8 <USART1_IRQHandler+0x10>)
 8004ade:	f004 fd2b 	bl	8009538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000a2c 	.word	0x20000a2c

08004aec <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004af0:	4802      	ldr	r0, [pc, #8]	@ (8004afc <DMA1_Stream7_IRQHandler+0x10>)
 8004af2:	f001 fa37 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2000090c 	.word	0x2000090c

08004b00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004b04:	4802      	ldr	r0, [pc, #8]	@ (8004b10 <DMA2_Stream1_IRQHandler+0x10>)
 8004b06:	f001 fa2d 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000c24 	.word	0x20000c24

08004b14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004b18:	4802      	ldr	r0, [pc, #8]	@ (8004b24 <DMA2_Stream2_IRQHandler+0x10>)
 8004b1a:	f001 fa23 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000b64 	.word	0x20000b64

08004b28 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b2c:	4802      	ldr	r0, [pc, #8]	@ (8004b38 <CAN2_RX0_IRQHandler+0x10>)
 8004b2e:	f000 fd3f 	bl	80055b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200006d0 	.word	0x200006d0

08004b3c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004b40:	4802      	ldr	r0, [pc, #8]	@ (8004b4c <DMA2_Stream6_IRQHandler+0x10>)
 8004b42:	f001 fa0f 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000c84 	.word	0x20000c84

08004b50 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004b54:	4802      	ldr	r0, [pc, #8]	@ (8004b60 <DMA2_Stream7_IRQHandler+0x10>)
 8004b56:	f001 fa05 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000b04 	.word	0x20000b04

08004b64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004b68:	4802      	ldr	r0, [pc, #8]	@ (8004b74 <USART6_IRQHandler+0x10>)
 8004b6a:	f004 fce5 	bl	8009538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000abc 	.word	0x20000abc

08004b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b80:	4a14      	ldr	r2, [pc, #80]	@ (8004bd4 <_sbrk+0x5c>)
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <_sbrk+0x60>)
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <_sbrk+0x64>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <_sbrk+0x64>)
 8004b96:	4a12      	ldr	r2, [pc, #72]	@ (8004be0 <_sbrk+0x68>)
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d207      	bcs.n	8004bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ba8:	f008 fdf4 	bl	800d794 <__errno>
 8004bac:	4603      	mov	r3, r0
 8004bae:	220c      	movs	r2, #12
 8004bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bb6:	e009      	b.n	8004bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <_sbrk+0x64>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <_sbrk+0x64>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a05      	ldr	r2, [pc, #20]	@ (8004bdc <_sbrk+0x64>)
 8004bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20020000 	.word	0x20020000
 8004bd8:	00000400 	.word	0x00000400
 8004bdc:	20000d7c 	.word	0x20000d7c
 8004be0:	200058b8 	.word	0x200058b8

08004be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <SystemInit+0x20>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bee:	4a05      	ldr	r2, [pc, #20]	@ (8004c04 <SystemInit+0x20>)
 8004bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004c0c:	f7ff ffea 	bl	8004be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c10:	480c      	ldr	r0, [pc, #48]	@ (8004c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c12:	490d      	ldr	r1, [pc, #52]	@ (8004c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c14:	4a0d      	ldr	r2, [pc, #52]	@ (8004c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c18:	e002      	b.n	8004c20 <LoopCopyDataInit>

08004c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c1e:	3304      	adds	r3, #4

08004c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c24:	d3f9      	bcc.n	8004c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c28:	4c0a      	ldr	r4, [pc, #40]	@ (8004c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c2c:	e001      	b.n	8004c32 <LoopFillZerobss>

08004c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c30:	3204      	adds	r2, #4

08004c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c34:	d3fb      	bcc.n	8004c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c36:	f008 fdb3 	bl	800d7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c3a:	f7fd f9bf 	bl	8001fbc <main>
  bx  lr    
 8004c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004c4c:	0800e42c 	.word	0x0800e42c
  ldr r2, =_sbss
 8004c50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004c54:	200058b4 	.word	0x200058b4

08004c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c58:	e7fe      	b.n	8004c58 <ADC_IRQHandler>
	...

08004c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c60:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <HAL_Init+0x40>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	@ (8004c9c <HAL_Init+0x40>)
 8004c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_Init+0x40>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <HAL_Init+0x40>)
 8004c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c78:	4b08      	ldr	r3, [pc, #32]	@ (8004c9c <HAL_Init+0x40>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a07      	ldr	r2, [pc, #28]	@ (8004c9c <HAL_Init+0x40>)
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c84:	2003      	movs	r0, #3
 8004c86:	f000 ff93 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c8a:	200f      	movs	r0, #15
 8004c8c:	f000 f808 	bl	8004ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c90:	f7ff f900 	bl	8003e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023c00 	.word	0x40023c00

08004ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_InitTick+0x54>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <HAL_InitTick+0x58>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ffab 	bl	8005c1a <HAL_SYSTICK_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e00e      	b.n	8004cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d80a      	bhi.n	8004cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cdc:	f000 ff73 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ce0:	4a06      	ldr	r2, [pc, #24]	@ (8004cfc <HAL_InitTick+0x5c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	2000001c 	.word	0x2000001c
 8004cf8:	20000024 	.word	0x20000024
 8004cfc:	20000020 	.word	0x20000020

08004d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d04:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_IncTick+0x20>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_IncTick+0x24>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4413      	add	r3, r2
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <HAL_IncTick+0x24>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000024 	.word	0x20000024
 8004d24:	20000d80 	.word	0x20000d80

08004d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <HAL_GetTick+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000d80 	.word	0x20000d80

08004d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0ed      	b.n	8004f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff f8c4 	bl	8003eec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d74:	f7ff ffd8 	bl	8004d28 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d7a:	e012      	b.n	8004da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d7c:	f7ff ffd4 	bl	8004d28 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b0a      	cmp	r3, #10
 8004d88:	d90b      	bls.n	8004da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2205      	movs	r2, #5
 8004d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0c5      	b.n	8004f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0e5      	beq.n	8004d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0202 	bic.w	r2, r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dc0:	f7ff ffb2 	bl	8004d28 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dc6:	e012      	b.n	8004dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dc8:	f7ff ffae 	bl	8004d28 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b0a      	cmp	r3, #10
 8004dd4:	d90b      	bls.n	8004dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2205      	movs	r2, #5
 8004de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e09f      	b.n	8004f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7e1b      	ldrb	r3, [r3, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d108      	bne.n	8004e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e007      	b.n	8004e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7e5b      	ldrb	r3, [r3, #25]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d108      	bne.n	8004e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e007      	b.n	8004e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	7e9b      	ldrb	r3, [r3, #26]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d108      	bne.n	8004e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0220 	orr.w	r2, r2, #32
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e007      	b.n	8004e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0220 	bic.w	r2, r2, #32
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7edb      	ldrb	r3, [r3, #27]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d108      	bne.n	8004e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0210 	bic.w	r2, r2, #16
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e007      	b.n	8004ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0210 	orr.w	r2, r2, #16
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7f1b      	ldrb	r3, [r3, #28]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d108      	bne.n	8004ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0208 	orr.w	r2, r2, #8
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e007      	b.n	8004ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0208 	bic.w	r2, r2, #8
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7f5b      	ldrb	r3, [r3, #29]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d108      	bne.n	8004ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0204 	orr.w	r2, r2, #4
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e007      	b.n	8004ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	ea42 0103 	orr.w	r1, r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <HAL_CAN_ConfigFilter+0x26>
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f040 80be 	bne.w	80050da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f5e:	4b65      	ldr	r3, [pc, #404]	@ (80050f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d123      	bne.n	8005008 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fe2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3248      	adds	r2, #72	@ 0x48
 8004fe8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ffc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	3348      	adds	r3, #72	@ 0x48
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d122      	bne.n	8005056 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	431a      	orrs	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005030:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3248      	adds	r2, #72	@ 0x48
 8005036:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800504a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	3348      	adds	r3, #72	@ 0x48
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005070:	e007      	b.n	8005082 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	431a      	orrs	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	401a      	ands	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800509c:	e007      	b.n	80050ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	431a      	orrs	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050cc:	f023 0201 	bic.w	r2, r3, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e006      	b.n	80050e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40006400 	.word	0x40006400

080050f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d12e      	bne.n	800516a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005124:	f7ff fe00 	bl	8004d28 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800512a:	e012      	b.n	8005152 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800512c:	f7ff fdfc 	bl	8004d28 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b0a      	cmp	r3, #10
 8005138:	d90b      	bls.n	8005152 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2205      	movs	r2, #5
 800514a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e012      	b.n	8005178 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e006      	b.n	8005178 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	@ 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005194:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d003      	beq.n	80051ac <HAL_CAN_AddTxMessage+0x2c>
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	f040 80ad 	bne.w	8005306 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 8095 	beq.w	80052f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	0e1b      	lsrs	r3, r3, #24
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051d6:	2201      	movs	r2, #1
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	409a      	lsls	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6809      	ldr	r1, [r1, #0]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3318      	adds	r3, #24
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	440b      	add	r3, r1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e00f      	b.n	8005224 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800520e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005218:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3318      	adds	r3, #24
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	440b      	add	r3, r1
 8005222:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3318      	adds	r3, #24
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	440b      	add	r3, r1
 8005234:	3304      	adds	r3, #4
 8005236:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	7d1b      	ldrb	r3, [r3, #20]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d111      	bne.n	8005264 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3318      	adds	r3, #24
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	3304      	adds	r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6811      	ldr	r1, [r2, #0]
 8005254:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3318      	adds	r3, #24
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	440b      	add	r3, r1
 8005260:	3304      	adds	r3, #4
 8005262:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3307      	adds	r3, #7
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	061a      	lsls	r2, r3, #24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3306      	adds	r3, #6
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3305      	adds	r3, #5
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	4313      	orrs	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	3204      	adds	r2, #4
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	4610      	mov	r0, r2
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6811      	ldr	r1, [r2, #0]
 800528c:	ea43 0200 	orr.w	r2, r3, r0
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	440b      	add	r3, r1
 8005296:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800529a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3303      	adds	r3, #3
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	061a      	lsls	r2, r3, #24
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3302      	adds	r3, #2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3301      	adds	r3, #1
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	4313      	orrs	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	4610      	mov	r0, r2
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	6811      	ldr	r1, [r2, #0]
 80052c2:	ea43 0200 	orr.w	r2, r3, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80052d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	3318      	adds	r3, #24
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	4413      	add	r3, r2
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	6811      	ldr	r1, [r2, #0]
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3318      	adds	r3, #24
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	440b      	add	r3, r1
 80052f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e00e      	b.n	8005314 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e006      	b.n	8005314 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3724      	adds	r7, #36	@ 0x24
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005334:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d003      	beq.n	8005344 <HAL_CAN_GetRxMessage+0x24>
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b02      	cmp	r3, #2
 8005340:	f040 8103 	bne.w	800554a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10e      	bne.n	8005368 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0f7      	b.n	8005558 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d107      	bne.n	8005386 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0e8      	b.n	8005558 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	331b      	adds	r3, #27
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	4413      	add	r3, r2
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0204 	and.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10c      	bne.n	80053be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	331b      	adds	r3, #27
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	4413      	add	r3, r2
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	0d5b      	lsrs	r3, r3, #21
 80053b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e00b      	b.n	80053d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	331b      	adds	r3, #27
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	08db      	lsrs	r3, r3, #3
 80053ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	331b      	adds	r3, #27
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0202 	and.w	r2, r3, #2
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	331b      	adds	r3, #27
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	3304      	adds	r3, #4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2208      	movs	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
 800540a:	e00b      	b.n	8005424 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	331b      	adds	r3, #27
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	331b      	adds	r3, #27
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	b2da      	uxtb	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	331b      	adds	r3, #27
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4413      	add	r3, r2
 8005448:	3304      	adds	r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	4413      	add	r3, r2
 800545e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0a1a      	lsrs	r2, r3, #8
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	4413      	add	r3, r2
 800548e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	0c1a      	lsrs	r2, r3, #16
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	3302      	adds	r3, #2
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0e1a      	lsrs	r2, r3, #24
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	3303      	adds	r3, #3
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	3304      	adds	r3, #4
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	4413      	add	r3, r2
 80054da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0a1a      	lsrs	r2, r3, #8
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	3305      	adds	r3, #5
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	0c1a      	lsrs	r2, r3, #16
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	3306      	adds	r3, #6
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4413      	add	r3, r2
 800550e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0e1a      	lsrs	r2, r3, #24
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	3307      	adds	r3, #7
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0220 	orr.w	r2, r2, #32
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	e007      	b.n	8005546 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0220 	orr.w	r2, r2, #32
 8005544:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e006      	b.n	8005558 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005574:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d002      	beq.n	8005582 <HAL_CAN_ActivateNotification+0x1e>
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d109      	bne.n	8005596 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6959      	ldr	r1, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e006      	b.n	80055a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	@ 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d07c      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d023      	beq.n	8005648 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f983 	bl	800591e <HAL_CAN_TxMailbox0CompleteCallback>
 8005618:	e016      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
 800562c:	e00c      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005640:	e002      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f989 	bl	800595a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d024      	beq.n	800569c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800565a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f963 	bl	8005932 <HAL_CAN_TxMailbox1CompleteCallback>
 800566c:	e016      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	e00c      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	e002      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f969 	bl	800596e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d024      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80056ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f943 	bl	8005946 <HAL_CAN_TxMailbox2CompleteCallback>
 80056c0:	e016      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d4:	e00c      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e8:	e002      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f949 	bl	8005982 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2210      	movs	r2, #16
 8005712:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f930 	bl	8005996 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fcd2 	bl	80010f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2210      	movs	r2, #16
 8005776:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d006      	beq.n	800579a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f912 	bl	80059be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8f9 	bl	80059aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2210      	movs	r2, #16
 80057d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8fc 	bl	80059d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2208      	movs	r2, #8
 80057f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8f5 	bl	80059e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d07b      	beq.n	80058fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d072      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	f043 0302 	orr.w	r3, r3, #2
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	f043 0304 	orr.w	r3, r3, #4
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800586a:	2b00      	cmp	r3, #0
 800586c:	d043      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	d03e      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800587e:	2b60      	cmp	r3, #96	@ 0x60
 8005880:	d02b      	beq.n	80058da <HAL_CAN_IRQHandler+0x32a>
 8005882:	2b60      	cmp	r3, #96	@ 0x60
 8005884:	d82e      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 8005886:	2b50      	cmp	r3, #80	@ 0x50
 8005888:	d022      	beq.n	80058d0 <HAL_CAN_IRQHandler+0x320>
 800588a:	2b50      	cmp	r3, #80	@ 0x50
 800588c:	d82a      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 800588e:	2b40      	cmp	r3, #64	@ 0x40
 8005890:	d019      	beq.n	80058c6 <HAL_CAN_IRQHandler+0x316>
 8005892:	2b40      	cmp	r3, #64	@ 0x40
 8005894:	d826      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 8005896:	2b30      	cmp	r3, #48	@ 0x30
 8005898:	d010      	beq.n	80058bc <HAL_CAN_IRQHandler+0x30c>
 800589a:	2b30      	cmp	r3, #48	@ 0x30
 800589c:	d822      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d002      	beq.n	80058a8 <HAL_CAN_IRQHandler+0x2f8>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d005      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058a6:	e01d      	b.n	80058e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058b0:	e019      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	f043 0310 	orr.w	r3, r3, #16
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058ba:	e014      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058c4:	e00f      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058ce:	e00a      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058d8:	e005      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058e2:	e000      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80058e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80058f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2204      	movs	r2, #4
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f872 	bl	80059fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005916:	bf00      	nop
 8005918:	3728      	adds	r7, #40	@ 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a20:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a42:	4a04      	ldr	r2, [pc, #16]	@ (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	60d3      	str	r3, [r2, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <__NVIC_GetPriorityGrouping+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0307 	and.w	r3, r3, #7
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db0b      	blt.n	8005a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	f003 021f 	and.w	r2, r3, #31
 8005a8c:	4907      	ldr	r1, [pc, #28]	@ (8005aac <__NVIC_EnableIRQ+0x38>)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2001      	movs	r0, #1
 8005a96:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	@ (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	@ (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	@ 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	@ 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff29 	bl	8005a10 <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff3e 	bl	8005a58 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff31 	bl	8005a74 <__NVIC_EnableIRQ>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ffa2 	bl	8005b6c <SysTick_Config>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c40:	f7ff f872 	bl	8004d28 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e099      	b.n	8005d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c70:	e00f      	b.n	8005c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c72:	f7ff f859 	bl	8004d28 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d908      	bls.n	8005c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e078      	b.n	8005d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e8      	bne.n	8005c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <HAL_DMA_Init+0x158>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d107      	bne.n	8005cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d117      	bne.n	8005d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb01 	bl	8006340 <DMA_CheckFifoParam>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	@ 0x40
 8005d48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d52:	2301      	movs	r3, #1
 8005d54:	e016      	b.n	8005d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fab8 	bl	80062d4 <DMA_CalcBaseAndBitshift>
 8005d64:	4603      	mov	r3, r0
 8005d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6c:	223f      	movs	r2, #63	@ 0x3f
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	f010803f 	.word	0xf010803f

08005d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_DMA_Start_IT+0x26>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e040      	b.n	8005e38 <HAL_DMA_Start_IT+0xa8>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d12f      	bne.n	8005e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fa4a 	bl	8006278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de8:	223f      	movs	r2, #63	@ 0x3f
 8005dea:	409a      	lsls	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0216 	orr.w	r2, r2, #22
 8005dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e005      	b.n	8005e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
 8005e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e4e:	f7fe ff6b 	bl	8004d28 <HAL_GetTick>
 8005e52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d008      	beq.n	8005e72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2280      	movs	r2, #128	@ 0x80
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e052      	b.n	8005f18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0216 	bic.w	r2, r2, #22
 8005e80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_DMA_Abort+0x62>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0208 	bic.w	r2, r2, #8
 8005eb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec2:	e013      	b.n	8005eec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ec4:	f7fe ff30 	bl	8004d28 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d90c      	bls.n	8005eec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2203      	movs	r2, #3
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e015      	b.n	8005f18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e4      	bne.n	8005ec4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efe:	223f      	movs	r2, #63	@ 0x3f
 8005f00:	409a      	lsls	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d004      	beq.n	8005f3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2280      	movs	r2, #128	@ 0x80
 8005f38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00c      	b.n	8005f58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2205      	movs	r2, #5
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f70:	4b8e      	ldr	r3, [pc, #568]	@ (80061ac <HAL_DMA_IRQHandler+0x248>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a8e      	ldr	r2, [pc, #568]	@ (80061b0 <HAL_DMA_IRQHandler+0x24c>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	2208      	movs	r2, #8
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01a      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d012      	beq.n	8006006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600a:	2204      	movs	r2, #4
 800600c:	409a      	lsls	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006028:	2204      	movs	r2, #4
 800602a:	409a      	lsls	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	f043 0204 	orr.w	r2, r3, #4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006040:	2210      	movs	r2, #16
 8006042:	409a      	lsls	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d043      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03c      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605e:	2210      	movs	r2, #16
 8006060:	409a      	lsls	r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d024      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	e01f      	b.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
 80060a4:	e016      	b.n	80060d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0208 	bic.w	r2, r2, #8
 80060c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d8:	2220      	movs	r2, #32
 80060da:	409a      	lsls	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 808f 	beq.w	8006204 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8087 	beq.w	8006204 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fa:	2220      	movs	r2, #32
 80060fc:	409a      	lsls	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b05      	cmp	r3, #5
 800610c:	d136      	bne.n	800617c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0216 	bic.w	r2, r2, #22
 800611c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800612c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_DMA_IRQHandler+0x1da>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0208 	bic.w	r2, r2, #8
 800614c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006152:	223f      	movs	r2, #63	@ 0x3f
 8006154:	409a      	lsls	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	d07e      	beq.n	8006270 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
        }
        return;
 800617a:	e079      	b.n	8006270 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10d      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619c:	2b00      	cmp	r3, #0
 800619e:	d031      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	e02c      	b.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
 80061aa:	bf00      	nop
 80061ac:	2000001c 	.word	0x2000001c
 80061b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d023      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	e01e      	b.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10f      	bne.n	80061f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0210 	bic.w	r2, r2, #16
 80061e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006208:	2b00      	cmp	r3, #0
 800620a:	d032      	beq.n	8006272 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d022      	beq.n	800625e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2205      	movs	r2, #5
 800621c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	3301      	adds	r3, #1
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	429a      	cmp	r2, r3
 800623a:	d307      	bcc.n	800624c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f2      	bne.n	8006230 <HAL_DMA_IRQHandler+0x2cc>
 800624a:	e000      	b.n	800624e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800624c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	e000      	b.n	8006272 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006270:	bf00      	nop
    }
  }
}
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d108      	bne.n	80062b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062b6:	e007      	b.n	80062c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	3b10      	subs	r3, #16
 80062e4:	4a14      	ldr	r2, [pc, #80]	@ (8006338 <DMA_CalcBaseAndBitshift+0x64>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062ee:	4a13      	ldr	r2, [pc, #76]	@ (800633c <DMA_CalcBaseAndBitshift+0x68>)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d909      	bls.n	8006316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	659a      	str	r2, [r3, #88]	@ 0x58
 8006314:	e007      	b.n	8006326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	aaaaaaab 	.word	0xaaaaaaab
 800633c:	0800e3c0 	.word	0x0800e3c0

08006340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11f      	bne.n	800639a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d856      	bhi.n	800640e <DMA_CheckFifoParam+0xce>
 8006360:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <DMA_CheckFifoParam+0x28>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	08006379 	.word	0x08006379
 800636c:	0800638b 	.word	0x0800638b
 8006370:	08006379 	.word	0x08006379
 8006374:	0800640f 	.word	0x0800640f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d046      	beq.n	8006412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006388:	e043      	b.n	8006412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006392:	d140      	bne.n	8006416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006398:	e03d      	b.n	8006416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a2:	d121      	bne.n	80063e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d837      	bhi.n	800641a <DMA_CheckFifoParam+0xda>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <DMA_CheckFifoParam+0x70>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063c7 	.word	0x080063c7
 80063b8:	080063c1 	.word	0x080063c1
 80063bc:	080063d9 	.word	0x080063d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      break;
 80063c4:	e030      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d025      	beq.n	800641e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d6:	e022      	b.n	800641e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063e0:	d11f      	bne.n	8006422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063e6:	e01c      	b.n	8006422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d903      	bls.n	80063f6 <DMA_CheckFifoParam+0xb6>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d003      	beq.n	80063fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063f4:	e018      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      break;
 80063fa:	e015      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00e      	beq.n	8006426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	e00b      	b.n	8006426 <DMA_CheckFifoParam+0xe6>
      break;
 800640e:	bf00      	nop
 8006410:	e00a      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006412:	bf00      	nop
 8006414:	e008      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;   
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006426:	bf00      	nop
    }
  } 
  
  return status; 
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop

08006438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006438:	b480      	push	{r7}
 800643a:	b089      	sub	sp, #36	@ 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e16b      	b.n	800672c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006454:	2201      	movs	r2, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	429a      	cmp	r2, r3
 800646e:	f040 815a 	bne.w	8006726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d005      	beq.n	800648a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006486:	2b02      	cmp	r3, #2
 8006488:	d130      	bne.n	80064ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	2203      	movs	r2, #3
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c0:	2201      	movs	r2, #1
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4013      	ands	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 0201 	and.w	r2, r3, #1
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d017      	beq.n	8006528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	2203      	movs	r2, #3
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	43db      	mvns	r3, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4013      	ands	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4313      	orrs	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d123      	bne.n	800657c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	08da      	lsrs	r2, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3208      	adds	r2, #8
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	220f      	movs	r2, #15
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	08da      	lsrs	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3208      	adds	r2, #8
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2203      	movs	r2, #3
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f003 0203 	and.w	r2, r3, #3
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80b4 	beq.w	8006726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b60      	ldr	r3, [pc, #384]	@ (8006744 <HAL_GPIO_Init+0x30c>)
 80065c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c6:	4a5f      	ldr	r2, [pc, #380]	@ (8006744 <HAL_GPIO_Init+0x30c>)
 80065c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80065ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006744 <HAL_GPIO_Init+0x30c>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065da:	4a5b      	ldr	r2, [pc, #364]	@ (8006748 <HAL_GPIO_Init+0x310>)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	3302      	adds	r3, #2
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	220f      	movs	r2, #15
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a52      	ldr	r2, [pc, #328]	@ (800674c <HAL_GPIO_Init+0x314>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02b      	beq.n	800665e <HAL_GPIO_Init+0x226>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a51      	ldr	r2, [pc, #324]	@ (8006750 <HAL_GPIO_Init+0x318>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d025      	beq.n	800665a <HAL_GPIO_Init+0x222>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a50      	ldr	r2, [pc, #320]	@ (8006754 <HAL_GPIO_Init+0x31c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01f      	beq.n	8006656 <HAL_GPIO_Init+0x21e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a4f      	ldr	r2, [pc, #316]	@ (8006758 <HAL_GPIO_Init+0x320>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d019      	beq.n	8006652 <HAL_GPIO_Init+0x21a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a4e      	ldr	r2, [pc, #312]	@ (800675c <HAL_GPIO_Init+0x324>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <HAL_GPIO_Init+0x216>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a4d      	ldr	r2, [pc, #308]	@ (8006760 <HAL_GPIO_Init+0x328>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00d      	beq.n	800664a <HAL_GPIO_Init+0x212>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a4c      	ldr	r2, [pc, #304]	@ (8006764 <HAL_GPIO_Init+0x32c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_GPIO_Init+0x20e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a4b      	ldr	r2, [pc, #300]	@ (8006768 <HAL_GPIO_Init+0x330>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_GPIO_Init+0x20a>
 800663e:	2307      	movs	r3, #7
 8006640:	e00e      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006642:	2308      	movs	r3, #8
 8006644:	e00c      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006646:	2306      	movs	r3, #6
 8006648:	e00a      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800664a:	2305      	movs	r3, #5
 800664c:	e008      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800664e:	2304      	movs	r3, #4
 8006650:	e006      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006652:	2303      	movs	r3, #3
 8006654:	e004      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006656:	2302      	movs	r3, #2
 8006658:	e002      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800665e:	2300      	movs	r3, #0
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f002 0203 	and.w	r2, r2, #3
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	4093      	lsls	r3, r2
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006670:	4935      	ldr	r1, [pc, #212]	@ (8006748 <HAL_GPIO_Init+0x310>)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	089b      	lsrs	r3, r3, #2
 8006676:	3302      	adds	r3, #2
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800667e:	4b3b      	ldr	r3, [pc, #236]	@ (800676c <HAL_GPIO_Init+0x334>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066a2:	4a32      	ldr	r2, [pc, #200]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066a8:	4b30      	ldr	r3, [pc, #192]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4013      	ands	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066cc:	4a27      	ldr	r2, [pc, #156]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066d2:	4b26      	ldr	r3, [pc, #152]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066f6:	4a1d      	ldr	r2, [pc, #116]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <HAL_GPIO_Init+0x334>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006720:	4a12      	ldr	r2, [pc, #72]	@ (800676c <HAL_GPIO_Init+0x334>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	f67f ae90 	bls.w	8006454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3724      	adds	r7, #36	@ 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	40013800 	.word	0x40013800
 800674c:	40020000 	.word	0x40020000
 8006750:	40020400 	.word	0x40020400
 8006754:	40020800 	.word	0x40020800
 8006758:	40020c00 	.word	0x40020c00
 800675c:	40021000 	.word	0x40021000
 8006760:	40021400 	.word	0x40021400
 8006764:	40021800 	.word	0x40021800
 8006768:	40021c00 	.word	0x40021c00
 800676c:	40013c00 	.word	0x40013c00

08006770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
 800677c:	4613      	mov	r3, r2
 800677e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800678c:	e003      	b.n	8006796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	041a      	lsls	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	619a      	str	r2, [r3, #24]
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067ae:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ba:	4a05      	ldr	r2, [pc, #20]	@ (80067d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fb fb58 	bl	8001e78 <HAL_GPIO_EXTI_Callback>
  }
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40013c00 	.word	0x40013c00

080067d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e12b      	b.n	8006a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fd fc26 	bl	800404c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2224      	movs	r2, #36	@ 0x24
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006838:	f001 fa54 	bl	8007ce4 <HAL_RCC_GetPCLK1Freq>
 800683c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4a81      	ldr	r2, [pc, #516]	@ (8006a48 <HAL_I2C_Init+0x274>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d807      	bhi.n	8006858 <HAL_I2C_Init+0x84>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a80      	ldr	r2, [pc, #512]	@ (8006a4c <HAL_I2C_Init+0x278>)
 800684c:	4293      	cmp	r3, r2
 800684e:	bf94      	ite	ls
 8006850:	2301      	movls	r3, #1
 8006852:	2300      	movhi	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e006      	b.n	8006866 <HAL_I2C_Init+0x92>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a7d      	ldr	r2, [pc, #500]	@ (8006a50 <HAL_I2C_Init+0x27c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	bf94      	ite	ls
 8006860:	2301      	movls	r3, #1
 8006862:	2300      	movhi	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0e7      	b.n	8006a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a78      	ldr	r2, [pc, #480]	@ (8006a54 <HAL_I2C_Init+0x280>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	0c9b      	lsrs	r3, r3, #18
 8006878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a6a      	ldr	r2, [pc, #424]	@ (8006a48 <HAL_I2C_Init+0x274>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d802      	bhi.n	80068a8 <HAL_I2C_Init+0xd4>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3301      	adds	r3, #1
 80068a6:	e009      	b.n	80068bc <HAL_I2C_Init+0xe8>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	4a69      	ldr	r2, [pc, #420]	@ (8006a58 <HAL_I2C_Init+0x284>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	099b      	lsrs	r3, r3, #6
 80068ba:	3301      	adds	r3, #1
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80068ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	495c      	ldr	r1, [pc, #368]	@ (8006a48 <HAL_I2C_Init+0x274>)
 80068d8:	428b      	cmp	r3, r1
 80068da:	d819      	bhi.n	8006910 <HAL_I2C_Init+0x13c>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1e59      	subs	r1, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ea:	1c59      	adds	r1, r3, #1
 80068ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80068f0:	400b      	ands	r3, r1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_I2C_Init+0x138>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1e59      	subs	r1, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	fbb1 f3f3 	udiv	r3, r1, r3
 8006904:	3301      	adds	r3, #1
 8006906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800690a:	e051      	b.n	80069b0 <HAL_I2C_Init+0x1dc>
 800690c:	2304      	movs	r3, #4
 800690e:	e04f      	b.n	80069b0 <HAL_I2C_Init+0x1dc>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d111      	bne.n	800693c <HAL_I2C_Init+0x168>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1e58      	subs	r0, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	440b      	add	r3, r1
 8006926:	fbb0 f3f3 	udiv	r3, r0, r3
 800692a:	3301      	adds	r3, #1
 800692c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006930:	2b00      	cmp	r3, #0
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e012      	b.n	8006962 <HAL_I2C_Init+0x18e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1e58      	subs	r0, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	0099      	lsls	r1, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006952:	3301      	adds	r3, #1
 8006954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_I2C_Init+0x196>
 8006966:	2301      	movs	r3, #1
 8006968:	e022      	b.n	80069b0 <HAL_I2C_Init+0x1dc>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10e      	bne.n	8006990 <HAL_I2C_Init+0x1bc>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1e58      	subs	r0, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	440b      	add	r3, r1
 8006980:	fbb0 f3f3 	udiv	r3, r0, r3
 8006984:	3301      	adds	r3, #1
 8006986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698e:	e00f      	b.n	80069b0 <HAL_I2C_Init+0x1dc>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1e58      	subs	r0, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6859      	ldr	r1, [r3, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	0099      	lsls	r1, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069a6:	3301      	adds	r3, #1
 80069a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	6809      	ldr	r1, [r1, #0]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80069de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6911      	ldr	r1, [r2, #16]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	68d2      	ldr	r2, [r2, #12]
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	000186a0 	.word	0x000186a0
 8006a4c:	001e847f 	.word	0x001e847f
 8006a50:	003d08ff 	.word	0x003d08ff
 8006a54:	431bde83 	.word	0x431bde83
 8006a58:	10624dd3 	.word	0x10624dd3

08006a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08c      	sub	sp, #48	@ 0x30
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	813b      	strh	r3, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a76:	f7fe f957 	bl	8004d28 <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	f040 8214 	bne.w	8006eb2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2319      	movs	r3, #25
 8006a90:	2201      	movs	r2, #1
 8006a92:	497b      	ldr	r1, [pc, #492]	@ (8006c80 <HAL_I2C_Mem_Read+0x224>)
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fafb 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e207      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2C_Mem_Read+0x56>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e200      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d007      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	@ 0x22
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2240      	movs	r2, #64	@ 0x40
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a5b      	ldr	r2, [pc, #364]	@ (8006c84 <HAL_I2C_Mem_Read+0x228>)
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b1a:	88f8      	ldrh	r0, [r7, #6]
 8006b1c:	893a      	ldrh	r2, [r7, #8]
 8006b1e:	8979      	ldrh	r1, [r7, #10]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4603      	mov	r3, r0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f9c8 	bl	8006ec0 <I2C_RequestMemoryRead>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e1bc      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b42:	2300      	movs	r3, #0
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e190      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d11b      	bne.n	8006baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e170      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d11b      	bne.n	8006bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	e150      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c00:	e144      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	f200 80f1 	bhi.w	8006dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d123      	bne.n	8006c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb9b 	bl	8007354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e145      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c5a:	e117      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d14e      	bne.n	8006d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4906      	ldr	r1, [pc, #24]	@ (8006c88 <HAL_I2C_Mem_Read+0x22c>)
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fa0e 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e11a      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
 8006c7e:	bf00      	nop
 8006c80:	00100002 	.word	0x00100002
 8006c84:	ffff0000 	.word	0xffff0000
 8006c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d00:	e0c4      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	2200      	movs	r2, #0
 8006d0a:	496c      	ldr	r1, [pc, #432]	@ (8006ebc <HAL_I2C_Mem_Read+0x460>)
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f9bf 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0cb      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	2200      	movs	r2, #0
 8006d66:	4955      	ldr	r1, [pc, #340]	@ (8006ebc <HAL_I2C_Mem_Read+0x460>)
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f991 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e09d      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dec:	e04e      	b.n	8006e8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 faae 	bl	8007354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e058      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d124      	bne.n	8006e8c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d107      	bne.n	8006e5a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f47f aeb6 	bne.w	8006c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3728      	adds	r7, #40	@ 0x28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	00010004 	.word	0x00010004

08006ec0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	4608      	mov	r0, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	817b      	strh	r3, [r7, #10]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	813b      	strh	r3, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ee8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f8c2 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f20:	d103      	bne.n	8006f2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e0aa      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f2e:	897b      	ldrh	r3, [r7, #10]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	6a3a      	ldr	r2, [r7, #32]
 8006f42:	4952      	ldr	r1, [pc, #328]	@ (800708c <I2C_RequestMemoryRead+0x1cc>)
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f91d 	bl	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e097      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	6a39      	ldr	r1, [r7, #32]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f9a8 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d107      	bne.n	8006f92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e076      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d105      	bne.n	8006fa8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f9c:	893b      	ldrh	r3, [r7, #8]
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	611a      	str	r2, [r3, #16]
 8006fa6:	e021      	b.n	8006fec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fa8:	893b      	ldrh	r3, [r7, #8]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb8:	6a39      	ldr	r1, [r7, #32]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f982 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d107      	bne.n	8006fde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e050      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe2:	893b      	ldrh	r3, [r7, #8]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fee:	6a39      	ldr	r1, [r7, #32]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f967 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00d      	beq.n	8007018 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	2b04      	cmp	r3, #4
 8007002:	d107      	bne.n	8007014 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007012:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e035      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007026:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2200      	movs	r2, #0
 8007030:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f82b 	bl	8007090 <I2C_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704e:	d103      	bne.n	8007058 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e013      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800705c:	897b      	ldrh	r3, [r7, #10]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	6a3a      	ldr	r2, [r7, #32]
 8007070:	4906      	ldr	r1, [pc, #24]	@ (800708c <I2C_RequestMemoryRead+0x1cc>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f886 	bl	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	00010002 	.word	0x00010002

08007090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070a0:	e048      	b.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a8:	d044      	beq.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fd fe3d 	bl	8004d28 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d139      	bne.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10d      	bne.n	80070e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	43da      	mvns	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4013      	ands	r3, r2
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf0c      	ite	eq
 80070dc:	2301      	moveq	r3, #1
 80070de:	2300      	movne	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	e00c      	b.n	8007100 <I2C_WaitOnFlagUntilTimeout+0x70>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	43da      	mvns	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	429a      	cmp	r2, r3
 8007104:	d116      	bne.n	8007134 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e023      	b.n	800717c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10d      	bne.n	800715a <I2C_WaitOnFlagUntilTimeout+0xca>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	43da      	mvns	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	e00c      	b.n	8007174 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	43da      	mvns	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	429a      	cmp	r2, r3
 8007178:	d093      	beq.n	80070a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007192:	e071      	b.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	d123      	bne.n	80071ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d8:	f043 0204 	orr.w	r2, r3, #4
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e067      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f2:	d041      	beq.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f4:	f7fd fd98 	bl	8004d28 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d136      	bne.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10c      	bne.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	43da      	mvns	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e00b      	b.n	8007246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	43da      	mvns	r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e021      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10c      	bne.n	800729c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e00b      	b.n	80072b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4013      	ands	r3, r2
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf14      	ite	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	2300      	moveq	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f47f af6d 	bne.w	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072d0:	e034      	b.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f89b 	bl	800740e <I2C_IsAcknowledgeFailed>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e034      	b.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072e8:	d028      	beq.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fd fd1d 	bl	8004d28 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11d      	bne.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730a:	2b80      	cmp	r3, #128	@ 0x80
 800730c:	d016      	beq.n	800733c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e007      	b.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d1c3      	bne.n	80072d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007360:	e049      	b.n	80073f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b10      	cmp	r3, #16
 800736e:	d119      	bne.n	80073a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0210 	mvn.w	r2, #16
 8007378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e030      	b.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a4:	f7fd fcc0 	bl	8004d28 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d11d      	bne.n	80073f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b40      	cmp	r3, #64	@ 0x40
 80073c6:	d016      	beq.n	80073f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	f043 0220 	orr.w	r2, r3, #32
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e007      	b.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d1ae      	bne.n	8007362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007424:	d11b      	bne.n	800745e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800742e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	f043 0204 	orr.w	r2, r3, #4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e267      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d075      	beq.n	8007576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800748a:	4b88      	ldr	r3, [pc, #544]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 030c 	and.w	r3, r3, #12
 8007492:	2b04      	cmp	r3, #4
 8007494:	d00c      	beq.n	80074b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007496:	4b85      	ldr	r3, [pc, #532]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d112      	bne.n	80074c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074a2:	4b82      	ldr	r3, [pc, #520]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ae:	d10b      	bne.n	80074c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b0:	4b7e      	ldr	r3, [pc, #504]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d05b      	beq.n	8007574 <HAL_RCC_OscConfig+0x108>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d157      	bne.n	8007574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e242      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d0:	d106      	bne.n	80074e0 <HAL_RCC_OscConfig+0x74>
 80074d2:	4b76      	ldr	r3, [pc, #472]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a75      	ldr	r2, [pc, #468]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e01d      	b.n	800751c <HAL_RCC_OscConfig+0xb0>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074e8:	d10c      	bne.n	8007504 <HAL_RCC_OscConfig+0x98>
 80074ea:	4b70      	ldr	r3, [pc, #448]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a6f      	ldr	r2, [pc, #444]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4b6d      	ldr	r3, [pc, #436]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a6c      	ldr	r2, [pc, #432]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e00b      	b.n	800751c <HAL_RCC_OscConfig+0xb0>
 8007504:	4b69      	ldr	r3, [pc, #420]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a68      	ldr	r2, [pc, #416]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 800750a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4b66      	ldr	r3, [pc, #408]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a65      	ldr	r2, [pc, #404]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800751a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007524:	f7fd fc00 	bl	8004d28 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800752c:	f7fd fbfc 	bl	8004d28 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b64      	cmp	r3, #100	@ 0x64
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e207      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753e:	4b5b      	ldr	r3, [pc, #364]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0xc0>
 800754a:	e014      	b.n	8007576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754c:	f7fd fbec 	bl	8004d28 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007554:	f7fd fbe8 	bl	8004d28 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b64      	cmp	r3, #100	@ 0x64
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e1f3      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007566:	4b51      	ldr	r3, [pc, #324]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f0      	bne.n	8007554 <HAL_RCC_OscConfig+0xe8>
 8007572:	e000      	b.n	8007576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d063      	beq.n	800764a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007582:	4b4a      	ldr	r3, [pc, #296]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758e:	4b47      	ldr	r3, [pc, #284]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007596:	2b08      	cmp	r3, #8
 8007598:	d11c      	bne.n	80075d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800759a:	4b44      	ldr	r3, [pc, #272]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d116      	bne.n	80075d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a6:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_RCC_OscConfig+0x152>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d001      	beq.n	80075be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e1c7      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075be:	4b3b      	ldr	r3, [pc, #236]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4937      	ldr	r1, [pc, #220]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075d2:	e03a      	b.n	800764a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075dc:	4b34      	ldr	r3, [pc, #208]	@ (80076b0 <HAL_RCC_OscConfig+0x244>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e2:	f7fd fba1 	bl	8004d28 <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075ea:	f7fd fb9d 	bl	8004d28 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e1a8      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075fc:	4b2b      	ldr	r3, [pc, #172]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007608:	4b28      	ldr	r3, [pc, #160]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4925      	ldr	r1, [pc, #148]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007618:	4313      	orrs	r3, r2
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	e015      	b.n	800764a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761e:	4b24      	ldr	r3, [pc, #144]	@ (80076b0 <HAL_RCC_OscConfig+0x244>)
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fd fb80 	bl	8004d28 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800762c:	f7fd fb7c 	bl	8004d28 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e187      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d036      	beq.n	80076c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <HAL_RCC_OscConfig+0x248>)
 8007660:	2201      	movs	r2, #1
 8007662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007664:	f7fd fb60 	bl	8004d28 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800766c:	f7fd fb5c 	bl	8004d28 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e167      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767e:	4b0b      	ldr	r3, [pc, #44]	@ (80076ac <HAL_RCC_OscConfig+0x240>)
 8007680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0x200>
 800768a:	e01b      	b.n	80076c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800768c:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <HAL_RCC_OscConfig+0x248>)
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007692:	f7fd fb49 	bl	8004d28 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007698:	e00e      	b.n	80076b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800769a:	f7fd fb45 	bl	8004d28 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d907      	bls.n	80076b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e150      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	42470000 	.word	0x42470000
 80076b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b8:	4b88      	ldr	r3, [pc, #544]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80076ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1ea      	bne.n	800769a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8097 	beq.w	8007800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d6:	4b81      	ldr	r3, [pc, #516]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10f      	bne.n	8007702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
 80076e6:	4b7d      	ldr	r3, [pc, #500]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	4a7c      	ldr	r2, [pc, #496]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80076ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076f2:	4b7a      	ldr	r3, [pc, #488]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076fe:	2301      	movs	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007702:	4b77      	ldr	r3, [pc, #476]	@ (80078e0 <HAL_RCC_OscConfig+0x474>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770a:	2b00      	cmp	r3, #0
 800770c:	d118      	bne.n	8007740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800770e:	4b74      	ldr	r3, [pc, #464]	@ (80078e0 <HAL_RCC_OscConfig+0x474>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a73      	ldr	r2, [pc, #460]	@ (80078e0 <HAL_RCC_OscConfig+0x474>)
 8007714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800771a:	f7fd fb05 	bl	8004d28 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007722:	f7fd fb01 	bl	8004d28 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e10c      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007734:	4b6a      	ldr	r3, [pc, #424]	@ (80078e0 <HAL_RCC_OscConfig+0x474>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f0      	beq.n	8007722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d106      	bne.n	8007756 <HAL_RCC_OscConfig+0x2ea>
 8007748:	4b64      	ldr	r3, [pc, #400]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800774a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774c:	4a63      	ldr	r2, [pc, #396]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	6713      	str	r3, [r2, #112]	@ 0x70
 8007754:	e01c      	b.n	8007790 <HAL_RCC_OscConfig+0x324>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b05      	cmp	r3, #5
 800775c:	d10c      	bne.n	8007778 <HAL_RCC_OscConfig+0x30c>
 800775e:	4b5f      	ldr	r3, [pc, #380]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	4a5e      	ldr	r2, [pc, #376]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007764:	f043 0304 	orr.w	r3, r3, #4
 8007768:	6713      	str	r3, [r2, #112]	@ 0x70
 800776a:	4b5c      	ldr	r3, [pc, #368]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776e:	4a5b      	ldr	r2, [pc, #364]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6713      	str	r3, [r2, #112]	@ 0x70
 8007776:	e00b      	b.n	8007790 <HAL_RCC_OscConfig+0x324>
 8007778:	4b58      	ldr	r3, [pc, #352]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800777a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777c:	4a57      	ldr	r2, [pc, #348]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	6713      	str	r3, [r2, #112]	@ 0x70
 8007784:	4b55      	ldr	r3, [pc, #340]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007788:	4a54      	ldr	r2, [pc, #336]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800778a:	f023 0304 	bic.w	r3, r3, #4
 800778e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d015      	beq.n	80077c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007798:	f7fd fac6 	bl	8004d28 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779e:	e00a      	b.n	80077b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077a0:	f7fd fac2 	bl	8004d28 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e0cb      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b6:	4b49      	ldr	r3, [pc, #292]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0ee      	beq.n	80077a0 <HAL_RCC_OscConfig+0x334>
 80077c2:	e014      	b.n	80077ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c4:	f7fd fab0 	bl	8004d28 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ca:	e00a      	b.n	80077e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077cc:	f7fd faac 	bl	8004d28 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e0b5      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077e2:	4b3e      	ldr	r3, [pc, #248]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80077e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ee      	bne.n	80077cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d105      	bne.n	8007800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f4:	4b39      	ldr	r3, [pc, #228]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	4a38      	ldr	r2, [pc, #224]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80077fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80a1 	beq.w	800794c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800780a:	4b34      	ldr	r3, [pc, #208]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
 8007812:	2b08      	cmp	r3, #8
 8007814:	d05c      	beq.n	80078d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d141      	bne.n	80078a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781e:	4b31      	ldr	r3, [pc, #196]	@ (80078e4 <HAL_RCC_OscConfig+0x478>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007824:	f7fd fa80 	bl	8004d28 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800782c:	f7fd fa7c 	bl	8004d28 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e087      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783e:	4b27      	ldr	r3, [pc, #156]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007858:	019b      	lsls	r3, r3, #6
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	3b01      	subs	r3, #1
 8007864:	041b      	lsls	r3, r3, #16
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	491b      	ldr	r1, [pc, #108]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007874:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <HAL_RCC_OscConfig+0x478>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787a:	f7fd fa55 	bl	8004d28 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007882:	f7fd fa51 	bl	8004d28 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e05c      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007894:	4b11      	ldr	r3, [pc, #68]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <HAL_RCC_OscConfig+0x416>
 80078a0:	e054      	b.n	800794c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <HAL_RCC_OscConfig+0x478>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a8:	f7fd fa3e 	bl	8004d28 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fd fa3a 	bl	8004d28 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e045      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_OscConfig+0x470>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x444>
 80078ce:	e03d      	b.n	800794c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d107      	bne.n	80078e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e038      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
 80078dc:	40023800 	.word	0x40023800
 80078e0:	40007000 	.word	0x40007000
 80078e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007958 <HAL_RCC_OscConfig+0x4ec>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d028      	beq.n	8007948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007900:	429a      	cmp	r2, r3
 8007902:	d121      	bne.n	8007948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790e:	429a      	cmp	r2, r3
 8007910:	d11a      	bne.n	8007948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007918:	4013      	ands	r3, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800791e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007920:	4293      	cmp	r3, r2
 8007922:	d111      	bne.n	8007948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	3b01      	subs	r3, #1
 8007932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007934:	429a      	cmp	r2, r3
 8007936:	d107      	bne.n	8007948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007944:	429a      	cmp	r2, r3
 8007946:	d001      	beq.n	800794c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	40023800 	.word	0x40023800

0800795c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0cc      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007970:	4b68      	ldr	r3, [pc, #416]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d90c      	bls.n	8007998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797e:	4b65      	ldr	r3, [pc, #404]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007986:	4b63      	ldr	r3, [pc, #396]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d001      	beq.n	8007998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e0b8      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079b0:	4b59      	ldr	r3, [pc, #356]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	4a58      	ldr	r2, [pc, #352]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079c8:	4b53      	ldr	r3, [pc, #332]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	4a52      	ldr	r2, [pc, #328]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d4:	4b50      	ldr	r3, [pc, #320]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	494d      	ldr	r1, [pc, #308]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d044      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d107      	bne.n	8007a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079fa:	4b47      	ldr	r3, [pc, #284]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d119      	bne.n	8007a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e07f      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d003      	beq.n	8007a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d107      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e06f      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e067      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a3a:	4b37      	ldr	r3, [pc, #220]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f023 0203 	bic.w	r2, r3, #3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4934      	ldr	r1, [pc, #208]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a4c:	f7fd f96c 	bl	8004d28 <HAL_GetTick>
 8007a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a52:	e00a      	b.n	8007a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a54:	f7fd f968 	bl	8004d28 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e04f      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 020c 	and.w	r2, r3, #12
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d1eb      	bne.n	8007a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a7c:	4b25      	ldr	r3, [pc, #148]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d20c      	bcs.n	8007aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8a:	4b22      	ldr	r3, [pc, #136]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a92:	4b20      	ldr	r3, [pc, #128]	@ (8007b14 <HAL_RCC_ClockConfig+0x1b8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d001      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e032      	b.n	8007b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d008      	beq.n	8007ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ab0:	4b19      	ldr	r3, [pc, #100]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4916      	ldr	r1, [pc, #88]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ace:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	490e      	ldr	r1, [pc, #56]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ae2:	f000 f82d 	bl	8007b40 <HAL_RCC_GetSysClockFreq>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <HAL_RCC_ClockConfig+0x1bc>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	091b      	lsrs	r3, r3, #4
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	490a      	ldr	r1, [pc, #40]	@ (8007b1c <HAL_RCC_ClockConfig+0x1c0>)
 8007af4:	5ccb      	ldrb	r3, [r1, r3]
 8007af6:	fa22 f303 	lsr.w	r3, r2, r3
 8007afa:	4a09      	ldr	r2, [pc, #36]	@ (8007b20 <HAL_RCC_ClockConfig+0x1c4>)
 8007afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007afe:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <HAL_RCC_ClockConfig+0x1c8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd f8cc 	bl	8004ca0 <HAL_InitTick>

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40023c00 	.word	0x40023c00
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	0800e3a8 	.word	0x0800e3a8
 8007b20:	2000001c 	.word	0x2000001c
 8007b24:	20000020 	.word	0x20000020

08007b28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007b2c:	4b03      	ldr	r3, [pc, #12]	@ (8007b3c <HAL_RCC_EnableCSS+0x14>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
}
 8007b32:	bf00      	nop
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	4247004c 	.word	0x4247004c

08007b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b44:	b090      	sub	sp, #64	@ 0x40
 8007b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b50:	2300      	movs	r3, #0
 8007b52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b58:	4b59      	ldr	r3, [pc, #356]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 030c 	and.w	r3, r3, #12
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d00d      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x40>
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	f200 80a1 	bhi.w	8007cac <HAL_RCC_GetSysClockFreq+0x16c>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_RCC_GetSysClockFreq+0x34>
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d003      	beq.n	8007b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8007b72:	e09b      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b74:	4b53      	ldr	r3, [pc, #332]	@ (8007cc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b76:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007b78:	e09b      	b.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b7a:	4b53      	ldr	r3, [pc, #332]	@ (8007cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b7e:	e098      	b.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b80:	4b4f      	ldr	r3, [pc, #316]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d028      	beq.n	8007be8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b96:	4b4a      	ldr	r3, [pc, #296]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	099b      	lsrs	r3, r3, #6
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	623b      	str	r3, [r7, #32]
 8007ba0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ba8:	2100      	movs	r1, #0
 8007baa:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bac:	fb03 f201 	mul.w	r2, r3, r1
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	fb00 f303 	mul.w	r3, r0, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	4a43      	ldr	r2, [pc, #268]	@ (8007cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bba:	fba0 1202 	umull	r1, r2, r0, r2
 8007bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc6:	4413      	add	r3, r2
 8007bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bcc:	2200      	movs	r2, #0
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	61fa      	str	r2, [r7, #28]
 8007bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007bda:	f7f8 ff97 	bl	8000b0c <__aeabi_uldivmod>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4613      	mov	r3, r2
 8007be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007be6:	e053      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007be8:	4b35      	ldr	r3, [pc, #212]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	099b      	lsrs	r3, r3, #6
 8007bee:	2200      	movs	r2, #0
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	617a      	str	r2, [r7, #20]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bfa:	f04f 0b00 	mov.w	fp, #0
 8007bfe:	4652      	mov	r2, sl
 8007c00:	465b      	mov	r3, fp
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f04f 0100 	mov.w	r1, #0
 8007c0a:	0159      	lsls	r1, r3, #5
 8007c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c10:	0150      	lsls	r0, r2, #5
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	ebb2 080a 	subs.w	r8, r2, sl
 8007c1a:	eb63 090b 	sbc.w	r9, r3, fp
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c32:	ebb2 0408 	subs.w	r4, r2, r8
 8007c36:	eb63 0509 	sbc.w	r5, r3, r9
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	00eb      	lsls	r3, r5, #3
 8007c44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c48:	00e2      	lsls	r2, r4, #3
 8007c4a:	4614      	mov	r4, r2
 8007c4c:	461d      	mov	r5, r3
 8007c4e:	eb14 030a 	adds.w	r3, r4, sl
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	eb45 030b 	adc.w	r3, r5, fp
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c66:	4629      	mov	r1, r5
 8007c68:	028b      	lsls	r3, r1, #10
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c70:	4621      	mov	r1, r4
 8007c72:	028a      	lsls	r2, r1, #10
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
 8007c7e:	60fa      	str	r2, [r7, #12]
 8007c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c84:	f7f8 ff42 	bl	8000b0c <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c90:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007ca0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007caa:	e002      	b.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cac:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3740      	adds	r7, #64	@ 0x40
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	00f42400 	.word	0x00f42400
 8007cc8:	00b71b00 	.word	0x00b71b00

08007ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cd0:	4b03      	ldr	r3, [pc, #12]	@ (8007ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000001c 	.word	0x2000001c

08007ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ce8:	f7ff fff0 	bl	8007ccc <HAL_RCC_GetHCLKFreq>
 8007cec:	4602      	mov	r2, r0
 8007cee:	4b05      	ldr	r3, [pc, #20]	@ (8007d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	0a9b      	lsrs	r3, r3, #10
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	4903      	ldr	r1, [pc, #12]	@ (8007d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cfa:	5ccb      	ldrb	r3, [r1, r3]
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40023800 	.word	0x40023800
 8007d08:	0800e3b8 	.word	0x0800e3b8

08007d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d10:	f7ff ffdc 	bl	8007ccc <HAL_RCC_GetHCLKFreq>
 8007d14:	4602      	mov	r2, r0
 8007d16:	4b05      	ldr	r3, [pc, #20]	@ (8007d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	0b5b      	lsrs	r3, r3, #13
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	4903      	ldr	r1, [pc, #12]	@ (8007d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d22:	5ccb      	ldrb	r3, [r1, r3]
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	0800e3b8 	.word	0x0800e3b8

08007d34 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d40:	2b80      	cmp	r3, #128	@ 0x80
 8007d42:	d104      	bne.n	8007d4e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007d44:	f000 f80a 	bl	8007d5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007d48:	4b03      	ldr	r3, [pc, #12]	@ (8007d58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007d4a:	2280      	movs	r2, #128	@ 0x80
 8007d4c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40023800 	.word	0x40023800
 8007d58:	4002380e 	.word	0x4002380e

08007d5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e07b      	b.n	8007e74 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d8c:	d009      	beq.n	8007da2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	61da      	str	r2, [r3, #28]
 8007d94:	e005      	b.n	8007da2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fc f9af 	bl	8004120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e26:	ea42 0103 	orr.w	r1, r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	f003 0104 	and.w	r1, r3, #4
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	f003 0210 	and.w	r2, r3, #16
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69da      	ldr	r2, [r3, #28]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08c      	sub	sp, #48	@ 0x30
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_TransmitReceive+0x26>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e198      	b.n	80081d4 <HAL_SPI_TransmitReceive+0x358>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eaa:	f7fc ff3d 	bl	8004d28 <HAL_GetTick>
 8007eae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ec0:	887b      	ldrh	r3, [r7, #2]
 8007ec2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d00f      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x70>
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed2:	d107      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d103      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x68>
 8007edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d003      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007eea:	e16d      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x82>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x82>
 8007ef8:	887b      	ldrh	r3, [r7, #2]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007f04:	e160      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d003      	beq.n	8007f1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2205      	movs	r2, #5
 8007f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	887a      	ldrh	r2, [r7, #2]
 8007f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	887a      	ldrh	r2, [r7, #2]
 8007f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	887a      	ldrh	r2, [r7, #2]
 8007f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	887a      	ldrh	r2, [r7, #2]
 8007f42:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b40      	cmp	r3, #64	@ 0x40
 8007f5c:	d007      	beq.n	8007f6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f76:	d17c      	bne.n	8008072 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x10a>
 8007f80:	8b7b      	ldrh	r3, [r7, #26]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d16a      	bne.n	800805c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8a:	881a      	ldrh	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007faa:	e057      	b.n	800805c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d11b      	bne.n	8007ff2 <HAL_SPI_TransmitReceive+0x176>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d016      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x176>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d113      	bne.n	8007ff2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	881a      	ldrh	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fda:	1c9a      	adds	r2, r3, #2
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d119      	bne.n	8008034 <HAL_SPI_TransmitReceive+0x1b8>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d014      	beq.n	8008034 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008014:	b292      	uxth	r2, r2
 8008016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008030:	2301      	movs	r3, #1
 8008032:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008034:	f7fc fe78 	bl	8004d28 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008040:	429a      	cmp	r2, r3
 8008042:	d80b      	bhi.n	800805c <HAL_SPI_TransmitReceive+0x1e0>
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800804a:	d007      	beq.n	800805c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800805a:	e0b5      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1a2      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x130>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d19d      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x130>
 8008070:	e080      	b.n	8008174 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x204>
 800807a:	8b7b      	ldrh	r3, [r7, #26]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d16f      	bne.n	8008160 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080a6:	e05b      	b.n	8008160 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d11c      	bne.n	80080f0 <HAL_SPI_TransmitReceive+0x274>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d017      	beq.n	80080f0 <HAL_SPI_TransmitReceive+0x274>
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d114      	bne.n	80080f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d119      	bne.n	8008132 <HAL_SPI_TransmitReceive+0x2b6>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d014      	beq.n	8008132 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	b2d2      	uxtb	r2, r2
 8008114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800812e:	2301      	movs	r3, #1
 8008130:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008132:	f7fc fdf9 	bl	8004d28 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800813e:	429a      	cmp	r2, r3
 8008140:	d803      	bhi.n	800814a <HAL_SPI_TransmitReceive+0x2ce>
 8008142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008148:	d102      	bne.n	8008150 <HAL_SPI_TransmitReceive+0x2d4>
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	d107      	bne.n	8008160 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800815e:	e033      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d19e      	bne.n	80080a8 <HAL_SPI_TransmitReceive+0x22c>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d199      	bne.n	80080a8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f8b7 	bl	80082ec <SPI_EndRxTxTransaction>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d006      	beq.n	8008192 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2220      	movs	r2, #32
 800818e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008190:	e01a      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081be:	e003      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80081d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3730      	adds	r7, #48	@ 0x30
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081ec:	f7fc fd9c 	bl	8004d28 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4413      	add	r3, r2
 80081fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081fc:	f7fc fd94 	bl	8004d28 <HAL_GetTick>
 8008200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008202:	4b39      	ldr	r3, [pc, #228]	@ (80082e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	015b      	lsls	r3, r3, #5
 8008208:	0d1b      	lsrs	r3, r3, #20
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008212:	e054      	b.n	80082be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800821a:	d050      	beq.n	80082be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800821c:	f7fc fd84 	bl	8004d28 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	429a      	cmp	r2, r3
 800822a:	d902      	bls.n	8008232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d13d      	bne.n	80082ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800824a:	d111      	bne.n	8008270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008254:	d004      	beq.n	8008260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825e:	d107      	bne.n	8008270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800826e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008278:	d10f      	bne.n	800829a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e017      	b.n	80082de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	bf0c      	ite	eq
 80082ce:	2301      	moveq	r3, #1
 80082d0:	2300      	movne	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d19b      	bne.n	8008214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	2000001c 	.word	0x2000001c

080082ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2201      	movs	r2, #1
 8008300:	2102      	movs	r1, #2
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff6a 	bl	80081dc <SPI_WaitFlagStateUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008312:	f043 0220 	orr.w	r2, r3, #32
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e032      	b.n	8008384 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800831e:	4b1b      	ldr	r3, [pc, #108]	@ (800838c <SPI_EndRxTxTransaction+0xa0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1b      	ldr	r2, [pc, #108]	@ (8008390 <SPI_EndRxTxTransaction+0xa4>)
 8008324:	fba2 2303 	umull	r2, r3, r2, r3
 8008328:	0d5b      	lsrs	r3, r3, #21
 800832a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800832e:	fb02 f303 	mul.w	r3, r2, r3
 8008332:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800833c:	d112      	bne.n	8008364 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	2180      	movs	r1, #128	@ 0x80
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff ff47 	bl	80081dc <SPI_WaitFlagStateUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d016      	beq.n	8008382 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	f043 0220 	orr.w	r2, r3, #32
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e00f      	b.n	8008384 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	3b01      	subs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837a:	2b80      	cmp	r3, #128	@ 0x80
 800837c:	d0f2      	beq.n	8008364 <SPI_EndRxTxTransaction+0x78>
 800837e:	e000      	b.n	8008382 <SPI_EndRxTxTransaction+0x96>
        break;
 8008380:	bf00      	nop
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	2000001c 	.word	0x2000001c
 8008390:	165e9f81 	.word	0x165e9f81

08008394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e041      	b.n	800842a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fb ffcc 	bl	8004358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f000 fba8 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e046      	b.n	80084da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a23      	ldr	r2, [pc, #140]	@ (80084e8 <HAL_TIM_Base_Start+0xb4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d022      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008466:	d01d      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1f      	ldr	r2, [pc, #124]	@ (80084ec <HAL_TIM_Base_Start+0xb8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d018      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1e      	ldr	r2, [pc, #120]	@ (80084f0 <HAL_TIM_Base_Start+0xbc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <HAL_TIM_Base_Start+0xc0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00e      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1b      	ldr	r2, [pc, #108]	@ (80084f8 <HAL_TIM_Base_Start+0xc4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d009      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a19      	ldr	r2, [pc, #100]	@ (80084fc <HAL_TIM_Base_Start+0xc8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_TIM_Base_Start+0x70>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a18      	ldr	r2, [pc, #96]	@ (8008500 <HAL_TIM_Base_Start+0xcc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d111      	bne.n	80084c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b06      	cmp	r3, #6
 80084b4:	d010      	beq.n	80084d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0201 	orr.w	r2, r2, #1
 80084c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c6:	e007      	b.n	80084d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0201 	orr.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40001800 	.word	0x40001800

08008504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e041      	b.n	800859a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fb fe60 	bl	80041f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f000 faf0 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d109      	bne.n	80085c8 <HAL_TIM_PWM_Start+0x24>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e022      	b.n	800860e <HAL_TIM_PWM_Start+0x6a>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d109      	bne.n	80085e2 <HAL_TIM_PWM_Start+0x3e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	bf14      	ite	ne
 80085da:	2301      	movne	r3, #1
 80085dc:	2300      	moveq	r3, #0
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	e015      	b.n	800860e <HAL_TIM_PWM_Start+0x6a>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d109      	bne.n	80085fc <HAL_TIM_PWM_Start+0x58>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	bf14      	ite	ne
 80085f4:	2301      	movne	r3, #1
 80085f6:	2300      	moveq	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	e008      	b.n	800860e <HAL_TIM_PWM_Start+0x6a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e07c      	b.n	8008710 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <HAL_TIM_PWM_Start+0x82>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008624:	e013      	b.n	800864e <HAL_TIM_PWM_Start+0xaa>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d104      	bne.n	8008636 <HAL_TIM_PWM_Start+0x92>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008634:	e00b      	b.n	800864e <HAL_TIM_PWM_Start+0xaa>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b08      	cmp	r3, #8
 800863a:	d104      	bne.n	8008646 <HAL_TIM_PWM_Start+0xa2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008644:	e003      	b.n	800864e <HAL_TIM_PWM_Start+0xaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2201      	movs	r2, #1
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fd5c 	bl	8009114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a2d      	ldr	r2, [pc, #180]	@ (8008718 <HAL_TIM_PWM_Start+0x174>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <HAL_TIM_PWM_Start+0xcc>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a2c      	ldr	r2, [pc, #176]	@ (800871c <HAL_TIM_PWM_Start+0x178>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d101      	bne.n	8008674 <HAL_TIM_PWM_Start+0xd0>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <HAL_TIM_PWM_Start+0xd2>
 8008674:	2300      	movs	r3, #0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a22      	ldr	r2, [pc, #136]	@ (8008718 <HAL_TIM_PWM_Start+0x174>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d022      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869c:	d01d      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008720 <HAL_TIM_PWM_Start+0x17c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d018      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008724 <HAL_TIM_PWM_Start+0x180>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008728 <HAL_TIM_PWM_Start+0x184>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00e      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a16      	ldr	r2, [pc, #88]	@ (800871c <HAL_TIM_PWM_Start+0x178>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d009      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a18      	ldr	r2, [pc, #96]	@ (800872c <HAL_TIM_PWM_Start+0x188>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d004      	beq.n	80086da <HAL_TIM_PWM_Start+0x136>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a16      	ldr	r2, [pc, #88]	@ (8008730 <HAL_TIM_PWM_Start+0x18c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d111      	bne.n	80086fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b06      	cmp	r3, #6
 80086ea:	d010      	beq.n	800870e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fc:	e007      	b.n	800870e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	40010000 	.word	0x40010000
 800871c:	40010400 	.word	0x40010400
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40014000 	.word	0x40014000
 8008730:	40001800 	.word	0x40001800

08008734 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fce4 	bl	8009114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2e      	ldr	r2, [pc, #184]	@ (800880c <HAL_TIM_PWM_Stop+0xd8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIM_PWM_Stop+0x2c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2d      	ldr	r2, [pc, #180]	@ (8008810 <HAL_TIM_PWM_Stop+0xdc>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d101      	bne.n	8008764 <HAL_TIM_PWM_Stop+0x30>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <HAL_TIM_PWM_Stop+0x32>
 8008764:	2300      	movs	r3, #0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6a1a      	ldr	r2, [r3, #32]
 8008770:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008774:	4013      	ands	r3, r2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10f      	bne.n	800879a <HAL_TIM_PWM_Stop+0x66>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	f240 4344 	movw	r3, #1092	@ 0x444
 8008784:	4013      	ands	r3, r2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d107      	bne.n	800879a <HAL_TIM_PWM_Stop+0x66>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80087a4:	4013      	ands	r3, r2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <HAL_TIM_PWM_Stop+0x96>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a1a      	ldr	r2, [r3, #32]
 80087b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d107      	bne.n	80087ca <HAL_TIM_PWM_Stop+0x96>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0201 	bic.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <HAL_TIM_PWM_Stop+0xa6>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087d8:	e013      	b.n	8008802 <HAL_TIM_PWM_Stop+0xce>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d104      	bne.n	80087ea <HAL_TIM_PWM_Stop+0xb6>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087e8:	e00b      	b.n	8008802 <HAL_TIM_PWM_Stop+0xce>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d104      	bne.n	80087fa <HAL_TIM_PWM_Stop+0xc6>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087f8:	e003      	b.n	8008802 <HAL_TIM_PWM_Stop+0xce>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40010000 	.word	0x40010000
 8008810:	40010400 	.word	0x40010400

08008814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800882e:	2302      	movs	r3, #2
 8008830:	e0ae      	b.n	8008990 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b0c      	cmp	r3, #12
 800883e:	f200 809f 	bhi.w	8008980 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008842:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	0800887d 	.word	0x0800887d
 800884c:	08008981 	.word	0x08008981
 8008850:	08008981 	.word	0x08008981
 8008854:	08008981 	.word	0x08008981
 8008858:	080088bd 	.word	0x080088bd
 800885c:	08008981 	.word	0x08008981
 8008860:	08008981 	.word	0x08008981
 8008864:	08008981 	.word	0x08008981
 8008868:	080088ff 	.word	0x080088ff
 800886c:	08008981 	.word	0x08008981
 8008870:	08008981 	.word	0x08008981
 8008874:	08008981 	.word	0x08008981
 8008878:	0800893f 	.word	0x0800893f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f9fc 	bl	8008c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0208 	orr.w	r2, r2, #8
 8008896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6999      	ldr	r1, [r3, #24]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	619a      	str	r2, [r3, #24]
      break;
 80088ba:	e064      	b.n	8008986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fa4c 	bl	8008d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	021a      	lsls	r2, r3, #8
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	619a      	str	r2, [r3, #24]
      break;
 80088fc:	e043      	b.n	8008986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 faa1 	bl	8008e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0208 	orr.w	r2, r2, #8
 8008918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0204 	bic.w	r2, r2, #4
 8008928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69d9      	ldr	r1, [r3, #28]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	61da      	str	r2, [r3, #28]
      break;
 800893c:	e023      	b.n	8008986 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 faf5 	bl	8008f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69d9      	ldr	r1, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	021a      	lsls	r2, r3, #8
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	61da      	str	r2, [r3, #28]
      break;
 800897e:	e002      	b.n	8008986 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
      break;
 8008984:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800898e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_TIM_ConfigClockSource+0x1c>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e0b4      	b.n	8008b1e <HAL_TIM_ConfigClockSource+0x186>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089ec:	d03e      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0xd4>
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f2:	f200 8087 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fa:	f000 8086 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x172>
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a02:	d87f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a04:	2b70      	cmp	r3, #112	@ 0x70
 8008a06:	d01a      	beq.n	8008a3e <HAL_TIM_ConfigClockSource+0xa6>
 8008a08:	2b70      	cmp	r3, #112	@ 0x70
 8008a0a:	d87b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a0c:	2b60      	cmp	r3, #96	@ 0x60
 8008a0e:	d050      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8008a10:	2b60      	cmp	r3, #96	@ 0x60
 8008a12:	d877      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a14:	2b50      	cmp	r3, #80	@ 0x50
 8008a16:	d03c      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0xfa>
 8008a18:	2b50      	cmp	r3, #80	@ 0x50
 8008a1a:	d873      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a1c:	2b40      	cmp	r3, #64	@ 0x40
 8008a1e:	d058      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8008a20:	2b40      	cmp	r3, #64	@ 0x40
 8008a22:	d86f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a24:	2b30      	cmp	r3, #48	@ 0x30
 8008a26:	d064      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a28:	2b30      	cmp	r3, #48	@ 0x30
 8008a2a:	d86b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d060      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d867      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d05c      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d05a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a3c:	e062      	b.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4e:	f000 fb41 	bl	80090d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	609a      	str	r2, [r3, #8]
      break;
 8008a6a:	e04f      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a7c:	f000 fb2a 	bl	80090d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a8e:	609a      	str	r2, [r3, #8]
      break;
 8008a90:	e03c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f000 fa9e 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2150      	movs	r1, #80	@ 0x50
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 faf7 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008ab0:	e02c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 fabd 	bl	800903e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2160      	movs	r1, #96	@ 0x60
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fae7 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e01c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 fa7e 	bl	8008fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2140      	movs	r1, #64	@ 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fad7 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008af0:	e00c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f000 face 	bl	800909e <TIM_ITRx_SetConfig>
      break;
 8008b02:	e003      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
      break;
 8008b08:	e000      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a46      	ldr	r2, [pc, #280]	@ (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b46:	d00f      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a43      	ldr	r2, [pc, #268]	@ (8008c58 <TIM_Base_SetConfig+0x130>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a42      	ldr	r2, [pc, #264]	@ (8008c5c <TIM_Base_SetConfig+0x134>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a41      	ldr	r2, [pc, #260]	@ (8008c60 <TIM_Base_SetConfig+0x138>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a40      	ldr	r2, [pc, #256]	@ (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d108      	bne.n	8008b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a35      	ldr	r2, [pc, #212]	@ (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d02b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b88:	d027      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a32      	ldr	r2, [pc, #200]	@ (8008c58 <TIM_Base_SetConfig+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d023      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a31      	ldr	r2, [pc, #196]	@ (8008c5c <TIM_Base_SetConfig+0x134>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a30      	ldr	r2, [pc, #192]	@ (8008c60 <TIM_Base_SetConfig+0x138>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d01b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d017      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a2e      	ldr	r2, [pc, #184]	@ (8008c68 <TIM_Base_SetConfig+0x140>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c6c <TIM_Base_SetConfig+0x144>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c70 <TIM_Base_SetConfig+0x148>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c74 <TIM_Base_SetConfig+0x14c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c78 <TIM_Base_SetConfig+0x150>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a29      	ldr	r2, [pc, #164]	@ (8008c7c <TIM_Base_SetConfig+0x154>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d108      	bne.n	8008bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a10      	ldr	r2, [pc, #64]	@ (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0xf8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a12      	ldr	r2, [pc, #72]	@ (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d103      	bne.n	8008c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d105      	bne.n	8008c46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]
  }
}
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800
 8008c60:	40000c00 	.word	0x40000c00
 8008c64:	40010400 	.word	0x40010400
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400
 8008c70:	40014800 	.word	0x40014800
 8008c74:	40001800 	.word	0x40001800
 8008c78:	40001c00 	.word	0x40001c00
 8008c7c:	40002000 	.word	0x40002000

08008c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	f023 0201 	bic.w	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0303 	bic.w	r3, r3, #3
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f023 0302 	bic.w	r3, r3, #2
 8008cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a20      	ldr	r2, [pc, #128]	@ (8008d58 <TIM_OC1_SetConfig+0xd8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <TIM_OC1_SetConfig+0x64>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <TIM_OC1_SetConfig+0xdc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d10c      	bne.n	8008cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f023 0308 	bic.w	r3, r3, #8
 8008cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 0304 	bic.w	r3, r3, #4
 8008cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a15      	ldr	r2, [pc, #84]	@ (8008d58 <TIM_OC1_SetConfig+0xd8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_OC1_SetConfig+0x8e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a14      	ldr	r2, [pc, #80]	@ (8008d5c <TIM_OC1_SetConfig+0xdc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d111      	bne.n	8008d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	621a      	str	r2, [r3, #32]
}
 8008d4c:	bf00      	nop
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40010400 	.word	0x40010400

08008d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 0210 	bic.w	r2, r3, #16
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f023 0320 	bic.w	r3, r3, #32
 8008daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a22      	ldr	r2, [pc, #136]	@ (8008e44 <TIM_OC2_SetConfig+0xe4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d003      	beq.n	8008dc8 <TIM_OC2_SetConfig+0x68>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a21      	ldr	r2, [pc, #132]	@ (8008e48 <TIM_OC2_SetConfig+0xe8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d10d      	bne.n	8008de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a17      	ldr	r2, [pc, #92]	@ (8008e44 <TIM_OC2_SetConfig+0xe4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC2_SetConfig+0x94>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a16      	ldr	r2, [pc, #88]	@ (8008e48 <TIM_OC2_SetConfig+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d113      	bne.n	8008e1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	40010000 	.word	0x40010000
 8008e48:	40010400 	.word	0x40010400

08008e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a21      	ldr	r2, [pc, #132]	@ (8008f2c <TIM_OC3_SetConfig+0xe0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_OC3_SetConfig+0x66>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a20      	ldr	r2, [pc, #128]	@ (8008f30 <TIM_OC3_SetConfig+0xe4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d10d      	bne.n	8008ece <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a16      	ldr	r2, [pc, #88]	@ (8008f2c <TIM_OC3_SetConfig+0xe0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_OC3_SetConfig+0x92>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a15      	ldr	r2, [pc, #84]	@ (8008f30 <TIM_OC3_SetConfig+0xe4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d113      	bne.n	8008f06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	621a      	str	r2, [r3, #32]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40010400 	.word	0x40010400

08008f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	031b      	lsls	r3, r3, #12
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a12      	ldr	r2, [pc, #72]	@ (8008fd8 <TIM_OC4_SetConfig+0xa4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_OC4_SetConfig+0x68>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a11      	ldr	r2, [pc, #68]	@ (8008fdc <TIM_OC4_SetConfig+0xa8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d109      	bne.n	8008fb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	019b      	lsls	r3, r3, #6
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	621a      	str	r2, [r3, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40010400 	.word	0x40010400

08008fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0201 	bic.w	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800900a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f023 030a 	bic.w	r3, r3, #10
 800901c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903e:	b480      	push	{r7}
 8009040:	b087      	sub	sp, #28
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0210 	bic.w	r2, r3, #16
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	031b      	lsls	r3, r3, #12
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800907a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	f043 0307 	orr.w	r3, r3, #7
 80090c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	609a      	str	r2, [r3, #8]
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	021a      	lsls	r2, r3, #8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	609a      	str	r2, [r3, #8]
}
 8009108:	bf00      	nop
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 031f 	and.w	r3, r3, #31
 8009126:	2201      	movs	r2, #1
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	43db      	mvns	r3, r3
 8009136:	401a      	ands	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1a      	ldr	r2, [r3, #32]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009174:	2302      	movs	r3, #2
 8009176:	e05a      	b.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a21      	ldr	r2, [pc, #132]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d022      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c4:	d01d      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d018      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1a      	ldr	r2, [pc, #104]	@ (8009248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00e      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a18      	ldr	r2, [pc, #96]	@ (800924c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a17      	ldr	r2, [pc, #92]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a15      	ldr	r2, [pc, #84]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d10c      	bne.n	800921c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4313      	orrs	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40010000 	.word	0x40010000
 8009240:	40000400 	.word	0x40000400
 8009244:	40000800 	.word	0x40000800
 8009248:	40000c00 	.word	0x40000c00
 800924c:	40010400 	.word	0x40010400
 8009250:	40014000 	.word	0x40014000
 8009254:	40001800 	.word	0x40001800

08009258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009270:	2302      	movs	r3, #2
 8009272:	e03d      	b.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e042      	b.n	8009394 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fb f97e 	bl	8004624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2224      	movs	r2, #36	@ 0x24
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800933e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 ff77 	bl	800a234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08c      	sub	sp, #48	@ 0x30
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d156      	bne.n	8009464 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <HAL_UART_Transmit_DMA+0x26>
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e04f      	b.n	8009466 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2221      	movs	r2, #33	@ 0x21
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ea:	4a21      	ldr	r2, [pc, #132]	@ (8009470 <HAL_UART_Transmit_DMA+0xd4>)
 80093ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f2:	4a20      	ldr	r2, [pc, #128]	@ (8009474 <HAL_UART_Transmit_DMA+0xd8>)
 80093f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009478 <HAL_UART_Transmit_DMA+0xdc>)
 80093fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009402:	2200      	movs	r2, #0
 8009404:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	6819      	ldr	r1, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	461a      	mov	r2, r3
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	f7fc fcb7 	bl	8005d90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800942a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3314      	adds	r3, #20
 8009432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	617b      	str	r3, [r7, #20]
   return(result);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3314      	adds	r3, #20
 800944a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800944c:	627a      	str	r2, [r7, #36]	@ 0x24
 800944e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6a39      	ldr	r1, [r7, #32]
 8009452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	61fb      	str	r3, [r7, #28]
   return(result);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e5      	bne.n	800942c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e000      	b.n	8009466 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009464:	2302      	movs	r3, #2
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3730      	adds	r7, #48	@ 0x30
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	08009ac1 	.word	0x08009ac1
 8009474:	08009b5b 	.word	0x08009b5b
 8009478:	08009cdf 	.word	0x08009cdf

0800947c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08c      	sub	sp, #48	@ 0x30
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b20      	cmp	r3, #32
 8009494:	d14a      	bne.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e043      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	461a      	mov	r2, r3
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fc5b 	bl	8009d74 <UART_Start_Receive_DMA>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80094c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d12c      	bne.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d125      	bne.n	8009520 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094d4:	2300      	movs	r3, #0
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	617b      	str	r3, [r7, #20]
   return(result);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f043 0310 	orr.w	r3, r3, #16
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	330c      	adds	r3, #12
 8009508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800950a:	627a      	str	r2, [r7, #36]	@ 0x24
 800950c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6a39      	ldr	r1, [r7, #32]
 8009510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	61fb      	str	r3, [r7, #28]
   return(result);
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e5      	bne.n	80094ea <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800951e:	e002      	b.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800952a:	e000      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800952c:	2302      	movs	r3, #2
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3730      	adds	r7, #48	@ 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b0ba      	sub	sp, #232	@ 0xe8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800955e:	2300      	movs	r3, #0
 8009560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009564:	2300      	movs	r3, #0
 8009566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10f      	bne.n	800959e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800957e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <HAL_UART_IRQHandler+0x66>
 800958a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fd8d 	bl	800a0b6 <UART_Receive_IT>
      return;
 800959c:	e25b      	b.n	8009a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800959e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80de 	beq.w	8009764 <HAL_UART_IRQHandler+0x22c>
 80095a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80d1 	beq.w	8009764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <HAL_UART_IRQHandler+0xae>
 80095ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095de:	f043 0201 	orr.w	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <HAL_UART_IRQHandler+0xd2>
 80095f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009602:	f043 0202 	orr.w	r2, r3, #2
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0xf6>
 8009616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	f043 0204 	orr.w	r2, r3, #4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <HAL_UART_IRQHandler+0x126>
 800963a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d105      	bne.n	8009652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d005      	beq.n	800965e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009656:	f043 0208 	orr.w	r2, r3, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 81f2 	beq.w	8009a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_UART_IRQHandler+0x14e>
 8009674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd18 	bl	800a0b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009690:	2b40      	cmp	r3, #64	@ 0x40
 8009692:	bf0c      	ite	eq
 8009694:	2301      	moveq	r3, #1
 8009696:	2300      	movne	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <HAL_UART_IRQHandler+0x17a>
 80096aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d04f      	beq.n	8009752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fc20 	bl	8009ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c2:	2b40      	cmp	r3, #64	@ 0x40
 80096c4:	d141      	bne.n	800974a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3314      	adds	r3, #20
 80096ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800970a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1d9      	bne.n	80096c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d013      	beq.n	8009742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971e:	4a7e      	ldr	r2, [pc, #504]	@ (8009918 <HAL_UART_IRQHandler+0x3e0>)
 8009720:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009726:	4618      	mov	r0, r3
 8009728:	f7fc fbfa 	bl	8005f20 <HAL_DMA_Abort_IT>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d016      	beq.n	8009760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	e00e      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f9b2 	bl	8009aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	e00a      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9ae 	bl	8009aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009750:	e006      	b.n	8009760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9aa 	bl	8009aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800975e:	e175      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009760:	bf00      	nop
    return;
 8009762:	e173      	b.n	8009a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009768:	2b01      	cmp	r3, #1
 800976a:	f040 814f 	bne.w	8009a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800976e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 8148 	beq.w	8009a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8141 	beq.w	8009a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	60bb      	str	r3, [r7, #8]
 800979e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097aa:	2b40      	cmp	r3, #64	@ 0x40
 80097ac:	f040 80b6 	bne.w	800991c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8145 	beq.w	8009a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f080 813e 	bcs.w	8009a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e6:	f000 8088 	beq.w	80098fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800981a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009822:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800982e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d9      	bne.n	80097ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3314      	adds	r3, #20
 800983c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3314      	adds	r3, #20
 8009856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800985a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800985e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800986c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e1      	bne.n	8009836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3314      	adds	r3, #20
 8009892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800989c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e3      	bne.n	8009872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80098dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80098de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e3      	bne.n	80098b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fc faa3 	bl	8005e40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2202      	movs	r2, #2
 80098fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009908:	b29b      	uxth	r3, r3
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	b29b      	uxth	r3, r3
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7f8 f995 	bl	8001c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009916:	e09b      	b.n	8009a50 <HAL_UART_IRQHandler+0x518>
 8009918:	08009fbf 	.word	0x08009fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009924:	b29b      	uxth	r3, r3
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009930:	b29b      	uxth	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 808e 	beq.w	8009a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8089 	beq.w	8009a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	330c      	adds	r3, #12
 8009948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009966:	647a      	str	r2, [r7, #68]	@ 0x44
 8009968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800996c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e3      	bne.n	8009942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	623b      	str	r3, [r7, #32]
   return(result);
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3314      	adds	r3, #20
 800999a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800999e:	633a      	str	r2, [r7, #48]	@ 0x30
 80099a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e3      	bne.n	800997a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0310 	bic.w	r3, r3, #16
 80099d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80099e4:	61fa      	str	r2, [r7, #28]
 80099e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	69b9      	ldr	r1, [r7, #24]
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	617b      	str	r3, [r7, #20]
   return(result);
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e3      	bne.n	80099c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7f8 f91b 	bl	8001c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a0a:	e023      	b.n	8009a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <HAL_UART_IRQHandler+0x4f4>
 8009a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fade 	bl	8009fe6 <UART_Transmit_IT>
    return;
 8009a2a:	e014      	b.n	8009a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00e      	beq.n	8009a56 <HAL_UART_IRQHandler+0x51e>
 8009a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb1e 	bl	800a086 <UART_EndTransmit_IT>
    return;
 8009a4a:	e004      	b.n	8009a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8009a4c:	bf00      	nop
 8009a4e:	e002      	b.n	8009a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8009a54:	bf00      	nop
  }
}
 8009a56:	37e8      	adds	r7, #232	@ 0xe8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b090      	sub	sp, #64	@ 0x40
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d137      	bne.n	8009b4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ade:	2200      	movs	r2, #0
 8009ae0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3314      	adds	r3, #20
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	623b      	str	r3, [r7, #32]
   return(result);
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3314      	adds	r3, #20
 8009b00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e5      	bne.n	8009ae2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	330c      	adds	r3, #12
 8009b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	330c      	adds	r3, #12
 8009b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b36:	61fa      	str	r2, [r7, #28]
 8009b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	69b9      	ldr	r1, [r7, #24]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	617b      	str	r3, [r7, #20]
   return(result);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e5      	bne.n	8009b16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b4a:	e002      	b.n	8009b52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009b4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009b4e:	f7ff ff85 	bl	8009a5c <HAL_UART_TxCpltCallback>
}
 8009b52:	bf00      	nop
 8009b54:	3740      	adds	r7, #64	@ 0x40
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f7ff ff81 	bl	8009a70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b09c      	sub	sp, #112	@ 0x70
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b82:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d172      	bne.n	8009c78 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b94:	2200      	movs	r2, #0
 8009b96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009baa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009bb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009bba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e5      	bne.n	8009b98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3314      	adds	r3, #20
 8009bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bde:	f023 0301 	bic.w	r3, r3, #1
 8009be2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3314      	adds	r3, #20
 8009bea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009bec:	647a      	str	r2, [r7, #68]	@ 0x44
 8009bee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e5      	bne.n	8009bcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3314      	adds	r3, #20
 8009c06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c16:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3314      	adds	r3, #20
 8009c1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c20:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e5      	bne.n	8009c00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d119      	bne.n	8009c78 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	330c      	adds	r3, #12
 8009c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009c64:	61fa      	str	r2, [r7, #28]
 8009c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	69b9      	ldr	r1, [r7, #24]
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	617b      	str	r3, [r7, #20]
   return(result);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e5      	bne.n	8009c44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d106      	bne.n	8009c94 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c8e:	f7f7 ffd7 	bl	8001c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c92:	e002      	b.n	8009c9a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c96:	f7ff fef5 	bl	8009a84 <HAL_UART_RxCpltCallback>
}
 8009c9a:	bf00      	nop
 8009c9c:	3770      	adds	r7, #112	@ 0x70
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d108      	bne.n	8009cd0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7f7 ffb9 	bl	8001c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cce:	e002      	b.n	8009cd6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fee1 	bl	8009a98 <HAL_UART_RxHalfCpltCallback>
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cfa:	2b80      	cmp	r3, #128	@ 0x80
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b21      	cmp	r3, #33	@ 0x21
 8009d10:	d108      	bne.n	8009d24 <UART_DMAError+0x46>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009d1e:	68b8      	ldr	r0, [r7, #8]
 8009d20:	f000 f8c2 	bl	8009ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2e:	2b40      	cmp	r3, #64	@ 0x40
 8009d30:	bf0c      	ite	eq
 8009d32:	2301      	moveq	r3, #1
 8009d34:	2300      	movne	r3, #0
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b22      	cmp	r3, #34	@ 0x22
 8009d44:	d108      	bne.n	8009d58 <UART_DMAError+0x7a>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009d52:	68b8      	ldr	r0, [r7, #8]
 8009d54:	f000 f8d0 	bl	8009ef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5c:	f043 0210 	orr.w	r2, r3, #16
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f7ff fea1 	bl	8009aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b098      	sub	sp, #96	@ 0x60
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2222      	movs	r2, #34	@ 0x22
 8009d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da0:	4a3e      	ldr	r2, [pc, #248]	@ (8009e9c <UART_Start_Receive_DMA+0x128>)
 8009da2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da8:	4a3d      	ldr	r2, [pc, #244]	@ (8009ea0 <UART_Start_Receive_DMA+0x12c>)
 8009daa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db0:	4a3c      	ldr	r2, [pc, #240]	@ (8009ea4 <UART_Start_Receive_DMA+0x130>)
 8009db2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db8:	2200      	movs	r2, #0
 8009dba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	f7fb ffdc 	bl	8005d90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d019      	beq.n	8009e2a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	330c      	adds	r3, #12
 8009dfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	330c      	adds	r3, #12
 8009e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3314      	adds	r3, #20
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	f043 0301 	orr.w	r3, r3, #1
 8009e40:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3314      	adds	r3, #20
 8009e48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e4a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e5      	bne.n	8009e2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3314      	adds	r3, #20
 8009e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3314      	adds	r3, #20
 8009e7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6a39      	ldr	r1, [r7, #32]
 8009e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e5      	bne.n	8009e5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3760      	adds	r7, #96	@ 0x60
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	08009b77 	.word	0x08009b77
 8009ea0:	08009ca3 	.word	0x08009ca3
 8009ea4:	08009cdf 	.word	0x08009cdf

08009ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b089      	sub	sp, #36	@ 0x24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	330c      	adds	r3, #12
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	61ba      	str	r2, [r7, #24]
 8009ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6979      	ldr	r1, [r7, #20]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e5      	bne.n	8009eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009eec:	bf00      	nop
 8009eee:	3724      	adds	r7, #36	@ 0x24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b095      	sub	sp, #84	@ 0x54
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	330c      	adds	r3, #12
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f20:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e5      	bne.n	8009f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3314      	adds	r3, #20
 8009f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f023 0301 	bic.w	r3, r3, #1
 8009f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3314      	adds	r3, #20
 8009f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d119      	bne.n	8009fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 0310 	bic.w	r3, r3, #16
 8009f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f90:	61ba      	str	r2, [r7, #24]
 8009f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	e841 2300 	strex	r3, r2, [r1]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e5      	bne.n	8009f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009fb2:	bf00      	nop
 8009fb4:	3754      	adds	r7, #84	@ 0x54
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff fd67 	bl	8009aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b21      	cmp	r3, #33	@ 0x21
 8009ff8:	d13e      	bne.n	800a078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a002:	d114      	bne.n	800a02e <UART_Transmit_IT+0x48>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d110      	bne.n	800a02e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	621a      	str	r2, [r3, #32]
 800a02c:	e008      	b.n	800a040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	1c59      	adds	r1, r3, #1
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6211      	str	r1, [r2, #32]
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a044:	b29b      	uxth	r3, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	4619      	mov	r1, r3
 800a04e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	e000      	b.n	800a07a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a078:	2302      	movs	r3, #2
  }
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a09c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff fcd8 	bl	8009a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b08c      	sub	sp, #48	@ 0x30
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b22      	cmp	r3, #34	@ 0x22
 800a0c8:	f040 80ae 	bne.w	800a228 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d4:	d117      	bne.n	800a106 <UART_Receive_IT+0x50>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d113      	bne.n	800a106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fe:	1c9a      	adds	r2, r3, #2
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	629a      	str	r2, [r3, #40]	@ 0x28
 800a104:	e026      	b.n	800a154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a118:	d007      	beq.n	800a12a <UART_Receive_IT+0x74>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <UART_Receive_IT+0x82>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e008      	b.n	800a14a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a144:	b2da      	uxtb	r2, r3
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4619      	mov	r1, r3
 800a162:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a164:	2b00      	cmp	r3, #0
 800a166:	d15d      	bne.n	800a224 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0220 	bic.w	r2, r2, #32
 800a176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695a      	ldr	r2, [r3, #20]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0201 	bic.w	r2, r2, #1
 800a196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d135      	bne.n	800a21a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f023 0310 	bic.w	r3, r3, #16
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	330c      	adds	r3, #12
 800a1d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1d4:	623a      	str	r2, [r7, #32]
 800a1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	69f9      	ldr	r1, [r7, #28]
 800a1da:	6a3a      	ldr	r2, [r7, #32]
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d10a      	bne.n	800a20c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7f7 fd14 	bl	8001c40 <HAL_UARTEx_RxEventCallback>
 800a218:	e002      	b.n	800a220 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff fc32 	bl	8009a84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e002      	b.n	800a22a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3730      	adds	r7, #48	@ 0x30
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a238:	b0c0      	sub	sp, #256	@ 0x100
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a250:	68d9      	ldr	r1, [r3, #12]
 800a252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	ea40 0301 	orr.w	r3, r0, r1
 800a25c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	431a      	orrs	r2, r3
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a28c:	f021 010c 	bic.w	r1, r1, #12
 800a290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a29a:	430b      	orrs	r3, r1
 800a29c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ae:	6999      	ldr	r1, [r3, #24]
 800a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	ea40 0301 	orr.w	r3, r0, r1
 800a2ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b8f      	ldr	r3, [pc, #572]	@ (800a500 <UART_SetConfig+0x2cc>)
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d005      	beq.n	800a2d4 <UART_SetConfig+0xa0>
 800a2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b8d      	ldr	r3, [pc, #564]	@ (800a504 <UART_SetConfig+0x2d0>)
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d104      	bne.n	800a2de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fd fd1a 	bl	8007d0c <HAL_RCC_GetPCLK2Freq>
 800a2d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a2dc:	e003      	b.n	800a2e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2de:	f7fd fd01 	bl	8007ce4 <HAL_RCC_GetPCLK1Freq>
 800a2e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2f0:	f040 810c 	bne.w	800a50c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	1891      	adds	r1, r2, r2
 800a30c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a30e:	415b      	adcs	r3, r3
 800a310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a316:	4621      	mov	r1, r4
 800a318:	eb12 0801 	adds.w	r8, r2, r1
 800a31c:	4629      	mov	r1, r5
 800a31e:	eb43 0901 	adc.w	r9, r3, r1
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a32e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a336:	4690      	mov	r8, r2
 800a338:	4699      	mov	r9, r3
 800a33a:	4623      	mov	r3, r4
 800a33c:	eb18 0303 	adds.w	r3, r8, r3
 800a340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a344:	462b      	mov	r3, r5
 800a346:	eb49 0303 	adc.w	r3, r9, r3
 800a34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a35a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a35e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a362:	460b      	mov	r3, r1
 800a364:	18db      	adds	r3, r3, r3
 800a366:	653b      	str	r3, [r7, #80]	@ 0x50
 800a368:	4613      	mov	r3, r2
 800a36a:	eb42 0303 	adc.w	r3, r2, r3
 800a36e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a378:	f7f6 fbc8 	bl	8000b0c <__aeabi_uldivmod>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4b61      	ldr	r3, [pc, #388]	@ (800a508 <UART_SetConfig+0x2d4>)
 800a382:	fba3 2302 	umull	r2, r3, r3, r2
 800a386:	095b      	lsrs	r3, r3, #5
 800a388:	011c      	lsls	r4, r3, #4
 800a38a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a394:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	1891      	adds	r1, r2, r2
 800a3a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a3a4:	415b      	adcs	r3, r3
 800a3a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	eb12 0a01 	adds.w	sl, r2, r1
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	eb43 0b01 	adc.w	fp, r3, r1
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3cc:	4692      	mov	sl, r2
 800a3ce:	469b      	mov	fp, r3
 800a3d0:	4643      	mov	r3, r8
 800a3d2:	eb1a 0303 	adds.w	r3, sl, r3
 800a3d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	eb4b 0303 	adc.w	r3, fp, r3
 800a3e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a3f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	18db      	adds	r3, r3, r3
 800a3fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3fe:	4613      	mov	r3, r2
 800a400:	eb42 0303 	adc.w	r3, r2, r3
 800a404:	647b      	str	r3, [r7, #68]	@ 0x44
 800a406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a40a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a40e:	f7f6 fb7d 	bl	8000b0c <__aeabi_uldivmod>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4611      	mov	r1, r2
 800a418:	4b3b      	ldr	r3, [pc, #236]	@ (800a508 <UART_SetConfig+0x2d4>)
 800a41a:	fba3 2301 	umull	r2, r3, r3, r1
 800a41e:	095b      	lsrs	r3, r3, #5
 800a420:	2264      	movs	r2, #100	@ 0x64
 800a422:	fb02 f303 	mul.w	r3, r2, r3
 800a426:	1acb      	subs	r3, r1, r3
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a42e:	4b36      	ldr	r3, [pc, #216]	@ (800a508 <UART_SetConfig+0x2d4>)
 800a430:	fba3 2302 	umull	r2, r3, r3, r2
 800a434:	095b      	lsrs	r3, r3, #5
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a43c:	441c      	add	r4, r3
 800a43e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a442:	2200      	movs	r2, #0
 800a444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a448:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a44c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a450:	4642      	mov	r2, r8
 800a452:	464b      	mov	r3, r9
 800a454:	1891      	adds	r1, r2, r2
 800a456:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a458:	415b      	adcs	r3, r3
 800a45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a45c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a460:	4641      	mov	r1, r8
 800a462:	1851      	adds	r1, r2, r1
 800a464:	6339      	str	r1, [r7, #48]	@ 0x30
 800a466:	4649      	mov	r1, r9
 800a468:	414b      	adcs	r3, r1
 800a46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a478:	4659      	mov	r1, fp
 800a47a:	00cb      	lsls	r3, r1, #3
 800a47c:	4651      	mov	r1, sl
 800a47e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a482:	4651      	mov	r1, sl
 800a484:	00ca      	lsls	r2, r1, #3
 800a486:	4610      	mov	r0, r2
 800a488:	4619      	mov	r1, r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	4642      	mov	r2, r8
 800a48e:	189b      	adds	r3, r3, r2
 800a490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a494:	464b      	mov	r3, r9
 800a496:	460a      	mov	r2, r1
 800a498:	eb42 0303 	adc.w	r3, r2, r3
 800a49c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a4b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	18db      	adds	r3, r3, r3
 800a4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	eb42 0303 	adc.w	r3, r2, r3
 800a4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a4c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a4ca:	f7f6 fb1f 	bl	8000b0c <__aeabi_uldivmod>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <UART_SetConfig+0x2d4>)
 800a4d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d8:	095b      	lsrs	r3, r3, #5
 800a4da:	2164      	movs	r1, #100	@ 0x64
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	3332      	adds	r3, #50	@ 0x32
 800a4e6:	4a08      	ldr	r2, [pc, #32]	@ (800a508 <UART_SetConfig+0x2d4>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	095b      	lsrs	r3, r3, #5
 800a4ee:	f003 0207 	and.w	r2, r3, #7
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4422      	add	r2, r4
 800a4fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4fc:	e106      	b.n	800a70c <UART_SetConfig+0x4d8>
 800a4fe:	bf00      	nop
 800a500:	40011000 	.word	0x40011000
 800a504:	40011400 	.word	0x40011400
 800a508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a50c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a510:	2200      	movs	r2, #0
 800a512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a516:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a51a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a51e:	4642      	mov	r2, r8
 800a520:	464b      	mov	r3, r9
 800a522:	1891      	adds	r1, r2, r2
 800a524:	6239      	str	r1, [r7, #32]
 800a526:	415b      	adcs	r3, r3
 800a528:	627b      	str	r3, [r7, #36]	@ 0x24
 800a52a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a52e:	4641      	mov	r1, r8
 800a530:	1854      	adds	r4, r2, r1
 800a532:	4649      	mov	r1, r9
 800a534:	eb43 0501 	adc.w	r5, r3, r1
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	00eb      	lsls	r3, r5, #3
 800a542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a546:	00e2      	lsls	r2, r4, #3
 800a548:	4614      	mov	r4, r2
 800a54a:	461d      	mov	r5, r3
 800a54c:	4643      	mov	r3, r8
 800a54e:	18e3      	adds	r3, r4, r3
 800a550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a554:	464b      	mov	r3, r9
 800a556:	eb45 0303 	adc.w	r3, r5, r3
 800a55a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a56a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a56e:	f04f 0200 	mov.w	r2, #0
 800a572:	f04f 0300 	mov.w	r3, #0
 800a576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a57a:	4629      	mov	r1, r5
 800a57c:	008b      	lsls	r3, r1, #2
 800a57e:	4621      	mov	r1, r4
 800a580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a584:	4621      	mov	r1, r4
 800a586:	008a      	lsls	r2, r1, #2
 800a588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a58c:	f7f6 fabe 	bl	8000b0c <__aeabi_uldivmod>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4b60      	ldr	r3, [pc, #384]	@ (800a718 <UART_SetConfig+0x4e4>)
 800a596:	fba3 2302 	umull	r2, r3, r3, r2
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	011c      	lsls	r4, r3, #4
 800a59e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a5ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	1891      	adds	r1, r2, r2
 800a5b6:	61b9      	str	r1, [r7, #24]
 800a5b8:	415b      	adcs	r3, r3
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	1851      	adds	r1, r2, r1
 800a5c4:	6139      	str	r1, [r7, #16]
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	414b      	adcs	r3, r1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5d8:	4659      	mov	r1, fp
 800a5da:	00cb      	lsls	r3, r1, #3
 800a5dc:	4651      	mov	r1, sl
 800a5de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5e2:	4651      	mov	r1, sl
 800a5e4:	00ca      	lsls	r2, r1, #3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	189b      	adds	r3, r3, r2
 800a5f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	460a      	mov	r2, r1
 800a5f8:	eb42 0303 	adc.w	r3, r2, r3
 800a5fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a60a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a618:	4649      	mov	r1, r9
 800a61a:	008b      	lsls	r3, r1, #2
 800a61c:	4641      	mov	r1, r8
 800a61e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a622:	4641      	mov	r1, r8
 800a624:	008a      	lsls	r2, r1, #2
 800a626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a62a:	f7f6 fa6f 	bl	8000b0c <__aeabi_uldivmod>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4611      	mov	r1, r2
 800a634:	4b38      	ldr	r3, [pc, #224]	@ (800a718 <UART_SetConfig+0x4e4>)
 800a636:	fba3 2301 	umull	r2, r3, r3, r1
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	2264      	movs	r2, #100	@ 0x64
 800a63e:	fb02 f303 	mul.w	r3, r2, r3
 800a642:	1acb      	subs	r3, r1, r3
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	3332      	adds	r3, #50	@ 0x32
 800a648:	4a33      	ldr	r2, [pc, #204]	@ (800a718 <UART_SetConfig+0x4e4>)
 800a64a:	fba2 2303 	umull	r2, r3, r2, r3
 800a64e:	095b      	lsrs	r3, r3, #5
 800a650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a654:	441c      	add	r4, r3
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a65a:	2200      	movs	r2, #0
 800a65c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a65e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a664:	4642      	mov	r2, r8
 800a666:	464b      	mov	r3, r9
 800a668:	1891      	adds	r1, r2, r2
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	415b      	adcs	r3, r3
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a674:	4641      	mov	r1, r8
 800a676:	1851      	adds	r1, r2, r1
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	4649      	mov	r1, r9
 800a67c:	414b      	adcs	r3, r1
 800a67e:	607b      	str	r3, [r7, #4]
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a68c:	4659      	mov	r1, fp
 800a68e:	00cb      	lsls	r3, r1, #3
 800a690:	4651      	mov	r1, sl
 800a692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a696:	4651      	mov	r1, sl
 800a698:	00ca      	lsls	r2, r1, #3
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	189b      	adds	r3, r3, r2
 800a6a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	460a      	mov	r2, r1
 800a6aa:	eb42 0303 	adc.w	r3, r2, r3
 800a6ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6ba:	667a      	str	r2, [r7, #100]	@ 0x64
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	008b      	lsls	r3, r1, #2
 800a6cc:	4641      	mov	r1, r8
 800a6ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	008a      	lsls	r2, r1, #2
 800a6d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a6da:	f7f6 fa17 	bl	8000b0c <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <UART_SetConfig+0x4e4>)
 800a6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	2164      	movs	r1, #100	@ 0x64
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	3332      	adds	r3, #50	@ 0x32
 800a6f6:	4a08      	ldr	r2, [pc, #32]	@ (800a718 <UART_SetConfig+0x4e4>)
 800a6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	f003 020f 	and.w	r2, r3, #15
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4422      	add	r2, r4
 800a70a:	609a      	str	r2, [r3, #8]
}
 800a70c:	bf00      	nop
 800a70e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a718:	51eb851f 	.word	0x51eb851f

0800a71c <__NVIC_SetPriority>:
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db0a      	blt.n	800a746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	b2da      	uxtb	r2, r3
 800a734:	490c      	ldr	r1, [pc, #48]	@ (800a768 <__NVIC_SetPriority+0x4c>)
 800a736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73a:	0112      	lsls	r2, r2, #4
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	440b      	add	r3, r1
 800a740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a744:	e00a      	b.n	800a75c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	4908      	ldr	r1, [pc, #32]	@ (800a76c <__NVIC_SetPriority+0x50>)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	3b04      	subs	r3, #4
 800a754:	0112      	lsls	r2, r2, #4
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	440b      	add	r3, r1
 800a75a:	761a      	strb	r2, [r3, #24]
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	e000e100 	.word	0xe000e100
 800a76c:	e000ed00 	.word	0xe000ed00

0800a770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a774:	2100      	movs	r1, #0
 800a776:	f06f 0004 	mvn.w	r0, #4
 800a77a:	f7ff ffcf 	bl	800a71c <__NVIC_SetPriority>
#endif
}
 800a77e:	bf00      	nop
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a78a:	f3ef 8305 	mrs	r3, IPSR
 800a78e:	603b      	str	r3, [r7, #0]
  return(result);
 800a790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a796:	f06f 0305 	mvn.w	r3, #5
 800a79a:	607b      	str	r3, [r7, #4]
 800a79c:	e00c      	b.n	800a7b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a79e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <osKernelInitialize+0x44>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7a6:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <osKernelInitialize+0x44>)
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	607b      	str	r3, [r7, #4]
 800a7b0:	e002      	b.n	800a7b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a7b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7b8:	687b      	ldr	r3, [r7, #4]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20000d84 	.word	0x20000d84

0800a7cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7d2:	f3ef 8305 	mrs	r3, IPSR
 800a7d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a7d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a7de:	f06f 0305 	mvn.w	r3, #5
 800a7e2:	607b      	str	r3, [r7, #4]
 800a7e4:	e010      	b.n	800a808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <osKernelStart+0x48>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d109      	bne.n	800a802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a7ee:	f7ff ffbf 	bl	800a770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a7f2:	4b08      	ldr	r3, [pc, #32]	@ (800a814 <osKernelStart+0x48>)
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7f8:	f001 f892 	bl	800b920 <vTaskStartScheduler>
      stat = osOK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	607b      	str	r3, [r7, #4]
 800a800:	e002      	b.n	800a808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a808:	687b      	ldr	r3, [r7, #4]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000d84 	.word	0x20000d84

0800a818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08e      	sub	sp, #56	@ 0x38
 800a81c:	af04      	add	r7, sp, #16
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a828:	f3ef 8305 	mrs	r3, IPSR
 800a82c:	617b      	str	r3, [r7, #20]
  return(result);
 800a82e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a830:	2b00      	cmp	r3, #0
 800a832:	d17e      	bne.n	800a932 <osThreadNew+0x11a>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d07b      	beq.n	800a932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a83a:	2380      	movs	r3, #128	@ 0x80
 800a83c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a83e:	2318      	movs	r3, #24
 800a840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a842:	2300      	movs	r3, #0
 800a844:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a84a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d045      	beq.n	800a8de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <osThreadNew+0x48>
        name = attr->name;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d008      	beq.n	800a886 <osThreadNew+0x6e>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2b38      	cmp	r3, #56	@ 0x38
 800a878:	d805      	bhi.n	800a886 <osThreadNew+0x6e>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <osThreadNew+0x72>
        return (NULL);
 800a886:	2300      	movs	r3, #0
 800a888:	e054      	b.n	800a934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	089b      	lsrs	r3, r3, #2
 800a898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00e      	beq.n	800a8c0 <osThreadNew+0xa8>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	2ba7      	cmp	r3, #167	@ 0xa7
 800a8a8:	d90a      	bls.n	800a8c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d006      	beq.n	800a8c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <osThreadNew+0xa8>
        mem = 1;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	e010      	b.n	800a8e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10c      	bne.n	800a8e2 <osThreadNew+0xca>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d108      	bne.n	800a8e2 <osThreadNew+0xca>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <osThreadNew+0xca>
          mem = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	e001      	b.n	800a8e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d110      	bne.n	800a90a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8f0:	9202      	str	r2, [sp, #8]
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	6a3a      	ldr	r2, [r7, #32]
 800a8fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fe1a 	bl	800b538 <xTaskCreateStatic>
 800a904:	4603      	mov	r3, r0
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	e013      	b.n	800a932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d110      	bne.n	800a932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	b29a      	uxth	r2, r3
 800a914:	f107 0310 	add.w	r3, r7, #16
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 fe68 	bl	800b5f8 <xTaskCreate>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d001      	beq.n	800a932 <osThreadNew+0x11a>
            hTask = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a932:	693b      	ldr	r3, [r7, #16]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3728      	adds	r7, #40	@ 0x28
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a944:	f3ef 8305 	mrs	r3, IPSR
 800a948:	60bb      	str	r3, [r7, #8]
  return(result);
 800a94a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <osDelay+0x1c>
    stat = osErrorISR;
 800a950:	f06f 0305 	mvn.w	r3, #5
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	e007      	b.n	800a968 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 ffa6 	bl	800b8b4 <vTaskDelay>
    }
  }

  return (stat);
 800a968:	68fb      	ldr	r3, [r7, #12]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a07      	ldr	r2, [pc, #28]	@ (800a9a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a984:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	4a06      	ldr	r2, [pc, #24]	@ (800a9a4 <vApplicationGetIdleTaskMemory+0x30>)
 800a98a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2280      	movs	r2, #128	@ 0x80
 800a990:	601a      	str	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	20000d88 	.word	0x20000d88
 800a9a4:	20000e30 	.word	0x20000e30

0800a9a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a07      	ldr	r2, [pc, #28]	@ (800a9d4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	4a06      	ldr	r2, [pc, #24]	@ (800a9d8 <vApplicationGetTimerTaskMemory+0x30>)
 800a9be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a9c6:	601a      	str	r2, [r3, #0]
}
 800a9c8:	bf00      	nop
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20001030 	.word	0x20001030
 800a9d8:	200010d8 	.word	0x200010d8

0800a9dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f103 0208 	add.w	r2, r3, #8
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f103 0208 	add.w	r2, r3, #8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f103 0208 	add.w	r2, r3, #8
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa2a:	bf00      	nop
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa36:	b480      	push	{r7}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
}
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa94:	d103      	bne.n	800aa9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e00c      	b.n	800aab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	e002      	b.n	800aaac <vListInsert+0x2e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d2f6      	bcs.n	800aaa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6892      	ldr	r2, [r2, #8]
 800ab06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6852      	ldr	r2, [r2, #4]
 800ab10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d103      	bne.n	800ab24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689a      	ldr	r2, [r3, #8]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	1e5a      	subs	r2, r3, #1
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10b      	bne.n	800ab70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab6a:	bf00      	nop
 800ab6c:	bf00      	nop
 800ab6e:	e7fd      	b.n	800ab6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab70:	f002 fa82 	bl	800d078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7c:	68f9      	ldr	r1, [r7, #12]
 800ab7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	441a      	add	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba0:	3b01      	subs	r3, #1
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	441a      	add	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	22ff      	movs	r2, #255	@ 0xff
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	22ff      	movs	r2, #255	@ 0xff
 800abbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d114      	bne.n	800abf0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01a      	beq.n	800ac04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3310      	adds	r3, #16
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 fa3c 	bl	800c050 <xTaskRemoveFromEventList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d012      	beq.n	800ac04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abde:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <xQueueGenericReset+0xd0>)
 800abe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	e009      	b.n	800ac04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3310      	adds	r3, #16
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7ff fef1 	bl	800a9dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3324      	adds	r3, #36	@ 0x24
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff feec 	bl	800a9dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac04:	f002 fa6a 	bl	800d0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac08:	2301      	movs	r3, #1
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08e      	sub	sp, #56	@ 0x38
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	e7fd      	b.n	800ac40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10b      	bne.n	800ac62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac5c:	bf00      	nop
 800ac5e:	bf00      	nop
 800ac60:	e7fd      	b.n	800ac5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <xQueueGenericCreateStatic+0x56>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <xQueueGenericCreateStatic+0x5a>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericCreateStatic+0x5c>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	623b      	str	r3, [r7, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <xQueueGenericCreateStatic+0x84>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <xQueueGenericCreateStatic+0x88>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e000      	b.n	800aca2 <xQueueGenericCreateStatic+0x8a>
 800aca0:	2300      	movs	r3, #0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	61fb      	str	r3, [r7, #28]
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	e7fd      	b.n	800acba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acbe:	2350      	movs	r3, #80	@ 0x50
 800acc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b50      	cmp	r3, #80	@ 0x50
 800acc6:	d00b      	beq.n	800ace0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	61bb      	str	r3, [r7, #24]
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	e7fd      	b.n	800acdc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ace0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ace6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00d      	beq.n	800ad08 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acf4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800acf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 f805 	bl	800ad12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3730      	adds	r7, #48	@ 0x30
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d103      	bne.n	800ad2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e002      	b.n	800ad34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad40:	2101      	movs	r1, #1
 800ad42:	69b8      	ldr	r0, [r7, #24]
 800ad44:	f7ff fefe 	bl	800ab44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	78fa      	ldrb	r2, [r7, #3]
 800ad4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b08e      	sub	sp, #56	@ 0x38
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad66:	2300      	movs	r3, #0
 800ad68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10b      	bne.n	800ad8c <xQueueGenericSend+0x34>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	e7fd      	b.n	800ad88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d103      	bne.n	800ad9a <xQueueGenericSend+0x42>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <xQueueGenericSend+0x46>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <xQueueGenericSend+0x48>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10b      	bne.n	800adbc <xQueueGenericSend+0x64>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d103      	bne.n	800adca <xQueueGenericSend+0x72>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <xQueueGenericSend+0x76>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <xQueueGenericSend+0x78>
 800adce:	2300      	movs	r3, #0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10b      	bne.n	800adec <xQueueGenericSend+0x94>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	623b      	str	r3, [r7, #32]
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	e7fd      	b.n	800ade8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adec:	f001 faf6 	bl	800c3dc <xTaskGetSchedulerState>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <xQueueGenericSend+0xa4>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <xQueueGenericSend+0xa8>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <xQueueGenericSend+0xaa>
 800ae00:	2300      	movs	r3, #0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <xQueueGenericSend+0xc6>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	61fb      	str	r3, [r7, #28]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae1e:	f002 f92b 	bl	800d078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <xQueueGenericSend+0xdc>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d129      	bne.n	800ae88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae3a:	f000 fa0f 	bl	800b25c <prvCopyDataToQueue>
 800ae3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d010      	beq.n	800ae6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	3324      	adds	r3, #36	@ 0x24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f8ff 	bl	800c050 <xTaskRemoveFromEventList>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d013      	beq.n	800ae80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae58:	4b3f      	ldr	r3, [pc, #252]	@ (800af58 <xQueueGenericSend+0x200>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	e00a      	b.n	800ae80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae70:	4b39      	ldr	r3, [pc, #228]	@ (800af58 <xQueueGenericSend+0x200>)
 800ae72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae80:	f002 f92c 	bl	800d0dc <vPortExitCritical>
				return pdPASS;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e063      	b.n	800af50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae8e:	f002 f925 	bl	800d0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e05c      	b.n	800af50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 f939 	bl	800c118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aea6:	2301      	movs	r3, #1
 800aea8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeaa:	f002 f917 	bl	800d0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeae:	f000 fda7 	bl	800ba00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeb2:	f002 f8e1 	bl	800d078 <vPortEnterCritical>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aec2:	d103      	bne.n	800aecc <xQueueGenericSend+0x174>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aed2:	b25b      	sxtb	r3, r3
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aed8:	d103      	bne.n	800aee2 <xQueueGenericSend+0x18a>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aee2:	f002 f8fb 	bl	800d0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aee6:	1d3a      	adds	r2, r7, #4
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f928 	bl	800c144 <xTaskCheckForTimeOut>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d124      	bne.n	800af44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aefa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aefc:	f000 faa6 	bl	800b44c <prvIsQueueFull>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d018      	beq.n	800af38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	3310      	adds	r3, #16
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 f84c 	bl	800bfac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af16:	f000 fa31 	bl	800b37c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af1a:	f000 fd7f 	bl	800ba1c <xTaskResumeAll>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af7c 	bne.w	800ae1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800af26:	4b0c      	ldr	r3, [pc, #48]	@ (800af58 <xQueueGenericSend+0x200>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	e772      	b.n	800ae1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af3a:	f000 fa1f 	bl	800b37c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af3e:	f000 fd6d 	bl	800ba1c <xTaskResumeAll>
 800af42:	e76c      	b.n	800ae1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af46:	f000 fa19 	bl	800b37c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4a:	f000 fd67 	bl	800ba1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af50:	4618      	mov	r0, r3
 800af52:	3738      	adds	r7, #56	@ 0x38
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b090      	sub	sp, #64	@ 0x40
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d103      	bne.n	800af9a <xQueueGenericSendFromISR+0x3e>
 800af92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <xQueueGenericSendFromISR+0x42>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <xQueueGenericSendFromISR+0x44>
 800af9e:	2300      	movs	r3, #0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
 800afba:	e7fd      	b.n	800afb8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d103      	bne.n	800afca <xQueueGenericSendFromISR+0x6e>
 800afc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d101      	bne.n	800afce <xQueueGenericSendFromISR+0x72>
 800afca:	2301      	movs	r3, #1
 800afcc:	e000      	b.n	800afd0 <xQueueGenericSendFromISR+0x74>
 800afce:	2300      	movs	r3, #0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10b      	bne.n	800afec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	623b      	str	r3, [r7, #32]
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	e7fd      	b.n	800afe8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afec:	f002 f924 	bl	800d238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aff0:	f3ef 8211 	mrs	r2, BASEPRI
 800aff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	61fa      	str	r2, [r7, #28]
 800b006:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b008:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b00a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b014:	429a      	cmp	r2, r3
 800b016:	d302      	bcc.n	800b01e <xQueueGenericSendFromISR+0xc2>
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d12f      	bne.n	800b07e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b024:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	68b9      	ldr	r1, [r7, #8]
 800b032:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b034:	f000 f912 	bl	800b25c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b038:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b040:	d112      	bne.n	800b068 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b046:	2b00      	cmp	r3, #0
 800b048:	d016      	beq.n	800b078 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	3324      	adds	r3, #36	@ 0x24
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fffe 	bl	800c050 <xTaskRemoveFromEventList>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00e      	beq.n	800b078 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e007      	b.n	800b078 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b068:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b06c:	3301      	adds	r3, #1
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	b25a      	sxtb	r2, r3
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b078:	2301      	movs	r3, #1
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b07c:	e001      	b.n	800b082 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b084:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b08c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b090:	4618      	mov	r0, r3
 800b092:	3740      	adds	r7, #64	@ 0x40
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08c      	sub	sp, #48	@ 0x30
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10b      	bne.n	800b0ca <xQueueReceive+0x32>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	623b      	str	r3, [r7, #32]
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	e7fd      	b.n	800b0c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d103      	bne.n	800b0d8 <xQueueReceive+0x40>
 800b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <xQueueReceive+0x44>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <xQueueReceive+0x46>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10b      	bne.n	800b0fa <xQueueReceive+0x62>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	61fb      	str	r3, [r7, #28]
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop
 800b0f8:	e7fd      	b.n	800b0f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0fa:	f001 f96f 	bl	800c3dc <xTaskGetSchedulerState>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <xQueueReceive+0x72>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <xQueueReceive+0x76>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <xQueueReceive+0x78>
 800b10e:	2300      	movs	r3, #0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10b      	bne.n	800b12c <xQueueReceive+0x94>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	61bb      	str	r3, [r7, #24]
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b12c:	f001 ffa4 	bl	800d078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d01f      	beq.n	800b17c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b140:	f000 f8f6 	bl	800b330 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	1e5a      	subs	r2, r3, #1
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00f      	beq.n	800b174 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b156:	3310      	adds	r3, #16
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 ff79 	bl	800c050 <xTaskRemoveFromEventList>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d007      	beq.n	800b174 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b164:	4b3c      	ldr	r3, [pc, #240]	@ (800b258 <xQueueReceive+0x1c0>)
 800b166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b174:	f001 ffb2 	bl	800d0dc <vPortExitCritical>
				return pdPASS;
 800b178:	2301      	movs	r3, #1
 800b17a:	e069      	b.n	800b250 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d103      	bne.n	800b18a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b182:	f001 ffab 	bl	800d0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b186:	2300      	movs	r3, #0
 800b188:	e062      	b.n	800b250 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d106      	bne.n	800b19e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	4618      	mov	r0, r3
 800b196:	f000 ffbf 	bl	800c118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b19a:	2301      	movs	r3, #1
 800b19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b19e:	f001 ff9d 	bl	800d0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1a2:	f000 fc2d 	bl	800ba00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1a6:	f001 ff67 	bl	800d078 <vPortEnterCritical>
 800b1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1b0:	b25b      	sxtb	r3, r3
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1b6:	d103      	bne.n	800b1c0 <xQueueReceive+0x128>
 800b1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1c6:	b25b      	sxtb	r3, r3
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1cc:	d103      	bne.n	800b1d6 <xQueueReceive+0x13e>
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1d6:	f001 ff81 	bl	800d0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1da:	1d3a      	adds	r2, r7, #4
 800b1dc:	f107 0310 	add.w	r3, r7, #16
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 ffae 	bl	800c144 <xTaskCheckForTimeOut>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d123      	bne.n	800b236 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1f0:	f000 f916 	bl	800b420 <prvIsQueueEmpty>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d017      	beq.n	800b22a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	3324      	adds	r3, #36	@ 0x24
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fed2 	bl	800bfac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b20a:	f000 f8b7 	bl	800b37c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b20e:	f000 fc05 	bl	800ba1c <xTaskResumeAll>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d189      	bne.n	800b12c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b218:	4b0f      	ldr	r3, [pc, #60]	@ (800b258 <xQueueReceive+0x1c0>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	e780      	b.n	800b12c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b22a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b22c:	f000 f8a6 	bl	800b37c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b230:	f000 fbf4 	bl	800ba1c <xTaskResumeAll>
 800b234:	e77a      	b.n	800b12c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b238:	f000 f8a0 	bl	800b37c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b23c:	f000 fbee 	bl	800ba1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b242:	f000 f8ed 	bl	800b420 <prvIsQueueEmpty>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f43f af6f 	beq.w	800b12c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b24e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b250:	4618      	mov	r0, r3
 800b252:	3730      	adds	r7, #48	@ 0x30
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b268:	2300      	movs	r3, #0
 800b26a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b270:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10d      	bne.n	800b296 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d14d      	bne.n	800b31e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	4618      	mov	r0, r3
 800b288:	f001 f8c6 	bl	800c418 <xTaskPriorityDisinherit>
 800b28c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	609a      	str	r2, [r3, #8]
 800b294:	e043      	b.n	800b31e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d119      	bne.n	800b2d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6858      	ldr	r0, [r3, #4]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	f002 faa0 	bl	800d7ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d32b      	bcc.n	800b31e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	605a      	str	r2, [r3, #4]
 800b2ce:	e026      	b.n	800b31e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	68d8      	ldr	r0, [r3, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	f002 fa86 	bl	800d7ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	68da      	ldr	r2, [r3, #12]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e8:	425b      	negs	r3, r3
 800b2ea:	441a      	add	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	68da      	ldr	r2, [r3, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d207      	bcs.n	800b30c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b304:	425b      	negs	r3, r3
 800b306:	441a      	add	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d105      	bne.n	800b31e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b326:	697b      	ldr	r3, [r7, #20]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d018      	beq.n	800b374 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68da      	ldr	r2, [r3, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b34a:	441a      	add	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d303      	bcc.n	800b364 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	68d9      	ldr	r1, [r3, #12]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36c:	461a      	mov	r2, r3
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f002 fa3c 	bl	800d7ec <memcpy>
	}
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b384:	f001 fe78 	bl	800d078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b38e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b390:	e011      	b.n	800b3b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	d012      	beq.n	800b3c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3324      	adds	r3, #36	@ 0x24
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fe56 	bl	800c050 <xTaskRemoveFromEventList>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3aa:	f000 ff2f 	bl	800c20c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	dce9      	bgt.n	800b392 <prvUnlockQueue+0x16>
 800b3be:	e000      	b.n	800b3c2 <prvUnlockQueue+0x46>
					break;
 800b3c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	22ff      	movs	r2, #255	@ 0xff
 800b3c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b3ca:	f001 fe87 	bl	800d0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3ce:	f001 fe53 	bl	800d078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3da:	e011      	b.n	800b400 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d012      	beq.n	800b40a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3310      	adds	r3, #16
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fe31 	bl	800c050 <xTaskRemoveFromEventList>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3f4:	f000 ff0a 	bl	800c20c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b404:	2b00      	cmp	r3, #0
 800b406:	dce9      	bgt.n	800b3dc <prvUnlockQueue+0x60>
 800b408:	e000      	b.n	800b40c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b40a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	22ff      	movs	r2, #255	@ 0xff
 800b410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b414:	f001 fe62 	bl	800d0dc <vPortExitCritical>
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b428:	f001 fe26 	bl	800d078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b434:	2301      	movs	r3, #1
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	e001      	b.n	800b43e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b43e:	f001 fe4d 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800b442:	68fb      	ldr	r3, [r7, #12]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b454:	f001 fe10 	bl	800d078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b460:	429a      	cmp	r2, r3
 800b462:	d102      	bne.n	800b46a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	e001      	b.n	800b46e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b46e:	f001 fe35 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800b472:	68fb      	ldr	r3, [r7, #12]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b486:	2300      	movs	r3, #0
 800b488:	60fb      	str	r3, [r7, #12]
 800b48a:	e014      	b.n	800b4b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b48c:	4a0f      	ldr	r2, [pc, #60]	@ (800b4cc <vQueueAddToRegistry+0x50>)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10b      	bne.n	800b4b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b498:	490c      	ldr	r1, [pc, #48]	@ (800b4cc <vQueueAddToRegistry+0x50>)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b4cc <vQueueAddToRegistry+0x50>)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	4413      	add	r3, r2
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4ae:	e006      	b.n	800b4be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b07      	cmp	r3, #7
 800b4ba:	d9e7      	bls.n	800b48c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	200014d8 	.word	0x200014d8

0800b4d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4e0:	f001 fdca 	bl	800d078 <vPortEnterCritical>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4ea:	b25b      	sxtb	r3, r3
 800b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4f0:	d103      	bne.n	800b4fa <vQueueWaitForMessageRestricted+0x2a>
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b500:	b25b      	sxtb	r3, r3
 800b502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b506:	d103      	bne.n	800b510 <vQueueWaitForMessageRestricted+0x40>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b510:	f001 fde4 	bl	800d0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	3324      	adds	r3, #36	@ 0x24
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fd67 	bl	800bff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f7ff ff26 	bl	800b37c <prvUnlockQueue>
	}
 800b530:	bf00      	nop
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08e      	sub	sp, #56	@ 0x38
 800b53c:	af04      	add	r7, sp, #16
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
 800b544:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	623b      	str	r3, [r7, #32]
}
 800b55e:	bf00      	nop
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10b      	bne.n	800b582 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	61fb      	str	r3, [r7, #28]
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	e7fd      	b.n	800b57e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b582:	23a8      	movs	r3, #168	@ 0xa8
 800b584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2ba8      	cmp	r3, #168	@ 0xa8
 800b58a:	d00b      	beq.n	800b5a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	61bb      	str	r3, [r7, #24]
}
 800b59e:	bf00      	nop
 800b5a0:	bf00      	nop
 800b5a2:	e7fd      	b.n	800b5a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01e      	beq.n	800b5ea <xTaskCreateStatic+0xb2>
 800b5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01b      	beq.n	800b5ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	9302      	str	r3, [sp, #8]
 800b5cc:	f107 0314 	add.w	r3, r7, #20
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f851 	bl	800b684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5e4:	f000 f8f6 	bl	800b7d4 <prvAddNewTaskToReadyList>
 800b5e8:	e001      	b.n	800b5ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5ee:	697b      	ldr	r3, [r7, #20]
	}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3728      	adds	r7, #40	@ 0x28
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08c      	sub	sp, #48	@ 0x30
 800b5fc:	af04      	add	r7, sp, #16
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4613      	mov	r3, r2
 800b606:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 fe55 	bl	800d2bc <pvPortMalloc>
 800b612:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00e      	beq.n	800b638 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b61a:	20a8      	movs	r0, #168	@ 0xa8
 800b61c:	f001 fe4e 	bl	800d2bc <pvPortMalloc>
 800b620:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b62e:	e005      	b.n	800b63c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b630:	6978      	ldr	r0, [r7, #20]
 800b632:	f001 ff11 	bl	800d458 <vPortFree>
 800b636:	e001      	b.n	800b63c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b638:	2300      	movs	r3, #0
 800b63a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d017      	beq.n	800b672 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b64a:	88fa      	ldrh	r2, [r7, #6]
 800b64c:	2300      	movs	r3, #0
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	9302      	str	r3, [sp, #8]
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f80f 	bl	800b684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b666:	69f8      	ldr	r0, [r7, #28]
 800b668:	f000 f8b4 	bl	800b7d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b66c:	2301      	movs	r3, #1
 800b66e:	61bb      	str	r3, [r7, #24]
 800b670:	e002      	b.n	800b678 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b676:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b678:	69bb      	ldr	r3, [r7, #24]
	}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3720      	adds	r7, #32
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	461a      	mov	r2, r3
 800b69c:	21a5      	movs	r1, #165	@ 0xa5
 800b69e:	f002 f81b 	bl	800d6d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f023 0307 	bic.w	r3, r3, #7
 800b6ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00b      	beq.n	800b6de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	617b      	str	r3, [r7, #20]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01f      	beq.n	800b724 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	e012      	b.n	800b710 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	7819      	ldrb	r1, [r3, #0]
 800b6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	3334      	adds	r3, #52	@ 0x34
 800b6fa:	460a      	mov	r2, r1
 800b6fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	4413      	add	r3, r2
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d006      	beq.n	800b718 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	3301      	adds	r3, #1
 800b70e:	61fb      	str	r3, [r7, #28]
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b0f      	cmp	r3, #15
 800b714:	d9e9      	bls.n	800b6ea <prvInitialiseNewTask+0x66>
 800b716:	e000      	b.n	800b71a <prvInitialiseNewTask+0x96>
			{
				break;
 800b718:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b722:	e003      	b.n	800b72c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	2b37      	cmp	r3, #55	@ 0x37
 800b730:	d901      	bls.n	800b736 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b732:	2337      	movs	r3, #55	@ 0x37
 800b734:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b73a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b740:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	2200      	movs	r2, #0
 800b746:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff f965 	bl	800aa1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b754:	3318      	adds	r3, #24
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff f960 	bl	800aa1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b764:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b770:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	2200      	movs	r2, #0
 800b776:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	3354      	adds	r3, #84	@ 0x54
 800b786:	224c      	movs	r2, #76	@ 0x4c
 800b788:	2100      	movs	r1, #0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 ffa4 	bl	800d6d8 <memset>
 800b790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b792:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c8 <prvInitialiseNewTask+0x144>)
 800b794:	659a      	str	r2, [r3, #88]	@ 0x58
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	4a0c      	ldr	r2, [pc, #48]	@ (800b7cc <prvInitialiseNewTask+0x148>)
 800b79a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79e:	4a0c      	ldr	r2, [pc, #48]	@ (800b7d0 <prvInitialiseNewTask+0x14c>)
 800b7a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	68f9      	ldr	r1, [r7, #12]
 800b7a6:	69b8      	ldr	r0, [r7, #24]
 800b7a8:	f001 fb36 	bl	800ce18 <pxPortInitialiseStack>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7be:	bf00      	nop
 800b7c0:	3720      	adds	r7, #32
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	2000576c 	.word	0x2000576c
 800b7cc:	200057d4 	.word	0x200057d4
 800b7d0:	2000583c 	.word	0x2000583c

0800b7d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7dc:	f001 fc4c 	bl	800d078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b7e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7f8:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d110      	bne.n	800b822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b800:	f000 fd28 	bl	800c254 <prvInitialiseTaskLists>
 800b804:	e00d      	b.n	800b822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b806:	4b26      	ldr	r3, [pc, #152]	@ (800b8a0 <prvAddNewTaskToReadyList+0xcc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d109      	bne.n	800b822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b80e:	4b23      	ldr	r3, [pc, #140]	@ (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b818:	429a      	cmp	r2, r3
 800b81a:	d802      	bhi.n	800b822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b81c:	4a1f      	ldr	r2, [pc, #124]	@ (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b822:	4b20      	ldr	r3, [pc, #128]	@ (800b8a4 <prvAddNewTaskToReadyList+0xd0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3301      	adds	r3, #1
 800b828:	4a1e      	ldr	r2, [pc, #120]	@ (800b8a4 <prvAddNewTaskToReadyList+0xd0>)
 800b82a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b82c:	4b1d      	ldr	r3, [pc, #116]	@ (800b8a4 <prvAddNewTaskToReadyList+0xd0>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b838:	4b1b      	ldr	r3, [pc, #108]	@ (800b8a8 <prvAddNewTaskToReadyList+0xd4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d903      	bls.n	800b848 <prvAddNewTaskToReadyList+0x74>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	4a18      	ldr	r2, [pc, #96]	@ (800b8a8 <prvAddNewTaskToReadyList+0xd4>)
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4a15      	ldr	r2, [pc, #84]	@ (800b8ac <prvAddNewTaskToReadyList+0xd8>)
 800b856:	441a      	add	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4619      	mov	r1, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	f7ff f8e9 	bl	800aa36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b864:	f001 fc3a 	bl	800d0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b868:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a0 <prvAddNewTaskToReadyList+0xcc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00e      	beq.n	800b88e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b870:	4b0a      	ldr	r3, [pc, #40]	@ (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d207      	bcs.n	800b88e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b87e:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b0 <prvAddNewTaskToReadyList+0xdc>)
 800b880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	200019ec 	.word	0x200019ec
 800b89c:	20001518 	.word	0x20001518
 800b8a0:	200019f8 	.word	0x200019f8
 800b8a4:	20001a08 	.word	0x20001a08
 800b8a8:	200019f4 	.word	0x200019f4
 800b8ac:	2000151c 	.word	0x2000151c
 800b8b0:	e000ed04 	.word	0xe000ed04

0800b8b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d018      	beq.n	800b8f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8c6:	4b14      	ldr	r3, [pc, #80]	@ (800b918 <vTaskDelay+0x64>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <vTaskDelay+0x32>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60bb      	str	r3, [r7, #8]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8e6:	f000 f88b 	bl	800ba00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fee5 	bl	800c6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8f2:	f000 f893 	bl	800ba1c <xTaskResumeAll>
 800b8f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d107      	bne.n	800b90e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b8fe:	4b07      	ldr	r3, [pc, #28]	@ (800b91c <vTaskDelay+0x68>)
 800b900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b90e:	bf00      	nop
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20001a14 	.word	0x20001a14
 800b91c:	e000ed04 	.word	0xe000ed04

0800b920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	@ 0x28
 800b924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b92e:	463a      	mov	r2, r7
 800b930:	1d39      	adds	r1, r7, #4
 800b932:	f107 0308 	add.w	r3, r7, #8
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff f81c 	bl	800a974 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	9202      	str	r2, [sp, #8]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	2300      	movs	r3, #0
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	460a      	mov	r2, r1
 800b94e:	4924      	ldr	r1, [pc, #144]	@ (800b9e0 <vTaskStartScheduler+0xc0>)
 800b950:	4824      	ldr	r0, [pc, #144]	@ (800b9e4 <vTaskStartScheduler+0xc4>)
 800b952:	f7ff fdf1 	bl	800b538 <xTaskCreateStatic>
 800b956:	4603      	mov	r3, r0
 800b958:	4a23      	ldr	r2, [pc, #140]	@ (800b9e8 <vTaskStartScheduler+0xc8>)
 800b95a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b95c:	4b22      	ldr	r3, [pc, #136]	@ (800b9e8 <vTaskStartScheduler+0xc8>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b964:	2301      	movs	r3, #1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	e001      	b.n	800b96e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d102      	bne.n	800b97a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b974:	f000 fef6 	bl	800c764 <xTimerCreateTimerTask>
 800b978:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d11b      	bne.n	800b9b8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	613b      	str	r3, [r7, #16]
}
 800b992:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b994:	4b15      	ldr	r3, [pc, #84]	@ (800b9ec <vTaskStartScheduler+0xcc>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3354      	adds	r3, #84	@ 0x54
 800b99a:	4a15      	ldr	r2, [pc, #84]	@ (800b9f0 <vTaskStartScheduler+0xd0>)
 800b99c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b99e:	4b15      	ldr	r3, [pc, #84]	@ (800b9f4 <vTaskStartScheduler+0xd4>)
 800b9a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9a6:	4b14      	ldr	r3, [pc, #80]	@ (800b9f8 <vTaskStartScheduler+0xd8>)
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9ac:	4b13      	ldr	r3, [pc, #76]	@ (800b9fc <vTaskStartScheduler+0xdc>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9b2:	f001 fabd 	bl	800cf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9b6:	e00f      	b.n	800b9d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9be:	d10b      	bne.n	800b9d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	60fb      	str	r3, [r7, #12]
}
 800b9d2:	bf00      	nop
 800b9d4:	bf00      	nop
 800b9d6:	e7fd      	b.n	800b9d4 <vTaskStartScheduler+0xb4>
}
 800b9d8:	bf00      	nop
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	0800e2f4 	.word	0x0800e2f4
 800b9e4:	0800c225 	.word	0x0800c225
 800b9e8:	20001a10 	.word	0x20001a10
 800b9ec:	20001518 	.word	0x20001518
 800b9f0:	2000002c 	.word	0x2000002c
 800b9f4:	20001a0c 	.word	0x20001a0c
 800b9f8:	200019f8 	.word	0x200019f8
 800b9fc:	200019f0 	.word	0x200019f0

0800ba00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba04:	4b04      	ldr	r3, [pc, #16]	@ (800ba18 <vTaskSuspendAll+0x18>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4a03      	ldr	r2, [pc, #12]	@ (800ba18 <vTaskSuspendAll+0x18>)
 800ba0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba0e:	bf00      	nop
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	20001a14 	.word	0x20001a14

0800ba1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba2a:	4b42      	ldr	r3, [pc, #264]	@ (800bb34 <xTaskResumeAll+0x118>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10b      	bne.n	800ba4a <xTaskResumeAll+0x2e>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	603b      	str	r3, [r7, #0]
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	e7fd      	b.n	800ba46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba4a:	f001 fb15 	bl	800d078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba4e:	4b39      	ldr	r3, [pc, #228]	@ (800bb34 <xTaskResumeAll+0x118>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	4a37      	ldr	r2, [pc, #220]	@ (800bb34 <xTaskResumeAll+0x118>)
 800ba56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba58:	4b36      	ldr	r3, [pc, #216]	@ (800bb34 <xTaskResumeAll+0x118>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d162      	bne.n	800bb26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba60:	4b35      	ldr	r3, [pc, #212]	@ (800bb38 <xTaskResumeAll+0x11c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d05e      	beq.n	800bb26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba68:	e02f      	b.n	800baca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6a:	4b34      	ldr	r3, [pc, #208]	@ (800bb3c <xTaskResumeAll+0x120>)
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3318      	adds	r3, #24
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff f83a 	bl	800aaf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff f835 	bl	800aaf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8a:	4b2d      	ldr	r3, [pc, #180]	@ (800bb40 <xTaskResumeAll+0x124>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d903      	bls.n	800ba9a <xTaskResumeAll+0x7e>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba96:	4a2a      	ldr	r2, [pc, #168]	@ (800bb40 <xTaskResumeAll+0x124>)
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9e:	4613      	mov	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4a27      	ldr	r2, [pc, #156]	@ (800bb44 <xTaskResumeAll+0x128>)
 800baa8:	441a      	add	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f7fe ffc0 	bl	800aa36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baba:	4b23      	ldr	r3, [pc, #140]	@ (800bb48 <xTaskResumeAll+0x12c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d302      	bcc.n	800baca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bac4:	4b21      	ldr	r3, [pc, #132]	@ (800bb4c <xTaskResumeAll+0x130>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baca:	4b1c      	ldr	r3, [pc, #112]	@ (800bb3c <xTaskResumeAll+0x120>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1cb      	bne.n	800ba6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bad8:	f000 fc60 	bl	800c39c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800badc:	4b1c      	ldr	r3, [pc, #112]	@ (800bb50 <xTaskResumeAll+0x134>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d010      	beq.n	800bb0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bae8:	f000 f940 	bl	800bd6c <xTaskIncrementTick>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800baf2:	4b16      	ldr	r3, [pc, #88]	@ (800bb4c <xTaskResumeAll+0x130>)
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f1      	bne.n	800bae8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bb04:	4b12      	ldr	r3, [pc, #72]	@ (800bb50 <xTaskResumeAll+0x134>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb0a:	4b10      	ldr	r3, [pc, #64]	@ (800bb4c <xTaskResumeAll+0x130>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d009      	beq.n	800bb26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb16:	4b0f      	ldr	r3, [pc, #60]	@ (800bb54 <xTaskResumeAll+0x138>)
 800bb18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb26:	f001 fad9 	bl	800d0dc <vPortExitCritical>

	return xAlreadyYielded;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20001a14 	.word	0x20001a14
 800bb38:	200019ec 	.word	0x200019ec
 800bb3c:	200019ac 	.word	0x200019ac
 800bb40:	200019f4 	.word	0x200019f4
 800bb44:	2000151c 	.word	0x2000151c
 800bb48:	20001518 	.word	0x20001518
 800bb4c:	20001a00 	.word	0x20001a00
 800bb50:	200019fc 	.word	0x200019fc
 800bb54:	e000ed04 	.word	0xe000ed04

0800bb58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb5e:	4b05      	ldr	r3, [pc, #20]	@ (800bb74 <xTaskGetTickCount+0x1c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb64:	687b      	ldr	r3, [r7, #4]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	200019f0 	.word	0x200019f0

0800bb78 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <pcTaskGetName+0x14>
 800bb86:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc0 <pcTaskGetName+0x48>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	e000      	b.n	800bb8e <pcTaskGetName+0x16>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10b      	bne.n	800bbae <pcTaskGetName+0x36>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	60bb      	str	r3, [r7, #8]
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	e7fd      	b.n	800bbaa <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3334      	adds	r3, #52	@ 0x34
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20001518 	.word	0x20001518

0800bbc4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b08b      	sub	sp, #44	@ 0x2c
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d05b      	beq.n	800bc92 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	61bb      	str	r3, [r7, #24]
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	605a      	str	r2, [r3, #4]
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	3308      	adds	r3, #8
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d104      	bne.n	800bbfe <prvSearchForNameWithinSingleList+0x3a>
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	605a      	str	r2, [r3, #4]
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	605a      	str	r2, [r3, #4]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d104      	bne.n	800bc2a <prvSearchForNameWithinSingleList+0x66>
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800bc32:	2300      	movs	r3, #0
 800bc34:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc36:	2300      	movs	r3, #0
 800bc38:	623b      	str	r3, [r7, #32]
 800bc3a:	e01c      	b.n	800bc76 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	4413      	add	r3, r2
 800bc42:	3334      	adds	r3, #52	@ 0x34
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	7afa      	ldrb	r2, [r7, #11]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d002      	beq.n	800bc5c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800bc56:	2301      	movs	r3, #1
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e006      	b.n	800bc6a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800bc5c:	7afb      	ldrb	r3, [r7, #11]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800bc66:	2301      	movs	r3, #1
 800bc68:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	3301      	adds	r3, #1
 800bc74:	623b      	str	r3, [r7, #32]
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	2b0f      	cmp	r3, #15
 800bc7a:	d9df      	bls.n	800bc3c <prvSearchForNameWithinSingleList+0x78>
 800bc7c:	e000      	b.n	800bc80 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800bc7e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d104      	bne.n	800bc90 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d1bb      	bne.n	800bc06 <prvSearchForNameWithinSingleList+0x42>
 800bc8e:	e000      	b.n	800bc92 <prvSearchForNameWithinSingleList+0xce>
					break;
 800bc90:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bc94:	4618      	mov	r0, r3
 800bc96:	372c      	adds	r7, #44	@ 0x2c
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800bca8:	2338      	movs	r3, #56	@ 0x38
 800bcaa:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7f4 fa8f 	bl	80001d0 <strlen>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b0f      	cmp	r3, #15
 800bcb6:	d90b      	bls.n	800bcd0 <xTaskGetHandle+0x30>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	60fb      	str	r3, [r7, #12]
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	e7fd      	b.n	800bccc <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800bcd0:	f7ff fe96 	bl	800ba00 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd58 <xTaskGetHandle+0xb8>)
 800bce6:	4413      	add	r3, r2
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff ff6a 	bl	800bbc4 <prvSearchForNameWithinSingleList>
 800bcf0:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d103      	bne.n	800bd00 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1ea      	bne.n	800bcd4 <xTaskGetHandle+0x34>
 800bcfe:	e000      	b.n	800bd02 <xTaskGetHandle+0x62>
					break;
 800bd00:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d106      	bne.n	800bd16 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bd08:	4b14      	ldr	r3, [pc, #80]	@ (800bd5c <xTaskGetHandle+0xbc>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff ff58 	bl	800bbc4 <prvSearchForNameWithinSingleList>
 800bd14:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d106      	bne.n	800bd2a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bd1c:	4b10      	ldr	r3, [pc, #64]	@ (800bd60 <xTaskGetHandle+0xc0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7ff ff4e 	bl	800bbc4 <prvSearchForNameWithinSingleList>
 800bd28:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d104      	bne.n	800bd3a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	480c      	ldr	r0, [pc, #48]	@ (800bd64 <xTaskGetHandle+0xc4>)
 800bd34:	f7ff ff46 	bl	800bbc4 <prvSearchForNameWithinSingleList>
 800bd38:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d104      	bne.n	800bd4a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4809      	ldr	r0, [pc, #36]	@ (800bd68 <xTaskGetHandle+0xc8>)
 800bd44:	f7ff ff3e 	bl	800bbc4 <prvSearchForNameWithinSingleList>
 800bd48:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800bd4a:	f7ff fe67 	bl	800ba1c <xTaskResumeAll>

		return pxTCB;
 800bd4e:	693b      	ldr	r3, [r7, #16]
	}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	2000151c 	.word	0x2000151c
 800bd5c:	200019a4 	.word	0x200019a4
 800bd60:	200019a8 	.word	0x200019a8
 800bd64:	200019d8 	.word	0x200019d8
 800bd68:	200019c0 	.word	0x200019c0

0800bd6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd76:	4b4f      	ldr	r3, [pc, #316]	@ (800beb4 <xTaskIncrementTick+0x148>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f040 8090 	bne.w	800bea0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd80:	4b4d      	ldr	r3, [pc, #308]	@ (800beb8 <xTaskIncrementTick+0x14c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3301      	adds	r3, #1
 800bd86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd88:	4a4b      	ldr	r2, [pc, #300]	@ (800beb8 <xTaskIncrementTick+0x14c>)
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d121      	bne.n	800bdd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd94:	4b49      	ldr	r3, [pc, #292]	@ (800bebc <xTaskIncrementTick+0x150>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	603b      	str	r3, [r7, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	e7fd      	b.n	800bdb2 <xTaskIncrementTick+0x46>
 800bdb6:	4b41      	ldr	r3, [pc, #260]	@ (800bebc <xTaskIncrementTick+0x150>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	4b40      	ldr	r3, [pc, #256]	@ (800bec0 <xTaskIncrementTick+0x154>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a3e      	ldr	r2, [pc, #248]	@ (800bebc <xTaskIncrementTick+0x150>)
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	4a3e      	ldr	r2, [pc, #248]	@ (800bec0 <xTaskIncrementTick+0x154>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	4b3e      	ldr	r3, [pc, #248]	@ (800bec4 <xTaskIncrementTick+0x158>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	4a3c      	ldr	r2, [pc, #240]	@ (800bec4 <xTaskIncrementTick+0x158>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	f000 fae2 	bl	800c39c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdd8:	4b3b      	ldr	r3, [pc, #236]	@ (800bec8 <xTaskIncrementTick+0x15c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d349      	bcc.n	800be76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bde2:	4b36      	ldr	r3, [pc, #216]	@ (800bebc <xTaskIncrementTick+0x150>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdec:	4b36      	ldr	r3, [pc, #216]	@ (800bec8 <xTaskIncrementTick+0x15c>)
 800bdee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdf2:	601a      	str	r2, [r3, #0]
					break;
 800bdf4:	e03f      	b.n	800be76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf6:	4b31      	ldr	r3, [pc, #196]	@ (800bebc <xTaskIncrementTick+0x150>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d203      	bcs.n	800be16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be0e:	4a2e      	ldr	r2, [pc, #184]	@ (800bec8 <xTaskIncrementTick+0x15c>)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be14:	e02f      	b.n	800be76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3304      	adds	r3, #4
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fe68 	bl	800aaf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be24:	2b00      	cmp	r3, #0
 800be26:	d004      	beq.n	800be32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3318      	adds	r3, #24
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fe fe5f 	bl	800aaf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be36:	4b25      	ldr	r3, [pc, #148]	@ (800becc <xTaskIncrementTick+0x160>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d903      	bls.n	800be46 <xTaskIncrementTick+0xda>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be42:	4a22      	ldr	r2, [pc, #136]	@ (800becc <xTaskIncrementTick+0x160>)
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4a1f      	ldr	r2, [pc, #124]	@ (800bed0 <xTaskIncrementTick+0x164>)
 800be54:	441a      	add	r2, r3
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	3304      	adds	r3, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f7fe fdea 	bl	800aa36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be66:	4b1b      	ldr	r3, [pc, #108]	@ (800bed4 <xTaskIncrementTick+0x168>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3b8      	bcc.n	800bde2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be70:	2301      	movs	r3, #1
 800be72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be74:	e7b5      	b.n	800bde2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be76:	4b17      	ldr	r3, [pc, #92]	@ (800bed4 <xTaskIncrementTick+0x168>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be7c:	4914      	ldr	r1, [pc, #80]	@ (800bed0 <xTaskIncrementTick+0x164>)
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	440b      	add	r3, r1
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d901      	bls.n	800be92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800be8e:	2301      	movs	r3, #1
 800be90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be92:	4b11      	ldr	r3, [pc, #68]	@ (800bed8 <xTaskIncrementTick+0x16c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d007      	beq.n	800beaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	e004      	b.n	800beaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bea0:	4b0e      	ldr	r3, [pc, #56]	@ (800bedc <xTaskIncrementTick+0x170>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3301      	adds	r3, #1
 800bea6:	4a0d      	ldr	r2, [pc, #52]	@ (800bedc <xTaskIncrementTick+0x170>)
 800bea8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800beaa:	697b      	ldr	r3, [r7, #20]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20001a14 	.word	0x20001a14
 800beb8:	200019f0 	.word	0x200019f0
 800bebc:	200019a4 	.word	0x200019a4
 800bec0:	200019a8 	.word	0x200019a8
 800bec4:	20001a04 	.word	0x20001a04
 800bec8:	20001a0c 	.word	0x20001a0c
 800becc:	200019f4 	.word	0x200019f4
 800bed0:	2000151c 	.word	0x2000151c
 800bed4:	20001518 	.word	0x20001518
 800bed8:	20001a00 	.word	0x20001a00
 800bedc:	200019fc 	.word	0x200019fc

0800bee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bee6:	4b2b      	ldr	r3, [pc, #172]	@ (800bf94 <vTaskSwitchContext+0xb4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800beee:	4b2a      	ldr	r3, [pc, #168]	@ (800bf98 <vTaskSwitchContext+0xb8>)
 800bef0:	2201      	movs	r2, #1
 800bef2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bef4:	e047      	b.n	800bf86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bef6:	4b28      	ldr	r3, [pc, #160]	@ (800bf98 <vTaskSwitchContext+0xb8>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befc:	4b27      	ldr	r3, [pc, #156]	@ (800bf9c <vTaskSwitchContext+0xbc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e011      	b.n	800bf28 <vTaskSwitchContext+0x48>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <vTaskSwitchContext+0x42>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	607b      	str	r3, [r7, #4]
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	e7fd      	b.n	800bf1e <vTaskSwitchContext+0x3e>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	491d      	ldr	r1, [pc, #116]	@ (800bfa0 <vTaskSwitchContext+0xc0>)
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0e3      	beq.n	800bf04 <vTaskSwitchContext+0x24>
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4a16      	ldr	r2, [pc, #88]	@ (800bfa0 <vTaskSwitchContext+0xc0>)
 800bf48:	4413      	add	r3, r2
 800bf4a:	60bb      	str	r3, [r7, #8]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d104      	bne.n	800bf6c <vTaskSwitchContext+0x8c>
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	605a      	str	r2, [r3, #4]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa4 <vTaskSwitchContext+0xc4>)
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	4a09      	ldr	r2, [pc, #36]	@ (800bf9c <vTaskSwitchContext+0xbc>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf7c:	4b09      	ldr	r3, [pc, #36]	@ (800bfa4 <vTaskSwitchContext+0xc4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3354      	adds	r3, #84	@ 0x54
 800bf82:	4a09      	ldr	r2, [pc, #36]	@ (800bfa8 <vTaskSwitchContext+0xc8>)
 800bf84:	6013      	str	r3, [r2, #0]
}
 800bf86:	bf00      	nop
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20001a14 	.word	0x20001a14
 800bf98:	20001a00 	.word	0x20001a00
 800bf9c:	200019f4 	.word	0x200019f4
 800bfa0:	2000151c 	.word	0x2000151c
 800bfa4:	20001518 	.word	0x20001518
 800bfa8:	2000002c 	.word	0x2000002c

0800bfac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	60fb      	str	r3, [r7, #12]
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	e7fd      	b.n	800bfd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfd4:	4b07      	ldr	r3, [pc, #28]	@ (800bff4 <vTaskPlaceOnEventList+0x48>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3318      	adds	r3, #24
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7fe fd4e 	bl	800aa7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	6838      	ldr	r0, [r7, #0]
 800bfe6:	f000 fb69 	bl	800c6bc <prvAddCurrentTaskToDelayedList>
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20001518 	.word	0x20001518

0800bff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	617b      	str	r3, [r7, #20]
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	e7fd      	b.n	800c01e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c022:	4b0a      	ldr	r3, [pc, #40]	@ (800c04c <vTaskPlaceOnEventListRestricted+0x54>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3318      	adds	r3, #24
 800c028:	4619      	mov	r1, r3
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7fe fd03 	bl	800aa36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c03a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	68b8      	ldr	r0, [r7, #8]
 800c040:	f000 fb3c 	bl	800c6bc <prvAddCurrentTaskToDelayedList>
	}
 800c044:	bf00      	nop
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	20001518 	.word	0x20001518

0800c050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10b      	bne.n	800c07e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	60fb      	str	r3, [r7, #12]
}
 800c078:	bf00      	nop
 800c07a:	bf00      	nop
 800c07c:	e7fd      	b.n	800c07a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	3318      	adds	r3, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fd34 	bl	800aaf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c088:	4b1d      	ldr	r3, [pc, #116]	@ (800c100 <xTaskRemoveFromEventList+0xb0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d11d      	bne.n	800c0cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	3304      	adds	r3, #4
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fd2b 	bl	800aaf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09e:	4b19      	ldr	r3, [pc, #100]	@ (800c104 <xTaskRemoveFromEventList+0xb4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d903      	bls.n	800c0ae <xTaskRemoveFromEventList+0x5e>
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0aa:	4a16      	ldr	r2, [pc, #88]	@ (800c104 <xTaskRemoveFromEventList+0xb4>)
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4a13      	ldr	r2, [pc, #76]	@ (800c108 <xTaskRemoveFromEventList+0xb8>)
 800c0bc:	441a      	add	r2, r3
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	f7fe fcb6 	bl	800aa36 <vListInsertEnd>
 800c0ca:	e005      	b.n	800c0d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3318      	adds	r3, #24
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	480e      	ldr	r0, [pc, #56]	@ (800c10c <xTaskRemoveFromEventList+0xbc>)
 800c0d4:	f7fe fcaf 	bl	800aa36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c110 <xTaskRemoveFromEventList+0xc0>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d905      	bls.n	800c0f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <xTaskRemoveFromEventList+0xc4>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e001      	b.n	800c0f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0f6:	697b      	ldr	r3, [r7, #20]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20001a14 	.word	0x20001a14
 800c104:	200019f4 	.word	0x200019f4
 800c108:	2000151c 	.word	0x2000151c
 800c10c:	200019ac 	.word	0x200019ac
 800c110:	20001518 	.word	0x20001518
 800c114:	20001a00 	.word	0x20001a00

0800c118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c120:	4b06      	ldr	r3, [pc, #24]	@ (800c13c <vTaskInternalSetTimeOutState+0x24>)
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c128:	4b05      	ldr	r3, [pc, #20]	@ (800c140 <vTaskInternalSetTimeOutState+0x28>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	605a      	str	r2, [r3, #4]
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	20001a04 	.word	0x20001a04
 800c140:	200019f0 	.word	0x200019f0

0800c144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10b      	bne.n	800c16c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	613b      	str	r3, [r7, #16]
}
 800c166:	bf00      	nop
 800c168:	bf00      	nop
 800c16a:	e7fd      	b.n	800c168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10b      	bne.n	800c18a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60fb      	str	r3, [r7, #12]
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop
 800c188:	e7fd      	b.n	800c186 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c18a:	f000 ff75 	bl	800d078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c18e:	4b1d      	ldr	r3, [pc, #116]	@ (800c204 <xTaskCheckForTimeOut+0xc0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	69ba      	ldr	r2, [r7, #24]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1a6:	d102      	bne.n	800c1ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	61fb      	str	r3, [r7, #28]
 800c1ac:	e023      	b.n	800c1f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b15      	ldr	r3, [pc, #84]	@ (800c208 <xTaskCheckForTimeOut+0xc4>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d007      	beq.n	800c1ca <xTaskCheckForTimeOut+0x86>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d302      	bcc.n	800c1ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	61fb      	str	r3, [r7, #28]
 800c1c8:	e015      	b.n	800c1f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d20b      	bcs.n	800c1ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	1ad2      	subs	r2, r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff ff99 	bl	800c118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e004      	b.n	800c1f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1f6:	f000 ff71 	bl	800d0dc <vPortExitCritical>

	return xReturn;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3720      	adds	r7, #32
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	200019f0 	.word	0x200019f0
 800c208:	20001a04 	.word	0x20001a04

0800c20c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c210:	4b03      	ldr	r3, [pc, #12]	@ (800c220 <vTaskMissedYield+0x14>)
 800c212:	2201      	movs	r2, #1
 800c214:	601a      	str	r2, [r3, #0]
}
 800c216:	bf00      	nop
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	20001a00 	.word	0x20001a00

0800c224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c22c:	f000 f852 	bl	800c2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c230:	4b06      	ldr	r3, [pc, #24]	@ (800c24c <prvIdleTask+0x28>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d9f9      	bls.n	800c22c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c238:	4b05      	ldr	r3, [pc, #20]	@ (800c250 <prvIdleTask+0x2c>)
 800c23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c248:	e7f0      	b.n	800c22c <prvIdleTask+0x8>
 800c24a:	bf00      	nop
 800c24c:	2000151c 	.word	0x2000151c
 800c250:	e000ed04 	.word	0xe000ed04

0800c254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c25a:	2300      	movs	r3, #0
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	e00c      	b.n	800c27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a12      	ldr	r2, [pc, #72]	@ (800c2b4 <prvInitialiseTaskLists+0x60>)
 800c26c:	4413      	add	r3, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fbb4 	bl	800a9dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3301      	adds	r3, #1
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b37      	cmp	r3, #55	@ 0x37
 800c27e:	d9ef      	bls.n	800c260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c280:	480d      	ldr	r0, [pc, #52]	@ (800c2b8 <prvInitialiseTaskLists+0x64>)
 800c282:	f7fe fbab 	bl	800a9dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c286:	480d      	ldr	r0, [pc, #52]	@ (800c2bc <prvInitialiseTaskLists+0x68>)
 800c288:	f7fe fba8 	bl	800a9dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c28c:	480c      	ldr	r0, [pc, #48]	@ (800c2c0 <prvInitialiseTaskLists+0x6c>)
 800c28e:	f7fe fba5 	bl	800a9dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c292:	480c      	ldr	r0, [pc, #48]	@ (800c2c4 <prvInitialiseTaskLists+0x70>)
 800c294:	f7fe fba2 	bl	800a9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c298:	480b      	ldr	r0, [pc, #44]	@ (800c2c8 <prvInitialiseTaskLists+0x74>)
 800c29a:	f7fe fb9f 	bl	800a9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c29e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2cc <prvInitialiseTaskLists+0x78>)
 800c2a0:	4a05      	ldr	r2, [pc, #20]	@ (800c2b8 <prvInitialiseTaskLists+0x64>)
 800c2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d0 <prvInitialiseTaskLists+0x7c>)
 800c2a6:	4a05      	ldr	r2, [pc, #20]	@ (800c2bc <prvInitialiseTaskLists+0x68>)
 800c2a8:	601a      	str	r2, [r3, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	2000151c 	.word	0x2000151c
 800c2b8:	2000197c 	.word	0x2000197c
 800c2bc:	20001990 	.word	0x20001990
 800c2c0:	200019ac 	.word	0x200019ac
 800c2c4:	200019c0 	.word	0x200019c0
 800c2c8:	200019d8 	.word	0x200019d8
 800c2cc:	200019a4 	.word	0x200019a4
 800c2d0:	200019a8 	.word	0x200019a8

0800c2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2da:	e019      	b.n	800c310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2dc:	f000 fecc 	bl	800d078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2e0:	4b10      	ldr	r3, [pc, #64]	@ (800c324 <prvCheckTasksWaitingTermination+0x50>)
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fbff 	bl	800aaf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <prvCheckTasksWaitingTermination+0x54>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800c328 <prvCheckTasksWaitingTermination+0x54>)
 800c2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	4a0a      	ldr	r2, [pc, #40]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c306:	f000 fee9 	bl	800d0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f810 	bl	800c330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c310:	4b06      	ldr	r3, [pc, #24]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e1      	bne.n	800c2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200019c0 	.word	0x200019c0
 800c328:	200019ec 	.word	0x200019ec
 800c32c:	200019d4 	.word	0x200019d4

0800c330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3354      	adds	r3, #84	@ 0x54
 800c33c:	4618      	mov	r0, r3
 800c33e:	f001 f9d3 	bl	800d6e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d108      	bne.n	800c35e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c350:	4618      	mov	r0, r3
 800c352:	f001 f881 	bl	800d458 <vPortFree>
				vPortFree( pxTCB );
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f001 f87e 	bl	800d458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c35c:	e019      	b.n	800c392 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c364:	2b01      	cmp	r3, #1
 800c366:	d103      	bne.n	800c370 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f001 f875 	bl	800d458 <vPortFree>
	}
 800c36e:	e010      	b.n	800c392 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c376:	2b02      	cmp	r3, #2
 800c378:	d00b      	beq.n	800c392 <prvDeleteTCB+0x62>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	60fb      	str	r3, [r7, #12]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <prvDeleteTCB+0x5e>
	}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d4 <prvResetNextTaskUnblockTime+0x38>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3b4:	e008      	b.n	800c3c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b6:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <prvResetNextTaskUnblockTime+0x38>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	4a04      	ldr	r2, [pc, #16]	@ (800c3d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3c6:	6013      	str	r3, [r2, #0]
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	200019a4 	.word	0x200019a4
 800c3d8:	20001a0c 	.word	0x20001a0c

0800c3dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c410 <xTaskGetSchedulerState+0x34>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d102      	bne.n	800c3f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	607b      	str	r3, [r7, #4]
 800c3ee:	e008      	b.n	800c402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f0:	4b08      	ldr	r3, [pc, #32]	@ (800c414 <xTaskGetSchedulerState+0x38>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e001      	b.n	800c402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3fe:	2300      	movs	r3, #0
 800c400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c402:	687b      	ldr	r3, [r7, #4]
	}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	200019f8 	.word	0x200019f8
 800c414:	20001a14 	.word	0x20001a14

0800c418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d058      	beq.n	800c4e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c42e:	4b2f      	ldr	r3, [pc, #188]	@ (800c4ec <xTaskPriorityDisinherit+0xd4>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	429a      	cmp	r2, r3
 800c436:	d00b      	beq.n	800c450 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60fb      	str	r3, [r7, #12]
}
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
 800c44e:	e7fd      	b.n	800c44c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10b      	bne.n	800c470 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	60bb      	str	r3, [r7, #8]
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	e7fd      	b.n	800c46c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c474:	1e5a      	subs	r2, r3, #1
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c482:	429a      	cmp	r2, r3
 800c484:	d02c      	beq.n	800c4e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d128      	bne.n	800c4e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3304      	adds	r3, #4
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe fb2c 	bl	800aaf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f0 <xTaskPriorityDisinherit+0xd8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d903      	bls.n	800c4c0 <xTaskPriorityDisinherit+0xa8>
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4bc:	4a0c      	ldr	r2, [pc, #48]	@ (800c4f0 <xTaskPriorityDisinherit+0xd8>)
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4413      	add	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <xTaskPriorityDisinherit+0xdc>)
 800c4ce:	441a      	add	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7fe faad 	bl	800aa36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4e0:	697b      	ldr	r3, [r7, #20]
	}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20001518 	.word	0x20001518
 800c4f0:	200019f4 	.word	0x200019f4
 800c4f4:	2000151c 	.word	0x2000151c

0800c4f8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c502:	f000 fdb9 	bl	800d078 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c506:	4b20      	ldr	r3, [pc, #128]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d113      	bne.n	800c53a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c512:	4b1d      	ldr	r3, [pc, #116]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00b      	beq.n	800c53a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c522:	2101      	movs	r1, #1
 800c524:	6838      	ldr	r0, [r7, #0]
 800c526:	f000 f8c9 	bl	800c6bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c52a:	4b18      	ldr	r3, [pc, #96]	@ (800c58c <ulTaskNotifyTake+0x94>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c53a:	f000 fdcf 	bl	800d0dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800c53e:	f000 fd9b 	bl	800d078 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c542:	4b11      	ldr	r3, [pc, #68]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c54a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00e      	beq.n	800c570 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c558:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c562:	e005      	b.n	800c570 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c564:	4b08      	ldr	r3, [pc, #32]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	3a01      	subs	r2, #1
 800c56c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c570:	4b05      	ldr	r3, [pc, #20]	@ (800c588 <ulTaskNotifyTake+0x90>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c57a:	f000 fdaf 	bl	800d0dc <vPortExitCritical>

		return ulReturn;
 800c57e:	68fb      	ldr	r3, [r7, #12]
	}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	20001518 	.word	0x20001518
 800c58c:	e000ed04 	.word	0xe000ed04

0800c590 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08a      	sub	sp, #40	@ 0x28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10b      	bne.n	800c5b8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	61bb      	str	r3, [r7, #24]
}
 800c5b2:	bf00      	nop
 800c5b4:	bf00      	nop
 800c5b6:	e7fd      	b.n	800c5b4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5b8:	f000 fe3e 	bl	800d238 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c5c0:	f3ef 8211 	mrs	r2, BASEPRI
 800c5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	617a      	str	r2, [r7, #20]
 800c5d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c5d8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5da:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c5e2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c5fa:	7ffb      	ldrb	r3, [r7, #31]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d147      	bne.n	800c690 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	60fb      	str	r3, [r7, #12]
}
 800c61a:	bf00      	nop
 800c61c:	bf00      	nop
 800c61e:	e7fd      	b.n	800c61c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c620:	4b20      	ldr	r3, [pc, #128]	@ (800c6a4 <vTaskNotifyGiveFromISR+0x114>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d11d      	bne.n	800c664 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	3304      	adds	r3, #4
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7fe fa5f 	bl	800aaf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c636:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a8 <vTaskNotifyGiveFromISR+0x118>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d903      	bls.n	800c646 <vTaskNotifyGiveFromISR+0xb6>
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c642:	4a19      	ldr	r2, [pc, #100]	@ (800c6a8 <vTaskNotifyGiveFromISR+0x118>)
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4a16      	ldr	r2, [pc, #88]	@ (800c6ac <vTaskNotifyGiveFromISR+0x11c>)
 800c654:	441a      	add	r2, r3
 800c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c658:	3304      	adds	r3, #4
 800c65a:	4619      	mov	r1, r3
 800c65c:	4610      	mov	r0, r2
 800c65e:	f7fe f9ea 	bl	800aa36 <vListInsertEnd>
 800c662:	e005      	b.n	800c670 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	3318      	adds	r3, #24
 800c668:	4619      	mov	r1, r3
 800c66a:	4811      	ldr	r0, [pc, #68]	@ (800c6b0 <vTaskNotifyGiveFromISR+0x120>)
 800c66c:	f7fe f9e3 	bl	800aa36 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c674:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b4 <vTaskNotifyGiveFromISR+0x124>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d908      	bls.n	800c690 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c68a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b8 <vTaskNotifyGiveFromISR+0x128>)
 800c68c:	2201      	movs	r2, #1
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f383 8811 	msr	BASEPRI, r3
}
 800c69a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c69c:	bf00      	nop
 800c69e:	3728      	adds	r7, #40	@ 0x28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20001a14 	.word	0x20001a14
 800c6a8:	200019f4 	.word	0x200019f4
 800c6ac:	2000151c 	.word	0x2000151c
 800c6b0:	200019ac 	.word	0x200019ac
 800c6b4:	20001518 	.word	0x20001518
 800c6b8:	20001a00 	.word	0x20001a00

0800c6bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6c6:	4b21      	ldr	r3, [pc, #132]	@ (800c74c <prvAddCurrentTaskToDelayedList+0x90>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6cc:	4b20      	ldr	r3, [pc, #128]	@ (800c750 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe fa0c 	bl	800aaf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6de:	d10a      	bne.n	800c6f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d007      	beq.n	800c6f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c750 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4819      	ldr	r0, [pc, #100]	@ (800c754 <prvAddCurrentTaskToDelayedList+0x98>)
 800c6f0:	f7fe f9a1 	bl	800aa36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6f4:	e026      	b.n	800c744 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6fe:	4b14      	ldr	r3, [pc, #80]	@ (800c750 <prvAddCurrentTaskToDelayedList+0x94>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d209      	bcs.n	800c722 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c70e:	4b12      	ldr	r3, [pc, #72]	@ (800c758 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	4b0f      	ldr	r3, [pc, #60]	@ (800c750 <prvAddCurrentTaskToDelayedList+0x94>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3304      	adds	r3, #4
 800c718:	4619      	mov	r1, r3
 800c71a:	4610      	mov	r0, r2
 800c71c:	f7fe f9af 	bl	800aa7e <vListInsert>
}
 800c720:	e010      	b.n	800c744 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c722:	4b0e      	ldr	r3, [pc, #56]	@ (800c75c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4b0a      	ldr	r3, [pc, #40]	@ (800c750 <prvAddCurrentTaskToDelayedList+0x94>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4619      	mov	r1, r3
 800c72e:	4610      	mov	r0, r2
 800c730:	f7fe f9a5 	bl	800aa7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c734:	4b0a      	ldr	r3, [pc, #40]	@ (800c760 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d202      	bcs.n	800c744 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c73e:	4a08      	ldr	r2, [pc, #32]	@ (800c760 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	6013      	str	r3, [r2, #0]
}
 800c744:	bf00      	nop
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	200019f0 	.word	0x200019f0
 800c750:	20001518 	.word	0x20001518
 800c754:	200019d8 	.word	0x200019d8
 800c758:	200019a8 	.word	0x200019a8
 800c75c:	200019a4 	.word	0x200019a4
 800c760:	20001a0c 	.word	0x20001a0c

0800c764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	@ 0x28
 800c768:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c76e:	f000 fb13 	bl	800cd98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c772:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e8 <xTimerCreateTimerTask+0x84>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d021      	beq.n	800c7be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c782:	1d3a      	adds	r2, r7, #4
 800c784:	f107 0108 	add.w	r1, r7, #8
 800c788:	f107 030c 	add.w	r3, r7, #12
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe f90b 	bl	800a9a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	9202      	str	r2, [sp, #8]
 800c79a:	9301      	str	r3, [sp, #4]
 800c79c:	2302      	movs	r3, #2
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	460a      	mov	r2, r1
 800c7a4:	4911      	ldr	r1, [pc, #68]	@ (800c7ec <xTimerCreateTimerTask+0x88>)
 800c7a6:	4812      	ldr	r0, [pc, #72]	@ (800c7f0 <xTimerCreateTimerTask+0x8c>)
 800c7a8:	f7fe fec6 	bl	800b538 <xTaskCreateStatic>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	4a11      	ldr	r2, [pc, #68]	@ (800c7f4 <xTimerCreateTimerTask+0x90>)
 800c7b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7b2:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <xTimerCreateTimerTask+0x90>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	613b      	str	r3, [r7, #16]
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c7dc:	697b      	ldr	r3, [r7, #20]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3718      	adds	r7, #24
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20001a48 	.word	0x20001a48
 800c7ec:	0800e2fc 	.word	0x0800e2fc
 800c7f0:	0800c931 	.word	0x0800c931
 800c7f4:	20001a4c 	.word	0x20001a4c

0800c7f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08a      	sub	sp, #40	@ 0x28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c806:	2300      	movs	r3, #0
 800c808:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10b      	bne.n	800c828 <xTimerGenericCommand+0x30>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	623b      	str	r3, [r7, #32]
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	e7fd      	b.n	800c824 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c828:	4b19      	ldr	r3, [pc, #100]	@ (800c890 <xTimerGenericCommand+0x98>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d02a      	beq.n	800c886 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b05      	cmp	r3, #5
 800c840:	dc18      	bgt.n	800c874 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c842:	f7ff fdcb 	bl	800c3dc <xTaskGetSchedulerState>
 800c846:	4603      	mov	r3, r0
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d109      	bne.n	800c860 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c84c:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <xTimerGenericCommand+0x98>)
 800c84e:	6818      	ldr	r0, [r3, #0]
 800c850:	f107 0110 	add.w	r1, r7, #16
 800c854:	2300      	movs	r3, #0
 800c856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c858:	f7fe fa7e 	bl	800ad58 <xQueueGenericSend>
 800c85c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c85e:	e012      	b.n	800c886 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c860:	4b0b      	ldr	r3, [pc, #44]	@ (800c890 <xTimerGenericCommand+0x98>)
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	f107 0110 	add.w	r1, r7, #16
 800c868:	2300      	movs	r3, #0
 800c86a:	2200      	movs	r2, #0
 800c86c:	f7fe fa74 	bl	800ad58 <xQueueGenericSend>
 800c870:	6278      	str	r0, [r7, #36]	@ 0x24
 800c872:	e008      	b.n	800c886 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c874:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <xTimerGenericCommand+0x98>)
 800c876:	6818      	ldr	r0, [r3, #0]
 800c878:	f107 0110 	add.w	r1, r7, #16
 800c87c:	2300      	movs	r3, #0
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	f7fe fb6c 	bl	800af5c <xQueueGenericSendFromISR>
 800c884:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3728      	adds	r7, #40	@ 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20001a48 	.word	0x20001a48

0800c894 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c89e:	4b23      	ldr	r3, [pc, #140]	@ (800c92c <prvProcessExpiredTimer+0x98>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe f91f 	bl	800aaf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d023      	beq.n	800c908 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	699a      	ldr	r2, [r3, #24]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	18d1      	adds	r1, r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	6978      	ldr	r0, [r7, #20]
 800c8ce:	f000 f8d5 	bl	800ca7c <prvInsertTimerInActiveList>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d020      	beq.n	800c91a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	6978      	ldr	r0, [r7, #20]
 800c8e4:	f7ff ff88 	bl	800c7f8 <xTimerGenericCommand>
 800c8e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d114      	bne.n	800c91a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	60fb      	str	r3, [r7, #12]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c90e:	f023 0301 	bic.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	6978      	ldr	r0, [r7, #20]
 800c920:	4798      	blx	r3
}
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20001a40 	.word	0x20001a40

0800c930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c938:	f107 0308 	add.w	r3, r7, #8
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 f859 	bl	800c9f4 <prvGetNextExpireTime>
 800c942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4619      	mov	r1, r3
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f000 f805 	bl	800c958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c94e:	f000 f8d7 	bl	800cb00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c952:	bf00      	nop
 800c954:	e7f0      	b.n	800c938 <prvTimerTask+0x8>
	...

0800c958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c962:	f7ff f84d 	bl	800ba00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f866 	bl	800ca3c <prvSampleTimeNow>
 800c970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d130      	bne.n	800c9da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10a      	bne.n	800c994 <prvProcessTimerOrBlockTask+0x3c>
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	429a      	cmp	r2, r3
 800c984:	d806      	bhi.n	800c994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c986:	f7ff f849 	bl	800ba1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff ff81 	bl	800c894 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c992:	e024      	b.n	800c9de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d008      	beq.n	800c9ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c99a:	4b13      	ldr	r3, [pc, #76]	@ (800c9e8 <prvProcessTimerOrBlockTask+0x90>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <prvProcessTimerOrBlockTask+0x50>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <prvProcessTimerOrBlockTask+0x52>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c9ec <prvProcessTimerOrBlockTask+0x94>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	f7fe fd89 	bl	800b4d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c9be:	f7ff f82d 	bl	800ba1c <xTaskResumeAll>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10a      	bne.n	800c9de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c9c8:	4b09      	ldr	r3, [pc, #36]	@ (800c9f0 <prvProcessTimerOrBlockTask+0x98>)
 800c9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	f3bf 8f6f 	isb	sy
}
 800c9d8:	e001      	b.n	800c9de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c9da:	f7ff f81f 	bl	800ba1c <xTaskResumeAll>
}
 800c9de:	bf00      	nop
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20001a44 	.word	0x20001a44
 800c9ec:	20001a48 	.word	0x20001a48
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9fc:	4b0e      	ldr	r3, [pc, #56]	@ (800ca38 <prvGetNextExpireTime+0x44>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <prvGetNextExpireTime+0x16>
 800ca06:	2201      	movs	r2, #1
 800ca08:	e000      	b.n	800ca0c <prvGetNextExpireTime+0x18>
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d105      	bne.n	800ca24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca18:	4b07      	ldr	r3, [pc, #28]	@ (800ca38 <prvGetNextExpireTime+0x44>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	e001      	b.n	800ca28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca28:	68fb      	ldr	r3, [r7, #12]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	20001a40 	.word	0x20001a40

0800ca3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca44:	f7ff f888 	bl	800bb58 <xTaskGetTickCount>
 800ca48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca78 <prvSampleTimeNow+0x3c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d205      	bcs.n	800ca60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca54:	f000 f93a 	bl	800cccc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e002      	b.n	800ca66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca66:	4a04      	ldr	r2, [pc, #16]	@ (800ca78 <prvSampleTimeNow+0x3c>)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20001a50 	.word	0x20001a50

0800ca7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d812      	bhi.n	800cac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	1ad2      	subs	r2, r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	429a      	cmp	r2, r3
 800caae:	d302      	bcc.n	800cab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cab0:	2301      	movs	r3, #1
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	e01b      	b.n	800caee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cab6:	4b10      	ldr	r3, [pc, #64]	@ (800caf8 <prvInsertTimerInActiveList+0x7c>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	3304      	adds	r3, #4
 800cabe:	4619      	mov	r1, r3
 800cac0:	4610      	mov	r0, r2
 800cac2:	f7fd ffdc 	bl	800aa7e <vListInsert>
 800cac6:	e012      	b.n	800caee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d206      	bcs.n	800cade <prvInsertTimerInActiveList+0x62>
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d302      	bcc.n	800cade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cad8:	2301      	movs	r3, #1
 800cada:	617b      	str	r3, [r7, #20]
 800cadc:	e007      	b.n	800caee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cade:	4b07      	ldr	r3, [pc, #28]	@ (800cafc <prvInsertTimerInActiveList+0x80>)
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3304      	adds	r3, #4
 800cae6:	4619      	mov	r1, r3
 800cae8:	4610      	mov	r0, r2
 800caea:	f7fd ffc8 	bl	800aa7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800caee:	697b      	ldr	r3, [r7, #20]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3718      	adds	r7, #24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	20001a44 	.word	0x20001a44
 800cafc:	20001a40 	.word	0x20001a40

0800cb00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08e      	sub	sp, #56	@ 0x38
 800cb04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb06:	e0ce      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da19      	bge.n	800cb42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb0e:	1d3b      	adds	r3, r7, #4
 800cb10:	3304      	adds	r3, #4
 800cb12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10b      	bne.n	800cb32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	61fb      	str	r3, [r7, #28]
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	e7fd      	b.n	800cb2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb38:	6850      	ldr	r0, [r2, #4]
 800cb3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb3c:	6892      	ldr	r2, [r2, #8]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f2c0 80ae 	blt.w	800cca6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fd ffc8 	bl	800aaf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb60:	463b      	mov	r3, r7
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff ff6a 	bl	800ca3c <prvSampleTimeNow>
 800cb68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	f200 8097 	bhi.w	800cca0 <prvProcessReceivedCommands+0x1a0>
 800cb72:	a201      	add	r2, pc, #4	@ (adr r2, 800cb78 <prvProcessReceivedCommands+0x78>)
 800cb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cba1 	.word	0x0800cba1
 800cb84:	0800cc17 	.word	0x0800cc17
 800cb88:	0800cc2b 	.word	0x0800cc2b
 800cb8c:	0800cc77 	.word	0x0800cc77
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cba1 	.word	0x0800cba1
 800cb98:	0800cc17 	.word	0x0800cc17
 800cb9c:	0800cc2b 	.word	0x0800cc2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	18d1      	adds	r1, r2, r3
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbc0:	f7ff ff5c 	bl	800ca7c <prvInsertTimerInActiveList>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d06c      	beq.n	800cca4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d061      	beq.n	800cca4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2300      	movs	r3, #0
 800cbee:	2100      	movs	r1, #0
 800cbf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbf2:	f7ff fe01 	bl	800c7f8 <xTimerGenericCommand>
 800cbf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d152      	bne.n	800cca4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	61bb      	str	r3, [r7, #24]
}
 800cc10:	bf00      	nop
 800cc12:	bf00      	nop
 800cc14:	e7fd      	b.n	800cc12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc1c:	f023 0301 	bic.w	r3, r3, #1
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc28:	e03d      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc30:	f043 0301 	orr.w	r3, r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10b      	bne.n	800cc62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	617b      	str	r3, [r7, #20]
}
 800cc5c:	bf00      	nop
 800cc5e:	bf00      	nop
 800cc60:	e7fd      	b.n	800cc5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc64:	699a      	ldr	r2, [r3, #24]
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	18d1      	adds	r1, r2, r3
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc70:	f7ff ff04 	bl	800ca7c <prvInsertTimerInActiveList>
					break;
 800cc74:	e017      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d103      	bne.n	800cc8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cc84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc86:	f000 fbe7 	bl	800d458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc8a:	e00c      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc92:	f023 0301 	bic.w	r3, r3, #1
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc9e:	e002      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cca0:	bf00      	nop
 800cca2:	e000      	b.n	800cca6 <prvProcessReceivedCommands+0x1a6>
					break;
 800cca4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cca6:	4b08      	ldr	r3, [pc, #32]	@ (800ccc8 <prvProcessReceivedCommands+0x1c8>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	1d39      	adds	r1, r7, #4
 800ccac:	2200      	movs	r2, #0
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe f9f2 	bl	800b098 <xQueueReceive>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f47f af26 	bne.w	800cb08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ccbc:	bf00      	nop
 800ccbe:	bf00      	nop
 800ccc0:	3730      	adds	r7, #48	@ 0x30
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20001a48 	.word	0x20001a48

0800cccc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccd2:	e049      	b.n	800cd68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccd4:	4b2e      	ldr	r3, [pc, #184]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccde:	4b2c      	ldr	r3, [pc, #176]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fd feff 	bl	800aaf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d02f      	beq.n	800cd68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	4413      	add	r3, r2
 800cd10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d90e      	bls.n	800cd38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd26:	4b1a      	ldr	r3, [pc, #104]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f7fd fea4 	bl	800aa7e <vListInsert>
 800cd36:	e017      	b.n	800cd68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	693a      	ldr	r2, [r7, #16]
 800cd40:	2100      	movs	r1, #0
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff fd58 	bl	800c7f8 <xTimerGenericCommand>
 800cd48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10b      	bne.n	800cd68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	603b      	str	r3, [r7, #0]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd68:	4b09      	ldr	r3, [pc, #36]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1b0      	bne.n	800ccd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd72:	4b07      	ldr	r3, [pc, #28]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd78:	4b06      	ldr	r3, [pc, #24]	@ (800cd94 <prvSwitchTimerLists+0xc8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a04      	ldr	r2, [pc, #16]	@ (800cd90 <prvSwitchTimerLists+0xc4>)
 800cd7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd80:	4a04      	ldr	r2, [pc, #16]	@ (800cd94 <prvSwitchTimerLists+0xc8>)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	6013      	str	r3, [r2, #0]
}
 800cd86:	bf00      	nop
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	20001a40 	.word	0x20001a40
 800cd94:	20001a44 	.word	0x20001a44

0800cd98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd9e:	f000 f96b 	bl	800d078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cda2:	4b15      	ldr	r3, [pc, #84]	@ (800cdf8 <prvCheckForValidListAndQueue+0x60>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d120      	bne.n	800cdec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdaa:	4814      	ldr	r0, [pc, #80]	@ (800cdfc <prvCheckForValidListAndQueue+0x64>)
 800cdac:	f7fd fe16 	bl	800a9dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdb0:	4813      	ldr	r0, [pc, #76]	@ (800ce00 <prvCheckForValidListAndQueue+0x68>)
 800cdb2:	f7fd fe13 	bl	800a9dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdb6:	4b13      	ldr	r3, [pc, #76]	@ (800ce04 <prvCheckForValidListAndQueue+0x6c>)
 800cdb8:	4a10      	ldr	r2, [pc, #64]	@ (800cdfc <prvCheckForValidListAndQueue+0x64>)
 800cdba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cdbc:	4b12      	ldr	r3, [pc, #72]	@ (800ce08 <prvCheckForValidListAndQueue+0x70>)
 800cdbe:	4a10      	ldr	r2, [pc, #64]	@ (800ce00 <prvCheckForValidListAndQueue+0x68>)
 800cdc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	4b11      	ldr	r3, [pc, #68]	@ (800ce0c <prvCheckForValidListAndQueue+0x74>)
 800cdc8:	4a11      	ldr	r2, [pc, #68]	@ (800ce10 <prvCheckForValidListAndQueue+0x78>)
 800cdca:	2110      	movs	r1, #16
 800cdcc:	200a      	movs	r0, #10
 800cdce:	f7fd ff23 	bl	800ac18 <xQueueGenericCreateStatic>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	4a08      	ldr	r2, [pc, #32]	@ (800cdf8 <prvCheckForValidListAndQueue+0x60>)
 800cdd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cdd8:	4b07      	ldr	r3, [pc, #28]	@ (800cdf8 <prvCheckForValidListAndQueue+0x60>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d005      	beq.n	800cdec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cde0:	4b05      	ldr	r3, [pc, #20]	@ (800cdf8 <prvCheckForValidListAndQueue+0x60>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	490b      	ldr	r1, [pc, #44]	@ (800ce14 <prvCheckForValidListAndQueue+0x7c>)
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fe fb48 	bl	800b47c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdec:	f000 f976 	bl	800d0dc <vPortExitCritical>
}
 800cdf0:	bf00      	nop
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20001a48 	.word	0x20001a48
 800cdfc:	20001a18 	.word	0x20001a18
 800ce00:	20001a2c 	.word	0x20001a2c
 800ce04:	20001a40 	.word	0x20001a40
 800ce08:	20001a44 	.word	0x20001a44
 800ce0c:	20001af4 	.word	0x20001af4
 800ce10:	20001a54 	.word	0x20001a54
 800ce14:	0800e304 	.word	0x0800e304

0800ce18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	3b04      	subs	r3, #4
 800ce28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ce30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	3b04      	subs	r3, #4
 800ce36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f023 0201 	bic.w	r2, r3, #1
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3b04      	subs	r3, #4
 800ce46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce48:	4a0c      	ldr	r2, [pc, #48]	@ (800ce7c <pxPortInitialiseStack+0x64>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3b14      	subs	r3, #20
 800ce52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f06f 0202 	mvn.w	r2, #2
 800ce66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	3b20      	subs	r3, #32
 800ce6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	0800ce81 	.word	0x0800ce81

0800ce80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce8a:	4b13      	ldr	r3, [pc, #76]	@ (800ced8 <prvTaskExitError+0x58>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce92:	d00b      	beq.n	800ceac <prvTaskExitError+0x2c>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	60fb      	str	r3, [r7, #12]
}
 800cea6:	bf00      	nop
 800cea8:	bf00      	nop
 800ceaa:	e7fd      	b.n	800cea8 <prvTaskExitError+0x28>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60bb      	str	r3, [r7, #8]
}
 800cebe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cec0:	bf00      	nop
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0fc      	beq.n	800cec2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20000028 	.word	0x20000028
 800cedc:	00000000 	.word	0x00000000

0800cee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <pxCurrentTCBConst2>)
 800cee2:	6819      	ldr	r1, [r3, #0]
 800cee4:	6808      	ldr	r0, [r1, #0]
 800cee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceea:	f380 8809 	msr	PSP, r0
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f04f 0000 	mov.w	r0, #0
 800cef6:	f380 8811 	msr	BASEPRI, r0
 800cefa:	4770      	bx	lr
 800cefc:	f3af 8000 	nop.w

0800cf00 <pxCurrentTCBConst2>:
 800cf00:	20001518 	.word	0x20001518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop

0800cf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf08:	4808      	ldr	r0, [pc, #32]	@ (800cf2c <prvPortStartFirstTask+0x24>)
 800cf0a:	6800      	ldr	r0, [r0, #0]
 800cf0c:	6800      	ldr	r0, [r0, #0]
 800cf0e:	f380 8808 	msr	MSP, r0
 800cf12:	f04f 0000 	mov.w	r0, #0
 800cf16:	f380 8814 	msr	CONTROL, r0
 800cf1a:	b662      	cpsie	i
 800cf1c:	b661      	cpsie	f
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	df00      	svc	0
 800cf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf2a:	bf00      	nop
 800cf2c:	e000ed08 	.word	0xe000ed08

0800cf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf36:	4b47      	ldr	r3, [pc, #284]	@ (800d054 <xPortStartScheduler+0x124>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a47      	ldr	r2, [pc, #284]	@ (800d058 <xPortStartScheduler+0x128>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d10b      	bne.n	800cf58 <xPortStartScheduler+0x28>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf58:	4b3e      	ldr	r3, [pc, #248]	@ (800d054 <xPortStartScheduler+0x124>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800d05c <xPortStartScheduler+0x12c>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d10b      	bne.n	800cf7a <xPortStartScheduler+0x4a>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60fb      	str	r3, [r7, #12]
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop
 800cf78:	e7fd      	b.n	800cf76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf7a:	4b39      	ldr	r3, [pc, #228]	@ (800d060 <xPortStartScheduler+0x130>)
 800cf7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	22ff      	movs	r2, #255	@ 0xff
 800cf8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	4b31      	ldr	r3, [pc, #196]	@ (800d064 <xPortStartScheduler+0x134>)
 800cfa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfa2:	4b31      	ldr	r3, [pc, #196]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfa4:	2207      	movs	r2, #7
 800cfa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfa8:	e009      	b.n	800cfbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4a2d      	ldr	r2, [pc, #180]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc6:	2b80      	cmp	r3, #128	@ 0x80
 800cfc8:	d0ef      	beq.n	800cfaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cfca:	4b27      	ldr	r3, [pc, #156]	@ (800d068 <xPortStartScheduler+0x138>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f1c3 0307 	rsb	r3, r3, #7
 800cfd2:	2b04      	cmp	r3, #4
 800cfd4:	d00b      	beq.n	800cfee <xPortStartScheduler+0xbe>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	60bb      	str	r3, [r7, #8]
}
 800cfe8:	bf00      	nop
 800cfea:	bf00      	nop
 800cfec:	e7fd      	b.n	800cfea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cfee:	4b1e      	ldr	r3, [pc, #120]	@ (800d068 <xPortStartScheduler+0x138>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	021b      	lsls	r3, r3, #8
 800cff4:	4a1c      	ldr	r2, [pc, #112]	@ (800d068 <xPortStartScheduler+0x138>)
 800cff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cff8:	4b1b      	ldr	r3, [pc, #108]	@ (800d068 <xPortStartScheduler+0x138>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d000:	4a19      	ldr	r2, [pc, #100]	@ (800d068 <xPortStartScheduler+0x138>)
 800d002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d00c:	4b17      	ldr	r3, [pc, #92]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a16      	ldr	r2, [pc, #88]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d018:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a13      	ldr	r2, [pc, #76]	@ (800d06c <xPortStartScheduler+0x13c>)
 800d01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d024:	f000 f8da 	bl	800d1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d028:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <xPortStartScheduler+0x140>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d02e:	f000 f8f9 	bl	800d224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d032:	4b10      	ldr	r3, [pc, #64]	@ (800d074 <xPortStartScheduler+0x144>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a0f      	ldr	r2, [pc, #60]	@ (800d074 <xPortStartScheduler+0x144>)
 800d038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d03e:	f7ff ff63 	bl	800cf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d042:	f7fe ff4d 	bl	800bee0 <vTaskSwitchContext>
	prvTaskExitError();
 800d046:	f7ff ff1b 	bl	800ce80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3718      	adds	r7, #24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	e000ed00 	.word	0xe000ed00
 800d058:	410fc271 	.word	0x410fc271
 800d05c:	410fc270 	.word	0x410fc270
 800d060:	e000e400 	.word	0xe000e400
 800d064:	20001b44 	.word	0x20001b44
 800d068:	20001b48 	.word	0x20001b48
 800d06c:	e000ed20 	.word	0xe000ed20
 800d070:	20000028 	.word	0x20000028
 800d074:	e000ef34 	.word	0xe000ef34

0800d078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d092:	4b10      	ldr	r3, [pc, #64]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	4a0e      	ldr	r2, [pc, #56]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d09c:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d4 <vPortEnterCritical+0x5c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d110      	bne.n	800d0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d8 <vPortEnterCritical+0x60>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00b      	beq.n	800d0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	603b      	str	r3, [r7, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	e7fd      	b.n	800d0c2 <vPortEnterCritical+0x4a>
	}
}
 800d0c6:	bf00      	nop
 800d0c8:	370c      	adds	r7, #12
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20000028 	.word	0x20000028
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d0e2:	4b12      	ldr	r3, [pc, #72]	@ (800d12c <vPortExitCritical+0x50>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <vPortExitCritical+0x26>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	607b      	str	r3, [r7, #4]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d102:	4b0a      	ldr	r3, [pc, #40]	@ (800d12c <vPortExitCritical+0x50>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3b01      	subs	r3, #1
 800d108:	4a08      	ldr	r2, [pc, #32]	@ (800d12c <vPortExitCritical+0x50>)
 800d10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d10c:	4b07      	ldr	r3, [pc, #28]	@ (800d12c <vPortExitCritical+0x50>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <vPortExitCritical+0x44>
 800d114:	2300      	movs	r3, #0
 800d116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	f383 8811 	msr	BASEPRI, r3
}
 800d11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20000028 	.word	0x20000028

0800d130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d130:	f3ef 8009 	mrs	r0, PSP
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	4b15      	ldr	r3, [pc, #84]	@ (800d190 <pxCurrentTCBConst>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	f01e 0f10 	tst.w	lr, #16
 800d140:	bf08      	it	eq
 800d142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d154:	f380 8811 	msr	BASEPRI, r0
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f7fe febe 	bl	800bee0 <vTaskSwitchContext>
 800d164:	f04f 0000 	mov.w	r0, #0
 800d168:	f380 8811 	msr	BASEPRI, r0
 800d16c:	bc09      	pop	{r0, r3}
 800d16e:	6819      	ldr	r1, [r3, #0]
 800d170:	6808      	ldr	r0, [r1, #0]
 800d172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d176:	f01e 0f10 	tst.w	lr, #16
 800d17a:	bf08      	it	eq
 800d17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d180:	f380 8809 	msr	PSP, r0
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	f3af 8000 	nop.w

0800d190 <pxCurrentTCBConst>:
 800d190:	20001518 	.word	0x20001518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop

0800d198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	607b      	str	r3, [r7, #4]
}
 800d1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1b2:	f7fe fddb 	bl	800bd6c <xTaskIncrementTick>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1bc:	4b06      	ldr	r3, [pc, #24]	@ (800d1d8 <xPortSysTickHandler+0x40>)
 800d1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	f383 8811 	msr	BASEPRI, r3
}
 800d1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	e000ed04 	.word	0xe000ed04

0800d1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <vPortSetupTimerInterrupt+0x34>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d214 <vPortSetupTimerInterrupt+0x38>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <vPortSetupTimerInterrupt+0x3c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d21c <vPortSetupTimerInterrupt+0x40>)
 800d1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f6:	099b      	lsrs	r3, r3, #6
 800d1f8:	4a09      	ldr	r2, [pc, #36]	@ (800d220 <vPortSetupTimerInterrupt+0x44>)
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d1fe:	4b04      	ldr	r3, [pc, #16]	@ (800d210 <vPortSetupTimerInterrupt+0x34>)
 800d200:	2207      	movs	r2, #7
 800d202:	601a      	str	r2, [r3, #0]
}
 800d204:	bf00      	nop
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	e000e010 	.word	0xe000e010
 800d214:	e000e018 	.word	0xe000e018
 800d218:	2000001c 	.word	0x2000001c
 800d21c:	10624dd3 	.word	0x10624dd3
 800d220:	e000e014 	.word	0xe000e014

0800d224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d234 <vPortEnableVFP+0x10>
 800d228:	6801      	ldr	r1, [r0, #0]
 800d22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d22e:	6001      	str	r1, [r0, #0]
 800d230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d232:	bf00      	nop
 800d234:	e000ed88 	.word	0xe000ed88

0800d238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d23e:	f3ef 8305 	mrs	r3, IPSR
 800d242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b0f      	cmp	r3, #15
 800d248:	d915      	bls.n	800d276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d24a:	4a18      	ldr	r2, [pc, #96]	@ (800d2ac <vPortValidateInterruptPriority+0x74>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d254:	4b16      	ldr	r3, [pc, #88]	@ (800d2b0 <vPortValidateInterruptPriority+0x78>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	7afa      	ldrb	r2, [r7, #11]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d20b      	bcs.n	800d276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	607b      	str	r3, [r7, #4]
}
 800d270:	bf00      	nop
 800d272:	bf00      	nop
 800d274:	e7fd      	b.n	800d272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d276:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b4 <vPortValidateInterruptPriority+0x7c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d27e:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b8 <vPortValidateInterruptPriority+0x80>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d90b      	bls.n	800d29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	603b      	str	r3, [r7, #0]
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	e7fd      	b.n	800d29a <vPortValidateInterruptPriority+0x62>
	}
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	e000e3f0 	.word	0xe000e3f0
 800d2b0:	20001b44 	.word	0x20001b44
 800d2b4:	e000ed0c 	.word	0xe000ed0c
 800d2b8:	20001b48 	.word	0x20001b48

0800d2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	@ 0x28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2c8:	f7fe fb9a 	bl	800ba00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800d440 <pvPortMalloc+0x184>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2d4:	f000 f924 	bl	800d520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d444 <pvPortMalloc+0x188>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f040 8095 	bne.w	800d410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01e      	beq.n	800d32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d2ec:	2208      	movs	r2, #8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d015      	beq.n	800d32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f023 0307 	bic.w	r3, r3, #7
 800d304:	3308      	adds	r3, #8
 800d306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f003 0307 	and.w	r3, r3, #7
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00b      	beq.n	800d32a <pvPortMalloc+0x6e>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	617b      	str	r3, [r7, #20]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d06f      	beq.n	800d410 <pvPortMalloc+0x154>
 800d330:	4b45      	ldr	r3, [pc, #276]	@ (800d448 <pvPortMalloc+0x18c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	429a      	cmp	r2, r3
 800d338:	d86a      	bhi.n	800d410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d33a:	4b44      	ldr	r3, [pc, #272]	@ (800d44c <pvPortMalloc+0x190>)
 800d33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d33e:	4b43      	ldr	r3, [pc, #268]	@ (800d44c <pvPortMalloc+0x190>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d344:	e004      	b.n	800d350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d903      	bls.n	800d362 <pvPortMalloc+0xa6>
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1f1      	bne.n	800d346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d362:	4b37      	ldr	r3, [pc, #220]	@ (800d440 <pvPortMalloc+0x184>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d368:	429a      	cmp	r2, r3
 800d36a:	d051      	beq.n	800d410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2208      	movs	r2, #8
 800d372:	4413      	add	r3, r2
 800d374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	1ad2      	subs	r2, r2, r3
 800d386:	2308      	movs	r3, #8
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d920      	bls.n	800d3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	f003 0307 	and.w	r3, r3, #7
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
}
 800d3b2:	bf00      	nop
 800d3b4:	bf00      	nop
 800d3b6:	e7fd      	b.n	800d3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	1ad2      	subs	r2, r2, r3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3ca:	69b8      	ldr	r0, [r7, #24]
 800d3cc:	f000 f90a 	bl	800d5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	4a1b      	ldr	r2, [pc, #108]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3de:	4b1a      	ldr	r3, [pc, #104]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d450 <pvPortMalloc+0x194>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d203      	bcs.n	800d3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3ea:	4b17      	ldr	r3, [pc, #92]	@ (800d448 <pvPortMalloc+0x18c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a18      	ldr	r2, [pc, #96]	@ (800d450 <pvPortMalloc+0x194>)
 800d3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4b13      	ldr	r3, [pc, #76]	@ (800d444 <pvPortMalloc+0x188>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d406:	4b13      	ldr	r3, [pc, #76]	@ (800d454 <pvPortMalloc+0x198>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3301      	adds	r3, #1
 800d40c:	4a11      	ldr	r2, [pc, #68]	@ (800d454 <pvPortMalloc+0x198>)
 800d40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d410:	f7fe fb04 	bl	800ba1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00b      	beq.n	800d436 <pvPortMalloc+0x17a>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	60fb      	str	r3, [r7, #12]
}
 800d430:	bf00      	nop
 800d432:	bf00      	nop
 800d434:	e7fd      	b.n	800d432 <pvPortMalloc+0x176>
	return pvReturn;
 800d436:	69fb      	ldr	r3, [r7, #28]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3728      	adds	r7, #40	@ 0x28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20005754 	.word	0x20005754
 800d444:	20005768 	.word	0x20005768
 800d448:	20005758 	.word	0x20005758
 800d44c:	2000574c 	.word	0x2000574c
 800d450:	2000575c 	.word	0x2000575c
 800d454:	20005760 	.word	0x20005760

0800d458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d04f      	beq.n	800d50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d46a:	2308      	movs	r3, #8
 800d46c:	425b      	negs	r3, r3
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	4413      	add	r3, r2
 800d472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	4b25      	ldr	r3, [pc, #148]	@ (800d514 <vPortFree+0xbc>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4013      	ands	r3, r2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10b      	bne.n	800d49e <vPortFree+0x46>
	__asm volatile
 800d486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	60fb      	str	r3, [r7, #12]
}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	e7fd      	b.n	800d49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00b      	beq.n	800d4be <vPortFree+0x66>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	60bb      	str	r3, [r7, #8]
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	e7fd      	b.n	800d4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	4b14      	ldr	r3, [pc, #80]	@ (800d514 <vPortFree+0xbc>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d01e      	beq.n	800d50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d11a      	bne.n	800d50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d514 <vPortFree+0xbc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	43db      	mvns	r3, r3
 800d4de:	401a      	ands	r2, r3
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4e4:	f7fe fa8c 	bl	800ba00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <vPortFree+0xc0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	4a09      	ldr	r2, [pc, #36]	@ (800d518 <vPortFree+0xc0>)
 800d4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4f6:	6938      	ldr	r0, [r7, #16]
 800d4f8:	f000 f874 	bl	800d5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d4fc:	4b07      	ldr	r3, [pc, #28]	@ (800d51c <vPortFree+0xc4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3301      	adds	r3, #1
 800d502:	4a06      	ldr	r2, [pc, #24]	@ (800d51c <vPortFree+0xc4>)
 800d504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d506:	f7fe fa89 	bl	800ba1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d50a:	bf00      	nop
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20005768 	.word	0x20005768
 800d518:	20005758 	.word	0x20005758
 800d51c:	20005764 	.word	0x20005764

0800d520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d526:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d52c:	4b27      	ldr	r3, [pc, #156]	@ (800d5cc <prvHeapInit+0xac>)
 800d52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00c      	beq.n	800d554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3307      	adds	r3, #7
 800d53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0307 	bic.w	r3, r3, #7
 800d546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	4a1f      	ldr	r2, [pc, #124]	@ (800d5cc <prvHeapInit+0xac>)
 800d550:	4413      	add	r3, r2
 800d552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d558:	4a1d      	ldr	r2, [pc, #116]	@ (800d5d0 <prvHeapInit+0xb0>)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d55e:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d0 <prvHeapInit+0xb0>)
 800d560:	2200      	movs	r2, #0
 800d562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4413      	add	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d56c:	2208      	movs	r2, #8
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1a9b      	subs	r3, r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f023 0307 	bic.w	r3, r3, #7
 800d57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4a15      	ldr	r2, [pc, #84]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d582:	4b14      	ldr	r3, [pc, #80]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d58a:	4b12      	ldr	r3, [pc, #72]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	1ad2      	subs	r2, r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d4 <prvHeapInit+0xb4>)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d8 <prvHeapInit+0xb8>)
 800d5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	4a09      	ldr	r2, [pc, #36]	@ (800d5dc <prvHeapInit+0xbc>)
 800d5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5b8:	4b09      	ldr	r3, [pc, #36]	@ (800d5e0 <prvHeapInit+0xc0>)
 800d5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d5be:	601a      	str	r2, [r3, #0]
}
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	20001b4c 	.word	0x20001b4c
 800d5d0:	2000574c 	.word	0x2000574c
 800d5d4:	20005754 	.word	0x20005754
 800d5d8:	2000575c 	.word	0x2000575c
 800d5dc:	20005758 	.word	0x20005758
 800d5e0:	20005768 	.word	0x20005768

0800d5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5ec:	4b28      	ldr	r3, [pc, #160]	@ (800d690 <prvInsertBlockIntoFreeList+0xac>)
 800d5ee:	60fb      	str	r3, [r7, #12]
 800d5f0:	e002      	b.n	800d5f8 <prvInsertBlockIntoFreeList+0x14>
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d8f7      	bhi.n	800d5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	4413      	add	r3, r2
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d108      	bne.n	800d626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	441a      	add	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	441a      	add	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d118      	bne.n	800d66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	4b15      	ldr	r3, [pc, #84]	@ (800d694 <prvInsertBlockIntoFreeList+0xb0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d00d      	beq.n	800d662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	441a      	add	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	e008      	b.n	800d674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d662:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <prvInsertBlockIntoFreeList+0xb0>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	e003      	b.n	800d674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d002      	beq.n	800d682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	2000574c 	.word	0x2000574c
 800d694:	20005754 	.word	0x20005754

0800d698 <_vsiprintf_r>:
 800d698:	b500      	push	{lr}
 800d69a:	b09b      	sub	sp, #108	@ 0x6c
 800d69c:	9100      	str	r1, [sp, #0]
 800d69e:	9104      	str	r1, [sp, #16]
 800d6a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d6a4:	9105      	str	r1, [sp, #20]
 800d6a6:	9102      	str	r1, [sp, #8]
 800d6a8:	4905      	ldr	r1, [pc, #20]	@ (800d6c0 <_vsiprintf_r+0x28>)
 800d6aa:	9103      	str	r1, [sp, #12]
 800d6ac:	4669      	mov	r1, sp
 800d6ae:	f000 f951 	bl	800d954 <_svfiprintf_r>
 800d6b2:	9b00      	ldr	r3, [sp, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
 800d6b8:	b01b      	add	sp, #108	@ 0x6c
 800d6ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6be:	bf00      	nop
 800d6c0:	ffff0208 	.word	0xffff0208

0800d6c4 <vsiprintf>:
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	460a      	mov	r2, r1
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4802      	ldr	r0, [pc, #8]	@ (800d6d4 <vsiprintf+0x10>)
 800d6cc:	6800      	ldr	r0, [r0, #0]
 800d6ce:	f7ff bfe3 	b.w	800d698 <_vsiprintf_r>
 800d6d2:	bf00      	nop
 800d6d4:	2000002c 	.word	0x2000002c

0800d6d8 <memset>:
 800d6d8:	4402      	add	r2, r0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d100      	bne.n	800d6e2 <memset+0xa>
 800d6e0:	4770      	bx	lr
 800d6e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d6e6:	e7f9      	b.n	800d6dc <memset+0x4>

0800d6e8 <_reclaim_reent>:
 800d6e8:	4b29      	ldr	r3, [pc, #164]	@ (800d790 <_reclaim_reent+0xa8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4283      	cmp	r3, r0
 800d6ee:	b570      	push	{r4, r5, r6, lr}
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	d04b      	beq.n	800d78c <_reclaim_reent+0xa4>
 800d6f4:	69c3      	ldr	r3, [r0, #28]
 800d6f6:	b1ab      	cbz	r3, 800d724 <_reclaim_reent+0x3c>
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	b16b      	cbz	r3, 800d718 <_reclaim_reent+0x30>
 800d6fc:	2500      	movs	r5, #0
 800d6fe:	69e3      	ldr	r3, [r4, #28]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	5959      	ldr	r1, [r3, r5]
 800d704:	2900      	cmp	r1, #0
 800d706:	d13b      	bne.n	800d780 <_reclaim_reent+0x98>
 800d708:	3504      	adds	r5, #4
 800d70a:	2d80      	cmp	r5, #128	@ 0x80
 800d70c:	d1f7      	bne.n	800d6fe <_reclaim_reent+0x16>
 800d70e:	69e3      	ldr	r3, [r4, #28]
 800d710:	4620      	mov	r0, r4
 800d712:	68d9      	ldr	r1, [r3, #12]
 800d714:	f000 f878 	bl	800d808 <_free_r>
 800d718:	69e3      	ldr	r3, [r4, #28]
 800d71a:	6819      	ldr	r1, [r3, #0]
 800d71c:	b111      	cbz	r1, 800d724 <_reclaim_reent+0x3c>
 800d71e:	4620      	mov	r0, r4
 800d720:	f000 f872 	bl	800d808 <_free_r>
 800d724:	6961      	ldr	r1, [r4, #20]
 800d726:	b111      	cbz	r1, 800d72e <_reclaim_reent+0x46>
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 f86d 	bl	800d808 <_free_r>
 800d72e:	69e1      	ldr	r1, [r4, #28]
 800d730:	b111      	cbz	r1, 800d738 <_reclaim_reent+0x50>
 800d732:	4620      	mov	r0, r4
 800d734:	f000 f868 	bl	800d808 <_free_r>
 800d738:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d73a:	b111      	cbz	r1, 800d742 <_reclaim_reent+0x5a>
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 f863 	bl	800d808 <_free_r>
 800d742:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d744:	b111      	cbz	r1, 800d74c <_reclaim_reent+0x64>
 800d746:	4620      	mov	r0, r4
 800d748:	f000 f85e 	bl	800d808 <_free_r>
 800d74c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d74e:	b111      	cbz	r1, 800d756 <_reclaim_reent+0x6e>
 800d750:	4620      	mov	r0, r4
 800d752:	f000 f859 	bl	800d808 <_free_r>
 800d756:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d758:	b111      	cbz	r1, 800d760 <_reclaim_reent+0x78>
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 f854 	bl	800d808 <_free_r>
 800d760:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d762:	b111      	cbz	r1, 800d76a <_reclaim_reent+0x82>
 800d764:	4620      	mov	r0, r4
 800d766:	f000 f84f 	bl	800d808 <_free_r>
 800d76a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d76c:	b111      	cbz	r1, 800d774 <_reclaim_reent+0x8c>
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 f84a 	bl	800d808 <_free_r>
 800d774:	6a23      	ldr	r3, [r4, #32]
 800d776:	b14b      	cbz	r3, 800d78c <_reclaim_reent+0xa4>
 800d778:	4620      	mov	r0, r4
 800d77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d77e:	4718      	bx	r3
 800d780:	680e      	ldr	r6, [r1, #0]
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f840 	bl	800d808 <_free_r>
 800d788:	4631      	mov	r1, r6
 800d78a:	e7bb      	b.n	800d704 <_reclaim_reent+0x1c>
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	bf00      	nop
 800d790:	2000002c 	.word	0x2000002c

0800d794 <__errno>:
 800d794:	4b01      	ldr	r3, [pc, #4]	@ (800d79c <__errno+0x8>)
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	2000002c 	.word	0x2000002c

0800d7a0 <__libc_init_array>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d7d8 <__libc_init_array+0x38>)
 800d7a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d7dc <__libc_init_array+0x3c>)
 800d7a6:	1b64      	subs	r4, r4, r5
 800d7a8:	10a4      	asrs	r4, r4, #2
 800d7aa:	2600      	movs	r6, #0
 800d7ac:	42a6      	cmp	r6, r4
 800d7ae:	d109      	bne.n	800d7c4 <__libc_init_array+0x24>
 800d7b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d7e0 <__libc_init_array+0x40>)
 800d7b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d7e4 <__libc_init_array+0x44>)
 800d7b4:	f000 fd62 	bl	800e27c <_init>
 800d7b8:	1b64      	subs	r4, r4, r5
 800d7ba:	10a4      	asrs	r4, r4, #2
 800d7bc:	2600      	movs	r6, #0
 800d7be:	42a6      	cmp	r6, r4
 800d7c0:	d105      	bne.n	800d7ce <__libc_init_array+0x2e>
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7c8:	4798      	blx	r3
 800d7ca:	3601      	adds	r6, #1
 800d7cc:	e7ee      	b.n	800d7ac <__libc_init_array+0xc>
 800d7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7d2:	4798      	blx	r3
 800d7d4:	3601      	adds	r6, #1
 800d7d6:	e7f2      	b.n	800d7be <__libc_init_array+0x1e>
 800d7d8:	0800e424 	.word	0x0800e424
 800d7dc:	0800e424 	.word	0x0800e424
 800d7e0:	0800e424 	.word	0x0800e424
 800d7e4:	0800e428 	.word	0x0800e428

0800d7e8 <__retarget_lock_acquire_recursive>:
 800d7e8:	4770      	bx	lr

0800d7ea <__retarget_lock_release_recursive>:
 800d7ea:	4770      	bx	lr

0800d7ec <memcpy>:
 800d7ec:	440a      	add	r2, r1
 800d7ee:	4291      	cmp	r1, r2
 800d7f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d7f4:	d100      	bne.n	800d7f8 <memcpy+0xc>
 800d7f6:	4770      	bx	lr
 800d7f8:	b510      	push	{r4, lr}
 800d7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d802:	4291      	cmp	r1, r2
 800d804:	d1f9      	bne.n	800d7fa <memcpy+0xe>
 800d806:	bd10      	pop	{r4, pc}

0800d808 <_free_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4605      	mov	r5, r0
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d041      	beq.n	800d894 <_free_r+0x8c>
 800d810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d814:	1f0c      	subs	r4, r1, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfb8      	it	lt
 800d81a:	18e4      	addlt	r4, r4, r3
 800d81c:	f000 fbc6 	bl	800dfac <__malloc_lock>
 800d820:	4a1d      	ldr	r2, [pc, #116]	@ (800d898 <_free_r+0x90>)
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	b933      	cbnz	r3, 800d834 <_free_r+0x2c>
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	6014      	str	r4, [r2, #0]
 800d82a:	4628      	mov	r0, r5
 800d82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d830:	f000 bbc2 	b.w	800dfb8 <__malloc_unlock>
 800d834:	42a3      	cmp	r3, r4
 800d836:	d908      	bls.n	800d84a <_free_r+0x42>
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	1821      	adds	r1, r4, r0
 800d83c:	428b      	cmp	r3, r1
 800d83e:	bf01      	itttt	eq
 800d840:	6819      	ldreq	r1, [r3, #0]
 800d842:	685b      	ldreq	r3, [r3, #4]
 800d844:	1809      	addeq	r1, r1, r0
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	e7ed      	b.n	800d826 <_free_r+0x1e>
 800d84a:	461a      	mov	r2, r3
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	b10b      	cbz	r3, 800d854 <_free_r+0x4c>
 800d850:	42a3      	cmp	r3, r4
 800d852:	d9fa      	bls.n	800d84a <_free_r+0x42>
 800d854:	6811      	ldr	r1, [r2, #0]
 800d856:	1850      	adds	r0, r2, r1
 800d858:	42a0      	cmp	r0, r4
 800d85a:	d10b      	bne.n	800d874 <_free_r+0x6c>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	4401      	add	r1, r0
 800d860:	1850      	adds	r0, r2, r1
 800d862:	4283      	cmp	r3, r0
 800d864:	6011      	str	r1, [r2, #0]
 800d866:	d1e0      	bne.n	800d82a <_free_r+0x22>
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	6053      	str	r3, [r2, #4]
 800d86e:	4408      	add	r0, r1
 800d870:	6010      	str	r0, [r2, #0]
 800d872:	e7da      	b.n	800d82a <_free_r+0x22>
 800d874:	d902      	bls.n	800d87c <_free_r+0x74>
 800d876:	230c      	movs	r3, #12
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	e7d6      	b.n	800d82a <_free_r+0x22>
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	1821      	adds	r1, r4, r0
 800d880:	428b      	cmp	r3, r1
 800d882:	bf04      	itt	eq
 800d884:	6819      	ldreq	r1, [r3, #0]
 800d886:	685b      	ldreq	r3, [r3, #4]
 800d888:	6063      	str	r3, [r4, #4]
 800d88a:	bf04      	itt	eq
 800d88c:	1809      	addeq	r1, r1, r0
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	6054      	str	r4, [r2, #4]
 800d892:	e7ca      	b.n	800d82a <_free_r+0x22>
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	200058b0 	.word	0x200058b0

0800d89c <__ssputs_r>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	688e      	ldr	r6, [r1, #8]
 800d8a2:	461f      	mov	r7, r3
 800d8a4:	42be      	cmp	r6, r7
 800d8a6:	680b      	ldr	r3, [r1, #0]
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	4690      	mov	r8, r2
 800d8ae:	d82d      	bhi.n	800d90c <__ssputs_r+0x70>
 800d8b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d8b8:	d026      	beq.n	800d908 <__ssputs_r+0x6c>
 800d8ba:	6965      	ldr	r5, [r4, #20]
 800d8bc:	6909      	ldr	r1, [r1, #16]
 800d8be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8c2:	eba3 0901 	sub.w	r9, r3, r1
 800d8c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8ca:	1c7b      	adds	r3, r7, #1
 800d8cc:	444b      	add	r3, r9
 800d8ce:	106d      	asrs	r5, r5, #1
 800d8d0:	429d      	cmp	r5, r3
 800d8d2:	bf38      	it	cc
 800d8d4:	461d      	movcc	r5, r3
 800d8d6:	0553      	lsls	r3, r2, #21
 800d8d8:	d527      	bpl.n	800d92a <__ssputs_r+0x8e>
 800d8da:	4629      	mov	r1, r5
 800d8dc:	f000 f958 	bl	800db90 <_malloc_r>
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	b360      	cbz	r0, 800d93e <__ssputs_r+0xa2>
 800d8e4:	6921      	ldr	r1, [r4, #16]
 800d8e6:	464a      	mov	r2, r9
 800d8e8:	f7ff ff80 	bl	800d7ec <memcpy>
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8f6:	81a3      	strh	r3, [r4, #12]
 800d8f8:	6126      	str	r6, [r4, #16]
 800d8fa:	6165      	str	r5, [r4, #20]
 800d8fc:	444e      	add	r6, r9
 800d8fe:	eba5 0509 	sub.w	r5, r5, r9
 800d902:	6026      	str	r6, [r4, #0]
 800d904:	60a5      	str	r5, [r4, #8]
 800d906:	463e      	mov	r6, r7
 800d908:	42be      	cmp	r6, r7
 800d90a:	d900      	bls.n	800d90e <__ssputs_r+0x72>
 800d90c:	463e      	mov	r6, r7
 800d90e:	6820      	ldr	r0, [r4, #0]
 800d910:	4632      	mov	r2, r6
 800d912:	4641      	mov	r1, r8
 800d914:	f000 fb84 	bl	800e020 <memmove>
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	1b9b      	subs	r3, r3, r6
 800d91c:	60a3      	str	r3, [r4, #8]
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	4433      	add	r3, r6
 800d922:	6023      	str	r3, [r4, #0]
 800d924:	2000      	movs	r0, #0
 800d926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92a:	462a      	mov	r2, r5
 800d92c:	f000 fb4a 	bl	800dfc4 <_realloc_r>
 800d930:	4606      	mov	r6, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	d1e0      	bne.n	800d8f8 <__ssputs_r+0x5c>
 800d936:	6921      	ldr	r1, [r4, #16]
 800d938:	4650      	mov	r0, sl
 800d93a:	f7ff ff65 	bl	800d808 <_free_r>
 800d93e:	230c      	movs	r3, #12
 800d940:	f8ca 3000 	str.w	r3, [sl]
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d94a:	81a3      	strh	r3, [r4, #12]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d950:	e7e9      	b.n	800d926 <__ssputs_r+0x8a>
	...

0800d954 <_svfiprintf_r>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	4698      	mov	r8, r3
 800d95a:	898b      	ldrh	r3, [r1, #12]
 800d95c:	061b      	lsls	r3, r3, #24
 800d95e:	b09d      	sub	sp, #116	@ 0x74
 800d960:	4607      	mov	r7, r0
 800d962:	460d      	mov	r5, r1
 800d964:	4614      	mov	r4, r2
 800d966:	d510      	bpl.n	800d98a <_svfiprintf_r+0x36>
 800d968:	690b      	ldr	r3, [r1, #16]
 800d96a:	b973      	cbnz	r3, 800d98a <_svfiprintf_r+0x36>
 800d96c:	2140      	movs	r1, #64	@ 0x40
 800d96e:	f000 f90f 	bl	800db90 <_malloc_r>
 800d972:	6028      	str	r0, [r5, #0]
 800d974:	6128      	str	r0, [r5, #16]
 800d976:	b930      	cbnz	r0, 800d986 <_svfiprintf_r+0x32>
 800d978:	230c      	movs	r3, #12
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d980:	b01d      	add	sp, #116	@ 0x74
 800d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d986:	2340      	movs	r3, #64	@ 0x40
 800d988:	616b      	str	r3, [r5, #20]
 800d98a:	2300      	movs	r3, #0
 800d98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d98e:	2320      	movs	r3, #32
 800d990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d994:	f8cd 800c 	str.w	r8, [sp, #12]
 800d998:	2330      	movs	r3, #48	@ 0x30
 800d99a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db38 <_svfiprintf_r+0x1e4>
 800d99e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9a2:	f04f 0901 	mov.w	r9, #1
 800d9a6:	4623      	mov	r3, r4
 800d9a8:	469a      	mov	sl, r3
 800d9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ae:	b10a      	cbz	r2, 800d9b4 <_svfiprintf_r+0x60>
 800d9b0:	2a25      	cmp	r2, #37	@ 0x25
 800d9b2:	d1f9      	bne.n	800d9a8 <_svfiprintf_r+0x54>
 800d9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800d9b8:	d00b      	beq.n	800d9d2 <_svfiprintf_r+0x7e>
 800d9ba:	465b      	mov	r3, fp
 800d9bc:	4622      	mov	r2, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7ff ff6b 	bl	800d89c <__ssputs_r>
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f000 80a7 	beq.w	800db1a <_svfiprintf_r+0x1c6>
 800d9cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ce:	445a      	add	r2, fp
 800d9d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f000 809f 	beq.w	800db1a <_svfiprintf_r+0x1c6>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9e6:	f10a 0a01 	add.w	sl, sl, #1
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	9307      	str	r3, [sp, #28]
 800d9ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9f4:	4654      	mov	r4, sl
 800d9f6:	2205      	movs	r2, #5
 800d9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fc:	484e      	ldr	r0, [pc, #312]	@ (800db38 <_svfiprintf_r+0x1e4>)
 800d9fe:	f7f2 fbef 	bl	80001e0 <memchr>
 800da02:	9a04      	ldr	r2, [sp, #16]
 800da04:	b9d8      	cbnz	r0, 800da3e <_svfiprintf_r+0xea>
 800da06:	06d0      	lsls	r0, r2, #27
 800da08:	bf44      	itt	mi
 800da0a:	2320      	movmi	r3, #32
 800da0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da10:	0711      	lsls	r1, r2, #28
 800da12:	bf44      	itt	mi
 800da14:	232b      	movmi	r3, #43	@ 0x2b
 800da16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da1a:	f89a 3000 	ldrb.w	r3, [sl]
 800da1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da20:	d015      	beq.n	800da4e <_svfiprintf_r+0xfa>
 800da22:	9a07      	ldr	r2, [sp, #28]
 800da24:	4654      	mov	r4, sl
 800da26:	2000      	movs	r0, #0
 800da28:	f04f 0c0a 	mov.w	ip, #10
 800da2c:	4621      	mov	r1, r4
 800da2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da32:	3b30      	subs	r3, #48	@ 0x30
 800da34:	2b09      	cmp	r3, #9
 800da36:	d94b      	bls.n	800dad0 <_svfiprintf_r+0x17c>
 800da38:	b1b0      	cbz	r0, 800da68 <_svfiprintf_r+0x114>
 800da3a:	9207      	str	r2, [sp, #28]
 800da3c:	e014      	b.n	800da68 <_svfiprintf_r+0x114>
 800da3e:	eba0 0308 	sub.w	r3, r0, r8
 800da42:	fa09 f303 	lsl.w	r3, r9, r3
 800da46:	4313      	orrs	r3, r2
 800da48:	9304      	str	r3, [sp, #16]
 800da4a:	46a2      	mov	sl, r4
 800da4c:	e7d2      	b.n	800d9f4 <_svfiprintf_r+0xa0>
 800da4e:	9b03      	ldr	r3, [sp, #12]
 800da50:	1d19      	adds	r1, r3, #4
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	9103      	str	r1, [sp, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfbb      	ittet	lt
 800da5a:	425b      	neglt	r3, r3
 800da5c:	f042 0202 	orrlt.w	r2, r2, #2
 800da60:	9307      	strge	r3, [sp, #28]
 800da62:	9307      	strlt	r3, [sp, #28]
 800da64:	bfb8      	it	lt
 800da66:	9204      	strlt	r2, [sp, #16]
 800da68:	7823      	ldrb	r3, [r4, #0]
 800da6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800da6c:	d10a      	bne.n	800da84 <_svfiprintf_r+0x130>
 800da6e:	7863      	ldrb	r3, [r4, #1]
 800da70:	2b2a      	cmp	r3, #42	@ 0x2a
 800da72:	d132      	bne.n	800dada <_svfiprintf_r+0x186>
 800da74:	9b03      	ldr	r3, [sp, #12]
 800da76:	1d1a      	adds	r2, r3, #4
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	9203      	str	r2, [sp, #12]
 800da7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da80:	3402      	adds	r4, #2
 800da82:	9305      	str	r3, [sp, #20]
 800da84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db48 <_svfiprintf_r+0x1f4>
 800da88:	7821      	ldrb	r1, [r4, #0]
 800da8a:	2203      	movs	r2, #3
 800da8c:	4650      	mov	r0, sl
 800da8e:	f7f2 fba7 	bl	80001e0 <memchr>
 800da92:	b138      	cbz	r0, 800daa4 <_svfiprintf_r+0x150>
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	eba0 000a 	sub.w	r0, r0, sl
 800da9a:	2240      	movs	r2, #64	@ 0x40
 800da9c:	4082      	lsls	r2, r0
 800da9e:	4313      	orrs	r3, r2
 800daa0:	3401      	adds	r4, #1
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa8:	4824      	ldr	r0, [pc, #144]	@ (800db3c <_svfiprintf_r+0x1e8>)
 800daaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800daae:	2206      	movs	r2, #6
 800dab0:	f7f2 fb96 	bl	80001e0 <memchr>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d036      	beq.n	800db26 <_svfiprintf_r+0x1d2>
 800dab8:	4b21      	ldr	r3, [pc, #132]	@ (800db40 <_svfiprintf_r+0x1ec>)
 800daba:	bb1b      	cbnz	r3, 800db04 <_svfiprintf_r+0x1b0>
 800dabc:	9b03      	ldr	r3, [sp, #12]
 800dabe:	3307      	adds	r3, #7
 800dac0:	f023 0307 	bic.w	r3, r3, #7
 800dac4:	3308      	adds	r3, #8
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daca:	4433      	add	r3, r6
 800dacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dace:	e76a      	b.n	800d9a6 <_svfiprintf_r+0x52>
 800dad0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dad4:	460c      	mov	r4, r1
 800dad6:	2001      	movs	r0, #1
 800dad8:	e7a8      	b.n	800da2c <_svfiprintf_r+0xd8>
 800dada:	2300      	movs	r3, #0
 800dadc:	3401      	adds	r4, #1
 800dade:	9305      	str	r3, [sp, #20]
 800dae0:	4619      	mov	r1, r3
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4620      	mov	r0, r4
 800dae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daec:	3a30      	subs	r2, #48	@ 0x30
 800daee:	2a09      	cmp	r2, #9
 800daf0:	d903      	bls.n	800dafa <_svfiprintf_r+0x1a6>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0c6      	beq.n	800da84 <_svfiprintf_r+0x130>
 800daf6:	9105      	str	r1, [sp, #20]
 800daf8:	e7c4      	b.n	800da84 <_svfiprintf_r+0x130>
 800dafa:	fb0c 2101 	mla	r1, ip, r1, r2
 800dafe:	4604      	mov	r4, r0
 800db00:	2301      	movs	r3, #1
 800db02:	e7f0      	b.n	800dae6 <_svfiprintf_r+0x192>
 800db04:	ab03      	add	r3, sp, #12
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	462a      	mov	r2, r5
 800db0a:	4b0e      	ldr	r3, [pc, #56]	@ (800db44 <_svfiprintf_r+0x1f0>)
 800db0c:	a904      	add	r1, sp, #16
 800db0e:	4638      	mov	r0, r7
 800db10:	f3af 8000 	nop.w
 800db14:	1c42      	adds	r2, r0, #1
 800db16:	4606      	mov	r6, r0
 800db18:	d1d6      	bne.n	800dac8 <_svfiprintf_r+0x174>
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	065b      	lsls	r3, r3, #25
 800db1e:	f53f af2d 	bmi.w	800d97c <_svfiprintf_r+0x28>
 800db22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db24:	e72c      	b.n	800d980 <_svfiprintf_r+0x2c>
 800db26:	ab03      	add	r3, sp, #12
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	462a      	mov	r2, r5
 800db2c:	4b05      	ldr	r3, [pc, #20]	@ (800db44 <_svfiprintf_r+0x1f0>)
 800db2e:	a904      	add	r1, sp, #16
 800db30:	4638      	mov	r0, r7
 800db32:	f000 f91b 	bl	800dd6c <_printf_i>
 800db36:	e7ed      	b.n	800db14 <_svfiprintf_r+0x1c0>
 800db38:	0800e3c8 	.word	0x0800e3c8
 800db3c:	0800e3d2 	.word	0x0800e3d2
 800db40:	00000000 	.word	0x00000000
 800db44:	0800d89d 	.word	0x0800d89d
 800db48:	0800e3ce 	.word	0x0800e3ce

0800db4c <sbrk_aligned>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4e0f      	ldr	r6, [pc, #60]	@ (800db8c <sbrk_aligned+0x40>)
 800db50:	460c      	mov	r4, r1
 800db52:	6831      	ldr	r1, [r6, #0]
 800db54:	4605      	mov	r5, r0
 800db56:	b911      	cbnz	r1, 800db5e <sbrk_aligned+0x12>
 800db58:	f000 fa7c 	bl	800e054 <_sbrk_r>
 800db5c:	6030      	str	r0, [r6, #0]
 800db5e:	4621      	mov	r1, r4
 800db60:	4628      	mov	r0, r5
 800db62:	f000 fa77 	bl	800e054 <_sbrk_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d103      	bne.n	800db72 <sbrk_aligned+0x26>
 800db6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800db6e:	4620      	mov	r0, r4
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	1cc4      	adds	r4, r0, #3
 800db74:	f024 0403 	bic.w	r4, r4, #3
 800db78:	42a0      	cmp	r0, r4
 800db7a:	d0f8      	beq.n	800db6e <sbrk_aligned+0x22>
 800db7c:	1a21      	subs	r1, r4, r0
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 fa68 	bl	800e054 <_sbrk_r>
 800db84:	3001      	adds	r0, #1
 800db86:	d1f2      	bne.n	800db6e <sbrk_aligned+0x22>
 800db88:	e7ef      	b.n	800db6a <sbrk_aligned+0x1e>
 800db8a:	bf00      	nop
 800db8c:	200058ac 	.word	0x200058ac

0800db90 <_malloc_r>:
 800db90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db94:	1ccd      	adds	r5, r1, #3
 800db96:	f025 0503 	bic.w	r5, r5, #3
 800db9a:	3508      	adds	r5, #8
 800db9c:	2d0c      	cmp	r5, #12
 800db9e:	bf38      	it	cc
 800dba0:	250c      	movcc	r5, #12
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	4606      	mov	r6, r0
 800dba6:	db01      	blt.n	800dbac <_malloc_r+0x1c>
 800dba8:	42a9      	cmp	r1, r5
 800dbaa:	d904      	bls.n	800dbb6 <_malloc_r+0x26>
 800dbac:	230c      	movs	r3, #12
 800dbae:	6033      	str	r3, [r6, #0]
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc8c <_malloc_r+0xfc>
 800dbba:	f000 f9f7 	bl	800dfac <__malloc_lock>
 800dbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc2:	461c      	mov	r4, r3
 800dbc4:	bb44      	cbnz	r4, 800dc18 <_malloc_r+0x88>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff ffbf 	bl	800db4c <sbrk_aligned>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	d158      	bne.n	800dc86 <_malloc_r+0xf6>
 800dbd4:	f8d8 4000 	ldr.w	r4, [r8]
 800dbd8:	4627      	mov	r7, r4
 800dbda:	2f00      	cmp	r7, #0
 800dbdc:	d143      	bne.n	800dc66 <_malloc_r+0xd6>
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	d04b      	beq.n	800dc7a <_malloc_r+0xea>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	eb04 0903 	add.w	r9, r4, r3
 800dbec:	f000 fa32 	bl	800e054 <_sbrk_r>
 800dbf0:	4581      	cmp	r9, r0
 800dbf2:	d142      	bne.n	800dc7a <_malloc_r+0xea>
 800dbf4:	6821      	ldr	r1, [r4, #0]
 800dbf6:	1a6d      	subs	r5, r5, r1
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7ff ffa6 	bl	800db4c <sbrk_aligned>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d03a      	beq.n	800dc7a <_malloc_r+0xea>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	442b      	add	r3, r5
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	bb62      	cbnz	r2, 800dc6c <_malloc_r+0xdc>
 800dc12:	f8c8 7000 	str.w	r7, [r8]
 800dc16:	e00f      	b.n	800dc38 <_malloc_r+0xa8>
 800dc18:	6822      	ldr	r2, [r4, #0]
 800dc1a:	1b52      	subs	r2, r2, r5
 800dc1c:	d420      	bmi.n	800dc60 <_malloc_r+0xd0>
 800dc1e:	2a0b      	cmp	r2, #11
 800dc20:	d917      	bls.n	800dc52 <_malloc_r+0xc2>
 800dc22:	1961      	adds	r1, r4, r5
 800dc24:	42a3      	cmp	r3, r4
 800dc26:	6025      	str	r5, [r4, #0]
 800dc28:	bf18      	it	ne
 800dc2a:	6059      	strne	r1, [r3, #4]
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	bf08      	it	eq
 800dc30:	f8c8 1000 	streq.w	r1, [r8]
 800dc34:	5162      	str	r2, [r4, r5]
 800dc36:	604b      	str	r3, [r1, #4]
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 f9bd 	bl	800dfb8 <__malloc_unlock>
 800dc3e:	f104 000b 	add.w	r0, r4, #11
 800dc42:	1d23      	adds	r3, r4, #4
 800dc44:	f020 0007 	bic.w	r0, r0, #7
 800dc48:	1ac2      	subs	r2, r0, r3
 800dc4a:	bf1c      	itt	ne
 800dc4c:	1a1b      	subne	r3, r3, r0
 800dc4e:	50a3      	strne	r3, [r4, r2]
 800dc50:	e7af      	b.n	800dbb2 <_malloc_r+0x22>
 800dc52:	6862      	ldr	r2, [r4, #4]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	bf0c      	ite	eq
 800dc58:	f8c8 2000 	streq.w	r2, [r8]
 800dc5c:	605a      	strne	r2, [r3, #4]
 800dc5e:	e7eb      	b.n	800dc38 <_malloc_r+0xa8>
 800dc60:	4623      	mov	r3, r4
 800dc62:	6864      	ldr	r4, [r4, #4]
 800dc64:	e7ae      	b.n	800dbc4 <_malloc_r+0x34>
 800dc66:	463c      	mov	r4, r7
 800dc68:	687f      	ldr	r7, [r7, #4]
 800dc6a:	e7b6      	b.n	800dbda <_malloc_r+0x4a>
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	42a3      	cmp	r3, r4
 800dc72:	d1fb      	bne.n	800dc6c <_malloc_r+0xdc>
 800dc74:	2300      	movs	r3, #0
 800dc76:	6053      	str	r3, [r2, #4]
 800dc78:	e7de      	b.n	800dc38 <_malloc_r+0xa8>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	6033      	str	r3, [r6, #0]
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f000 f99a 	bl	800dfb8 <__malloc_unlock>
 800dc84:	e794      	b.n	800dbb0 <_malloc_r+0x20>
 800dc86:	6005      	str	r5, [r0, #0]
 800dc88:	e7d6      	b.n	800dc38 <_malloc_r+0xa8>
 800dc8a:	bf00      	nop
 800dc8c:	200058b0 	.word	0x200058b0

0800dc90 <_printf_common>:
 800dc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc94:	4616      	mov	r6, r2
 800dc96:	4698      	mov	r8, r3
 800dc98:	688a      	ldr	r2, [r1, #8]
 800dc9a:	690b      	ldr	r3, [r1, #16]
 800dc9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dca0:	4293      	cmp	r3, r2
 800dca2:	bfb8      	it	lt
 800dca4:	4613      	movlt	r3, r2
 800dca6:	6033      	str	r3, [r6, #0]
 800dca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dcac:	4607      	mov	r7, r0
 800dcae:	460c      	mov	r4, r1
 800dcb0:	b10a      	cbz	r2, 800dcb6 <_printf_common+0x26>
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	6033      	str	r3, [r6, #0]
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	0699      	lsls	r1, r3, #26
 800dcba:	bf42      	ittt	mi
 800dcbc:	6833      	ldrmi	r3, [r6, #0]
 800dcbe:	3302      	addmi	r3, #2
 800dcc0:	6033      	strmi	r3, [r6, #0]
 800dcc2:	6825      	ldr	r5, [r4, #0]
 800dcc4:	f015 0506 	ands.w	r5, r5, #6
 800dcc8:	d106      	bne.n	800dcd8 <_printf_common+0x48>
 800dcca:	f104 0a19 	add.w	sl, r4, #25
 800dcce:	68e3      	ldr	r3, [r4, #12]
 800dcd0:	6832      	ldr	r2, [r6, #0]
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	42ab      	cmp	r3, r5
 800dcd6:	dc26      	bgt.n	800dd26 <_printf_common+0x96>
 800dcd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dcdc:	6822      	ldr	r2, [r4, #0]
 800dcde:	3b00      	subs	r3, #0
 800dce0:	bf18      	it	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	0692      	lsls	r2, r2, #26
 800dce6:	d42b      	bmi.n	800dd40 <_printf_common+0xb0>
 800dce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dcec:	4641      	mov	r1, r8
 800dcee:	4638      	mov	r0, r7
 800dcf0:	47c8      	blx	r9
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	d01e      	beq.n	800dd34 <_printf_common+0xa4>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	6922      	ldr	r2, [r4, #16]
 800dcfa:	f003 0306 	and.w	r3, r3, #6
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	bf02      	ittt	eq
 800dd02:	68e5      	ldreq	r5, [r4, #12]
 800dd04:	6833      	ldreq	r3, [r6, #0]
 800dd06:	1aed      	subeq	r5, r5, r3
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	bf0c      	ite	eq
 800dd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd10:	2500      	movne	r5, #0
 800dd12:	4293      	cmp	r3, r2
 800dd14:	bfc4      	itt	gt
 800dd16:	1a9b      	subgt	r3, r3, r2
 800dd18:	18ed      	addgt	r5, r5, r3
 800dd1a:	2600      	movs	r6, #0
 800dd1c:	341a      	adds	r4, #26
 800dd1e:	42b5      	cmp	r5, r6
 800dd20:	d11a      	bne.n	800dd58 <_printf_common+0xc8>
 800dd22:	2000      	movs	r0, #0
 800dd24:	e008      	b.n	800dd38 <_printf_common+0xa8>
 800dd26:	2301      	movs	r3, #1
 800dd28:	4652      	mov	r2, sl
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	47c8      	blx	r9
 800dd30:	3001      	adds	r0, #1
 800dd32:	d103      	bne.n	800dd3c <_printf_common+0xac>
 800dd34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd3c:	3501      	adds	r5, #1
 800dd3e:	e7c6      	b.n	800dcce <_printf_common+0x3e>
 800dd40:	18e1      	adds	r1, r4, r3
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	2030      	movs	r0, #48	@ 0x30
 800dd46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd4a:	4422      	add	r2, r4
 800dd4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd54:	3302      	adds	r3, #2
 800dd56:	e7c7      	b.n	800dce8 <_printf_common+0x58>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	4641      	mov	r1, r8
 800dd5e:	4638      	mov	r0, r7
 800dd60:	47c8      	blx	r9
 800dd62:	3001      	adds	r0, #1
 800dd64:	d0e6      	beq.n	800dd34 <_printf_common+0xa4>
 800dd66:	3601      	adds	r6, #1
 800dd68:	e7d9      	b.n	800dd1e <_printf_common+0x8e>
	...

0800dd6c <_printf_i>:
 800dd6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd70:	7e0f      	ldrb	r7, [r1, #24]
 800dd72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd74:	2f78      	cmp	r7, #120	@ 0x78
 800dd76:	4691      	mov	r9, r2
 800dd78:	4680      	mov	r8, r0
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	469a      	mov	sl, r3
 800dd7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd82:	d807      	bhi.n	800dd94 <_printf_i+0x28>
 800dd84:	2f62      	cmp	r7, #98	@ 0x62
 800dd86:	d80a      	bhi.n	800dd9e <_printf_i+0x32>
 800dd88:	2f00      	cmp	r7, #0
 800dd8a:	f000 80d2 	beq.w	800df32 <_printf_i+0x1c6>
 800dd8e:	2f58      	cmp	r7, #88	@ 0x58
 800dd90:	f000 80b9 	beq.w	800df06 <_printf_i+0x19a>
 800dd94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd9c:	e03a      	b.n	800de14 <_printf_i+0xa8>
 800dd9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dda2:	2b15      	cmp	r3, #21
 800dda4:	d8f6      	bhi.n	800dd94 <_printf_i+0x28>
 800dda6:	a101      	add	r1, pc, #4	@ (adr r1, 800ddac <_printf_i+0x40>)
 800dda8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddac:	0800de05 	.word	0x0800de05
 800ddb0:	0800de19 	.word	0x0800de19
 800ddb4:	0800dd95 	.word	0x0800dd95
 800ddb8:	0800dd95 	.word	0x0800dd95
 800ddbc:	0800dd95 	.word	0x0800dd95
 800ddc0:	0800dd95 	.word	0x0800dd95
 800ddc4:	0800de19 	.word	0x0800de19
 800ddc8:	0800dd95 	.word	0x0800dd95
 800ddcc:	0800dd95 	.word	0x0800dd95
 800ddd0:	0800dd95 	.word	0x0800dd95
 800ddd4:	0800dd95 	.word	0x0800dd95
 800ddd8:	0800df19 	.word	0x0800df19
 800dddc:	0800de43 	.word	0x0800de43
 800dde0:	0800ded3 	.word	0x0800ded3
 800dde4:	0800dd95 	.word	0x0800dd95
 800dde8:	0800dd95 	.word	0x0800dd95
 800ddec:	0800df3b 	.word	0x0800df3b
 800ddf0:	0800dd95 	.word	0x0800dd95
 800ddf4:	0800de43 	.word	0x0800de43
 800ddf8:	0800dd95 	.word	0x0800dd95
 800ddfc:	0800dd95 	.word	0x0800dd95
 800de00:	0800dedb 	.word	0x0800dedb
 800de04:	6833      	ldr	r3, [r6, #0]
 800de06:	1d1a      	adds	r2, r3, #4
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6032      	str	r2, [r6, #0]
 800de0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de14:	2301      	movs	r3, #1
 800de16:	e09d      	b.n	800df54 <_printf_i+0x1e8>
 800de18:	6833      	ldr	r3, [r6, #0]
 800de1a:	6820      	ldr	r0, [r4, #0]
 800de1c:	1d19      	adds	r1, r3, #4
 800de1e:	6031      	str	r1, [r6, #0]
 800de20:	0606      	lsls	r6, r0, #24
 800de22:	d501      	bpl.n	800de28 <_printf_i+0xbc>
 800de24:	681d      	ldr	r5, [r3, #0]
 800de26:	e003      	b.n	800de30 <_printf_i+0xc4>
 800de28:	0645      	lsls	r5, r0, #25
 800de2a:	d5fb      	bpl.n	800de24 <_printf_i+0xb8>
 800de2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de30:	2d00      	cmp	r5, #0
 800de32:	da03      	bge.n	800de3c <_printf_i+0xd0>
 800de34:	232d      	movs	r3, #45	@ 0x2d
 800de36:	426d      	negs	r5, r5
 800de38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de3c:	4859      	ldr	r0, [pc, #356]	@ (800dfa4 <_printf_i+0x238>)
 800de3e:	230a      	movs	r3, #10
 800de40:	e011      	b.n	800de66 <_printf_i+0xfa>
 800de42:	6821      	ldr	r1, [r4, #0]
 800de44:	6833      	ldr	r3, [r6, #0]
 800de46:	0608      	lsls	r0, r1, #24
 800de48:	f853 5b04 	ldr.w	r5, [r3], #4
 800de4c:	d402      	bmi.n	800de54 <_printf_i+0xe8>
 800de4e:	0649      	lsls	r1, r1, #25
 800de50:	bf48      	it	mi
 800de52:	b2ad      	uxthmi	r5, r5
 800de54:	2f6f      	cmp	r7, #111	@ 0x6f
 800de56:	4853      	ldr	r0, [pc, #332]	@ (800dfa4 <_printf_i+0x238>)
 800de58:	6033      	str	r3, [r6, #0]
 800de5a:	bf14      	ite	ne
 800de5c:	230a      	movne	r3, #10
 800de5e:	2308      	moveq	r3, #8
 800de60:	2100      	movs	r1, #0
 800de62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de66:	6866      	ldr	r6, [r4, #4]
 800de68:	60a6      	str	r6, [r4, #8]
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	bfa2      	ittt	ge
 800de6e:	6821      	ldrge	r1, [r4, #0]
 800de70:	f021 0104 	bicge.w	r1, r1, #4
 800de74:	6021      	strge	r1, [r4, #0]
 800de76:	b90d      	cbnz	r5, 800de7c <_printf_i+0x110>
 800de78:	2e00      	cmp	r6, #0
 800de7a:	d04b      	beq.n	800df14 <_printf_i+0x1a8>
 800de7c:	4616      	mov	r6, r2
 800de7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800de82:	fb03 5711 	mls	r7, r3, r1, r5
 800de86:	5dc7      	ldrb	r7, [r0, r7]
 800de88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de8c:	462f      	mov	r7, r5
 800de8e:	42bb      	cmp	r3, r7
 800de90:	460d      	mov	r5, r1
 800de92:	d9f4      	bls.n	800de7e <_printf_i+0x112>
 800de94:	2b08      	cmp	r3, #8
 800de96:	d10b      	bne.n	800deb0 <_printf_i+0x144>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	07df      	lsls	r7, r3, #31
 800de9c:	d508      	bpl.n	800deb0 <_printf_i+0x144>
 800de9e:	6923      	ldr	r3, [r4, #16]
 800dea0:	6861      	ldr	r1, [r4, #4]
 800dea2:	4299      	cmp	r1, r3
 800dea4:	bfde      	ittt	le
 800dea6:	2330      	movle	r3, #48	@ 0x30
 800dea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800deac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800deb0:	1b92      	subs	r2, r2, r6
 800deb2:	6122      	str	r2, [r4, #16]
 800deb4:	f8cd a000 	str.w	sl, [sp]
 800deb8:	464b      	mov	r3, r9
 800deba:	aa03      	add	r2, sp, #12
 800debc:	4621      	mov	r1, r4
 800debe:	4640      	mov	r0, r8
 800dec0:	f7ff fee6 	bl	800dc90 <_printf_common>
 800dec4:	3001      	adds	r0, #1
 800dec6:	d14a      	bne.n	800df5e <_printf_i+0x1f2>
 800dec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800decc:	b004      	add	sp, #16
 800dece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	f043 0320 	orr.w	r3, r3, #32
 800ded8:	6023      	str	r3, [r4, #0]
 800deda:	4833      	ldr	r0, [pc, #204]	@ (800dfa8 <_printf_i+0x23c>)
 800dedc:	2778      	movs	r7, #120	@ 0x78
 800dede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	6831      	ldr	r1, [r6, #0]
 800dee6:	061f      	lsls	r7, r3, #24
 800dee8:	f851 5b04 	ldr.w	r5, [r1], #4
 800deec:	d402      	bmi.n	800def4 <_printf_i+0x188>
 800deee:	065f      	lsls	r7, r3, #25
 800def0:	bf48      	it	mi
 800def2:	b2ad      	uxthmi	r5, r5
 800def4:	6031      	str	r1, [r6, #0]
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	bf44      	itt	mi
 800defa:	f043 0320 	orrmi.w	r3, r3, #32
 800defe:	6023      	strmi	r3, [r4, #0]
 800df00:	b11d      	cbz	r5, 800df0a <_printf_i+0x19e>
 800df02:	2310      	movs	r3, #16
 800df04:	e7ac      	b.n	800de60 <_printf_i+0xf4>
 800df06:	4827      	ldr	r0, [pc, #156]	@ (800dfa4 <_printf_i+0x238>)
 800df08:	e7e9      	b.n	800dede <_printf_i+0x172>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	f023 0320 	bic.w	r3, r3, #32
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	e7f6      	b.n	800df02 <_printf_i+0x196>
 800df14:	4616      	mov	r6, r2
 800df16:	e7bd      	b.n	800de94 <_printf_i+0x128>
 800df18:	6833      	ldr	r3, [r6, #0]
 800df1a:	6825      	ldr	r5, [r4, #0]
 800df1c:	6961      	ldr	r1, [r4, #20]
 800df1e:	1d18      	adds	r0, r3, #4
 800df20:	6030      	str	r0, [r6, #0]
 800df22:	062e      	lsls	r6, r5, #24
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	d501      	bpl.n	800df2c <_printf_i+0x1c0>
 800df28:	6019      	str	r1, [r3, #0]
 800df2a:	e002      	b.n	800df32 <_printf_i+0x1c6>
 800df2c:	0668      	lsls	r0, r5, #25
 800df2e:	d5fb      	bpl.n	800df28 <_printf_i+0x1bc>
 800df30:	8019      	strh	r1, [r3, #0]
 800df32:	2300      	movs	r3, #0
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	4616      	mov	r6, r2
 800df38:	e7bc      	b.n	800deb4 <_printf_i+0x148>
 800df3a:	6833      	ldr	r3, [r6, #0]
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	6032      	str	r2, [r6, #0]
 800df40:	681e      	ldr	r6, [r3, #0]
 800df42:	6862      	ldr	r2, [r4, #4]
 800df44:	2100      	movs	r1, #0
 800df46:	4630      	mov	r0, r6
 800df48:	f7f2 f94a 	bl	80001e0 <memchr>
 800df4c:	b108      	cbz	r0, 800df52 <_printf_i+0x1e6>
 800df4e:	1b80      	subs	r0, r0, r6
 800df50:	6060      	str	r0, [r4, #4]
 800df52:	6863      	ldr	r3, [r4, #4]
 800df54:	6123      	str	r3, [r4, #16]
 800df56:	2300      	movs	r3, #0
 800df58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df5c:	e7aa      	b.n	800deb4 <_printf_i+0x148>
 800df5e:	6923      	ldr	r3, [r4, #16]
 800df60:	4632      	mov	r2, r6
 800df62:	4649      	mov	r1, r9
 800df64:	4640      	mov	r0, r8
 800df66:	47d0      	blx	sl
 800df68:	3001      	adds	r0, #1
 800df6a:	d0ad      	beq.n	800dec8 <_printf_i+0x15c>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	079b      	lsls	r3, r3, #30
 800df70:	d413      	bmi.n	800df9a <_printf_i+0x22e>
 800df72:	68e0      	ldr	r0, [r4, #12]
 800df74:	9b03      	ldr	r3, [sp, #12]
 800df76:	4298      	cmp	r0, r3
 800df78:	bfb8      	it	lt
 800df7a:	4618      	movlt	r0, r3
 800df7c:	e7a6      	b.n	800decc <_printf_i+0x160>
 800df7e:	2301      	movs	r3, #1
 800df80:	4632      	mov	r2, r6
 800df82:	4649      	mov	r1, r9
 800df84:	4640      	mov	r0, r8
 800df86:	47d0      	blx	sl
 800df88:	3001      	adds	r0, #1
 800df8a:	d09d      	beq.n	800dec8 <_printf_i+0x15c>
 800df8c:	3501      	adds	r5, #1
 800df8e:	68e3      	ldr	r3, [r4, #12]
 800df90:	9903      	ldr	r1, [sp, #12]
 800df92:	1a5b      	subs	r3, r3, r1
 800df94:	42ab      	cmp	r3, r5
 800df96:	dcf2      	bgt.n	800df7e <_printf_i+0x212>
 800df98:	e7eb      	b.n	800df72 <_printf_i+0x206>
 800df9a:	2500      	movs	r5, #0
 800df9c:	f104 0619 	add.w	r6, r4, #25
 800dfa0:	e7f5      	b.n	800df8e <_printf_i+0x222>
 800dfa2:	bf00      	nop
 800dfa4:	0800e3d9 	.word	0x0800e3d9
 800dfa8:	0800e3ea 	.word	0x0800e3ea

0800dfac <__malloc_lock>:
 800dfac:	4801      	ldr	r0, [pc, #4]	@ (800dfb4 <__malloc_lock+0x8>)
 800dfae:	f7ff bc1b 	b.w	800d7e8 <__retarget_lock_acquire_recursive>
 800dfb2:	bf00      	nop
 800dfb4:	200058a8 	.word	0x200058a8

0800dfb8 <__malloc_unlock>:
 800dfb8:	4801      	ldr	r0, [pc, #4]	@ (800dfc0 <__malloc_unlock+0x8>)
 800dfba:	f7ff bc16 	b.w	800d7ea <__retarget_lock_release_recursive>
 800dfbe:	bf00      	nop
 800dfc0:	200058a8 	.word	0x200058a8

0800dfc4 <_realloc_r>:
 800dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4615      	mov	r5, r2
 800dfcc:	460c      	mov	r4, r1
 800dfce:	b921      	cbnz	r1, 800dfda <_realloc_r+0x16>
 800dfd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	f7ff bddb 	b.w	800db90 <_malloc_r>
 800dfda:	b92a      	cbnz	r2, 800dfe8 <_realloc_r+0x24>
 800dfdc:	f7ff fc14 	bl	800d808 <_free_r>
 800dfe0:	2400      	movs	r4, #0
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe8:	f000 f844 	bl	800e074 <_malloc_usable_size_r>
 800dfec:	4285      	cmp	r5, r0
 800dfee:	4606      	mov	r6, r0
 800dff0:	d802      	bhi.n	800dff8 <_realloc_r+0x34>
 800dff2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dff6:	d8f4      	bhi.n	800dfe2 <_realloc_r+0x1e>
 800dff8:	4629      	mov	r1, r5
 800dffa:	4640      	mov	r0, r8
 800dffc:	f7ff fdc8 	bl	800db90 <_malloc_r>
 800e000:	4607      	mov	r7, r0
 800e002:	2800      	cmp	r0, #0
 800e004:	d0ec      	beq.n	800dfe0 <_realloc_r+0x1c>
 800e006:	42b5      	cmp	r5, r6
 800e008:	462a      	mov	r2, r5
 800e00a:	4621      	mov	r1, r4
 800e00c:	bf28      	it	cs
 800e00e:	4632      	movcs	r2, r6
 800e010:	f7ff fbec 	bl	800d7ec <memcpy>
 800e014:	4621      	mov	r1, r4
 800e016:	4640      	mov	r0, r8
 800e018:	f7ff fbf6 	bl	800d808 <_free_r>
 800e01c:	463c      	mov	r4, r7
 800e01e:	e7e0      	b.n	800dfe2 <_realloc_r+0x1e>

0800e020 <memmove>:
 800e020:	4288      	cmp	r0, r1
 800e022:	b510      	push	{r4, lr}
 800e024:	eb01 0402 	add.w	r4, r1, r2
 800e028:	d902      	bls.n	800e030 <memmove+0x10>
 800e02a:	4284      	cmp	r4, r0
 800e02c:	4623      	mov	r3, r4
 800e02e:	d807      	bhi.n	800e040 <memmove+0x20>
 800e030:	1e43      	subs	r3, r0, #1
 800e032:	42a1      	cmp	r1, r4
 800e034:	d008      	beq.n	800e048 <memmove+0x28>
 800e036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e03e:	e7f8      	b.n	800e032 <memmove+0x12>
 800e040:	4402      	add	r2, r0
 800e042:	4601      	mov	r1, r0
 800e044:	428a      	cmp	r2, r1
 800e046:	d100      	bne.n	800e04a <memmove+0x2a>
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e052:	e7f7      	b.n	800e044 <memmove+0x24>

0800e054 <_sbrk_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d06      	ldr	r5, [pc, #24]	@ (800e070 <_sbrk_r+0x1c>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	602b      	str	r3, [r5, #0]
 800e060:	f7f6 fd8a 	bl	8004b78 <_sbrk>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_sbrk_r+0x1a>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_sbrk_r+0x1a>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	200058a4 	.word	0x200058a4

0800e074 <_malloc_usable_size_r>:
 800e074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e078:	1f18      	subs	r0, r3, #4
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bfbc      	itt	lt
 800e07e:	580b      	ldrlt	r3, [r1, r0]
 800e080:	18c0      	addlt	r0, r0, r3
 800e082:	4770      	bx	lr

0800e084 <sqrtf>:
 800e084:	b508      	push	{r3, lr}
 800e086:	ed2d 8b02 	vpush	{d8}
 800e08a:	eeb0 8a40 	vmov.f32	s16, s0
 800e08e:	f000 f8f2 	bl	800e276 <__ieee754_sqrtf>
 800e092:	eeb4 8a48 	vcmp.f32	s16, s16
 800e096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09a:	d60c      	bvs.n	800e0b6 <sqrtf+0x32>
 800e09c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e0bc <sqrtf+0x38>
 800e0a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a8:	d505      	bpl.n	800e0b6 <sqrtf+0x32>
 800e0aa:	f7ff fb73 	bl	800d794 <__errno>
 800e0ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e0b2:	2321      	movs	r3, #33	@ 0x21
 800e0b4:	6003      	str	r3, [r0, #0]
 800e0b6:	ecbd 8b02 	vpop	{d8}
 800e0ba:	bd08      	pop	{r3, pc}
 800e0bc:	00000000 	.word	0x00000000

0800e0c0 <atanf>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	ee10 5a10 	vmov	r5, s0
 800e0c6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e0ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e0ce:	eef0 7a40 	vmov.f32	s15, s0
 800e0d2:	d310      	bcc.n	800e0f6 <atanf+0x36>
 800e0d4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e0d8:	d904      	bls.n	800e0e4 <atanf+0x24>
 800e0da:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e0de:	eeb0 0a67 	vmov.f32	s0, s15
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e21c <atanf+0x15c>
 800e0e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e220 <atanf+0x160>
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	bfc8      	it	gt
 800e0f0:	eef0 7a47 	vmovgt.f32	s15, s14
 800e0f4:	e7f3      	b.n	800e0de <atanf+0x1e>
 800e0f6:	4b4b      	ldr	r3, [pc, #300]	@ (800e224 <atanf+0x164>)
 800e0f8:	429c      	cmp	r4, r3
 800e0fa:	d810      	bhi.n	800e11e <atanf+0x5e>
 800e0fc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e100:	d20a      	bcs.n	800e118 <atanf+0x58>
 800e102:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e228 <atanf+0x168>
 800e106:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e10a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e10e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e116:	dce2      	bgt.n	800e0de <atanf+0x1e>
 800e118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e11c:	e013      	b.n	800e146 <atanf+0x86>
 800e11e:	f000 f8a3 	bl	800e268 <fabsf>
 800e122:	4b42      	ldr	r3, [pc, #264]	@ (800e22c <atanf+0x16c>)
 800e124:	429c      	cmp	r4, r3
 800e126:	d84f      	bhi.n	800e1c8 <atanf+0x108>
 800e128:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e12c:	429c      	cmp	r4, r3
 800e12e:	d841      	bhi.n	800e1b4 <atanf+0xf4>
 800e130:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e134:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e138:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e13c:	2300      	movs	r3, #0
 800e13e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e142:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e14c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e230 <atanf+0x170>
 800e150:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e234 <atanf+0x174>
 800e154:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e238 <atanf+0x178>
 800e158:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e15c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e160:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e23c <atanf+0x17c>
 800e164:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e168:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e240 <atanf+0x180>
 800e16c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e170:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e244 <atanf+0x184>
 800e174:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e178:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e248 <atanf+0x188>
 800e17c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e180:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e24c <atanf+0x18c>
 800e184:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e188:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e250 <atanf+0x190>
 800e18c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e190:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e254 <atanf+0x194>
 800e194:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e198:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e258 <atanf+0x198>
 800e19c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e1a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e1a4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e1a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e1ac:	d121      	bne.n	800e1f2 <atanf+0x132>
 800e1ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1b2:	e794      	b.n	800e0de <atanf+0x1e>
 800e1b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e1b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e1bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e1c6:	e7be      	b.n	800e146 <atanf+0x86>
 800e1c8:	4b24      	ldr	r3, [pc, #144]	@ (800e25c <atanf+0x19c>)
 800e1ca:	429c      	cmp	r4, r3
 800e1cc:	d80b      	bhi.n	800e1e6 <atanf+0x126>
 800e1ce:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e1d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1d6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e1da:	2302      	movs	r3, #2
 800e1dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e1e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1e4:	e7af      	b.n	800e146 <atanf+0x86>
 800e1e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e1ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	e7a9      	b.n	800e146 <atanf+0x86>
 800e1f2:	4a1b      	ldr	r2, [pc, #108]	@ (800e260 <atanf+0x1a0>)
 800e1f4:	491b      	ldr	r1, [pc, #108]	@ (800e264 <atanf+0x1a4>)
 800e1f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e1fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e1fe:	edd3 6a00 	vldr	s13, [r3]
 800e202:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e206:	2d00      	cmp	r5, #0
 800e208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e20c:	edd2 7a00 	vldr	s15, [r2]
 800e210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e214:	bfb8      	it	lt
 800e216:	eef1 7a67 	vneglt.f32	s15, s15
 800e21a:	e760      	b.n	800e0de <atanf+0x1e>
 800e21c:	bfc90fdb 	.word	0xbfc90fdb
 800e220:	3fc90fdb 	.word	0x3fc90fdb
 800e224:	3edfffff 	.word	0x3edfffff
 800e228:	7149f2ca 	.word	0x7149f2ca
 800e22c:	3f97ffff 	.word	0x3f97ffff
 800e230:	3c8569d7 	.word	0x3c8569d7
 800e234:	3d4bda59 	.word	0x3d4bda59
 800e238:	bd6ef16b 	.word	0xbd6ef16b
 800e23c:	3d886b35 	.word	0x3d886b35
 800e240:	3dba2e6e 	.word	0x3dba2e6e
 800e244:	3e124925 	.word	0x3e124925
 800e248:	3eaaaaab 	.word	0x3eaaaaab
 800e24c:	bd15a221 	.word	0xbd15a221
 800e250:	bd9d8795 	.word	0xbd9d8795
 800e254:	bde38e38 	.word	0xbde38e38
 800e258:	be4ccccd 	.word	0xbe4ccccd
 800e25c:	401bffff 	.word	0x401bffff
 800e260:	0800e40c 	.word	0x0800e40c
 800e264:	0800e3fc 	.word	0x0800e3fc

0800e268 <fabsf>:
 800e268:	ee10 3a10 	vmov	r3, s0
 800e26c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e270:	ee00 3a10 	vmov	s0, r3
 800e274:	4770      	bx	lr

0800e276 <__ieee754_sqrtf>:
 800e276:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e27a:	4770      	bx	lr

0800e27c <_init>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr

0800e288 <_fini>:
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	bf00      	nop
 800e28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e28e:	bc08      	pop	{r3}
 800e290:	469e      	mov	lr, r3
 800e292:	4770      	bx	lr
