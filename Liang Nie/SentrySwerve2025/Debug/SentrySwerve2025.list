
SentrySwerve2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e340  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800e4d0  0800e4d0  0000f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e65c  0800e65c  00010098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e65c  0800e65c  0000f65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e664  0800e664  00010098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e664  0800e664  0000f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e668  0800e668  0000f668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800e66c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010098  2**0
                  CONTENTS
 10 .bss          00005888  20000098  20000098  00010098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005920  20005920  00010098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025f2c  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000569c  00000000  00000000  00035ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  0003b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001859  00000000  00000000  0003d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267c9  00000000  00000000  0003ee11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002631e  00000000  00000000  000655da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1777  00000000  00000000  0008b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016d06f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008918  00000000  00000000  0016d0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001759cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e4b8 	.word	0x0800e4b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800e4b8 	.word	0x0800e4b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 b988 	b.w	8000e34 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	468e      	mov	lr, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	4688      	mov	r8, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d962      	bls.n	8000c18 <__udivmoddi4+0xdc>
 8000b52:	fab2 f682 	clz	r6, r2
 8000b56:	b14e      	cbz	r6, 8000b6c <__udivmoddi4+0x30>
 8000b58:	f1c6 0320 	rsb	r3, r6, #32
 8000b5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b60:	fa20 f303 	lsr.w	r3, r0, r3
 8000b64:	40b7      	lsls	r7, r6
 8000b66:	ea43 0808 	orr.w	r8, r3, r8
 8000b6a:	40b4      	lsls	r4, r6
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b82:	fb01 f20c 	mul.w	r2, r1, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b90:	f080 80ea 	bcs.w	8000d68 <__udivmoddi4+0x22c>
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f240 80e7 	bls.w	8000d68 <__udivmoddi4+0x22c>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	1a9a      	subs	r2, r3, r2
 8000ba0:	b2a3      	uxth	r3, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb2:	459c      	cmp	ip, r3
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x8e>
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bbc:	f080 80d6 	bcs.w	8000d6c <__udivmoddi4+0x230>
 8000bc0:	459c      	cmp	ip, r3
 8000bc2:	f240 80d3 	bls.w	8000d6c <__udivmoddi4+0x230>
 8000bc6:	443b      	add	r3, r7
 8000bc8:	3802      	subs	r0, #2
 8000bca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bce:	eba3 030c 	sub.w	r3, r3, ip
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11d      	cbz	r5, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40f3      	lsrs	r3, r6
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e9c5 3200 	strd	r3, r2, [r5]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d905      	bls.n	8000bf2 <__udivmoddi4+0xb6>
 8000be6:	b10d      	cbz	r5, 8000bec <__udivmoddi4+0xb0>
 8000be8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e7f5      	b.n	8000bde <__udivmoddi4+0xa2>
 8000bf2:	fab3 f183 	clz	r1, r3
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d146      	bne.n	8000c88 <__udivmoddi4+0x14c>
 8000bfa:	4573      	cmp	r3, lr
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xc8>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 8105 	bhi.w	8000e0e <__udivmoddi4+0x2d2>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d0e5      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c12:	e9c5 4800 	strd	r4, r8, [r5]
 8000c16:	e7e2      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f000 8090 	beq.w	8000d3e <__udivmoddi4+0x202>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f040 80a4 	bne.w	8000d70 <__udivmoddi4+0x234>
 8000c28:	1a8a      	subs	r2, r1, r2
 8000c2a:	0c03      	lsrs	r3, r0, #16
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	b2bc      	uxth	r4, r7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c42:	fb04 f20c 	mul.w	r2, r4, ip
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x11e>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x11c>
 8000c52:	429a      	cmp	r2, r3
 8000c54:	f200 80e0 	bhi.w	8000e18 <__udivmoddi4+0x2dc>
 8000c58:	46c4      	mov	ip, r8
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c68:	fb02 f404 	mul.w	r4, r2, r4
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x144>
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x142>
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	f200 80ca 	bhi.w	8000e12 <__udivmoddi4+0x2d6>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	1b1b      	subs	r3, r3, r4
 8000c82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c88:	f1c1 0620 	rsb	r6, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c92:	431f      	orrs	r7, r3
 8000c94:	fa0e f401 	lsl.w	r4, lr, r1
 8000c98:	fa20 f306 	lsr.w	r3, r0, r6
 8000c9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ca0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ca4:	4323      	orrs	r3, r4
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	fa1f fc87 	uxth.w	ip, r7
 8000cae:	fbbe f0f9 	udiv	r0, lr, r9
 8000cb2:	0c1c      	lsrs	r4, r3, #16
 8000cb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x1a0>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cce:	f080 809c 	bcs.w	8000e0a <__udivmoddi4+0x2ce>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f240 8099 	bls.w	8000e0a <__udivmoddi4+0x2ce>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	fa1f fe83 	uxth.w	lr, r3
 8000ce4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf4:	45a4      	cmp	ip, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1ce>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cfe:	f080 8082 	bcs.w	8000e06 <__udivmoddi4+0x2ca>
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d97f      	bls.n	8000e06 <__udivmoddi4+0x2ca>
 8000d06:	3b02      	subs	r3, #2
 8000d08:	443c      	add	r4, r7
 8000d0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d16:	4564      	cmp	r4, ip
 8000d18:	4673      	mov	r3, lr
 8000d1a:	46e1      	mov	r9, ip
 8000d1c:	d362      	bcc.n	8000de4 <__udivmoddi4+0x2a8>
 8000d1e:	d05f      	beq.n	8000de0 <__udivmoddi4+0x2a4>
 8000d20:	b15d      	cbz	r5, 8000d3a <__udivmoddi4+0x1fe>
 8000d22:	ebb8 0203 	subs.w	r2, r8, r3
 8000d26:	eb64 0409 	sbc.w	r4, r4, r9
 8000d2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d32:	431e      	orrs	r6, r3
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e74f      	b.n	8000bde <__udivmoddi4+0xa2>
 8000d3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d42:	0c01      	lsrs	r1, r0, #16
 8000d44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d48:	b280      	uxth	r0, r0
 8000d4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4638      	mov	r0, r7
 8000d52:	463c      	mov	r4, r7
 8000d54:	46b8      	mov	r8, r7
 8000d56:	46be      	mov	lr, r7
 8000d58:	2620      	movs	r6, #32
 8000d5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d5e:	eba2 0208 	sub.w	r2, r2, r8
 8000d62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d66:	e766      	b.n	8000c36 <__udivmoddi4+0xfa>
 8000d68:	4601      	mov	r1, r0
 8000d6a:	e718      	b.n	8000b9e <__udivmoddi4+0x62>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	e72c      	b.n	8000bca <__udivmoddi4+0x8e>
 8000d70:	f1c6 0220 	rsb	r2, r6, #32
 8000d74:	fa2e f302 	lsr.w	r3, lr, r2
 8000d78:	40b7      	lsls	r7, r6
 8000d7a:	40b1      	lsls	r1, r6
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d84:	430a      	orrs	r2, r1
 8000d86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d8a:	b2bc      	uxth	r4, r7
 8000d8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb08 f904 	mul.w	r9, r8, r4
 8000d9a:	40b0      	lsls	r0, r6
 8000d9c:	4589      	cmp	r9, r1
 8000d9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000da2:	b280      	uxth	r0, r0
 8000da4:	d93e      	bls.n	8000e24 <__udivmoddi4+0x2e8>
 8000da6:	1879      	adds	r1, r7, r1
 8000da8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000dac:	d201      	bcs.n	8000db2 <__udivmoddi4+0x276>
 8000dae:	4589      	cmp	r9, r1
 8000db0:	d81f      	bhi.n	8000df2 <__udivmoddi4+0x2b6>
 8000db2:	eba1 0109 	sub.w	r1, r1, r9
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fb09 f804 	mul.w	r8, r9, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc8:	4542      	cmp	r2, r8
 8000dca:	d229      	bcs.n	8000e20 <__udivmoddi4+0x2e4>
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dd2:	d2c4      	bcs.n	8000d5e <__udivmoddi4+0x222>
 8000dd4:	4542      	cmp	r2, r8
 8000dd6:	d2c2      	bcs.n	8000d5e <__udivmoddi4+0x222>
 8000dd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ddc:	443a      	add	r2, r7
 8000dde:	e7be      	b.n	8000d5e <__udivmoddi4+0x222>
 8000de0:	45f0      	cmp	r8, lr
 8000de2:	d29d      	bcs.n	8000d20 <__udivmoddi4+0x1e4>
 8000de4:	ebbe 0302 	subs.w	r3, lr, r2
 8000de8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dec:	3801      	subs	r0, #1
 8000dee:	46e1      	mov	r9, ip
 8000df0:	e796      	b.n	8000d20 <__udivmoddi4+0x1e4>
 8000df2:	eba7 0909 	sub.w	r9, r7, r9
 8000df6:	4449      	add	r1, r9
 8000df8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e00:	fb09 f804 	mul.w	r8, r9, r4
 8000e04:	e7db      	b.n	8000dbe <__udivmoddi4+0x282>
 8000e06:	4673      	mov	r3, lr
 8000e08:	e77f      	b.n	8000d0a <__udivmoddi4+0x1ce>
 8000e0a:	4650      	mov	r0, sl
 8000e0c:	e766      	b.n	8000cdc <__udivmoddi4+0x1a0>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e6fd      	b.n	8000c0e <__udivmoddi4+0xd2>
 8000e12:	443b      	add	r3, r7
 8000e14:	3a02      	subs	r2, #2
 8000e16:	e733      	b.n	8000c80 <__udivmoddi4+0x144>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	443b      	add	r3, r7
 8000e1e:	e71c      	b.n	8000c5a <__udivmoddi4+0x11e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	e79c      	b.n	8000d5e <__udivmoddi4+0x222>
 8000e24:	eba1 0109 	sub.w	r1, r1, r9
 8000e28:	46c4      	mov	ip, r8
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fb09 f804 	mul.w	r8, r9, r4
 8000e32:	e7c4      	b.n	8000dbe <__udivmoddi4+0x282>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <BMI088_ACCEL_NS_L+0x18>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <BMI088_ACCEL_NS_L+0x1c>)
 8000e42:	8811      	ldrh	r1, [r2, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 fda8 	bl	800699c <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000004 	.word	0x20000004

08000e58 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <BMI088_ACCEL_NS_H+0x18>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <BMI088_ACCEL_NS_H+0x1c>)
 8000e62:	8811      	ldrh	r1, [r2, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 fd98 	bl	800699c <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <BMI088_GYRO_NS_L+0x18>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <BMI088_GYRO_NS_L+0x1c>)
 8000e82:	8811      	ldrh	r1, [r2, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f005 fd88 	bl	800699c <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000008 	.word	0x20000008
 8000e94:	2000000c 	.word	0x2000000c

08000e98 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <BMI088_GYRO_NS_H+0x18>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <BMI088_GYRO_NS_H+0x1c>)
 8000ea2:	8811      	ldrh	r1, [r2, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 fd78 	bl	800699c <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	2000000c 	.word	0x2000000c

08000eb8 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000ec2:	f107 020f 	add.w	r2, r7, #15
 8000ec6:	1df9      	adds	r1, r7, #7
 8000ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <BMI088_read_write_byte+0x28>)
 8000ed2:	f007 f8e9 	bl	80080a8 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200007b8 	.word	0x200007b8

08000ee4 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <IMU_get_temp+0x1c>)
 8000eea:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <IMU_get_temp+0x20>)
 8000eec:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <IMU_get_temp+0x24>)
 8000eee:	f000 f80d 	bl	8000f0c <BMI088_read>
	return temp;
 8000ef2:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <IMU_get_temp+0x1c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	ee07 3a90 	vmov	s15, r3
}
 8000efa:	eeb0 0a67 	vmov.f32	s0, s15
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000cc 	.word	0x200000cc
 8000f04:	200000c0 	.word	0x200000c0
 8000f08:	200000b4 	.word	0x200000b4

08000f0c <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000f22:	f7ff ff89 	bl	8000e38 <BMI088_ACCEL_NS_L>
 8000f26:	2092      	movs	r0, #146	@ 0x92
 8000f28:	f7ff ffc6 	bl	8000eb8 <BMI088_read_write_byte>
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2206      	movs	r2, #6
 8000f32:	4619      	mov	r1, r3
 8000f34:	2012      	movs	r0, #18
 8000f36:	f000 f8d3 	bl	80010e0 <BMI088_read_muli_reg>
 8000f3a:	f7ff ff8d 	bl	8000e58 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	7d3b      	ldrb	r3, [r7, #20]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80010d8 <BMI088_read+0x1cc>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f86:	4b54      	ldr	r3, [pc, #336]	@ (80010d8 <BMI088_read+0x1cc>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f98:	7e7b      	ldrb	r3, [r7, #25]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7e3b      	ldrb	r3, [r7, #24]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000fa8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	4b48      	ldr	r3, [pc, #288]	@ (80010d8 <BMI088_read+0x1cc>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000fc6:	f7ff ff57 	bl	8000e78 <BMI088_GYRO_NS_L>
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f884 	bl	80010e0 <BMI088_read_muli_reg>
 8000fd8:	f7ff ff5e 	bl	8000e98 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000fdc:	7d3b      	ldrb	r3, [r7, #20]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d143      	bne.n	800106a <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7dbb      	ldrb	r3, [r7, #22]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000ff2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <BMI088_read+0x1d0>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800100e:	7e7b      	ldrb	r3, [r7, #25]
 8001010:	b21b      	sxth	r3, r3
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7e3b      	ldrb	r3, [r7, #24]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800101e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <BMI088_read+0x1d0>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3304      	adds	r3, #4
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800103c:	7efb      	ldrb	r3, [r7, #27]
 800103e:	b21b      	sxth	r3, r3
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	7ebb      	ldrb	r3, [r7, #26]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800104c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <BMI088_read+0x1d0>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3308      	adds	r3, #8
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800106a:	f7ff fee5 	bl	8000e38 <BMI088_ACCEL_NS_L>
 800106e:	20a2      	movs	r0, #162	@ 0xa2
 8001070:	f7ff ff22 	bl	8000eb8 <BMI088_read_write_byte>
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2202      	movs	r2, #2
 800107a:	4619      	mov	r1, r3
 800107c:	2022      	movs	r0, #34	@ 0x22
 800107e:	f000 f82f 	bl	80010e0 <BMI088_read_muli_reg>
 8001082:	f7ff fee9 	bl	8000e58 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	b21b      	sxth	r3, r3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	b21a      	sxth	r2, r3
 800108e:	7d7b      	ldrb	r3, [r7, #21]
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	b2db      	uxtb	r3, r3
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800109a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a2:	db04      	blt.n	80010ae <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 80010a4:	8bfb      	ldrh	r3, [r7, #30]
 80010a6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80010ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80010c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000010 	.word	0x20000010
 80010dc:	20000014 	.word	0x20000014

080010e0 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fedd 	bl	8000eb8 <BMI088_read_write_byte>

    while (len != 0)
 80010fe:	e00c      	b.n	800111a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001100:	2055      	movs	r0, #85	@ 0x55
 8001102:	f7ff fed9 	bl	8000eb8 <BMI088_read_write_byte>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	701a      	strb	r2, [r3, #0]
        buf++;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	603b      	str	r3, [r7, #0]
        len--;
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	3b01      	subs	r3, #1
 8001118:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ef      	bne.n	8001100 <BMI088_read_muli_reg+0x20>
    }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b090      	sub	sp, #64	@ 0x40
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	f107 0220 	add.w	r2, r7, #32
 800113c:	2100      	movs	r1, #0
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f004 fa04 	bl	800554c <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800114a:	d219      	bcs.n	8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
 800114c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001150:	f240 812b 	bls.w	80013aa <HAL_CAN_RxFifo0MsgPendingCallback+0x27e>
 8001154:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001158:	2b06      	cmp	r3, #6
 800115a:	f200 8126 	bhi.w	80013aa <HAL_CAN_RxFifo0MsgPendingCallback+0x27e>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001283 	.word	0x08001283
 8001168:	08001295 	.word	0x08001295
 800116c:	080013ab 	.word	0x080013ab
 8001170:	080012a7 	.word	0x080012a7
 8001174:	0800135f 	.word	0x0800135f
 8001178:	080013ab 	.word	0x080013ab
 800117c:	080013ab 	.word	0x080013ab
 8001180:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001184:	2b0a      	cmp	r3, #10
 8001186:	f200 8110 	bhi.w	80013aa <HAL_CAN_RxFifo0MsgPendingCallback+0x27e>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            if (hcan == &hcan1) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a8a      	ldr	r2, [pc, #552]	@ (80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d134      	bne.n	8001206 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 800119c:	7e3b      	ldrb	r3, [r7, #24]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7e7b      	ldrb	r3, [r7, #25]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80011b0:	b291      	uxth	r1, r2
 80011b2:	4a84      	ldr	r2, [pc, #528]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80011b4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80011b8:	7ebb      	ldrb	r3, [r7, #26]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b219      	sxth	r1, r3
 80011c0:	7efb      	ldrb	r3, [r7, #27]
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80011c8:	430a      	orrs	r2, r1
 80011ca:	b211      	sxth	r1, r2
 80011cc:	4a7d      	ldr	r2, [pc, #500]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	805a      	strh	r2, [r3, #2]
 80011d6:	7f3b      	ldrb	r3, [r7, #28]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b219      	sxth	r1, r3
 80011de:	7f7b      	ldrb	r3, [r7, #29]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b211      	sxth	r1, r2
 80011ea:	4a76      	ldr	r2, [pc, #472]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	809a      	strh	r2, [r3, #4]
 80011f4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80011f8:	7fb9      	ldrb	r1, [r7, #30]
 80011fa:	4a72      	ldr	r2, [pc, #456]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001204:	e0d3      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x282>
            } else if (hcan == &hcan2) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a6f      	ldr	r2, [pc, #444]	@ (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f040 80cf 	bne.w	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x282>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001210:	7e3b      	ldrb	r3, [r7, #24]
 8001212:	b21b      	sxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7e7b      	ldrb	r3, [r7, #25]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001224:	b291      	uxth	r1, r2
 8001226:	4a67      	ldr	r2, [pc, #412]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001228:	330b      	adds	r3, #11
 800122a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800122e:	7ebb      	ldrb	r3, [r7, #26]
 8001230:	b21b      	sxth	r3, r3
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b219      	sxth	r1, r3
 8001236:	7efb      	ldrb	r3, [r7, #27]
 8001238:	b21a      	sxth	r2, r3
 800123a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800123e:	430a      	orrs	r2, r1
 8001240:	b211      	sxth	r1, r2
 8001242:	4a60      	ldr	r2, [pc, #384]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001244:	330b      	adds	r3, #11
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	805a      	strh	r2, [r3, #2]
 800124e:	7f3b      	ldrb	r3, [r7, #28]
 8001250:	b21b      	sxth	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b219      	sxth	r1, r3
 8001256:	7f7b      	ldrb	r3, [r7, #29]
 8001258:	b21a      	sxth	r2, r3
 800125a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800125e:	430a      	orrs	r2, r1
 8001260:	b211      	sxth	r1, r2
 8001262:	4a58      	ldr	r2, [pc, #352]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001264:	330b      	adds	r3, #11
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	460a      	mov	r2, r1
 800126c:	809a      	strh	r2, [r3, #4]
 800126e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001272:	7fb9      	ldrb	r1, [r7, #30]
 8001274:	4a53      	ldr	r2, [pc, #332]	@ (80013c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001276:	330b      	adds	r3, #11
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	460a      	mov	r2, r1
 800127e:	719a      	strb	r2, [r3, #6]
            break;
 8001280:	e095      	b.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x282>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 8001282:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001284:	461a      	mov	r2, r3
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128e:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 8001292:	e091      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 8001294:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001296:	3308      	adds	r3, #8
 8001298:	f107 0218 	add.w	r2, r7, #24
 800129c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80012a4:	e088      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
        case CAN_STATUS_2_ID: {
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }
        case CAN_b2b_A_RC_Val_ID1: {
        	if (hcan == &hcan2) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a47      	ldr	r2, [pc, #284]	@ (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f040 8081 	bne.w	80013b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x286>
        		// usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
        		uint16_t Temparary[4] = {0, 0, 0, 0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]

        		for (int8_t i = 0; i < 4; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80012c0:	e048      	b.n	8001354 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
        			Temparary[i] = Temparary[i] + ((uint16_t)rx_data[2*i] << 0);
 80012c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	3340      	adds	r3, #64	@ 0x40
 80012ca:	443b      	add	r3, r7
 80012cc:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80012d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	3340      	adds	r3, #64	@ 0x40
 80012d8:	443b      	add	r3, r7
 80012da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012de:	4619      	mov	r1, r3
 80012e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80012e4:	440a      	add	r2, r1
 80012e6:	b292      	uxth	r2, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3340      	adds	r3, #64	@ 0x40
 80012ec:	443b      	add	r3, r7
 80012ee:	f823 2c30 	strh.w	r2, [r3, #-48]
        			Temparary[i] = Temparary[i] + ((uint16_t)rx_data[(2*i)+1] << 8);
 80012f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3340      	adds	r3, #64	@ 0x40
 80012fa:	443b      	add	r3, r7
 80012fc:	f833 1c30 	ldrh.w	r1, [r3, #-48]
 8001300:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	3301      	adds	r3, #1
 8001308:	3340      	adds	r3, #64	@ 0x40
 800130a:	443b      	add	r3, r7
 800130c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b29a      	uxth	r2, r3
 8001314:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001318:	440a      	add	r2, r1
 800131a:	b292      	uxth	r2, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3340      	adds	r3, #64	@ 0x40
 8001320:	443b      	add	r3, r7
 8001322:	f823 2c30 	strh.w	r2, [r3, #-48]
        			RCVAL[i] = ((int16_t)Temparary[i]) - 660;
 8001326:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3340      	adds	r3, #64	@ 0x40
 800132e:	443b      	add	r3, r7
 8001330:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001334:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001338:	b29a      	uxth	r2, r3
 800133a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800133e:	b211      	sxth	r1, r2
 8001340:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001342:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        		for (int8_t i = 0; i < 4; i++) {
 8001346:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001354:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001358:	2b03      	cmp	r3, #3
 800135a:	ddb2      	ble.n	80012c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
        			// usart_printf("beans2\r\n");
        		}

        		// usart_printf("%d %d %d %d\r\n", RCVAL[0], RCVAL[1], RCVAL[2], RCVAL[3]);
        		break;
 800135c:	e02c      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
        	}
        	break;
		}
		case CAN_b2b_A_RC_Val_ID2: {
			if (hcan == &hcan2) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d127      	bne.n	80013b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x28a>
				uint16_t Temparary2[3] = {0, 0, 0};
 8001366:	2300      	movs	r3, #0
 8001368:	813b      	strh	r3, [r7, #8]
 800136a:	2300      	movs	r3, #0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	2300      	movs	r3, #0
 8001370:	81bb      	strh	r3, [r7, #12]

				Temparary2[0] = (((uint16_t)rx_data[6] << 0) + ((uint16_t)rx_data[7] << 8));//-660;
 8001372:	7fbb      	ldrb	r3, [r7, #30]
 8001374:	461a      	mov	r2, r3
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	813b      	strh	r3, [r7, #8]
				Temparary2[1] = (uint16_t)rx_data[2] << 0;
 8001382:	7ebb      	ldrb	r3, [r7, #26]
 8001384:	817b      	strh	r3, [r7, #10]
				Temparary2[2] = (uint16_t)rx_data[4] << 0;
 8001386:	7f3b      	ldrb	r3, [r7, #28]
 8001388:	81bb      	strh	r3, [r7, #12]

			//for (int8_t i = 0; i < 3; i++) {
			//	RCVAL[i+4] = ((int16_t)Temparary2[i]);
			//}
				RCVAL[4] = ((int16_t)Temparary2[0]) - 660;
 800138a:	893b      	ldrh	r3, [r7, #8]
 800138c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001390:	b29b      	uxth	r3, r3
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001396:	811a      	strh	r2, [r3, #8]
				RCVAL[5] = ((int16_t)Temparary2[1]);
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800139e:	815a      	strh	r2, [r3, #10]
				RCVAL[6] = ((int16_t)Temparary2[2]);
 80013a0:	89bb      	ldrh	r3, [r7, #12]
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80013a6:	819a      	strh	r2, [r3, #12]
				//usart_printf("num = %d \r\n", RCVAL[4]);
				break;
 80013a8:	e006      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
			}
			break;
		}

        default: {
            break;
 80013aa:	bf00      	nop
 80013ac:	e004      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
            break;
 80013ae:	bf00      	nop
 80013b0:	e002      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
        	break;
 80013b2:	bf00      	nop
 80013b4:	e000      	b.n	80013b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
			break;
 80013b6:	bf00      	nop
        }
    }
}
 80013b8:	bf00      	nop
 80013ba:	3740      	adds	r7, #64	@ 0x40
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000714 	.word	0x20000714
 80013c4:	20000120 	.word	0x20000120
 80013c8:	2000073c 	.word	0x2000073c
 80013cc:	20000580 	.word	0x20000580
 80013d0:	20000330 	.word	0x20000330

080013d4 <getRCfakechannel>:

int16_t getRCfakechannel(uint8_t index) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	return RCVAL[index];
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <getRCfakechannel+0x20>)
 80013e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000330 	.word	0x20000330

080013f8 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4604      	mov	r4, r0
 8001400:	4608      	mov	r0, r1
 8001402:	4611      	mov	r1, r2
 8001404:	461a      	mov	r2, r3
 8001406:	4623      	mov	r3, r4
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	4603      	mov	r3, r0
 800140c:	80bb      	strh	r3, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	807b      	strh	r3, [r7, #2]
 8001412:	4613      	mov	r3, r2
 8001414:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	4a27      	ldr	r2, [pc, #156]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 800141a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 800142a:	2208      	movs	r2, #8
 800142c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800142e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	b21b      	sxth	r3, r3
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <CAN_DriveMotor+0xc4>)
 800143a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001442:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001444:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	b21b      	sxth	r3, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001450:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001458:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 800145a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800145e:	121b      	asrs	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001466:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <CAN_DriveMotor+0xc4>)
 800146e:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001470:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001474:	121b      	asrs	r3, r3, #8
 8001476:	b21b      	sxth	r3, r3
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <CAN_DriveMotor+0xc4>)
 800147c:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 800147e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001484:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d107      	bne.n	800149c <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <CAN_DriveMotor+0xc4>)
 8001492:	4909      	ldr	r1, [pc, #36]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 8001494:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <CAN_DriveMotor+0xc8>)
 8001496:	f003 ff89 	bl	80053ac <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 800149a:	e009      	b.n	80014b0 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d106      	bne.n	80014b0 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <CAN_DriveMotor+0xc4>)
 80014a8:	4903      	ldr	r1, [pc, #12]	@ (80014b8 <CAN_DriveMotor+0xc0>)
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <CAN_DriveMotor+0xcc>)
 80014ac:	f003 ff7e 	bl	80053ac <HAL_CAN_AddTxMessage>
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	200000d0 	.word	0x200000d0
 80014bc:	200000e8 	.word	0x200000e8
 80014c0:	20000714 	.word	0x20000714
 80014c4:	2000073c 	.word	0x2000073c

080014c8 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4623      	mov	r3, r4
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	4603      	mov	r3, r0
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	460b      	mov	r3, r1
 80014e0:	717b      	strb	r3, [r7, #5]
 80014e2:	4613      	mov	r3, r2
 80014e4:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	f000 8142 	beq.w	8001772 <CAN_setMotorCtrlVal+0x2aa>
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	f300 81e1 	bgt.w	80018b6 <CAN_setMotorCtrlVal+0x3ee>
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	dc02      	bgt.n	80014fe <CAN_setMotorCtrlVal+0x36>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dc04      	bgt.n	8001506 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80014fc:	e1db      	b.n	80018b6 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80014fe:	2b03      	cmp	r3, #3
 8001500:	f000 8097 	beq.w	8001632 <CAN_setMotorCtrlVal+0x16a>
}
 8001504:	e1d7      	b.n	80018b6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001506:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800150a:	2b04      	cmp	r3, #4
 800150c:	dc02      	bgt.n	8001514 <CAN_setMotorCtrlVal+0x4c>
 800150e:	2b00      	cmp	r3, #0
 8001510:	dc05      	bgt.n	800151e <CAN_setMotorCtrlVal+0x56>
					break;
 8001512:	e08c      	b.n	800162e <CAN_setMotorCtrlVal+0x166>
 8001514:	3b05      	subs	r3, #5
			switch(motorID) {
 8001516:	2b03      	cmp	r3, #3
 8001518:	f200 8089 	bhi.w	800162e <CAN_setMotorCtrlVal+0x166>
 800151c:	e042      	b.n	80015a4 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001526:	1e59      	subs	r1, r3, #1
 8001528:	48bd      	ldr	r0, [pc, #756]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	49b8      	ldr	r1, [pc, #736]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	49b3      	ldr	r1, [pc, #716]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3302      	adds	r3, #2
 8001560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	49ad      	ldr	r1, [pc, #692]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3304      	adds	r3, #4
 8001576:	f9b3 1000 	ldrsh.w	r1, [r3]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	48a8      	ldr	r0, [pc, #672]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4403      	add	r3, r0
 800158a:	3306      	adds	r3, #6
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	79f8      	ldrb	r0, [r7, #7]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	9100      	str	r1, [sp, #0]
 8001596:	462b      	mov	r3, r5
 8001598:	4622      	mov	r2, r4
 800159a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800159e:	f7ff ff2b 	bl	80013f8 <CAN_DriveMotor>
					break;
 80015a2:	e045      	b.n	8001630 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015ac:	1f59      	subs	r1, r3, #5
 80015ae:	489c      	ldr	r0, [pc, #624]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3304      	adds	r3, #4
 80015bc:	887a      	ldrh	r2, [r7, #2]
 80015be:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	4996      	ldr	r1, [pc, #600]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3308      	adds	r3, #8
 80015d4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	4990      	ldr	r1, [pc, #576]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	330a      	adds	r3, #10
 80015ea:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	498b      	ldr	r1, [pc, #556]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	4885      	ldr	r0, [pc, #532]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4403      	add	r3, r0
 8001614:	330e      	adds	r3, #14
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	79f8      	ldrb	r0, [r7, #7]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	9100      	str	r1, [sp, #0]
 8001620:	462b      	mov	r3, r5
 8001622:	4622      	mov	r2, r4
 8001624:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001628:	f7ff fee6 	bl	80013f8 <CAN_DriveMotor>
					break;
 800162c:	e000      	b.n	8001630 <CAN_setMotorCtrlVal+0x168>
					break;
 800162e:	bf00      	nop
			break;
 8001630:	e141      	b.n	80018b6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001632:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001636:	2b08      	cmp	r3, #8
 8001638:	f000 8097 	beq.w	800176a <CAN_setMotorCtrlVal+0x2a2>
 800163c:	2b08      	cmp	r3, #8
 800163e:	f300 8096 	bgt.w	800176e <CAN_setMotorCtrlVal+0x2a6>
 8001642:	2b04      	cmp	r3, #4
 8001644:	dc02      	bgt.n	800164c <CAN_setMotorCtrlVal+0x184>
 8001646:	2b00      	cmp	r3, #0
 8001648:	dc05      	bgt.n	8001656 <CAN_setMotorCtrlVal+0x18e>
					break;
 800164a:	e090      	b.n	800176e <CAN_setMotorCtrlVal+0x2a6>
 800164c:	3b05      	subs	r3, #5
			switch(motorID) {
 800164e:	2b02      	cmp	r3, #2
 8001650:	f200 808d 	bhi.w	800176e <CAN_setMotorCtrlVal+0x2a6>
 8001654:	e044      	b.n	80016e0 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800165e:	1e59      	subs	r1, r3, #1
 8001660:	486f      	ldr	r0, [pc, #444]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3304      	adds	r3, #4
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	4969      	ldr	r1, [pc, #420]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3308      	adds	r3, #8
 8001686:	f9b3 4000 	ldrsh.w	r4, [r3]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	4964      	ldr	r1, [pc, #400]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	330a      	adds	r3, #10
 800169c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	495e      	ldr	r1, [pc, #376]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	330c      	adds	r3, #12
 80016b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	4859      	ldr	r0, [pc, #356]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4403      	add	r3, r0
 80016c6:	330e      	adds	r3, #14
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	79f8      	ldrb	r0, [r7, #7]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9100      	str	r1, [sp, #0]
 80016d2:	462b      	mov	r3, r5
 80016d4:	4622      	mov	r2, r4
 80016d6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80016da:	f7ff fe8d 	bl	80013f8 <CAN_DriveMotor>
					break;
 80016de:	e047      	b.n	8001770 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016e8:	1f59      	subs	r1, r3, #5
 80016ea:	484d      	ldr	r0, [pc, #308]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	3308      	adds	r3, #8
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	4947      	ldr	r1, [pc, #284]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3310      	adds	r3, #16
 8001710:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	4941      	ldr	r1, [pc, #260]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3312      	adds	r3, #18
 8001726:	f9b3 5000 	ldrsh.w	r5, [r3]
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	493c      	ldr	r1, [pc, #240]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3314      	adds	r3, #20
 800173c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	4836      	ldr	r0, [pc, #216]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4403      	add	r3, r0
 8001750:	3316      	adds	r3, #22
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	79f8      	ldrb	r0, [r7, #7]
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9100      	str	r1, [sp, #0]
 800175c:	462b      	mov	r3, r5
 800175e:	4622      	mov	r2, r4
 8001760:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001764:	f7ff fe48 	bl	80013f8 <CAN_DriveMotor>
					break;
 8001768:	e002      	b.n	8001770 <CAN_setMotorCtrlVal+0x2a8>
					break;
 800176a:	bf00      	nop
 800176c:	e0a3      	b.n	80018b6 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800176e:	bf00      	nop
			break;
 8001770:	e0a1      	b.n	80018b6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001772:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001776:	2b08      	cmp	r3, #8
 8001778:	f000 8099 	beq.w	80018ae <CAN_setMotorCtrlVal+0x3e6>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f300 8098 	bgt.w	80018b2 <CAN_setMotorCtrlVal+0x3ea>
 8001782:	2b04      	cmp	r3, #4
 8001784:	dc02      	bgt.n	800178c <CAN_setMotorCtrlVal+0x2c4>
 8001786:	2b00      	cmp	r3, #0
 8001788:	dc05      	bgt.n	8001796 <CAN_setMotorCtrlVal+0x2ce>
					break;
 800178a:	e092      	b.n	80018b2 <CAN_setMotorCtrlVal+0x3ea>
 800178c:	3b05      	subs	r3, #5
			switch(motorID) {
 800178e:	2b02      	cmp	r3, #2
 8001790:	f200 808f 	bhi.w	80018b2 <CAN_setMotorCtrlVal+0x3ea>
 8001794:	e046      	b.n	8001824 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800179e:	1e59      	subs	r1, r3, #1
 80017a0:	481f      	ldr	r0, [pc, #124]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	4919      	ldr	r1, [pc, #100]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3308      	adds	r3, #8
 80017c6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	4914      	ldr	r1, [pc, #80]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	330a      	adds	r3, #10
 80017dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	490e      	ldr	r1, [pc, #56]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	330c      	adds	r3, #12
 80017f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	4809      	ldr	r0, [pc, #36]	@ (8001820 <CAN_setMotorCtrlVal+0x358>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4403      	add	r3, r0
 8001806:	330e      	adds	r3, #14
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	79f8      	ldrb	r0, [r7, #7]
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	9100      	str	r1, [sp, #0]
 8001812:	462b      	mov	r3, r5
 8001814:	4622      	mov	r2, r4
 8001816:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800181a:	f7ff fded 	bl	80013f8 <CAN_DriveMotor>
					break;
 800181e:	e049      	b.n	80018b4 <CAN_setMotorCtrlVal+0x3ec>
 8001820:	200000f0 	.word	0x200000f0
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800182c:	1f59      	subs	r1, r3, #5
 800182e:	4824      	ldr	r0, [pc, #144]	@ (80018c0 <CAN_setMotorCtrlVal+0x3f8>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3308      	adds	r3, #8
 800183c:	887a      	ldrh	r2, [r7, #2]
 800183e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	491e      	ldr	r1, [pc, #120]	@ (80018c0 <CAN_setMotorCtrlVal+0x3f8>)
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3310      	adds	r3, #16
 8001854:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	4918      	ldr	r1, [pc, #96]	@ (80018c0 <CAN_setMotorCtrlVal+0x3f8>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3312      	adds	r3, #18
 800186a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	4913      	ldr	r1, [pc, #76]	@ (80018c0 <CAN_setMotorCtrlVal+0x3f8>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3314      	adds	r3, #20
 8001880:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <CAN_setMotorCtrlVal+0x3f8>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4403      	add	r3, r0
 8001894:	3316      	adds	r3, #22
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	79f8      	ldrb	r0, [r7, #7]
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	9100      	str	r1, [sp, #0]
 80018a0:	462b      	mov	r3, r5
 80018a2:	4622      	mov	r2, r4
 80018a4:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80018a8:	f7ff fda6 	bl	80013f8 <CAN_DriveMotor>
					break;
 80018ac:	e002      	b.n	80018b4 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80018b2:	bf00      	nop
			break;
 80018b4:	bf00      	nop
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bdb0      	pop	{r4, r5, r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000f0 	.word	0x200000f0

080018c4 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b08b      	sub	sp, #44	@ 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	eef0 6a40 	vmov.f32	s13, s0
 80018d6:	eeb0 7a60 	vmov.f32	s14, s1
 80018da:	eef0 7a41 	vmov.f32	s15, s2
 80018de:	4623      	mov	r3, r4
 80018e0:	75fb      	strb	r3, [r7, #23]
 80018e2:	4603      	mov	r3, r0
 80018e4:	75bb      	strb	r3, [r7, #22]
 80018e6:	460b      	mov	r3, r1
 80018e8:	757b      	strb	r3, [r7, #21]
 80018ea:	4613      	mov	r3, r2
 80018ec:	827b      	strh	r3, [r7, #18]
 80018ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80018f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80018f6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	3b01      	subs	r3, #1
 8001902:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	2b02      	cmp	r3, #2
 8001908:	dc02      	bgt.n	8001910 <calcRPM_PID+0x4c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc04      	bgt.n	8001918 <calcRPM_PID+0x54>
 800190e:	e00d      	b.n	800192c <calcRPM_PID+0x68>
 8001910:	3b03      	subs	r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d80a      	bhi.n	800192c <calcRPM_PID+0x68>
 8001916:	e004      	b.n	8001922 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001918:	7d7b      	ldrb	r3, [r7, #21]
 800191a:	3b01      	subs	r3, #1
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001920:	e009      	b.n	8001936 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001922:	7d7b      	ldrb	r3, [r7, #21]
 8001924:	3303      	adds	r3, #3
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800192a:	e004      	b.n	8001936 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	3b01      	subs	r3, #1
 8001930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001934:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001936:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800193a:	7ffa      	ldrb	r2, [r7, #31]
 800193c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001940:	4c70      	ldr	r4, [pc, #448]	@ (8001b04 <calcRPM_PID+0x240>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	4403      	add	r3, r0
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4423      	add	r3, r4
 8001952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001956:	7ffa      	ldrb	r2, [r7, #31]
 8001958:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800195c:	1ac9      	subs	r1, r1, r3
 800195e:	4c6a      	ldr	r4, [pc, #424]	@ (8001b08 <calcRPM_PID+0x244>)
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	4403      	add	r3, r0
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4423      	add	r3, r4
 8001970:	3304      	adds	r3, #4
 8001972:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001974:	7ffa      	ldrb	r2, [r7, #31]
 8001976:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800197a:	4863      	ldr	r0, [pc, #396]	@ (8001b08 <calcRPM_PID+0x244>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	440b      	add	r3, r1
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4403      	add	r3, r0
 800198c:	3308      	adds	r3, #8
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	7ffa      	ldrb	r2, [r7, #31]
 8001992:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001996:	4c5c      	ldr	r4, [pc, #368]	@ (8001b08 <calcRPM_PID+0x244>)
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	4403      	add	r3, r0
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4423      	add	r3, r4
 80019a8:	3304      	adds	r3, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	7ffa      	ldrb	r2, [r7, #31]
 80019ae:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019b2:	4419      	add	r1, r3
 80019b4:	4c54      	ldr	r4, [pc, #336]	@ (8001b08 <calcRPM_PID+0x244>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	4403      	add	r3, r0
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4423      	add	r3, r4
 80019c6:	3308      	adds	r3, #8
 80019c8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 80019ca:	7ffa      	ldrb	r2, [r7, #31]
 80019cc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80019d0:	484d      	ldr	r0, [pc, #308]	@ (8001b08 <calcRPM_PID+0x244>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	440b      	add	r3, r1
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4403      	add	r3, r0
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	7ffa      	ldrb	r2, [r7, #31]
 80019e6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019ea:	4c46      	ldr	r4, [pc, #280]	@ (8001b04 <calcRPM_PID+0x240>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	4403      	add	r3, r0
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4423      	add	r3, r4
 80019fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a00:	7ffa      	ldrb	r2, [r7, #31]
 8001a02:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a06:	1ac9      	subs	r1, r1, r3
 8001a08:	4c3f      	ldr	r4, [pc, #252]	@ (8001b08 <calcRPM_PID+0x244>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	4403      	add	r3, r0
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4423      	add	r3, r4
 8001a1a:	330c      	adds	r3, #12
 8001a1c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001a1e:	7ffa      	ldrb	r2, [r7, #31]
 8001a20:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a24:	4837      	ldr	r0, [pc, #220]	@ (8001b04 <calcRPM_PID+0x240>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4403      	add	r3, r0
 8001a36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a3a:	7ffa      	ldrb	r2, [r7, #31]
 8001a3c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a40:	461c      	mov	r4, r3
 8001a42:	4831      	ldr	r0, [pc, #196]	@ (8001b08 <calcRPM_PID+0x244>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4403      	add	r3, r0
 8001a54:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5a:	7ffa      	ldrb	r2, [r7, #31]
 8001a5c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a60:	4829      	ldr	r0, [pc, #164]	@ (8001b08 <calcRPM_PID+0x244>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4403      	add	r3, r0
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a82:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a86:	7ffa      	ldrb	r2, [r7, #31]
 8001a88:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <calcRPM_PID+0x244>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4403      	add	r3, r0
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab2:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ab6:	7ffa      	ldrb	r2, [r7, #31]
 8001ab8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001abc:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <calcRPM_PID+0x244>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4403      	add	r3, r0
 8001ace:	330c      	adds	r3, #12
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae6:	ee17 3a90 	vmov	r3, s15
 8001aea:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001aec:	7dbb      	ldrb	r3, [r7, #22]
 8001aee:	6a39      	ldr	r1, [r7, #32]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f80b 	bl	8001b0c <applyCtrlLimit>
 8001af6:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	372c      	adds	r7, #44	@ 0x2c
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000120 	.word	0x20000120
 8001b08:	200001d0 	.word	0x200001d0

08001b0c <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d009      	beq.n	8001b32 <applyCtrlLimit+0x26>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	dc29      	bgt.n	8001b76 <applyCtrlLimit+0x6a>
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	dc02      	bgt.n	8001b2c <applyCtrlLimit+0x20>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dc03      	bgt.n	8001b32 <applyCtrlLimit+0x26>
 8001b2a:	e024      	b.n	8001b76 <applyCtrlLimit+0x6a>
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d00f      	beq.n	8001b50 <applyCtrlLimit+0x44>
 8001b30:	e021      	b.n	8001b76 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b38:	dd03      	ble.n	8001b42 <applyCtrlLimit+0x36>
				val = 16384;
 8001b3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b3e:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001b40:	e016      	b.n	8001b70 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001b48:	da12      	bge.n	8001b70 <applyCtrlLimit+0x64>
				val = -16384;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <applyCtrlLimit+0x78>)
 8001b4c:	603b      	str	r3, [r7, #0]
			break;
 8001b4e:	e00f      	b.n	8001b70 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dd03      	ble.n	8001b62 <applyCtrlLimit+0x56>
				val = 25000;
 8001b5a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001b5e:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001b60:	e008      	b.n	8001b74 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4a08      	ldr	r2, [pc, #32]	@ (8001b88 <applyCtrlLimit+0x7c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	da04      	bge.n	8001b74 <applyCtrlLimit+0x68>
				val = -25000;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <applyCtrlLimit+0x7c>)
 8001b6c:	603b      	str	r3, [r7, #0]
			break;
 8001b6e:	e001      	b.n	8001b74 <applyCtrlLimit+0x68>
			break;
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <applyCtrlLimit+0x6a>
			break;
 8001b74:	bf00      	nop
		}
	}
	return val;
 8001b76:	683b      	ldr	r3, [r7, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	ffffc000 	.word	0xffffc000
 8001b88:	ffff9e58 	.word	0xffff9e58

08001b8c <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	eef0 6a40 	vmov.f32	s13, s0
 8001b9e:	eeb0 7a60 	vmov.f32	s14, s1
 8001ba2:	eef0 7a41 	vmov.f32	s15, s2
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	75fb      	strb	r3, [r7, #23]
 8001baa:	4603      	mov	r3, r0
 8001bac:	75bb      	strb	r3, [r7, #22]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	757b      	strb	r3, [r7, #21]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	827b      	strh	r3, [r7, #18]
 8001bb6:	edc7 6a01 	vstr	s13, [r7, #4]
 8001bba:	ed87 7a02 	vstr	s14, [r7, #8]
 8001bbe:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001bd6:	7db9      	ldrb	r1, [r7, #22]
 8001bd8:	7df8      	ldrb	r0, [r7, #23]
 8001bda:	eeb0 0a66 	vmov.f32	s0, s13
 8001bde:	eef0 0a47 	vmov.f32	s1, s14
 8001be2:	eeb0 1a67 	vmov.f32	s2, s15
 8001be6:	f7ff fe6d 	bl	80018c4 <calcRPM_PID>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001bf2:	7db9      	ldrb	r1, [r7, #22]
 8001bf4:	7df8      	ldrb	r0, [r7, #23]
 8001bf6:	f7ff fc67 	bl	80014c8 <CAN_setMotorCtrlVal>
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
	...

08001c04 <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	71bb      	strb	r3, [r7, #6]
 8001c12:	4613      	mov	r3, r2
 8001c14:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	dc02      	bgt.n	8001c22 <getRotorPosition+0x1e>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dc04      	bgt.n	8001c2a <getRotorPosition+0x26>
 8001c20:	e034      	b.n	8001c8c <getRotorPosition+0x88>
 8001c22:	3b03      	subs	r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d831      	bhi.n	8001c8c <getRotorPosition+0x88>
 8001c28:	e016      	b.n	8001c58 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001c2a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dd29      	ble.n	8001c86 <getRotorPosition+0x82>
 8001c32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	dc25      	bgt.n	8001c86 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	4815      	ldr	r0, [pc, #84]	@ (8001c9c <getRotorPosition+0x98>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001c56:	e01b      	b.n	8001c90 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001c58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dd14      	ble.n	8001c8a <getRotorPosition+0x86>
 8001c60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	dc10      	bgt.n	8001c8a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c70:	1cd9      	adds	r1, r3, #3
 8001c72:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <getRotorPosition+0x98>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001c84:	e004      	b.n	8001c90 <getRotorPosition+0x8c>
			break;
 8001c86:	bf00      	nop
 8001c88:	e000      	b.n	8001c8c <getRotorPosition+0x88>
			}
			break;
 8001c8a:	bf00      	nop
		}
	}
	return -1;
 8001c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000120 	.word	0x20000120

08001ca0 <determiningTrigAngle>:
int8_t noVelocity = 0;
PID_preset_t test = {5.0, 0.0, 0.0};
PID_preset_t test2 = {800.0, 60.0, 80.0};


float determiningTrigAngle (int16_t motorAngle[5]) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da2c      	bge.n	8001d0c <determiningTrigAngle+0x6c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da26      	bge.n	8001d0c <determiningTrigAngle+0x6c>
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ce0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce4:	f00c fb0a 	bl	800e2fc <atanf>
 8001ce8:	ee10 3a10 	vmov	r3, s0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc2b 	bl	8000548 <__aeabi_f2d>
 8001cf2:	a335      	add	r3, pc, #212	@ (adr r3, 8001dc8 <determiningTrigAngle+0x128>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fac6 	bl	8000288 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe feb2 	bl	8000a6c <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	e056      	b.n	8001dba <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db2c      	blt.n	8001d70 <determiningTrigAngle+0xd0>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	da26      	bge.n	8001d70 <determiningTrigAngle+0xd0>
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3302      	adds	r3, #2
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d44:	eeb0 0a66 	vmov.f32	s0, s13
 8001d48:	f00c fad8 	bl	800e2fc <atanf>
 8001d4c:	ee10 3a10 	vmov	r3, s0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbf9 	bl	8000548 <__aeabi_f2d>
 8001d56:	a31c      	add	r3, pc, #112	@ (adr r3, 8001dc8 <determiningTrigAngle+0x128>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fa96 	bl	800028c <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe fe80 	bl	8000a6c <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	e024      	b.n	8001dba <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d108      	bne.n	8001d8c <determiningTrigAngle+0xec>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <determiningTrigAngle+0xec>
		return 0;
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e016      	b.n	8001dba <determiningTrigAngle+0x11a>
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dae:	eeb0 0a66 	vmov.f32	s0, s13
 8001db2:	f00c faa3 	bl	800e2fc <atanf>
 8001db6:	ee10 3a10 	vmov	r3, s0
	}
}
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	54442d18 	.word	0x54442d18
 8001dcc:	400921fb 	.word	0x400921fb

08001dd0 <wheelRotation>:

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	80fb      	strh	r3, [r7, #6]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	80bb      	strh	r3, [r7, #4]
	int8_t newTargetRotationCounter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
	int16_t ACD = abs(destinationRotation - currentRotation);
 8001de4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bfb8      	it	lt
 8001df2:	425b      	neglt	r3, r3
 8001df4:	81bb      	strh	r3, [r7, #12]
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
 8001df6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dfa:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8001dfe:	3b1f      	subs	r3, #31
 8001e00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	425b      	neglt	r3, r3
 8001e0c:	817b      	strh	r3, [r7, #10]
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
 8001e0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e12:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8001e16:	331f      	adds	r3, #31
 8001e18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bfb8      	it	lt
 8001e22:	425b      	neglt	r3, r3
 8001e24:	813b      	strh	r3, [r7, #8]
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
 8001e26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	da08      	bge.n	8001e44 <wheelRotation+0x74>
 8001e32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	da02      	bge.n	8001e44 <wheelRotation+0x74>
		newTargetRotationCounter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e010      	b.n	8001e66 <wheelRotation+0x96>
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
 8001e44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	da08      	bge.n	8001e62 <wheelRotation+0x92>
 8001e50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	da02      	bge.n	8001e62 <wheelRotation+0x92>
		newTargetRotationCounter = -1;
 8001e5c:	23ff      	movs	r3, #255	@ 0xff
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <wheelRotation+0x96>
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	0352      	lsls	r2, r2, #13
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b21b      	sxth	r3, r3
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <swerveScaler>:

float swerveScaler (int16_t motorInfo[4][5]) {
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	int16_t largestVal = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	737b      	strb	r3, [r7, #13]
 8001ea0:	e01f      	b.n	8001ee2 <swerveScaler+0x52>
		if (motorInfo[i][2] > largestVal) {
 8001ea2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	da0a      	bge.n	8001ed6 <swerveScaler+0x46>
			largestVal = motorInfo[i][2];
 8001ec0:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	889b      	ldrh	r3, [r3, #4]
 8001ed4:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8001ed6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	737b      	strb	r3, [r7, #13]
 8001ee2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	dddb      	ble.n	8001ea2 <swerveScaler+0x12>
	if (largestVal == 0) {
		usart_printf("ERROR_WITH_SCALER\r\n");
	}
	*/
	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAlloweds) {
 8001eea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	dc02      	bgt.n	8001efc <swerveScaler+0x6c>
		return 1;
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001efa:	e00b      	b.n	8001f14 <swerveScaler+0x84>
	} else {
		return ((float)(maxValAlloweds)/(float)(largestVal));
 8001efc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8001f28 <swerveScaler+0x98>
 8001f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f10:	eec7 6a27 	vdiv.f32	s13, s14, s15
	}
}
 8001f14:	eef0 7a66 	vmov.f32	s15, s13
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	00000320 	.word	0x00000320

08001f2c <PD>:

int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f3a:	edc7 0a00 	vstr	s1, [r7]
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	4613      	mov	r3, r2
 8001f42:	81bb      	strh	r3, [r7, #12]

	return applyCtrlLimit(motorType, (currentDelta*kP + (*previousDelta - currentDelta)*kD));
 8001f44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f6e:	edd7 7a00 	vldr	s15, [r7]
 8001f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	ee17 1a90 	vmov	r1, s15
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fdc1 	bl	8001b0c <applyCtrlLimit>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b21b      	sxth	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <Loop>:


void Loop(int16_t Axies[3]) {
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	b08b      	sub	sp, #44	@ 0x2c
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]

	usart_printf("%d, %d, %d, %d\r\n", getRotorPosition(Bus1, GM6020, 1), getRotorPosition(Bus1, GM6020, 2), getRotorPosition(Bus1, GM6020, 3), getRotorPosition(Bus1, GM6020, 4));
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fe2d 	bl	8001c04 <getRotorPosition>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461c      	mov	r4, r3
 8001fae:	2202      	movs	r2, #2
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff fe26 	bl	8001c04 <getRotorPosition>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461d      	mov	r5, r3
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff fe1f 	bl	8001c04 <getRotorPosition>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461e      	mov	r6, r3
 8001fca:	2204      	movs	r2, #4
 8001fcc:	2103      	movs	r1, #3
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fe18 	bl	8001c04 <getRotorPosition>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4633      	mov	r3, r6
 8001fda:	462a      	mov	r2, r5
 8001fdc:	4621      	mov	r1, r4
 8001fde:	48b6      	ldr	r0, [pc, #728]	@ (80022b8 <Loop+0x320>)
 8001fe0:	f000 fa32 	bl	8002448 <usart_printf>
	int16_t FB = Axies[0];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	83fb      	strh	r3, [r7, #30]
	int16_t LR = Axies[1];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	885b      	ldrh	r3, [r3, #2]
 8001fee:	83bb      	strh	r3, [r7, #28]
	int16_t Rotate = Axies[2];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	837b      	strh	r3, [r7, #26]
	/*
	 * Checks if All joystick Values are 0 to make the wheels maintain last orientation
	 */
	if (FB == 0 && LR == 0 && Rotate == 0) {
 8001ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d114      	bne.n	8002028 <Loop+0x90>
 8001ffe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d110      	bne.n	8002028 <Loop+0x90>
 8002006:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <Loop+0x90>
		FB = DP[0];
 800200e:	4bab      	ldr	r3, [pc, #684]	@ (80022bc <Loop+0x324>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	83fb      	strh	r3, [r7, #30]
		LR = DP[1];
 8002014:	4ba9      	ldr	r3, [pc, #676]	@ (80022bc <Loop+0x324>)
 8002016:	885b      	ldrh	r3, [r3, #2]
 8002018:	83bb      	strh	r3, [r7, #28]
		Rotate = DP[2];
 800201a:	4ba8      	ldr	r3, [pc, #672]	@ (80022bc <Loop+0x324>)
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	837b      	strh	r3, [r7, #26]
		noVelocity = 1;
 8002020:	4ba7      	ldr	r3, [pc, #668]	@ (80022c0 <Loop+0x328>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e002      	b.n	800202e <Loop+0x96>
	} else {
		noVelocity = 0;
 8002028:	4ba5      	ldr	r3, [pc, #660]	@ (80022c0 <Loop+0x328>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	}
	DP[0] = FB;
 800202e:	4aa3      	ldr	r2, [pc, #652]	@ (80022bc <Loop+0x324>)
 8002030:	8bfb      	ldrh	r3, [r7, #30]
 8002032:	8013      	strh	r3, [r2, #0]
	DP[1] = LR;
 8002034:	4aa1      	ldr	r2, [pc, #644]	@ (80022bc <Loop+0x324>)
 8002036:	8bbb      	ldrh	r3, [r7, #28]
 8002038:	8053      	strh	r3, [r2, #2]
	DP[2] = Rotate;
 800203a:	4aa0      	ldr	r2, [pc, #640]	@ (80022bc <Loop+0x324>)
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	8093      	strh	r3, [r2, #4]
	/*
	 * Starts by Calculating the motors X and Y Values.
	 * Then it Calculates the ABS value of the motors.
	 * Unless Velocity is 0 in which it'll then just not rotate the Motors and set the ABS value to 0
	 */
	for (int8_t i = 0; i < 4; i++ ) {
 8002040:	2300      	movs	r3, #0
 8002042:	767b      	strb	r3, [r7, #25]
 8002044:	e094      	b.n	8002170 <Loop+0x1d8>
		motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
 8002046:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800204a:	4a9e      	ldr	r2, [pc, #632]	@ (80022c4 <Loop+0x32c>)
 800204c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002050:	b29a      	uxth	r2, r3
 8002052:	8b7b      	ldrh	r3, [r7, #26]
 8002054:	fb12 f303 	smulbb	r3, r2, r3
 8002058:	b29a      	uxth	r2, r3
 800205a:	8bbb      	ldrh	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002064:	b218      	sxth	r0, r3
 8002066:	4998      	ldr	r1, [pc, #608]	@ (80022c8 <Loop+0x330>)
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	4602      	mov	r2, r0
 8002074:	801a      	strh	r2, [r3, #0]
		motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
 8002076:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800207a:	4a92      	ldr	r2, [pc, #584]	@ (80022c4 <Loop+0x32c>)
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002084:	b29a      	uxth	r2, r3
 8002086:	8b7b      	ldrh	r3, [r7, #26]
 8002088:	fb12 f303 	smulbb	r3, r2, r3
 800208c:	b29a      	uxth	r2, r3
 800208e:	8bfb      	ldrh	r3, [r7, #30]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002098:	b218      	sxth	r0, r3
 800209a:	498b      	ldr	r1, [pc, #556]	@ (80022c8 <Loop+0x330>)
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	440b      	add	r3, r1
 80020a6:	3302      	adds	r3, #2
 80020a8:	4602      	mov	r2, r0
 80020aa:	801a      	strh	r2, [r3, #0]
		if (noVelocity == 0) {
 80020ac:	4b84      	ldr	r3, [pc, #528]	@ (80022c0 <Loop+0x328>)
 80020ae:	f993 3000 	ldrsb.w	r3, [r3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d14b      	bne.n	800214e <Loop+0x1b6>
			motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
 80020b6:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80020ba:	4983      	ldr	r1, [pc, #524]	@ (80022c8 <Loop+0x330>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80020d0:	497d      	ldr	r1, [pc, #500]	@ (80022c8 <Loop+0x330>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	fb03 f100 	mul.w	r1, r3, r0
 80020e4:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80020e8:	4877      	ldr	r0, [pc, #476]	@ (80022c8 <Loop+0x330>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4403      	add	r3, r0
 80020f4:	3302      	adds	r3, #2
 80020f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fa:	461c      	mov	r4, r3
 80020fc:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002100:	4871      	ldr	r0, [pc, #452]	@ (80022c8 <Loop+0x330>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4403      	add	r3, r0
 800210c:	3302      	adds	r3, #2
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	fb04 f303 	mul.w	r3, r4, r3
 8002116:	440b      	add	r3, r1
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f00c f8cc 	bl	800e2c0 <sqrtf>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	b218      	sxth	r0, r3
 800213a:	4963      	ldr	r1, [pc, #396]	@ (80022c8 <Loop+0x330>)
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	3304      	adds	r3, #4
 8002148:	4602      	mov	r2, r0
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	e00a      	b.n	8002164 <Loop+0x1cc>
		} else {
			motorInfo[i][2] = 0;
 800214e:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002152:	495d      	ldr	r1, [pc, #372]	@ (80022c8 <Loop+0x330>)
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	440b      	add	r3, r1
 800215e:	3304      	adds	r3, #4
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
	for (int8_t i = 0; i < 4; i++ ) {
 8002164:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	767b      	strb	r3, [r7, #25]
 8002170:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002174:	2b03      	cmp	r3, #3
 8002176:	f77f af66 	ble.w	8002046 <Loop+0xae>
	}

	/*
	 * Scales ABS values of the Motor Speeds
	 */
	float SScalerVal = swerveScaler(motorInfo);
 800217a:	4853      	ldr	r0, [pc, #332]	@ (80022c8 <Loop+0x330>)
 800217c:	f7ff fe88 	bl	8001e90 <swerveScaler>
 8002180:	ed87 0a04 	vstr	s0, [r7, #16]
	 * Secondly it converts it into encoder increments
	 * Next it adds the offsets.
	 *
	 * Finally it makes sure that all values are within the min and max of the encoder
	 */
	for (int8_t j = 0; j < 4; j++) {
 8002184:	2300      	movs	r3, #0
 8002186:	763b      	strb	r3, [r7, #24]
 8002188:	e085      	b.n	8002296 <Loop+0x2fe>
		// Scales Motor Speed Output
		// 800*11.25 = 9000
		motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;
 800218a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800218e:	494e      	ldr	r1, [pc, #312]	@ (80022c8 <Loop+0x330>)
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	3304      	adds	r3, #4
 800219c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	ee17 0a90 	vmov	r0, s15
 80021b4:	f7fe f9c8 	bl	8000548 <__aeabi_f2d>
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <Loop+0x334>)
 80021be:	f7fe fa1b 	bl	80005f8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	f997 4018 	ldrsb.w	r4, [r7, #24]
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fc25 	bl	8000a1c <__aeabi_d2iz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b219      	sxth	r1, r3
 80021d6:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <Loop+0x330>)
 80021d8:	4623      	mov	r3, r4
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4423      	add	r3, r4
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	460a      	mov	r2, r1
 80021e6:	801a      	strh	r2, [r3, #0]

		int16_t trigAng = (int16_t)(4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI));
 80021e8:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4a34      	ldr	r2, [pc, #208]	@ (80022c8 <Loop+0x330>)
 80021f6:	4413      	add	r3, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fd51 	bl	8001ca0 <determiningTrigAngle>
 80021fe:	ee10 3a10 	vmov	r3, s0
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9a0 	bl	8000548 <__aeabi_f2d>
 8002208:	a327      	add	r3, pc, #156	@ (adr r3, 80022a8 <Loop+0x310>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fb1d 	bl	800084c <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	a325      	add	r3, pc, #148	@ (adr r3, 80022b0 <Loop+0x318>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe f9ea 	bl	80005f8 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fbf6 	bl	8000a1c <__aeabi_d2iz>
 8002230:	4603      	mov	r3, r0
 8002232:	81fb      	strh	r3, [r7, #14]

		int16_t tempAngle = trigAng+forwardsID[j];
 8002234:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002238:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <Loop+0x338>)
 800223a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800223e:	b29a      	uxth	r2, r3
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	4413      	add	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	82fb      	strh	r3, [r7, #22]
		if (tempAngle > 8191) {
 8002248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800224c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002250:	db06      	blt.n	8002260 <Loop+0x2c8>
			tempAngle = tempAngle-8191;
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8002258:	3b1f      	subs	r3, #31
 800225a:	b29b      	uxth	r3, r3
 800225c:	82fb      	strh	r3, [r7, #22]
 800225e:	e009      	b.n	8002274 <Loop+0x2dc>
		} else if (tempAngle < 0) {
 8002260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002264:	2b00      	cmp	r3, #0
 8002266:	da05      	bge.n	8002274 <Loop+0x2dc>
			tempAngle = tempAngle+8191;
 8002268:	8afb      	ldrh	r3, [r7, #22]
 800226a:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800226e:	331f      	adds	r3, #31
 8002270:	b29b      	uxth	r3, r3
 8002272:	82fb      	strh	r3, [r7, #22]
		}
		motorInfo[j][3] = tempAngle;
 8002274:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8002278:	4913      	ldr	r1, [pc, #76]	@ (80022c8 <Loop+0x330>)
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	440b      	add	r3, r1
 8002284:	3306      	adds	r3, #6
 8002286:	8afa      	ldrh	r2, [r7, #22]
 8002288:	801a      	strh	r2, [r3, #0]
	for (int8_t j = 0; j < 4; j++) {
 800228a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	763b      	strb	r3, [r7, #24]
 8002296:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800229a:	2b03      	cmp	r3, #3
 800229c:	f77f af75 	ble.w	800218a <Loop+0x1f2>

	/*
	 * This function outputs the power to the wheels.
	 * wheelRotation fines the optimal direction to rotate to
	 */
	for (int8_t k = 0; k < 4; k++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	757b      	strb	r3, [r7, #21]
 80022a4:	e0a4      	b.n	80023f0 <Loop+0x458>
 80022a6:	bf00      	nop
 80022a8:	54442d18 	.word	0x54442d18
 80022ac:	400921fb 	.word	0x400921fb
 80022b0:	00000000 	.word	0x00000000
 80022b4:	40afff00 	.word	0x40afff00
 80022b8:	0800e4d0 	.word	0x0800e4d0
 80022bc:	20000378 	.word	0x20000378
 80022c0:	2000037e 	.word	0x2000037e
 80022c4:	20000018 	.word	0x20000018
 80022c8:	20000350 	.word	0x20000350
 80022cc:	40268000 	.word	0x40268000
 80022d0:	20000020 	.word	0x20000020
		CAN_setMotorCtrlVal(Bus1, GM6020, k+1, PD(GM6020, &wheelPrev[k], wheelRotation (getRotorPosition(Bus1, GM6020, k+1), motorInfo[k][3]), 100, 75));
 80022d4:	7d7b      	ldrb	r3, [r7, #21]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	b25c      	sxtb	r4, r3
 80022dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <Loop+0x46c>)
 80022e4:	189d      	adds	r5, r3, r2
 80022e6:	7d7b      	ldrb	r3, [r7, #21]
 80022e8:	3301      	adds	r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	2103      	movs	r1, #3
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fc86 	bl	8001c04 <getRotorPosition>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b218      	sxth	r0, r3
 80022fc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002300:	4941      	ldr	r1, [pc, #260]	@ (8002408 <Loop+0x470>)
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	3306      	adds	r3, #6
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	4619      	mov	r1, r3
 8002314:	f7ff fd5c 	bl	8001dd0 <wheelRotation>
 8002318:	4603      	mov	r3, r0
 800231a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800240c <Loop+0x474>
 800231e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002410 <Loop+0x478>
 8002322:	461a      	mov	r2, r3
 8002324:	4629      	mov	r1, r5
 8002326:	2003      	movs	r0, #3
 8002328:	f7ff fe00 	bl	8001f2c <PD>
 800232c:	4603      	mov	r3, r0
 800232e:	4622      	mov	r2, r4
 8002330:	2103      	movs	r1, #3
 8002332:	2001      	movs	r0, #1
 8002334:	f7ff f8c8 	bl	80014c8 <CAN_setMotorCtrlVal>
		if (motorInfo[k][4] == 1) {
 8002338:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800233c:	4932      	ldr	r1, [pc, #200]	@ (8002408 <Loop+0x470>)
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	440b      	add	r3, r1
 8002348:	3308      	adds	r3, #8
 800234a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d126      	bne.n	80023a0 <Loop+0x408>
			setMotorRPM(Bus1, M3508, k+1, -1*motorInfo[k][2], test);
 8002352:	7d7b      	ldrb	r3, [r7, #21]
 8002354:	3301      	adds	r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b259      	sxtb	r1, r3
 800235a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800235e:	482a      	ldr	r0, [pc, #168]	@ (8002408 <Loop+0x470>)
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4403      	add	r3, r0
 800236a:	3304      	adds	r3, #4
 800236c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002370:	b29b      	uxth	r3, r3
 8002372:	425b      	negs	r3, r3
 8002374:	b29b      	uxth	r3, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <Loop+0x47c>)
 800237a:	edd3 6a00 	vldr	s13, [r3]
 800237e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002382:	edd3 7a02 	vldr	s15, [r3, #8]
 8002386:	eeb0 0a66 	vmov.f32	s0, s13
 800238a:	eef0 0a47 	vmov.f32	s1, s14
 800238e:	eeb0 1a67 	vmov.f32	s2, s15
 8002392:	4613      	mov	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	2101      	movs	r1, #1
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff fbf7 	bl	8001b8c <setMotorRPM>
 800239e:	e021      	b.n	80023e4 <Loop+0x44c>
		} else {
			setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
 80023a0:	7d7b      	ldrb	r3, [r7, #21]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	b259      	sxtb	r1, r3
 80023a8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80023ac:	4816      	ldr	r0, [pc, #88]	@ (8002408 <Loop+0x470>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4403      	add	r3, r0
 80023b8:	3304      	adds	r3, #4
 80023ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <Loop+0x47c>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	eef0 0a47 	vmov.f32	s1, s14
 80023d4:	eeb0 1a67 	vmov.f32	s2, s15
 80023d8:	4613      	mov	r3, r2
 80023da:	460a      	mov	r2, r1
 80023dc:	2101      	movs	r1, #1
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fbd4 	bl	8001b8c <setMotorRPM>
	for (int8_t k = 0; k < 4; k++) {
 80023e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	757b      	strb	r3, [r7, #21]
 80023f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	f77f af6d 	ble.w	80022d4 <Loop+0x33c>
		}
	}
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3724      	adds	r7, #36	@ 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	20000340 	.word	0x20000340
 8002408:	20000350 	.word	0x20000350
 800240c:	42960000 	.word	0x42960000
 8002410:	42c80000 	.word	0x42c80000
 8002414:	20000028 	.word	0x20000028

08002418 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 800241c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002420:	4905      	ldr	r1, [pc, #20]	@ (8002438 <usart_Init+0x20>)
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <usart_Init+0x24>)
 8002424:	f007 f940 	bl	80096a8 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002428:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242c:	4904      	ldr	r1, [pc, #16]	@ (8002440 <usart_Init+0x28>)
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <usart_Init+0x2c>)
 8002430:	f007 f93a 	bl	80096a8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000380 	.word	0x20000380
 800243c:	20000a98 	.word	0x20000a98
 8002440:	20000480 	.word	0x20000480
 8002444:	20000b28 	.word	0x20000b28

08002448 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8002448:	b40f      	push	{r0, r1, r2, r3}
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4a0c      	ldr	r2, [pc, #48]	@ (8002484 <usart_printf+0x3c>)
 8002454:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <usart_printf+0x3c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	480a      	ldr	r0, [pc, #40]	@ (8002488 <usart_printf+0x40>)
 800245e:	f00b fa49 	bl	800d8f4 <vsiprintf>
 8002462:	4603      	mov	r3, r0
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <usart_printf+0x44>)
 8002468:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800246a:	4b08      	ldr	r3, [pc, #32]	@ (800248c <usart_printf+0x44>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4905      	ldr	r1, [pc, #20]	@ (8002488 <usart_printf+0x40>)
 8002472:	4807      	ldr	r0, [pc, #28]	@ (8002490 <usart_printf+0x48>)
 8002474:	f007 f8a8 	bl	80095c8 <HAL_UART_Transmit_DMA>
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002480:	b004      	add	sp, #16
 8002482:	4770      	bx	lr
 8002484:	200005ac 	.word	0x200005ac
 8002488:	200005b0 	.word	0x200005b0
 800248c:	200006b0 	.word	0x200006b0
 8002490:	20000a98 	.word	0x20000a98

08002494 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <can_filter_init+0x6c>)
 80024dc:	f002 fe42 	bl	8005164 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80024e0:	480d      	ldr	r0, [pc, #52]	@ (8002518 <can_filter_init+0x6c>)
 80024e2:	f002 ff1f 	bl	8005324 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80024e6:	2102      	movs	r1, #2
 80024e8:	480b      	ldr	r0, [pc, #44]	@ (8002518 <can_filter_init+0x6c>)
 80024ea:	f003 f951 	bl	8005790 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80024ee:	230e      	movs	r3, #14
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80024f2:	230e      	movs	r3, #14
 80024f4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	4808      	ldr	r0, [pc, #32]	@ (800251c <can_filter_init+0x70>)
 80024fc:	f002 fe32 	bl	8005164 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8002500:	4806      	ldr	r0, [pc, #24]	@ (800251c <can_filter_init+0x70>)
 8002502:	f002 ff0f 	bl	8005324 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002506:	2102      	movs	r1, #2
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <can_filter_init+0x70>)
 800250a:	f003 f941 	bl	8005790 <HAL_CAN_ActivateNotification>
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000714 	.word	0x20000714
 800251c:	2000073c 	.word	0x2000073c

08002520 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <imu_pwm_set+0x1c>)
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40014400 	.word	0x40014400

08002540 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 800254e:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <RC_init+0xac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	4b25      	ldr	r3, [pc, #148]	@ (80025ec <RC_init+0xac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800255c:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <RC_init+0xac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <RC_init+0xac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0210 	orr.w	r2, r2, #16
 800256c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <RC_init+0xb0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <RC_init+0xb0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800257e:	e007      	b.n	8002590 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <RC_init+0xb0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <RC_init+0xb0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <RC_init+0xb0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <RC_init+0xb0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <RC_init+0xb4>)
 80025a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <RC_init+0xb0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <RC_init+0xb0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <RC_init+0xb0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <RC_init+0xb0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RC_init+0xb0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80025cc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <RC_init+0xb0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <RC_init+0xb0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000ae0 	.word	0x20000ae0
 80025f0:	20000c30 	.word	0x20000c30
 80025f4:	40004804 	.word	0x40004804

080025f8 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8002600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002604:	f008 fab0 	bl	800ab68 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002608:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80026ac <imu_temp_control_task+0xb4>
 800260c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80026b0 <imu_temp_control_task+0xb8>
 8002610:	4a28      	ldr	r2, [pc, #160]	@ (80026b4 <imu_temp_control_task+0xbc>)
 8002612:	2100      	movs	r1, #0
 8002614:	4828      	ldr	r0, [pc, #160]	@ (80026b8 <imu_temp_control_task+0xc0>)
 8002616:	f000 ff93 	bl	8003540 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800261a:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <imu_temp_control_task+0xc4>)
 800261c:	2210      	movs	r2, #16
 800261e:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002620:	4826      	ldr	r0, [pc, #152]	@ (80026bc <imu_temp_control_task+0xc4>)
 8002622:	f005 fcb8 	bl	8007f96 <HAL_SPI_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 800262c:	f000 ff82 	bl	8003534 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8002630:	2000      	movs	r0, #0
 8002632:	f009 fbb7 	bl	800bda4 <pcTaskGetName>
 8002636:	4603      	mov	r3, r0
 8002638:	4618      	mov	r0, r3
 800263a:	f009 fc47 	bl	800becc <xTaskGetHandle>
 800263e:	4603      	mov	r3, r0
 8002640:	4a1f      	ldr	r2, [pc, #124]	@ (80026c0 <imu_temp_control_task+0xc8>)
 8002642:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002644:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <imu_temp_control_task+0xcc>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 800264a:	bf00      	nop
 800264c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002650:	2001      	movs	r0, #1
 8002652:	f00a f867 	bl	800c724 <ulTaskNotifyTake>
 8002656:	4603      	mov	r3, r0
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1f7      	bne.n	800264c <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 800265c:	f7fe fc42 	bl	8000ee4 <IMU_get_temp>
 8002660:	eef0 7a40 	vmov.f32	s15, s0
 8002664:	eddf 0a18 	vldr	s1, [pc, #96]	@ 80026c8 <imu_temp_control_task+0xd0>
 8002668:	eeb0 0a67 	vmov.f32	s0, s15
 800266c:	4812      	ldr	r0, [pc, #72]	@ (80026b8 <imu_temp_control_task+0xc0>)
 800266e:	f000 ffbe 	bl	80035ee <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <imu_temp_control_task+0xc0>)
 8002674:	edd3 7a08 	vldr	s15, [r3, #32]
 8002678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	d503      	bpl.n	800268a <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <imu_temp_control_task+0xc0>)
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <imu_temp_control_task+0xc0>)
 800268c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002694:	ee17 3a90 	vmov	r3, s15
 8002698:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff3f 	bl	8002520 <imu_pwm_set>
        osDelay(5);
 80026a2:	2005      	movs	r0, #5
 80026a4:	f008 fa60 	bl	800ab68 <osDelay>
    {
 80026a8:	e7cf      	b.n	800264a <imu_temp_control_task+0x52>
 80026aa:	bf00      	nop
 80026ac:	45898000 	.word	0x45898000
 80026b0:	458ca000 	.word	0x458ca000
 80026b4:	0800e54c 	.word	0x0800e54c
 80026b8:	200006bc 	.word	0x200006bc
 80026bc:	200007b8 	.word	0x200007b8
 80026c0:	200006b4 	.word	0x200006b4
 80026c4:	200006b8 	.word	0x200006b8
 80026c8:	42200000 	.word	0x42200000

080026cc <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 80026d6:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x54>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d11b      	bne.n	8002718 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 80026e0:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x58>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026ea:	f009 ff8d 	bl	800c608 <xTaskGetSchedulerState>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d011      	beq.n	8002718 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_GPIO_EXTI_Callback+0x5c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	490c      	ldr	r1, [pc, #48]	@ (800272c <HAL_GPIO_EXTI_Callback+0x60>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00a f85e 	bl	800c7bc <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_GPIO_EXTI_Callback+0x60>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_GPIO_EXTI_Callback+0x4c>
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_GPIO_EXTI_Callback+0x64>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000000e 	.word	0x2000000e
 8002724:	200006b8 	.word	0x200006b8
 8002728:	200006b4 	.word	0x200006b4
 800272c:	20000704 	.word	0x20000704
 8002730:	e000ed04 	.word	0xe000ed04

08002734 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	2206      	movs	r2, #6
 8002746:	4619      	mov	r1, r3
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f847 	bl	80027dc <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 800274e:	7a7b      	ldrb	r3, [r7, #9]
 8002750:	b21b      	sxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	7a3b      	ldrb	r3, [r7, #8]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 800275e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80027d8 <ist8310_read_mag+0xa4>
 800276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	b21b      	sxth	r3, r3
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	b21a      	sxth	r2, r3
 8002780:	7abb      	ldrb	r3, [r7, #10]
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80027d8 <ist8310_read_mag+0xa4>
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 80027a4:	7b7b      	ldrb	r3, [r7, #13]
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 80027b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3308      	adds	r3, #8
 80027c4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80027d8 <ist8310_read_mag+0xa4>
 80027c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027cc:	edc3 7a00 	vstr	s15, [r3]
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	3e99999a 	.word	0x3e99999a

080027dc <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af04      	add	r7, sp, #16
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	79bb      	ldrb	r3, [r7, #6]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	210a      	movs	r1, #10
 80027f6:	9102      	str	r1, [sp, #8]
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	211c      	movs	r1, #28
 8002802:	4803      	ldr	r0, [pc, #12]	@ (8002810 <ist8310_IIC_read_muli_reg+0x34>)
 8002804:	f004 fa40 	bl	8006c88 <HAL_I2C_Mem_Read>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000764 	.word	0x20000764

08002814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002818:	f002 fb36 	bl	8004e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800281c:	f000 f868 	bl	80028f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002820:	f000 fd02 	bl	8003228 <MX_GPIO_Init>
  MX_DMA_Init();
 8002824:	f000 fc9a 	bl	800315c <MX_DMA_Init>
  MX_CAN1_Init();
 8002828:	f000 f8ce 	bl	80029c8 <MX_CAN1_Init>
  MX_CAN2_Init();
 800282c:	f000 f902 	bl	8002a34 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002830:	f000 f964 	bl	8002afc <MX_SPI1_Init>
  MX_TIM4_Init();
 8002834:	f000 fa40 	bl	8002cb8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002838:	f000 fc10 	bl	800305c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800283c:	f000 fc64 	bl	8003108 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002840:	f000 f992 	bl	8002b68 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002844:	f000 fb20 	bl	8002e88 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8002848:	f000 fc32 	bl	80030b0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800284c:	f000 fbb8 	bl	8002fc0 <MX_TIM10_Init>
  MX_I2C3_Init();
 8002850:	f000 f926 	bl	8002aa0 <MX_I2C3_Init>
  MX_TIM5_Init();
 8002854:	f000 faa8 	bl	8002da8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002858:	f7ff fe28 	bl	80024ac <can_filter_init>
  remote_control_init();
 800285c:	f001 f950 	bl	8003b00 <remote_control_init>
  usart_Init();
 8002860:	f7ff fdda 	bl	8002418 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002864:	f001 f95a 	bl	8003b1c <get_remote_control_point>
 8002868:	4603      	mov	r3, r0
 800286a:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <main+0xa8>)
 800286c:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800286e:	f008 f89f 	bl	800a9b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8002872:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <main+0xac>)
 8002874:	2100      	movs	r1, #0
 8002876:	4813      	ldr	r0, [pc, #76]	@ (80028c4 <main+0xb0>)
 8002878:	f008 f8e4 	bl	800aa44 <osThreadNew>
 800287c:	4603      	mov	r3, r0
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <main+0xb4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8002882:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <main+0xb8>)
 8002884:	2100      	movs	r1, #0
 8002886:	4812      	ldr	r0, [pc, #72]	@ (80028d0 <main+0xbc>)
 8002888:	f008 f8dc 	bl	800aa44 <osThreadNew>
 800288c:	4603      	mov	r3, r0
 800288e:	4a11      	ldr	r2, [pc, #68]	@ (80028d4 <main+0xc0>)
 8002890:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8002892:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <main+0xc4>)
 8002894:	2100      	movs	r1, #0
 8002896:	4811      	ldr	r0, [pc, #68]	@ (80028dc <main+0xc8>)
 8002898:	f008 f8d4 	bl	800aa44 <osThreadNew>
 800289c:	4603      	mov	r3, r0
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <main+0xcc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80028a2:	4a10      	ldr	r2, [pc, #64]	@ (80028e4 <main+0xd0>)
 80028a4:	2100      	movs	r1, #0
 80028a6:	4810      	ldr	r0, [pc, #64]	@ (80028e8 <main+0xd4>)
 80028a8:	f008 f8cc 	bl	800aa44 <osThreadNew>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a0f      	ldr	r2, [pc, #60]	@ (80028ec <main+0xd8>)
 80028b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80028b2:	f008 f8a1 	bl	800a9f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028b6:	bf00      	nop
 80028b8:	e7fd      	b.n	80028b6 <main+0xa2>
 80028ba:	bf00      	nop
 80028bc:	20000d60 	.word	0x20000d60
 80028c0:	0800e558 	.word	0x0800e558
 80028c4:	0800341d 	.word	0x0800341d
 80028c8:	20000d50 	.word	0x20000d50
 80028cc:	0800e57c 	.word	0x0800e57c
 80028d0:	0800342d 	.word	0x0800342d
 80028d4:	20000d54 	.word	0x20000d54
 80028d8:	0800e5a0 	.word	0x0800e5a0
 80028dc:	080025f9 	.word	0x080025f9
 80028e0:	20000d58 	.word	0x20000d58
 80028e4:	0800e5c4 	.word	0x0800e5c4
 80028e8:	08003525 	.word	0x08003525
 80028ec:	20000d5c 	.word	0x20000d5c

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	@ 0x50
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	2230      	movs	r2, #48	@ 0x30
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f00b f802 	bl	800d908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <SystemClock_Config+0xd0>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a28      	ldr	r2, [pc, #160]	@ (80029c0 <SystemClock_Config+0xd0>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
 8002924:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <SystemClock_Config+0xd0>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <SystemClock_Config+0xd4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <SystemClock_Config+0xd4>)
 800293a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <SystemClock_Config+0xd4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002956:	2302      	movs	r3, #2
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800295a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002960:	2306      	movs	r3, #6
 8002962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002964:	23a8      	movs	r3, #168	@ 0xa8
 8002966:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002968:	2302      	movs	r3, #2
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800296c:	2304      	movs	r3, #4
 800296e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	4618      	mov	r0, r3
 8002976:	f004 fe8f 	bl	8007698 <HAL_RCC_OscConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002980:	f000 fdd8 	bl	8003534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002984:	230f      	movs	r3, #15
 8002986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002990:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800299a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	2105      	movs	r1, #5
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 f8f0 	bl	8007b88 <HAL_RCC_ClockConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029ae:	f000 fdc1 	bl	8003534 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80029b2:	f005 f9cf 	bl	8007d54 <HAL_RCC_EnableCSS>
}
 80029b6:	bf00      	nop
 80029b8:	3750      	adds	r7, #80	@ 0x50
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029ce:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <MX_CAN1_Init+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029e6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80029ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <MX_CAN1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <MX_CAN1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <MX_CAN1_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <MX_CAN1_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <MX_CAN1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	@ (8002a2c <MX_CAN1_Init+0x64>)
 8002a1a:	f002 faa7 	bl	8004f6c <HAL_CAN_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002a24:	f000 fd86 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000714 	.word	0x20000714
 8002a30:	40006400 	.word	0x40006400

08002a34 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a3a:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <MX_CAN2_Init+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a40:	2203      	movs	r2, #3
 8002a42:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a52:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002a56:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a5a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a5e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002a72:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002a84:	4804      	ldr	r0, [pc, #16]	@ (8002a98 <MX_CAN2_Init+0x64>)
 8002a86:	f002 fa71 	bl	8004f6c <HAL_CAN_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002a90:	f000 fd50 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000073c 	.word	0x2000073c
 8002a9c:	40006800 	.word	0x40006800

08002aa0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002aa6:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <MX_I2C3_Init+0x54>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002aac:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <MX_I2C3_Init+0x58>)
 8002aae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002abe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ac2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002adc:	4804      	ldr	r0, [pc, #16]	@ (8002af0 <MX_I2C3_Init+0x50>)
 8002ade:	f003 ff8f 	bl	8006a00 <HAL_I2C_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ae8:	f000 fd24 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000764 	.word	0x20000764
 8002af4:	40005c00 	.word	0x40005c00
 8002af8:	00061a80 	.word	0x00061a80

08002afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b02:	4a18      	ldr	r2, [pc, #96]	@ (8002b64 <MX_SPI1_Init+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b30:	2238      	movs	r2, #56	@ 0x38
 8002b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b48:	220a      	movs	r2, #10
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b4e:	f005 fa22 	bl	8007f96 <HAL_SPI_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b58:	f000 fcec 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	200007b8 	.word	0x200007b8
 8002b64:	40013000 	.word	0x40013000

08002b68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b092      	sub	sp, #72	@ 0x48
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2220      	movs	r2, #32
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00a feb8 	bl	800d908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b98:	4b45      	ldr	r3, [pc, #276]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002b9a:	4a46      	ldr	r2, [pc, #280]	@ (8002cb4 <MX_TIM1_Init+0x14c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002b9e:	4b44      	ldr	r3, [pc, #272]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002ba0:	2253      	movs	r2, #83	@ 0x53
 8002ba2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba4:	4b42      	ldr	r3, [pc, #264]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002baa:	4b41      	ldr	r3, [pc, #260]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002bac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc4:	483a      	ldr	r0, [pc, #232]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002bc6:	f005 fdb3 	bl	8008730 <HAL_TIM_PWM_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002bd0:	f000 fcb0 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002be0:	4619      	mov	r1, r3
 8002be2:	4833      	ldr	r0, [pc, #204]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002be4:	f006 fbd2 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bee:	f000 fca1 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf2:	2360      	movs	r3, #96	@ 0x60
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c12:	2200      	movs	r2, #0
 8002c14:	4619      	mov	r1, r3
 8002c16:	4826      	ldr	r0, [pc, #152]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002c18:	f005 ff12 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c22:	f000 fc87 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4820      	ldr	r0, [pc, #128]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002c30:	f005 ff06 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002c3a:	f000 fc7b 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c42:	2208      	movs	r2, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	481a      	ldr	r0, [pc, #104]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002c48:	f005 fefa 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002c52:	f000 fc6f 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4814      	ldr	r0, [pc, #80]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002c60:	f005 feee 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002c6a:	f000 fc63 	bl	8003534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4807      	ldr	r0, [pc, #28]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002c92:	f006 fbf7 	bl	8009484 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002c9c:	f000 fc4a 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ca0:	4803      	ldr	r0, [pc, #12]	@ (8002cb0 <MX_TIM1_Init+0x148>)
 8002ca2:	f001 fcd9 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8002ca6:	bf00      	nop
 8002ca8:	3748      	adds	r7, #72	@ 0x48
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000810 	.word	0x20000810
 8002cb4:	40010000 	.word	0x40010000

08002cb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	@ 0x38
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
 8002ce4:	615a      	str	r2, [r3, #20]
 8002ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002cea:	4a2e      	ldr	r2, [pc, #184]	@ (8002da4 <MX_TIM4_Init+0xec>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002cee:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002cf0:	2253      	movs	r2, #83	@ 0x53
 8002cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002cfa:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002cfc:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d02:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d0a:	2280      	movs	r2, #128	@ 0x80
 8002d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d0e:	4824      	ldr	r0, [pc, #144]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d10:	f005 fc56 	bl	80085c0 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002d1a:	f000 fc0b 	bl	8003534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d28:	4619      	mov	r1, r3
 8002d2a:	481d      	ldr	r0, [pc, #116]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d2c:	f005 ff4a 	bl	8008bc4 <HAL_TIM_ConfigClockSource>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002d36:	f000 fbfd 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d3a:	4819      	ldr	r0, [pc, #100]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d3c:	f005 fcf8 	bl	8008730 <HAL_TIM_PWM_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002d46:	f000 fbf5 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d52:	f107 0320 	add.w	r3, r7, #32
 8002d56:	4619      	mov	r1, r3
 8002d58:	4811      	ldr	r0, [pc, #68]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d5a:	f006 fb17 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d64:	f000 fbe6 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d68:	2360      	movs	r3, #96	@ 0x60
 8002d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002d6c:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4807      	ldr	r0, [pc, #28]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d82:	f005 fe5d 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002d8c:	f000 fbd2 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d90:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <MX_TIM4_Init+0xe8>)
 8002d92:	f001 fc61 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8002d96:	bf00      	nop
 8002d98:	3738      	adds	r7, #56	@ 0x38
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000858 	.word	0x20000858
 8002da4:	40000800 	.word	0x40000800

08002da8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	f107 0320 	add.w	r3, r7, #32
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <MX_TIM5_Init+0xdc>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002dd2:	2253      	movs	r2, #83	@ 0x53
 8002dd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002ddc:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002dde:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002de2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002df0:	4823      	ldr	r0, [pc, #140]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002df2:	f005 fc9d 	bl	8008730 <HAL_TIM_PWM_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002dfc:	f000 fb9a 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	481c      	ldr	r0, [pc, #112]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002e10:	f006 fabc 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002e1a:	f000 fb8b 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1e:	2360      	movs	r3, #96	@ 0x60
 8002e20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	4619      	mov	r1, r3
 8002e34:	4812      	ldr	r0, [pc, #72]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002e36:	f005 fe03 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002e40:	f000 fb78 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2204      	movs	r2, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480d      	ldr	r0, [pc, #52]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002e4c:	f005 fdf8 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e56:	f000 fb6d 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4807      	ldr	r0, [pc, #28]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002e62:	f005 fded 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002e6c:	f000 fb62 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e70:	4803      	ldr	r0, [pc, #12]	@ (8002e80 <MX_TIM5_Init+0xd8>)
 8002e72:	f001 fbf1 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8002e76:	bf00      	nop
 8002e78:	3728      	adds	r7, #40	@ 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200008a0 	.word	0x200008a0
 8002e84:	40000c00 	.word	0x40000c00

08002e88 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b092      	sub	sp, #72	@ 0x48
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
 8002ea8:	615a      	str	r2, [r3, #20]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2220      	movs	r2, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00a fd28 	bl	800d908 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002eba:	4a40      	ldr	r2, [pc, #256]	@ (8002fbc <MX_TIM8_Init+0x134>)
 8002ebc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ec0:	2253      	movs	r2, #83	@ 0x53
 8002ec2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002eca:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ecc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ed0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed2:	4b39      	ldr	r3, [pc, #228]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ed8:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ede:	4b36      	ldr	r3, [pc, #216]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ee4:	4834      	ldr	r0, [pc, #208]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002ee6:	f005 fc23 	bl	8008730 <HAL_TIM_PWM_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002ef0:	f000 fb20 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002efc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f00:	4619      	mov	r1, r3
 8002f02:	482d      	ldr	r0, [pc, #180]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002f04:	f006 fa42 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002f0e:	f000 fb11 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f12:	2360      	movs	r3, #96	@ 0x60
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f32:	2200      	movs	r2, #0
 8002f34:	4619      	mov	r1, r3
 8002f36:	4820      	ldr	r0, [pc, #128]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002f38:	f005 fd82 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002f42:	f000 faf7 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	481a      	ldr	r0, [pc, #104]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002f50:	f005 fd76 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002f5a:	f000 faeb 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f62:	2208      	movs	r2, #8
 8002f64:	4619      	mov	r1, r3
 8002f66:	4814      	ldr	r0, [pc, #80]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002f68:	f005 fd6a 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002f72:	f000 fadf 	bl	8003534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4807      	ldr	r0, [pc, #28]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002f9a:	f006 fa73 	bl	8009484 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002fa4:	f000 fac6 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002fa8:	4803      	ldr	r0, [pc, #12]	@ (8002fb8 <MX_TIM8_Init+0x130>)
 8002faa:	f001 fb55 	bl	8004658 <HAL_TIM_MspPostInit>

}
 8002fae:	bf00      	nop
 8002fb0:	3748      	adds	r7, #72	@ 0x48
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200008e8 	.word	0x200008e8
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
 8002fd4:	615a      	str	r2, [r3, #20]
 8002fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002fda:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <MX_TIM10_Init+0x98>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002fec:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002ff0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_TIM10_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ffe:	4815      	ldr	r0, [pc, #84]	@ (8003054 <MX_TIM10_Init+0x94>)
 8003000:	f005 fade 	bl	80085c0 <HAL_TIM_Base_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800300a:	f000 fa93 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800300e:	4811      	ldr	r0, [pc, #68]	@ (8003054 <MX_TIM10_Init+0x94>)
 8003010:	f005 fb8e 	bl	8008730 <HAL_TIM_PWM_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800301a:	f000 fa8b 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800301e:	2360      	movs	r3, #96	@ 0x60
 8003020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2200      	movs	r2, #0
 8003032:	4619      	mov	r1, r3
 8003034:	4807      	ldr	r0, [pc, #28]	@ (8003054 <MX_TIM10_Init+0x94>)
 8003036:	f005 fd03 	bl	8008a40 <HAL_TIM_PWM_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003040:	f000 fa78 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003044:	4803      	ldr	r0, [pc, #12]	@ (8003054 <MX_TIM10_Init+0x94>)
 8003046:	f001 fb07 	bl	8004658 <HAL_TIM_MspPostInit>

}
 800304a:	bf00      	nop
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000930 	.word	0x20000930
 8003058:	40014400 	.word	0x40014400

0800305c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <MX_USART1_UART_Init+0x50>)
 8003064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800306c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003080:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003082:	220c      	movs	r2, #12
 8003084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <MX_USART1_UART_Init+0x4c>)
 8003094:	f006 fa48 	bl	8009528 <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800309e:	f000 fa49 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000a98 	.word	0x20000a98
 80030ac:	40011000 	.word	0x40011000

080030b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <MX_USART3_UART_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030bc:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <MX_USART3_UART_Init+0x54>)
 80030be:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	@ (80030fc <MX_USART3_UART_Init+0x4c>)
 80030e8:	f006 fa1e 	bl	8009528 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030f2:	f000 fa1f 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000ae0 	.word	0x20000ae0
 8003100:	40004800 	.word	0x40004800
 8003104:	000186a0 	.word	0x000186a0

08003108 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <MX_USART6_UART_Init+0x50>)
 8003110:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	@ (8003154 <MX_USART6_UART_Init+0x4c>)
 8003140:	f006 f9f2 	bl	8009528 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800314a:	f000 f9f3 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000b28 	.word	0x20000b28
 8003158:	40011400 	.word	0x40011400

0800315c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <MX_DMA_Init+0xc8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <MX_DMA_Init+0xc8>)
 800316c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <MX_DMA_Init+0xc8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4b28      	ldr	r3, [pc, #160]	@ (8003224 <MX_DMA_Init+0xc8>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <MX_DMA_Init+0xc8>)
 8003188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <MX_DMA_Init+0xc8>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2105      	movs	r1, #5
 800319e:	200c      	movs	r0, #12
 80031a0:	f002 fe27 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031a4:	200c      	movs	r0, #12
 80031a6:	f002 fe40 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2105      	movs	r1, #5
 80031ae:	200d      	movs	r0, #13
 80031b0:	f002 fe1f 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031b4:	200d      	movs	r0, #13
 80031b6:	f002 fe38 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2105      	movs	r1, #5
 80031be:	200f      	movs	r0, #15
 80031c0:	f002 fe17 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031c4:	200f      	movs	r0, #15
 80031c6:	f002 fe30 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2105      	movs	r1, #5
 80031ce:	202f      	movs	r0, #47	@ 0x2f
 80031d0:	f002 fe0f 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031d4:	202f      	movs	r0, #47	@ 0x2f
 80031d6:	f002 fe28 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2105      	movs	r1, #5
 80031de:	2039      	movs	r0, #57	@ 0x39
 80031e0:	f002 fe07 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80031e4:	2039      	movs	r0, #57	@ 0x39
 80031e6:	f002 fe20 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2105      	movs	r1, #5
 80031ee:	203a      	movs	r0, #58	@ 0x3a
 80031f0:	f002 fdff 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031f4:	203a      	movs	r0, #58	@ 0x3a
 80031f6:	f002 fe18 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	2045      	movs	r0, #69	@ 0x45
 8003200:	f002 fdf7 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003204:	2045      	movs	r0, #69	@ 0x45
 8003206:	f002 fe10 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2105      	movs	r1, #5
 800320e:	2046      	movs	r0, #70	@ 0x46
 8003210:	f002 fdef 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003214:	2046      	movs	r0, #70	@ 0x46
 8003216:	f002 fe08 	bl	8005e2a <HAL_NVIC_EnableIRQ>

}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	@ 0x38
 800322c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	4b71      	ldr	r3, [pc, #452]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b6e      	ldr	r3, [pc, #440]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	4b6a      	ldr	r3, [pc, #424]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a69      	ldr	r2, [pc, #420]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b67      	ldr	r3, [pc, #412]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a62      	ldr	r2, [pc, #392]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b60      	ldr	r3, [pc, #384]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	4b5c      	ldr	r3, [pc, #368]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b59      	ldr	r3, [pc, #356]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b55      	ldr	r3, [pc, #340]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a54      	ldr	r2, [pc, #336]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b52      	ldr	r3, [pc, #328]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b4b      	ldr	r3, [pc, #300]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	4a3f      	ldr	r2, [pc, #252]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	6313      	str	r3, [r2, #48]	@ 0x30
 8003312:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003328:	f043 0310 	orr.w	r3, r3, #16
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <MX_GPIO_Init+0x1e0>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	4833      	ldr	r0, [pc, #204]	@ (800340c <MX_GPIO_Init+0x1e4>)
 8003340:	f003 fb2c 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003344:	2200      	movs	r2, #0
 8003346:	2110      	movs	r1, #16
 8003348:	4831      	ldr	r0, [pc, #196]	@ (8003410 <MX_GPIO_Init+0x1e8>)
 800334a:	f003 fb27 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800334e:	2200      	movs	r2, #0
 8003350:	2101      	movs	r1, #1
 8003352:	4830      	ldr	r0, [pc, #192]	@ (8003414 <MX_GPIO_Init+0x1ec>)
 8003354:	f003 fb22 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003358:	2340      	movs	r3, #64	@ 0x40
 800335a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335c:	2301      	movs	r3, #1
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	4827      	ldr	r0, [pc, #156]	@ (800340c <MX_GPIO_Init+0x1e4>)
 8003370:	f003 f978 	bl	8006664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003374:	2308      	movs	r3, #8
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003378:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800337c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003386:	4619      	mov	r1, r3
 8003388:	4820      	ldr	r0, [pc, #128]	@ (800340c <MX_GPIO_Init+0x1e4>)
 800338a:	f003 f96b 	bl	8006664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800338e:	2310      	movs	r3, #16
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a2:	4619      	mov	r1, r3
 80033a4:	481a      	ldr	r0, [pc, #104]	@ (8003410 <MX_GPIO_Init+0x1e8>)
 80033a6:	f003 f95d 	bl	8006664 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80033aa:	2330      	movs	r3, #48	@ 0x30
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	4816      	ldr	r0, [pc, #88]	@ (8003418 <MX_GPIO_Init+0x1f0>)
 80033c0:	f003 f950 	bl	8006664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c4:	2301      	movs	r3, #1
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c8:	2301      	movs	r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	480e      	ldr	r0, [pc, #56]	@ (8003414 <MX_GPIO_Init+0x1ec>)
 80033dc:	f003 f942 	bl	8006664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2105      	movs	r1, #5
 80033e4:	2009      	movs	r0, #9
 80033e6:	f002 fd04 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80033ea:	2009      	movs	r0, #9
 80033ec:	f002 fd1d 	bl	8005e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80033f0:	2200      	movs	r2, #0
 80033f2:	2105      	movs	r1, #5
 80033f4:	200a      	movs	r0, #10
 80033f6:	f002 fcfc 	bl	8005df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80033fa:	200a      	movs	r0, #10
 80033fc:	f002 fd15 	bl	8005e2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003400:	bf00      	nop
 8003402:	3738      	adds	r7, #56	@ 0x38
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	40021800 	.word	0x40021800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800

0800341c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8003424:	2005      	movs	r0, #5
 8003426:	f007 fb9f 	bl	800ab68 <osDelay>
 800342a:	e7fb      	b.n	8003424 <TaskMain+0x8>

0800342c <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0a0      	sub	sp, #128	@ 0x80
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8003434:	4b33      	ldr	r3, [pc, #204]	@ (8003504 <TaskChassis+0xd8>)
 8003436:	4a34      	ldr	r2, [pc, #208]	@ (8003508 <TaskChassis+0xdc>)
 8003438:	4934      	ldr	r1, [pc, #208]	@ (800350c <TaskChassis+0xe0>)
 800343a:	4835      	ldr	r0, [pc, #212]	@ (8003510 <TaskChassis+0xe4>)
 800343c:	f000 fa20 	bl	8003880 <PWMInit>

	PID_preset_t test = {5.0, 0.0, 0.0};
 8003440:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <TaskChassis+0xe8>)
 8003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	673b      	str	r3, [r7, #112]	@ 0x70
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	677b      	str	r3, [r7, #116]	@ 0x74
	PID_preset_t test2 = {500.0, 0.0, 120.0};
 8003450:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <TaskChassis+0xec>)
 8003452:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003456:	ca07      	ldmia	r2, {r0, r1, r2}
 8003458:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//
	int16_t wheelPrev[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800345c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
		1   0

		2   3
	*/

	int8_t rotationVectors[4][2] =  {{1,  -1},
 800346a:	4a2c      	ldr	r2, [pc, #176]	@ (800351c <TaskChassis+0xf0>)
 800346c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003474:	e883 0003 	stmia.w	r3, {r0, r1}
							 		 {1,   1},
									 {-1,  1},
									 {-1, -1}};

	int16_t forwardsID[4] = {380, 5070, 348, 5140};
 8003478:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <TaskChassis+0xf4>)
 800347a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800347e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003482:	e883 0003 	stmia.w	r3, {r0, r1}

	// [MotorID][0 = MotorXVal, 1 = MotorYVal, 2 = MotorABSVal, 3 = MotorConvertedAngle], 4 = Reversal Of Motor
	int16_t motorInfo[4][5];
	int16_t DP[3] = {0, 0, 0};
 8003486:	2300      	movs	r3, #0
 8003488:	823b      	strh	r3, [r7, #16]
 800348a:	2300      	movs	r3, #0
 800348c:	827b      	strh	r3, [r7, #18]
 800348e:	2300      	movs	r3, #0
 8003490:	82bb      	strh	r3, [r7, #20]
	int8_t noVelocity = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	int16_t axiesMod[3] = {0, 0, 0};
 8003498:	2300      	movs	r3, #0
 800349a:	813b      	strh	r3, [r7, #8]
 800349c:	2300      	movs	r3, #0
 800349e:	817b      	strh	r3, [r7, #10]
 80034a0:	2300      	movs	r3, #0
 80034a2:	81bb      	strh	r3, [r7, #12]


  /* Infinite loop */
    for(;;) {

		int16_t FB = getRCfakechannel(0);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fd ff95 	bl	80013d4 <getRCfakechannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		int16_t LR = getRCfakechannel(1);
 80034b0:	2001      	movs	r0, #1
 80034b2:	f7fd ff8f 	bl	80013d4 <getRCfakechannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
		int16_t Rotate = getRCfakechannel(3);
 80034bc:	2003      	movs	r0, #3
 80034be:	f7fd ff89 	bl	80013d4 <getRCfakechannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

		// usart_printf("%d, %d, %d, %d\r\n", getRCfakechannel(0),getRCfakechannel(1),getRCfakechannel(2),getRCfakechannel(3));

		axiesMod[0] = getRCfakechannel(0);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd ff83 	bl	80013d4 <getRCfakechannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	813b      	strh	r3, [r7, #8]
		axiesMod[1] = getRCfakechannel(1);
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fd ff7e 	bl	80013d4 <getRCfakechannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	817b      	strh	r3, [r7, #10]
		axiesMod[2] = getRCfakechannel(3);
 80034dc:	2003      	movs	r0, #3
 80034de:	f7fd ff79 	bl	80013d4 <getRCfakechannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	81bb      	strh	r3, [r7, #12]

		Loop(axiesMod);
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fd54 	bl	8001f98 <Loop>
		// usart_printf("Motor1Angle: %d\r\n", motorInfo[0][3]);
    	// usart_printf("FB: %d   LR: %d   Rot: %d\r\n", FB, LR, Rotate);
    	// usart_printf("M1x: %d| M1y: %d| M1Speed: %d\r\nM2x: %d| M2y: %d| M2Speed: %d\r\nM3x: %d| M3y: %d| M3Speed: %d\r\nM4x: %d| M4y: %d| M4Speed: %d\r\n\r\n", motorInfo[0][0], motorInfo[0][1], motorInfo[0][2], motorInfo[1][0], motorInfo[1][1], motorInfo[1][2], motorInfo[2][0], motorInfo[2][1], motorInfo[2][2], motorInfo[3][0], motorInfo[3][1], motorInfo[3][2]);
    	// usart_printf("Scaler = %d\r\n", (int16_t)(SScalerVal*100));

		PWMTimerStarter();
 80034f0:	f000 f9fa 	bl	80038e8 <PWMTimerStarter>
		RCkeysRefresh();
 80034f4:	f000 fcd2 	bl	8003e9c <RCkeysRefresh>
        osDelay(10);
 80034f8:	200a      	movs	r0, #10
 80034fa:	f007 fb35 	bl	800ab68 <osDelay>
    for(;;) {
 80034fe:	bf00      	nop
 8003500:	e7d0      	b.n	80034a4 <TaskChassis+0x78>
 8003502:	bf00      	nop
 8003504:	200008e8 	.word	0x200008e8
 8003508:	200008a0 	.word	0x200008a0
 800350c:	20000858 	.word	0x20000858
 8003510:	20000810 	.word	0x20000810
 8003514:	40a00000 	.word	0x40a00000
 8003518:	0800e518 	.word	0x0800e518
 800351c:	0800e524 	.word	0x0800e524
 8003520:	0800e52c 	.word	0x0800e52c

08003524 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 800352c:	2005      	movs	r0, #5
 800352e:	f007 fb1b 	bl	800ab68 <osDelay>
 8003532:	e7fb      	b.n	800352c <TaskTurret+0x8>

08003534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003538:	b672      	cpsid	i
}
 800353a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <Error_Handler+0x8>

08003540 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6178      	str	r0, [r7, #20]
 8003548:	460b      	mov	r3, r1
 800354a:	60fa      	str	r2, [r7, #12]
 800354c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003550:	edc7 0a01 	vstr	s1, [r7, #4]
 8003554:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d042      	beq.n	80035e2 <PID_init+0xa2>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03f      	beq.n	80035e2 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	7cfa      	ldrb	r2, [r7, #19]
 8003566:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3304      	adds	r3, #4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3308      	adds	r3, #8
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	635a      	str	r2, [r3, #52]	@ 0x34
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035e0:	e000      	b.n	80035e4 <PID_init+0xa4>
        return;
 80035e2:	bf00      	nop
}
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80035fa:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <PID_calc+0x1c>
    {
        return 0.0f;
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e130      	b.n	800386c <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8003626:	ed97 7a01 	vldr	s14, [r7, #4]
 800362a:	edd7 7a02 	vldr	s15, [r7, #8]
 800362e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 8095 	bne.w	800376c <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	ed93 7a01 	vldr	s14, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	edd3 6a02 	vldr	s13, [r3, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800366a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80036aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80036c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	dd04      	ble.n	80036d4 <PID_calc+0xe6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036d2:	e014      	b.n	80036fe <PID_calc+0x110>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80036e0:	eef1 7a67 	vneg.f32	s15, s15
 80036e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d507      	bpl.n	80036fe <PID_calc+0x110>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80036f4:	eef1 7a67 	vneg.f32	s15, s15
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800370a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	ed93 7a08 	vldr	s14, [r3, #32]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	edd3 7a04 	vldr	s15, [r3, #16]
 800372a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	dd04      	ble.n	800373e <PID_calc+0x150>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]
 800373c:	e094      	b.n	8003868 <PID_calc+0x27a>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	ed93 7a08 	vldr	s14, [r3, #32]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	edd3 7a04 	vldr	s15, [r3, #16]
 800374a:	eef1 7a67 	vneg.f32	s15, s15
 800374e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	f140 8087 	bpl.w	8003868 <PID_calc+0x27a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003760:	eef1 7a67 	vneg.f32	s15, s15
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	edc3 7a08 	vstr	s15, [r3, #32]
 800376a:	e07d      	b.n	8003868 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d179      	bne.n	8003868 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	ed93 7a01 	vldr	s14, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003786:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	ed93 7a02 	vldr	s14, [r3, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80037c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80037d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003806:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	ed93 7a08 	vldr	s14, [r3, #32]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	edd3 7a04 	vldr	s15, [r3, #16]
 800382a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	dd04      	ble.n	800383e <PID_calc+0x250>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
 800383c:	e014      	b.n	8003868 <PID_calc+0x27a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	ed93 7a08 	vldr	s14, [r3, #32]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	edd3 7a04 	vldr	s15, [r3, #16]
 800384a:	eef1 7a67 	vneg.f32	s15, s15
 800384e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	d507      	bpl.n	8003868 <PID_calc+0x27a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	edd3 7a04 	vldr	s15, [r3, #16]
 800385e:	eef1 7a67 	vneg.f32	s15, s15
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
}
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 800388e:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <PWMInit+0x58>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8003894:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <PWMInit+0x5c>)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800389a:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <PWMInit+0x60>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 80038a0:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <PWMInit+0x64>)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <PWMInit+0x58>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fed8 	bl	8008660 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <PWMInit+0x5c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fed3 	bl	8008660 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <PWMInit+0x60>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fece 	bl	8008660 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 80038c4:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <PWMInit+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fec9 	bl	8008660 <HAL_TIM_Base_Start>
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000d64 	.word	0x20000d64
 80038dc:	20000d68 	.word	0x20000d68
 80038e0:	20000d6c 	.word	0x20000d6c
 80038e4:	20000d70 	.word	0x20000d70

080038e8 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e0f1      	b.n	8003ad8 <PWMTimerStarter+0x1f0>
		switch (i) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b0a      	cmp	r3, #10
 80038f8:	f200 80eb 	bhi.w	8003ad2 <PWMTimerStarter+0x1ea>
 80038fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <PWMTimerStarter+0x1c>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003931 	.word	0x08003931
 8003908:	08003957 	.word	0x08003957
 800390c:	0800397d 	.word	0x0800397d
 8003910:	080039a3 	.word	0x080039a3
 8003914:	080039c9 	.word	0x080039c9
 8003918:	080039ef 	.word	0x080039ef
 800391c:	08003a15 	.word	0x08003a15
 8003920:	08003a3b 	.word	0x08003a3b
 8003924:	08003a61 	.word	0x08003a61
 8003928:	08003a87 	.word	0x08003a87
 800392c:	08003aad 	.word	0x08003aad
		case 0:
			if (whichPWMisOn[0] == 1) {
 8003930:	4b6e      	ldr	r3, [pc, #440]	@ (8003aec <PWMTimerStarter+0x204>)
 8003932:	f993 3000 	ldrsb.w	r3, [r3]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d106      	bne.n	8003948 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800393a:	4b6d      	ldr	r3, [pc, #436]	@ (8003af0 <PWMTimerStarter+0x208>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f004 ff45 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8003946:	e0c4      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8003948:	4b69      	ldr	r3, [pc, #420]	@ (8003af0 <PWMTimerStarter+0x208>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f005 f806 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003954:	e0bd      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8003956:	4b65      	ldr	r3, [pc, #404]	@ (8003aec <PWMTimerStarter+0x204>)
 8003958:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003960:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <PWMTimerStarter+0x208>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2104      	movs	r1, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f004 ff32 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 800396c:	e0b1      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 800396e:	4b60      	ldr	r3, [pc, #384]	@ (8003af0 <PWMTimerStarter+0x208>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2104      	movs	r1, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f004 fff3 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 800397a:	e0aa      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 800397c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aec <PWMTimerStarter+0x204>)
 800397e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d106      	bne.n	8003994 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <PWMTimerStarter+0x208>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2108      	movs	r1, #8
 800398c:	4618      	mov	r0, r3
 800398e:	f004 ff1f 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003992:	e09e      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003994:	4b56      	ldr	r3, [pc, #344]	@ (8003af0 <PWMTimerStarter+0x208>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2108      	movs	r1, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f004 ffe0 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 80039a0:	e097      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80039a2:	4b52      	ldr	r3, [pc, #328]	@ (8003aec <PWMTimerStarter+0x204>)
 80039a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80039ac:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <PWMTimerStarter+0x208>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	210c      	movs	r1, #12
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 ff0c 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80039b8:	e08b      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <PWMTimerStarter+0x208>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	210c      	movs	r1, #12
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 ffcd 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 80039c6:	e084      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80039c8:	4b48      	ldr	r3, [pc, #288]	@ (8003aec <PWMTimerStarter+0x204>)
 80039ca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d106      	bne.n	80039e0 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80039d2:	4b48      	ldr	r3, [pc, #288]	@ (8003af4 <PWMTimerStarter+0x20c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f004 fef9 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 80039de:	e078      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 80039e0:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <PWMTimerStarter+0x20c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 ffba 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 80039ec:	e071      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 80039ee:	4b3f      	ldr	r3, [pc, #252]	@ (8003aec <PWMTimerStarter+0x204>)
 80039f0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 80039f8:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <PWMTimerStarter+0x20c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2104      	movs	r1, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 fee6 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8003a04:	e065      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <PWMTimerStarter+0x20c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 ffa7 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003a12:	e05e      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003a14:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <PWMTimerStarter+0x204>)
 8003a16:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d106      	bne.n	8003a2c <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8003a1e:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <PWMTimerStarter+0x20c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2108      	movs	r1, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fed3 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8003a2a:	e052      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003a2c:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <PWMTimerStarter+0x20c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2108      	movs	r1, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 ff94 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003a38:	e04b      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003aec <PWMTimerStarter+0x204>)
 8003a3c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003a44:	4b2c      	ldr	r3, [pc, #176]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fec0 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003a50:	e03f      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003a52:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 ff81 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003a5e:	e038      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003a60:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <PWMTimerStarter+0x204>)
 8003a62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d106      	bne.n	8003a78 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8003a6a:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2104      	movs	r1, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fead 	bl	80087d0 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8003a76:	e02c      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8003a78:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 ff6e 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003a84:	e025      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <PWMTimerStarter+0x204>)
 8003a88:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2108      	movs	r1, #8
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fe9a 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003a9c:	e019      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003a9e:	4b16      	ldr	r3, [pc, #88]	@ (8003af8 <PWMTimerStarter+0x210>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2108      	movs	r1, #8
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 ff5b 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003aaa:	e012      	b.n	8003ad2 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003aac:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <PWMTimerStarter+0x204>)
 8003aae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d106      	bne.n	8003ac4 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <PWMTimerStarter+0x214>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2108      	movs	r1, #8
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 fe87 	bl	80087d0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003ac2:	e005      	b.n	8003ad0 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <PWMTimerStarter+0x214>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2108      	movs	r1, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 ff48 	bl	8008960 <HAL_TIM_PWM_Stop>
			break;
 8003ad0:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	f77f af0a 	ble.w	80038f4 <PWMTimerStarter+0xc>
		}
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000d74 	.word	0x20000d74
 8003af0:	20000d64 	.word	0x20000d64
 8003af4:	20000d70 	.word	0x20000d70
 8003af8:	20000d6c 	.word	0x20000d6c
 8003afc:	20000d68 	.word	0x20000d68

08003b00 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003b04:	2224      	movs	r2, #36	@ 0x24
 8003b06:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <remote_control_init+0x14>)
 8003b08:	4803      	ldr	r0, [pc, #12]	@ (8003b18 <remote_control_init+0x18>)
 8003b0a:	f7fe fd19 	bl	8002540 <RC_init>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000dbc 	.word	0x20000dbc
 8003b18:	20000d98 	.word	0x20000d98

08003b1c <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003b20:	4b02      	ldr	r3, [pc, #8]	@ (8003b2c <get_remote_control_point+0x10>)
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	20000d80 	.word	0x20000d80

08003b30 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003b36:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <USART3_IRQHandler+0x118>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003b44:	2300      	movs	r3, #0
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	4b3f      	ldr	r3, [pc, #252]	@ (8003c48 <USART3_IRQHandler+0x118>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <USART3_IRQHandler+0x118>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003b5a:	e070      	b.n	8003c3e <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <USART3_IRQHandler+0x11c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d06a      	beq.n	8003c3e <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4b36      	ldr	r3, [pc, #216]	@ (8003c48 <USART3_IRQHandler+0x118>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <USART3_IRQHandler+0x118>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003b7e:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d12d      	bne.n	8003be8 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003b8c:	4b30      	ldr	r3, [pc, #192]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <USART3_IRQHandler+0x124>)
 8003bac:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003bae:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003bb6:	4b26      	ldr	r3, [pc, #152]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003bc4:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <USART3_IRQHandler+0x124>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2b12      	cmp	r3, #18
 8003bdc:	d12f      	bne.n	8003c3e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003bde:	491e      	ldr	r1, [pc, #120]	@ (8003c58 <USART3_IRQHandler+0x128>)
 8003be0:	481e      	ldr	r0, [pc, #120]	@ (8003c5c <USART3_IRQHandler+0x12c>)
 8003be2:	f000 f841 	bl	8003c68 <sbus_to_rc>
}
 8003be6:	e02a      	b.n	8003c3e <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b18      	ldr	r3, [pc, #96]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <USART3_IRQHandler+0x124>)
 8003c08:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003c0a:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003c12:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <USART3_IRQHandler+0x130>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <USART3_IRQHandler+0x130>)
 8003c18:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003c1c:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <USART3_IRQHandler+0x120>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <USART3_IRQHandler+0x124>)
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d103      	bne.n	8003c3e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003c36:	4908      	ldr	r1, [pc, #32]	@ (8003c58 <USART3_IRQHandler+0x128>)
 8003c38:	480a      	ldr	r0, [pc, #40]	@ (8003c64 <USART3_IRQHandler+0x134>)
 8003c3a:	f000 f815 	bl	8003c68 <sbus_to_rc>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000ae0 	.word	0x20000ae0
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	20000c30 	.word	0x20000c30
 8003c54:	20000de0 	.word	0x20000de0
 8003c58:	20000d80 	.word	0x20000d80
 8003c5c:	20000d98 	.word	0x20000d98
 8003c60:	40026028 	.word	0x40026028
 8003c64:	20000dbc 	.word	0x20000dbc

08003c68 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 810b 	beq.w	8003e90 <sbus_to_rc+0x228>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8107 	beq.w	8003e90 <sbus_to_rc+0x228>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	b21b      	sxth	r3, r3
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	b21b      	sxth	r3, r3
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b21b      	sxth	r3, r3
 8003c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca0:	b21a      	sxth	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	08db      	lsrs	r3, r3, #3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	b21a      	sxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	b21b      	sxth	r3, r3
 8003cbe:	015b      	lsls	r3, r3, #5
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d06:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	b21a      	sxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3305      	adds	r3, #5
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3305      	adds	r3, #5
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3305      	adds	r3, #5
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	109b      	asrs	r3, r3, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3306      	adds	r3, #6
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	b21a      	sxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3307      	adds	r3, #7
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	b21b      	sxth	r3, r3
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3309      	adds	r3, #9
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	330a      	adds	r3, #10
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	b21a      	sxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	330b      	adds	r3, #11
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b21a      	sxth	r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	330d      	adds	r3, #13
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	330e      	adds	r3, #14
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	b21a      	sxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	330f      	adds	r3, #15
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3310      	adds	r3, #16
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3311      	adds	r3, #17
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	b21b      	sxth	r3, r3
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b21a      	sxth	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b21a      	sxth	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b21a      	sxth	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	811a      	strh	r2, [r3, #8]
 8003e8e:	e000      	b.n	8003e92 <sbus_to_rc+0x22a>
        return;
 8003e90:	bf00      	nop
}
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8003ea2:	4b85      	ldr	r3, [pc, #532]	@ (80040b8 <RCkeysRefresh+0x21c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	7d1a      	ldrb	r2, [r3, #20]
 8003ea8:	7d5b      	ldrb	r3, [r3, #21]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8003eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da07      	bge.n	8003ec8 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8003eb8:	4b80      	ldr	r3, [pc, #512]	@ (80040bc <RCkeysRefresh+0x220>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003ec4:	80fb      	strh	r3, [r7, #6]
 8003ec6:	e002      	b.n	8003ece <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8003ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80040bc <RCkeysRefresh+0x220>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ed4:	d307      	bcc.n	8003ee6 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8003ed6:	4b79      	ldr	r3, [pc, #484]	@ (80040bc <RCkeysRefresh+0x220>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003ee2:	80fb      	strh	r3, [r7, #6]
 8003ee4:	e002      	b.n	8003eec <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8003ee6:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <RCkeysRefresh+0x220>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef2:	d307      	bcc.n	8003f04 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003ef4:	4b71      	ldr	r3, [pc, #452]	@ (80040bc <RCkeysRefresh+0x220>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003f00:	80fb      	strh	r3, [r7, #6]
 8003f02:	e002      	b.n	8003f0a <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003f04:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f10:	d307      	bcc.n	8003f22 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003f12:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003f1e:	80fb      	strh	r3, [r7, #6]
 8003f20:	e002      	b.n	8003f28 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003f22:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2e:	d307      	bcc.n	8003f40 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003f30:	4b62      	ldr	r3, [pc, #392]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003f3c:	80fb      	strh	r3, [r7, #6]
 8003f3e:	e002      	b.n	8003f46 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003f40:	4b5e      	ldr	r3, [pc, #376]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d307      	bcc.n	8003f5e <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8003f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003f5a:	80fb      	strh	r3, [r7, #6]
 8003f5c:	e002      	b.n	8003f64 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8003f5e:	4b57      	ldr	r3, [pc, #348]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6a:	d307      	bcc.n	8003f7c <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8003f6c:	4b53      	ldr	r3, [pc, #332]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003f78:	80fb      	strh	r3, [r7, #6]
 8003f7a:	e002      	b.n	8003f82 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2bff      	cmp	r3, #255	@ 0xff
 8003f86:	d907      	bls.n	8003f98 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8003f88:	4b4c      	ldr	r3, [pc, #304]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f94:	80fb      	strh	r3, [r7, #6]
 8003f96:	e002      	b.n	8003f9e <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8003f98:	4b48      	ldr	r3, [pc, #288]	@ (80040bc <RCkeysRefresh+0x220>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fa2:	d906      	bls.n	8003fb2 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003fa4:	4b45      	ldr	r3, [pc, #276]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	3b80      	subs	r3, #128	@ 0x80
 8003fae:	80fb      	strh	r3, [r7, #6]
 8003fb0:	e002      	b.n	8003fb8 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8003fb2:	4b42      	ldr	r3, [pc, #264]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fbc:	d906      	bls.n	8003fcc <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	3b40      	subs	r3, #64	@ 0x40
 8003fc8:	80fb      	strh	r3, [r7, #6]
 8003fca:	e002      	b.n	8003fd2 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b1f      	cmp	r3, #31
 8003fd6:	d906      	bls.n	8003fe6 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003fd8:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	3b20      	subs	r3, #32
 8003fe2:	80fb      	strh	r3, [r7, #6]
 8003fe4:	e002      	b.n	8003fec <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003fe6:	4b35      	ldr	r3, [pc, #212]	@ (80040bc <RCkeysRefresh+0x220>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d906      	bls.n	8004000 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003ff2:	4b32      	ldr	r3, [pc, #200]	@ (80040bc <RCkeysRefresh+0x220>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	3b10      	subs	r3, #16
 8003ffc:	80fb      	strh	r3, [r7, #6]
 8003ffe:	e002      	b.n	8004006 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8004000:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <RCkeysRefresh+0x220>)
 8004002:	2200      	movs	r2, #0
 8004004:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b07      	cmp	r3, #7
 800400a:	d906      	bls.n	800401a <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <RCkeysRefresh+0x220>)
 800400e:	2201      	movs	r2, #1
 8004010:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	3b08      	subs	r3, #8
 8004016:	80fb      	strh	r3, [r7, #6]
 8004018:	e002      	b.n	8004020 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 800401a:	4b28      	ldr	r3, [pc, #160]	@ (80040bc <RCkeysRefresh+0x220>)
 800401c:	2200      	movs	r2, #0
 800401e:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d906      	bls.n	8004034 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8004026:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <RCkeysRefresh+0x220>)
 8004028:	2201      	movs	r2, #1
 800402a:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	3b04      	subs	r3, #4
 8004030:	80fb      	strh	r3, [r7, #6]
 8004032:	e002      	b.n	800403a <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <RCkeysRefresh+0x220>)
 8004036:	2200      	movs	r2, #0
 8004038:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d906      	bls.n	800404e <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8004040:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <RCkeysRefresh+0x220>)
 8004042:	2201      	movs	r2, #1
 8004044:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	3b02      	subs	r3, #2
 800404a:	80fb      	strh	r3, [r7, #6]
 800404c:	e002      	b.n	8004054 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 800404e:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <RCkeysRefresh+0x220>)
 8004050:	2200      	movs	r2, #0
 8004052:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 800405a:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <RCkeysRefresh+0x220>)
 800405c:	2201      	movs	r2, #1
 800405e:	731a      	strb	r2, [r3, #12]
 8004060:	e002      	b.n	8004068 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8004062:	4b16      	ldr	r3, [pc, #88]	@ (80040bc <RCkeysRefresh+0x220>)
 8004064:	2200      	movs	r2, #0
 8004066:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <RCkeysRefresh+0x21c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004070:	b21a      	sxth	r2, r3
 8004072:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <RCkeysRefresh+0x220>)
 8004074:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <RCkeysRefresh+0x21c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800407e:	b21a      	sxth	r2, r3
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <RCkeysRefresh+0x220>)
 8004082:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <RCkeysRefresh+0x21c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800408c:	b21a      	sxth	r2, r3
 800408e:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <RCkeysRefresh+0x220>)
 8004090:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8004092:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <RCkeysRefresh+0x21c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	7c9b      	ldrb	r3, [r3, #18]
 8004098:	b25a      	sxtb	r2, r3
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <RCkeysRefresh+0x220>)
 800409c:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <RCkeysRefresh+0x21c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	7cdb      	ldrb	r3, [r3, #19]
 80040a4:	b25a      	sxtb	r2, r3
 80040a6:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <RCkeysRefresh+0x220>)
 80040a8:	71da      	strb	r2, [r3, #7]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000034 	.word	0x20000034
 80040bc:	20000590 	.word	0x20000590

080040c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_MspInit+0x54>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_MspInit+0x54>)
 80040d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <HAL_MspInit+0x54>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_MspInit+0x54>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <HAL_MspInit+0x54>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f2:	4b08      	ldr	r3, [pc, #32]	@ (8004114 <HAL_MspInit+0x54>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	210f      	movs	r1, #15
 8004102:	f06f 0001 	mvn.w	r0, #1
 8004106:	f001 fe74 	bl	8005df2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	@ 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 031c 	add.w	r3, r7, #28
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a4a      	ldr	r2, [pc, #296]	@ (8004260 <HAL_CAN_MspInit+0x148>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d13d      	bne.n	80041b6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800413a:	4b4a      	ldr	r3, [pc, #296]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	4a48      	ldr	r2, [pc, #288]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 8004142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004144:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10d      	bne.n	8004168 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	4b45      	ldr	r3, [pc, #276]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	4a44      	ldr	r2, [pc, #272]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004156:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800415a:	6413      	str	r3, [r2, #64]	@ 0x40
 800415c:	4b42      	ldr	r3, [pc, #264]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	4b3e      	ldr	r3, [pc, #248]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	4a3d      	ldr	r2, [pc, #244]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004172:	f043 0308 	orr.w	r3, r3, #8
 8004176:	6313      	str	r3, [r2, #48]	@ 0x30
 8004178:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004184:	2303      	movs	r3, #3
 8004186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004194:	2309      	movs	r3, #9
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	4619      	mov	r1, r3
 800419e:	4833      	ldr	r0, [pc, #204]	@ (800426c <HAL_CAN_MspInit+0x154>)
 80041a0:	f002 fa60 	bl	8006664 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2105      	movs	r1, #5
 80041a8:	2014      	movs	r0, #20
 80041aa:	f001 fe22 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041ae:	2014      	movs	r0, #20
 80041b0:	f001 fe3b 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80041b4:	e04f      	b.n	8004256 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004270 <HAL_CAN_MspInit+0x158>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d14a      	bne.n	8004256 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	4b28      	ldr	r3, [pc, #160]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 80041ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d0:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041dc:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a20      	ldr	r2, [pc, #128]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 80041e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_CAN_MspInit+0x14c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 80041f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	4a15      	ldr	r2, [pc, #84]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	6313      	str	r3, [r2, #48]	@ 0x30
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <HAL_CAN_MspInit+0x150>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004226:	2360      	movs	r3, #96	@ 0x60
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004232:	2303      	movs	r3, #3
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004236:	2309      	movs	r3, #9
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	480c      	ldr	r0, [pc, #48]	@ (8004274 <HAL_CAN_MspInit+0x15c>)
 8004242:	f002 fa0f 	bl	8006664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2105      	movs	r1, #5
 800424a:	2040      	movs	r0, #64	@ 0x40
 800424c:	f001 fdd1 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004250:	2040      	movs	r0, #64	@ 0x40
 8004252:	f001 fdea 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8004256:	bf00      	nop
 8004258:	3730      	adds	r7, #48	@ 0x30
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40006400 	.word	0x40006400
 8004264:	20000de4 	.word	0x20000de4
 8004268:	40023800 	.word	0x40023800
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40006800 	.word	0x40006800
 8004274:	40020400 	.word	0x40020400

08004278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	@ 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a29      	ldr	r2, [pc, #164]	@ (800433c <HAL_I2C_MspInit+0xc4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d14b      	bne.n	8004332 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4a27      	ldr	r2, [pc, #156]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042aa:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	4b21      	ldr	r3, [pc, #132]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	4a20      	ldr	r2, [pc, #128]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042d8:	2312      	movs	r3, #18
 80042da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e0:	2303      	movs	r3, #3
 80042e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80042e4:	2304      	movs	r3, #4
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4619      	mov	r1, r3
 80042ee:	4815      	ldr	r0, [pc, #84]	@ (8004344 <HAL_I2C_MspInit+0xcc>)
 80042f0:	f002 f9b8 	bl	8006664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042fa:	2312      	movs	r3, #18
 80042fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004302:	2303      	movs	r3, #3
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004306:	2304      	movs	r3, #4
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4619      	mov	r1, r3
 8004310:	480d      	ldr	r0, [pc, #52]	@ (8004348 <HAL_I2C_MspInit+0xd0>)
 8004312:	f002 f9a7 	bl	8006664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	4a08      	ldr	r2, [pc, #32]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 8004320:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004324:	6413      	str	r3, [r2, #64]	@ 0x40
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_I2C_MspInit+0xc8>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004332:	bf00      	nop
 8004334:	3728      	adds	r7, #40	@ 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40005c00 	.word	0x40005c00
 8004340:	40023800 	.word	0x40023800
 8004344:	40020800 	.word	0x40020800
 8004348:	40020000 	.word	0x40020000

0800434c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	@ 0x28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a28      	ldr	r2, [pc, #160]	@ (800440c <HAL_SPI_MspInit+0xc0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d149      	bne.n	8004402 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	4b27      	ldr	r3, [pc, #156]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 8004378:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800437c:	6453      	str	r3, [r2, #68]	@ 0x44
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	4a1f      	ldr	r2, [pc, #124]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 8004394:	f043 0302 	orr.w	r3, r3, #2
 8004398:	6313      	str	r3, [r2, #48]	@ 0x30
 800439a:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b6:	4b16      	ldr	r3, [pc, #88]	@ (8004410 <HAL_SPI_MspInit+0xc4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80043c2:	2318      	movs	r3, #24
 80043c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ce:	2303      	movs	r3, #3
 80043d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043d2:	2305      	movs	r3, #5
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4619      	mov	r1, r3
 80043dc:	480d      	ldr	r0, [pc, #52]	@ (8004414 <HAL_SPI_MspInit+0xc8>)
 80043de:	f002 f941 	bl	8006664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e6:	2302      	movs	r3, #2
 80043e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ee:	2303      	movs	r3, #3
 80043f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043f2:	2305      	movs	r3, #5
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	4619      	mov	r1, r3
 80043fc:	4806      	ldr	r0, [pc, #24]	@ (8004418 <HAL_SPI_MspInit+0xcc>)
 80043fe:	f002 f931 	bl	8006664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004402:	bf00      	nop
 8004404:	3728      	adds	r7, #40	@ 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40013000 	.word	0x40013000
 8004410:	40023800 	.word	0x40023800
 8004414:	40020400 	.word	0x40020400
 8004418:	40020000 	.word	0x40020000

0800441c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4e      	ldr	r2, [pc, #312]	@ (8004564 <HAL_TIM_PWM_MspInit+0x148>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10e      	bne.n	800444c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	4b4d      	ldr	r3, [pc, #308]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	4a4c      	ldr	r2, [pc, #304]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6453      	str	r3, [r2, #68]	@ 0x44
 800443e:	4b4a      	ldr	r3, [pc, #296]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800444a:	e086      	b.n	800455a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a46      	ldr	r2, [pc, #280]	@ (800456c <HAL_TIM_PWM_MspInit+0x150>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d16e      	bne.n	8004534 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	4b43      	ldr	r3, [pc, #268]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a42      	ldr	r2, [pc, #264]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b40      	ldr	r3, [pc, #256]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8004472:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 8004474:	4a3f      	ldr	r2, [pc, #252]	@ (8004574 <HAL_TIM_PWM_MspInit+0x158>)
 8004476:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8004478:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 800447a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800447e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004480:	4b3b      	ldr	r3, [pc, #236]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004486:	4b3a      	ldr	r3, [pc, #232]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 8004488:	2200      	movs	r2, #0
 800448a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800448c:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 800448e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004492:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004494:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 8004496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800449a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800449c:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 800449e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044a2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 80044a4:	4b32      	ldr	r3, [pc, #200]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80044b6:	482e      	ldr	r0, [pc, #184]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044b8:	f001 fcd2 	bl	8005e60 <HAL_DMA_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 80044c2:	f7ff f837 	bl	8003534 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80044cc:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <HAL_TIM_PWM_MspInit+0x154>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80044d2:	4b29      	ldr	r3, [pc, #164]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <HAL_TIM_PWM_MspInit+0x160>)
 80044d6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80044d8:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044da:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80044de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80044ec:	4b22      	ldr	r3, [pc, #136]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044f4:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 80044fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004502:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8004504:	4b1c      	ldr	r3, [pc, #112]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 800450c:	2200      	movs	r2, #0
 800450e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 8004512:	2200      	movs	r2, #0
 8004514:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8004516:	4818      	ldr	r0, [pc, #96]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 8004518:	f001 fca2 	bl	8005e60 <HAL_DMA_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8004522:	f7ff f807 	bl	8003534 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a13      	ldr	r2, [pc, #76]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28
 800452c:	4a12      	ldr	r2, [pc, #72]	@ (8004578 <HAL_TIM_PWM_MspInit+0x15c>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004532:	e012      	b.n	800455a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <HAL_TIM_PWM_MspInit+0x164>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10d      	bne.n	800455a <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6453      	str	r3, [r2, #68]	@ 0x44
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_TIM_PWM_MspInit+0x14c>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	bf00      	nop
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000
 8004568:	40023800 	.word	0x40023800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	200009d8 	.word	0x200009d8
 8004574:	40026040 	.word	0x40026040
 8004578:	20000a38 	.word	0x20000a38
 800457c:	40026070 	.word	0x40026070
 8004580:	40010400 	.word	0x40010400

08004584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2c      	ldr	r2, [pc, #176]	@ (8004644 <HAL_TIM_Base_MspInit+0xc0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d13e      	bne.n	8004614 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b2b      	ldr	r3, [pc, #172]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a2a      	ldr	r2, [pc, #168]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80045b2:	4b26      	ldr	r3, [pc, #152]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045b4:	4a26      	ldr	r2, [pc, #152]	@ (8004650 <HAL_TIM_Base_MspInit+0xcc>)
 80045b6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80045b8:	4b24      	ldr	r3, [pc, #144]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80045be:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045c0:	4b22      	ldr	r3, [pc, #136]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c6:	4b21      	ldr	r3, [pc, #132]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80045cc:	4b1f      	ldr	r3, [pc, #124]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045d2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045da:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045e2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80045e4:	4b19      	ldr	r3, [pc, #100]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80045ea:	4b18      	ldr	r3, [pc, #96]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045f0:	4b16      	ldr	r3, [pc, #88]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80045f6:	4815      	ldr	r0, [pc, #84]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 80045f8:	f001 fc32 	bl	8005e60 <HAL_DMA_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004602:	f7fe ff97 	bl	8003534 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a10      	ldr	r2, [pc, #64]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800460c:	4a0f      	ldr	r2, [pc, #60]	@ (800464c <HAL_TIM_Base_MspInit+0xc8>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004612:	e012      	b.n	800463a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <HAL_TIM_Base_MspInit+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10d      	bne.n	800463a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	4a08      	ldr	r2, [pc, #32]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 8004628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800462c:	6453      	str	r3, [r2, #68]	@ 0x44
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_TIM_Base_MspInit+0xc4>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40000800 	.word	0x40000800
 8004648:	40023800 	.word	0x40023800
 800464c:	20000978 	.word	0x20000978
 8004650:	400260b8 	.word	0x400260b8
 8004654:	40014400 	.word	0x40014400

08004658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	@ 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6a      	ldr	r2, [pc, #424]	@ (8004820 <HAL_TIM_MspPostInit+0x1c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d11f      	bne.n	80046ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	4b69      	ldr	r3, [pc, #420]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	4a68      	ldr	r2, [pc, #416]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004684:	f043 0310 	orr.w	r3, r3, #16
 8004688:	6313      	str	r3, [r2, #48]	@ 0x30
 800468a:	4b66      	ldr	r3, [pc, #408]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8004696:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b0:	4619      	mov	r1, r3
 80046b2:	485d      	ldr	r0, [pc, #372]	@ (8004828 <HAL_TIM_MspPostInit+0x1d0>)
 80046b4:	f001 ffd6 	bl	8006664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80046b8:	e0ae      	b.n	8004818 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a5b      	ldr	r2, [pc, #364]	@ (800482c <HAL_TIM_MspPostInit+0x1d4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d11f      	bne.n	8004704 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	4b56      	ldr	r3, [pc, #344]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	4a55      	ldr	r2, [pc, #340]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80046ce:	f043 0308 	orr.w	r3, r3, #8
 80046d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d4:	4b53      	ldr	r3, [pc, #332]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	2300      	movs	r3, #0
 80046f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046f2:	2302      	movs	r3, #2
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046fa:	4619      	mov	r1, r3
 80046fc:	484c      	ldr	r0, [pc, #304]	@ (8004830 <HAL_TIM_MspPostInit+0x1d8>)
 80046fe:	f001 ffb1 	bl	8006664 <HAL_GPIO_Init>
}
 8004702:	e089      	b.n	8004818 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4a      	ldr	r2, [pc, #296]	@ (8004834 <HAL_TIM_MspPostInit+0x1dc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d11f      	bne.n	800474e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	4b44      	ldr	r3, [pc, #272]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a43      	ldr	r2, [pc, #268]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30
 800471e:	4b41      	ldr	r3, [pc, #260]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800472a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004730:	2302      	movs	r3, #2
 8004732:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004738:	2300      	movs	r3, #0
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800473c:	2302      	movs	r3, #2
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004744:	4619      	mov	r1, r3
 8004746:	483c      	ldr	r0, [pc, #240]	@ (8004838 <HAL_TIM_MspPostInit+0x1e0>)
 8004748:	f001 ff8c 	bl	8006664 <HAL_GPIO_Init>
}
 800474c:	e064      	b.n	8004818 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3a      	ldr	r2, [pc, #232]	@ (800483c <HAL_TIM_MspPostInit+0x1e4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d13c      	bne.n	80047d2 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	4b31      	ldr	r3, [pc, #196]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004766:	6313      	str	r3, [r2, #48]	@ 0x30
 8004768:	4b2e      	ldr	r3, [pc, #184]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	4a29      	ldr	r2, [pc, #164]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 800477e:	f043 0304 	orr.w	r3, r3, #4
 8004782:	6313      	str	r3, [r2, #48]	@ 0x30
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004790:	23c0      	movs	r3, #192	@ 0xc0
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047a0:	2303      	movs	r3, #3
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047a8:	4619      	mov	r1, r3
 80047aa:	4825      	ldr	r0, [pc, #148]	@ (8004840 <HAL_TIM_MspPostInit+0x1e8>)
 80047ac:	f001 ff5a 	bl	8006664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047bc:	2300      	movs	r3, #0
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047c0:	2303      	movs	r3, #3
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c8:	4619      	mov	r1, r3
 80047ca:	481e      	ldr	r0, [pc, #120]	@ (8004844 <HAL_TIM_MspPostInit+0x1ec>)
 80047cc:	f001 ff4a 	bl	8006664 <HAL_GPIO_Init>
}
 80047d0:	e022      	b.n	8004818 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <HAL_TIM_MspPostInit+0x1f0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d11d      	bne.n	8004818 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80047e6:	f043 0320 	orr.w	r3, r3, #32
 80047ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <HAL_TIM_MspPostInit+0x1cc>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047f8:	2340      	movs	r3, #64	@ 0x40
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fc:	2302      	movs	r3, #2
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004800:	2301      	movs	r3, #1
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004804:	2302      	movs	r3, #2
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004808:	2303      	movs	r3, #3
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800480c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004810:	4619      	mov	r1, r3
 8004812:	480e      	ldr	r0, [pc, #56]	@ (800484c <HAL_TIM_MspPostInit+0x1f4>)
 8004814:	f001 ff26 	bl	8006664 <HAL_GPIO_Init>
}
 8004818:	bf00      	nop
 800481a:	3738      	adds	r7, #56	@ 0x38
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010000 	.word	0x40010000
 8004824:	40023800 	.word	0x40023800
 8004828:	40021000 	.word	0x40021000
 800482c:	40000800 	.word	0x40000800
 8004830:	40020c00 	.word	0x40020c00
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40021c00 	.word	0x40021c00
 800483c:	40010400 	.word	0x40010400
 8004840:	40022000 	.word	0x40022000
 8004844:	40020800 	.word	0x40020800
 8004848:	40014400 	.word	0x40014400
 800484c:	40021400 	.word	0x40021400

08004850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	@ 0x38
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a90      	ldr	r2, [pc, #576]	@ (8004ab0 <HAL_UART_MspInit+0x260>)
 800486e:	4293      	cmp	r3, r2
 8004870:	f040 80b2 	bne.w	80049d8 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	4b8e      	ldr	r3, [pc, #568]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	4a8d      	ldr	r2, [pc, #564]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 800487e:	f043 0310 	orr.w	r3, r3, #16
 8004882:	6453      	str	r3, [r2, #68]	@ 0x44
 8004884:	4b8b      	ldr	r3, [pc, #556]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 8004886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	4b87      	ldr	r3, [pc, #540]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	4a86      	ldr	r2, [pc, #536]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a0:	4b84      	ldr	r3, [pc, #528]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	4b80      	ldr	r3, [pc, #512]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80048bc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048cc:	2302      	movs	r3, #2
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d4:	2303      	movs	r3, #3
 80048d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048d8:	2307      	movs	r3, #7
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048e0:	4619      	mov	r1, r3
 80048e2:	4875      	ldr	r0, [pc, #468]	@ (8004ab8 <HAL_UART_MspInit+0x268>)
 80048e4:	f001 febe 	bl	8006664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048fa:	2307      	movs	r3, #7
 80048fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004902:	4619      	mov	r1, r3
 8004904:	486d      	ldr	r0, [pc, #436]	@ (8004abc <HAL_UART_MspInit+0x26c>)
 8004906:	f001 fead 	bl	8006664 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800490a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 800490c:	4a6d      	ldr	r2, [pc, #436]	@ (8004ac4 <HAL_UART_MspInit+0x274>)
 800490e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004910:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004912:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004916:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004918:	4b69      	ldr	r3, [pc, #420]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 800491a:	2240      	movs	r2, #64	@ 0x40
 800491c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800491e:	4b68      	ldr	r3, [pc, #416]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004920:	2200      	movs	r2, #0
 8004922:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004924:	4b66      	ldr	r3, [pc, #408]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800492a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800492c:	4b64      	ldr	r3, [pc, #400]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 800492e:	2200      	movs	r2, #0
 8004930:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004932:	4b63      	ldr	r3, [pc, #396]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004938:	4b61      	ldr	r3, [pc, #388]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800493e:	4b60      	ldr	r3, [pc, #384]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004940:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004944:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004946:	4b5e      	ldr	r3, [pc, #376]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004948:	2200      	movs	r2, #0
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800494c:	485c      	ldr	r0, [pc, #368]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 800494e:	f001 fa87 	bl	8005e60 <HAL_DMA_Init>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004958:	f7fe fdec 	bl	8003534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a58      	ldr	r2, [pc, #352]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
 8004962:	4a57      	ldr	r2, [pc, #348]	@ (8004ac0 <HAL_UART_MspInit+0x270>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004968:	4b57      	ldr	r3, [pc, #348]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 800496a:	4a58      	ldr	r2, [pc, #352]	@ (8004acc <HAL_UART_MspInit+0x27c>)
 800496c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800496e:	4b56      	ldr	r3, [pc, #344]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 8004970:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004974:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004976:	4b54      	ldr	r3, [pc, #336]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800497c:	4b52      	ldr	r3, [pc, #328]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004982:	4b51      	ldr	r3, [pc, #324]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 8004984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004988:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800498a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 800498c:	2200      	movs	r2, #0
 800498e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004990:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004996:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 8004998:	2200      	movs	r2, #0
 800499a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800499c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 800499e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80049a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049a4:	4b48      	ldr	r3, [pc, #288]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049aa:	4847      	ldr	r0, [pc, #284]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 80049ac:	f001 fa58 	bl	8005e60 <HAL_DMA_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80049b6:	f7fe fdbd 	bl	8003534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a42      	ldr	r2, [pc, #264]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 80049be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049c0:	4a41      	ldr	r2, [pc, #260]	@ (8004ac8 <HAL_UART_MspInit+0x278>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2105      	movs	r1, #5
 80049ca:	2025      	movs	r0, #37	@ 0x25
 80049cc:	f001 fa11 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049d0:	2025      	movs	r0, #37	@ 0x25
 80049d2:	f001 fa2a 	bl	8005e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80049d6:	e11c      	b.n	8004c12 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad0 <HAL_UART_MspInit+0x280>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d17e      	bne.n	8004ae0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0e:	4b29      	ldr	r3, [pc, #164]	@ (8004ab4 <HAL_UART_MspInit+0x264>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004a1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a2c:	2307      	movs	r3, #7
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a34:	4619      	mov	r1, r3
 8004a36:	4827      	ldr	r0, [pc, #156]	@ (8004ad4 <HAL_UART_MspInit+0x284>)
 8004a38:	f001 fe14 	bl	8006664 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004a3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a3e:	4a27      	ldr	r2, [pc, #156]	@ (8004adc <HAL_UART_MspInit+0x28c>)
 8004a40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004a42:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a48:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a4a:	4b23      	ldr	r3, [pc, #140]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a56:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a70:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a72:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a78:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004a80:	4815      	ldr	r0, [pc, #84]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a82:	f001 f9ed 	bl	8005e60 <HAL_DMA_Init>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004a8c:	f7fe fd52 	bl	8003534 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a11      	ldr	r2, [pc, #68]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a96:	4a10      	ldr	r2, [pc, #64]	@ (8004ad8 <HAL_UART_MspInit+0x288>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	2027      	movs	r0, #39	@ 0x27
 8004aa2:	f001 f9a6 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004aa6:	2027      	movs	r0, #39	@ 0x27
 8004aa8:	f001 f9bf 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8004aac:	e0b1      	b.n	8004c12 <HAL_UART_MspInit+0x3c2>
 8004aae:	bf00      	nop
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020400 	.word	0x40020400
 8004abc:	40020000 	.word	0x40020000
 8004ac0:	20000b70 	.word	0x20000b70
 8004ac4:	400264b8 	.word	0x400264b8
 8004ac8:	20000bd0 	.word	0x20000bd0
 8004acc:	40026440 	.word	0x40026440
 8004ad0:	40004800 	.word	0x40004800
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	20000c30 	.word	0x20000c30
 8004adc:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8004c1c <HAL_UART_MspInit+0x3cc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	f040 8093 	bne.w	8004c12 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	4b4b      	ldr	r3, [pc, #300]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af4:	4a4a      	ldr	r2, [pc, #296]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	6453      	str	r3, [r2, #68]	@ 0x44
 8004afc:	4b48      	ldr	r3, [pc, #288]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	4b44      	ldr	r3, [pc, #272]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b10:	4a43      	ldr	r2, [pc, #268]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b18:	4b41      	ldr	r3, [pc, #260]	@ (8004c20 <HAL_UART_MspInit+0x3d0>)
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004b24:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b32:	2303      	movs	r3, #3
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b36:	2308      	movs	r3, #8
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4838      	ldr	r0, [pc, #224]	@ (8004c24 <HAL_UART_MspInit+0x3d4>)
 8004b42:	f001 fd8f 	bl	8006664 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004b46:	4b38      	ldr	r3, [pc, #224]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b48:	4a38      	ldr	r2, [pc, #224]	@ (8004c2c <HAL_UART_MspInit+0x3dc>)
 8004b4a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b4e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004b52:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b54:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b5a:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b60:	4b31      	ldr	r3, [pc, #196]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b66:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b68:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004b74:	4b2c      	ldr	r3, [pc, #176]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b80:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b82:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004b88:	4827      	ldr	r0, [pc, #156]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b8a:	f001 f969 	bl	8005e60 <HAL_DMA_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004b94:	f7fe fcce 	bl	8003534 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a23      	ldr	r2, [pc, #140]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b9e:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_UART_MspInit+0x3d8>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004ba4:	4b22      	ldr	r3, [pc, #136]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004ba6:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <HAL_UART_MspInit+0x3e4>)
 8004ba8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004baa:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004bb0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bb4:	2240      	movs	r2, #64	@ 0x40
 8004bb6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bc4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bcc:	4b18      	ldr	r3, [pc, #96]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004bd2:	4b17      	ldr	r3, [pc, #92]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004bde:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004be0:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004be6:	4812      	ldr	r0, [pc, #72]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004be8:	f001 f93a 	bl	8005e60 <HAL_DMA_Init>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004bf2:	f7fe fc9f 	bl	8003534 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <HAL_UART_MspInit+0x3e0>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	2105      	movs	r1, #5
 8004c06:	2047      	movs	r0, #71	@ 0x47
 8004c08:	f001 f8f3 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c0c:	2047      	movs	r0, #71	@ 0x47
 8004c0e:	f001 f90c 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8004c12:	bf00      	nop
 8004c14:	3738      	adds	r7, #56	@ 0x38
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40011400 	.word	0x40011400
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40021800 	.word	0x40021800
 8004c28:	20000c90 	.word	0x20000c90
 8004c2c:	40026428 	.word	0x40026428
 8004c30:	20000cf0 	.word	0x20000cf0
 8004c34:	400264a0 	.word	0x400264a0

08004c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004c3c:	f003 f990 	bl	8007f60 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <NMI_Handler+0x8>

08004c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <HardFault_Handler+0x4>

08004c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <MemManage_Handler+0x4>

08004c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <BusFault_Handler+0x4>

08004c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <UsageFault_Handler+0x4>

08004c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c76:	f000 f959 	bl	8004f2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004c7a:	f007 fcc5 	bl	800c608 <xTaskGetSchedulerState>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004c84:	f008 fba0 	bl	800d3c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004c90:	2008      	movs	r0, #8
 8004c92:	f001 fe9d 	bl	80069d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004c96:	4802      	ldr	r0, [pc, #8]	@ (8004ca0 <EXTI3_IRQHandler+0x14>)
 8004c98:	f7fd fd4c 	bl	8002734 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000708 	.word	0x20000708

08004ca4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004ca8:	2010      	movs	r0, #16
 8004caa:	f001 fe91 	bl	80069d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004cb8:	4802      	ldr	r0, [pc, #8]	@ (8004cc4 <DMA1_Stream1_IRQHandler+0x10>)
 8004cba:	f001 fa69 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000c30 	.word	0x20000c30

08004cc8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8004ccc:	4802      	ldr	r0, [pc, #8]	@ (8004cd8 <DMA1_Stream2_IRQHandler+0x10>)
 8004cce:	f001 fa5f 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200009d8 	.word	0x200009d8

08004cdc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004ce0:	4802      	ldr	r0, [pc, #8]	@ (8004cec <DMA1_Stream4_IRQHandler+0x10>)
 8004ce2:	f001 fa55 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000a38 	.word	0x20000a38

08004cf0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004cf4:	4802      	ldr	r0, [pc, #8]	@ (8004d00 <CAN1_RX0_IRQHandler+0x10>)
 8004cf6:	f000 fd71 	bl	80057dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000714 	.word	0x20000714

08004d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d08:	4802      	ldr	r0, [pc, #8]	@ (8004d14 <USART1_IRQHandler+0x10>)
 8004d0a:	f004 fd2b 	bl	8009764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000a98 	.word	0x20000a98

08004d18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004d1c:	4802      	ldr	r0, [pc, #8]	@ (8004d28 <DMA1_Stream7_IRQHandler+0x10>)
 8004d1e:	f001 fa37 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000978 	.word	0x20000978

08004d2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004d30:	4802      	ldr	r0, [pc, #8]	@ (8004d3c <DMA2_Stream1_IRQHandler+0x10>)
 8004d32:	f001 fa2d 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000c90 	.word	0x20000c90

08004d40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004d44:	4802      	ldr	r0, [pc, #8]	@ (8004d50 <DMA2_Stream2_IRQHandler+0x10>)
 8004d46:	f001 fa23 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000bd0 	.word	0x20000bd0

08004d54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004d58:	4802      	ldr	r0, [pc, #8]	@ (8004d64 <CAN2_RX0_IRQHandler+0x10>)
 8004d5a:	f000 fd3f 	bl	80057dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	2000073c 	.word	0x2000073c

08004d68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004d6c:	4802      	ldr	r0, [pc, #8]	@ (8004d78 <DMA2_Stream6_IRQHandler+0x10>)
 8004d6e:	f001 fa0f 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000cf0 	.word	0x20000cf0

08004d7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <DMA2_Stream7_IRQHandler+0x10>)
 8004d82:	f001 fa05 	bl	8006190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000b70 	.word	0x20000b70

08004d90 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004d94:	4802      	ldr	r0, [pc, #8]	@ (8004da0 <USART6_IRQHandler+0x10>)
 8004d96:	f004 fce5 	bl	8009764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000b28 	.word	0x20000b28

08004da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <_sbrk+0x5c>)
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <_sbrk+0x60>)
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <_sbrk+0x64>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <_sbrk+0x64>)
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <_sbrk+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <_sbrk+0x64>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d207      	bcs.n	8004de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dd4:	f008 fda0 	bl	800d918 <__errno>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	220c      	movs	r2, #12
 8004ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004de2:	e009      	b.n	8004df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004de4:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <_sbrk+0x64>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <_sbrk+0x64>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	4a05      	ldr	r2, [pc, #20]	@ (8004e08 <_sbrk+0x64>)
 8004df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20020000 	.word	0x20020000
 8004e04:	00000400 	.word	0x00000400
 8004e08:	20000de8 	.word	0x20000de8
 8004e0c:	20005920 	.word	0x20005920

08004e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <SystemInit+0x20>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	4a05      	ldr	r2, [pc, #20]	@ (8004e30 <SystemInit+0x20>)
 8004e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e38:	f7ff ffea 	bl	8004e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e3c:	480c      	ldr	r0, [pc, #48]	@ (8004e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e3e:	490d      	ldr	r1, [pc, #52]	@ (8004e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e40:	4a0d      	ldr	r2, [pc, #52]	@ (8004e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e44:	e002      	b.n	8004e4c <LoopCopyDataInit>

08004e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e4a:	3304      	adds	r3, #4

08004e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e50:	d3f9      	bcc.n	8004e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e52:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e54:	4c0a      	ldr	r4, [pc, #40]	@ (8004e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e58:	e001      	b.n	8004e5e <LoopFillZerobss>

08004e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e5c:	3204      	adds	r2, #4

08004e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e60:	d3fb      	bcc.n	8004e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e62:	f008 fd5f 	bl	800d924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e66:	f7fd fcd5 	bl	8002814 <main>
  bx  lr    
 8004e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e74:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004e78:	0800e66c 	.word	0x0800e66c
  ldr r2, =_sbss
 8004e7c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004e80:	20005920 	.word	0x20005920

08004e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e84:	e7fe      	b.n	8004e84 <ADC_IRQHandler>
	...

08004e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <HAL_Init+0x40>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec8 <HAL_Init+0x40>)
 8004e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_Init+0x40>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <HAL_Init+0x40>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <HAL_Init+0x40>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <HAL_Init+0x40>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	f000 ff93 	bl	8005ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eb6:	200f      	movs	r0, #15
 8004eb8:	f000 f808 	bl	8004ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ebc:	f7ff f900 	bl	80040c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ed4:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <HAL_InitTick+0x54>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <HAL_InitTick+0x58>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	4619      	mov	r1, r3
 8004ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 ffab 	bl	8005e46 <HAL_SYSTICK_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00e      	b.n	8004f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d80a      	bhi.n	8004f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f00:	2200      	movs	r2, #0
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f08:	f000 ff73 	bl	8005df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f0c:	4a06      	ldr	r2, [pc, #24]	@ (8004f28 <HAL_InitTick+0x5c>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000038 	.word	0x20000038
 8004f24:	20000040 	.word	0x20000040
 8004f28:	2000003c 	.word	0x2000003c

08004f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <HAL_IncTick+0x20>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <HAL_IncTick+0x24>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	4a04      	ldr	r2, [pc, #16]	@ (8004f50 <HAL_IncTick+0x24>)
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000040 	.word	0x20000040
 8004f50:	20000dec 	.word	0x20000dec

08004f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return uwTick;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_GetTick+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000dec 	.word	0x20000dec

08004f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0ed      	b.n	800515a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff f8c4 	bl	8004118 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa0:	f7ff ffd8 	bl	8004f54 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fa6:	e012      	b.n	8004fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fa8:	f7ff ffd4 	bl	8004f54 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b0a      	cmp	r3, #10
 8004fb4:	d90b      	bls.n	8004fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0c5      	b.n	800515a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0e5      	beq.n	8004fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0202 	bic.w	r2, r2, #2
 8004fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fec:	f7ff ffb2 	bl	8004f54 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ff2:	e012      	b.n	800501a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ff4:	f7ff ffae 	bl	8004f54 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b0a      	cmp	r3, #10
 8005000:	d90b      	bls.n	800501a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2205      	movs	r2, #5
 8005012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e09f      	b.n	800515a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7e1b      	ldrb	r3, [r3, #24]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e007      	b.n	8005052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7e5b      	ldrb	r3, [r3, #25]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d108      	bne.n	800506c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e007      	b.n	800507c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	7e9b      	ldrb	r3, [r3, #26]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d108      	bne.n	8005096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0220 	orr.w	r2, r2, #32
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e007      	b.n	80050a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0220 	bic.w	r2, r2, #32
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7edb      	ldrb	r3, [r3, #27]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d108      	bne.n	80050c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0210 	bic.w	r2, r2, #16
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e007      	b.n	80050d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0210 	orr.w	r2, r2, #16
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	7f1b      	ldrb	r3, [r3, #28]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d108      	bne.n	80050ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e007      	b.n	80050fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0208 	bic.w	r2, r2, #8
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7f5b      	ldrb	r3, [r3, #29]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d108      	bne.n	8005114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0204 	orr.w	r2, r2, #4
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e007      	b.n	8005124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	ea42 0103 	orr.w	r1, r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d003      	beq.n	800518a <HAL_CAN_ConfigFilter+0x26>
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	2b02      	cmp	r3, #2
 8005186:	f040 80be 	bne.w	8005306 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800518a:	4b65      	ldr	r3, [pc, #404]	@ (8005320 <HAL_CAN_ConfigFilter+0x1bc>)
 800518c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80051a4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d123      	bne.n	8005234 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800520e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3248      	adds	r2, #72	@ 0x48
 8005214:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005228:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	3348      	adds	r3, #72	@ 0x48
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	440b      	add	r3, r1
 8005232:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d122      	bne.n	8005282 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	431a      	orrs	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800525c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3248      	adds	r2, #72	@ 0x48
 8005262:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005276:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	3348      	adds	r3, #72	@ 0x48
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	401a      	ands	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800529c:	e007      	b.n	80052ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	401a      	ands	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80052c8:	e007      	b.n	80052da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d107      	bne.n	80052f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052f8:	f023 0201 	bic.w	r2, r3, #1
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e006      	b.n	8005314 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40006400 	.word	0x40006400

08005324 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d12e      	bne.n	8005396 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005350:	f7ff fe00 	bl	8004f54 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005356:	e012      	b.n	800537e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005358:	f7ff fdfc 	bl	8004f54 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b0a      	cmp	r3, #10
 8005364:	d90b      	bls.n	800537e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2205      	movs	r2, #5
 8005376:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e012      	b.n	80053a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e006      	b.n	80053a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
  }
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b089      	sub	sp, #36	@ 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d003      	beq.n	80053d8 <HAL_CAN_AddTxMessage+0x2c>
 80053d0:	7ffb      	ldrb	r3, [r7, #31]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	f040 80ad 	bne.w	8005532 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8095 	beq.w	8005522 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	0e1b      	lsrs	r3, r3, #24
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005402:	2201      	movs	r2, #1
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	409a      	lsls	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10d      	bne.n	8005430 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6809      	ldr	r1, [r1, #0]
 8005422:	431a      	orrs	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3318      	adds	r3, #24
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	440b      	add	r3, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e00f      	b.n	8005450 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800543a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005444:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	3318      	adds	r3, #24
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	440b      	add	r3, r1
 800544e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3318      	adds	r3, #24
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	440b      	add	r3, r1
 8005460:	3304      	adds	r3, #4
 8005462:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d111      	bne.n	8005490 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3318      	adds	r3, #24
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4413      	add	r3, r2
 8005478:	3304      	adds	r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6811      	ldr	r1, [r2, #0]
 8005480:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3318      	adds	r3, #24
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	440b      	add	r3, r1
 800548c:	3304      	adds	r3, #4
 800548e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3307      	adds	r3, #7
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	061a      	lsls	r2, r3, #24
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3306      	adds	r3, #6
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3305      	adds	r3, #5
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	4313      	orrs	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	3204      	adds	r2, #4
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	4610      	mov	r0, r2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6811      	ldr	r1, [r2, #0]
 80054b8:	ea43 0200 	orr.w	r2, r3, r0
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	440b      	add	r3, r1
 80054c2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80054c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3303      	adds	r3, #3
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	061a      	lsls	r2, r3, #24
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3302      	adds	r3, #2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3301      	adds	r3, #1
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	4313      	orrs	r3, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	4610      	mov	r0, r2
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	6811      	ldr	r1, [r2, #0]
 80054ee:	ea43 0200 	orr.w	r2, r3, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	440b      	add	r3, r1
 80054f8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80054fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	3318      	adds	r3, #24
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6811      	ldr	r1, [r2, #0]
 8005510:	f043 0201 	orr.w	r2, r3, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3318      	adds	r3, #24
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	440b      	add	r3, r1
 800551c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e00e      	b.n	8005540 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e006      	b.n	8005540 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3724      	adds	r7, #36	@ 0x24
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005560:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d003      	beq.n	8005570 <HAL_CAN_GetRxMessage+0x24>
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b02      	cmp	r3, #2
 800556c:	f040 8103 	bne.w	8005776 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10e      	bne.n	8005594 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0f7      	b.n	8005784 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e0e8      	b.n	8005784 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	331b      	adds	r3, #27
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	4413      	add	r3, r2
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0204 	and.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10c      	bne.n	80055ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	331b      	adds	r3, #27
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	4413      	add	r3, r2
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	0d5b      	lsrs	r3, r3, #21
 80055e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e00b      	b.n	8005602 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	331b      	adds	r3, #27
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	331b      	adds	r3, #27
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	4413      	add	r3, r2
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0202 	and.w	r2, r3, #2
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	331b      	adds	r3, #27
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4413      	add	r3, r2
 8005624:	3304      	adds	r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2208      	movs	r2, #8
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	e00b      	b.n	8005650 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	331b      	adds	r3, #27
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4413      	add	r3, r2
 8005644:	3304      	adds	r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	331b      	adds	r3, #27
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4413      	add	r3, r2
 800565c:	3304      	adds	r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	331b      	adds	r3, #27
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	b29a      	uxth	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	4413      	add	r3, r2
 800568a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4413      	add	r3, r2
 80056a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	0a1a      	lsrs	r2, r3, #8
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0c1a      	lsrs	r2, r3, #16
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3302      	adds	r3, #2
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	0e1a      	lsrs	r2, r3, #24
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	3303      	adds	r3, #3
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	3304      	adds	r3, #4
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	0a1a      	lsrs	r2, r3, #8
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	3305      	adds	r3, #5
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	4413      	add	r3, r2
 8005720:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	0c1a      	lsrs	r2, r3, #16
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	3306      	adds	r3, #6
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	4413      	add	r3, r2
 800573a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0e1a      	lsrs	r2, r3, #24
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	3307      	adds	r3, #7
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0220 	orr.w	r2, r2, #32
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	e007      	b.n	8005772 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0220 	orr.w	r2, r2, #32
 8005770:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e006      	b.n	8005784 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d002      	beq.n	80057ae <HAL_CAN_ActivateNotification+0x1e>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d109      	bne.n	80057c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6959      	ldr	r1, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e006      	b.n	80057d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d07c      	beq.n	800591c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d023      	beq.n	8005874 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f983 	bl	8005b4a <HAL_CAN_TxMailbox0CompleteCallback>
 8005844:	e016      	b.n	8005874 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
 8005858:	e00c      	b.n	8005874 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
 800586c:	e002      	b.n	8005874 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f989 	bl	8005b86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d024      	beq.n	80058c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005886:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f963 	bl	8005b5e <HAL_CAN_TxMailbox1CompleteCallback>
 8005898:	e016      	b.n	80058c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ac:	e00c      	b.n	80058c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c0:	e002      	b.n	80058c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f969 	bl	8005b9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d024      	beq.n	800591c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80058da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f943 	bl	8005b72 <HAL_CAN_TxMailbox2CompleteCallback>
 80058ec:	e016      	b.n	800591c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005900:	e00c      	b.n	800591c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
 8005914:	e002      	b.n	800591c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f949 	bl	8005bae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2210      	movs	r2, #16
 800593e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d006      	beq.n	8005962 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2208      	movs	r2, #8
 800595a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f930 	bl	8005bc2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fbd6 	bl	800112c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d006      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f912 	bl	8005bea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8f9 	bl	8005bd6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2210      	movs	r2, #16
 80059fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8fc 	bl	8005bfe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d006      	beq.n	8005a28 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2208      	movs	r2, #8
 8005a20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8f5 	bl	8005c12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d07b      	beq.n	8005b2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d072      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d043      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d03e      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aaa:	2b60      	cmp	r3, #96	@ 0x60
 8005aac:	d02b      	beq.n	8005b06 <HAL_CAN_IRQHandler+0x32a>
 8005aae:	2b60      	cmp	r3, #96	@ 0x60
 8005ab0:	d82e      	bhi.n	8005b10 <HAL_CAN_IRQHandler+0x334>
 8005ab2:	2b50      	cmp	r3, #80	@ 0x50
 8005ab4:	d022      	beq.n	8005afc <HAL_CAN_IRQHandler+0x320>
 8005ab6:	2b50      	cmp	r3, #80	@ 0x50
 8005ab8:	d82a      	bhi.n	8005b10 <HAL_CAN_IRQHandler+0x334>
 8005aba:	2b40      	cmp	r3, #64	@ 0x40
 8005abc:	d019      	beq.n	8005af2 <HAL_CAN_IRQHandler+0x316>
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d826      	bhi.n	8005b10 <HAL_CAN_IRQHandler+0x334>
 8005ac2:	2b30      	cmp	r3, #48	@ 0x30
 8005ac4:	d010      	beq.n	8005ae8 <HAL_CAN_IRQHandler+0x30c>
 8005ac6:	2b30      	cmp	r3, #48	@ 0x30
 8005ac8:	d822      	bhi.n	8005b10 <HAL_CAN_IRQHandler+0x334>
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d002      	beq.n	8005ad4 <HAL_CAN_IRQHandler+0x2f8>
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d005      	beq.n	8005ade <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ad2:	e01d      	b.n	8005b10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	f043 0308 	orr.w	r3, r3, #8
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005adc:	e019      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	f043 0310 	orr.w	r3, r3, #16
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ae6:	e014      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	f043 0320 	orr.w	r3, r3, #32
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005af0:	e00f      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005afa:	e00a      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b04:	e005      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b0e:	e000      	b.n	8005b12 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2204      	movs	r2, #4
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f872 	bl	8005c26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b42:	bf00      	nop
 8005b44:	3728      	adds	r7, #40	@ 0x28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	@ (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60d3      	str	r3, [r2, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c88:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <__NVIC_GetPriorityGrouping+0x18>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 0307 	and.w	r3, r3, #7
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	db0b      	blt.n	8005cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f003 021f 	and.w	r2, r3, #31
 8005cb8:	4907      	ldr	r1, [pc, #28]	@ (8005cd8 <__NVIC_EnableIRQ+0x38>)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e100 	.word	0xe000e100

08005cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db0a      	blt.n	8005d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	490c      	ldr	r1, [pc, #48]	@ (8005d28 <__NVIC_SetPriority+0x4c>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d04:	e00a      	b.n	8005d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4908      	ldr	r1, [pc, #32]	@ (8005d2c <__NVIC_SetPriority+0x50>)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	3b04      	subs	r3, #4
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	761a      	strb	r2, [r3, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000e100 	.word	0xe000e100
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	@ 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f1c3 0307 	rsb	r3, r3, #7
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf28      	it	cs
 8005d4e:	2304      	movcs	r3, #4
 8005d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d902      	bls.n	8005d60 <NVIC_EncodePriority+0x30>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3b03      	subs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <NVIC_EncodePriority+0x32>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	401a      	ands	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43d9      	mvns	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	4313      	orrs	r3, r2
         );
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	@ 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da8:	d301      	bcc.n	8005dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005daa:	2301      	movs	r3, #1
 8005dac:	e00f      	b.n	8005dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dae:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd8 <SysTick_Config+0x40>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005db6:	210f      	movs	r1, #15
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dbc:	f7ff ff8e 	bl	8005cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <SysTick_Config+0x40>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dc6:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <SysTick_Config+0x40>)
 8005dc8:	2207      	movs	r2, #7
 8005dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000e010 	.word	0xe000e010

08005ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff29 	bl	8005c3c <__NVIC_SetPriorityGrouping>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e04:	f7ff ff3e 	bl	8005c84 <__NVIC_GetPriorityGrouping>
 8005e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f7ff ff8e 	bl	8005d30 <NVIC_EncodePriority>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff5d 	bl	8005cdc <__NVIC_SetPriority>
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	4603      	mov	r3, r0
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ff31 	bl	8005ca0 <__NVIC_EnableIRQ>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ffa2 	bl	8005d98 <SysTick_Config>
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e6c:	f7ff f872 	bl	8004f54 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e099      	b.n	8005fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e9c:	e00f      	b.n	8005ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e9e:	f7ff f859 	bl	8004f54 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d908      	bls.n	8005ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e078      	b.n	8005fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e8      	bne.n	8005e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4b38      	ldr	r3, [pc, #224]	@ (8005fb8 <HAL_DMA_Init+0x158>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d107      	bne.n	8005f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	4313      	orrs	r3, r2
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d117      	bne.n	8005f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fb01 	bl	800656c <DMA_CheckFifoParam>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2240      	movs	r2, #64	@ 0x40
 8005f74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e016      	b.n	8005fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fab8 	bl	8006500 <DMA_CalcBaseAndBitshift>
 8005f90:	4603      	mov	r3, r0
 8005f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f98:	223f      	movs	r2, #63	@ 0x3f
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	f010803f 	.word	0xf010803f

08005fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_DMA_Start_IT+0x26>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e040      	b.n	8006064 <HAL_DMA_Start_IT+0xa8>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d12f      	bne.n	8006056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fa4a 	bl	80064a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006014:	223f      	movs	r2, #63	@ 0x3f
 8006016:	409a      	lsls	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0216 	orr.w	r2, r2, #22
 800602a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0208 	orr.w	r2, r2, #8
 8006042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e005      	b.n	8006062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800605e:	2302      	movs	r3, #2
 8006060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800607a:	f7fe ff6b 	bl	8004f54 <HAL_GetTick>
 800607e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d008      	beq.n	800609e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2280      	movs	r2, #128	@ 0x80
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e052      	b.n	8006144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0216 	bic.w	r2, r2, #22
 80060ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <HAL_DMA_Abort+0x62>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0208 	bic.w	r2, r2, #8
 80060dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ee:	e013      	b.n	8006118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060f0:	f7fe ff30 	bl	8004f54 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d90c      	bls.n	8006118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2203      	movs	r2, #3
 8006108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e015      	b.n	8006144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e4      	bne.n	80060f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612a:	223f      	movs	r2, #63	@ 0x3f
 800612c:	409a      	lsls	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d004      	beq.n	800616a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2280      	movs	r2, #128	@ 0x80
 8006164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e00c      	b.n	8006184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2205      	movs	r2, #5
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800619c:	4b8e      	ldr	r3, [pc, #568]	@ (80063d8 <HAL_DMA_IRQHandler+0x248>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a8e      	ldr	r2, [pc, #568]	@ (80063dc <HAL_DMA_IRQHandler+0x24c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0a9b      	lsrs	r3, r3, #10
 80061a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ba:	2208      	movs	r2, #8
 80061bc:	409a      	lsls	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01a      	beq.n	80061fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	2208      	movs	r2, #8
 80061ea:	409a      	lsls	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f4:	f043 0201 	orr.w	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006200:	2201      	movs	r2, #1
 8006202:	409a      	lsls	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d012      	beq.n	8006232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621e:	2201      	movs	r2, #1
 8006220:	409a      	lsls	r2, r3
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622a:	f043 0202 	orr.w	r2, r3, #2
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006236:	2204      	movs	r2, #4
 8006238:	409a      	lsls	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d012      	beq.n	8006268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006254:	2204      	movs	r2, #4
 8006256:	409a      	lsls	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006260:	f043 0204 	orr.w	r2, r3, #4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626c:	2210      	movs	r2, #16
 800626e:	409a      	lsls	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d043      	beq.n	8006300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d03c      	beq.n	8006300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628a:	2210      	movs	r2, #16
 800628c:	409a      	lsls	r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d018      	beq.n	80062d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d024      	beq.n	8006300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	e01f      	b.n	8006300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
 80062d0:	e016      	b.n	8006300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0208 	bic.w	r2, r2, #8
 80062ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	2220      	movs	r2, #32
 8006306:	409a      	lsls	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 808f 	beq.w	8006430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8087 	beq.w	8006430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006326:	2220      	movs	r2, #32
 8006328:	409a      	lsls	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b05      	cmp	r3, #5
 8006338:	d136      	bne.n	80063a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0216 	bic.w	r2, r2, #22
 8006348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <HAL_DMA_IRQHandler+0x1da>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0208 	bic.w	r2, r2, #8
 8006378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637e:	223f      	movs	r2, #63	@ 0x3f
 8006380:	409a      	lsls	r2, r3
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639a:	2b00      	cmp	r3, #0
 800639c:	d07e      	beq.n	800649c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
        }
        return;
 80063a6:	e079      	b.n	800649c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01d      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10d      	bne.n	80063e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d031      	beq.n	8006430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	e02c      	b.n	8006430 <HAL_DMA_IRQHandler+0x2a0>
 80063d6:	bf00      	nop
 80063d8:	20000038 	.word	0x20000038
 80063dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d023      	beq.n	8006430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	4798      	blx	r3
 80063f0:	e01e      	b.n	8006430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10f      	bne.n	8006420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0210 	bic.w	r2, r2, #16
 800640e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006434:	2b00      	cmp	r3, #0
 8006436:	d032      	beq.n	800649e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d022      	beq.n	800648a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3301      	adds	r3, #1
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	429a      	cmp	r2, r3
 8006466:	d307      	bcc.n	8006478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f2      	bne.n	800645c <HAL_DMA_IRQHandler+0x2cc>
 8006476:	e000      	b.n	800647a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
 800649a:	e000      	b.n	800649e <HAL_DMA_IRQHandler+0x30e>
        return;
 800649c:	bf00      	nop
    }
  }
}
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b40      	cmp	r3, #64	@ 0x40
 80064d0:	d108      	bne.n	80064e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80064e2:	e007      	b.n	80064f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]
}
 80064f4:	bf00      	nop
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	3b10      	subs	r3, #16
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <DMA_CalcBaseAndBitshift+0x64>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800651a:	4a13      	ldr	r2, [pc, #76]	@ (8006568 <DMA_CalcBaseAndBitshift+0x68>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b03      	cmp	r3, #3
 800652c:	d909      	bls.n	8006542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006540:	e007      	b.n	8006552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	aaaaaaab 	.word	0xaaaaaaab
 8006568:	0800e600 	.word	0x0800e600

0800656c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11f      	bne.n	80065c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d856      	bhi.n	800663a <DMA_CheckFifoParam+0xce>
 800658c:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <DMA_CheckFifoParam+0x28>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b7 	.word	0x080065b7
 800659c:	080065a5 	.word	0x080065a5
 80065a0:	0800663b 	.word	0x0800663b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d046      	beq.n	800663e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b4:	e043      	b.n	800663e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065be:	d140      	bne.n	8006642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c4:	e03d      	b.n	8006642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ce:	d121      	bne.n	8006614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d837      	bhi.n	8006646 <DMA_CheckFifoParam+0xda>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <DMA_CheckFifoParam+0x70>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065f3 	.word	0x080065f3
 80065e4:	080065ed 	.word	0x080065ed
 80065e8:	08006605 	.word	0x08006605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
      break;
 80065f0:	e030      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d025      	beq.n	800664a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006602:	e022      	b.n	800664a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800660c:	d11f      	bne.n	800664e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006612:	e01c      	b.n	800664e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d903      	bls.n	8006622 <DMA_CheckFifoParam+0xb6>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d003      	beq.n	8006628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006620:	e018      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
      break;
 8006626:	e015      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e00b      	b.n	8006652 <DMA_CheckFifoParam+0xe6>
      break;
 800663a:	bf00      	nop
 800663c:	e00a      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;
 800663e:	bf00      	nop
 8006640:	e008      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;
 8006642:	bf00      	nop
 8006644:	e006      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;
 8006646:	bf00      	nop
 8006648:	e004      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;   
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <DMA_CheckFifoParam+0xe8>
      break;
 8006652:	bf00      	nop
    }
  } 
  
  return status; 
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop

08006664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006664:	b480      	push	{r7}
 8006666:	b089      	sub	sp, #36	@ 0x24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
 800667e:	e16b      	b.n	8006958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006680:	2201      	movs	r2, #1
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	429a      	cmp	r2, r3
 800669a:	f040 815a 	bne.w	8006952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d005      	beq.n	80066b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d130      	bne.n	8006718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	2203      	movs	r2, #3
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4313      	orrs	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066ec:	2201      	movs	r2, #1
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4013      	ands	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 0201 	and.w	r2, r3, #1
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d017      	beq.n	8006754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4313      	orrs	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d123      	bne.n	80067a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	220f      	movs	r2, #15
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4013      	ands	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4313      	orrs	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	08da      	lsrs	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3208      	adds	r2, #8
 80067a2:	69b9      	ldr	r1, [r7, #24]
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0203 	and.w	r2, r3, #3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80b4 	beq.w	8006952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	4b60      	ldr	r3, [pc, #384]	@ (8006970 <HAL_GPIO_Init+0x30c>)
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006970 <HAL_GPIO_Init+0x30c>)
 80067f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80067fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006970 <HAL_GPIO_Init+0x30c>)
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006806:	4a5b      	ldr	r2, [pc, #364]	@ (8006974 <HAL_GPIO_Init+0x310>)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	3302      	adds	r3, #2
 800680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	220f      	movs	r2, #15
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4013      	ands	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a52      	ldr	r2, [pc, #328]	@ (8006978 <HAL_GPIO_Init+0x314>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d02b      	beq.n	800688a <HAL_GPIO_Init+0x226>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a51      	ldr	r2, [pc, #324]	@ (800697c <HAL_GPIO_Init+0x318>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d025      	beq.n	8006886 <HAL_GPIO_Init+0x222>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a50      	ldr	r2, [pc, #320]	@ (8006980 <HAL_GPIO_Init+0x31c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01f      	beq.n	8006882 <HAL_GPIO_Init+0x21e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a4f      	ldr	r2, [pc, #316]	@ (8006984 <HAL_GPIO_Init+0x320>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d019      	beq.n	800687e <HAL_GPIO_Init+0x21a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a4e      	ldr	r2, [pc, #312]	@ (8006988 <HAL_GPIO_Init+0x324>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_GPIO_Init+0x216>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a4d      	ldr	r2, [pc, #308]	@ (800698c <HAL_GPIO_Init+0x328>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00d      	beq.n	8006876 <HAL_GPIO_Init+0x212>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a4c      	ldr	r2, [pc, #304]	@ (8006990 <HAL_GPIO_Init+0x32c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d007      	beq.n	8006872 <HAL_GPIO_Init+0x20e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a4b      	ldr	r2, [pc, #300]	@ (8006994 <HAL_GPIO_Init+0x330>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <HAL_GPIO_Init+0x20a>
 800686a:	2307      	movs	r3, #7
 800686c:	e00e      	b.n	800688c <HAL_GPIO_Init+0x228>
 800686e:	2308      	movs	r3, #8
 8006870:	e00c      	b.n	800688c <HAL_GPIO_Init+0x228>
 8006872:	2306      	movs	r3, #6
 8006874:	e00a      	b.n	800688c <HAL_GPIO_Init+0x228>
 8006876:	2305      	movs	r3, #5
 8006878:	e008      	b.n	800688c <HAL_GPIO_Init+0x228>
 800687a:	2304      	movs	r3, #4
 800687c:	e006      	b.n	800688c <HAL_GPIO_Init+0x228>
 800687e:	2303      	movs	r3, #3
 8006880:	e004      	b.n	800688c <HAL_GPIO_Init+0x228>
 8006882:	2302      	movs	r3, #2
 8006884:	e002      	b.n	800688c <HAL_GPIO_Init+0x228>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_GPIO_Init+0x228>
 800688a:	2300      	movs	r3, #0
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	f002 0203 	and.w	r2, r2, #3
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	4093      	lsls	r3, r2
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4313      	orrs	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800689c:	4935      	ldr	r1, [pc, #212]	@ (8006974 <HAL_GPIO_Init+0x310>)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	3302      	adds	r3, #2
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006998 <HAL_GPIO_Init+0x334>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4013      	ands	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068ce:	4a32      	ldr	r2, [pc, #200]	@ (8006998 <HAL_GPIO_Init+0x334>)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068d4:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <HAL_GPIO_Init+0x334>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068f8:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <HAL_GPIO_Init+0x334>)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068fe:	4b26      	ldr	r3, [pc, #152]	@ (8006998 <HAL_GPIO_Init+0x334>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	43db      	mvns	r3, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4013      	ands	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006922:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <HAL_GPIO_Init+0x334>)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006928:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <HAL_GPIO_Init+0x334>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	43db      	mvns	r3, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4013      	ands	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800694c:	4a12      	ldr	r2, [pc, #72]	@ (8006998 <HAL_GPIO_Init+0x334>)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3301      	adds	r3, #1
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	f67f ae90 	bls.w	8006680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	3724      	adds	r7, #36	@ 0x24
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40023800 	.word	0x40023800
 8006974:	40013800 	.word	0x40013800
 8006978:	40020000 	.word	0x40020000
 800697c:	40020400 	.word	0x40020400
 8006980:	40020800 	.word	0x40020800
 8006984:	40020c00 	.word	0x40020c00
 8006988:	40021000 	.word	0x40021000
 800698c:	40021400 	.word	0x40021400
 8006990:	40021800 	.word	0x40021800
 8006994:	40021c00 	.word	0x40021c00
 8006998:	40013c00 	.word	0x40013c00

0800699c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
 80069a8:	4613      	mov	r3, r2
 80069aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069ac:	787b      	ldrb	r3, [r7, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069b2:	887a      	ldrh	r2, [r7, #2]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069b8:	e003      	b.n	80069c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069ba:	887b      	ldrh	r3, [r7, #2]
 80069bc:	041a      	lsls	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	619a      	str	r2, [r3, #24]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80069da:	4b08      	ldr	r3, [pc, #32]	@ (80069fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069e6:	4a05      	ldr	r2, [pc, #20]	@ (80069fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fb fe6c 	bl	80026cc <HAL_GPIO_EXTI_Callback>
  }
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40013c00 	.word	0x40013c00

08006a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e12b      	b.n	8006c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fd fc26 	bl	8004278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2224      	movs	r2, #36	@ 0x24
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a64:	f001 fa54 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 8006a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4a81      	ldr	r2, [pc, #516]	@ (8006c74 <HAL_I2C_Init+0x274>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d807      	bhi.n	8006a84 <HAL_I2C_Init+0x84>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a80      	ldr	r2, [pc, #512]	@ (8006c78 <HAL_I2C_Init+0x278>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	bf94      	ite	ls
 8006a7c:	2301      	movls	r3, #1
 8006a7e:	2300      	movhi	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	e006      	b.n	8006a92 <HAL_I2C_Init+0x92>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a7d      	ldr	r2, [pc, #500]	@ (8006c7c <HAL_I2C_Init+0x27c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	bf94      	ite	ls
 8006a8c:	2301      	movls	r3, #1
 8006a8e:	2300      	movhi	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e0e7      	b.n	8006c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a78      	ldr	r2, [pc, #480]	@ (8006c80 <HAL_I2C_Init+0x280>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0c9b      	lsrs	r3, r3, #18
 8006aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8006c74 <HAL_I2C_Init+0x274>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d802      	bhi.n	8006ad4 <HAL_I2C_Init+0xd4>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	e009      	b.n	8006ae8 <HAL_I2C_Init+0xe8>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	4a69      	ldr	r2, [pc, #420]	@ (8006c84 <HAL_I2C_Init+0x284>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	099b      	lsrs	r3, r3, #6
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006afa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	495c      	ldr	r1, [pc, #368]	@ (8006c74 <HAL_I2C_Init+0x274>)
 8006b04:	428b      	cmp	r3, r1
 8006b06:	d819      	bhi.n	8006b3c <HAL_I2C_Init+0x13c>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1e59      	subs	r1, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b16:	1c59      	adds	r1, r3, #1
 8006b18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b1c:	400b      	ands	r3, r1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_I2C_Init+0x138>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1e59      	subs	r1, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b30:	3301      	adds	r3, #1
 8006b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b36:	e051      	b.n	8006bdc <HAL_I2C_Init+0x1dc>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	e04f      	b.n	8006bdc <HAL_I2C_Init+0x1dc>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d111      	bne.n	8006b68 <HAL_I2C_Init+0x168>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	1e58      	subs	r0, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6859      	ldr	r1, [r3, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	440b      	add	r3, r1
 8006b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b56:	3301      	adds	r3, #1
 8006b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	e012      	b.n	8006b8e <HAL_I2C_Init+0x18e>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1e58      	subs	r0, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	0099      	lsls	r1, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Init+0x196>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_I2C_Init+0x1dc>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10e      	bne.n	8006bbc <HAL_I2C_Init+0x1bc>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1e58      	subs	r0, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	440b      	add	r3, r1
 8006bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	e00f      	b.n	8006bdc <HAL_I2C_Init+0x1dc>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1e58      	subs	r0, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	0099      	lsls	r1, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	6809      	ldr	r1, [r1, #0]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006c0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6911      	ldr	r1, [r2, #16]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68d2      	ldr	r2, [r2, #12]
 8006c16:	4311      	orrs	r1, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	000186a0 	.word	0x000186a0
 8006c78:	001e847f 	.word	0x001e847f
 8006c7c:	003d08ff 	.word	0x003d08ff
 8006c80:	431bde83 	.word	0x431bde83
 8006c84:	10624dd3 	.word	0x10624dd3

08006c88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08c      	sub	sp, #48	@ 0x30
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	817b      	strh	r3, [r7, #10]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	813b      	strh	r3, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ca2:	f7fe f957 	bl	8004f54 <HAL_GetTick>
 8006ca6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	f040 8214 	bne.w	80070de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2319      	movs	r3, #25
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	497b      	ldr	r1, [pc, #492]	@ (8006eac <HAL_I2C_Mem_Read+0x224>)
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fafb 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e207      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_I2C_Mem_Read+0x56>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e200      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d007      	beq.n	8006d04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2222      	movs	r2, #34	@ 0x22
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2240      	movs	r2, #64	@ 0x40
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a5b      	ldr	r2, [pc, #364]	@ (8006eb0 <HAL_I2C_Mem_Read+0x228>)
 8006d44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d46:	88f8      	ldrh	r0, [r7, #6]
 8006d48:	893a      	ldrh	r2, [r7, #8]
 8006d4a:	8979      	ldrh	r1, [r7, #10]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4603      	mov	r3, r0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f9c8 	bl	80070ec <I2C_RequestMemoryRead>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e1bc      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d113      	bne.n	8006d96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	623b      	str	r3, [r7, #32]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	623b      	str	r3, [r7, #32]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e190      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d11b      	bne.n	8006dd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e170      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d11b      	bne.n	8006e16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	e150      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e2c:	e144      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	f200 80f1 	bhi.w	800701a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d123      	bne.n	8006e88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fb9b 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e145      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e86:	e117      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d14e      	bne.n	8006f2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	2200      	movs	r2, #0
 8006e98:	4906      	ldr	r1, [pc, #24]	@ (8006eb4 <HAL_I2C_Mem_Read+0x22c>)
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 fa0e 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e11a      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
 8006eaa:	bf00      	nop
 8006eac:	00100002 	.word	0x00100002
 8006eb0:	ffff0000 	.word	0xffff0000
 8006eb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f2c:	e0c4      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	2200      	movs	r2, #0
 8006f36:	496c      	ldr	r1, [pc, #432]	@ (80070e8 <HAL_I2C_Mem_Read+0x460>)
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 f9bf 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0cb      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	2200      	movs	r2, #0
 8006f92:	4955      	ldr	r1, [pc, #340]	@ (80070e8 <HAL_I2C_Mem_Read+0x460>)
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f991 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e09d      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007018:	e04e      	b.n	80070b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800701a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 faae 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e058      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b04      	cmp	r3, #4
 800706c:	d124      	bne.n	80070b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007072:	2b03      	cmp	r3, #3
 8007074:	d107      	bne.n	8007086 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007084:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f aeb6 	bne.w	8006e2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e000      	b.n	80070e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
  }
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3728      	adds	r7, #40	@ 0x28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	00010004 	.word	0x00010004

080070ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	817b      	strh	r3, [r7, #10]
 80070fe:	460b      	mov	r3, r1
 8007100:	813b      	strh	r3, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007114:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	2200      	movs	r2, #0
 800712e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f8c2 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00d      	beq.n	800715a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800714c:	d103      	bne.n	8007156 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007154:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e0aa      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800715a:	897b      	ldrh	r3, [r7, #10]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	6a3a      	ldr	r2, [r7, #32]
 800716e:	4952      	ldr	r1, [pc, #328]	@ (80072b8 <I2C_RequestMemoryRead+0x1cc>)
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f91d 	bl	80073b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e097      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007198:	6a39      	ldr	r1, [r7, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f9a8 	bl	80074f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d107      	bne.n	80071be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e076      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c8:	893b      	ldrh	r3, [r7, #8]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	611a      	str	r2, [r3, #16]
 80071d2:	e021      	b.n	8007218 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071d4:	893b      	ldrh	r3, [r7, #8]
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e4:	6a39      	ldr	r1, [r7, #32]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f982 	bl	80074f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d107      	bne.n	800720a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e050      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721a:	6a39      	ldr	r1, [r7, #32]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f967 	bl	80074f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00d      	beq.n	8007244 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722c:	2b04      	cmp	r3, #4
 800722e:	d107      	bne.n	8007240 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e035      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007252:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2200      	movs	r2, #0
 800725c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f82b 	bl	80072bc <I2C_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00d      	beq.n	8007288 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727a:	d103      	bne.n	8007284 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e013      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007288:	897b      	ldrh	r3, [r7, #10]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f043 0301 	orr.w	r3, r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	4906      	ldr	r1, [pc, #24]	@ (80072b8 <I2C_RequestMemoryRead+0x1cc>)
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f886 	bl	80073b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	00010002 	.word	0x00010002

080072bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072cc:	e048      	b.n	8007360 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072d4:	d044      	beq.n	8007360 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d6:	f7fd fe3d 	bl	8004f54 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d302      	bcc.n	80072ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d139      	bne.n	8007360 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10d      	bne.n	8007312 <I2C_WaitOnFlagUntilTimeout+0x56>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	43da      	mvns	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4013      	ands	r3, r2
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	e00c      	b.n	800732c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	43da      	mvns	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4013      	ands	r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	bf0c      	ite	eq
 8007324:	2301      	moveq	r3, #1
 8007326:	2300      	movne	r3, #0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	429a      	cmp	r2, r3
 8007330:	d116      	bne.n	8007360 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e023      	b.n	80073a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d10d      	bne.n	8007386 <I2C_WaitOnFlagUntilTimeout+0xca>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	43da      	mvns	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4013      	ands	r3, r2
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf0c      	ite	eq
 800737c:	2301      	moveq	r3, #1
 800737e:	2300      	movne	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	e00c      	b.n	80073a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	43da      	mvns	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4013      	ands	r3, r2
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	bf0c      	ite	eq
 8007398:	2301      	moveq	r3, #1
 800739a:	2300      	movne	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d093      	beq.n	80072ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073be:	e071      	b.n	80074a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ce:	d123      	bne.n	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	f043 0204 	orr.w	r2, r3, #4
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e067      	b.n	80074e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800741e:	d041      	beq.n	80074a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007420:	f7fd fd98 	bl	8004f54 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d302      	bcc.n	8007436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d136      	bne.n	80074a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d10c      	bne.n	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	43da      	mvns	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	bf14      	ite	ne
 8007452:	2301      	movne	r3, #1
 8007454:	2300      	moveq	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	e00b      	b.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	43da      	mvns	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4013      	ands	r3, r2
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e021      	b.n	80074e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d10c      	bne.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	43da      	mvns	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4013      	ands	r3, r2
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	e00b      	b.n	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	43da      	mvns	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf14      	ite	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	2300      	moveq	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f af6d 	bne.w	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074fc:	e034      	b.n	8007568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f89b 	bl	800763a <I2C_IsAcknowledgeFailed>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e034      	b.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007514:	d028      	beq.n	8007568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7fd fd1d 	bl	8004f54 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11d      	bne.n	8007568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d016      	beq.n	8007568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e007      	b.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007572:	2b80      	cmp	r3, #128	@ 0x80
 8007574:	d1c3      	bne.n	80074fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800758c:	e049      	b.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b10      	cmp	r3, #16
 800759a:	d119      	bne.n	80075d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0210 	mvn.w	r2, #16
 80075a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e030      	b.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d0:	f7fd fcc0 	bl	8004f54 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11d      	bne.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d016      	beq.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	f043 0220 	orr.w	r2, r3, #32
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e007      	b.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d1ae      	bne.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800764c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007650:	d11b      	bne.n	800768a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800765a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	f043 0204 	orr.w	r2, r3, #4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e267      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d075      	beq.n	80077a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076b6:	4b88      	ldr	r3, [pc, #544]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d00c      	beq.n	80076dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076c2:	4b85      	ldr	r3, [pc, #532]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d112      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ce:	4b82      	ldr	r3, [pc, #520]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076da:	d10b      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076dc:	4b7e      	ldr	r3, [pc, #504]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05b      	beq.n	80077a0 <HAL_RCC_OscConfig+0x108>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d157      	bne.n	80077a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e242      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fc:	d106      	bne.n	800770c <HAL_RCC_OscConfig+0x74>
 80076fe:	4b76      	ldr	r3, [pc, #472]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a75      	ldr	r2, [pc, #468]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e01d      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x98>
 8007716:	4b70      	ldr	r3, [pc, #448]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a6f      	ldr	r2, [pc, #444]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 800771c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	4b6d      	ldr	r3, [pc, #436]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6c      	ldr	r2, [pc, #432]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e00b      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 8007730:	4b69      	ldr	r3, [pc, #420]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a68      	ldr	r2, [pc, #416]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	4b66      	ldr	r3, [pc, #408]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a65      	ldr	r2, [pc, #404]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d013      	beq.n	8007778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fd fc00 	bl	8004f54 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007758:	f7fd fbfc 	bl	8004f54 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	@ 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e207      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800776a:	4b5b      	ldr	r3, [pc, #364]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0xc0>
 8007776:	e014      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007778:	f7fd fbec 	bl	8004f54 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007780:	f7fd fbe8 	bl	8004f54 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b64      	cmp	r3, #100	@ 0x64
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e1f3      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007792:	4b51      	ldr	r3, [pc, #324]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0xe8>
 800779e:	e000      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d063      	beq.n	8007876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ae:	4b4a      	ldr	r3, [pc, #296]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ba:	4b47      	ldr	r3, [pc, #284]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d11c      	bne.n	8007800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077c6:	4b44      	ldr	r3, [pc, #272]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d116      	bne.n	8007800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d2:	4b41      	ldr	r3, [pc, #260]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_RCC_OscConfig+0x152>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d001      	beq.n	80077ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e1c7      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ea:	4b3b      	ldr	r3, [pc, #236]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4937      	ldr	r1, [pc, #220]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fe:	e03a      	b.n	8007876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d020      	beq.n	800784a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007808:	4b34      	ldr	r3, [pc, #208]	@ (80078dc <HAL_RCC_OscConfig+0x244>)
 800780a:	2201      	movs	r2, #1
 800780c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780e:	f7fd fba1 	bl	8004f54 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007816:	f7fd fb9d 	bl	8004f54 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e1a8      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007828:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f0      	beq.n	8007816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007834:	4b28      	ldr	r3, [pc, #160]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4925      	ldr	r1, [pc, #148]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007844:	4313      	orrs	r3, r2
 8007846:	600b      	str	r3, [r1, #0]
 8007848:	e015      	b.n	8007876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800784a:	4b24      	ldr	r3, [pc, #144]	@ (80078dc <HAL_RCC_OscConfig+0x244>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fd fb80 	bl	8004f54 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007858:	f7fd fb7c 	bl	8004f54 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e187      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800786a:	4b1b      	ldr	r3, [pc, #108]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f0      	bne.n	8007858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d036      	beq.n	80078f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d016      	beq.n	80078b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800788a:	4b15      	ldr	r3, [pc, #84]	@ (80078e0 <HAL_RCC_OscConfig+0x248>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fd fb60 	bl	8004f54 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007898:	f7fd fb5c 	bl	8004f54 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e167      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078aa:	4b0b      	ldr	r3, [pc, #44]	@ (80078d8 <HAL_RCC_OscConfig+0x240>)
 80078ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0x200>
 80078b6:	e01b      	b.n	80078f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078b8:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <HAL_RCC_OscConfig+0x248>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078be:	f7fd fb49 	bl	8004f54 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c4:	e00e      	b.n	80078e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c6:	f7fd fb45 	bl	8004f54 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d907      	bls.n	80078e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e150      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	42470000 	.word	0x42470000
 80078e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e4:	4b88      	ldr	r3, [pc, #544]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80078e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ea      	bne.n	80078c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8097 	beq.w	8007a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007902:	4b81      	ldr	r3, [pc, #516]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10f      	bne.n	800792e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	4b7d      	ldr	r3, [pc, #500]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	4a7c      	ldr	r2, [pc, #496]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800791c:	6413      	str	r3, [r2, #64]	@ 0x40
 800791e:	4b7a      	ldr	r3, [pc, #488]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800792a:	2301      	movs	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792e:	4b77      	ldr	r3, [pc, #476]	@ (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d118      	bne.n	800796c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800793a:	4b74      	ldr	r3, [pc, #464]	@ (8007b0c <HAL_RCC_OscConfig+0x474>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a73      	ldr	r2, [pc, #460]	@ (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007946:	f7fd fb05 	bl	8004f54 <HAL_GetTick>
 800794a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794c:	e008      	b.n	8007960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794e:	f7fd fb01 	bl	8004f54 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e10c      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007960:	4b6a      	ldr	r3, [pc, #424]	@ (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0f0      	beq.n	800794e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d106      	bne.n	8007982 <HAL_RCC_OscConfig+0x2ea>
 8007974:	4b64      	ldr	r3, [pc, #400]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007978:	4a63      	ldr	r2, [pc, #396]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007980:	e01c      	b.n	80079bc <HAL_RCC_OscConfig+0x324>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b05      	cmp	r3, #5
 8007988:	d10c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x30c>
 800798a:	4b5f      	ldr	r3, [pc, #380]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	4a5e      	ldr	r2, [pc, #376]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6713      	str	r3, [r2, #112]	@ 0x70
 8007996:	4b5c      	ldr	r3, [pc, #368]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	4a5b      	ldr	r2, [pc, #364]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80079a2:	e00b      	b.n	80079bc <HAL_RCC_OscConfig+0x324>
 80079a4:	4b58      	ldr	r3, [pc, #352]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a8:	4a57      	ldr	r2, [pc, #348]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b0:	4b55      	ldr	r3, [pc, #340]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b4:	4a54      	ldr	r2, [pc, #336]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079b6:	f023 0304 	bic.w	r3, r3, #4
 80079ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fd fac6 	bl	8004f54 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ca:	e00a      	b.n	80079e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079cc:	f7fd fac2 	bl	8004f54 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e0cb      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e2:	4b49      	ldr	r3, [pc, #292]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ee      	beq.n	80079cc <HAL_RCC_OscConfig+0x334>
 80079ee:	e014      	b.n	8007a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f0:	f7fd fab0 	bl	8004f54 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f6:	e00a      	b.n	8007a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f8:	f7fd faac 	bl	8004f54 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e0b5      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1ee      	bne.n	80079f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d105      	bne.n	8007a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a20:	4b39      	ldr	r3, [pc, #228]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a24:	4a38      	ldr	r2, [pc, #224]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80a1 	beq.w	8007b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a36:	4b34      	ldr	r3, [pc, #208]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d05c      	beq.n	8007afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d141      	bne.n	8007ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4a:	4b31      	ldr	r3, [pc, #196]	@ (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7fd fa80 	bl	8004f54 <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fd fa7c 	bl	8004f54 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e087      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6a:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69da      	ldr	r2, [r3, #28]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	019b      	lsls	r3, r3, #6
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	061b      	lsls	r3, r3, #24
 8007a9a:	491b      	ldr	r1, [pc, #108]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa6:	f7fd fa55 	bl	8004f54 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aae:	f7fd fa51 	bl	8004f54 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e05c      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac0:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f0      	beq.n	8007aae <HAL_RCC_OscConfig+0x416>
 8007acc:	e054      	b.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ace:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad4:	f7fd fa3e 	bl	8004f54 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007adc:	f7fd fa3a 	bl	8004f54 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e045      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCC_OscConfig+0x444>
 8007afa:	e03d      	b.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d107      	bne.n	8007b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e038      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	40007000 	.word	0x40007000
 8007b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	@ (8007b84 <HAL_RCC_OscConfig+0x4ec>)
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d028      	beq.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d121      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d11a      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d111      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d107      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40023800 	.word	0x40023800

08007b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0cc      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b68      	ldr	r3, [pc, #416]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d90c      	bls.n	8007bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b65      	ldr	r3, [pc, #404]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb2:	4b63      	ldr	r3, [pc, #396]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0b8      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d020      	beq.n	8007c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bdc:	4b59      	ldr	r3, [pc, #356]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4a58      	ldr	r2, [pc, #352]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bf4:	4b53      	ldr	r3, [pc, #332]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4a52      	ldr	r2, [pc, #328]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c00:	4b50      	ldr	r3, [pc, #320]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	494d      	ldr	r1, [pc, #308]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d044      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d107      	bne.n	8007c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c26:	4b47      	ldr	r3, [pc, #284]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d119      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e07f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c46:	4b3f      	ldr	r3, [pc, #252]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e06f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c56:	4b3b      	ldr	r3, [pc, #236]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e067      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c66:	4b37      	ldr	r3, [pc, #220]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 0203 	bic.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4934      	ldr	r1, [pc, #208]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c78:	f7fd f96c 	bl	8004f54 <HAL_GetTick>
 8007c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c80:	f7fd f968 	bl	8004f54 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e04f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c96:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 020c 	and.w	r2, r3, #12
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1eb      	bne.n	8007c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ca8:	4b25      	ldr	r3, [pc, #148]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d20c      	bcs.n	8007cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb6:	4b22      	ldr	r3, [pc, #136]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cbe:	4b20      	ldr	r3, [pc, #128]	@ (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d001      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e032      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cdc:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4916      	ldr	r1, [pc, #88]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cfa:	4b12      	ldr	r3, [pc, #72]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	490e      	ldr	r1, [pc, #56]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d0e:	f000 f82d 	bl	8007d6c <HAL_RCC_GetSysClockFreq>
 8007d12:	4602      	mov	r2, r0
 8007d14:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	091b      	lsrs	r3, r3, #4
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	490a      	ldr	r1, [pc, #40]	@ (8007d48 <HAL_RCC_ClockConfig+0x1c0>)
 8007d20:	5ccb      	ldrb	r3, [r1, r3]
 8007d22:	fa22 f303 	lsr.w	r3, r2, r3
 8007d26:	4a09      	ldr	r2, [pc, #36]	@ (8007d4c <HAL_RCC_ClockConfig+0x1c4>)
 8007d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd f8cc 	bl	8004ecc <HAL_InitTick>

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40023c00 	.word	0x40023c00
 8007d44:	40023800 	.word	0x40023800
 8007d48:	0800e5e8 	.word	0x0800e5e8
 8007d4c:	20000038 	.word	0x20000038
 8007d50:	2000003c 	.word	0x2000003c

08007d54 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007d58:	4b03      	ldr	r3, [pc, #12]	@ (8007d68 <HAL_RCC_EnableCSS+0x14>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
}
 8007d5e:	bf00      	nop
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	4247004c 	.word	0x4247004c

08007d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b090      	sub	sp, #64	@ 0x40
 8007d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d84:	4b59      	ldr	r3, [pc, #356]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 030c 	and.w	r3, r3, #12
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d00d      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0x40>
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	f200 80a1 	bhi.w	8007ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_RCC_GetSysClockFreq+0x34>
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d003      	beq.n	8007da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d9e:	e09b      	b.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007da0:	4b53      	ldr	r3, [pc, #332]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007da2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007da4:	e09b      	b.n	8007ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007da6:	4b53      	ldr	r3, [pc, #332]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007daa:	e098      	b.n	8007ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dac:	4b4f      	ldr	r3, [pc, #316]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007db6:	4b4d      	ldr	r3, [pc, #308]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d028      	beq.n	8007e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	2200      	movs	r2, #0
 8007dca:	623b      	str	r3, [r7, #32]
 8007dcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4b47      	ldr	r3, [pc, #284]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007dd8:	fb03 f201 	mul.w	r2, r3, r1
 8007ddc:	2300      	movs	r3, #0
 8007dde:	fb00 f303 	mul.w	r3, r0, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	4a43      	ldr	r2, [pc, #268]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007de6:	fba0 1202 	umull	r1, r2, r0, r2
 8007dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dec:	460a      	mov	r2, r1
 8007dee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df2:	4413      	add	r3, r2
 8007df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df8:	2200      	movs	r2, #0
 8007dfa:	61bb      	str	r3, [r7, #24]
 8007dfc:	61fa      	str	r2, [r7, #28]
 8007dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e06:	f7f8 fe81 	bl	8000b0c <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4613      	mov	r3, r2
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e12:	e053      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e14:	4b35      	ldr	r3, [pc, #212]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	099b      	lsrs	r3, r3, #6
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	617a      	str	r2, [r7, #20]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e26:	f04f 0b00 	mov.w	fp, #0
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	f04f 0000 	mov.w	r0, #0
 8007e32:	f04f 0100 	mov.w	r1, #0
 8007e36:	0159      	lsls	r1, r3, #5
 8007e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e3c:	0150      	lsls	r0, r2, #5
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	ebb2 080a 	subs.w	r8, r2, sl
 8007e46:	eb63 090b 	sbc.w	r9, r3, fp
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8007e62:	eb63 0509 	sbc.w	r5, r3, r9
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	00eb      	lsls	r3, r5, #3
 8007e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e74:	00e2      	lsls	r2, r4, #3
 8007e76:	4614      	mov	r4, r2
 8007e78:	461d      	mov	r5, r3
 8007e7a:	eb14 030a 	adds.w	r3, r4, sl
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	eb45 030b 	adc.w	r3, r5, fp
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e92:	4629      	mov	r1, r5
 8007e94:	028b      	lsls	r3, r1, #10
 8007e96:	4621      	mov	r1, r4
 8007e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	028a      	lsls	r2, r1, #10
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	60fa      	str	r2, [r7, #12]
 8007eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb0:	f7f8 fe2c 	bl	8000b0c <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <HAL_RCC_GetSysClockFreq+0x180>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007ecc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ed6:	e002      	b.n	8007ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ed8:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007eda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3740      	adds	r7, #64	@ 0x40
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eea:	bf00      	nop
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	00f42400 	.word	0x00f42400
 8007ef4:	00b71b00 	.word	0x00b71b00

08007ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007efc:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007efe:	681b      	ldr	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000038 	.word	0x20000038

08007f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f14:	f7ff fff0 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	0a9b      	lsrs	r3, r3, #10
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4903      	ldr	r1, [pc, #12]	@ (8007f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40023800 	.word	0x40023800
 8007f34:	0800e5f8 	.word	0x0800e5f8

08007f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f3c:	f7ff ffdc 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	0b5b      	lsrs	r3, r3, #13
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	4903      	ldr	r1, [pc, #12]	@ (8007f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f4e:	5ccb      	ldrb	r3, [r1, r3]
 8007f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	40023800 	.word	0x40023800
 8007f5c:	0800e5f8 	.word	0x0800e5f8

08007f60 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007f64:	4b06      	ldr	r3, [pc, #24]	@ (8007f80 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6c:	2b80      	cmp	r3, #128	@ 0x80
 8007f6e:	d104      	bne.n	8007f7a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007f70:	f000 f80a 	bl	8007f88 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007f74:	4b03      	ldr	r3, [pc, #12]	@ (8007f84 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007f76:	2280      	movs	r2, #128	@ 0x80
 8007f78:	701a      	strb	r2, [r3, #0]
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	40023800 	.word	0x40023800
 8007f84:	4002380e 	.word	0x4002380e

08007f88 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e07b      	b.n	80080a0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d108      	bne.n	8007fc2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fb8:	d009      	beq.n	8007fce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	61da      	str	r2, [r3, #28]
 8007fc0:	e005      	b.n	8007fce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fc f9af 	bl	800434c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008004:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008052:	ea42 0103 	orr.w	r1, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	0c1b      	lsrs	r3, r3, #16
 800806c:	f003 0104 	and.w	r1, r3, #4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008074:	f003 0210 	and.w	r2, r3, #16
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69da      	ldr	r2, [r3, #28]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800808e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	@ 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080b6:	2301      	movs	r3, #1
 80080b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_SPI_TransmitReceive+0x26>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e198      	b.n	8008400 <HAL_SPI_TransmitReceive+0x358>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d6:	f7fc ff3d 	bl	8004f54 <HAL_GetTick>
 80080da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00f      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x70>
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080fe:	d107      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x68>
 8008108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800810c:	2b04      	cmp	r3, #4
 800810e:	d003      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008110:	2302      	movs	r3, #2
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008116:	e16d      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_SPI_TransmitReceive+0x82>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_SPI_TransmitReceive+0x82>
 8008124:	887b      	ldrh	r3, [r7, #2]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008130:	e160      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b04      	cmp	r3, #4
 800813c:	d003      	beq.n	8008146 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2205      	movs	r2, #5
 8008142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	887a      	ldrh	r2, [r7, #2]
 8008156:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	887a      	ldrh	r2, [r7, #2]
 800815c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	887a      	ldrh	r2, [r7, #2]
 8008168:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	887a      	ldrh	r2, [r7, #2]
 800816e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008186:	2b40      	cmp	r3, #64	@ 0x40
 8008188:	d007      	beq.n	800819a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081a2:	d17c      	bne.n	800829e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_SPI_TransmitReceive+0x10a>
 80081ac:	8b7b      	ldrh	r3, [r7, #26]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d16a      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b6:	881a      	ldrh	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c2:	1c9a      	adds	r2, r3, #2
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d6:	e057      	b.n	8008288 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d11b      	bne.n	800821e <HAL_SPI_TransmitReceive+0x176>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d016      	beq.n	800821e <HAL_SPI_TransmitReceive+0x176>
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d113      	bne.n	800821e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fa:	881a      	ldrh	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	1c9a      	adds	r2, r3, #2
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d119      	bne.n	8008260 <HAL_SPI_TransmitReceive+0x1b8>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d014      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	b292      	uxth	r2, r2
 8008242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	1c9a      	adds	r2, r3, #2
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800825c:	2301      	movs	r3, #1
 800825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008260:	f7fc fe78 	bl	8004f54 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800826c:	429a      	cmp	r2, r3
 800826e:	d80b      	bhi.n	8008288 <HAL_SPI_TransmitReceive+0x1e0>
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008276:	d007      	beq.n	8008288 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008286:	e0b5      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800828c:	b29b      	uxth	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1a2      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x130>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d19d      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x130>
 800829c:	e080      	b.n	80083a0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_SPI_TransmitReceive+0x204>
 80082a6:	8b7b      	ldrh	r3, [r7, #26]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d16f      	bne.n	800838c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	330c      	adds	r3, #12
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d2:	e05b      	b.n	800838c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d11c      	bne.n	800831c <HAL_SPI_TransmitReceive+0x274>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d017      	beq.n	800831c <HAL_SPI_TransmitReceive+0x274>
 80082ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d114      	bne.n	800831c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	330c      	adds	r3, #12
 80082fc:	7812      	ldrb	r2, [r2, #0]
 80082fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d119      	bne.n	800835e <HAL_SPI_TransmitReceive+0x2b6>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d014      	beq.n	800835e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800835a:	2301      	movs	r3, #1
 800835c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800835e:	f7fc fdf9 	bl	8004f54 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800836a:	429a      	cmp	r2, r3
 800836c:	d803      	bhi.n	8008376 <HAL_SPI_TransmitReceive+0x2ce>
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008374:	d102      	bne.n	800837c <HAL_SPI_TransmitReceive+0x2d4>
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800838a:	e033      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008390:	b29b      	uxth	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d19e      	bne.n	80082d4 <HAL_SPI_TransmitReceive+0x22c>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d199      	bne.n	80082d4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f8b7 	bl	8008518 <SPI_EndRxTxTransaction>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80083bc:	e01a      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ea:	e003      	b.n	80083f4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80083fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008400:	4618      	mov	r0, r3
 8008402:	3730      	adds	r7, #48	@ 0x30
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008418:	f7fc fd9c 	bl	8004f54 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	4413      	add	r3, r2
 8008426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008428:	f7fc fd94 	bl	8004f54 <HAL_GetTick>
 800842c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800842e:	4b39      	ldr	r3, [pc, #228]	@ (8008514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	015b      	lsls	r3, r3, #5
 8008434:	0d1b      	lsrs	r3, r3, #20
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800843e:	e054      	b.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008446:	d050      	beq.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008448:	f7fc fd84 	bl	8004f54 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	429a      	cmp	r2, r3
 8008456:	d902      	bls.n	800845e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d13d      	bne.n	80084da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800846c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008476:	d111      	bne.n	800849c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008480:	d004      	beq.n	800848c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800848a:	d107      	bne.n	800849c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800849a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a4:	d10f      	bne.n	80084c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e017      	b.n	800850a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4013      	ands	r3, r2
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	429a      	cmp	r2, r3
 8008506:	d19b      	bne.n	8008440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000038 	.word	0x20000038

08008518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2201      	movs	r2, #1
 800852c:	2102      	movs	r1, #2
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff ff6a 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853e:	f043 0220 	orr.w	r2, r3, #32
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e032      	b.n	80085b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800854a:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <SPI_EndRxTxTransaction+0xa0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1b      	ldr	r2, [pc, #108]	@ (80085bc <SPI_EndRxTxTransaction+0xa4>)
 8008550:	fba2 2303 	umull	r2, r3, r2, r3
 8008554:	0d5b      	lsrs	r3, r3, #21
 8008556:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800855a:	fb02 f303 	mul.w	r3, r2, r3
 800855e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008568:	d112      	bne.n	8008590 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2200      	movs	r2, #0
 8008572:	2180      	movs	r1, #128	@ 0x80
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ff47 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d016      	beq.n	80085ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e00f      	b.n	80085b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	3b01      	subs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a6:	2b80      	cmp	r3, #128	@ 0x80
 80085a8:	d0f2      	beq.n	8008590 <SPI_EndRxTxTransaction+0x78>
 80085aa:	e000      	b.n	80085ae <SPI_EndRxTxTransaction+0x96>
        break;
 80085ac:	bf00      	nop
  }

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000038 	.word	0x20000038
 80085bc:	165e9f81 	.word	0x165e9f81

080085c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e041      	b.n	8008656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7fb ffcc 	bl	8004584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f000 fba8 	bl	8008d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d001      	beq.n	8008678 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e046      	b.n	8008706 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a23      	ldr	r2, [pc, #140]	@ (8008714 <HAL_TIM_Base_Start+0xb4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d022      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008692:	d01d      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1f      	ldr	r2, [pc, #124]	@ (8008718 <HAL_TIM_Base_Start+0xb8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d018      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1e      	ldr	r2, [pc, #120]	@ (800871c <HAL_TIM_Base_Start+0xbc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008720 <HAL_TIM_Base_Start+0xc0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00e      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008724 <HAL_TIM_Base_Start+0xc4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d009      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a19      	ldr	r2, [pc, #100]	@ (8008728 <HAL_TIM_Base_Start+0xc8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d004      	beq.n	80086d0 <HAL_TIM_Base_Start+0x70>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a18      	ldr	r2, [pc, #96]	@ (800872c <HAL_TIM_Base_Start+0xcc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d111      	bne.n	80086f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b06      	cmp	r3, #6
 80086e0:	d010      	beq.n	8008704 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0201 	orr.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f2:	e007      	b.n	8008704 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40010000 	.word	0x40010000
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40010400 	.word	0x40010400
 8008728:	40014000 	.word	0x40014000
 800872c:	40001800 	.word	0x40001800

08008730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e041      	b.n	80087c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7fb fe60 	bl	800441c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3304      	adds	r3, #4
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f000 faf0 	bl	8008d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_TIM_PWM_Start+0x24>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	bf14      	ite	ne
 80087ec:	2301      	movne	r3, #1
 80087ee:	2300      	moveq	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	e022      	b.n	800883a <HAL_TIM_PWM_Start+0x6a>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d109      	bne.n	800880e <HAL_TIM_PWM_Start+0x3e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	bf14      	ite	ne
 8008806:	2301      	movne	r3, #1
 8008808:	2300      	moveq	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	e015      	b.n	800883a <HAL_TIM_PWM_Start+0x6a>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d109      	bne.n	8008828 <HAL_TIM_PWM_Start+0x58>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	e008      	b.n	800883a <HAL_TIM_PWM_Start+0x6a>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b01      	cmp	r3, #1
 8008832:	bf14      	ite	ne
 8008834:	2301      	movne	r3, #1
 8008836:	2300      	moveq	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e07c      	b.n	800893c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <HAL_TIM_PWM_Start+0x82>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008850:	e013      	b.n	800887a <HAL_TIM_PWM_Start+0xaa>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b04      	cmp	r3, #4
 8008856:	d104      	bne.n	8008862 <HAL_TIM_PWM_Start+0x92>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008860:	e00b      	b.n	800887a <HAL_TIM_PWM_Start+0xaa>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b08      	cmp	r3, #8
 8008866:	d104      	bne.n	8008872 <HAL_TIM_PWM_Start+0xa2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008870:	e003      	b.n	800887a <HAL_TIM_PWM_Start+0xaa>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2201      	movs	r2, #1
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fd5c 	bl	8009340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a2d      	ldr	r2, [pc, #180]	@ (8008944 <HAL_TIM_PWM_Start+0x174>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_TIM_PWM_Start+0xcc>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a2c      	ldr	r2, [pc, #176]	@ (8008948 <HAL_TIM_PWM_Start+0x178>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d101      	bne.n	80088a0 <HAL_TIM_PWM_Start+0xd0>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <HAL_TIM_PWM_Start+0xd2>
 80088a0:	2300      	movs	r3, #0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a22      	ldr	r2, [pc, #136]	@ (8008944 <HAL_TIM_PWM_Start+0x174>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c8:	d01d      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <HAL_TIM_PWM_Start+0x17c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d018      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <HAL_TIM_PWM_Start+0x180>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <HAL_TIM_PWM_Start+0x184>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a16      	ldr	r2, [pc, #88]	@ (8008948 <HAL_TIM_PWM_Start+0x178>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a18      	ldr	r2, [pc, #96]	@ (8008958 <HAL_TIM_PWM_Start+0x188>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_TIM_PWM_Start+0x136>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a16      	ldr	r2, [pc, #88]	@ (800895c <HAL_TIM_PWM_Start+0x18c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d111      	bne.n	800892a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b06      	cmp	r3, #6
 8008916:	d010      	beq.n	800893a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008928:	e007      	b.n	800893a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	40010000 	.word	0x40010000
 8008948:	40010400 	.word	0x40010400
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40014000 	.word	0x40014000
 800895c:	40001800 	.word	0x40001800

08008960 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2200      	movs	r2, #0
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fce4 	bl	8009340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2e      	ldr	r2, [pc, #184]	@ (8008a38 <HAL_TIM_PWM_Stop+0xd8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <HAL_TIM_PWM_Stop+0x2c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2d      	ldr	r2, [pc, #180]	@ (8008a3c <HAL_TIM_PWM_Stop+0xdc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d101      	bne.n	8008990 <HAL_TIM_PWM_Stop+0x30>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <HAL_TIM_PWM_Stop+0x32>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d017      	beq.n	80089c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10f      	bne.n	80089c6 <HAL_TIM_PWM_Stop+0x66>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a1a      	ldr	r2, [r3, #32]
 80089ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80089b0:	4013      	ands	r3, r2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <HAL_TIM_PWM_Stop+0x66>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6a1a      	ldr	r2, [r3, #32]
 80089cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10f      	bne.n	80089f6 <HAL_TIM_PWM_Stop+0x96>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6a1a      	ldr	r2, [r3, #32]
 80089dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80089e0:	4013      	ands	r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d107      	bne.n	80089f6 <HAL_TIM_PWM_Stop+0x96>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <HAL_TIM_PWM_Stop+0xa6>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a04:	e013      	b.n	8008a2e <HAL_TIM_PWM_Stop+0xce>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d104      	bne.n	8008a16 <HAL_TIM_PWM_Stop+0xb6>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a14:	e00b      	b.n	8008a2e <HAL_TIM_PWM_Stop+0xce>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Stop+0xc6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a24:	e003      	b.n	8008a2e <HAL_TIM_PWM_Stop+0xce>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40010400 	.word	0x40010400

08008a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e0ae      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b0c      	cmp	r3, #12
 8008a6a:	f200 809f 	bhi.w	8008bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008aa9 	.word	0x08008aa9
 8008a78:	08008bad 	.word	0x08008bad
 8008a7c:	08008bad 	.word	0x08008bad
 8008a80:	08008bad 	.word	0x08008bad
 8008a84:	08008ae9 	.word	0x08008ae9
 8008a88:	08008bad 	.word	0x08008bad
 8008a8c:	08008bad 	.word	0x08008bad
 8008a90:	08008bad 	.word	0x08008bad
 8008a94:	08008b2b 	.word	0x08008b2b
 8008a98:	08008bad 	.word	0x08008bad
 8008a9c:	08008bad 	.word	0x08008bad
 8008aa0:	08008bad 	.word	0x08008bad
 8008aa4:	08008b6b 	.word	0x08008b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f9fc 	bl	8008eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0208 	orr.w	r2, r2, #8
 8008ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0204 	bic.w	r2, r2, #4
 8008ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6999      	ldr	r1, [r3, #24]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	619a      	str	r2, [r3, #24]
      break;
 8008ae6:	e064      	b.n	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fa4c 	bl	8008f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6999      	ldr	r1, [r3, #24]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	021a      	lsls	r2, r3, #8
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	619a      	str	r2, [r3, #24]
      break;
 8008b28:	e043      	b.n	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 faa1 	bl	8009078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0208 	orr.w	r2, r2, #8
 8008b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69da      	ldr	r2, [r3, #28]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0204 	bic.w	r2, r2, #4
 8008b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69d9      	ldr	r1, [r3, #28]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	61da      	str	r2, [r3, #28]
      break;
 8008b68:	e023      	b.n	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68b9      	ldr	r1, [r7, #8]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 faf5 	bl	8009160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69da      	ldr	r2, [r3, #28]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69d9      	ldr	r1, [r3, #28]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	021a      	lsls	r2, r3, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	61da      	str	r2, [r3, #28]
      break;
 8008baa:	e002      	b.n	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e0b4      	b.n	8008d4a <HAL_TIM_ConfigClockSource+0x186>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c18:	d03e      	beq.n	8008c98 <HAL_TIM_ConfigClockSource+0xd4>
 8008c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c1e:	f200 8087 	bhi.w	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c26:	f000 8086 	beq.w	8008d36 <HAL_TIM_ConfigClockSource+0x172>
 8008c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c2e:	d87f      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c30:	2b70      	cmp	r3, #112	@ 0x70
 8008c32:	d01a      	beq.n	8008c6a <HAL_TIM_ConfigClockSource+0xa6>
 8008c34:	2b70      	cmp	r3, #112	@ 0x70
 8008c36:	d87b      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c38:	2b60      	cmp	r3, #96	@ 0x60
 8008c3a:	d050      	beq.n	8008cde <HAL_TIM_ConfigClockSource+0x11a>
 8008c3c:	2b60      	cmp	r3, #96	@ 0x60
 8008c3e:	d877      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c40:	2b50      	cmp	r3, #80	@ 0x50
 8008c42:	d03c      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0xfa>
 8008c44:	2b50      	cmp	r3, #80	@ 0x50
 8008c46:	d873      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c48:	2b40      	cmp	r3, #64	@ 0x40
 8008c4a:	d058      	beq.n	8008cfe <HAL_TIM_ConfigClockSource+0x13a>
 8008c4c:	2b40      	cmp	r3, #64	@ 0x40
 8008c4e:	d86f      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c50:	2b30      	cmp	r3, #48	@ 0x30
 8008c52:	d064      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0x15a>
 8008c54:	2b30      	cmp	r3, #48	@ 0x30
 8008c56:	d86b      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d060      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0x15a>
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	d867      	bhi.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d05c      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0x15a>
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d05a      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0x15a>
 8008c68:	e062      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c7a:	f000 fb41 	bl	8009300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	609a      	str	r2, [r3, #8]
      break;
 8008c96:	e04f      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ca8:	f000 fb2a 	bl	8009300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cba:	609a      	str	r2, [r3, #8]
      break;
 8008cbc:	e03c      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f000 fa9e 	bl	800920c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2150      	movs	r1, #80	@ 0x50
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 faf7 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8008cdc:	e02c      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cea:	461a      	mov	r2, r3
 8008cec:	f000 fabd 	bl	800926a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2160      	movs	r1, #96	@ 0x60
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fae7 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8008cfc:	e01c      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f000 fa7e 	bl	800920c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2140      	movs	r1, #64	@ 0x40
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fad7 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8008d1c:	e00c      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f000 face 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 8008d2e:	e003      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
      break;
 8008d34:	e000      	b.n	8008d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a46      	ldr	r2, [pc, #280]	@ (8008e80 <TIM_Base_SetConfig+0x12c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d013      	beq.n	8008d94 <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d72:	d00f      	beq.n	8008d94 <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a43      	ldr	r2, [pc, #268]	@ (8008e84 <TIM_Base_SetConfig+0x130>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00b      	beq.n	8008d94 <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a42      	ldr	r2, [pc, #264]	@ (8008e88 <TIM_Base_SetConfig+0x134>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d007      	beq.n	8008d94 <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a41      	ldr	r2, [pc, #260]	@ (8008e8c <TIM_Base_SetConfig+0x138>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a40      	ldr	r2, [pc, #256]	@ (8008e90 <TIM_Base_SetConfig+0x13c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d108      	bne.n	8008da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a35      	ldr	r2, [pc, #212]	@ (8008e80 <TIM_Base_SetConfig+0x12c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d02b      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008db4:	d027      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a32      	ldr	r2, [pc, #200]	@ (8008e84 <TIM_Base_SetConfig+0x130>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d023      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a31      	ldr	r2, [pc, #196]	@ (8008e88 <TIM_Base_SetConfig+0x134>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d01f      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a30      	ldr	r2, [pc, #192]	@ (8008e8c <TIM_Base_SetConfig+0x138>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d01b      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8008e90 <TIM_Base_SetConfig+0x13c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d017      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8008e94 <TIM_Base_SetConfig+0x140>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2d      	ldr	r2, [pc, #180]	@ (8008e98 <TIM_Base_SetConfig+0x144>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e9c <TIM_Base_SetConfig+0x148>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a2b      	ldr	r2, [pc, #172]	@ (8008ea0 <TIM_Base_SetConfig+0x14c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea4 <TIM_Base_SetConfig+0x150>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_Base_SetConfig+0xb2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a29      	ldr	r2, [pc, #164]	@ (8008ea8 <TIM_Base_SetConfig+0x154>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d108      	bne.n	8008e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a10      	ldr	r2, [pc, #64]	@ (8008e80 <TIM_Base_SetConfig+0x12c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_Base_SetConfig+0xf8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a12      	ldr	r2, [pc, #72]	@ (8008e90 <TIM_Base_SetConfig+0x13c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d103      	bne.n	8008e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d105      	bne.n	8008e72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f023 0201 	bic.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]
  }
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800
 8008ea0:	40001800 	.word	0x40001800
 8008ea4:	40001c00 	.word	0x40001c00
 8008ea8:	40002000 	.word	0x40002000

08008eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	f023 0201 	bic.w	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f023 0302 	bic.w	r3, r3, #2
 8008ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a20      	ldr	r2, [pc, #128]	@ (8008f84 <TIM_OC1_SetConfig+0xd8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC1_SetConfig+0x64>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <TIM_OC1_SetConfig+0xdc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10c      	bne.n	8008f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0308 	bic.w	r3, r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 0304 	bic.w	r3, r3, #4
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a15      	ldr	r2, [pc, #84]	@ (8008f84 <TIM_OC1_SetConfig+0xd8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d003      	beq.n	8008f3a <TIM_OC1_SetConfig+0x8e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a14      	ldr	r2, [pc, #80]	@ (8008f88 <TIM_OC1_SetConfig+0xdc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d111      	bne.n	8008f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	621a      	str	r2, [r3, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	40010000 	.word	0x40010000
 8008f88:	40010400 	.word	0x40010400

08008f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	f023 0210 	bic.w	r2, r3, #16
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f023 0320 	bic.w	r3, r3, #32
 8008fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a22      	ldr	r2, [pc, #136]	@ (8009070 <TIM_OC2_SetConfig+0xe4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_OC2_SetConfig+0x68>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a21      	ldr	r2, [pc, #132]	@ (8009074 <TIM_OC2_SetConfig+0xe8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d10d      	bne.n	8009010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	011b      	lsls	r3, r3, #4
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800900e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a17      	ldr	r2, [pc, #92]	@ (8009070 <TIM_OC2_SetConfig+0xe4>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d003      	beq.n	8009020 <TIM_OC2_SetConfig+0x94>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a16      	ldr	r2, [pc, #88]	@ (8009074 <TIM_OC2_SetConfig+0xe8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d113      	bne.n	8009048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800902e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	4313      	orrs	r3, r2
 800903a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	bf00      	nop
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40010400 	.word	0x40010400

08009078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	021b      	lsls	r3, r3, #8
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a21      	ldr	r2, [pc, #132]	@ (8009158 <TIM_OC3_SetConfig+0xe0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d003      	beq.n	80090de <TIM_OC3_SetConfig+0x66>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a20      	ldr	r2, [pc, #128]	@ (800915c <TIM_OC3_SetConfig+0xe4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d10d      	bne.n	80090fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	021b      	lsls	r3, r3, #8
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a16      	ldr	r2, [pc, #88]	@ (8009158 <TIM_OC3_SetConfig+0xe0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_OC3_SetConfig+0x92>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a15      	ldr	r2, [pc, #84]	@ (800915c <TIM_OC3_SetConfig+0xe4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d113      	bne.n	8009132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	621a      	str	r2, [r3, #32]
}
 800914c:	bf00      	nop
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	40010000 	.word	0x40010000
 800915c:	40010400 	.word	0x40010400

08009160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800918e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	031b      	lsls	r3, r3, #12
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a12      	ldr	r2, [pc, #72]	@ (8009204 <TIM_OC4_SetConfig+0xa4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <TIM_OC4_SetConfig+0x68>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a11      	ldr	r2, [pc, #68]	@ (8009208 <TIM_OC4_SetConfig+0xa8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d109      	bne.n	80091dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	019b      	lsls	r3, r3, #6
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40010000 	.word	0x40010000
 8009208:	40010400 	.word	0x40010400

0800920c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f023 0201 	bic.w	r2, r3, #1
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	011b      	lsls	r3, r3, #4
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f023 030a 	bic.w	r3, r3, #10
 8009248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800926a:	b480      	push	{r7}
 800926c:	b087      	sub	sp, #28
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	f023 0210 	bic.w	r2, r3, #16
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4313      	orrs	r3, r2
 800929e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	621a      	str	r2, [r3, #32]
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f043 0307 	orr.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800931a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	021a      	lsls	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	431a      	orrs	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4313      	orrs	r3, r2
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2201      	movs	r2, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a1a      	ldr	r2, [r3, #32]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	fa01 f303 	lsl.w	r3, r1, r3
 8009378:	431a      	orrs	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	621a      	str	r2, [r3, #32]
}
 800937e:	bf00      	nop
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e05a      	b.n	800945a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a21      	ldr	r2, [pc, #132]	@ (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d022      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f0:	d01d      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1d      	ldr	r2, [pc, #116]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d018      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1b      	ldr	r2, [pc, #108]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d013      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1a      	ldr	r2, [pc, #104]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00e      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a18      	ldr	r2, [pc, #96]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d009      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a17      	ldr	r2, [pc, #92]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d004      	beq.n	800942e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a15      	ldr	r2, [pc, #84]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d10c      	bne.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4313      	orrs	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40010000 	.word	0x40010000
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40010400 	.word	0x40010400
 800947c:	40014000 	.word	0x40014000
 8009480:	40001800 	.word	0x40001800

08009484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800949c:	2302      	movs	r3, #2
 800949e:	e03d      	b.n	800951c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e042      	b.n	80095c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7fb f97e 	bl	8004850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2224      	movs	r2, #36	@ 0x24
 8009558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800956a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 ff77 	bl	800a460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695a      	ldr	r2, [r3, #20]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08c      	sub	sp, #48	@ 0x30
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d156      	bne.n	8009690 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <HAL_UART_Transmit_DMA+0x26>
 80095e8:	88fb      	ldrh	r3, [r7, #6]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e04f      	b.n	8009692 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2221      	movs	r2, #33	@ 0x21
 800960e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009616:	4a21      	ldr	r2, [pc, #132]	@ (800969c <HAL_UART_Transmit_DMA+0xd4>)
 8009618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961e:	4a20      	ldr	r2, [pc, #128]	@ (80096a0 <HAL_UART_Transmit_DMA+0xd8>)
 8009620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	4a1f      	ldr	r2, [pc, #124]	@ (80096a4 <HAL_UART_Transmit_DMA+0xdc>)
 8009628:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	2200      	movs	r2, #0
 8009630:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800963c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963e:	6819      	ldr	r1, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3304      	adds	r3, #4
 8009646:	461a      	mov	r2, r3
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	f7fc fcb7 	bl	8005fbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	617b      	str	r3, [r7, #20]
   return(result);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3314      	adds	r3, #20
 8009676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009678:	627a      	str	r2, [r7, #36]	@ 0x24
 800967a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6a39      	ldr	r1, [r7, #32]
 800967e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	61fb      	str	r3, [r7, #28]
   return(result);
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e000      	b.n	8009692 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
  }
}
 8009692:	4618      	mov	r0, r3
 8009694:	3730      	adds	r7, #48	@ 0x30
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	08009ced 	.word	0x08009ced
 80096a0:	08009d87 	.word	0x08009d87
 80096a4:	08009f0b 	.word	0x08009f0b

080096a8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	@ 0x30
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d14a      	bne.n	8009758 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e043      	b.n	800975a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	461a      	mov	r2, r3
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 fc5b 	bl	8009fa0 <UART_Start_Receive_DMA>
 80096ea:	4603      	mov	r3, r0
 80096ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d12c      	bne.n	8009752 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d125      	bne.n	800974c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009700:	2300      	movs	r3, #0
 8009702:	613b      	str	r3, [r7, #16]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	330c      	adds	r3, #12
 800971c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	617b      	str	r3, [r7, #20]
   return(result);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f043 0310 	orr.w	r3, r3, #16
 800972c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	330c      	adds	r3, #12
 8009734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009736:	627a      	str	r2, [r7, #36]	@ 0x24
 8009738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6a39      	ldr	r1, [r7, #32]
 800973c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	61fb      	str	r3, [r7, #28]
   return(result);
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e5      	bne.n	8009716 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800974a:	e002      	b.n	8009752 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009756:	e000      	b.n	800975a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009758:	2302      	movs	r3, #2
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3730      	adds	r7, #48	@ 0x30
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b0ba      	sub	sp, #232	@ 0xe8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800978a:	2300      	movs	r3, #0
 800978c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009790:	2300      	movs	r3, #0
 8009792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80097a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10f      	bne.n	80097ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ae:	f003 0320 	and.w	r3, r3, #32
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <HAL_UART_IRQHandler+0x66>
 80097b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fd8d 	bl	800a2e2 <UART_Receive_IT>
      return;
 80097c8:	e25b      	b.n	8009c82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 80de 	beq.w	8009990 <HAL_UART_IRQHandler+0x22c>
 80097d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d106      	bne.n	80097ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80d1 	beq.w	8009990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <HAL_UART_IRQHandler+0xae>
 80097fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980a:	f043 0201 	orr.w	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <HAL_UART_IRQHandler+0xd2>
 800981e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982e:	f043 0202 	orr.w	r2, r3, #2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00b      	beq.n	800985a <HAL_UART_IRQHandler+0xf6>
 8009842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009852:	f043 0204 	orr.w	r2, r3, #4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b00      	cmp	r3, #0
 8009864:	d011      	beq.n	800988a <HAL_UART_IRQHandler+0x126>
 8009866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009882:	f043 0208 	orr.w	r2, r3, #8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 81f2 	beq.w	8009c78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009898:	f003 0320 	and.w	r3, r3, #32
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_UART_IRQHandler+0x14e>
 80098a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd18 	bl	800a2e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	bf0c      	ite	eq
 80098c0:	2301      	moveq	r3, #1
 80098c2:	2300      	movne	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <HAL_UART_IRQHandler+0x17a>
 80098d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d04f      	beq.n	800997e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fc20 	bl	800a124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ee:	2b40      	cmp	r3, #64	@ 0x40
 80098f0:	d141      	bne.n	8009976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3314      	adds	r3, #20
 80098f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800990c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800991e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800992a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1d9      	bne.n	80098f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d013      	beq.n	800996e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994a:	4a7e      	ldr	r2, [pc, #504]	@ (8009b44 <HAL_UART_IRQHandler+0x3e0>)
 800994c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009952:	4618      	mov	r0, r3
 8009954:	f7fc fbfa 	bl	800614c <HAL_DMA_Abort_IT>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d016      	beq.n	800998c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996c:	e00e      	b.n	800998c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f9b2 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	e00a      	b.n	800998c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f9ae 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	e006      	b.n	800998c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9aa 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800998a:	e175      	b.n	8009c78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998c:	bf00      	nop
    return;
 800998e:	e173      	b.n	8009c78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 814f 	bne.w	8009c38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800999a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999e:	f003 0310 	and.w	r3, r3, #16
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8148 	beq.w	8009c38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80099a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ac:	f003 0310 	and.w	r3, r3, #16
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 8141 	beq.w	8009c38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099b6:	2300      	movs	r3, #0
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	60bb      	str	r3, [r7, #8]
 80099ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d6:	2b40      	cmp	r3, #64	@ 0x40
 80099d8:	f040 80b6 	bne.w	8009b48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 8145 	beq.w	8009c7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099fa:	429a      	cmp	r2, r3
 80099fc:	f080 813e 	bcs.w	8009c7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a12:	f000 8088 	beq.w	8009b26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	330c      	adds	r3, #12
 8009a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009a42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1d9      	bne.n	8009a16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3314      	adds	r3, #20
 8009a68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a74:	f023 0301 	bic.w	r3, r3, #1
 8009a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3314      	adds	r3, #20
 8009a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e1      	bne.n	8009a62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3314      	adds	r3, #20
 8009abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ac2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ac8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e3      	bne.n	8009a9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af6:	f023 0310 	bic.w	r3, r3, #16
 8009afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	330c      	adds	r3, #12
 8009b04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e3      	bne.n	8009ae4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fc faa3 	bl	800606c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7f8 fca9 	bl	8002494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b42:	e09b      	b.n	8009c7c <HAL_UART_IRQHandler+0x518>
 8009b44:	0800a1eb 	.word	0x0800a1eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 808e 	beq.w	8009c80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8089 	beq.w	8009c80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	330c      	adds	r3, #12
 8009b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b92:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e3      	bne.n	8009b6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3314      	adds	r3, #20
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	f023 0301 	bic.w	r3, r3, #1
 8009bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3314      	adds	r3, #20
 8009bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e3      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0310 	bic.w	r3, r3, #16
 8009c02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c10:	61fa      	str	r2, [r7, #28]
 8009c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	69b9      	ldr	r1, [r7, #24]
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e3      	bne.n	8009bec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7f8 fc2f 	bl	8002494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c36:	e023      	b.n	8009c80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d009      	beq.n	8009c58 <HAL_UART_IRQHandler+0x4f4>
 8009c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fade 	bl	800a212 <UART_Transmit_IT>
    return;
 8009c56:	e014      	b.n	8009c82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00e      	beq.n	8009c82 <HAL_UART_IRQHandler+0x51e>
 8009c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d008      	beq.n	8009c82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fb1e 	bl	800a2b2 <UART_EndTransmit_IT>
    return;
 8009c76:	e004      	b.n	8009c82 <HAL_UART_IRQHandler+0x51e>
    return;
 8009c78:	bf00      	nop
 8009c7a:	e002      	b.n	8009c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c80:	bf00      	nop
  }
}
 8009c82:	37e8      	adds	r7, #232	@ 0xe8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b090      	sub	sp, #64	@ 0x40
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d137      	bne.n	8009d78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3314      	adds	r3, #20
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	330c      	adds	r3, #12
 8009d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d62:	61fa      	str	r2, [r7, #28]
 8009d64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	69b9      	ldr	r1, [r7, #24]
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d76:	e002      	b.n	8009d7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009d78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009d7a:	f7ff ff85 	bl	8009c88 <HAL_UART_TxCpltCallback>
}
 8009d7e:	bf00      	nop
 8009d80:	3740      	adds	r7, #64	@ 0x40
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff ff81 	bl	8009c9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b09c      	sub	sp, #112	@ 0x70
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d172      	bne.n	8009ea4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009de4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009de6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e5      	bne.n	8009dc4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3314      	adds	r3, #20
 8009dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e02:	e853 3f00 	ldrex	r3, [r3]
 8009e06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3314      	adds	r3, #20
 8009e16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e18:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e1a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e5      	bne.n	8009df8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e42:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3314      	adds	r3, #20
 8009e4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e5      	bne.n	8009e2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d119      	bne.n	8009ea4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e90:	61fa      	str	r2, [r7, #28]
 8009e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	69b9      	ldr	r1, [r7, #24]
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e5      	bne.n	8009e70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d106      	bne.n	8009ec0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009eba:	f7f8 faeb 	bl	8002494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ebe:	e002      	b.n	8009ec6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009ec0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ec2:	f7ff fef5 	bl	8009cb0 <HAL_UART_RxCpltCallback>
}
 8009ec6:	bf00      	nop
 8009ec8:	3770      	adds	r7, #112	@ 0x70
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d108      	bne.n	8009efc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7f8 facd 	bl	8002494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009efa:	e002      	b.n	8009f02 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fee1 	bl	8009cc4 <HAL_UART_RxHalfCpltCallback>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f26:	2b80      	cmp	r3, #128	@ 0x80
 8009f28:	bf0c      	ite	eq
 8009f2a:	2301      	moveq	r3, #1
 8009f2c:	2300      	movne	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b21      	cmp	r3, #33	@ 0x21
 8009f3c:	d108      	bne.n	8009f50 <UART_DMAError+0x46>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2200      	movs	r2, #0
 8009f48:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009f4a:	68b8      	ldr	r0, [r7, #8]
 8009f4c:	f000 f8c2 	bl	800a0d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5a:	2b40      	cmp	r3, #64	@ 0x40
 8009f5c:	bf0c      	ite	eq
 8009f5e:	2301      	moveq	r3, #1
 8009f60:	2300      	movne	r3, #0
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b22      	cmp	r3, #34	@ 0x22
 8009f70:	d108      	bne.n	8009f84 <UART_DMAError+0x7a>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009f7e:	68b8      	ldr	r0, [r7, #8]
 8009f80:	f000 f8d0 	bl	800a124 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f88:	f043 0210 	orr.w	r2, r3, #16
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f90:	68b8      	ldr	r0, [r7, #8]
 8009f92:	f7ff fea1 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b098      	sub	sp, #96	@ 0x60
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	88fa      	ldrh	r2, [r7, #6]
 8009fb8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2222      	movs	r2, #34	@ 0x22
 8009fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fcc:	4a3e      	ldr	r2, [pc, #248]	@ (800a0c8 <UART_Start_Receive_DMA+0x128>)
 8009fce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	4a3d      	ldr	r2, [pc, #244]	@ (800a0cc <UART_Start_Receive_DMA+0x12c>)
 8009fd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fdc:	4a3c      	ldr	r2, [pc, #240]	@ (800a0d0 <UART_Start_Receive_DMA+0x130>)
 8009fde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	f7fb ffdc 	bl	8005fbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a004:	2300      	movs	r3, #0
 800a006:	613b      	str	r3, [r7, #16]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d019      	beq.n	800a056 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	330c      	adds	r3, #12
 800a028:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a042:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a044:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3314      	adds	r3, #20
 800a05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	f043 0301 	orr.w	r3, r3, #1
 800a06c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3314      	adds	r3, #20
 800a074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a076:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3314      	adds	r3, #20
 800a090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	617b      	str	r3, [r7, #20]
   return(result);
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3314      	adds	r3, #20
 800a0a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6a39      	ldr	r1, [r7, #32]
 800a0b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e5      	bne.n	800a08a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3760      	adds	r7, #96	@ 0x60
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	08009da3 	.word	0x08009da3
 800a0cc:	08009ecf 	.word	0x08009ecf
 800a0d0:	08009f0b 	.word	0x08009f0b

0800a0d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b089      	sub	sp, #36	@ 0x24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	330c      	adds	r3, #12
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	61ba      	str	r2, [r7, #24]
 800a0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6979      	ldr	r1, [r7, #20]
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	613b      	str	r3, [r7, #16]
   return(result);
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e5      	bne.n	800a0dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a118:	bf00      	nop
 800a11a:	3724      	adds	r7, #36	@ 0x24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b095      	sub	sp, #84	@ 0x54
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a14c:	643a      	str	r2, [r7, #64]	@ 0x40
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e5      	bne.n	800a12c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3314      	adds	r3, #20
 800a166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3314      	adds	r3, #20
 800a17e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e5      	bne.n	800a160 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d119      	bne.n	800a1d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f023 0310 	bic.w	r3, r3, #16
 800a1b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1bc:	61ba      	str	r2, [r7, #24]
 800a1be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6979      	ldr	r1, [r7, #20]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e5      	bne.n	800a19c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1de:	bf00      	nop
 800a1e0:	3754      	adds	r7, #84	@ 0x54
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fd67 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a20a:	bf00      	nop
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a212:	b480      	push	{r7}
 800a214:	b085      	sub	sp, #20
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b21      	cmp	r3, #33	@ 0x21
 800a224:	d13e      	bne.n	800a2a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22e:	d114      	bne.n	800a25a <UART_Transmit_IT+0x48>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d110      	bne.n	800a25a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a24c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	1c9a      	adds	r2, r3, #2
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	621a      	str	r2, [r3, #32]
 800a258:	e008      	b.n	800a26c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	1c59      	adds	r1, r3, #1
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6211      	str	r1, [r2, #32]
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	b29b      	uxth	r3, r3
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	4619      	mov	r1, r3
 800a27a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10f      	bne.n	800a2a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a28e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a29e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e000      	b.n	800a2a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a2a4:	2302      	movs	r3, #2
  }
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68da      	ldr	r2, [r3, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff fcd8 	bl	8009c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08c      	sub	sp, #48	@ 0x30
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b22      	cmp	r3, #34	@ 0x22
 800a2f4:	f040 80ae 	bne.w	800a454 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a300:	d117      	bne.n	800a332 <UART_Receive_IT+0x50>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d113      	bne.n	800a332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a312:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a320:	b29a      	uxth	r2, r3
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	1c9a      	adds	r2, r3, #2
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a330:	e026      	b.n	800a380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a336:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a344:	d007      	beq.n	800a356 <UART_Receive_IT+0x74>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <UART_Receive_IT+0x82>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	e008      	b.n	800a376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a370:	b2da      	uxtb	r2, r3
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b01      	subs	r3, #1
 800a388:	b29b      	uxth	r3, r3
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4619      	mov	r1, r3
 800a38e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a390:	2b00      	cmp	r3, #0
 800a392:	d15d      	bne.n	800a450 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0220 	bic.w	r2, r2, #32
 800a3a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	695a      	ldr	r2, [r3, #20]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0201 	bic.w	r2, r2, #1
 800a3c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d135      	bne.n	800a446 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	330c      	adds	r3, #12
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a400:	623a      	str	r2, [r7, #32]
 800a402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	69f9      	ldr	r1, [r7, #28]
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e5      	bne.n	800a3e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d10a      	bne.n	800a438 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7f8 f828 	bl	8002494 <HAL_UARTEx_RxEventCallback>
 800a444:	e002      	b.n	800a44c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7ff fc32 	bl	8009cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e002      	b.n	800a456 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	e000      	b.n	800a456 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a454:	2302      	movs	r3, #2
  }
}
 800a456:	4618      	mov	r0, r3
 800a458:	3730      	adds	r7, #48	@ 0x30
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a464:	b0c0      	sub	sp, #256	@ 0x100
 800a466:	af00      	add	r7, sp, #0
 800a468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a47c:	68d9      	ldr	r1, [r3, #12]
 800a47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	ea40 0301 	orr.w	r3, r0, r1
 800a488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	431a      	orrs	r2, r3
 800a498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a4b8:	f021 010c 	bic.w	r1, r1, #12
 800a4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a4c6:	430b      	orrs	r3, r1
 800a4c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4da:	6999      	ldr	r1, [r3, #24]
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	ea40 0301 	orr.w	r3, r0, r1
 800a4e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b8f      	ldr	r3, [pc, #572]	@ (800a72c <UART_SetConfig+0x2cc>)
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d005      	beq.n	800a500 <UART_SetConfig+0xa0>
 800a4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	4b8d      	ldr	r3, [pc, #564]	@ (800a730 <UART_SetConfig+0x2d0>)
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d104      	bne.n	800a50a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a500:	f7fd fd1a 	bl	8007f38 <HAL_RCC_GetPCLK2Freq>
 800a504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a508:	e003      	b.n	800a512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a50a:	f7fd fd01 	bl	8007f10 <HAL_RCC_GetPCLK1Freq>
 800a50e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a51c:	f040 810c 	bne.w	800a738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a524:	2200      	movs	r2, #0
 800a526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a52a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a52e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	1891      	adds	r1, r2, r2
 800a538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a53a:	415b      	adcs	r3, r3
 800a53c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a53e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a542:	4621      	mov	r1, r4
 800a544:	eb12 0801 	adds.w	r8, r2, r1
 800a548:	4629      	mov	r1, r5
 800a54a:	eb43 0901 	adc.w	r9, r3, r1
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a55a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a55e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a562:	4690      	mov	r8, r2
 800a564:	4699      	mov	r9, r3
 800a566:	4623      	mov	r3, r4
 800a568:	eb18 0303 	adds.w	r3, r8, r3
 800a56c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a570:	462b      	mov	r3, r5
 800a572:	eb49 0303 	adc.w	r3, r9, r3
 800a576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a58a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a58e:	460b      	mov	r3, r1
 800a590:	18db      	adds	r3, r3, r3
 800a592:	653b      	str	r3, [r7, #80]	@ 0x50
 800a594:	4613      	mov	r3, r2
 800a596:	eb42 0303 	adc.w	r3, r2, r3
 800a59a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a59c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a5a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a5a4:	f7f6 fab2 	bl	8000b0c <__aeabi_uldivmod>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4b61      	ldr	r3, [pc, #388]	@ (800a734 <UART_SetConfig+0x2d4>)
 800a5ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a5b2:	095b      	lsrs	r3, r3, #5
 800a5b4:	011c      	lsls	r4, r3, #4
 800a5b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a5c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	464b      	mov	r3, r9
 800a5cc:	1891      	adds	r1, r2, r2
 800a5ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a5d0:	415b      	adcs	r3, r3
 800a5d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a5d8:	4641      	mov	r1, r8
 800a5da:	eb12 0a01 	adds.w	sl, r2, r1
 800a5de:	4649      	mov	r1, r9
 800a5e0:	eb43 0b01 	adc.w	fp, r3, r1
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5f8:	4692      	mov	sl, r2
 800a5fa:	469b      	mov	fp, r3
 800a5fc:	4643      	mov	r3, r8
 800a5fe:	eb1a 0303 	adds.w	r3, sl, r3
 800a602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a606:	464b      	mov	r3, r9
 800a608:	eb4b 0303 	adc.w	r3, fp, r3
 800a60c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a61c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a624:	460b      	mov	r3, r1
 800a626:	18db      	adds	r3, r3, r3
 800a628:	643b      	str	r3, [r7, #64]	@ 0x40
 800a62a:	4613      	mov	r3, r2
 800a62c:	eb42 0303 	adc.w	r3, r2, r3
 800a630:	647b      	str	r3, [r7, #68]	@ 0x44
 800a632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a63a:	f7f6 fa67 	bl	8000b0c <__aeabi_uldivmod>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4611      	mov	r1, r2
 800a644:	4b3b      	ldr	r3, [pc, #236]	@ (800a734 <UART_SetConfig+0x2d4>)
 800a646:	fba3 2301 	umull	r2, r3, r3, r1
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	2264      	movs	r2, #100	@ 0x64
 800a64e:	fb02 f303 	mul.w	r3, r2, r3
 800a652:	1acb      	subs	r3, r1, r3
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a65a:	4b36      	ldr	r3, [pc, #216]	@ (800a734 <UART_SetConfig+0x2d4>)
 800a65c:	fba3 2302 	umull	r2, r3, r3, r2
 800a660:	095b      	lsrs	r3, r3, #5
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a668:	441c      	add	r4, r3
 800a66a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a67c:	4642      	mov	r2, r8
 800a67e:	464b      	mov	r3, r9
 800a680:	1891      	adds	r1, r2, r2
 800a682:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a684:	415b      	adcs	r3, r3
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a68c:	4641      	mov	r1, r8
 800a68e:	1851      	adds	r1, r2, r1
 800a690:	6339      	str	r1, [r7, #48]	@ 0x30
 800a692:	4649      	mov	r1, r9
 800a694:	414b      	adcs	r3, r1
 800a696:	637b      	str	r3, [r7, #52]	@ 0x34
 800a698:	f04f 0200 	mov.w	r2, #0
 800a69c:	f04f 0300 	mov.w	r3, #0
 800a6a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a6a4:	4659      	mov	r1, fp
 800a6a6:	00cb      	lsls	r3, r1, #3
 800a6a8:	4651      	mov	r1, sl
 800a6aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6ae:	4651      	mov	r1, sl
 800a6b0:	00ca      	lsls	r2, r1, #3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	189b      	adds	r3, r3, r2
 800a6bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	460a      	mov	r2, r1
 800a6c4:	eb42 0303 	adc.w	r3, r2, r3
 800a6c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a6dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	18db      	adds	r3, r3, r3
 800a6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	eb42 0303 	adc.w	r3, r2, r3
 800a6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a6f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a6f6:	f7f6 fa09 	bl	8000b0c <__aeabi_uldivmod>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a734 <UART_SetConfig+0x2d4>)
 800a700:	fba3 1302 	umull	r1, r3, r3, r2
 800a704:	095b      	lsrs	r3, r3, #5
 800a706:	2164      	movs	r1, #100	@ 0x64
 800a708:	fb01 f303 	mul.w	r3, r1, r3
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	3332      	adds	r3, #50	@ 0x32
 800a712:	4a08      	ldr	r2, [pc, #32]	@ (800a734 <UART_SetConfig+0x2d4>)
 800a714:	fba2 2303 	umull	r2, r3, r2, r3
 800a718:	095b      	lsrs	r3, r3, #5
 800a71a:	f003 0207 	and.w	r2, r3, #7
 800a71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4422      	add	r2, r4
 800a726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a728:	e106      	b.n	800a938 <UART_SetConfig+0x4d8>
 800a72a:	bf00      	nop
 800a72c:	40011000 	.word	0x40011000
 800a730:	40011400 	.word	0x40011400
 800a734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a73c:	2200      	movs	r2, #0
 800a73e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a74a:	4642      	mov	r2, r8
 800a74c:	464b      	mov	r3, r9
 800a74e:	1891      	adds	r1, r2, r2
 800a750:	6239      	str	r1, [r7, #32]
 800a752:	415b      	adcs	r3, r3
 800a754:	627b      	str	r3, [r7, #36]	@ 0x24
 800a756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a75a:	4641      	mov	r1, r8
 800a75c:	1854      	adds	r4, r2, r1
 800a75e:	4649      	mov	r1, r9
 800a760:	eb43 0501 	adc.w	r5, r3, r1
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	00eb      	lsls	r3, r5, #3
 800a76e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a772:	00e2      	lsls	r2, r4, #3
 800a774:	4614      	mov	r4, r2
 800a776:	461d      	mov	r5, r3
 800a778:	4643      	mov	r3, r8
 800a77a:	18e3      	adds	r3, r4, r3
 800a77c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a780:	464b      	mov	r3, r9
 800a782:	eb45 0303 	adc.w	r3, r5, r3
 800a786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a79a:	f04f 0200 	mov.w	r2, #0
 800a79e:	f04f 0300 	mov.w	r3, #0
 800a7a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	008b      	lsls	r3, r1, #2
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	008a      	lsls	r2, r1, #2
 800a7b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a7b8:	f7f6 f9a8 	bl	8000b0c <__aeabi_uldivmod>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4b60      	ldr	r3, [pc, #384]	@ (800a944 <UART_SetConfig+0x4e4>)
 800a7c2:	fba3 2302 	umull	r2, r3, r3, r2
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	011c      	lsls	r4, r3, #4
 800a7ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a7d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a7dc:	4642      	mov	r2, r8
 800a7de:	464b      	mov	r3, r9
 800a7e0:	1891      	adds	r1, r2, r2
 800a7e2:	61b9      	str	r1, [r7, #24]
 800a7e4:	415b      	adcs	r3, r3
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	1851      	adds	r1, r2, r1
 800a7f0:	6139      	str	r1, [r7, #16]
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	414b      	adcs	r3, r1
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	f04f 0200 	mov.w	r2, #0
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a804:	4659      	mov	r1, fp
 800a806:	00cb      	lsls	r3, r1, #3
 800a808:	4651      	mov	r1, sl
 800a80a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a80e:	4651      	mov	r1, sl
 800a810:	00ca      	lsls	r2, r1, #3
 800a812:	4610      	mov	r0, r2
 800a814:	4619      	mov	r1, r3
 800a816:	4603      	mov	r3, r0
 800a818:	4642      	mov	r2, r8
 800a81a:	189b      	adds	r3, r3, r2
 800a81c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a820:	464b      	mov	r3, r9
 800a822:	460a      	mov	r2, r1
 800a824:	eb42 0303 	adc.w	r3, r2, r3
 800a828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a838:	f04f 0200 	mov.w	r2, #0
 800a83c:	f04f 0300 	mov.w	r3, #0
 800a840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a844:	4649      	mov	r1, r9
 800a846:	008b      	lsls	r3, r1, #2
 800a848:	4641      	mov	r1, r8
 800a84a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a84e:	4641      	mov	r1, r8
 800a850:	008a      	lsls	r2, r1, #2
 800a852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a856:	f7f6 f959 	bl	8000b0c <__aeabi_uldivmod>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	4b38      	ldr	r3, [pc, #224]	@ (800a944 <UART_SetConfig+0x4e4>)
 800a862:	fba3 2301 	umull	r2, r3, r3, r1
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	2264      	movs	r2, #100	@ 0x64
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	1acb      	subs	r3, r1, r3
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	3332      	adds	r3, #50	@ 0x32
 800a874:	4a33      	ldr	r2, [pc, #204]	@ (800a944 <UART_SetConfig+0x4e4>)
 800a876:	fba2 2303 	umull	r2, r3, r2, r3
 800a87a:	095b      	lsrs	r3, r3, #5
 800a87c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a880:	441c      	add	r4, r3
 800a882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a886:	2200      	movs	r2, #0
 800a888:	673b      	str	r3, [r7, #112]	@ 0x70
 800a88a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a88c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	1891      	adds	r1, r2, r2
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	415b      	adcs	r3, r3
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	1851      	adds	r1, r2, r1
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	414b      	adcs	r3, r1
 800a8aa:	607b      	str	r3, [r7, #4]
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a8b8:	4659      	mov	r1, fp
 800a8ba:	00cb      	lsls	r3, r1, #3
 800a8bc:	4651      	mov	r1, sl
 800a8be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8c2:	4651      	mov	r1, sl
 800a8c4:	00ca      	lsls	r2, r1, #3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	189b      	adds	r3, r3, r2
 800a8d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	460a      	mov	r2, r1
 800a8d6:	eb42 0303 	adc.w	r3, r2, r3
 800a8da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8e6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	f04f 0300 	mov.w	r3, #0
 800a8f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	008b      	lsls	r3, r1, #2
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8fe:	4641      	mov	r1, r8
 800a900:	008a      	lsls	r2, r1, #2
 800a902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a906:	f7f6 f901 	bl	8000b0c <__aeabi_uldivmod>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4b0d      	ldr	r3, [pc, #52]	@ (800a944 <UART_SetConfig+0x4e4>)
 800a910:	fba3 1302 	umull	r1, r3, r3, r2
 800a914:	095b      	lsrs	r3, r3, #5
 800a916:	2164      	movs	r1, #100	@ 0x64
 800a918:	fb01 f303 	mul.w	r3, r1, r3
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	3332      	adds	r3, #50	@ 0x32
 800a922:	4a08      	ldr	r2, [pc, #32]	@ (800a944 <UART_SetConfig+0x4e4>)
 800a924:	fba2 2303 	umull	r2, r3, r2, r3
 800a928:	095b      	lsrs	r3, r3, #5
 800a92a:	f003 020f 	and.w	r2, r3, #15
 800a92e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4422      	add	r2, r4
 800a936:	609a      	str	r2, [r3, #8]
}
 800a938:	bf00      	nop
 800a93a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a93e:	46bd      	mov	sp, r7
 800a940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a944:	51eb851f 	.word	0x51eb851f

0800a948 <__NVIC_SetPriority>:
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	db0a      	blt.n	800a972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	490c      	ldr	r1, [pc, #48]	@ (800a994 <__NVIC_SetPriority+0x4c>)
 800a962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a966:	0112      	lsls	r2, r2, #4
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	440b      	add	r3, r1
 800a96c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a970:	e00a      	b.n	800a988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	b2da      	uxtb	r2, r3
 800a976:	4908      	ldr	r1, [pc, #32]	@ (800a998 <__NVIC_SetPriority+0x50>)
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	3b04      	subs	r3, #4
 800a980:	0112      	lsls	r2, r2, #4
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	440b      	add	r3, r1
 800a986:	761a      	strb	r2, [r3, #24]
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	e000e100 	.word	0xe000e100
 800a998:	e000ed00 	.word	0xe000ed00

0800a99c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	f06f 0004 	mvn.w	r0, #4
 800a9a6:	f7ff ffcf 	bl	800a948 <__NVIC_SetPriority>
#endif
}
 800a9aa:	bf00      	nop
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9b6:	f3ef 8305 	mrs	r3, IPSR
 800a9ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a9bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9c2:	f06f 0305 	mvn.w	r3, #5
 800a9c6:	607b      	str	r3, [r7, #4]
 800a9c8:	e00c      	b.n	800a9e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f4 <osKernelInitialize+0x44>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d105      	bne.n	800a9de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9d2:	4b08      	ldr	r3, [pc, #32]	@ (800a9f4 <osKernelInitialize+0x44>)
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	607b      	str	r3, [r7, #4]
 800a9dc:	e002      	b.n	800a9e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9e4:	687b      	ldr	r3, [r7, #4]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000df0 	.word	0x20000df0

0800a9f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9fe:	f3ef 8305 	mrs	r3, IPSR
 800aa02:	603b      	str	r3, [r7, #0]
  return(result);
 800aa04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <osKernelStart+0x1a>
    stat = osErrorISR;
 800aa0a:	f06f 0305 	mvn.w	r3, #5
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	e010      	b.n	800aa34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa12:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <osKernelStart+0x48>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d109      	bne.n	800aa2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa1a:	f7ff ffbf 	bl	800a99c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa1e:	4b08      	ldr	r3, [pc, #32]	@ (800aa40 <osKernelStart+0x48>)
 800aa20:	2202      	movs	r2, #2
 800aa22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa24:	f001 f892 	bl	800bb4c <vTaskStartScheduler>
      stat = osOK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	e002      	b.n	800aa34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa34:	687b      	ldr	r3, [r7, #4]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000df0 	.word	0x20000df0

0800aa44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08e      	sub	sp, #56	@ 0x38
 800aa48:	af04      	add	r7, sp, #16
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa54:	f3ef 8305 	mrs	r3, IPSR
 800aa58:	617b      	str	r3, [r7, #20]
  return(result);
 800aa5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d17e      	bne.n	800ab5e <osThreadNew+0x11a>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d07b      	beq.n	800ab5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa66:	2380      	movs	r3, #128	@ 0x80
 800aa68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa6a:	2318      	movs	r3, #24
 800aa6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aa72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d045      	beq.n	800ab0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <osThreadNew+0x48>
        name = attr->name;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <osThreadNew+0x6e>
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2b38      	cmp	r3, #56	@ 0x38
 800aaa4:	d805      	bhi.n	800aab2 <osThreadNew+0x6e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <osThreadNew+0x72>
        return (NULL);
 800aab2:	2300      	movs	r3, #0
 800aab4:	e054      	b.n	800ab60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	089b      	lsrs	r3, r3, #2
 800aac4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00e      	beq.n	800aaec <osThreadNew+0xa8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	2ba7      	cmp	r3, #167	@ 0xa7
 800aad4:	d90a      	bls.n	800aaec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d006      	beq.n	800aaec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <osThreadNew+0xa8>
        mem = 1;
 800aae6:	2301      	movs	r3, #1
 800aae8:	61bb      	str	r3, [r7, #24]
 800aaea:	e010      	b.n	800ab0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10c      	bne.n	800ab0e <osThreadNew+0xca>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d108      	bne.n	800ab0e <osThreadNew+0xca>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <osThreadNew+0xca>
          mem = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61bb      	str	r3, [r7, #24]
 800ab08:	e001      	b.n	800ab0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d110      	bne.n	800ab36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab1c:	9202      	str	r2, [sp, #8]
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6a3a      	ldr	r2, [r7, #32]
 800ab28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 fe1a 	bl	800b764 <xTaskCreateStatic>
 800ab30:	4603      	mov	r3, r0
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	e013      	b.n	800ab5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d110      	bne.n	800ab5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	f107 0310 	add.w	r3, r7, #16
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fe68 	bl	800b824 <xTaskCreate>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d001      	beq.n	800ab5e <osThreadNew+0x11a>
            hTask = NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab5e:	693b      	ldr	r3, [r7, #16]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3728      	adds	r7, #40	@ 0x28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab70:	f3ef 8305 	mrs	r3, IPSR
 800ab74:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <osDelay+0x1c>
    stat = osErrorISR;
 800ab7c:	f06f 0305 	mvn.w	r3, #5
 800ab80:	60fb      	str	r3, [r7, #12]
 800ab82:	e007      	b.n	800ab94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 ffa6 	bl	800bae0 <vTaskDelay>
    }
  }

  return (stat);
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
	...

0800aba0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4a07      	ldr	r2, [pc, #28]	@ (800abcc <vApplicationGetIdleTaskMemory+0x2c>)
 800abb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4a06      	ldr	r2, [pc, #24]	@ (800abd0 <vApplicationGetIdleTaskMemory+0x30>)
 800abb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2280      	movs	r2, #128	@ 0x80
 800abbc:	601a      	str	r2, [r3, #0]
}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000df4 	.word	0x20000df4
 800abd0:	20000e9c 	.word	0x20000e9c

0800abd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a07      	ldr	r2, [pc, #28]	@ (800ac00 <vApplicationGetTimerTaskMemory+0x2c>)
 800abe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	4a06      	ldr	r2, [pc, #24]	@ (800ac04 <vApplicationGetTimerTaskMemory+0x30>)
 800abea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abf2:	601a      	str	r2, [r3, #0]
}
 800abf4:	bf00      	nop
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	2000109c 	.word	0x2000109c
 800ac04:	20001144 	.word	0x20001144

0800ac08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f103 0208 	add.w	r2, r3, #8
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f103 0208 	add.w	r2, r3, #8
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f103 0208 	add.w	r2, r3, #8
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	689a      	ldr	r2, [r3, #8]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	601a      	str	r2, [r3, #0]
}
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acc0:	d103      	bne.n	800acca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	e00c      	b.n	800ace4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3308      	adds	r3, #8
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e002      	b.n	800acd8 <vListInsert+0x2e>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d2f6      	bcs.n	800acd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
}
 800ad10:	bf00      	nop
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6892      	ldr	r2, [r2, #8]
 800ad32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6852      	ldr	r2, [r2, #4]
 800ad3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d103      	bne.n	800ad50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	1e5a      	subs	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10b      	bne.n	800ad9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad96:	bf00      	nop
 800ad98:	bf00      	nop
 800ad9a:	e7fd      	b.n	800ad98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad9c:	f002 fa84 	bl	800d2a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800adac:	fb01 f303 	mul.w	r3, r1, r3
 800adb0:	441a      	add	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adcc:	3b01      	subs	r3, #1
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800add2:	fb01 f303 	mul.w	r3, r1, r3
 800add6:	441a      	add	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	22ff      	movs	r2, #255	@ 0xff
 800ade0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	22ff      	movs	r2, #255	@ 0xff
 800ade8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d114      	bne.n	800ae1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01a      	beq.n	800ae30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3310      	adds	r3, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 fa3c 	bl	800c27c <xTaskRemoveFromEventList>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d012      	beq.n	800ae30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae40 <xQueueGenericReset+0xd0>)
 800ae0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	e009      	b.n	800ae30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3310      	adds	r3, #16
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fef1 	bl	800ac08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3324      	adds	r3, #36	@ 0x24
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff feec 	bl	800ac08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae30:	f002 fa6c 	bl	800d30c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae34:	2301      	movs	r3, #1
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08e      	sub	sp, #56	@ 0x38
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae6a:	bf00      	nop
 800ae6c:	bf00      	nop
 800ae6e:	e7fd      	b.n	800ae6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10b      	bne.n	800ae8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	e7fd      	b.n	800ae8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <xQueueGenericCreateStatic+0x56>
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <xQueueGenericCreateStatic+0x5a>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <xQueueGenericCreateStatic+0x5c>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	623b      	str	r3, [r7, #32]
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <xQueueGenericCreateStatic+0x84>
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <xQueueGenericCreateStatic+0x88>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <xQueueGenericCreateStatic+0x8a>
 800aecc:	2300      	movs	r3, #0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10b      	bne.n	800aeea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	61fb      	str	r3, [r7, #28]
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aeea:	2350      	movs	r3, #80	@ 0x50
 800aeec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b50      	cmp	r3, #80	@ 0x50
 800aef2:	d00b      	beq.n	800af0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	61bb      	str	r3, [r7, #24]
}
 800af06:	bf00      	nop
 800af08:	bf00      	nop
 800af0a:	e7fd      	b.n	800af08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800af12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00d      	beq.n	800af34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4613      	mov	r3, r2
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f805 	bl	800af3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800af36:	4618      	mov	r0, r3
 800af38:	3730      	adds	r7, #48	@ 0x30
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	e002      	b.n	800af60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af6c:	2101      	movs	r1, #1
 800af6e:	69b8      	ldr	r0, [r7, #24]
 800af70:	f7ff fefe 	bl	800ad70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	78fa      	ldrb	r2, [r7, #3]
 800af78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08e      	sub	sp, #56	@ 0x38
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af92:	2300      	movs	r3, #0
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <xQueueGenericSend+0x34>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d103      	bne.n	800afc6 <xQueueGenericSend+0x42>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <xQueueGenericSend+0x46>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <xQueueGenericSend+0x48>
 800afca:	2300      	movs	r3, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10b      	bne.n	800afe8 <xQueueGenericSend+0x64>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d103      	bne.n	800aff6 <xQueueGenericSend+0x72>
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <xQueueGenericSend+0x76>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <xQueueGenericSend+0x78>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <xQueueGenericSend+0x94>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b018:	f001 faf6 	bl	800c608 <xTaskGetSchedulerState>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d102      	bne.n	800b028 <xQueueGenericSend+0xa4>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <xQueueGenericSend+0xa8>
 800b028:	2301      	movs	r3, #1
 800b02a:	e000      	b.n	800b02e <xQueueGenericSend+0xaa>
 800b02c:	2300      	movs	r3, #0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10b      	bne.n	800b04a <xQueueGenericSend+0xc6>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	61fb      	str	r3, [r7, #28]
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	e7fd      	b.n	800b046 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b04a:	f002 f92d 	bl	800d2a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b056:	429a      	cmp	r2, r3
 800b058:	d302      	bcc.n	800b060 <xQueueGenericSend+0xdc>
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d129      	bne.n	800b0b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b066:	f000 fa0f 	bl	800b488 <prvCopyDataToQueue>
 800b06a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d010      	beq.n	800b096 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	3324      	adds	r3, #36	@ 0x24
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f8ff 	bl	800c27c <xTaskRemoveFromEventList>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d013      	beq.n	800b0ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b084:	4b3f      	ldr	r3, [pc, #252]	@ (800b184 <xQueueGenericSend+0x200>)
 800b086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	e00a      	b.n	800b0ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d007      	beq.n	800b0ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b09c:	4b39      	ldr	r3, [pc, #228]	@ (800b184 <xQueueGenericSend+0x200>)
 800b09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0ac:	f002 f92e 	bl	800d30c <vPortExitCritical>
				return pdPASS;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e063      	b.n	800b17c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0ba:	f002 f927 	bl	800d30c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e05c      	b.n	800b17c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d106      	bne.n	800b0d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f939 	bl	800c344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0d6:	f002 f919 	bl	800d30c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0da:	f000 fda7 	bl	800bc2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0de:	f002 f8e3 	bl	800d2a8 <vPortEnterCritical>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ee:	d103      	bne.n	800b0f8 <xQueueGenericSend+0x174>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0fe:	b25b      	sxtb	r3, r3
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b104:	d103      	bne.n	800b10e <xQueueGenericSend+0x18a>
 800b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b10e:	f002 f8fd 	bl	800d30c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b112:	1d3a      	adds	r2, r7, #4
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f928 	bl	800c370 <xTaskCheckForTimeOut>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d124      	bne.n	800b170 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b126:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b128:	f000 faa6 	bl	800b678 <prvIsQueueFull>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d018      	beq.n	800b164 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	3310      	adds	r3, #16
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 f84c 	bl	800c1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b142:	f000 fa31 	bl	800b5a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b146:	f000 fd7f 	bl	800bc48 <xTaskResumeAll>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f af7c 	bne.w	800b04a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b152:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <xQueueGenericSend+0x200>)
 800b154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	e772      	b.n	800b04a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b166:	f000 fa1f 	bl	800b5a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b16a:	f000 fd6d 	bl	800bc48 <xTaskResumeAll>
 800b16e:	e76c      	b.n	800b04a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b172:	f000 fa19 	bl	800b5a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b176:	f000 fd67 	bl	800bc48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b17a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3738      	adds	r7, #56	@ 0x38
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b090      	sub	sp, #64	@ 0x40
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10b      	bne.n	800b1b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	e7fd      	b.n	800b1b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSendFromISR+0x3e>
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericSendFromISR+0x42>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericSendFromISR+0x44>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10b      	bne.n	800b1e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d103      	bne.n	800b1f6 <xQueueGenericSendFromISR+0x6e>
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <xQueueGenericSendFromISR+0x72>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <xQueueGenericSendFromISR+0x74>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	623b      	str	r3, [r7, #32]
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	e7fd      	b.n	800b214 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b218:	f002 f926 	bl	800d468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b21c:	f3ef 8211 	mrs	r2, BASEPRI
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	61fa      	str	r2, [r7, #28]
 800b232:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b234:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b236:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b240:	429a      	cmp	r2, r3
 800b242:	d302      	bcc.n	800b24a <xQueueGenericSendFromISR+0xc2>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d12f      	bne.n	800b2aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b258:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	68b9      	ldr	r1, [r7, #8]
 800b25e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b260:	f000 f912 	bl	800b488 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b264:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b26c:	d112      	bne.n	800b294 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	d016      	beq.n	800b2a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b278:	3324      	adds	r3, #36	@ 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fffe 	bl	800c27c <xTaskRemoveFromEventList>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00e      	beq.n	800b2a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00b      	beq.n	800b2a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e007      	b.n	800b2a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b294:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b298:	3301      	adds	r3, #1
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	b25a      	sxtb	r2, r3
 800b29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b2a8:	e001      	b.n	800b2ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3740      	adds	r7, #64	@ 0x40
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08c      	sub	sp, #48	@ 0x30
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10b      	bne.n	800b2f6 <xQueueReceive+0x32>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	623b      	str	r3, [r7, #32]
}
 800b2f0:	bf00      	nop
 800b2f2:	bf00      	nop
 800b2f4:	e7fd      	b.n	800b2f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d103      	bne.n	800b304 <xQueueReceive+0x40>
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <xQueueReceive+0x44>
 800b304:	2301      	movs	r3, #1
 800b306:	e000      	b.n	800b30a <xQueueReceive+0x46>
 800b308:	2300      	movs	r3, #0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10b      	bne.n	800b326 <xQueueReceive+0x62>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	61fb      	str	r3, [r7, #28]
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	e7fd      	b.n	800b322 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b326:	f001 f96f 	bl	800c608 <xTaskGetSchedulerState>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueReceive+0x72>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueReceive+0x76>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueReceive+0x78>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10b      	bne.n	800b358 <xQueueReceive+0x94>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61bb      	str	r3, [r7, #24]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b358:	f001 ffa6 	bl	800d2a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b360:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01f      	beq.n	800b3a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b368:	68b9      	ldr	r1, [r7, #8]
 800b36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b36c:	f000 f8f6 	bl	800b55c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	1e5a      	subs	r2, r3, #1
 800b374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b376:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00f      	beq.n	800b3a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	3310      	adds	r3, #16
 800b384:	4618      	mov	r0, r3
 800b386:	f000 ff79 	bl	800c27c <xTaskRemoveFromEventList>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b390:	4b3c      	ldr	r3, [pc, #240]	@ (800b484 <xQueueReceive+0x1c0>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3a0:	f001 ffb4 	bl	800d30c <vPortExitCritical>
				return pdPASS;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e069      	b.n	800b47c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d103      	bne.n	800b3b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3ae:	f001 ffad 	bl	800d30c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e062      	b.n	800b47c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3bc:	f107 0310 	add.w	r3, r7, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 ffbf 	bl	800c344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ca:	f001 ff9f 	bl	800d30c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ce:	f000 fc2d 	bl	800bc2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3d2:	f001 ff69 	bl	800d2a8 <vPortEnterCritical>
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3dc:	b25b      	sxtb	r3, r3
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e2:	d103      	bne.n	800b3ec <xQueueReceive+0x128>
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f8:	d103      	bne.n	800b402 <xQueueReceive+0x13e>
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b402:	f001 ff83 	bl	800d30c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b406:	1d3a      	adds	r2, r7, #4
 800b408:	f107 0310 	add.w	r3, r7, #16
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 ffae 	bl	800c370 <xTaskCheckForTimeOut>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d123      	bne.n	800b462 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b41c:	f000 f916 	bl	800b64c <prvIsQueueEmpty>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d017      	beq.n	800b456 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b428:	3324      	adds	r3, #36	@ 0x24
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fed2 	bl	800c1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b436:	f000 f8b7 	bl	800b5a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b43a:	f000 fc05 	bl	800bc48 <xTaskResumeAll>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d189      	bne.n	800b358 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b444:	4b0f      	ldr	r3, [pc, #60]	@ (800b484 <xQueueReceive+0x1c0>)
 800b446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	e780      	b.n	800b358 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b458:	f000 f8a6 	bl	800b5a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b45c:	f000 fbf4 	bl	800bc48 <xTaskResumeAll>
 800b460:	e77a      	b.n	800b358 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b464:	f000 f8a0 	bl	800b5a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b468:	f000 fbee 	bl	800bc48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b46c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b46e:	f000 f8ed 	bl	800b64c <prvIsQueueEmpty>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	f43f af6f 	beq.w	800b358 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b47a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3730      	adds	r7, #48	@ 0x30
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	e000ed04 	.word	0xe000ed04

0800b488 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b494:	2300      	movs	r3, #0
 800b496:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10d      	bne.n	800b4c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d14d      	bne.n	800b54a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 f8c6 	bl	800c644 <xTaskPriorityDisinherit>
 800b4b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	609a      	str	r2, [r3, #8]
 800b4c0:	e043      	b.n	800b54a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d119      	bne.n	800b4fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6858      	ldr	r0, [r3, #4]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	f002 faaa 	bl	800da2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e0:	441a      	add	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d32b      	bcc.n	800b54a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	e026      	b.n	800b54a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68d8      	ldr	r0, [r3, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b504:	461a      	mov	r2, r3
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	f002 fa90 	bl	800da2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b514:	425b      	negs	r3, r3
 800b516:	441a      	add	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68da      	ldr	r2, [r3, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	429a      	cmp	r2, r3
 800b526:	d207      	bcs.n	800b538 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b530:	425b      	negs	r3, r3
 800b532:	441a      	add	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d105      	bne.n	800b54a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3b01      	subs	r3, #1
 800b548:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b552:	697b      	ldr	r3, [r7, #20]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d018      	beq.n	800b5a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68da      	ldr	r2, [r3, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b576:	441a      	add	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	429a      	cmp	r2, r3
 800b586:	d303      	bcc.n	800b590 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68d9      	ldr	r1, [r3, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b598:	461a      	mov	r2, r3
 800b59a:	6838      	ldr	r0, [r7, #0]
 800b59c:	f002 fa46 	bl	800da2c <memcpy>
	}
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5b0:	f001 fe7a 	bl	800d2a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5bc:	e011      	b.n	800b5e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d012      	beq.n	800b5ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3324      	adds	r3, #36	@ 0x24
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fe56 	bl	800c27c <xTaskRemoveFromEventList>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5d6:	f000 ff2f 	bl	800c438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dce9      	bgt.n	800b5be <prvUnlockQueue+0x16>
 800b5ea:	e000      	b.n	800b5ee <prvUnlockQueue+0x46>
					break;
 800b5ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	22ff      	movs	r2, #255	@ 0xff
 800b5f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b5f6:	f001 fe89 	bl	800d30c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5fa:	f001 fe55 	bl	800d2a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b604:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b606:	e011      	b.n	800b62c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d012      	beq.n	800b636 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3310      	adds	r3, #16
 800b614:	4618      	mov	r0, r3
 800b616:	f000 fe31 	bl	800c27c <xTaskRemoveFromEventList>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b620:	f000 ff0a 	bl	800c438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	3b01      	subs	r3, #1
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b62c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b630:	2b00      	cmp	r3, #0
 800b632:	dce9      	bgt.n	800b608 <prvUnlockQueue+0x60>
 800b634:	e000      	b.n	800b638 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b636:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	22ff      	movs	r2, #255	@ 0xff
 800b63c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b640:	f001 fe64 	bl	800d30c <vPortExitCritical>
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b654:	f001 fe28 	bl	800d2a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b660:	2301      	movs	r3, #1
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e001      	b.n	800b66a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b66a:	f001 fe4f 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800b66e:	68fb      	ldr	r3, [r7, #12]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b680:	f001 fe12 	bl	800d2a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d102      	bne.n	800b696 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b690:	2301      	movs	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e001      	b.n	800b69a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b69a:	f001 fe37 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e014      	b.n	800b6e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800b6f8 <vQueueAddToRegistry+0x50>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6c4:	490c      	ldr	r1, [pc, #48]	@ (800b6f8 <vQueueAddToRegistry+0x50>)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b6f8 <vQueueAddToRegistry+0x50>)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	4413      	add	r3, r2
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6da:	e006      	b.n	800b6ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b07      	cmp	r3, #7
 800b6e6:	d9e7      	bls.n	800b6b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b6e8:	bf00      	nop
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	20001544 	.word	0x20001544

0800b6fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b70c:	f001 fdcc 	bl	800d2a8 <vPortEnterCritical>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b716:	b25b      	sxtb	r3, r3
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b71c:	d103      	bne.n	800b726 <vQueueWaitForMessageRestricted+0x2a>
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b72c:	b25b      	sxtb	r3, r3
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b732:	d103      	bne.n	800b73c <vQueueWaitForMessageRestricted+0x40>
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b73c:	f001 fde6 	bl	800d30c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	3324      	adds	r3, #36	@ 0x24
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	68b9      	ldr	r1, [r7, #8]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fd67 	bl	800c224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b756:	6978      	ldr	r0, [r7, #20]
 800b758:	f7ff ff26 	bl	800b5a8 <prvUnlockQueue>
	}
 800b75c:	bf00      	nop
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08e      	sub	sp, #56	@ 0x38
 800b768:	af04      	add	r7, sp, #16
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10b      	bne.n	800b790 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	623b      	str	r3, [r7, #32]
}
 800b78a:	bf00      	nop
 800b78c:	bf00      	nop
 800b78e:	e7fd      	b.n	800b78c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <xTaskCreateStatic+0x4a>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	61fb      	str	r3, [r7, #28]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7ae:	23a8      	movs	r3, #168	@ 0xa8
 800b7b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2ba8      	cmp	r3, #168	@ 0xa8
 800b7b6:	d00b      	beq.n	800b7d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	61bb      	str	r3, [r7, #24]
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01e      	beq.n	800b816 <xTaskCreateStatic+0xb2>
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d01b      	beq.n	800b816 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	9303      	str	r3, [sp, #12]
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	9302      	str	r3, [sp, #8]
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f851 	bl	800b8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b80e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b810:	f000 f8f6 	bl	800ba00 <prvAddNewTaskToReadyList>
 800b814:	e001      	b.n	800b81a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b81a:	697b      	ldr	r3, [r7, #20]
	}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3728      	adds	r7, #40	@ 0x28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08c      	sub	sp, #48	@ 0x30
 800b828:	af04      	add	r7, sp, #16
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	4613      	mov	r3, r2
 800b832:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b834:	88fb      	ldrh	r3, [r7, #6]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4618      	mov	r0, r3
 800b83a:	f001 fe57 	bl	800d4ec <pvPortMalloc>
 800b83e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00e      	beq.n	800b864 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b846:	20a8      	movs	r0, #168	@ 0xa8
 800b848:	f001 fe50 	bl	800d4ec <pvPortMalloc>
 800b84c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	631a      	str	r2, [r3, #48]	@ 0x30
 800b85a:	e005      	b.n	800b868 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b85c:	6978      	ldr	r0, [r7, #20]
 800b85e:	f001 ff13 	bl	800d688 <vPortFree>
 800b862:	e001      	b.n	800b868 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d017      	beq.n	800b89e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b876:	88fa      	ldrh	r2, [r7, #6]
 800b878:	2300      	movs	r3, #0
 800b87a:	9303      	str	r3, [sp, #12]
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f80f 	bl	800b8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b892:	69f8      	ldr	r0, [r7, #28]
 800b894:	f000 f8b4 	bl	800ba00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b898:	2301      	movs	r3, #1
 800b89a:	61bb      	str	r3, [r7, #24]
 800b89c:	e002      	b.n	800b8a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b89e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
	}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
	...

0800b8b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	21a5      	movs	r1, #165	@ 0xa5
 800b8ca:	f002 f81d 	bl	800d908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	f023 0307 	bic.w	r3, r3, #7
 800b8e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00b      	beq.n	800b90a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	617b      	str	r3, [r7, #20]
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	e7fd      	b.n	800b906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01f      	beq.n	800b950 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	e012      	b.n	800b93c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	4413      	add	r3, r2
 800b91c:	7819      	ldrb	r1, [r3, #0]
 800b91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	4413      	add	r3, r2
 800b924:	3334      	adds	r3, #52	@ 0x34
 800b926:	460a      	mov	r2, r1
 800b928:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	4413      	add	r3, r2
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	3301      	adds	r3, #1
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	2b0f      	cmp	r3, #15
 800b940:	d9e9      	bls.n	800b916 <prvInitialiseNewTask+0x66>
 800b942:	e000      	b.n	800b946 <prvInitialiseNewTask+0x96>
			{
				break;
 800b944:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b94e:	e003      	b.n	800b958 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	2b37      	cmp	r3, #55	@ 0x37
 800b95c:	d901      	bls.n	800b962 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b95e:	2337      	movs	r3, #55	@ 0x37
 800b960:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b966:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b96c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	2200      	movs	r2, #0
 800b972:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	3304      	adds	r3, #4
 800b978:	4618      	mov	r0, r3
 800b97a:	f7ff f965 	bl	800ac48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b980:	3318      	adds	r3, #24
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff f960 	bl	800ac48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b98c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b990:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b99c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b0:	3354      	adds	r3, #84	@ 0x54
 800b9b2:	224c      	movs	r2, #76	@ 0x4c
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f001 ffa6 	bl	800d908 <memset>
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9be:	4a0d      	ldr	r2, [pc, #52]	@ (800b9f4 <prvInitialiseNewTask+0x144>)
 800b9c0:	659a      	str	r2, [r3, #88]	@ 0x58
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b9f8 <prvInitialiseNewTask+0x148>)
 800b9c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b9fc <prvInitialiseNewTask+0x14c>)
 800b9cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	68f9      	ldr	r1, [r7, #12]
 800b9d2:	69b8      	ldr	r0, [r7, #24]
 800b9d4:	f001 fb36 	bl	800d044 <pxPortInitialiseStack>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ea:	bf00      	nop
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200057d8 	.word	0x200057d8
 800b9f8:	20005840 	.word	0x20005840
 800b9fc:	200058a8 	.word	0x200058a8

0800ba00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba08:	f001 fc4e 	bl	800d2a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	4a2c      	ldr	r2, [pc, #176]	@ (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba16:	4b2c      	ldr	r3, [pc, #176]	@ (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d109      	bne.n	800ba32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba1e:	4a2a      	ldr	r2, [pc, #168]	@ (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba24:	4b27      	ldr	r3, [pc, #156]	@ (800bac4 <prvAddNewTaskToReadyList+0xc4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d110      	bne.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba2c:	f000 fd28 	bl	800c480 <prvInitialiseTaskLists>
 800ba30:	e00d      	b.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba32:	4b26      	ldr	r3, [pc, #152]	@ (800bacc <prvAddNewTaskToReadyList+0xcc>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba3a:	4b23      	ldr	r3, [pc, #140]	@ (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d802      	bhi.n	800ba4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba48:	4a1f      	ldr	r2, [pc, #124]	@ (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba4e:	4b20      	ldr	r3, [pc, #128]	@ (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	4a1e      	ldr	r2, [pc, #120]	@ (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba58:	4b1d      	ldr	r3, [pc, #116]	@ (800bad0 <prvAddNewTaskToReadyList+0xd0>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba64:	4b1b      	ldr	r3, [pc, #108]	@ (800bad4 <prvAddNewTaskToReadyList+0xd4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d903      	bls.n	800ba74 <prvAddNewTaskToReadyList+0x74>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba70:	4a18      	ldr	r2, [pc, #96]	@ (800bad4 <prvAddNewTaskToReadyList+0xd4>)
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4a15      	ldr	r2, [pc, #84]	@ (800bad8 <prvAddNewTaskToReadyList+0xd8>)
 800ba82:	441a      	add	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	f7ff f8e9 	bl	800ac62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba90:	f001 fc3c 	bl	800d30c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba94:	4b0d      	ldr	r3, [pc, #52]	@ (800bacc <prvAddNewTaskToReadyList+0xcc>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00e      	beq.n	800baba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bac8 <prvAddNewTaskToReadyList+0xc8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d207      	bcs.n	800baba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800baaa:	4b0c      	ldr	r3, [pc, #48]	@ (800badc <prvAddNewTaskToReadyList+0xdc>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baba:	bf00      	nop
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20001a58 	.word	0x20001a58
 800bac8:	20001584 	.word	0x20001584
 800bacc:	20001a64 	.word	0x20001a64
 800bad0:	20001a74 	.word	0x20001a74
 800bad4:	20001a60 	.word	0x20001a60
 800bad8:	20001588 	.word	0x20001588
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d018      	beq.n	800bb24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800baf2:	4b14      	ldr	r3, [pc, #80]	@ (800bb44 <vTaskDelay+0x64>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <vTaskDelay+0x32>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	60bb      	str	r3, [r7, #8]
}
 800bb0c:	bf00      	nop
 800bb0e:	bf00      	nop
 800bb10:	e7fd      	b.n	800bb0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb12:	f000 f88b 	bl	800bc2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb16:	2100      	movs	r1, #0
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fee5 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb1e:	f000 f893 	bl	800bc48 <xTaskResumeAll>
 800bb22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d107      	bne.n	800bb3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb2a:	4b07      	ldr	r3, [pc, #28]	@ (800bb48 <vTaskDelay+0x68>)
 800bb2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb3a:	bf00      	nop
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	20001a80 	.word	0x20001a80
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08a      	sub	sp, #40	@ 0x28
 800bb50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	1d39      	adds	r1, r7, #4
 800bb5e:	f107 0308 	add.w	r3, r7, #8
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff f81c 	bl	800aba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	9202      	str	r2, [sp, #8]
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	2300      	movs	r3, #0
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	2300      	movs	r3, #0
 800bb78:	460a      	mov	r2, r1
 800bb7a:	4924      	ldr	r1, [pc, #144]	@ (800bc0c <vTaskStartScheduler+0xc0>)
 800bb7c:	4824      	ldr	r0, [pc, #144]	@ (800bc10 <vTaskStartScheduler+0xc4>)
 800bb7e:	f7ff fdf1 	bl	800b764 <xTaskCreateStatic>
 800bb82:	4603      	mov	r3, r0
 800bb84:	4a23      	ldr	r2, [pc, #140]	@ (800bc14 <vTaskStartScheduler+0xc8>)
 800bb86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb88:	4b22      	ldr	r3, [pc, #136]	@ (800bc14 <vTaskStartScheduler+0xc8>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb90:	2301      	movs	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	e001      	b.n	800bb9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d102      	bne.n	800bba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bba0:	f000 fef6 	bl	800c990 <xTimerCreateTimerTask>
 800bba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d11b      	bne.n	800bbe4 <vTaskStartScheduler+0x98>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	613b      	str	r3, [r7, #16]
}
 800bbbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbc0:	4b15      	ldr	r3, [pc, #84]	@ (800bc18 <vTaskStartScheduler+0xcc>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3354      	adds	r3, #84	@ 0x54
 800bbc6:	4a15      	ldr	r2, [pc, #84]	@ (800bc1c <vTaskStartScheduler+0xd0>)
 800bbc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbca:	4b15      	ldr	r3, [pc, #84]	@ (800bc20 <vTaskStartScheduler+0xd4>)
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbd2:	4b14      	ldr	r3, [pc, #80]	@ (800bc24 <vTaskStartScheduler+0xd8>)
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbd8:	4b13      	ldr	r3, [pc, #76]	@ (800bc28 <vTaskStartScheduler+0xdc>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbde:	f001 fabf 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbe2:	e00f      	b.n	800bc04 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbea:	d10b      	bne.n	800bc04 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	60fb      	str	r3, [r7, #12]
}
 800bbfe:	bf00      	nop
 800bc00:	bf00      	nop
 800bc02:	e7fd      	b.n	800bc00 <vTaskStartScheduler+0xb4>
}
 800bc04:	bf00      	nop
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	0800e534 	.word	0x0800e534
 800bc10:	0800c451 	.word	0x0800c451
 800bc14:	20001a7c 	.word	0x20001a7c
 800bc18:	20001584 	.word	0x20001584
 800bc1c:	20000048 	.word	0x20000048
 800bc20:	20001a78 	.word	0x20001a78
 800bc24:	20001a64 	.word	0x20001a64
 800bc28:	20001a5c 	.word	0x20001a5c

0800bc2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc30:	4b04      	ldr	r3, [pc, #16]	@ (800bc44 <vTaskSuspendAll+0x18>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3301      	adds	r3, #1
 800bc36:	4a03      	ldr	r2, [pc, #12]	@ (800bc44 <vTaskSuspendAll+0x18>)
 800bc38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc3a:	bf00      	nop
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	20001a80 	.word	0x20001a80

0800bc48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc56:	4b42      	ldr	r3, [pc, #264]	@ (800bd60 <xTaskResumeAll+0x118>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10b      	bne.n	800bc76 <xTaskResumeAll+0x2e>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	603b      	str	r3, [r7, #0]
}
 800bc70:	bf00      	nop
 800bc72:	bf00      	nop
 800bc74:	e7fd      	b.n	800bc72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc76:	f001 fb17 	bl	800d2a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc7a:	4b39      	ldr	r3, [pc, #228]	@ (800bd60 <xTaskResumeAll+0x118>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	4a37      	ldr	r2, [pc, #220]	@ (800bd60 <xTaskResumeAll+0x118>)
 800bc82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc84:	4b36      	ldr	r3, [pc, #216]	@ (800bd60 <xTaskResumeAll+0x118>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d162      	bne.n	800bd52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc8c:	4b35      	ldr	r3, [pc, #212]	@ (800bd64 <xTaskResumeAll+0x11c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05e      	beq.n	800bd52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc94:	e02f      	b.n	800bcf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc96:	4b34      	ldr	r3, [pc, #208]	@ (800bd68 <xTaskResumeAll+0x120>)
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3318      	adds	r3, #24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff f83a 	bl	800ad1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff f835 	bl	800ad1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb6:	4b2d      	ldr	r3, [pc, #180]	@ (800bd6c <xTaskResumeAll+0x124>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d903      	bls.n	800bcc6 <xTaskResumeAll+0x7e>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd6c <xTaskResumeAll+0x124>)
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4a27      	ldr	r2, [pc, #156]	@ (800bd70 <xTaskResumeAll+0x128>)
 800bcd4:	441a      	add	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7fe ffc0 	bl	800ac62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce6:	4b23      	ldr	r3, [pc, #140]	@ (800bd74 <xTaskResumeAll+0x12c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bcf0:	4b21      	ldr	r3, [pc, #132]	@ (800bd78 <xTaskResumeAll+0x130>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcf6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd68 <xTaskResumeAll+0x120>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1cb      	bne.n	800bc96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd04:	f000 fc60 	bl	800c5c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd08:	4b1c      	ldr	r3, [pc, #112]	@ (800bd7c <xTaskResumeAll+0x134>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d010      	beq.n	800bd36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd14:	f000 f940 	bl	800bf98 <xTaskIncrementTick>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bd1e:	4b16      	ldr	r3, [pc, #88]	@ (800bd78 <xTaskResumeAll+0x130>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1f1      	bne.n	800bd14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bd30:	4b12      	ldr	r3, [pc, #72]	@ (800bd7c <xTaskResumeAll+0x134>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd36:	4b10      	ldr	r3, [pc, #64]	@ (800bd78 <xTaskResumeAll+0x130>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd42:	4b0f      	ldr	r3, [pc, #60]	@ (800bd80 <xTaskResumeAll+0x138>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd52:	f001 fadb 	bl	800d30c <vPortExitCritical>

	return xAlreadyYielded;
 800bd56:	68bb      	ldr	r3, [r7, #8]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20001a80 	.word	0x20001a80
 800bd64:	20001a58 	.word	0x20001a58
 800bd68:	20001a18 	.word	0x20001a18
 800bd6c:	20001a60 	.word	0x20001a60
 800bd70:	20001588 	.word	0x20001588
 800bd74:	20001584 	.word	0x20001584
 800bd78:	20001a6c 	.word	0x20001a6c
 800bd7c:	20001a68 	.word	0x20001a68
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd8a:	4b05      	ldr	r3, [pc, #20]	@ (800bda0 <xTaskGetTickCount+0x1c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd90:	687b      	ldr	r3, [r7, #4]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	20001a5c 	.word	0x20001a5c

0800bda4 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <pcTaskGetName+0x14>
 800bdb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdec <pcTaskGetName+0x48>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	e000      	b.n	800bdba <pcTaskGetName+0x16>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10b      	bne.n	800bdda <pcTaskGetName+0x36>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	60bb      	str	r3, [r7, #8]
}
 800bdd4:	bf00      	nop
 800bdd6:	bf00      	nop
 800bdd8:	e7fd      	b.n	800bdd6 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3334      	adds	r3, #52	@ 0x34
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	20001584 	.word	0x20001584

0800bdf0 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b08b      	sub	sp, #44	@ 0x2c
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d05b      	beq.n	800bebe <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	605a      	str	r2, [r3, #4]
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	3308      	adds	r3, #8
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d104      	bne.n	800be2a <prvSearchForNameWithinSingleList+0x3a>
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	613b      	str	r3, [r7, #16]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	605a      	str	r2, [r3, #4]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	3308      	adds	r3, #8
 800be48:	429a      	cmp	r2, r3
 800be4a:	d104      	bne.n	800be56 <prvSearchForNameWithinSingleList+0x66>
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	605a      	str	r2, [r3, #4]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800be5e:	2300      	movs	r3, #0
 800be60:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be62:	2300      	movs	r3, #0
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	e01c      	b.n	800bea2 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	4413      	add	r3, r2
 800be6e:	3334      	adds	r3, #52	@ 0x34
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	4413      	add	r3, r2
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	7afa      	ldrb	r2, [r7, #11]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d002      	beq.n	800be88 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	61fb      	str	r3, [r7, #28]
 800be86:	e006      	b.n	800be96 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800be92:	2301      	movs	r3, #1
 800be94:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	3301      	adds	r3, #1
 800bea0:	623b      	str	r3, [r7, #32]
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	2b0f      	cmp	r3, #15
 800bea6:	d9df      	bls.n	800be68 <prvSearchForNameWithinSingleList+0x78>
 800bea8:	e000      	b.n	800beac <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800beaa:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800beac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d104      	bne.n	800bebc <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d1bb      	bne.n	800be32 <prvSearchForNameWithinSingleList+0x42>
 800beba:	e000      	b.n	800bebe <prvSearchForNameWithinSingleList+0xce>
					break;
 800bebc:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bec0:	4618      	mov	r0, r3
 800bec2:	372c      	adds	r7, #44	@ 0x2c
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800bed4:	2338      	movs	r3, #56	@ 0x38
 800bed6:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7f4 f979 	bl	80001d0 <strlen>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b0f      	cmp	r3, #15
 800bee2:	d90b      	bls.n	800befc <xTaskGetHandle+0x30>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	60fb      	str	r3, [r7, #12]
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	e7fd      	b.n	800bef8 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800befc:	f7ff fe96 	bl	800bc2c <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4a1c      	ldr	r2, [pc, #112]	@ (800bf84 <xTaskGetHandle+0xb8>)
 800bf12:	4413      	add	r3, r2
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff ff6a 	bl	800bdf0 <prvSearchForNameWithinSingleList>
 800bf1c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d103      	bne.n	800bf2c <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1ea      	bne.n	800bf00 <xTaskGetHandle+0x34>
 800bf2a:	e000      	b.n	800bf2e <xTaskGetHandle+0x62>
					break;
 800bf2c:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bf34:	4b14      	ldr	r3, [pc, #80]	@ (800bf88 <xTaskGetHandle+0xbc>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff ff58 	bl	800bdf0 <prvSearchForNameWithinSingleList>
 800bf40:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bf48:	4b10      	ldr	r3, [pc, #64]	@ (800bf8c <xTaskGetHandle+0xc0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff ff4e 	bl	800bdf0 <prvSearchForNameWithinSingleList>
 800bf54:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d104      	bne.n	800bf66 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	480c      	ldr	r0, [pc, #48]	@ (800bf90 <xTaskGetHandle+0xc4>)
 800bf60:	f7ff ff46 	bl	800bdf0 <prvSearchForNameWithinSingleList>
 800bf64:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4809      	ldr	r0, [pc, #36]	@ (800bf94 <xTaskGetHandle+0xc8>)
 800bf70:	f7ff ff3e 	bl	800bdf0 <prvSearchForNameWithinSingleList>
 800bf74:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800bf76:	f7ff fe67 	bl	800bc48 <xTaskResumeAll>

		return pxTCB;
 800bf7a:	693b      	ldr	r3, [r7, #16]
	}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	20001588 	.word	0x20001588
 800bf88:	20001a10 	.word	0x20001a10
 800bf8c:	20001a14 	.word	0x20001a14
 800bf90:	20001a44 	.word	0x20001a44
 800bf94:	20001a2c 	.word	0x20001a2c

0800bf98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa2:	4b4f      	ldr	r3, [pc, #316]	@ (800c0e0 <xTaskIncrementTick+0x148>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 8090 	bne.w	800c0cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfac:	4b4d      	ldr	r3, [pc, #308]	@ (800c0e4 <xTaskIncrementTick+0x14c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfb4:	4a4b      	ldr	r2, [pc, #300]	@ (800c0e4 <xTaskIncrementTick+0x14c>)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d121      	bne.n	800c004 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bfc0:	4b49      	ldr	r3, [pc, #292]	@ (800c0e8 <xTaskIncrementTick+0x150>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00b      	beq.n	800bfe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	603b      	str	r3, [r7, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	e7fd      	b.n	800bfde <xTaskIncrementTick+0x46>
 800bfe2:	4b41      	ldr	r3, [pc, #260]	@ (800c0e8 <xTaskIncrementTick+0x150>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	4b40      	ldr	r3, [pc, #256]	@ (800c0ec <xTaskIncrementTick+0x154>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a3e      	ldr	r2, [pc, #248]	@ (800c0e8 <xTaskIncrementTick+0x150>)
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	4a3e      	ldr	r2, [pc, #248]	@ (800c0ec <xTaskIncrementTick+0x154>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	4b3e      	ldr	r3, [pc, #248]	@ (800c0f0 <xTaskIncrementTick+0x158>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3301      	adds	r3, #1
 800bffc:	4a3c      	ldr	r2, [pc, #240]	@ (800c0f0 <xTaskIncrementTick+0x158>)
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	f000 fae2 	bl	800c5c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c004:	4b3b      	ldr	r3, [pc, #236]	@ (800c0f4 <xTaskIncrementTick+0x15c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d349      	bcc.n	800c0a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c00e:	4b36      	ldr	r3, [pc, #216]	@ (800c0e8 <xTaskIncrementTick+0x150>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c018:	4b36      	ldr	r3, [pc, #216]	@ (800c0f4 <xTaskIncrementTick+0x15c>)
 800c01a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c01e:	601a      	str	r2, [r3, #0]
					break;
 800c020:	e03f      	b.n	800c0a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c022:	4b31      	ldr	r3, [pc, #196]	@ (800c0e8 <xTaskIncrementTick+0x150>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	429a      	cmp	r2, r3
 800c038:	d203      	bcs.n	800c042 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c03a:	4a2e      	ldr	r2, [pc, #184]	@ (800c0f4 <xTaskIncrementTick+0x15c>)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c040:	e02f      	b.n	800c0a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	3304      	adds	r3, #4
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fe68 	bl	800ad1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c050:	2b00      	cmp	r3, #0
 800c052:	d004      	beq.n	800c05e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3318      	adds	r3, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fe5f 	bl	800ad1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c062:	4b25      	ldr	r3, [pc, #148]	@ (800c0f8 <xTaskIncrementTick+0x160>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	429a      	cmp	r2, r3
 800c068:	d903      	bls.n	800c072 <xTaskIncrementTick+0xda>
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06e:	4a22      	ldr	r2, [pc, #136]	@ (800c0f8 <xTaskIncrementTick+0x160>)
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4a1f      	ldr	r2, [pc, #124]	@ (800c0fc <xTaskIncrementTick+0x164>)
 800c080:	441a      	add	r2, r3
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	3304      	adds	r3, #4
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f7fe fdea 	bl	800ac62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c092:	4b1b      	ldr	r3, [pc, #108]	@ (800c100 <xTaskIncrementTick+0x168>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c098:	429a      	cmp	r2, r3
 800c09a:	d3b8      	bcc.n	800c00e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c09c:	2301      	movs	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0a0:	e7b5      	b.n	800c00e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0a2:	4b17      	ldr	r3, [pc, #92]	@ (800c100 <xTaskIncrementTick+0x168>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a8:	4914      	ldr	r1, [pc, #80]	@ (800c0fc <xTaskIncrementTick+0x164>)
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d901      	bls.n	800c0be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0be:	4b11      	ldr	r3, [pc, #68]	@ (800c104 <xTaskIncrementTick+0x16c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	617b      	str	r3, [r7, #20]
 800c0ca:	e004      	b.n	800c0d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c108 <xTaskIncrementTick+0x170>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	4a0d      	ldr	r2, [pc, #52]	@ (800c108 <xTaskIncrementTick+0x170>)
 800c0d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0d6:	697b      	ldr	r3, [r7, #20]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	20001a80 	.word	0x20001a80
 800c0e4:	20001a5c 	.word	0x20001a5c
 800c0e8:	20001a10 	.word	0x20001a10
 800c0ec:	20001a14 	.word	0x20001a14
 800c0f0:	20001a70 	.word	0x20001a70
 800c0f4:	20001a78 	.word	0x20001a78
 800c0f8:	20001a60 	.word	0x20001a60
 800c0fc:	20001588 	.word	0x20001588
 800c100:	20001584 	.word	0x20001584
 800c104:	20001a6c 	.word	0x20001a6c
 800c108:	20001a68 	.word	0x20001a68

0800c10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c112:	4b2b      	ldr	r3, [pc, #172]	@ (800c1c0 <vTaskSwitchContext+0xb4>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c11a:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c4 <vTaskSwitchContext+0xb8>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c120:	e047      	b.n	800c1b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c122:	4b28      	ldr	r3, [pc, #160]	@ (800c1c4 <vTaskSwitchContext+0xb8>)
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c128:	4b27      	ldr	r3, [pc, #156]	@ (800c1c8 <vTaskSwitchContext+0xbc>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e011      	b.n	800c154 <vTaskSwitchContext+0x48>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10b      	bne.n	800c14e <vTaskSwitchContext+0x42>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	607b      	str	r3, [r7, #4]
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	e7fd      	b.n	800c14a <vTaskSwitchContext+0x3e>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3b01      	subs	r3, #1
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	491d      	ldr	r1, [pc, #116]	@ (800c1cc <vTaskSwitchContext+0xc0>)
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d0e3      	beq.n	800c130 <vTaskSwitchContext+0x24>
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4a16      	ldr	r2, [pc, #88]	@ (800c1cc <vTaskSwitchContext+0xc0>)
 800c174:	4413      	add	r3, r2
 800c176:	60bb      	str	r3, [r7, #8]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	605a      	str	r2, [r3, #4]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	3308      	adds	r3, #8
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d104      	bne.n	800c198 <vTaskSwitchContext+0x8c>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	605a      	str	r2, [r3, #4]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	4a0c      	ldr	r2, [pc, #48]	@ (800c1d0 <vTaskSwitchContext+0xc4>)
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	4a09      	ldr	r2, [pc, #36]	@ (800c1c8 <vTaskSwitchContext+0xbc>)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1a8:	4b09      	ldr	r3, [pc, #36]	@ (800c1d0 <vTaskSwitchContext+0xc4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3354      	adds	r3, #84	@ 0x54
 800c1ae:	4a09      	ldr	r2, [pc, #36]	@ (800c1d4 <vTaskSwitchContext+0xc8>)
 800c1b0:	6013      	str	r3, [r2, #0]
}
 800c1b2:	bf00      	nop
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	20001a80 	.word	0x20001a80
 800c1c4:	20001a6c 	.word	0x20001a6c
 800c1c8:	20001a60 	.word	0x20001a60
 800c1cc:	20001588 	.word	0x20001588
 800c1d0:	20001584 	.word	0x20001584
 800c1d4:	20000048 	.word	0x20000048

0800c1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10b      	bne.n	800c200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	60fb      	str	r3, [r7, #12]
}
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	e7fd      	b.n	800c1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c200:	4b07      	ldr	r3, [pc, #28]	@ (800c220 <vTaskPlaceOnEventList+0x48>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3318      	adds	r3, #24
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7fe fd4e 	bl	800acaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c20e:	2101      	movs	r1, #1
 800c210:	6838      	ldr	r0, [r7, #0]
 800c212:	f000 fb69 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
}
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20001584 	.word	0x20001584

0800c224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10b      	bne.n	800c24e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	617b      	str	r3, [r7, #20]
}
 800c248:	bf00      	nop
 800c24a:	bf00      	nop
 800c24c:	e7fd      	b.n	800c24a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c24e:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <vTaskPlaceOnEventListRestricted+0x54>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3318      	adds	r3, #24
 800c254:	4619      	mov	r1, r3
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7fe fd03 	bl	800ac62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	68b8      	ldr	r0, [r7, #8]
 800c26c:	f000 fb3c 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
	}
 800c270:	bf00      	nop
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20001584 	.word	0x20001584

0800c27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10b      	bne.n	800c2aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	60fb      	str	r3, [r7, #12]
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
 800c2a8:	e7fd      	b.n	800c2a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	3318      	adds	r3, #24
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fd34 	bl	800ad1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <xTaskRemoveFromEventList+0xb0>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d11d      	bne.n	800c2f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	3304      	adds	r3, #4
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fd2b 	bl	800ad1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ca:	4b19      	ldr	r3, [pc, #100]	@ (800c330 <xTaskRemoveFromEventList+0xb4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d903      	bls.n	800c2da <xTaskRemoveFromEventList+0x5e>
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d6:	4a16      	ldr	r2, [pc, #88]	@ (800c330 <xTaskRemoveFromEventList+0xb4>)
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4a13      	ldr	r2, [pc, #76]	@ (800c334 <xTaskRemoveFromEventList+0xb8>)
 800c2e8:	441a      	add	r2, r3
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fe fcb6 	bl	800ac62 <vListInsertEnd>
 800c2f6:	e005      	b.n	800c304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	3318      	adds	r3, #24
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	480e      	ldr	r0, [pc, #56]	@ (800c338 <xTaskRemoveFromEventList+0xbc>)
 800c300:	f7fe fcaf 	bl	800ac62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c308:	4b0c      	ldr	r3, [pc, #48]	@ (800c33c <xTaskRemoveFromEventList+0xc0>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d905      	bls.n	800c31e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c312:	2301      	movs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c316:	4b0a      	ldr	r3, [pc, #40]	@ (800c340 <xTaskRemoveFromEventList+0xc4>)
 800c318:	2201      	movs	r2, #1
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	e001      	b.n	800c322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c322:	697b      	ldr	r3, [r7, #20]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20001a80 	.word	0x20001a80
 800c330:	20001a60 	.word	0x20001a60
 800c334:	20001588 	.word	0x20001588
 800c338:	20001a18 	.word	0x20001a18
 800c33c:	20001584 	.word	0x20001584
 800c340:	20001a6c 	.word	0x20001a6c

0800c344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c34c:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <vTaskInternalSetTimeOutState+0x24>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c354:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <vTaskInternalSetTimeOutState+0x28>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	605a      	str	r2, [r3, #4]
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	20001a70 	.word	0x20001a70
 800c36c:	20001a5c 	.word	0x20001a5c

0800c370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	e7fd      	b.n	800c394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10b      	bne.n	800c3b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	60fb      	str	r3, [r7, #12]
}
 800c3b0:	bf00      	nop
 800c3b2:	bf00      	nop
 800c3b4:	e7fd      	b.n	800c3b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c3b6:	f000 ff77 	bl	800d2a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c430 <xTaskCheckForTimeOut+0xc0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3d2:	d102      	bne.n	800c3da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	61fb      	str	r3, [r7, #28]
 800c3d8:	e023      	b.n	800c422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	4b15      	ldr	r3, [pc, #84]	@ (800c434 <xTaskCheckForTimeOut+0xc4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d007      	beq.n	800c3f6 <xTaskCheckForTimeOut+0x86>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	69ba      	ldr	r2, [r7, #24]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d302      	bcc.n	800c3f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e015      	b.n	800c422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d20b      	bcs.n	800c418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	1ad2      	subs	r2, r2, r3
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ff99 	bl	800c344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c412:	2300      	movs	r3, #0
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	e004      	b.n	800c422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c41e:	2301      	movs	r3, #1
 800c420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c422:	f000 ff73 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800c426:	69fb      	ldr	r3, [r7, #28]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3720      	adds	r7, #32
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20001a5c 	.word	0x20001a5c
 800c434:	20001a70 	.word	0x20001a70

0800c438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c438:	b480      	push	{r7}
 800c43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c43c:	4b03      	ldr	r3, [pc, #12]	@ (800c44c <vTaskMissedYield+0x14>)
 800c43e:	2201      	movs	r2, #1
 800c440:	601a      	str	r2, [r3, #0]
}
 800c442:	bf00      	nop
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	20001a6c 	.word	0x20001a6c

0800c450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c458:	f000 f852 	bl	800c500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c45c:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <prvIdleTask+0x28>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d9f9      	bls.n	800c458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c464:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <prvIdleTask+0x2c>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c474:	e7f0      	b.n	800c458 <prvIdleTask+0x8>
 800c476:	bf00      	nop
 800c478:	20001588 	.word	0x20001588
 800c47c:	e000ed04 	.word	0xe000ed04

0800c480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c486:	2300      	movs	r3, #0
 800c488:	607b      	str	r3, [r7, #4]
 800c48a:	e00c      	b.n	800c4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4a12      	ldr	r2, [pc, #72]	@ (800c4e0 <prvInitialiseTaskLists+0x60>)
 800c498:	4413      	add	r3, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fbb4 	bl	800ac08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	607b      	str	r3, [r7, #4]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b37      	cmp	r3, #55	@ 0x37
 800c4aa:	d9ef      	bls.n	800c48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4ac:	480d      	ldr	r0, [pc, #52]	@ (800c4e4 <prvInitialiseTaskLists+0x64>)
 800c4ae:	f7fe fbab 	bl	800ac08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4b2:	480d      	ldr	r0, [pc, #52]	@ (800c4e8 <prvInitialiseTaskLists+0x68>)
 800c4b4:	f7fe fba8 	bl	800ac08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4b8:	480c      	ldr	r0, [pc, #48]	@ (800c4ec <prvInitialiseTaskLists+0x6c>)
 800c4ba:	f7fe fba5 	bl	800ac08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4be:	480c      	ldr	r0, [pc, #48]	@ (800c4f0 <prvInitialiseTaskLists+0x70>)
 800c4c0:	f7fe fba2 	bl	800ac08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4c4:	480b      	ldr	r0, [pc, #44]	@ (800c4f4 <prvInitialiseTaskLists+0x74>)
 800c4c6:	f7fe fb9f 	bl	800ac08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f8 <prvInitialiseTaskLists+0x78>)
 800c4cc:	4a05      	ldr	r2, [pc, #20]	@ (800c4e4 <prvInitialiseTaskLists+0x64>)
 800c4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4fc <prvInitialiseTaskLists+0x7c>)
 800c4d2:	4a05      	ldr	r2, [pc, #20]	@ (800c4e8 <prvInitialiseTaskLists+0x68>)
 800c4d4:	601a      	str	r2, [r3, #0]
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20001588 	.word	0x20001588
 800c4e4:	200019e8 	.word	0x200019e8
 800c4e8:	200019fc 	.word	0x200019fc
 800c4ec:	20001a18 	.word	0x20001a18
 800c4f0:	20001a2c 	.word	0x20001a2c
 800c4f4:	20001a44 	.word	0x20001a44
 800c4f8:	20001a10 	.word	0x20001a10
 800c4fc:	20001a14 	.word	0x20001a14

0800c500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c506:	e019      	b.n	800c53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c508:	f000 fece 	bl	800d2a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c50c:	4b10      	ldr	r3, [pc, #64]	@ (800c550 <prvCheckTasksWaitingTermination+0x50>)
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	3304      	adds	r3, #4
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fbff 	bl	800ad1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c51e:	4b0d      	ldr	r3, [pc, #52]	@ (800c554 <prvCheckTasksWaitingTermination+0x54>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3b01      	subs	r3, #1
 800c524:	4a0b      	ldr	r2, [pc, #44]	@ (800c554 <prvCheckTasksWaitingTermination+0x54>)
 800c526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c528:	4b0b      	ldr	r3, [pc, #44]	@ (800c558 <prvCheckTasksWaitingTermination+0x58>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	4a0a      	ldr	r2, [pc, #40]	@ (800c558 <prvCheckTasksWaitingTermination+0x58>)
 800c530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c532:	f000 feeb 	bl	800d30c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f810 	bl	800c55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c53c:	4b06      	ldr	r3, [pc, #24]	@ (800c558 <prvCheckTasksWaitingTermination+0x58>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e1      	bne.n	800c508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20001a2c 	.word	0x20001a2c
 800c554:	20001a58 	.word	0x20001a58
 800c558:	20001a40 	.word	0x20001a40

0800c55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3354      	adds	r3, #84	@ 0x54
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 fa01 	bl	800d970 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c574:	2b00      	cmp	r3, #0
 800c576:	d108      	bne.n	800c58a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c57c:	4618      	mov	r0, r3
 800c57e:	f001 f883 	bl	800d688 <vPortFree>
				vPortFree( pxTCB );
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 f880 	bl	800d688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c588:	e019      	b.n	800c5be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c590:	2b01      	cmp	r3, #1
 800c592:	d103      	bne.n	800c59c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 f877 	bl	800d688 <vPortFree>
	}
 800c59a:	e010      	b.n	800c5be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d00b      	beq.n	800c5be <prvDeleteTCB+0x62>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	60fb      	str	r3, [r7, #12]
}
 800c5b8:	bf00      	nop
 800c5ba:	bf00      	nop
 800c5bc:	e7fd      	b.n	800c5ba <prvDeleteTCB+0x5e>
	}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c600 <prvResetNextTaskUnblockTime+0x38>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c604 <prvResetNextTaskUnblockTime+0x3c>)
 800c5da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5e0:	e008      	b.n	800c5f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e2:	4b07      	ldr	r3, [pc, #28]	@ (800c600 <prvResetNextTaskUnblockTime+0x38>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	4a04      	ldr	r2, [pc, #16]	@ (800c604 <prvResetNextTaskUnblockTime+0x3c>)
 800c5f2:	6013      	str	r3, [r2, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	20001a10 	.word	0x20001a10
 800c604:	20001a78 	.word	0x20001a78

0800c608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c60e:	4b0b      	ldr	r3, [pc, #44]	@ (800c63c <xTaskGetSchedulerState+0x34>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d102      	bne.n	800c61c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c616:	2301      	movs	r3, #1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	e008      	b.n	800c62e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c61c:	4b08      	ldr	r3, [pc, #32]	@ (800c640 <xTaskGetSchedulerState+0x38>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c624:	2302      	movs	r3, #2
 800c626:	607b      	str	r3, [r7, #4]
 800c628:	e001      	b.n	800c62e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c62a:	2300      	movs	r3, #0
 800c62c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c62e:	687b      	ldr	r3, [r7, #4]
	}
 800c630:	4618      	mov	r0, r3
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	20001a64 	.word	0x20001a64
 800c640:	20001a80 	.word	0x20001a80

0800c644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d058      	beq.n	800c70c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c65a:	4b2f      	ldr	r3, [pc, #188]	@ (800c718 <xTaskPriorityDisinherit+0xd4>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	429a      	cmp	r2, r3
 800c662:	d00b      	beq.n	800c67c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	60fb      	str	r3, [r7, #12]
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10b      	bne.n	800c69c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60bb      	str	r3, [r7, #8]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a0:	1e5a      	subs	r2, r3, #1
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d02c      	beq.n	800c70c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d128      	bne.n	800c70c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fb2c 	bl	800ad1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <xTaskPriorityDisinherit+0xd8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d903      	bls.n	800c6ec <xTaskPriorityDisinherit+0xa8>
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c71c <xTaskPriorityDisinherit+0xd8>)
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4a09      	ldr	r2, [pc, #36]	@ (800c720 <xTaskPriorityDisinherit+0xdc>)
 800c6fa:	441a      	add	r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	3304      	adds	r3, #4
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f7fe faad 	bl	800ac62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c708:	2301      	movs	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c70c:	697b      	ldr	r3, [r7, #20]
	}
 800c70e:	4618      	mov	r0, r3
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20001584 	.word	0x20001584
 800c71c:	20001a60 	.word	0x20001a60
 800c720:	20001588 	.word	0x20001588

0800c724 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c72e:	f000 fdbb 	bl	800d2a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c732:	4b20      	ldr	r3, [pc, #128]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d113      	bne.n	800c766 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c73e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00b      	beq.n	800c766 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c74e:	2101      	movs	r1, #1
 800c750:	6838      	ldr	r0, [r7, #0]
 800c752:	f000 f8c9 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c756:	4b18      	ldr	r3, [pc, #96]	@ (800c7b8 <ulTaskNotifyTake+0x94>)
 800c758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c766:	f000 fdd1 	bl	800d30c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c76a:	f000 fd9d 	bl	800d2a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c76e:	4b11      	ldr	r3, [pc, #68]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c776:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00e      	beq.n	800c79c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d005      	beq.n	800c790 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c784:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2200      	movs	r2, #0
 800c78a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c78e:	e005      	b.n	800c79c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c790:	4b08      	ldr	r3, [pc, #32]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	3a01      	subs	r2, #1
 800c798:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c79c:	4b05      	ldr	r3, [pc, #20]	@ (800c7b4 <ulTaskNotifyTake+0x90>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c7a6:	f000 fdb1 	bl	800d30c <vPortExitCritical>

		return ulReturn;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20001584 	.word	0x20001584
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08a      	sub	sp, #40	@ 0x28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10b      	bne.n	800c7e4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	61bb      	str	r3, [r7, #24]
}
 800c7de:	bf00      	nop
 800c7e0:	bf00      	nop
 800c7e2:	e7fd      	b.n	800c7e0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7e4:	f000 fe40 	bl	800d468 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c7ec:	f3ef 8211 	mrs	r2, BASEPRI
 800c7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	617a      	str	r2, [r7, #20]
 800c802:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c804:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c806:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c80e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	2202      	movs	r2, #2
 800c814:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c826:	7ffb      	ldrb	r3, [r7, #31]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d147      	bne.n	800c8bc <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60fb      	str	r3, [r7, #12]
}
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	e7fd      	b.n	800c848 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c84c:	4b20      	ldr	r3, [pc, #128]	@ (800c8d0 <vTaskNotifyGiveFromISR+0x114>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d11d      	bne.n	800c890 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c856:	3304      	adds	r3, #4
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe fa5f 	bl	800ad1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	4b1c      	ldr	r3, [pc, #112]	@ (800c8d4 <vTaskNotifyGiveFromISR+0x118>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d903      	bls.n	800c872 <vTaskNotifyGiveFromISR+0xb6>
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	4a19      	ldr	r2, [pc, #100]	@ (800c8d4 <vTaskNotifyGiveFromISR+0x118>)
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4a16      	ldr	r2, [pc, #88]	@ (800c8d8 <vTaskNotifyGiveFromISR+0x11c>)
 800c880:	441a      	add	r2, r3
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	3304      	adds	r3, #4
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fe f9ea 	bl	800ac62 <vListInsertEnd>
 800c88e:	e005      	b.n	800c89c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	3318      	adds	r3, #24
 800c894:	4619      	mov	r1, r3
 800c896:	4811      	ldr	r0, [pc, #68]	@ (800c8dc <vTaskNotifyGiveFromISR+0x120>)
 800c898:	f7fe f9e3 	bl	800ac62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e0 <vTaskNotifyGiveFromISR+0x124>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d908      	bls.n	800c8bc <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e4 <vTaskNotifyGiveFromISR+0x128>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	f383 8811 	msr	BASEPRI, r3
}
 800c8c6:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c8c8:	bf00      	nop
 800c8ca:	3728      	adds	r7, #40	@ 0x28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20001a80 	.word	0x20001a80
 800c8d4:	20001a60 	.word	0x20001a60
 800c8d8:	20001588 	.word	0x20001588
 800c8dc:	20001a18 	.word	0x20001a18
 800c8e0:	20001584 	.word	0x20001584
 800c8e4:	20001a6c 	.word	0x20001a6c

0800c8e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8f2:	4b21      	ldr	r3, [pc, #132]	@ (800c978 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8f8:	4b20      	ldr	r3, [pc, #128]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe fa0c 	bl	800ad1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c90a:	d10a      	bne.n	800c922 <prvAddCurrentTaskToDelayedList+0x3a>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c912:	4b1a      	ldr	r3, [pc, #104]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3304      	adds	r3, #4
 800c918:	4619      	mov	r1, r3
 800c91a:	4819      	ldr	r0, [pc, #100]	@ (800c980 <prvAddCurrentTaskToDelayedList+0x98>)
 800c91c:	f7fe f9a1 	bl	800ac62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c920:	e026      	b.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4413      	add	r3, r2
 800c928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c92a:	4b14      	ldr	r3, [pc, #80]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d209      	bcs.n	800c94e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c93a:	4b12      	ldr	r3, [pc, #72]	@ (800c984 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	4b0f      	ldr	r3, [pc, #60]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fe f9af 	bl	800acaa <vListInsert>
}
 800c94c:	e010      	b.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c94e:	4b0e      	ldr	r3, [pc, #56]	@ (800c988 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b0a      	ldr	r3, [pc, #40]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7fe f9a5 	bl	800acaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c960:	4b0a      	ldr	r3, [pc, #40]	@ (800c98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	429a      	cmp	r2, r3
 800c968:	d202      	bcs.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c96a:	4a08      	ldr	r2, [pc, #32]	@ (800c98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	6013      	str	r3, [r2, #0]
}
 800c970:	bf00      	nop
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	20001a5c 	.word	0x20001a5c
 800c97c:	20001584 	.word	0x20001584
 800c980:	20001a44 	.word	0x20001a44
 800c984:	20001a14 	.word	0x20001a14
 800c988:	20001a10 	.word	0x20001a10
 800c98c:	20001a78 	.word	0x20001a78

0800c990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08a      	sub	sp, #40	@ 0x28
 800c994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c99a:	f000 fb13 	bl	800cfc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c99e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca14 <xTimerCreateTimerTask+0x84>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d021      	beq.n	800c9ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ae:	1d3a      	adds	r2, r7, #4
 800c9b0:	f107 0108 	add.w	r1, r7, #8
 800c9b4:	f107 030c 	add.w	r3, r7, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fe f90b 	bl	800abd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	9202      	str	r2, [sp, #8]
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	460a      	mov	r2, r1
 800c9d0:	4911      	ldr	r1, [pc, #68]	@ (800ca18 <xTimerCreateTimerTask+0x88>)
 800c9d2:	4812      	ldr	r0, [pc, #72]	@ (800ca1c <xTimerCreateTimerTask+0x8c>)
 800c9d4:	f7fe fec6 	bl	800b764 <xTaskCreateStatic>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	4a11      	ldr	r2, [pc, #68]	@ (800ca20 <xTimerCreateTimerTask+0x90>)
 800c9dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <xTimerCreateTimerTask+0x90>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10b      	bne.n	800ca08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	bf00      	nop
 800ca06:	e7fd      	b.n	800ca04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca08:	697b      	ldr	r3, [r7, #20]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20001ab4 	.word	0x20001ab4
 800ca18:	0800e53c 	.word	0x0800e53c
 800ca1c:	0800cb5d 	.word	0x0800cb5d
 800ca20:	20001ab8 	.word	0x20001ab8

0800ca24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	@ 0x28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10b      	bne.n	800ca54 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	623b      	str	r3, [r7, #32]
}
 800ca4e:	bf00      	nop
 800ca50:	bf00      	nop
 800ca52:	e7fd      	b.n	800ca50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca54:	4b19      	ldr	r3, [pc, #100]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d02a      	beq.n	800cab2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b05      	cmp	r3, #5
 800ca6c:	dc18      	bgt.n	800caa0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca6e:	f7ff fdcb 	bl	800c608 <xTaskGetSchedulerState>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d109      	bne.n	800ca8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca78:	4b10      	ldr	r3, [pc, #64]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	f107 0110 	add.w	r1, r7, #16
 800ca80:	2300      	movs	r3, #0
 800ca82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca84:	f7fe fa7e 	bl	800af84 <xQueueGenericSend>
 800ca88:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca8a:	e012      	b.n	800cab2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	f107 0110 	add.w	r1, r7, #16
 800ca94:	2300      	movs	r3, #0
 800ca96:	2200      	movs	r2, #0
 800ca98:	f7fe fa74 	bl	800af84 <xQueueGenericSend>
 800ca9c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca9e:	e008      	b.n	800cab2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caa0:	4b06      	ldr	r3, [pc, #24]	@ (800cabc <xTimerGenericCommand+0x98>)
 800caa2:	6818      	ldr	r0, [r3, #0]
 800caa4:	f107 0110 	add.w	r1, r7, #16
 800caa8:	2300      	movs	r3, #0
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	f7fe fb6c 	bl	800b188 <xQueueGenericSendFromISR>
 800cab0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3728      	adds	r7, #40	@ 0x28
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20001ab4 	.word	0x20001ab4

0800cac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caca:	4b23      	ldr	r3, [pc, #140]	@ (800cb58 <prvProcessExpiredTimer+0x98>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe f91f 	bl	800ad1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d023      	beq.n	800cb34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	699a      	ldr	r2, [r3, #24]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	18d1      	adds	r1, r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	6978      	ldr	r0, [r7, #20]
 800cafa:	f000 f8d5 	bl	800cca8 <prvInsertTimerInActiveList>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d020      	beq.n	800cb46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb04:	2300      	movs	r3, #0
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	2300      	movs	r3, #0
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f7ff ff88 	bl	800ca24 <xTimerGenericCommand>
 800cb14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d114      	bne.n	800cb46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	60fb      	str	r3, [r7, #12]
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb3a:	f023 0301 	bic.w	r3, r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	4798      	blx	r3
}
 800cb4e:	bf00      	nop
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20001aac 	.word	0x20001aac

0800cb5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f859 	bl	800cc20 <prvGetNextExpireTime>
 800cb6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	4619      	mov	r1, r3
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f805 	bl	800cb84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb7a:	f000 f8d7 	bl	800cd2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb7e:	bf00      	nop
 800cb80:	e7f0      	b.n	800cb64 <prvTimerTask+0x8>
	...

0800cb84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb8e:	f7ff f84d 	bl	800bc2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 f866 	bl	800cc68 <prvSampleTimeNow>
 800cb9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d130      	bne.n	800cc06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d806      	bhi.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbb2:	f7ff f849 	bl	800bc48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbb6:	68f9      	ldr	r1, [r7, #12]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ff81 	bl	800cac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbbe:	e024      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d008      	beq.n	800cbd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <prvProcessTimerOrBlockTask+0x90>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <prvProcessTimerOrBlockTask+0x50>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <prvProcessTimerOrBlockTask+0x52>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc18 <prvProcessTimerOrBlockTask+0x94>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	f7fe fd89 	bl	800b6fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbea:	f7ff f82d 	bl	800bc48 <xTaskResumeAll>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbf4:	4b09      	ldr	r3, [pc, #36]	@ (800cc1c <prvProcessTimerOrBlockTask+0x98>)
 800cbf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	f3bf 8f6f 	isb	sy
}
 800cc04:	e001      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc06:	f7ff f81f 	bl	800bc48 <xTaskResumeAll>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20001ab0 	.word	0x20001ab0
 800cc18:	20001ab4 	.word	0x20001ab4
 800cc1c:	e000ed04 	.word	0xe000ed04

0800cc20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc28:	4b0e      	ldr	r3, [pc, #56]	@ (800cc64 <prvGetNextExpireTime+0x44>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <prvGetNextExpireTime+0x16>
 800cc32:	2201      	movs	r2, #1
 800cc34:	e000      	b.n	800cc38 <prvGetNextExpireTime+0x18>
 800cc36:	2200      	movs	r2, #0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc44:	4b07      	ldr	r3, [pc, #28]	@ (800cc64 <prvGetNextExpireTime+0x44>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e001      	b.n	800cc54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc54:	68fb      	ldr	r3, [r7, #12]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20001aac 	.word	0x20001aac

0800cc68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc70:	f7ff f888 	bl	800bd84 <xTaskGetTickCount>
 800cc74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc76:	4b0b      	ldr	r3, [pc, #44]	@ (800cca4 <prvSampleTimeNow+0x3c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d205      	bcs.n	800cc8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc80:	f000 f93a 	bl	800cef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	e002      	b.n	800cc92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc92:	4a04      	ldr	r2, [pc, #16]	@ (800cca4 <prvSampleTimeNow+0x3c>)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20001abc 	.word	0x20001abc

0800cca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d812      	bhi.n	800ccf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	1ad2      	subs	r2, r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d302      	bcc.n	800cce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e01b      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cce2:	4b10      	ldr	r3, [pc, #64]	@ (800cd24 <prvInsertTimerInActiveList+0x7c>)
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3304      	adds	r3, #4
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f7fd ffdc 	bl	800acaa <vListInsert>
 800ccf2:	e012      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d206      	bcs.n	800cd0a <prvInsertTimerInActiveList+0x62>
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d302      	bcc.n	800cd0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	e007      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd0a:	4b07      	ldr	r3, [pc, #28]	@ (800cd28 <prvInsertTimerInActiveList+0x80>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4619      	mov	r1, r3
 800cd14:	4610      	mov	r0, r2
 800cd16:	f7fd ffc8 	bl	800acaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20001ab0 	.word	0x20001ab0
 800cd28:	20001aac 	.word	0x20001aac

0800cd2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	@ 0x38
 800cd30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd32:	e0ce      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da19      	bge.n	800cd6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd3a:	1d3b      	adds	r3, r7, #4
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10b      	bne.n	800cd5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	61fb      	str	r3, [r7, #28]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd64:	6850      	ldr	r0, [r2, #4]
 800cd66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f2c0 80ae 	blt.w	800ced2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d004      	beq.n	800cd8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fd ffc8 	bl	800ad1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd8c:	463b      	mov	r3, r7
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff ff6a 	bl	800cc68 <prvSampleTimeNow>
 800cd94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b09      	cmp	r3, #9
 800cd9a:	f200 8097 	bhi.w	800cecc <prvProcessReceivedCommands+0x1a0>
 800cd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cda4 <prvProcessReceivedCommands+0x78>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdcd 	.word	0x0800cdcd
 800cda8:	0800cdcd 	.word	0x0800cdcd
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800ce43 	.word	0x0800ce43
 800cdb4:	0800ce57 	.word	0x0800ce57
 800cdb8:	0800cea3 	.word	0x0800cea3
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cdcd 	.word	0x0800cdcd
 800cdc4:	0800ce43 	.word	0x0800ce43
 800cdc8:	0800ce57 	.word	0x0800ce57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	18d1      	adds	r1, r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdec:	f7ff ff5c 	bl	800cca8 <prvInsertTimerInActiveList>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d06c      	beq.n	800ced0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d061      	beq.n	800ced0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	441a      	add	r2, r3
 800ce14:	2300      	movs	r3, #0
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce1e:	f7ff fe01 	bl	800ca24 <xTimerGenericCommand>
 800ce22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d152      	bne.n	800ced0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	61bb      	str	r3, [r7, #24]
}
 800ce3c:	bf00      	nop
 800ce3e:	bf00      	nop
 800ce40:	e7fd      	b.n	800ce3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce48:	f023 0301 	bic.w	r3, r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce54:	e03d      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce5c:	f043 0301 	orr.w	r3, r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10b      	bne.n	800ce8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	617b      	str	r3, [r7, #20]
}
 800ce88:	bf00      	nop
 800ce8a:	bf00      	nop
 800ce8c:	e7fd      	b.n	800ce8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce94:	18d1      	adds	r1, r2, r3
 800ce96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce9c:	f7ff ff04 	bl	800cca8 <prvInsertTimerInActiveList>
					break;
 800cea0:	e017      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d103      	bne.n	800ceb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ceb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceb2:	f000 fbe9 	bl	800d688 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ceb6:	e00c      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cebe:	f023 0301 	bic.w	r3, r3, #1
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceca:	e002      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cecc:	bf00      	nop
 800cece:	e000      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
					break;
 800ced0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ced2:	4b08      	ldr	r3, [pc, #32]	@ (800cef4 <prvProcessReceivedCommands+0x1c8>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	1d39      	adds	r1, r7, #4
 800ced8:	2200      	movs	r2, #0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe f9f2 	bl	800b2c4 <xQueueReceive>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f47f af26 	bne.w	800cd34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	3730      	adds	r7, #48	@ 0x30
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20001ab4 	.word	0x20001ab4

0800cef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cefe:	e049      	b.n	800cf94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf00:	4b2e      	ldr	r3, [pc, #184]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fd feff 	bl	800ad1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d02f      	beq.n	800cf94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d90e      	bls.n	800cf64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf52:	4b1a      	ldr	r3, [pc, #104]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f7fd fea4 	bl	800acaa <vListInsert>
 800cf62:	e017      	b.n	800cf94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	2300      	movs	r3, #0
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7ff fd58 	bl	800ca24 <xTimerGenericCommand>
 800cf74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10b      	bne.n	800cf94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	603b      	str	r3, [r7, #0]
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	e7fd      	b.n	800cf90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf94:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1b0      	bne.n	800cf00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf9e:	4b07      	ldr	r3, [pc, #28]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfa4:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <prvSwitchTimerLists+0xc8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a04      	ldr	r2, [pc, #16]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cfaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfac:	4a04      	ldr	r2, [pc, #16]	@ (800cfc0 <prvSwitchTimerLists+0xc8>)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	6013      	str	r3, [r2, #0]
}
 800cfb2:	bf00      	nop
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20001aac 	.word	0x20001aac
 800cfc0:	20001ab0 	.word	0x20001ab0

0800cfc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfca:	f000 f96d 	bl	800d2a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfce:	4b15      	ldr	r3, [pc, #84]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d120      	bne.n	800d018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfd6:	4814      	ldr	r0, [pc, #80]	@ (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfd8:	f7fd fe16 	bl	800ac08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfdc:	4813      	ldr	r0, [pc, #76]	@ (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfde:	f7fd fe13 	bl	800ac08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfe2:	4b13      	ldr	r3, [pc, #76]	@ (800d030 <prvCheckForValidListAndQueue+0x6c>)
 800cfe4:	4a10      	ldr	r2, [pc, #64]	@ (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfe8:	4b12      	ldr	r3, [pc, #72]	@ (800d034 <prvCheckForValidListAndQueue+0x70>)
 800cfea:	4a10      	ldr	r2, [pc, #64]	@ (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	4b11      	ldr	r3, [pc, #68]	@ (800d038 <prvCheckForValidListAndQueue+0x74>)
 800cff4:	4a11      	ldr	r2, [pc, #68]	@ (800d03c <prvCheckForValidListAndQueue+0x78>)
 800cff6:	2110      	movs	r1, #16
 800cff8:	200a      	movs	r0, #10
 800cffa:	f7fd ff23 	bl	800ae44 <xQueueGenericCreateStatic>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a08      	ldr	r2, [pc, #32]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d004:	4b07      	ldr	r3, [pc, #28]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d00c:	4b05      	ldr	r3, [pc, #20]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	490b      	ldr	r1, [pc, #44]	@ (800d040 <prvCheckForValidListAndQueue+0x7c>)
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fb48 	bl	800b6a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d018:	f000 f978 	bl	800d30c <vPortExitCritical>
}
 800d01c:	bf00      	nop
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20001ab4 	.word	0x20001ab4
 800d028:	20001a84 	.word	0x20001a84
 800d02c:	20001a98 	.word	0x20001a98
 800d030:	20001aac 	.word	0x20001aac
 800d034:	20001ab0 	.word	0x20001ab0
 800d038:	20001b60 	.word	0x20001b60
 800d03c:	20001ac0 	.word	0x20001ac0
 800d040:	0800e544 	.word	0x0800e544

0800d044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3b04      	subs	r3, #4
 800d054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3b04      	subs	r3, #4
 800d062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f023 0201 	bic.w	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3b04      	subs	r3, #4
 800d072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d074:	4a0c      	ldr	r2, [pc, #48]	@ (800d0a8 <pxPortInitialiseStack+0x64>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3b14      	subs	r3, #20
 800d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3b04      	subs	r3, #4
 800d08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f06f 0202 	mvn.w	r2, #2
 800d092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3b20      	subs	r3, #32
 800d098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	0800d0ad 	.word	0x0800d0ad

0800d0ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0b6:	4b13      	ldr	r3, [pc, #76]	@ (800d104 <prvTaskExitError+0x58>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0be:	d00b      	beq.n	800d0d8 <prvTaskExitError+0x2c>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <prvTaskExitError+0x28>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	60bb      	str	r3, [r7, #8]
}
 800d0ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ec:	bf00      	nop
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0fc      	beq.n	800d0ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	20000044 	.word	0x20000044
	...

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	@ (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	20001584 	.word	0x20001584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	@ (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d166:	4b47      	ldr	r3, [pc, #284]	@ (800d284 <xPortStartScheduler+0x124>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a47      	ldr	r2, [pc, #284]	@ (800d288 <xPortStartScheduler+0x128>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d10b      	bne.n	800d188 <xPortStartScheduler+0x28>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	60fb      	str	r3, [r7, #12]
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	e7fd      	b.n	800d184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d188:	4b3e      	ldr	r3, [pc, #248]	@ (800d284 <xPortStartScheduler+0x124>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a3f      	ldr	r2, [pc, #252]	@ (800d28c <xPortStartScheduler+0x12c>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d10b      	bne.n	800d1aa <xPortStartScheduler+0x4a>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	613b      	str	r3, [r7, #16]
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	e7fd      	b.n	800d1a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1aa:	4b39      	ldr	r3, [pc, #228]	@ (800d290 <xPortStartScheduler+0x130>)
 800d1ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	22ff      	movs	r2, #255	@ 0xff
 800d1ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	4b31      	ldr	r3, [pc, #196]	@ (800d294 <xPortStartScheduler+0x134>)
 800d1d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1d2:	4b31      	ldr	r3, [pc, #196]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1d4:	2207      	movs	r2, #7
 800d1d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1d8:	e009      	b.n	800d1ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d1da:	4b2f      	ldr	r3, [pc, #188]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1f6:	2b80      	cmp	r3, #128	@ 0x80
 800d1f8:	d0ef      	beq.n	800d1da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1fa:	4b27      	ldr	r3, [pc, #156]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f1c3 0307 	rsb	r3, r3, #7
 800d202:	2b04      	cmp	r3, #4
 800d204:	d00b      	beq.n	800d21e <xPortStartScheduler+0xbe>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	60bb      	str	r3, [r7, #8]
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	e7fd      	b.n	800d21a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d21e:	4b1e      	ldr	r3, [pc, #120]	@ (800d298 <xPortStartScheduler+0x138>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	021b      	lsls	r3, r3, #8
 800d224:	4a1c      	ldr	r2, [pc, #112]	@ (800d298 <xPortStartScheduler+0x138>)
 800d226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d228:	4b1b      	ldr	r3, [pc, #108]	@ (800d298 <xPortStartScheduler+0x138>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d230:	4a19      	ldr	r2, [pc, #100]	@ (800d298 <xPortStartScheduler+0x138>)
 800d232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d23c:	4b17      	ldr	r3, [pc, #92]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a16      	ldr	r2, [pc, #88]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d248:	4b14      	ldr	r3, [pc, #80]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a13      	ldr	r2, [pc, #76]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d24e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d254:	f000 f8da 	bl	800d40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d258:	4b11      	ldr	r3, [pc, #68]	@ (800d2a0 <xPortStartScheduler+0x140>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d25e:	f000 f8f9 	bl	800d454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d262:	4b10      	ldr	r3, [pc, #64]	@ (800d2a4 <xPortStartScheduler+0x144>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a0f      	ldr	r2, [pc, #60]	@ (800d2a4 <xPortStartScheduler+0x144>)
 800d268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d26c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d26e:	f7ff ff63 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d272:	f7fe ff4b 	bl	800c10c <vTaskSwitchContext>
	prvTaskExitError();
 800d276:	f7ff ff19 	bl	800d0ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3718      	adds	r7, #24
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	e000ed00 	.word	0xe000ed00
 800d288:	410fc271 	.word	0x410fc271
 800d28c:	410fc270 	.word	0x410fc270
 800d290:	e000e400 	.word	0xe000e400
 800d294:	20001bb0 	.word	0x20001bb0
 800d298:	20001bb4 	.word	0x20001bb4
 800d29c:	e000ed20 	.word	0xe000ed20
 800d2a0:	20000044 	.word	0x20000044
 800d2a4:	e000ef34 	.word	0xe000ef34

0800d2a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	607b      	str	r3, [r7, #4]
}
 800d2c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d110      	bne.n	800d2f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d308 <vPortEnterCritical+0x60>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00b      	beq.n	800d2f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	603b      	str	r3, [r7, #0]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <vPortEnterCritical+0x4a>
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000044 	.word	0x20000044
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d312:	4b12      	ldr	r3, [pc, #72]	@ (800d35c <vPortExitCritical+0x50>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10b      	bne.n	800d332 <vPortExitCritical+0x26>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	607b      	str	r3, [r7, #4]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d332:	4b0a      	ldr	r3, [pc, #40]	@ (800d35c <vPortExitCritical+0x50>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3b01      	subs	r3, #1
 800d338:	4a08      	ldr	r2, [pc, #32]	@ (800d35c <vPortExitCritical+0x50>)
 800d33a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <vPortExitCritical+0x50>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d105      	bne.n	800d350 <vPortExitCritical+0x44>
 800d344:	2300      	movs	r3, #0
 800d346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	f383 8811 	msr	BASEPRI, r3
}
 800d34e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000044 	.word	0x20000044

0800d360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d360:	f3ef 8009 	mrs	r0, PSP
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4b15      	ldr	r3, [pc, #84]	@ (800d3c0 <pxCurrentTCBConst>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	f01e 0f10 	tst.w	lr, #16
 800d370:	bf08      	it	eq
 800d372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	6010      	str	r0, [r2, #0]
 800d37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d384:	f380 8811 	msr	BASEPRI, r0
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f7fe febc 	bl	800c10c <vTaskSwitchContext>
 800d394:	f04f 0000 	mov.w	r0, #0
 800d398:	f380 8811 	msr	BASEPRI, r0
 800d39c:	bc09      	pop	{r0, r3}
 800d39e:	6819      	ldr	r1, [r3, #0]
 800d3a0:	6808      	ldr	r0, [r1, #0]
 800d3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a6:	f01e 0f10 	tst.w	lr, #16
 800d3aa:	bf08      	it	eq
 800d3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3b0:	f380 8809 	msr	PSP, r0
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w

0800d3c0 <pxCurrentTCBConst>:
 800d3c0:	20001584 	.word	0x20001584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop

0800d3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	607b      	str	r3, [r7, #4]
}
 800d3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3e2:	f7fe fdd9 	bl	800bf98 <xTaskIncrementTick>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ec:	4b06      	ldr	r3, [pc, #24]	@ (800d408 <xPortSysTickHandler+0x40>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f383 8811 	msr	BASEPRI, r3
}
 800d3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d410:	4b0b      	ldr	r3, [pc, #44]	@ (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d416:	4b0b      	ldr	r3, [pc, #44]	@ (800d444 <vPortSetupTimerInterrupt+0x38>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d41c:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <vPortSetupTimerInterrupt+0x3c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0a      	ldr	r2, [pc, #40]	@ (800d44c <vPortSetupTimerInterrupt+0x40>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	099b      	lsrs	r3, r3, #6
 800d428:	4a09      	ldr	r2, [pc, #36]	@ (800d450 <vPortSetupTimerInterrupt+0x44>)
 800d42a:	3b01      	subs	r3, #1
 800d42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d42e:	4b04      	ldr	r3, [pc, #16]	@ (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d430:	2207      	movs	r2, #7
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	e000e010 	.word	0xe000e010
 800d444:	e000e018 	.word	0xe000e018
 800d448:	20000038 	.word	0x20000038
 800d44c:	10624dd3 	.word	0x10624dd3
 800d450:	e000e014 	.word	0xe000e014

0800d454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d464 <vPortEnableVFP+0x10>
 800d458:	6801      	ldr	r1, [r0, #0]
 800d45a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d45e:	6001      	str	r1, [r0, #0]
 800d460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d462:	bf00      	nop
 800d464:	e000ed88 	.word	0xe000ed88

0800d468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d46e:	f3ef 8305 	mrs	r3, IPSR
 800d472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b0f      	cmp	r3, #15
 800d478:	d915      	bls.n	800d4a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d47a:	4a18      	ldr	r2, [pc, #96]	@ (800d4dc <vPortValidateInterruptPriority+0x74>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4413      	add	r3, r2
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d484:	4b16      	ldr	r3, [pc, #88]	@ (800d4e0 <vPortValidateInterruptPriority+0x78>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	7afa      	ldrb	r2, [r7, #11]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d20b      	bcs.n	800d4a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e4 <vPortValidateInterruptPriority+0x7c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e8 <vPortValidateInterruptPriority+0x80>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d90b      	bls.n	800d4ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	603b      	str	r3, [r7, #0]
}
 800d4c8:	bf00      	nop
 800d4ca:	bf00      	nop
 800d4cc:	e7fd      	b.n	800d4ca <vPortValidateInterruptPriority+0x62>
	}
 800d4ce:	bf00      	nop
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	e000e3f0 	.word	0xe000e3f0
 800d4e0:	20001bb0 	.word	0x20001bb0
 800d4e4:	e000ed0c 	.word	0xe000ed0c
 800d4e8:	20001bb4 	.word	0x20001bb4

0800d4ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	@ 0x28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f8:	f7fe fb98 	bl	800bc2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d670 <pvPortMalloc+0x184>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d504:	f000 f924 	bl	800d750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d508:	4b5a      	ldr	r3, [pc, #360]	@ (800d674 <pvPortMalloc+0x188>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4013      	ands	r3, r2
 800d510:	2b00      	cmp	r3, #0
 800d512:	f040 8095 	bne.w	800d640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01e      	beq.n	800d55a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d51c:	2208      	movs	r2, #8
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4413      	add	r3, r2
 800d522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f003 0307 	and.w	r3, r3, #7
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d015      	beq.n	800d55a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <pvPortMalloc+0x6e>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	617b      	str	r3, [r7, #20]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d06f      	beq.n	800d640 <pvPortMalloc+0x154>
 800d560:	4b45      	ldr	r3, [pc, #276]	@ (800d678 <pvPortMalloc+0x18c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d86a      	bhi.n	800d640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d56a:	4b44      	ldr	r3, [pc, #272]	@ (800d67c <pvPortMalloc+0x190>)
 800d56c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d56e:	4b43      	ldr	r3, [pc, #268]	@ (800d67c <pvPortMalloc+0x190>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d574:	e004      	b.n	800d580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	429a      	cmp	r2, r3
 800d588:	d903      	bls.n	800d592 <pvPortMalloc+0xa6>
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f1      	bne.n	800d576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d592:	4b37      	ldr	r3, [pc, #220]	@ (800d670 <pvPortMalloc+0x184>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d598:	429a      	cmp	r2, r3
 800d59a:	d051      	beq.n	800d640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	4413      	add	r3, r2
 800d5a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	1ad2      	subs	r2, r2, r3
 800d5b6:	2308      	movs	r3, #8
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d920      	bls.n	800d600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	f003 0307 	and.w	r3, r3, #7
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <pvPortMalloc+0xfc>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	613b      	str	r3, [r7, #16]
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	e7fd      	b.n	800d5e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	1ad2      	subs	r2, r2, r3
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5fa:	69b8      	ldr	r0, [r7, #24]
 800d5fc:	f000 f90a 	bl	800d814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d600:	4b1d      	ldr	r3, [pc, #116]	@ (800d678 <pvPortMalloc+0x18c>)
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	4a1b      	ldr	r2, [pc, #108]	@ (800d678 <pvPortMalloc+0x18c>)
 800d60c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d60e:	4b1a      	ldr	r3, [pc, #104]	@ (800d678 <pvPortMalloc+0x18c>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b1b      	ldr	r3, [pc, #108]	@ (800d680 <pvPortMalloc+0x194>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d203      	bcs.n	800d622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d61a:	4b17      	ldr	r3, [pc, #92]	@ (800d678 <pvPortMalloc+0x18c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a18      	ldr	r2, [pc, #96]	@ (800d680 <pvPortMalloc+0x194>)
 800d620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	4b13      	ldr	r3, [pc, #76]	@ (800d674 <pvPortMalloc+0x188>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d636:	4b13      	ldr	r3, [pc, #76]	@ (800d684 <pvPortMalloc+0x198>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	4a11      	ldr	r2, [pc, #68]	@ (800d684 <pvPortMalloc+0x198>)
 800d63e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d640:	f7fe fb02 	bl	800bc48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00b      	beq.n	800d666 <pvPortMalloc+0x17a>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	60fb      	str	r3, [r7, #12]
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	e7fd      	b.n	800d662 <pvPortMalloc+0x176>
	return pvReturn;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3728      	adds	r7, #40	@ 0x28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	200057c0 	.word	0x200057c0
 800d674:	200057d4 	.word	0x200057d4
 800d678:	200057c4 	.word	0x200057c4
 800d67c:	200057b8 	.word	0x200057b8
 800d680:	200057c8 	.word	0x200057c8
 800d684:	200057cc 	.word	0x200057cc

0800d688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d04f      	beq.n	800d73a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d69a:	2308      	movs	r3, #8
 800d69c:	425b      	negs	r3, r3
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	4b25      	ldr	r3, [pc, #148]	@ (800d744 <vPortFree+0xbc>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10b      	bne.n	800d6ce <vPortFree+0x46>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	60fb      	str	r3, [r7, #12]
}
 800d6c8:	bf00      	nop
 800d6ca:	bf00      	nop
 800d6cc:	e7fd      	b.n	800d6ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <vPortFree+0x66>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	60bb      	str	r3, [r7, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	bf00      	nop
 800d6ec:	e7fd      	b.n	800d6ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	4b14      	ldr	r3, [pc, #80]	@ (800d744 <vPortFree+0xbc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d01e      	beq.n	800d73a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d11a      	bne.n	800d73a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	685a      	ldr	r2, [r3, #4]
 800d708:	4b0e      	ldr	r3, [pc, #56]	@ (800d744 <vPortFree+0xbc>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	43db      	mvns	r3, r3
 800d70e:	401a      	ands	r2, r3
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d714:	f7fe fa8a 	bl	800bc2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	4b0a      	ldr	r3, [pc, #40]	@ (800d748 <vPortFree+0xc0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4413      	add	r3, r2
 800d722:	4a09      	ldr	r2, [pc, #36]	@ (800d748 <vPortFree+0xc0>)
 800d724:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f000 f874 	bl	800d814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d72c:	4b07      	ldr	r3, [pc, #28]	@ (800d74c <vPortFree+0xc4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	4a06      	ldr	r2, [pc, #24]	@ (800d74c <vPortFree+0xc4>)
 800d734:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d736:	f7fe fa87 	bl	800bc48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d73a:	bf00      	nop
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	200057d4 	.word	0x200057d4
 800d748:	200057c4 	.word	0x200057c4
 800d74c:	200057d0 	.word	0x200057d0

0800d750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d756:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d75a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d75c:	4b27      	ldr	r3, [pc, #156]	@ (800d7fc <prvHeapInit+0xac>)
 800d75e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00c      	beq.n	800d784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3307      	adds	r3, #7
 800d76e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 0307 	bic.w	r3, r3, #7
 800d776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	4a1f      	ldr	r2, [pc, #124]	@ (800d7fc <prvHeapInit+0xac>)
 800d780:	4413      	add	r3, r2
 800d782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d788:	4a1d      	ldr	r2, [pc, #116]	@ (800d800 <prvHeapInit+0xb0>)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d78e:	4b1c      	ldr	r3, [pc, #112]	@ (800d800 <prvHeapInit+0xb0>)
 800d790:	2200      	movs	r2, #0
 800d792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	4413      	add	r3, r2
 800d79a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d79c:	2208      	movs	r2, #8
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	1a9b      	subs	r3, r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0307 	bic.w	r3, r3, #7
 800d7aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	4a15      	ldr	r2, [pc, #84]	@ (800d804 <prvHeapInit+0xb4>)
 800d7b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7b2:	4b14      	ldr	r3, [pc, #80]	@ (800d804 <prvHeapInit+0xb4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7ba:	4b12      	ldr	r3, [pc, #72]	@ (800d804 <prvHeapInit+0xb4>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	1ad2      	subs	r2, r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d804 <prvHeapInit+0xb4>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4a0a      	ldr	r2, [pc, #40]	@ (800d808 <prvHeapInit+0xb8>)
 800d7de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4a09      	ldr	r2, [pc, #36]	@ (800d80c <prvHeapInit+0xbc>)
 800d7e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7e8:	4b09      	ldr	r3, [pc, #36]	@ (800d810 <prvHeapInit+0xc0>)
 800d7ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7ee:	601a      	str	r2, [r3, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	20001bb8 	.word	0x20001bb8
 800d800:	200057b8 	.word	0x200057b8
 800d804:	200057c0 	.word	0x200057c0
 800d808:	200057c8 	.word	0x200057c8
 800d80c:	200057c4 	.word	0x200057c4
 800d810:	200057d4 	.word	0x200057d4

0800d814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d81c:	4b28      	ldr	r3, [pc, #160]	@ (800d8c0 <prvInsertBlockIntoFreeList+0xac>)
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e002      	b.n	800d828 <prvInsertBlockIntoFreeList+0x14>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d8f7      	bhi.n	800d822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	4413      	add	r3, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	429a      	cmp	r2, r3
 800d842:	d108      	bne.n	800d856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	441a      	add	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	441a      	add	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d118      	bne.n	800d89c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	4b15      	ldr	r3, [pc, #84]	@ (800d8c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d00d      	beq.n	800d892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	441a      	add	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	e008      	b.n	800d8a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d892:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	e003      	b.n	800d8a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d002      	beq.n	800d8b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	200057b8 	.word	0x200057b8
 800d8c4:	200057c0 	.word	0x200057c0

0800d8c8 <_vsiprintf_r>:
 800d8c8:	b510      	push	{r4, lr}
 800d8ca:	b09a      	sub	sp, #104	@ 0x68
 800d8cc:	2400      	movs	r4, #0
 800d8ce:	9100      	str	r1, [sp, #0]
 800d8d0:	9104      	str	r1, [sp, #16]
 800d8d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d8d6:	9105      	str	r1, [sp, #20]
 800d8d8:	9102      	str	r1, [sp, #8]
 800d8da:	4905      	ldr	r1, [pc, #20]	@ (800d8f0 <_vsiprintf_r+0x28>)
 800d8dc:	9103      	str	r1, [sp, #12]
 800d8de:	4669      	mov	r1, sp
 800d8e0:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8e2:	f000 f957 	bl	800db94 <_svfiprintf_r>
 800d8e6:	9b00      	ldr	r3, [sp, #0]
 800d8e8:	701c      	strb	r4, [r3, #0]
 800d8ea:	b01a      	add	sp, #104	@ 0x68
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	bf00      	nop
 800d8f0:	ffff0208 	.word	0xffff0208

0800d8f4 <vsiprintf>:
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	460a      	mov	r2, r1
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	4802      	ldr	r0, [pc, #8]	@ (800d904 <vsiprintf+0x10>)
 800d8fc:	6800      	ldr	r0, [r0, #0]
 800d8fe:	f7ff bfe3 	b.w	800d8c8 <_vsiprintf_r>
 800d902:	bf00      	nop
 800d904:	20000048 	.word	0x20000048

0800d908 <memset>:
 800d908:	4402      	add	r2, r0
 800d90a:	4603      	mov	r3, r0
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d100      	bne.n	800d912 <memset+0xa>
 800d910:	4770      	bx	lr
 800d912:	f803 1b01 	strb.w	r1, [r3], #1
 800d916:	e7f9      	b.n	800d90c <memset+0x4>

0800d918 <__errno>:
 800d918:	4b01      	ldr	r3, [pc, #4]	@ (800d920 <__errno+0x8>)
 800d91a:	6818      	ldr	r0, [r3, #0]
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	20000048 	.word	0x20000048

0800d924 <__libc_init_array>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	4d0d      	ldr	r5, [pc, #52]	@ (800d95c <__libc_init_array+0x38>)
 800d928:	4c0d      	ldr	r4, [pc, #52]	@ (800d960 <__libc_init_array+0x3c>)
 800d92a:	1b64      	subs	r4, r4, r5
 800d92c:	10a4      	asrs	r4, r4, #2
 800d92e:	2600      	movs	r6, #0
 800d930:	42a6      	cmp	r6, r4
 800d932:	d109      	bne.n	800d948 <__libc_init_array+0x24>
 800d934:	4d0b      	ldr	r5, [pc, #44]	@ (800d964 <__libc_init_array+0x40>)
 800d936:	4c0c      	ldr	r4, [pc, #48]	@ (800d968 <__libc_init_array+0x44>)
 800d938:	f000 fdbe 	bl	800e4b8 <_init>
 800d93c:	1b64      	subs	r4, r4, r5
 800d93e:	10a4      	asrs	r4, r4, #2
 800d940:	2600      	movs	r6, #0
 800d942:	42a6      	cmp	r6, r4
 800d944:	d105      	bne.n	800d952 <__libc_init_array+0x2e>
 800d946:	bd70      	pop	{r4, r5, r6, pc}
 800d948:	f855 3b04 	ldr.w	r3, [r5], #4
 800d94c:	4798      	blx	r3
 800d94e:	3601      	adds	r6, #1
 800d950:	e7ee      	b.n	800d930 <__libc_init_array+0xc>
 800d952:	f855 3b04 	ldr.w	r3, [r5], #4
 800d956:	4798      	blx	r3
 800d958:	3601      	adds	r6, #1
 800d95a:	e7f2      	b.n	800d942 <__libc_init_array+0x1e>
 800d95c:	0800e664 	.word	0x0800e664
 800d960:	0800e664 	.word	0x0800e664
 800d964:	0800e664 	.word	0x0800e664
 800d968:	0800e668 	.word	0x0800e668

0800d96c <__retarget_lock_acquire_recursive>:
 800d96c:	4770      	bx	lr

0800d96e <__retarget_lock_release_recursive>:
 800d96e:	4770      	bx	lr

0800d970 <_reclaim_reent>:
 800d970:	4b2d      	ldr	r3, [pc, #180]	@ (800da28 <_reclaim_reent+0xb8>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4283      	cmp	r3, r0
 800d976:	b570      	push	{r4, r5, r6, lr}
 800d978:	4604      	mov	r4, r0
 800d97a:	d053      	beq.n	800da24 <_reclaim_reent+0xb4>
 800d97c:	69c3      	ldr	r3, [r0, #28]
 800d97e:	b31b      	cbz	r3, 800d9c8 <_reclaim_reent+0x58>
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	b163      	cbz	r3, 800d99e <_reclaim_reent+0x2e>
 800d984:	2500      	movs	r5, #0
 800d986:	69e3      	ldr	r3, [r4, #28]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	5959      	ldr	r1, [r3, r5]
 800d98c:	b9b1      	cbnz	r1, 800d9bc <_reclaim_reent+0x4c>
 800d98e:	3504      	adds	r5, #4
 800d990:	2d80      	cmp	r5, #128	@ 0x80
 800d992:	d1f8      	bne.n	800d986 <_reclaim_reent+0x16>
 800d994:	69e3      	ldr	r3, [r4, #28]
 800d996:	4620      	mov	r0, r4
 800d998:	68d9      	ldr	r1, [r3, #12]
 800d99a:	f000 f855 	bl	800da48 <_free_r>
 800d99e:	69e3      	ldr	r3, [r4, #28]
 800d9a0:	6819      	ldr	r1, [r3, #0]
 800d9a2:	b111      	cbz	r1, 800d9aa <_reclaim_reent+0x3a>
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 f84f 	bl	800da48 <_free_r>
 800d9aa:	69e3      	ldr	r3, [r4, #28]
 800d9ac:	689d      	ldr	r5, [r3, #8]
 800d9ae:	b15d      	cbz	r5, 800d9c8 <_reclaim_reent+0x58>
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	682d      	ldr	r5, [r5, #0]
 800d9b6:	f000 f847 	bl	800da48 <_free_r>
 800d9ba:	e7f8      	b.n	800d9ae <_reclaim_reent+0x3e>
 800d9bc:	680e      	ldr	r6, [r1, #0]
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f000 f842 	bl	800da48 <_free_r>
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	e7e1      	b.n	800d98c <_reclaim_reent+0x1c>
 800d9c8:	6961      	ldr	r1, [r4, #20]
 800d9ca:	b111      	cbz	r1, 800d9d2 <_reclaim_reent+0x62>
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f000 f83b 	bl	800da48 <_free_r>
 800d9d2:	69e1      	ldr	r1, [r4, #28]
 800d9d4:	b111      	cbz	r1, 800d9dc <_reclaim_reent+0x6c>
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f000 f836 	bl	800da48 <_free_r>
 800d9dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d9de:	b111      	cbz	r1, 800d9e6 <_reclaim_reent+0x76>
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f000 f831 	bl	800da48 <_free_r>
 800d9e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9e8:	b111      	cbz	r1, 800d9f0 <_reclaim_reent+0x80>
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f000 f82c 	bl	800da48 <_free_r>
 800d9f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d9f2:	b111      	cbz	r1, 800d9fa <_reclaim_reent+0x8a>
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f000 f827 	bl	800da48 <_free_r>
 800d9fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d9fc:	b111      	cbz	r1, 800da04 <_reclaim_reent+0x94>
 800d9fe:	4620      	mov	r0, r4
 800da00:	f000 f822 	bl	800da48 <_free_r>
 800da04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800da06:	b111      	cbz	r1, 800da0e <_reclaim_reent+0x9e>
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 f81d 	bl	800da48 <_free_r>
 800da0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800da10:	b111      	cbz	r1, 800da18 <_reclaim_reent+0xa8>
 800da12:	4620      	mov	r0, r4
 800da14:	f000 f818 	bl	800da48 <_free_r>
 800da18:	6a23      	ldr	r3, [r4, #32]
 800da1a:	b11b      	cbz	r3, 800da24 <_reclaim_reent+0xb4>
 800da1c:	4620      	mov	r0, r4
 800da1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da22:	4718      	bx	r3
 800da24:	bd70      	pop	{r4, r5, r6, pc}
 800da26:	bf00      	nop
 800da28:	20000048 	.word	0x20000048

0800da2c <memcpy>:
 800da2c:	440a      	add	r2, r1
 800da2e:	4291      	cmp	r1, r2
 800da30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da34:	d100      	bne.n	800da38 <memcpy+0xc>
 800da36:	4770      	bx	lr
 800da38:	b510      	push	{r4, lr}
 800da3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da42:	4291      	cmp	r1, r2
 800da44:	d1f9      	bne.n	800da3a <memcpy+0xe>
 800da46:	bd10      	pop	{r4, pc}

0800da48 <_free_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4605      	mov	r5, r0
 800da4c:	2900      	cmp	r1, #0
 800da4e:	d041      	beq.n	800dad4 <_free_r+0x8c>
 800da50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da54:	1f0c      	subs	r4, r1, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfb8      	it	lt
 800da5a:	18e4      	addlt	r4, r4, r3
 800da5c:	f000 fbc4 	bl	800e1e8 <__malloc_lock>
 800da60:	4a1d      	ldr	r2, [pc, #116]	@ (800dad8 <_free_r+0x90>)
 800da62:	6813      	ldr	r3, [r2, #0]
 800da64:	b933      	cbnz	r3, 800da74 <_free_r+0x2c>
 800da66:	6063      	str	r3, [r4, #4]
 800da68:	6014      	str	r4, [r2, #0]
 800da6a:	4628      	mov	r0, r5
 800da6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da70:	f000 bbc0 	b.w	800e1f4 <__malloc_unlock>
 800da74:	42a3      	cmp	r3, r4
 800da76:	d908      	bls.n	800da8a <_free_r+0x42>
 800da78:	6820      	ldr	r0, [r4, #0]
 800da7a:	1821      	adds	r1, r4, r0
 800da7c:	428b      	cmp	r3, r1
 800da7e:	bf01      	itttt	eq
 800da80:	6819      	ldreq	r1, [r3, #0]
 800da82:	685b      	ldreq	r3, [r3, #4]
 800da84:	1809      	addeq	r1, r1, r0
 800da86:	6021      	streq	r1, [r4, #0]
 800da88:	e7ed      	b.n	800da66 <_free_r+0x1e>
 800da8a:	461a      	mov	r2, r3
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	b10b      	cbz	r3, 800da94 <_free_r+0x4c>
 800da90:	42a3      	cmp	r3, r4
 800da92:	d9fa      	bls.n	800da8a <_free_r+0x42>
 800da94:	6811      	ldr	r1, [r2, #0]
 800da96:	1850      	adds	r0, r2, r1
 800da98:	42a0      	cmp	r0, r4
 800da9a:	d10b      	bne.n	800dab4 <_free_r+0x6c>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	4401      	add	r1, r0
 800daa0:	1850      	adds	r0, r2, r1
 800daa2:	4283      	cmp	r3, r0
 800daa4:	6011      	str	r1, [r2, #0]
 800daa6:	d1e0      	bne.n	800da6a <_free_r+0x22>
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	6053      	str	r3, [r2, #4]
 800daae:	4408      	add	r0, r1
 800dab0:	6010      	str	r0, [r2, #0]
 800dab2:	e7da      	b.n	800da6a <_free_r+0x22>
 800dab4:	d902      	bls.n	800dabc <_free_r+0x74>
 800dab6:	230c      	movs	r3, #12
 800dab8:	602b      	str	r3, [r5, #0]
 800daba:	e7d6      	b.n	800da6a <_free_r+0x22>
 800dabc:	6820      	ldr	r0, [r4, #0]
 800dabe:	1821      	adds	r1, r4, r0
 800dac0:	428b      	cmp	r3, r1
 800dac2:	bf04      	itt	eq
 800dac4:	6819      	ldreq	r1, [r3, #0]
 800dac6:	685b      	ldreq	r3, [r3, #4]
 800dac8:	6063      	str	r3, [r4, #4]
 800daca:	bf04      	itt	eq
 800dacc:	1809      	addeq	r1, r1, r0
 800dace:	6021      	streq	r1, [r4, #0]
 800dad0:	6054      	str	r4, [r2, #4]
 800dad2:	e7ca      	b.n	800da6a <_free_r+0x22>
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	2000591c 	.word	0x2000591c

0800dadc <__ssputs_r>:
 800dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	688e      	ldr	r6, [r1, #8]
 800dae2:	461f      	mov	r7, r3
 800dae4:	42be      	cmp	r6, r7
 800dae6:	680b      	ldr	r3, [r1, #0]
 800dae8:	4682      	mov	sl, r0
 800daea:	460c      	mov	r4, r1
 800daec:	4690      	mov	r8, r2
 800daee:	d82d      	bhi.n	800db4c <__ssputs_r+0x70>
 800daf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800daf8:	d026      	beq.n	800db48 <__ssputs_r+0x6c>
 800dafa:	6965      	ldr	r5, [r4, #20]
 800dafc:	6909      	ldr	r1, [r1, #16]
 800dafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db02:	eba3 0901 	sub.w	r9, r3, r1
 800db06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db0a:	1c7b      	adds	r3, r7, #1
 800db0c:	444b      	add	r3, r9
 800db0e:	106d      	asrs	r5, r5, #1
 800db10:	429d      	cmp	r5, r3
 800db12:	bf38      	it	cc
 800db14:	461d      	movcc	r5, r3
 800db16:	0553      	lsls	r3, r2, #21
 800db18:	d527      	bpl.n	800db6a <__ssputs_r+0x8e>
 800db1a:	4629      	mov	r1, r5
 800db1c:	f000 f958 	bl	800ddd0 <_malloc_r>
 800db20:	4606      	mov	r6, r0
 800db22:	b360      	cbz	r0, 800db7e <__ssputs_r+0xa2>
 800db24:	6921      	ldr	r1, [r4, #16]
 800db26:	464a      	mov	r2, r9
 800db28:	f7ff ff80 	bl	800da2c <memcpy>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	6126      	str	r6, [r4, #16]
 800db3a:	6165      	str	r5, [r4, #20]
 800db3c:	444e      	add	r6, r9
 800db3e:	eba5 0509 	sub.w	r5, r5, r9
 800db42:	6026      	str	r6, [r4, #0]
 800db44:	60a5      	str	r5, [r4, #8]
 800db46:	463e      	mov	r6, r7
 800db48:	42be      	cmp	r6, r7
 800db4a:	d900      	bls.n	800db4e <__ssputs_r+0x72>
 800db4c:	463e      	mov	r6, r7
 800db4e:	6820      	ldr	r0, [r4, #0]
 800db50:	4632      	mov	r2, r6
 800db52:	4641      	mov	r1, r8
 800db54:	f000 fb82 	bl	800e25c <memmove>
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	1b9b      	subs	r3, r3, r6
 800db5c:	60a3      	str	r3, [r4, #8]
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	4433      	add	r3, r6
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	2000      	movs	r0, #0
 800db66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6a:	462a      	mov	r2, r5
 800db6c:	f000 fb48 	bl	800e200 <_realloc_r>
 800db70:	4606      	mov	r6, r0
 800db72:	2800      	cmp	r0, #0
 800db74:	d1e0      	bne.n	800db38 <__ssputs_r+0x5c>
 800db76:	6921      	ldr	r1, [r4, #16]
 800db78:	4650      	mov	r0, sl
 800db7a:	f7ff ff65 	bl	800da48 <_free_r>
 800db7e:	230c      	movs	r3, #12
 800db80:	f8ca 3000 	str.w	r3, [sl]
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db90:	e7e9      	b.n	800db66 <__ssputs_r+0x8a>
	...

0800db94 <_svfiprintf_r>:
 800db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	4698      	mov	r8, r3
 800db9a:	898b      	ldrh	r3, [r1, #12]
 800db9c:	061b      	lsls	r3, r3, #24
 800db9e:	b09d      	sub	sp, #116	@ 0x74
 800dba0:	4607      	mov	r7, r0
 800dba2:	460d      	mov	r5, r1
 800dba4:	4614      	mov	r4, r2
 800dba6:	d510      	bpl.n	800dbca <_svfiprintf_r+0x36>
 800dba8:	690b      	ldr	r3, [r1, #16]
 800dbaa:	b973      	cbnz	r3, 800dbca <_svfiprintf_r+0x36>
 800dbac:	2140      	movs	r1, #64	@ 0x40
 800dbae:	f000 f90f 	bl	800ddd0 <_malloc_r>
 800dbb2:	6028      	str	r0, [r5, #0]
 800dbb4:	6128      	str	r0, [r5, #16]
 800dbb6:	b930      	cbnz	r0, 800dbc6 <_svfiprintf_r+0x32>
 800dbb8:	230c      	movs	r3, #12
 800dbba:	603b      	str	r3, [r7, #0]
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbc0:	b01d      	add	sp, #116	@ 0x74
 800dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc6:	2340      	movs	r3, #64	@ 0x40
 800dbc8:	616b      	str	r3, [r5, #20]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbce:	2320      	movs	r3, #32
 800dbd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd8:	2330      	movs	r3, #48	@ 0x30
 800dbda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd78 <_svfiprintf_r+0x1e4>
 800dbde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbe2:	f04f 0901 	mov.w	r9, #1
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	469a      	mov	sl, r3
 800dbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbee:	b10a      	cbz	r2, 800dbf4 <_svfiprintf_r+0x60>
 800dbf0:	2a25      	cmp	r2, #37	@ 0x25
 800dbf2:	d1f9      	bne.n	800dbe8 <_svfiprintf_r+0x54>
 800dbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf8:	d00b      	beq.n	800dc12 <_svfiprintf_r+0x7e>
 800dbfa:	465b      	mov	r3, fp
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ff6b 	bl	800dadc <__ssputs_r>
 800dc06:	3001      	adds	r0, #1
 800dc08:	f000 80a7 	beq.w	800dd5a <_svfiprintf_r+0x1c6>
 800dc0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc0e:	445a      	add	r2, fp
 800dc10:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 809f 	beq.w	800dd5a <_svfiprintf_r+0x1c6>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc26:	f10a 0a01 	add.w	sl, sl, #1
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	9307      	str	r3, [sp, #28]
 800dc2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc32:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc34:	4654      	mov	r4, sl
 800dc36:	2205      	movs	r2, #5
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	484e      	ldr	r0, [pc, #312]	@ (800dd78 <_svfiprintf_r+0x1e4>)
 800dc3e:	f7f2 facf 	bl	80001e0 <memchr>
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	b9d8      	cbnz	r0, 800dc7e <_svfiprintf_r+0xea>
 800dc46:	06d0      	lsls	r0, r2, #27
 800dc48:	bf44      	itt	mi
 800dc4a:	2320      	movmi	r3, #32
 800dc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc50:	0711      	lsls	r1, r2, #28
 800dc52:	bf44      	itt	mi
 800dc54:	232b      	movmi	r3, #43	@ 0x2b
 800dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc60:	d015      	beq.n	800dc8e <_svfiprintf_r+0xfa>
 800dc62:	9a07      	ldr	r2, [sp, #28]
 800dc64:	4654      	mov	r4, sl
 800dc66:	2000      	movs	r0, #0
 800dc68:	f04f 0c0a 	mov.w	ip, #10
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc72:	3b30      	subs	r3, #48	@ 0x30
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d94b      	bls.n	800dd10 <_svfiprintf_r+0x17c>
 800dc78:	b1b0      	cbz	r0, 800dca8 <_svfiprintf_r+0x114>
 800dc7a:	9207      	str	r2, [sp, #28]
 800dc7c:	e014      	b.n	800dca8 <_svfiprintf_r+0x114>
 800dc7e:	eba0 0308 	sub.w	r3, r0, r8
 800dc82:	fa09 f303 	lsl.w	r3, r9, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	46a2      	mov	sl, r4
 800dc8c:	e7d2      	b.n	800dc34 <_svfiprintf_r+0xa0>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d19      	adds	r1, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9103      	str	r1, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbb      	ittet	lt
 800dc9a:	425b      	neglt	r3, r3
 800dc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dca0:	9307      	strge	r3, [sp, #28]
 800dca2:	9307      	strlt	r3, [sp, #28]
 800dca4:	bfb8      	it	lt
 800dca6:	9204      	strlt	r2, [sp, #16]
 800dca8:	7823      	ldrb	r3, [r4, #0]
 800dcaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcac:	d10a      	bne.n	800dcc4 <_svfiprintf_r+0x130>
 800dcae:	7863      	ldrb	r3, [r4, #1]
 800dcb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcb2:	d132      	bne.n	800dd1a <_svfiprintf_r+0x186>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	1d1a      	adds	r2, r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	9203      	str	r2, [sp, #12]
 800dcbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcc0:	3402      	adds	r4, #2
 800dcc2:	9305      	str	r3, [sp, #20]
 800dcc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd88 <_svfiprintf_r+0x1f4>
 800dcc8:	7821      	ldrb	r1, [r4, #0]
 800dcca:	2203      	movs	r2, #3
 800dccc:	4650      	mov	r0, sl
 800dcce:	f7f2 fa87 	bl	80001e0 <memchr>
 800dcd2:	b138      	cbz	r0, 800dce4 <_svfiprintf_r+0x150>
 800dcd4:	9b04      	ldr	r3, [sp, #16]
 800dcd6:	eba0 000a 	sub.w	r0, r0, sl
 800dcda:	2240      	movs	r2, #64	@ 0x40
 800dcdc:	4082      	lsls	r2, r0
 800dcde:	4313      	orrs	r3, r2
 800dce0:	3401      	adds	r4, #1
 800dce2:	9304      	str	r3, [sp, #16]
 800dce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce8:	4824      	ldr	r0, [pc, #144]	@ (800dd7c <_svfiprintf_r+0x1e8>)
 800dcea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcee:	2206      	movs	r2, #6
 800dcf0:	f7f2 fa76 	bl	80001e0 <memchr>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d036      	beq.n	800dd66 <_svfiprintf_r+0x1d2>
 800dcf8:	4b21      	ldr	r3, [pc, #132]	@ (800dd80 <_svfiprintf_r+0x1ec>)
 800dcfa:	bb1b      	cbnz	r3, 800dd44 <_svfiprintf_r+0x1b0>
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	3307      	adds	r3, #7
 800dd00:	f023 0307 	bic.w	r3, r3, #7
 800dd04:	3308      	adds	r3, #8
 800dd06:	9303      	str	r3, [sp, #12]
 800dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0a:	4433      	add	r3, r6
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	e76a      	b.n	800dbe6 <_svfiprintf_r+0x52>
 800dd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd14:	460c      	mov	r4, r1
 800dd16:	2001      	movs	r0, #1
 800dd18:	e7a8      	b.n	800dc6c <_svfiprintf_r+0xd8>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	3401      	adds	r4, #1
 800dd1e:	9305      	str	r3, [sp, #20]
 800dd20:	4619      	mov	r1, r3
 800dd22:	f04f 0c0a 	mov.w	ip, #10
 800dd26:	4620      	mov	r0, r4
 800dd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd2c:	3a30      	subs	r2, #48	@ 0x30
 800dd2e:	2a09      	cmp	r2, #9
 800dd30:	d903      	bls.n	800dd3a <_svfiprintf_r+0x1a6>
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d0c6      	beq.n	800dcc4 <_svfiprintf_r+0x130>
 800dd36:	9105      	str	r1, [sp, #20]
 800dd38:	e7c4      	b.n	800dcc4 <_svfiprintf_r+0x130>
 800dd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd3e:	4604      	mov	r4, r0
 800dd40:	2301      	movs	r3, #1
 800dd42:	e7f0      	b.n	800dd26 <_svfiprintf_r+0x192>
 800dd44:	ab03      	add	r3, sp, #12
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	462a      	mov	r2, r5
 800dd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800dd84 <_svfiprintf_r+0x1f0>)
 800dd4c:	a904      	add	r1, sp, #16
 800dd4e:	4638      	mov	r0, r7
 800dd50:	f3af 8000 	nop.w
 800dd54:	1c42      	adds	r2, r0, #1
 800dd56:	4606      	mov	r6, r0
 800dd58:	d1d6      	bne.n	800dd08 <_svfiprintf_r+0x174>
 800dd5a:	89ab      	ldrh	r3, [r5, #12]
 800dd5c:	065b      	lsls	r3, r3, #25
 800dd5e:	f53f af2d 	bmi.w	800dbbc <_svfiprintf_r+0x28>
 800dd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd64:	e72c      	b.n	800dbc0 <_svfiprintf_r+0x2c>
 800dd66:	ab03      	add	r3, sp, #12
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4b05      	ldr	r3, [pc, #20]	@ (800dd84 <_svfiprintf_r+0x1f0>)
 800dd6e:	a904      	add	r1, sp, #16
 800dd70:	4638      	mov	r0, r7
 800dd72:	f000 f91b 	bl	800dfac <_printf_i>
 800dd76:	e7ed      	b.n	800dd54 <_svfiprintf_r+0x1c0>
 800dd78:	0800e608 	.word	0x0800e608
 800dd7c:	0800e612 	.word	0x0800e612
 800dd80:	00000000 	.word	0x00000000
 800dd84:	0800dadd 	.word	0x0800dadd
 800dd88:	0800e60e 	.word	0x0800e60e

0800dd8c <sbrk_aligned>:
 800dd8c:	b570      	push	{r4, r5, r6, lr}
 800dd8e:	4e0f      	ldr	r6, [pc, #60]	@ (800ddcc <sbrk_aligned+0x40>)
 800dd90:	460c      	mov	r4, r1
 800dd92:	6831      	ldr	r1, [r6, #0]
 800dd94:	4605      	mov	r5, r0
 800dd96:	b911      	cbnz	r1, 800dd9e <sbrk_aligned+0x12>
 800dd98:	f000 fa7a 	bl	800e290 <_sbrk_r>
 800dd9c:	6030      	str	r0, [r6, #0]
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4628      	mov	r0, r5
 800dda2:	f000 fa75 	bl	800e290 <_sbrk_r>
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	d103      	bne.n	800ddb2 <sbrk_aligned+0x26>
 800ddaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ddae:	4620      	mov	r0, r4
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	1cc4      	adds	r4, r0, #3
 800ddb4:	f024 0403 	bic.w	r4, r4, #3
 800ddb8:	42a0      	cmp	r0, r4
 800ddba:	d0f8      	beq.n	800ddae <sbrk_aligned+0x22>
 800ddbc:	1a21      	subs	r1, r4, r0
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f000 fa66 	bl	800e290 <_sbrk_r>
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d1f2      	bne.n	800ddae <sbrk_aligned+0x22>
 800ddc8:	e7ef      	b.n	800ddaa <sbrk_aligned+0x1e>
 800ddca:	bf00      	nop
 800ddcc:	20005918 	.word	0x20005918

0800ddd0 <_malloc_r>:
 800ddd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd4:	1ccd      	adds	r5, r1, #3
 800ddd6:	f025 0503 	bic.w	r5, r5, #3
 800ddda:	3508      	adds	r5, #8
 800dddc:	2d0c      	cmp	r5, #12
 800ddde:	bf38      	it	cc
 800dde0:	250c      	movcc	r5, #12
 800dde2:	2d00      	cmp	r5, #0
 800dde4:	4606      	mov	r6, r0
 800dde6:	db01      	blt.n	800ddec <_malloc_r+0x1c>
 800dde8:	42a9      	cmp	r1, r5
 800ddea:	d904      	bls.n	800ddf6 <_malloc_r+0x26>
 800ddec:	230c      	movs	r3, #12
 800ddee:	6033      	str	r3, [r6, #0]
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800decc <_malloc_r+0xfc>
 800ddfa:	f000 f9f5 	bl	800e1e8 <__malloc_lock>
 800ddfe:	f8d8 3000 	ldr.w	r3, [r8]
 800de02:	461c      	mov	r4, r3
 800de04:	bb44      	cbnz	r4, 800de58 <_malloc_r+0x88>
 800de06:	4629      	mov	r1, r5
 800de08:	4630      	mov	r0, r6
 800de0a:	f7ff ffbf 	bl	800dd8c <sbrk_aligned>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	4604      	mov	r4, r0
 800de12:	d158      	bne.n	800dec6 <_malloc_r+0xf6>
 800de14:	f8d8 4000 	ldr.w	r4, [r8]
 800de18:	4627      	mov	r7, r4
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d143      	bne.n	800dea6 <_malloc_r+0xd6>
 800de1e:	2c00      	cmp	r4, #0
 800de20:	d04b      	beq.n	800deba <_malloc_r+0xea>
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	4639      	mov	r1, r7
 800de26:	4630      	mov	r0, r6
 800de28:	eb04 0903 	add.w	r9, r4, r3
 800de2c:	f000 fa30 	bl	800e290 <_sbrk_r>
 800de30:	4581      	cmp	r9, r0
 800de32:	d142      	bne.n	800deba <_malloc_r+0xea>
 800de34:	6821      	ldr	r1, [r4, #0]
 800de36:	1a6d      	subs	r5, r5, r1
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f7ff ffa6 	bl	800dd8c <sbrk_aligned>
 800de40:	3001      	adds	r0, #1
 800de42:	d03a      	beq.n	800deba <_malloc_r+0xea>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	442b      	add	r3, r5
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	f8d8 3000 	ldr.w	r3, [r8]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	bb62      	cbnz	r2, 800deac <_malloc_r+0xdc>
 800de52:	f8c8 7000 	str.w	r7, [r8]
 800de56:	e00f      	b.n	800de78 <_malloc_r+0xa8>
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	1b52      	subs	r2, r2, r5
 800de5c:	d420      	bmi.n	800dea0 <_malloc_r+0xd0>
 800de5e:	2a0b      	cmp	r2, #11
 800de60:	d917      	bls.n	800de92 <_malloc_r+0xc2>
 800de62:	1961      	adds	r1, r4, r5
 800de64:	42a3      	cmp	r3, r4
 800de66:	6025      	str	r5, [r4, #0]
 800de68:	bf18      	it	ne
 800de6a:	6059      	strne	r1, [r3, #4]
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	bf08      	it	eq
 800de70:	f8c8 1000 	streq.w	r1, [r8]
 800de74:	5162      	str	r2, [r4, r5]
 800de76:	604b      	str	r3, [r1, #4]
 800de78:	4630      	mov	r0, r6
 800de7a:	f000 f9bb 	bl	800e1f4 <__malloc_unlock>
 800de7e:	f104 000b 	add.w	r0, r4, #11
 800de82:	1d23      	adds	r3, r4, #4
 800de84:	f020 0007 	bic.w	r0, r0, #7
 800de88:	1ac2      	subs	r2, r0, r3
 800de8a:	bf1c      	itt	ne
 800de8c:	1a1b      	subne	r3, r3, r0
 800de8e:	50a3      	strne	r3, [r4, r2]
 800de90:	e7af      	b.n	800ddf2 <_malloc_r+0x22>
 800de92:	6862      	ldr	r2, [r4, #4]
 800de94:	42a3      	cmp	r3, r4
 800de96:	bf0c      	ite	eq
 800de98:	f8c8 2000 	streq.w	r2, [r8]
 800de9c:	605a      	strne	r2, [r3, #4]
 800de9e:	e7eb      	b.n	800de78 <_malloc_r+0xa8>
 800dea0:	4623      	mov	r3, r4
 800dea2:	6864      	ldr	r4, [r4, #4]
 800dea4:	e7ae      	b.n	800de04 <_malloc_r+0x34>
 800dea6:	463c      	mov	r4, r7
 800dea8:	687f      	ldr	r7, [r7, #4]
 800deaa:	e7b6      	b.n	800de1a <_malloc_r+0x4a>
 800deac:	461a      	mov	r2, r3
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	42a3      	cmp	r3, r4
 800deb2:	d1fb      	bne.n	800deac <_malloc_r+0xdc>
 800deb4:	2300      	movs	r3, #0
 800deb6:	6053      	str	r3, [r2, #4]
 800deb8:	e7de      	b.n	800de78 <_malloc_r+0xa8>
 800deba:	230c      	movs	r3, #12
 800debc:	6033      	str	r3, [r6, #0]
 800debe:	4630      	mov	r0, r6
 800dec0:	f000 f998 	bl	800e1f4 <__malloc_unlock>
 800dec4:	e794      	b.n	800ddf0 <_malloc_r+0x20>
 800dec6:	6005      	str	r5, [r0, #0]
 800dec8:	e7d6      	b.n	800de78 <_malloc_r+0xa8>
 800deca:	bf00      	nop
 800decc:	2000591c 	.word	0x2000591c

0800ded0 <_printf_common>:
 800ded0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	4616      	mov	r6, r2
 800ded6:	4698      	mov	r8, r3
 800ded8:	688a      	ldr	r2, [r1, #8]
 800deda:	690b      	ldr	r3, [r1, #16]
 800dedc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dee0:	4293      	cmp	r3, r2
 800dee2:	bfb8      	it	lt
 800dee4:	4613      	movlt	r3, r2
 800dee6:	6033      	str	r3, [r6, #0]
 800dee8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800deec:	4607      	mov	r7, r0
 800deee:	460c      	mov	r4, r1
 800def0:	b10a      	cbz	r2, 800def6 <_printf_common+0x26>
 800def2:	3301      	adds	r3, #1
 800def4:	6033      	str	r3, [r6, #0]
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	0699      	lsls	r1, r3, #26
 800defa:	bf42      	ittt	mi
 800defc:	6833      	ldrmi	r3, [r6, #0]
 800defe:	3302      	addmi	r3, #2
 800df00:	6033      	strmi	r3, [r6, #0]
 800df02:	6825      	ldr	r5, [r4, #0]
 800df04:	f015 0506 	ands.w	r5, r5, #6
 800df08:	d106      	bne.n	800df18 <_printf_common+0x48>
 800df0a:	f104 0a19 	add.w	sl, r4, #25
 800df0e:	68e3      	ldr	r3, [r4, #12]
 800df10:	6832      	ldr	r2, [r6, #0]
 800df12:	1a9b      	subs	r3, r3, r2
 800df14:	42ab      	cmp	r3, r5
 800df16:	dc26      	bgt.n	800df66 <_printf_common+0x96>
 800df18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	3b00      	subs	r3, #0
 800df20:	bf18      	it	ne
 800df22:	2301      	movne	r3, #1
 800df24:	0692      	lsls	r2, r2, #26
 800df26:	d42b      	bmi.n	800df80 <_printf_common+0xb0>
 800df28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df2c:	4641      	mov	r1, r8
 800df2e:	4638      	mov	r0, r7
 800df30:	47c8      	blx	r9
 800df32:	3001      	adds	r0, #1
 800df34:	d01e      	beq.n	800df74 <_printf_common+0xa4>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	6922      	ldr	r2, [r4, #16]
 800df3a:	f003 0306 	and.w	r3, r3, #6
 800df3e:	2b04      	cmp	r3, #4
 800df40:	bf02      	ittt	eq
 800df42:	68e5      	ldreq	r5, [r4, #12]
 800df44:	6833      	ldreq	r3, [r6, #0]
 800df46:	1aed      	subeq	r5, r5, r3
 800df48:	68a3      	ldr	r3, [r4, #8]
 800df4a:	bf0c      	ite	eq
 800df4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df50:	2500      	movne	r5, #0
 800df52:	4293      	cmp	r3, r2
 800df54:	bfc4      	itt	gt
 800df56:	1a9b      	subgt	r3, r3, r2
 800df58:	18ed      	addgt	r5, r5, r3
 800df5a:	2600      	movs	r6, #0
 800df5c:	341a      	adds	r4, #26
 800df5e:	42b5      	cmp	r5, r6
 800df60:	d11a      	bne.n	800df98 <_printf_common+0xc8>
 800df62:	2000      	movs	r0, #0
 800df64:	e008      	b.n	800df78 <_printf_common+0xa8>
 800df66:	2301      	movs	r3, #1
 800df68:	4652      	mov	r2, sl
 800df6a:	4641      	mov	r1, r8
 800df6c:	4638      	mov	r0, r7
 800df6e:	47c8      	blx	r9
 800df70:	3001      	adds	r0, #1
 800df72:	d103      	bne.n	800df7c <_printf_common+0xac>
 800df74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7c:	3501      	adds	r5, #1
 800df7e:	e7c6      	b.n	800df0e <_printf_common+0x3e>
 800df80:	18e1      	adds	r1, r4, r3
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	2030      	movs	r0, #48	@ 0x30
 800df86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df8a:	4422      	add	r2, r4
 800df8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df94:	3302      	adds	r3, #2
 800df96:	e7c7      	b.n	800df28 <_printf_common+0x58>
 800df98:	2301      	movs	r3, #1
 800df9a:	4622      	mov	r2, r4
 800df9c:	4641      	mov	r1, r8
 800df9e:	4638      	mov	r0, r7
 800dfa0:	47c8      	blx	r9
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	d0e6      	beq.n	800df74 <_printf_common+0xa4>
 800dfa6:	3601      	adds	r6, #1
 800dfa8:	e7d9      	b.n	800df5e <_printf_common+0x8e>
	...

0800dfac <_printf_i>:
 800dfac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb0:	7e0f      	ldrb	r7, [r1, #24]
 800dfb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfb4:	2f78      	cmp	r7, #120	@ 0x78
 800dfb6:	4691      	mov	r9, r2
 800dfb8:	4680      	mov	r8, r0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	469a      	mov	sl, r3
 800dfbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfc2:	d807      	bhi.n	800dfd4 <_printf_i+0x28>
 800dfc4:	2f62      	cmp	r7, #98	@ 0x62
 800dfc6:	d80a      	bhi.n	800dfde <_printf_i+0x32>
 800dfc8:	2f00      	cmp	r7, #0
 800dfca:	f000 80d1 	beq.w	800e170 <_printf_i+0x1c4>
 800dfce:	2f58      	cmp	r7, #88	@ 0x58
 800dfd0:	f000 80b8 	beq.w	800e144 <_printf_i+0x198>
 800dfd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfdc:	e03a      	b.n	800e054 <_printf_i+0xa8>
 800dfde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dfe2:	2b15      	cmp	r3, #21
 800dfe4:	d8f6      	bhi.n	800dfd4 <_printf_i+0x28>
 800dfe6:	a101      	add	r1, pc, #4	@ (adr r1, 800dfec <_printf_i+0x40>)
 800dfe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfec:	0800e045 	.word	0x0800e045
 800dff0:	0800e059 	.word	0x0800e059
 800dff4:	0800dfd5 	.word	0x0800dfd5
 800dff8:	0800dfd5 	.word	0x0800dfd5
 800dffc:	0800dfd5 	.word	0x0800dfd5
 800e000:	0800dfd5 	.word	0x0800dfd5
 800e004:	0800e059 	.word	0x0800e059
 800e008:	0800dfd5 	.word	0x0800dfd5
 800e00c:	0800dfd5 	.word	0x0800dfd5
 800e010:	0800dfd5 	.word	0x0800dfd5
 800e014:	0800dfd5 	.word	0x0800dfd5
 800e018:	0800e157 	.word	0x0800e157
 800e01c:	0800e083 	.word	0x0800e083
 800e020:	0800e111 	.word	0x0800e111
 800e024:	0800dfd5 	.word	0x0800dfd5
 800e028:	0800dfd5 	.word	0x0800dfd5
 800e02c:	0800e179 	.word	0x0800e179
 800e030:	0800dfd5 	.word	0x0800dfd5
 800e034:	0800e083 	.word	0x0800e083
 800e038:	0800dfd5 	.word	0x0800dfd5
 800e03c:	0800dfd5 	.word	0x0800dfd5
 800e040:	0800e119 	.word	0x0800e119
 800e044:	6833      	ldr	r3, [r6, #0]
 800e046:	1d1a      	adds	r2, r3, #4
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6032      	str	r2, [r6, #0]
 800e04c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e054:	2301      	movs	r3, #1
 800e056:	e09c      	b.n	800e192 <_printf_i+0x1e6>
 800e058:	6833      	ldr	r3, [r6, #0]
 800e05a:	6820      	ldr	r0, [r4, #0]
 800e05c:	1d19      	adds	r1, r3, #4
 800e05e:	6031      	str	r1, [r6, #0]
 800e060:	0606      	lsls	r6, r0, #24
 800e062:	d501      	bpl.n	800e068 <_printf_i+0xbc>
 800e064:	681d      	ldr	r5, [r3, #0]
 800e066:	e003      	b.n	800e070 <_printf_i+0xc4>
 800e068:	0645      	lsls	r5, r0, #25
 800e06a:	d5fb      	bpl.n	800e064 <_printf_i+0xb8>
 800e06c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e070:	2d00      	cmp	r5, #0
 800e072:	da03      	bge.n	800e07c <_printf_i+0xd0>
 800e074:	232d      	movs	r3, #45	@ 0x2d
 800e076:	426d      	negs	r5, r5
 800e078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e07c:	4858      	ldr	r0, [pc, #352]	@ (800e1e0 <_printf_i+0x234>)
 800e07e:	230a      	movs	r3, #10
 800e080:	e011      	b.n	800e0a6 <_printf_i+0xfa>
 800e082:	6821      	ldr	r1, [r4, #0]
 800e084:	6833      	ldr	r3, [r6, #0]
 800e086:	0608      	lsls	r0, r1, #24
 800e088:	f853 5b04 	ldr.w	r5, [r3], #4
 800e08c:	d402      	bmi.n	800e094 <_printf_i+0xe8>
 800e08e:	0649      	lsls	r1, r1, #25
 800e090:	bf48      	it	mi
 800e092:	b2ad      	uxthmi	r5, r5
 800e094:	2f6f      	cmp	r7, #111	@ 0x6f
 800e096:	4852      	ldr	r0, [pc, #328]	@ (800e1e0 <_printf_i+0x234>)
 800e098:	6033      	str	r3, [r6, #0]
 800e09a:	bf14      	ite	ne
 800e09c:	230a      	movne	r3, #10
 800e09e:	2308      	moveq	r3, #8
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0a6:	6866      	ldr	r6, [r4, #4]
 800e0a8:	60a6      	str	r6, [r4, #8]
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	db05      	blt.n	800e0ba <_printf_i+0x10e>
 800e0ae:	6821      	ldr	r1, [r4, #0]
 800e0b0:	432e      	orrs	r6, r5
 800e0b2:	f021 0104 	bic.w	r1, r1, #4
 800e0b6:	6021      	str	r1, [r4, #0]
 800e0b8:	d04b      	beq.n	800e152 <_printf_i+0x1a6>
 800e0ba:	4616      	mov	r6, r2
 800e0bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0c0:	fb03 5711 	mls	r7, r3, r1, r5
 800e0c4:	5dc7      	ldrb	r7, [r0, r7]
 800e0c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0ca:	462f      	mov	r7, r5
 800e0cc:	42bb      	cmp	r3, r7
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	d9f4      	bls.n	800e0bc <_printf_i+0x110>
 800e0d2:	2b08      	cmp	r3, #8
 800e0d4:	d10b      	bne.n	800e0ee <_printf_i+0x142>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	07df      	lsls	r7, r3, #31
 800e0da:	d508      	bpl.n	800e0ee <_printf_i+0x142>
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	6861      	ldr	r1, [r4, #4]
 800e0e0:	4299      	cmp	r1, r3
 800e0e2:	bfde      	ittt	le
 800e0e4:	2330      	movle	r3, #48	@ 0x30
 800e0e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e0ee:	1b92      	subs	r2, r2, r6
 800e0f0:	6122      	str	r2, [r4, #16]
 800e0f2:	f8cd a000 	str.w	sl, [sp]
 800e0f6:	464b      	mov	r3, r9
 800e0f8:	aa03      	add	r2, sp, #12
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	f7ff fee7 	bl	800ded0 <_printf_common>
 800e102:	3001      	adds	r0, #1
 800e104:	d14a      	bne.n	800e19c <_printf_i+0x1f0>
 800e106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e10a:	b004      	add	sp, #16
 800e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	f043 0320 	orr.w	r3, r3, #32
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	4832      	ldr	r0, [pc, #200]	@ (800e1e4 <_printf_i+0x238>)
 800e11a:	2778      	movs	r7, #120	@ 0x78
 800e11c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	6831      	ldr	r1, [r6, #0]
 800e124:	061f      	lsls	r7, r3, #24
 800e126:	f851 5b04 	ldr.w	r5, [r1], #4
 800e12a:	d402      	bmi.n	800e132 <_printf_i+0x186>
 800e12c:	065f      	lsls	r7, r3, #25
 800e12e:	bf48      	it	mi
 800e130:	b2ad      	uxthmi	r5, r5
 800e132:	6031      	str	r1, [r6, #0]
 800e134:	07d9      	lsls	r1, r3, #31
 800e136:	bf44      	itt	mi
 800e138:	f043 0320 	orrmi.w	r3, r3, #32
 800e13c:	6023      	strmi	r3, [r4, #0]
 800e13e:	b11d      	cbz	r5, 800e148 <_printf_i+0x19c>
 800e140:	2310      	movs	r3, #16
 800e142:	e7ad      	b.n	800e0a0 <_printf_i+0xf4>
 800e144:	4826      	ldr	r0, [pc, #152]	@ (800e1e0 <_printf_i+0x234>)
 800e146:	e7e9      	b.n	800e11c <_printf_i+0x170>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	f023 0320 	bic.w	r3, r3, #32
 800e14e:	6023      	str	r3, [r4, #0]
 800e150:	e7f6      	b.n	800e140 <_printf_i+0x194>
 800e152:	4616      	mov	r6, r2
 800e154:	e7bd      	b.n	800e0d2 <_printf_i+0x126>
 800e156:	6833      	ldr	r3, [r6, #0]
 800e158:	6825      	ldr	r5, [r4, #0]
 800e15a:	6961      	ldr	r1, [r4, #20]
 800e15c:	1d18      	adds	r0, r3, #4
 800e15e:	6030      	str	r0, [r6, #0]
 800e160:	062e      	lsls	r6, r5, #24
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	d501      	bpl.n	800e16a <_printf_i+0x1be>
 800e166:	6019      	str	r1, [r3, #0]
 800e168:	e002      	b.n	800e170 <_printf_i+0x1c4>
 800e16a:	0668      	lsls	r0, r5, #25
 800e16c:	d5fb      	bpl.n	800e166 <_printf_i+0x1ba>
 800e16e:	8019      	strh	r1, [r3, #0]
 800e170:	2300      	movs	r3, #0
 800e172:	6123      	str	r3, [r4, #16]
 800e174:	4616      	mov	r6, r2
 800e176:	e7bc      	b.n	800e0f2 <_printf_i+0x146>
 800e178:	6833      	ldr	r3, [r6, #0]
 800e17a:	1d1a      	adds	r2, r3, #4
 800e17c:	6032      	str	r2, [r6, #0]
 800e17e:	681e      	ldr	r6, [r3, #0]
 800e180:	6862      	ldr	r2, [r4, #4]
 800e182:	2100      	movs	r1, #0
 800e184:	4630      	mov	r0, r6
 800e186:	f7f2 f82b 	bl	80001e0 <memchr>
 800e18a:	b108      	cbz	r0, 800e190 <_printf_i+0x1e4>
 800e18c:	1b80      	subs	r0, r0, r6
 800e18e:	6060      	str	r0, [r4, #4]
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	2300      	movs	r3, #0
 800e196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e19a:	e7aa      	b.n	800e0f2 <_printf_i+0x146>
 800e19c:	6923      	ldr	r3, [r4, #16]
 800e19e:	4632      	mov	r2, r6
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	4640      	mov	r0, r8
 800e1a4:	47d0      	blx	sl
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	d0ad      	beq.n	800e106 <_printf_i+0x15a>
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	079b      	lsls	r3, r3, #30
 800e1ae:	d413      	bmi.n	800e1d8 <_printf_i+0x22c>
 800e1b0:	68e0      	ldr	r0, [r4, #12]
 800e1b2:	9b03      	ldr	r3, [sp, #12]
 800e1b4:	4298      	cmp	r0, r3
 800e1b6:	bfb8      	it	lt
 800e1b8:	4618      	movlt	r0, r3
 800e1ba:	e7a6      	b.n	800e10a <_printf_i+0x15e>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	47d0      	blx	sl
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d09d      	beq.n	800e106 <_printf_i+0x15a>
 800e1ca:	3501      	adds	r5, #1
 800e1cc:	68e3      	ldr	r3, [r4, #12]
 800e1ce:	9903      	ldr	r1, [sp, #12]
 800e1d0:	1a5b      	subs	r3, r3, r1
 800e1d2:	42ab      	cmp	r3, r5
 800e1d4:	dcf2      	bgt.n	800e1bc <_printf_i+0x210>
 800e1d6:	e7eb      	b.n	800e1b0 <_printf_i+0x204>
 800e1d8:	2500      	movs	r5, #0
 800e1da:	f104 0619 	add.w	r6, r4, #25
 800e1de:	e7f5      	b.n	800e1cc <_printf_i+0x220>
 800e1e0:	0800e619 	.word	0x0800e619
 800e1e4:	0800e62a 	.word	0x0800e62a

0800e1e8 <__malloc_lock>:
 800e1e8:	4801      	ldr	r0, [pc, #4]	@ (800e1f0 <__malloc_lock+0x8>)
 800e1ea:	f7ff bbbf 	b.w	800d96c <__retarget_lock_acquire_recursive>
 800e1ee:	bf00      	nop
 800e1f0:	20005910 	.word	0x20005910

0800e1f4 <__malloc_unlock>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	@ (800e1fc <__malloc_unlock+0x8>)
 800e1f6:	f7ff bbba 	b.w	800d96e <__retarget_lock_release_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	20005910 	.word	0x20005910

0800e200 <_realloc_r>:
 800e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e204:	4607      	mov	r7, r0
 800e206:	4614      	mov	r4, r2
 800e208:	460d      	mov	r5, r1
 800e20a:	b921      	cbnz	r1, 800e216 <_realloc_r+0x16>
 800e20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e210:	4611      	mov	r1, r2
 800e212:	f7ff bddd 	b.w	800ddd0 <_malloc_r>
 800e216:	b92a      	cbnz	r2, 800e224 <_realloc_r+0x24>
 800e218:	f7ff fc16 	bl	800da48 <_free_r>
 800e21c:	4625      	mov	r5, r4
 800e21e:	4628      	mov	r0, r5
 800e220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e224:	f000 f844 	bl	800e2b0 <_malloc_usable_size_r>
 800e228:	4284      	cmp	r4, r0
 800e22a:	4606      	mov	r6, r0
 800e22c:	d802      	bhi.n	800e234 <_realloc_r+0x34>
 800e22e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e232:	d8f4      	bhi.n	800e21e <_realloc_r+0x1e>
 800e234:	4621      	mov	r1, r4
 800e236:	4638      	mov	r0, r7
 800e238:	f7ff fdca 	bl	800ddd0 <_malloc_r>
 800e23c:	4680      	mov	r8, r0
 800e23e:	b908      	cbnz	r0, 800e244 <_realloc_r+0x44>
 800e240:	4645      	mov	r5, r8
 800e242:	e7ec      	b.n	800e21e <_realloc_r+0x1e>
 800e244:	42b4      	cmp	r4, r6
 800e246:	4622      	mov	r2, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	bf28      	it	cs
 800e24c:	4632      	movcs	r2, r6
 800e24e:	f7ff fbed 	bl	800da2c <memcpy>
 800e252:	4629      	mov	r1, r5
 800e254:	4638      	mov	r0, r7
 800e256:	f7ff fbf7 	bl	800da48 <_free_r>
 800e25a:	e7f1      	b.n	800e240 <_realloc_r+0x40>

0800e25c <memmove>:
 800e25c:	4288      	cmp	r0, r1
 800e25e:	b510      	push	{r4, lr}
 800e260:	eb01 0402 	add.w	r4, r1, r2
 800e264:	d902      	bls.n	800e26c <memmove+0x10>
 800e266:	4284      	cmp	r4, r0
 800e268:	4623      	mov	r3, r4
 800e26a:	d807      	bhi.n	800e27c <memmove+0x20>
 800e26c:	1e43      	subs	r3, r0, #1
 800e26e:	42a1      	cmp	r1, r4
 800e270:	d008      	beq.n	800e284 <memmove+0x28>
 800e272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e27a:	e7f8      	b.n	800e26e <memmove+0x12>
 800e27c:	4402      	add	r2, r0
 800e27e:	4601      	mov	r1, r0
 800e280:	428a      	cmp	r2, r1
 800e282:	d100      	bne.n	800e286 <memmove+0x2a>
 800e284:	bd10      	pop	{r4, pc}
 800e286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e28e:	e7f7      	b.n	800e280 <memmove+0x24>

0800e290 <_sbrk_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d06      	ldr	r5, [pc, #24]	@ (800e2ac <_sbrk_r+0x1c>)
 800e294:	2300      	movs	r3, #0
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	602b      	str	r3, [r5, #0]
 800e29c:	f7f6 fd82 	bl	8004da4 <_sbrk>
 800e2a0:	1c43      	adds	r3, r0, #1
 800e2a2:	d102      	bne.n	800e2aa <_sbrk_r+0x1a>
 800e2a4:	682b      	ldr	r3, [r5, #0]
 800e2a6:	b103      	cbz	r3, 800e2aa <_sbrk_r+0x1a>
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	20005914 	.word	0x20005914

0800e2b0 <_malloc_usable_size_r>:
 800e2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2b4:	1f18      	subs	r0, r3, #4
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	bfbc      	itt	lt
 800e2ba:	580b      	ldrlt	r3, [r1, r0]
 800e2bc:	18c0      	addlt	r0, r0, r3
 800e2be:	4770      	bx	lr

0800e2c0 <sqrtf>:
 800e2c0:	b508      	push	{r3, lr}
 800e2c2:	ed2d 8b02 	vpush	{d8}
 800e2c6:	eeb0 8a40 	vmov.f32	s16, s0
 800e2ca:	f000 f8f2 	bl	800e4b2 <__ieee754_sqrtf>
 800e2ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d6:	d60c      	bvs.n	800e2f2 <sqrtf+0x32>
 800e2d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e2f8 <sqrtf+0x38>
 800e2dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e4:	d505      	bpl.n	800e2f2 <sqrtf+0x32>
 800e2e6:	f7ff fb17 	bl	800d918 <__errno>
 800e2ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e2ee:	2321      	movs	r3, #33	@ 0x21
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	ecbd 8b02 	vpop	{d8}
 800e2f6:	bd08      	pop	{r3, pc}
 800e2f8:	00000000 	.word	0x00000000

0800e2fc <atanf>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	ee10 5a10 	vmov	r5, s0
 800e302:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e306:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e30a:	eef0 7a40 	vmov.f32	s15, s0
 800e30e:	d310      	bcc.n	800e332 <atanf+0x36>
 800e310:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e314:	d904      	bls.n	800e320 <atanf+0x24>
 800e316:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e31a:	eeb0 0a67 	vmov.f32	s0, s15
 800e31e:	bd38      	pop	{r3, r4, r5, pc}
 800e320:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e458 <atanf+0x15c>
 800e324:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e45c <atanf+0x160>
 800e328:	2d00      	cmp	r5, #0
 800e32a:	bfc8      	it	gt
 800e32c:	eef0 7a47 	vmovgt.f32	s15, s14
 800e330:	e7f3      	b.n	800e31a <atanf+0x1e>
 800e332:	4b4b      	ldr	r3, [pc, #300]	@ (800e460 <atanf+0x164>)
 800e334:	429c      	cmp	r4, r3
 800e336:	d810      	bhi.n	800e35a <atanf+0x5e>
 800e338:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e33c:	d20a      	bcs.n	800e354 <atanf+0x58>
 800e33e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e464 <atanf+0x168>
 800e342:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e34a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e352:	dce2      	bgt.n	800e31a <atanf+0x1e>
 800e354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e358:	e013      	b.n	800e382 <atanf+0x86>
 800e35a:	f000 f8a3 	bl	800e4a4 <fabsf>
 800e35e:	4b42      	ldr	r3, [pc, #264]	@ (800e468 <atanf+0x16c>)
 800e360:	429c      	cmp	r4, r3
 800e362:	d84f      	bhi.n	800e404 <atanf+0x108>
 800e364:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e368:	429c      	cmp	r4, r3
 800e36a:	d841      	bhi.n	800e3f0 <atanf+0xf4>
 800e36c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e370:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e374:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e378:	2300      	movs	r3, #0
 800e37a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e37e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e388:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e46c <atanf+0x170>
 800e38c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e470 <atanf+0x174>
 800e390:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e474 <atanf+0x178>
 800e394:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e398:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e39c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e478 <atanf+0x17c>
 800e3a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e3a4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e47c <atanf+0x180>
 800e3a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e3ac:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e480 <atanf+0x184>
 800e3b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e3b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e484 <atanf+0x188>
 800e3b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e3bc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e488 <atanf+0x18c>
 800e3c0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e3c4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e48c <atanf+0x190>
 800e3c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e3cc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e490 <atanf+0x194>
 800e3d0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e3d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e494 <atanf+0x198>
 800e3d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e3dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e3e0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e3e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3e8:	d121      	bne.n	800e42e <atanf+0x132>
 800e3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3ee:	e794      	b.n	800e31a <atanf+0x1e>
 800e3f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e3f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e3f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e402:	e7be      	b.n	800e382 <atanf+0x86>
 800e404:	4b24      	ldr	r3, [pc, #144]	@ (800e498 <atanf+0x19c>)
 800e406:	429c      	cmp	r4, r3
 800e408:	d80b      	bhi.n	800e422 <atanf+0x126>
 800e40a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e40e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e412:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e416:	2302      	movs	r3, #2
 800e418:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e41c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e420:	e7af      	b.n	800e382 <atanf+0x86>
 800e422:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e426:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e42a:	2303      	movs	r3, #3
 800e42c:	e7a9      	b.n	800e382 <atanf+0x86>
 800e42e:	4a1b      	ldr	r2, [pc, #108]	@ (800e49c <atanf+0x1a0>)
 800e430:	491b      	ldr	r1, [pc, #108]	@ (800e4a0 <atanf+0x1a4>)
 800e432:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e436:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e43a:	edd3 6a00 	vldr	s13, [r3]
 800e43e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e442:	2d00      	cmp	r5, #0
 800e444:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e448:	edd2 7a00 	vldr	s15, [r2]
 800e44c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e450:	bfb8      	it	lt
 800e452:	eef1 7a67 	vneglt.f32	s15, s15
 800e456:	e760      	b.n	800e31a <atanf+0x1e>
 800e458:	bfc90fdb 	.word	0xbfc90fdb
 800e45c:	3fc90fdb 	.word	0x3fc90fdb
 800e460:	3edfffff 	.word	0x3edfffff
 800e464:	7149f2ca 	.word	0x7149f2ca
 800e468:	3f97ffff 	.word	0x3f97ffff
 800e46c:	3c8569d7 	.word	0x3c8569d7
 800e470:	3d4bda59 	.word	0x3d4bda59
 800e474:	bd6ef16b 	.word	0xbd6ef16b
 800e478:	3d886b35 	.word	0x3d886b35
 800e47c:	3dba2e6e 	.word	0x3dba2e6e
 800e480:	3e124925 	.word	0x3e124925
 800e484:	3eaaaaab 	.word	0x3eaaaaab
 800e488:	bd15a221 	.word	0xbd15a221
 800e48c:	bd9d8795 	.word	0xbd9d8795
 800e490:	bde38e38 	.word	0xbde38e38
 800e494:	be4ccccd 	.word	0xbe4ccccd
 800e498:	401bffff 	.word	0x401bffff
 800e49c:	0800e64c 	.word	0x0800e64c
 800e4a0:	0800e63c 	.word	0x0800e63c

0800e4a4 <fabsf>:
 800e4a4:	ee10 3a10 	vmov	r3, s0
 800e4a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4ac:	ee00 3a10 	vmov	s0, r3
 800e4b0:	4770      	bx	lr

0800e4b2 <__ieee754_sqrtf>:
 800e4b2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e4b6:	4770      	bx	lr

0800e4b8 <_init>:
 800e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ba:	bf00      	nop
 800e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4be:	bc08      	pop	{r3}
 800e4c0:	469e      	mov	lr, r3
 800e4c2:	4770      	bx	lr

0800e4c4 <_fini>:
 800e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c6:	bf00      	nop
 800e4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ca:	bc08      	pop	{r3}
 800e4cc:	469e      	mov	lr, r3
 800e4ce:	4770      	bx	lr
