
SentrySwerve2025FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800fcec  0800fcec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010424  08010424  000120ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010424  08010424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801042c  0801042c  000120ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801042c  0801042c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010430  08010430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08010434  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120ac  2**0
                  CONTENTS
 10 .bss          000058f8  200000b0  200000b0  000120b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200059a8  200059a8  000120b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e21  00000000  00000000  000120dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000521b  00000000  00000000  00037efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002178  00000000  00000000  0003d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a12  00000000  00000000  0003f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fc4  00000000  00000000  00040ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c18  00000000  00000000  00066c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e215c  00000000  00000000  0008c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e9da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009574  00000000  00000000  0016ea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00177f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fcd4 	.word	0x0800fcd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800fcd4 	.word	0x0800fcd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f000 b988 	b.w	8000e34 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	468e      	mov	lr, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	4688      	mov	r8, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d962      	bls.n	8000c18 <__udivmoddi4+0xdc>
 8000b52:	fab2 f682 	clz	r6, r2
 8000b56:	b14e      	cbz	r6, 8000b6c <__udivmoddi4+0x30>
 8000b58:	f1c6 0320 	rsb	r3, r6, #32
 8000b5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b60:	fa20 f303 	lsr.w	r3, r0, r3
 8000b64:	40b7      	lsls	r7, r6
 8000b66:	ea43 0808 	orr.w	r8, r3, r8
 8000b6a:	40b4      	lsls	r4, r6
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b82:	fb01 f20c 	mul.w	r2, r1, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b90:	f080 80ea 	bcs.w	8000d68 <__udivmoddi4+0x22c>
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f240 80e7 	bls.w	8000d68 <__udivmoddi4+0x22c>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	1a9a      	subs	r2, r3, r2
 8000ba0:	b2a3      	uxth	r3, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb2:	459c      	cmp	ip, r3
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x8e>
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bbc:	f080 80d6 	bcs.w	8000d6c <__udivmoddi4+0x230>
 8000bc0:	459c      	cmp	ip, r3
 8000bc2:	f240 80d3 	bls.w	8000d6c <__udivmoddi4+0x230>
 8000bc6:	443b      	add	r3, r7
 8000bc8:	3802      	subs	r0, #2
 8000bca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bce:	eba3 030c 	sub.w	r3, r3, ip
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11d      	cbz	r5, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40f3      	lsrs	r3, r6
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e9c5 3200 	strd	r3, r2, [r5]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d905      	bls.n	8000bf2 <__udivmoddi4+0xb6>
 8000be6:	b10d      	cbz	r5, 8000bec <__udivmoddi4+0xb0>
 8000be8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e7f5      	b.n	8000bde <__udivmoddi4+0xa2>
 8000bf2:	fab3 f183 	clz	r1, r3
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d146      	bne.n	8000c88 <__udivmoddi4+0x14c>
 8000bfa:	4573      	cmp	r3, lr
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xc8>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 8105 	bhi.w	8000e0e <__udivmoddi4+0x2d2>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d0e5      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c12:	e9c5 4800 	strd	r4, r8, [r5]
 8000c16:	e7e2      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f000 8090 	beq.w	8000d3e <__udivmoddi4+0x202>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f040 80a4 	bne.w	8000d70 <__udivmoddi4+0x234>
 8000c28:	1a8a      	subs	r2, r1, r2
 8000c2a:	0c03      	lsrs	r3, r0, #16
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	b2bc      	uxth	r4, r7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c42:	fb04 f20c 	mul.w	r2, r4, ip
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x11e>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x11c>
 8000c52:	429a      	cmp	r2, r3
 8000c54:	f200 80e0 	bhi.w	8000e18 <__udivmoddi4+0x2dc>
 8000c58:	46c4      	mov	ip, r8
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c68:	fb02 f404 	mul.w	r4, r2, r4
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x144>
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x142>
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	f200 80ca 	bhi.w	8000e12 <__udivmoddi4+0x2d6>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	1b1b      	subs	r3, r3, r4
 8000c82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c88:	f1c1 0620 	rsb	r6, r1, #32
 8000c8c:	408b      	lsls	r3, r1
 8000c8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c92:	431f      	orrs	r7, r3
 8000c94:	fa0e f401 	lsl.w	r4, lr, r1
 8000c98:	fa20 f306 	lsr.w	r3, r0, r6
 8000c9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ca0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ca4:	4323      	orrs	r3, r4
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	fa1f fc87 	uxth.w	ip, r7
 8000cae:	fbbe f0f9 	udiv	r0, lr, r9
 8000cb2:	0c1c      	lsrs	r4, r3, #16
 8000cb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x1a0>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cce:	f080 809c 	bcs.w	8000e0a <__udivmoddi4+0x2ce>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f240 8099 	bls.w	8000e0a <__udivmoddi4+0x2ce>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	fa1f fe83 	uxth.w	lr, r3
 8000ce4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf4:	45a4      	cmp	ip, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1ce>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cfe:	f080 8082 	bcs.w	8000e06 <__udivmoddi4+0x2ca>
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d97f      	bls.n	8000e06 <__udivmoddi4+0x2ca>
 8000d06:	3b02      	subs	r3, #2
 8000d08:	443c      	add	r4, r7
 8000d0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d16:	4564      	cmp	r4, ip
 8000d18:	4673      	mov	r3, lr
 8000d1a:	46e1      	mov	r9, ip
 8000d1c:	d362      	bcc.n	8000de4 <__udivmoddi4+0x2a8>
 8000d1e:	d05f      	beq.n	8000de0 <__udivmoddi4+0x2a4>
 8000d20:	b15d      	cbz	r5, 8000d3a <__udivmoddi4+0x1fe>
 8000d22:	ebb8 0203 	subs.w	r2, r8, r3
 8000d26:	eb64 0409 	sbc.w	r4, r4, r9
 8000d2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d32:	431e      	orrs	r6, r3
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e74f      	b.n	8000bde <__udivmoddi4+0xa2>
 8000d3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d42:	0c01      	lsrs	r1, r0, #16
 8000d44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d48:	b280      	uxth	r0, r0
 8000d4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4638      	mov	r0, r7
 8000d52:	463c      	mov	r4, r7
 8000d54:	46b8      	mov	r8, r7
 8000d56:	46be      	mov	lr, r7
 8000d58:	2620      	movs	r6, #32
 8000d5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d5e:	eba2 0208 	sub.w	r2, r2, r8
 8000d62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d66:	e766      	b.n	8000c36 <__udivmoddi4+0xfa>
 8000d68:	4601      	mov	r1, r0
 8000d6a:	e718      	b.n	8000b9e <__udivmoddi4+0x62>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	e72c      	b.n	8000bca <__udivmoddi4+0x8e>
 8000d70:	f1c6 0220 	rsb	r2, r6, #32
 8000d74:	fa2e f302 	lsr.w	r3, lr, r2
 8000d78:	40b7      	lsls	r7, r6
 8000d7a:	40b1      	lsls	r1, r6
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d84:	430a      	orrs	r2, r1
 8000d86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d8a:	b2bc      	uxth	r4, r7
 8000d8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb08 f904 	mul.w	r9, r8, r4
 8000d9a:	40b0      	lsls	r0, r6
 8000d9c:	4589      	cmp	r9, r1
 8000d9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000da2:	b280      	uxth	r0, r0
 8000da4:	d93e      	bls.n	8000e24 <__udivmoddi4+0x2e8>
 8000da6:	1879      	adds	r1, r7, r1
 8000da8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000dac:	d201      	bcs.n	8000db2 <__udivmoddi4+0x276>
 8000dae:	4589      	cmp	r9, r1
 8000db0:	d81f      	bhi.n	8000df2 <__udivmoddi4+0x2b6>
 8000db2:	eba1 0109 	sub.w	r1, r1, r9
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fb09 f804 	mul.w	r8, r9, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc8:	4542      	cmp	r2, r8
 8000dca:	d229      	bcs.n	8000e20 <__udivmoddi4+0x2e4>
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dd2:	d2c4      	bcs.n	8000d5e <__udivmoddi4+0x222>
 8000dd4:	4542      	cmp	r2, r8
 8000dd6:	d2c2      	bcs.n	8000d5e <__udivmoddi4+0x222>
 8000dd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ddc:	443a      	add	r2, r7
 8000dde:	e7be      	b.n	8000d5e <__udivmoddi4+0x222>
 8000de0:	45f0      	cmp	r8, lr
 8000de2:	d29d      	bcs.n	8000d20 <__udivmoddi4+0x1e4>
 8000de4:	ebbe 0302 	subs.w	r3, lr, r2
 8000de8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dec:	3801      	subs	r0, #1
 8000dee:	46e1      	mov	r9, ip
 8000df0:	e796      	b.n	8000d20 <__udivmoddi4+0x1e4>
 8000df2:	eba7 0909 	sub.w	r9, r7, r9
 8000df6:	4449      	add	r1, r9
 8000df8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e00:	fb09 f804 	mul.w	r8, r9, r4
 8000e04:	e7db      	b.n	8000dbe <__udivmoddi4+0x282>
 8000e06:	4673      	mov	r3, lr
 8000e08:	e77f      	b.n	8000d0a <__udivmoddi4+0x1ce>
 8000e0a:	4650      	mov	r0, sl
 8000e0c:	e766      	b.n	8000cdc <__udivmoddi4+0x1a0>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e6fd      	b.n	8000c0e <__udivmoddi4+0xd2>
 8000e12:	443b      	add	r3, r7
 8000e14:	3a02      	subs	r2, #2
 8000e16:	e733      	b.n	8000c80 <__udivmoddi4+0x144>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	443b      	add	r3, r7
 8000e1e:	e71c      	b.n	8000c5a <__udivmoddi4+0x11e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	e79c      	b.n	8000d5e <__udivmoddi4+0x222>
 8000e24:	eba1 0109 	sub.w	r1, r1, r9
 8000e28:	46c4      	mov	ip, r8
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fb09 f804 	mul.w	r8, r9, r4
 8000e32:	e7c4      	b.n	8000dbe <__udivmoddi4+0x282>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000e42:	e003      	b.n	8000e4c <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000e44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e48:	f000 f80a 	bl	8000e60 <BMI088_delay_us>
    while(ms--)
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	80fa      	strh	r2, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f6      	bne.n	8000e44 <BMI088_delay_ms+0xc>
    }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <BMI088_delay_us+0x84>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	22a8      	movs	r2, #168	@ 0xa8
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <BMI088_delay_us+0x84>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <BMI088_delay_us+0x84>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d0f8      	beq.n	8000e94 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d206      	bcs.n	8000eb8 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	e007      	b.n	8000ec8 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d200      	bcs.n	8000ed6 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000ed4:	e7de      	b.n	8000e94 <BMI088_delay_us+0x34>
            {
                break;
 8000ed6:	bf00      	nop
            }
        }
    }


}
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	@ 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <BMI088_ACCEL_NS_L+0x18>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <BMI088_ACCEL_NS_L+0x1c>)
 8000ef2:	8811      	ldrh	r1, [r2, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 fa7e 	bl	80083f8 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <BMI088_ACCEL_NS_H+0x18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <BMI088_ACCEL_NS_H+0x1c>)
 8000f12:	8811      	ldrh	r1, [r2, #0]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f007 fa6e 	bl	80083f8 <HAL_GPIO_WritePin>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <BMI088_GYRO_NS_L+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <BMI088_GYRO_NS_L+0x1c>)
 8000f32:	8811      	ldrh	r1, [r2, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f007 fa5e 	bl	80083f8 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <BMI088_GYRO_NS_H+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BMI088_GYRO_NS_H+0x1c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 fa4e 	bl	80083f8 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000008 	.word	0x20000008
 8000f64:	2000000c 	.word	0x2000000c

08000f68 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000f72:	f107 020f 	add.w	r2, r7, #15
 8000f76:	1df9      	adds	r1, r7, #7
 8000f78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <BMI088_read_write_byte+0x28>)
 8000f82:	f008 f8b7 	bl	80090f4 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000aa4 	.word	0x20000aa4

08000f94 <BMI088_gyro_init>:
    }
    return BMI088_NO_ERROR;
}

uint8_t BMI088_gyro_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000fa2:	f7ff ffc1 	bl	8000f28 <BMI088_GYRO_NS_L>
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f99c 	bl	80012e8 <BMI088_read_single_reg>
 8000fb0:	f7ff ffca 	bl	8000f48 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000fb4:	2096      	movs	r0, #150	@ 0x96
 8000fb6:	f7ff ff53 	bl	8000e60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000fba:	f7ff ffb5 	bl	8000f28 <BMI088_GYRO_NS_L>
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f990 	bl	80012e8 <BMI088_read_single_reg>
 8000fc8:	f7ff ffbe 	bl	8000f48 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000fcc:	2096      	movs	r0, #150	@ 0x96
 8000fce:	f7ff ff47 	bl	8000e60 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8000fd2:	f7ff ffa9 	bl	8000f28 <BMI088_GYRO_NS_L>
 8000fd6:	21b6      	movs	r1, #182	@ 0xb6
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f000 f971 	bl	80012c0 <BMI088_write_single_reg>
 8000fde:	f7ff ffb3 	bl	8000f48 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8000fe2:	2050      	movs	r0, #80	@ 0x50
 8000fe4:	f7ff ff28 	bl	8000e38 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000fe8:	f7ff ff9e 	bl	8000f28 <BMI088_GYRO_NS_L>
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	4619      	mov	r1, r3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 f979 	bl	80012e8 <BMI088_read_single_reg>
 8000ff6:	f7ff ffa7 	bl	8000f48 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000ffa:	2096      	movs	r0, #150	@ 0x96
 8000ffc:	f7ff ff30 	bl	8000e60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001000:	f7ff ff92 	bl	8000f28 <BMI088_GYRO_NS_L>
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	4619      	mov	r1, r3
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f96d 	bl	80012e8 <BMI088_read_single_reg>
 800100e:	f7ff ff9b 	bl	8000f48 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001012:	2096      	movs	r0, #150	@ 0x96
 8001014:	f7ff ff24 	bl	8000e60 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	d001      	beq.n	8001022 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800101e:	23ff      	movs	r3, #255	@ 0xff
 8001020:	e049      	b.n	80010b6 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e042      	b.n	80010ae <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001028:	f7ff ff7e 	bl	8000f28 <BMI088_GYRO_NS_L>
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	4924      	ldr	r1, [pc, #144]	@ (80010c0 <BMI088_gyro_init+0x12c>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	440b      	add	r3, r1
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	4920      	ldr	r1, [pc, #128]	@ (80010c0 <BMI088_gyro_init+0x12c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	440b      	add	r3, r1
 8001046:	3301      	adds	r3, #1
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	f000 f938 	bl	80012c0 <BMI088_write_single_reg>
 8001050:	f7ff ff7a 	bl	8000f48 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001054:	2096      	movs	r0, #150	@ 0x96
 8001056:	f7ff ff03 	bl	8000e60 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 800105a:	f7ff ff65 	bl	8000f28 <BMI088_GYRO_NS_L>
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	4917      	ldr	r1, [pc, #92]	@ (80010c0 <BMI088_gyro_init+0x12c>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	440b      	add	r3, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	1dba      	adds	r2, r7, #6
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f939 	bl	80012e8 <BMI088_read_single_reg>
 8001076:	f7ff ff67 	bl	8000f48 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800107a:	2096      	movs	r0, #150	@ 0x96
 800107c:	f7ff fef0 	bl	8000e60 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	490f      	ldr	r1, [pc, #60]	@ (80010c0 <BMI088_gyro_init+0x12c>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	440b      	add	r3, r1
 800108c:	3301      	adds	r3, #1
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	429a      	cmp	r2, r3
 8001094:	d008      	beq.n	80010a8 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	4909      	ldr	r1, [pc, #36]	@ (80010c0 <BMI088_gyro_init+0x12c>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	3302      	adds	r3, #2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	e006      	b.n	80010b6 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	3301      	adds	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d9b9      	bls.n	8001028 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000018 	.word	0x20000018

080010c4 <IMU_get_temp>:
        return accel[2];
    } else {
        return 0;
    }
}
float IMU_get_temp(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80010c8:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <IMU_get_temp+0x1c>)
 80010ca:	4906      	ldr	r1, [pc, #24]	@ (80010e4 <IMU_get_temp+0x20>)
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <IMU_get_temp+0x24>)
 80010ce:	f000 f80d 	bl	80010ec <BMI088_read>
	return temp;
 80010d2:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <IMU_get_temp+0x1c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
}
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000e4 	.word	0x200000e4
 80010e4:	200000d8 	.word	0x200000d8
 80010e8:	200000cc 	.word	0x200000cc

080010ec <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8001102:	f7ff fef1 	bl	8000ee8 <BMI088_ACCEL_NS_L>
 8001106:	2092      	movs	r0, #146	@ 0x92
 8001108:	f7ff ff2e 	bl	8000f68 <BMI088_read_write_byte>
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2206      	movs	r2, #6
 8001112:	4619      	mov	r1, r3
 8001114:	2012      	movs	r0, #18
 8001116:	f000 f8ff 	bl	8001318 <BMI088_read_muli_reg>
 800111a:	f7ff fef5 	bl	8000f08 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	b21b      	sxth	r3, r3
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7d3b      	ldrb	r3, [r7, #20]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800112e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <BMI088_read+0x1cc>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	b21b      	sxth	r3, r3
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7dbb      	ldrb	r3, [r7, #22]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800115a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	4b54      	ldr	r3, [pc, #336]	@ (80012b8 <BMI088_read+0x1cc>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	3304      	adds	r3, #4
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001178:	7e7b      	ldrb	r3, [r7, #25]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	7e3b      	ldrb	r3, [r7, #24]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001188:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	4b48      	ldr	r3, [pc, #288]	@ (80012b8 <BMI088_read+0x1cc>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3308      	adds	r3, #8
 800119e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a2:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80011a6:	f7ff febf 	bl	8000f28 <BMI088_GYRO_NS_L>
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2208      	movs	r2, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f8b0 	bl	8001318 <BMI088_read_muli_reg>
 80011b8:	f7ff fec6 	bl	8000f48 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80011bc:	7d3b      	ldrb	r3, [r7, #20]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d143      	bne.n	800124a <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7dbb      	ldrb	r3, [r7, #22]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80011d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <BMI088_read+0x1d0>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80011ee:	7e7b      	ldrb	r3, [r7, #25]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7e3b      	ldrb	r3, [r7, #24]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80011fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <BMI088_read+0x1d0>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3304      	adds	r3, #4
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800121c:	7efb      	ldrb	r3, [r7, #27]
 800121e:	b21b      	sxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7ebb      	ldrb	r3, [r7, #26]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800122c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <BMI088_read+0x1d0>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3308      	adds	r3, #8
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800124a:	f7ff fe4d 	bl	8000ee8 <BMI088_ACCEL_NS_L>
 800124e:	20a2      	movs	r0, #162	@ 0xa2
 8001250:	f7ff fe8a 	bl	8000f68 <BMI088_read_write_byte>
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2202      	movs	r2, #2
 800125a:	4619      	mov	r1, r3
 800125c:	2022      	movs	r0, #34	@ 0x22
 800125e:	f000 f85b 	bl	8001318 <BMI088_read_muli_reg>
 8001262:	f7ff fe51 	bl	8000f08 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001266:	7d3b      	ldrb	r3, [r7, #20]
 8001268:	b21b      	sxth	r3, r3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	b21a      	sxth	r2, r3
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	b2db      	uxtb	r3, r3
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800127a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001282:	db04      	blt.n	800128e <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 8001284:	8bfb      	ldrh	r3, [r7, #30]
 8001286:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800128a:	b29b      	uxth	r3, r3
 800128c:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 800128e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80012a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a00 	vstr	s15, [r3]
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000010 	.word	0x20000010
 80012bc:	20000014 	.word	0x20000014

080012c0 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe48 	bl	8000f68 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe44 	bl	8000f68 <BMI088_read_write_byte>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe33 	bl	8000f68 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8001302:	2055      	movs	r0, #85	@ 0x55
 8001304:	f7ff fe30 	bl	8000f68 <BMI088_read_write_byte>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	701a      	strb	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe19 	bl	8000f68 <BMI088_read_write_byte>

    while (len != 0)
 8001336:	e00c      	b.n	8001352 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001338:	2055      	movs	r0, #85	@ 0x55
 800133a:	f7ff fe15 	bl	8000f68 <BMI088_read_write_byte>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	701a      	strb	r2, [r3, #0]
        buf++;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	603b      	str	r3, [r7, #0]
        len--;
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	3b01      	subs	r3, #1
 8001350:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ef      	bne.n	8001338 <BMI088_read_muli_reg+0x20>
    }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 8001368:	f001 fb9e 	bl	8002aa8 <getDR16_S2>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d13b      	bne.n	80013ea <CAL_Update+0x86>
		isWPressed = getDR16_W();
 8001372:	f001 fba7 	bl	8002ac4 <getDR16_W>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b90      	ldr	r3, [pc, #576]	@ (80015bc <CAL_Update+0x258>)
 800137c:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 800137e:	f001 fbbd 	bl	8002afc <getDR16_A>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b8e      	ldr	r3, [pc, #568]	@ (80015c0 <CAL_Update+0x25c>)
 8001388:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 800138a:	f001 fba9 	bl	8002ae0 <getDR16_S>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b8c      	ldr	r3, [pc, #560]	@ (80015c4 <CAL_Update+0x260>)
 8001394:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 8001396:	f001 fbbf 	bl	8002b18 <getDR16_D>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b8a      	ldr	r3, [pc, #552]	@ (80015c8 <CAL_Update+0x264>)
 80013a0:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 80013a2:	f001 fbc7 	bl	8002b34 <getDR16_MouseX>
 80013a6:	4603      	mov	r3, r0
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <CAL_Update+0x268>)
 80013c4:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 80013c6:	f001 fbc1 	bl	8002b4c <getDR16_MouseY>
 80013ca:	4603      	mov	r3, r0
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e0:	ee17 3a90 	vmov	r3, s15
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <CAL_Update+0x26c>)
 80013e8:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 80013ea:	4b74      	ldr	r3, [pc, #464]	@ (80015bc <CAL_Update+0x258>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d115      	bne.n	800141e <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 80013f2:	4b78      	ldr	r3, [pc, #480]	@ (80015d4 <CAL_Update+0x270>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	2305      	movs	r3, #5
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b73      	ldr	r3, [pc, #460]	@ (80015d4 <CAL_Update+0x270>)
 8001406:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 8001408:	4b72      	ldr	r3, [pc, #456]	@ (80015d4 <CAL_Update+0x270>)
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001412:	dd1c      	ble.n	800144e <CAL_Update+0xea>
			wCounter = 660;
 8001414:	4b6f      	ldr	r3, [pc, #444]	@ (80015d4 <CAL_Update+0x270>)
 8001416:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800141a:	801a      	strh	r2, [r3, #0]
 800141c:	e017      	b.n	800144e <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 800141e:	4b6d      	ldr	r3, [pc, #436]	@ (80015d4 <CAL_Update+0x270>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd0a      	ble.n	800143e <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 8001428:	4b6a      	ldr	r3, [pc, #424]	@ (80015d4 <CAL_Update+0x270>)
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	b29a      	uxth	r2, r3
 8001430:	230a      	movs	r3, #10
 8001432:	b29b      	uxth	r3, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b66      	ldr	r3, [pc, #408]	@ (80015d4 <CAL_Update+0x270>)
 800143c:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 800143e:	4b65      	ldr	r3, [pc, #404]	@ (80015d4 <CAL_Update+0x270>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da02      	bge.n	800144e <CAL_Update+0xea>
			wCounter = 0;
 8001448:	4b62      	ldr	r3, [pc, #392]	@ (80015d4 <CAL_Update+0x270>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 800144e:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <CAL_Update+0x264>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d115      	bne.n	8001482 <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <CAL_Update+0x274>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	b29a      	uxth	r2, r3
 800145e:	2305      	movs	r3, #5
 8001460:	b29b      	uxth	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b5b      	ldr	r3, [pc, #364]	@ (80015d8 <CAL_Update+0x274>)
 800146a:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 800146c:	4b5a      	ldr	r3, [pc, #360]	@ (80015d8 <CAL_Update+0x274>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001476:	dd1c      	ble.n	80014b2 <CAL_Update+0x14e>
			dCounter = 660;
 8001478:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <CAL_Update+0x274>)
 800147a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	e017      	b.n	80014b2 <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 8001482:	4b55      	ldr	r3, [pc, #340]	@ (80015d8 <CAL_Update+0x274>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dd0a      	ble.n	80014a2 <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 800148c:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <CAL_Update+0x274>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	b29a      	uxth	r2, r3
 8001494:	230a      	movs	r3, #10
 8001496:	b29b      	uxth	r3, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	b21a      	sxth	r2, r3
 800149e:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <CAL_Update+0x274>)
 80014a0:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 80014a2:	4b4d      	ldr	r3, [pc, #308]	@ (80015d8 <CAL_Update+0x274>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da02      	bge.n	80014b2 <CAL_Update+0x14e>
			dCounter = 0;
 80014ac:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <CAL_Update+0x274>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <CAL_Update+0x260>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d115      	bne.n	80014e6 <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 80014ba:	4b48      	ldr	r3, [pc, #288]	@ (80015dc <CAL_Update+0x278>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	2305      	movs	r3, #5
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <CAL_Update+0x278>)
 80014ce:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 80014d0:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <CAL_Update+0x278>)
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d6:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80014da:	dd1c      	ble.n	8001516 <CAL_Update+0x1b2>
			sCounter = 660;
 80014dc:	4b3f      	ldr	r3, [pc, #252]	@ (80015dc <CAL_Update+0x278>)
 80014de:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e017      	b.n	8001516 <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <CAL_Update+0x278>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dd0a      	ble.n	8001506 <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 80014f0:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <CAL_Update+0x278>)
 80014f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <CAL_Update+0x278>)
 8001504:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 8001506:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <CAL_Update+0x278>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da02      	bge.n	8001516 <CAL_Update+0x1b2>
			sCounter = 0;
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <CAL_Update+0x278>)
 8001512:	2200      	movs	r2, #0
 8001514:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 8001516:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <CAL_Update+0x25c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d115      	bne.n	800154a <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <CAL_Update+0x27c>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	b29a      	uxth	r2, r3
 8001526:	2305      	movs	r3, #5
 8001528:	b29b      	uxth	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <CAL_Update+0x27c>)
 8001532:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <CAL_Update+0x27c>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800153e:	dd1c      	ble.n	800157a <CAL_Update+0x216>
			aCounter = 660;
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <CAL_Update+0x27c>)
 8001542:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	e017      	b.n	800157a <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <CAL_Update+0x27c>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd0a      	ble.n	800156a <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <CAL_Update+0x27c>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	b29a      	uxth	r2, r3
 800155c:	230a      	movs	r3, #10
 800155e:	b29b      	uxth	r3, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <CAL_Update+0x27c>)
 8001568:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <CAL_Update+0x27c>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	2b00      	cmp	r3, #0
 8001572:	da02      	bge.n	800157a <CAL_Update+0x216>
			aCounter = 0;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <CAL_Update+0x27c>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <CAL_Update+0x268>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001584:	dd04      	ble.n	8001590 <CAL_Update+0x22c>
		mouseX = 660;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <CAL_Update+0x268>)
 8001588:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800158c:	801a      	strh	r2, [r3, #0]
 800158e:	e009      	b.n	80015a4 <CAL_Update+0x240>
	}else if(mouseX<-660){
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <CAL_Update+0x268>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800159a:	da03      	bge.n	80015a4 <CAL_Update+0x240>
		mouseX = -660;
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <CAL_Update+0x268>)
 800159e:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80015a2:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <CAL_Update+0x26c>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80015ae:	dd19      	ble.n	80015e4 <CAL_Update+0x280>
		mouseY = 660;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <CAL_Update+0x26c>)
 80015b2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	e01e      	b.n	80015f8 <CAL_Update+0x294>
 80015ba:	bf00      	nop
 80015bc:	2000011e 	.word	0x2000011e
 80015c0:	2000011f 	.word	0x2000011f
 80015c4:	20000120 	.word	0x20000120
 80015c8:	20000121 	.word	0x20000121
 80015cc:	2000012a 	.word	0x2000012a
 80015d0:	2000012c 	.word	0x2000012c
 80015d4:	20000122 	.word	0x20000122
 80015d8:	20000128 	.word	0x20000128
 80015dc:	20000126 	.word	0x20000126
 80015e0:	20000124 	.word	0x20000124
	}else if(mouseY<-660){
 80015e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001724 <CAL_Update+0x3c0>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80015ee:	da03      	bge.n	80015f8 <CAL_Update+0x294>
		mouseY = -660;
 80015f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <CAL_Update+0x3c0>)
 80015f2:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80015f6:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 80015f8:	f001 f9e6 	bl	80029c8 <getDR16_CH0>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <CAL_Update+0x3c4>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4413      	add	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b47      	ldr	r3, [pc, #284]	@ (800172c <CAL_Update+0x3c8>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	b29b      	uxth	r3, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b45      	ldr	r3, [pc, #276]	@ (8001730 <CAL_Update+0x3cc>)
 800161c:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 800161e:	f001 f9ef 	bl	8002a00 <getDR16_CH1>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <CAL_Update+0x3d0>)
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4413      	add	r3, r2
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <CAL_Update+0x3d4>)
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	b29b      	uxth	r3, r3
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	b21a      	sxth	r2, r3
 8001640:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <CAL_Update+0x3d8>)
 8001642:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 8001644:	f001 f9f8 	bl	8002a38 <getDR16_CH2>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <CAL_Update+0x3dc>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	b21a      	sxth	r2, r3
 800165a:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <CAL_Update+0x3e0>)
 800165c:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 800165e:	f001 fa07 	bl	8002a70 <getDR16_CH3>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <CAL_Update+0x3c0>)
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b21a      	sxth	r2, r3
 8001674:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <CAL_Update+0x3e4>)
 8001676:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <CAL_Update+0x3cc>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001682:	dd04      	ble.n	800168e <CAL_Update+0x32a>
		CAL_CH0 = 660;
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <CAL_Update+0x3cc>)
 8001686:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e009      	b.n	80016a2 <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 800168e:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <CAL_Update+0x3cc>)
 8001690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001694:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001698:	da03      	bge.n	80016a2 <CAL_Update+0x33e>
		CAL_CH0 = -660;
 800169a:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <CAL_Update+0x3cc>)
 800169c:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80016a0:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <CAL_Update+0x3d8>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016ac:	dd04      	ble.n	80016b8 <CAL_Update+0x354>
		CAL_CH1 = 660;
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <CAL_Update+0x3d8>)
 80016b0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e009      	b.n	80016cc <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <CAL_Update+0x3d8>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80016c2:	da03      	bge.n	80016cc <CAL_Update+0x368>
		CAL_CH1 = -660;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <CAL_Update+0x3d8>)
 80016c6:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80016ca:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <CAL_Update+0x3e0>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016d6:	dd04      	ble.n	80016e2 <CAL_Update+0x37e>
		CAL_CH2 = 660;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <CAL_Update+0x3e0>)
 80016da:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	e009      	b.n	80016f6 <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <CAL_Update+0x3e0>)
 80016e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e8:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80016ec:	da03      	bge.n	80016f6 <CAL_Update+0x392>
		CAL_CH2 = -660;
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <CAL_Update+0x3e0>)
 80016f0:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80016f4:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <CAL_Update+0x3e4>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001700:	dd04      	ble.n	800170c <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <CAL_Update+0x3e4>)
 8001704:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001708:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 800170a:	e009      	b.n	8001720 <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <CAL_Update+0x3e4>)
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001716:	da03      	bge.n	8001720 <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <CAL_Update+0x3e4>)
 800171a:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800171e:	801a      	strh	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000012c 	.word	0x2000012c
 8001728:	20000128 	.word	0x20000128
 800172c:	20000124 	.word	0x20000124
 8001730:	200000e8 	.word	0x200000e8
 8001734:	20000122 	.word	0x20000122
 8001738:	20000126 	.word	0x20000126
 800173c:	200000ea 	.word	0x200000ea
 8001740:	2000012a 	.word	0x2000012a
 8001744:	200000ec 	.word	0x200000ec
 8001748:	200000ee 	.word	0x200000ee

0800174c <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	4603      	mov	r3, r0
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 800177e:	f001 f993 	bl	8002aa8 <getDR16_S2>
 8001782:	4603      	mov	r3, r0
 8001784:	2b03      	cmp	r3, #3
 8001786:	d004      	beq.n	8001792 <PC_CONTROL_RxEventCallback+0x32>
 8001788:	f001 f98e 	bl	8002aa8 <getDR16_S2>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d16a      	bne.n	8001868 <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 8001792:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017aa:	ee17 3a90 	vmov	r3, s15
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <PC_CONTROL_RxEventCallback+0x110>)
 80017b2:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 80017b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017cc:	ee17 3a90 	vmov	r3, s15
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <PC_CONTROL_RxEventCallback+0x114>)
 80017d4:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <PC_CONTROL_RxEventCallback+0x118>)
 80017dc:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 80017de:	4a27      	ldr	r2, [pc, #156]	@ (800187c <PC_CONTROL_RxEventCallback+0x11c>)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 80017e4:	4a26      	ldr	r2, [pc, #152]	@ (8001880 <PC_CONTROL_RxEventCallback+0x120>)
 80017e6:	7e3b      	ldrb	r3, [r7, #24]
 80017e8:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 80017ea:	4a26      	ldr	r2, [pc, #152]	@ (8001884 <PC_CONTROL_RxEventCallback+0x124>)
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 80017f0:	4a25      	ldr	r2, [pc, #148]	@ (8001888 <PC_CONTROL_RxEventCallback+0x128>)
 80017f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017f6:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 80017f8:	4a24      	ldr	r2, [pc, #144]	@ (800188c <PC_CONTROL_RxEventCallback+0x12c>)
 80017fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017fe:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 8001800:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <PC_CONTROL_RxEventCallback+0x130>)
 8001802:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001806:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 8001808:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <PC_CONTROL_RxEventCallback+0x134>)
 800180a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800180e:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 8001810:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <PC_CONTROL_RxEventCallback+0x138>)
 8001812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001816:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 8001818:	4a20      	ldr	r2, [pc, #128]	@ (800189c <PC_CONTROL_RxEventCallback+0x13c>)
 800181a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800181e:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 8001820:	4a1f      	ldr	r2, [pc, #124]	@ (80018a0 <PC_CONTROL_RxEventCallback+0x140>)
 8001822:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001826:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 8001828:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <PC_CONTROL_RxEventCallback+0x144>)
 800182a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800182e:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 8001830:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <PC_CONTROL_RxEventCallback+0x148>)
 8001832:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001836:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 8001838:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <PC_CONTROL_RxEventCallback+0x14c>)
 800183a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800183e:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <PC_CONTROL_RxEventCallback+0x150>)
 8001842:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001846:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 8001848:	4a1a      	ldr	r2, [pc, #104]	@ (80018b4 <PC_CONTROL_RxEventCallback+0x154>)
 800184a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800184e:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 8001850:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <PC_CONTROL_RxEventCallback+0x158>)
 8001852:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001856:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <PC_CONTROL_RxEventCallback+0x15c>)
 800185a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800185e:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 8001860:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <PC_CONTROL_RxEventCallback+0x160>)
 8001862:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001866:	7013      	strb	r3, [r2, #0]
	}
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	2000012c 	.word	0x2000012c
 8001874:	2000012a 	.word	0x2000012a
 8001878:	200000fe 	.word	0x200000fe
 800187c:	200000fc 	.word	0x200000fc
 8001880:	200000fd 	.word	0x200000fd
 8001884:	2000011e 	.word	0x2000011e
 8001888:	2000011f 	.word	0x2000011f
 800188c:	20000120 	.word	0x20000120
 8001890:	20000121 	.word	0x20000121
 8001894:	200000f0 	.word	0x200000f0
 8001898:	200000f1 	.word	0x200000f1
 800189c:	200000f2 	.word	0x200000f2
 80018a0:	200000f3 	.word	0x200000f3
 80018a4:	200000f4 	.word	0x200000f4
 80018a8:	200000f5 	.word	0x200000f5
 80018ac:	200000f6 	.word	0x200000f6
 80018b0:	200000f7 	.word	0x200000f7
 80018b4:	200000f8 	.word	0x200000f8
 80018b8:	200000f9 	.word	0x200000f9
 80018bc:	200000fa 	.word	0x200000fa
 80018c0:	200000fb 	.word	0x200000fb

080018c4 <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <GAME_STATUS_RxEventCallback+0x54>)
 80018e6:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 80018e8:	79ba      	ldrb	r2, [r7, #6]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <GAME_STATUS_RxEventCallback+0x58>)
 80018ec:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&game_type,1);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&current_stage,1);
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	727b      	strb	r3, [r7, #9]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001900:	2002      	movs	r0, #2
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	461a      	mov	r2, r3
 8001908:	f240 2111 	movw	r1, #529	@ 0x211
 800190c:	f000 faea 	bl	8001ee4 <CAN_transmit>
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	200000ff 	.word	0x200000ff
 800191c:	20000100 	.word	0x20000100

08001920 <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	4603      	mov	r3, r0
 8001934:	71bb      	strb	r3, [r7, #6]
 8001936:	460b      	mov	r3, r1
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <ROBOT_STATUS_RxEventCallback+0x74>)
 8001942:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <ROBOT_STATUS_RxEventCallback+0x78>)
 8001948:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 800194a:	8c3a      	ldrh	r2, [r7, #32]
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <ROBOT_STATUS_RxEventCallback+0x7c>)
 800194e:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 8001950:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <ROBOT_STATUS_RxEventCallback+0x80>)
 8001954:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 8001956:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <ROBOT_STATUS_RxEventCallback+0x84>)
 800195a:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 800196e:	8c3b      	ldrh	r3, [r7, #32]
 8001970:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 8001972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001974:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 8001976:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001978:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 800197a:	2002      	movs	r0, #2
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	461a      	mov	r2, r3
 8001982:	f240 2112 	movw	r1, #530	@ 0x212
 8001986:	f000 faad 	bl	8001ee4 <CAN_transmit>
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	2000010a 	.word	0x2000010a
 8001998:	2000010b 	.word	0x2000010b
 800199c:	2000010c 	.word	0x2000010c
 80019a0:	20000110 	.word	0x20000110
 80019a4:	2000010e 	.word	0x2000010e

080019a8 <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <POWER_HEAT_DATA_RxEventCallback+0x68>)
 80019ca:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 80019cc:	88ba      	ldrh	r2, [r7, #4]
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 80019d0:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <POWER_HEAT_DATA_RxEventCallback+0x70>)
 80019d6:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 80019d8:	883a      	ldrh	r2, [r7, #0]
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <POWER_HEAT_DATA_RxEventCallback+0x74>)
 80019dc:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 80019f4:	883b      	ldrh	r3, [r7, #0]
 80019f6:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 80019f8:	2002      	movs	r0, #2
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	461a      	mov	r2, r3
 8001a00:	f240 2113 	movw	r1, #531	@ 0x213
 8001a04:	f000 fa6e 	bl	8001ee4 <CAN_transmit>
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	20000102 	.word	0x20000102
 8001a14:	20000104 	.word	0x20000104
 8001a18:	20000106 	.word	0x20000106
 8001a1c:	20000108 	.word	0x20000108

08001a20 <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	switch(StdId){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	f200 8117 	bhi.w	8001c64 <CAN_RxEventCallbackPT+0x244>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <CAN_RxEventCallbackPT+0x1c>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a61 	.word	0x08001a61
 8001a44:	08001a99 	.word	0x08001a99
 8001a48:	08001ac9 	.word	0x08001ac9
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b87      	ldr	r3, [pc, #540]	@ (8001c70 <CAN_RxEventCallbackPT+0x250>)
 8001a52:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	4b86      	ldr	r3, [pc, #536]	@ (8001c74 <CAN_RxEventCallbackPT+0x254>)
 8001a5c:	701a      	strb	r2, [r3, #0]
			break;
 8001a5e:	e102      	b.n	8001c66 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b84      	ldr	r3, [pc, #528]	@ (8001c78 <CAN_RxEventCallbackPT+0x258>)
 8001a66:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b83      	ldr	r3, [pc, #524]	@ (8001c7c <CAN_RxEventCallbackPT+0x25c>)
 8001a70:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3302      	adds	r3, #2
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b81      	ldr	r3, [pc, #516]	@ (8001c80 <CAN_RxEventCallbackPT+0x260>)
 8001a7c:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3304      	adds	r3, #4
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b7f      	ldr	r3, [pc, #508]	@ (8001c84 <CAN_RxEventCallbackPT+0x264>)
 8001a88:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3306      	adds	r3, #6
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b7d      	ldr	r3, [pc, #500]	@ (8001c88 <CAN_RxEventCallbackPT+0x268>)
 8001a94:	801a      	strh	r2, [r3, #0]
			break;
 8001a96:	e0e6      	b.n	8001c66 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c8c <CAN_RxEventCallbackPT+0x26c>)
 8001aa0:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b79      	ldr	r3, [pc, #484]	@ (8001c90 <CAN_RxEventCallbackPT+0x270>)
 8001aac:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b77      	ldr	r3, [pc, #476]	@ (8001c94 <CAN_RxEventCallbackPT+0x274>)
 8001ab8:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3306      	adds	r3, #6
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b75      	ldr	r3, [pc, #468]	@ (8001c98 <CAN_RxEventCallbackPT+0x278>)
 8001ac4:	801a      	strh	r2, [r3, #0]
			break;
 8001ac6:	e0ce      	b.n	8001c66 <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
 8001ac8:	2300      	movs	r3, #0
 8001aca:	83bb      	strh	r3, [r7, #28]
			frontBackBuff[0] = rxData[0];
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	773b      	strb	r3, [r7, #28]
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f8eb 	bl	8001cb8 <CAL_getBits>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 8001ae6:	8bba      	ldrh	r2, [r7, #28]
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c9c <CAN_RxEventCallbackPT+0x27c>)
 8001aea:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001aec:	4b6b      	ldr	r3, [pc, #428]	@ (8001c9c <CAN_RxEventCallbackPT+0x27c>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b67      	ldr	r3, [pc, #412]	@ (8001c9c <CAN_RxEventCallbackPT+0x27c>)
 8001afe:	801a      	strh	r2, [r3, #0]

			uint8_t rightLeftBuff[2] = {0};
 8001b00:	2300      	movs	r3, #0
 8001b02:	833b      	strh	r3, [r7, #24]
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f8d2 	bl	8001cb8 <CAL_getBits>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b25c      	sxtb	r4, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f8c8 	bl	8001cb8 <CAL_getBits>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4323      	orrs	r3, r4
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	763b      	strb	r3, [r7, #24]
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	2104      	movs	r1, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f8b8 	bl	8001cb8 <CAL_getBits>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 8001b4c:	8b3a      	ldrh	r2, [r7, #24]
 8001b4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ca0 <CAN_RxEventCallbackPT+0x280>)
 8001b50:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 8001b52:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <CAN_RxEventCallbackPT+0x280>)
 8001b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <CAN_RxEventCallbackPT+0x280>)
 8001b64:	801a      	strh	r2, [r3, #0]

			uint8_t chassisSpinBuff[2] = {0};
 8001b66:	2300      	movs	r3, #0
 8001b68:	82bb      	strh	r3, [r7, #20]
			chassisSpinBuff[0] = rxData[3];
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	753b      	strb	r3, [r7, #20]
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3304      	adds	r3, #4
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f89c 	bl	8001cb8 <CAL_getBits>
 8001b80:	4603      	mov	r3, r0
 8001b82:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 8001b84:	8aba      	ldrh	r2, [r7, #20]
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <CAN_RxEventCallbackPT+0x284>)
 8001b88:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 8001b8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ca4 <CAN_RxEventCallbackPT+0x284>)
 8001b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <CAN_RxEventCallbackPT+0x284>)
 8001b9c:	801a      	strh	r2, [r3, #0]

			uint8_t turretSpinBuff[2] = {0};
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	823b      	strh	r3, [r7, #16]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	2104      	movs	r1, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f883 	bl	8001cb8 <CAL_getBits>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b25c      	sxtb	r4, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3305      	adds	r3, #5
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f879 	bl	8001cb8 <CAL_getBits>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	743b      	strb	r3, [r7, #16]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3305      	adds	r3, #5
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	2104      	movs	r1, #4
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f869 	bl	8001cb8 <CAL_getBits>
 8001be6:	4603      	mov	r3, r0
 8001be8:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 8001bea:	8a3a      	ldrh	r2, [r7, #16]
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <CAN_RxEventCallbackPT+0x288>)
 8001bee:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <CAN_RxEventCallbackPT+0x288>)
 8001bf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <CAN_RxEventCallbackPT+0x288>)
 8001bf8:	801a      	strh	r2, [r3, #0]

			uint8_t currentGyroBuff[2] = {0};
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	81bb      	strh	r3, [r7, #12]
			currentGyroBuff[0] = rxData[6];
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	799b      	ldrb	r3, [r3, #6]
 8001c02:	733b      	strb	r3, [r7, #12]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3307      	adds	r3, #7
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f852 	bl	8001cb8 <CAL_getBits>
 8001c14:	4603      	mov	r3, r0
 8001c16:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 8001c18:	89ba      	ldrh	r2, [r7, #12]
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <CAN_RxEventCallbackPT+0x28c>)
 8001c1c:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <CAN_RxEventCallbackPT+0x28c>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <CAN_RxEventCallbackPT+0x28c>)
 8001c30:	801a      	strh	r2, [r3, #0]

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3307      	adds	r3, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f83b 	bl	8001cb8 <CAL_getBits>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <CAN_RxEventCallbackPT+0x290>)
 8001c48:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3307      	adds	r3, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2203      	movs	r2, #3
 8001c52:	2105      	movs	r1, #5
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f82f 	bl	8001cb8 <CAL_getBits>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <CAN_RxEventCallbackPT+0x294>)
 8001c60:	701a      	strb	r2, [r3, #0]
			break;
 8001c62:	e000      	b.n	8001c66 <CAN_RxEventCallbackPT+0x246>
		}
		default:{

			break;
 8001c64:	bf00      	nop
		}
	}
}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000ff 	.word	0x200000ff
 8001c74:	20000100 	.word	0x20000100
 8001c78:	2000010a 	.word	0x2000010a
 8001c7c:	2000010b 	.word	0x2000010b
 8001c80:	2000010c 	.word	0x2000010c
 8001c84:	20000110 	.word	0x20000110
 8001c88:	2000010e 	.word	0x2000010e
 8001c8c:	20000102 	.word	0x20000102
 8001c90:	20000104 	.word	0x20000104
 8001c94:	20000106 	.word	0x20000106
 8001c98:	20000108 	.word	0x20000108
 8001c9c:	20000112 	.word	0x20000112
 8001ca0:	20000114 	.word	0x20000114
 8001ca4:	20000116 	.word	0x20000116
 8001ca8:	20000118 	.word	0x20000118
 8001cac:	2000011a 	.word	0x2000011a
 8001cb0:	2000011c 	.word	0x2000011c
 8001cb4:	2000011d 	.word	0x2000011d

08001cb8 <CAL_getBits>:

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	71bb      	strb	r3, [r7, #6]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73bb      	strb	r3, [r7, #14]
 8001cd2:	e013      	b.n	8001cfc <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	79b9      	ldrb	r1, [r7, #6]
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	440b      	add	r3, r1
 8001cdc:	fa42 f303 	asr.w	r3, r2, r3
 8001ce0:	f003 0201 	and.w	r2, r3, #1
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	b25a      	sxtb	r2, r3
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73bb      	strb	r3, [r7, #14]
 8001cfc:	7bba      	ldrb	r2, [r7, #14]
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e7      	bcc.n	8001cd4 <CAL_getBits+0x1c>
	}
	return result;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <CAL_getCurrentStage>:

uint8_t CAL_getGameType(){
	return CAL_game_type;
}

uint8_t CAL_getCurrentStage(){
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	return CAL_current_stage;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <CAL_getCurrentStage+0x14>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000100 	.word	0x20000100

08001d2c <CAL_getBufferEnergy>:

uint16_t CAL_getBufferEnergy(){
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	return CAL_buffer_energy;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <CAL_getBufferEnergy+0x14>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000102 	.word	0x20000102

08001d44 <CAL_getFrontBack>:

uint16_t CAL_getHeatLimit(){
	return CAL_shooter_barrel_heat_limit;
}

int16_t CAL_getFrontBack(){
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	return CAL_FrontBack;
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <CAL_getFrontBack+0x14>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	20000112 	.word	0x20000112

08001d5c <CAL_getRightLeft>:

int16_t CAL_getRightLeft(){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	return CAL_RightLeft;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <CAL_getRightLeft+0x14>)
 8001d62:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000114 	.word	0x20000114

08001d74 <CAL_getChassisSpin>:

int16_t CAL_getChassisSpin(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return CAL_ChassisSpin;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <CAL_getChassisSpin+0x14>)
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	20000116 	.word	0x20000116

08001d8c <CAL_getTurretSpin>:

int16_t CAL_getTurretSpin(){
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	return CAL_TurretSpin;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <CAL_getTurretSpin+0x14>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	20000118 	.word	0x20000118

08001da4 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	2100      	movs	r1, #0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f005 f8f6 	bl	8006fa8 <HAL_CAN_GetRxMessage>
    //CAN Debugger:
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);



    switch (rx_header.StdId) {
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001dc2:	2b0a      	cmp	r3, #10
 8001dc4:	d87a      	bhi.n	8001ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a41      	ldr	r2, [pc, #260]	@ (8001ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d134      	bne.n	8001e42 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001dd8:	7a3b      	ldrb	r3, [r7, #8]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	7a7b      	ldrb	r3, [r7, #9]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dec:	b291      	uxth	r1, r2
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001df0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001df4:	7abb      	ldrb	r3, [r7, #10]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b219      	sxth	r1, r3
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e04:	430a      	orrs	r2, r1
 8001e06:	b211      	sxth	r1, r2
 8001e08:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	805a      	strh	r2, [r3, #2]
 8001e12:	7b3b      	ldrb	r3, [r7, #12]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b219      	sxth	r1, r3
 8001e1a:	7b7b      	ldrb	r3, [r7, #13]
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e22:	430a      	orrs	r2, r1
 8001e24:	b211      	sxth	r1, r2
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	809a      	strh	r2, [r3, #4]
 8001e30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e34:	7bb9      	ldrb	r1, [r7, #14]
 8001e36:	4a29      	ldr	r2, [pc, #164]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001e40:	e044      	b.n	8001ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d140      	bne.n	8001ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001e4a:	7a3b      	ldrb	r3, [r7, #8]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	7a7b      	ldrb	r3, [r7, #9]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e5e:	b291      	uxth	r1, r2
 8001e60:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e62:	330b      	adds	r3, #11
 8001e64:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001e68:	7abb      	ldrb	r3, [r7, #10]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b219      	sxth	r1, r3
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	b211      	sxth	r1, r2
 8001e7c:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e7e:	330b      	adds	r3, #11
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	805a      	strh	r2, [r3, #2]
 8001e88:	7b3b      	ldrb	r3, [r7, #12]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b219      	sxth	r1, r3
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	b211      	sxth	r1, r2
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001e9e:	330b      	adds	r3, #11
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	809a      	strh	r2, [r3, #4]
 8001ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eac:	7bb9      	ldrb	r1, [r7, #14]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001eb0:	330b      	adds	r3, #11
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	719a      	strb	r2, [r3, #6]
            break;
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f107 0208 	add.w	r2, r7, #8
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fdab 	bl	8001a20 <CAN_RxEventCallbackPT>
            break;
 8001eca:	e000      	b.n	8001ece <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 8001ecc:	bf00      	nop
        }
    }
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000a00 	.word	0x20000a00
 8001edc:	20000198 	.word	0x20000198
 8001ee0:	20000a28 	.word	0x20000a28

08001ee4 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	603a      	str	r2, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <CAN_transmit+0x58>)
 8001ef8:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <CAN_transmit+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <CAN_transmit+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <CAN_transmit+0x58>)
 8001f08:	2208      	movs	r2, #8
 8001f0a:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d106      	bne.n	8001f20 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <CAN_transmit+0x58>)
 8001f1a:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <CAN_transmit+0x5c>)
 8001f1c:	f004 ff74 	bl	8006e08 <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d106      	bne.n	8001f34 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4903      	ldr	r1, [pc, #12]	@ (8001f3c <CAN_transmit+0x58>)
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <CAN_transmit+0x60>)
 8001f30:	f004 ff6a 	bl	8006e08 <HAL_CAN_AddTxMessage>
	}
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000130 	.word	0x20000130
 8001f40:	20000a00 	.word	0x20000a00
 8001f44:	20000a28 	.word	0x20000a28

08001f48 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80bb      	strh	r3, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]
 8001f62:	4613      	mov	r3, r2
 8001f64:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	4a27      	ldr	r2, [pc, #156]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001f6a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8001f6c:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8001f7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f82:	121b      	asrs	r3, r3, #8
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b20      	ldr	r3, [pc, #128]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001f8a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001f92:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001f94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f98:	121b      	asrs	r3, r3, #8
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fa0:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001fa2:	883b      	ldrh	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fa8:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8001faa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fae:	121b      	asrs	r3, r3, #8
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fb6:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001fb8:	8c3b      	ldrh	r3, [r7, #32]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fbe:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001fc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001fc4:	121b      	asrs	r3, r3, #8
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fcc:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8001fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fd4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001fe2:	4909      	ldr	r1, [pc, #36]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001fe4:	480a      	ldr	r0, [pc, #40]	@ (8002010 <CAN_DriveMotor+0xc8>)
 8001fe6:	f004 ff0f 	bl	8006e08 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001fea:	e009      	b.n	8002000 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d106      	bne.n	8002000 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <CAN_DriveMotor+0xc4>)
 8001ff8:	4903      	ldr	r1, [pc, #12]	@ (8002008 <CAN_DriveMotor+0xc0>)
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <CAN_DriveMotor+0xcc>)
 8001ffc:	f004 ff04 	bl	8006e08 <HAL_CAN_AddTxMessage>
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	20000148 	.word	0x20000148
 800200c:	20000160 	.word	0x20000160
 8002010:	20000a00 	.word	0x20000a00
 8002014:	20000a28 	.word	0x20000a28

08002018 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af02      	add	r7, sp, #8
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	4603      	mov	r3, r0
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	460b      	mov	r3, r1
 8002030:	717b      	strb	r3, [r7, #5]
 8002032:	4613      	mov	r3, r2
 8002034:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	2b04      	cmp	r3, #4
 800203a:	f000 8142 	beq.w	80022c2 <CAN_setMotorCtrlVal+0x2aa>
 800203e:	2b04      	cmp	r3, #4
 8002040:	f300 81e1 	bgt.w	8002406 <CAN_setMotorCtrlVal+0x3ee>
 8002044:	2b02      	cmp	r3, #2
 8002046:	dc02      	bgt.n	800204e <CAN_setMotorCtrlVal+0x36>
 8002048:	2b00      	cmp	r3, #0
 800204a:	dc04      	bgt.n	8002056 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 800204c:	e1db      	b.n	8002406 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800204e:	2b03      	cmp	r3, #3
 8002050:	f000 8097 	beq.w	8002182 <CAN_setMotorCtrlVal+0x16a>
}
 8002054:	e1d7      	b.n	8002406 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002056:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800205a:	2b04      	cmp	r3, #4
 800205c:	dc02      	bgt.n	8002064 <CAN_setMotorCtrlVal+0x4c>
 800205e:	2b00      	cmp	r3, #0
 8002060:	dc05      	bgt.n	800206e <CAN_setMotorCtrlVal+0x56>
					break;
 8002062:	e08c      	b.n	800217e <CAN_setMotorCtrlVal+0x166>
 8002064:	3b05      	subs	r3, #5
			switch(motorID) {
 8002066:	2b03      	cmp	r3, #3
 8002068:	f200 8089 	bhi.w	800217e <CAN_setMotorCtrlVal+0x166>
 800206c:	e042      	b.n	80020f4 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002076:	1e59      	subs	r1, r3, #1
 8002078:	48bd      	ldr	r0, [pc, #756]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	49b8      	ldr	r1, [pc, #736]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	49b3      	ldr	r1, [pc, #716]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	3302      	adds	r3, #2
 80020b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	1e5a      	subs	r2, r3, #1
 80020b8:	49ad      	ldr	r1, [pc, #692]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3304      	adds	r3, #4
 80020c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	48a8      	ldr	r0, [pc, #672]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4403      	add	r3, r0
 80020da:	3306      	adds	r3, #6
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	79f8      	ldrb	r0, [r7, #7]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	9100      	str	r1, [sp, #0]
 80020e6:	462b      	mov	r3, r5
 80020e8:	4622      	mov	r2, r4
 80020ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ee:	f7ff ff2b 	bl	8001f48 <CAN_DriveMotor>
					break;
 80020f2:	e045      	b.n	8002180 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	1e5a      	subs	r2, r3, #1
 80020f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020fc:	1f59      	subs	r1, r3, #5
 80020fe:	489c      	ldr	r0, [pc, #624]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3304      	adds	r3, #4
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	4996      	ldr	r1, [pc, #600]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3308      	adds	r3, #8
 8002124:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	4990      	ldr	r1, [pc, #576]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	330a      	adds	r3, #10
 800213a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	498b      	ldr	r1, [pc, #556]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	330c      	adds	r3, #12
 8002150:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4885      	ldr	r0, [pc, #532]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4403      	add	r3, r0
 8002164:	330e      	adds	r3, #14
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	79f8      	ldrb	r0, [r7, #7]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	9100      	str	r1, [sp, #0]
 8002170:	462b      	mov	r3, r5
 8002172:	4622      	mov	r2, r4
 8002174:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8002178:	f7ff fee6 	bl	8001f48 <CAN_DriveMotor>
					break;
 800217c:	e000      	b.n	8002180 <CAN_setMotorCtrlVal+0x168>
					break;
 800217e:	bf00      	nop
			break;
 8002180:	e141      	b.n	8002406 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002182:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002186:	2b08      	cmp	r3, #8
 8002188:	f000 8097 	beq.w	80022ba <CAN_setMotorCtrlVal+0x2a2>
 800218c:	2b08      	cmp	r3, #8
 800218e:	f300 8096 	bgt.w	80022be <CAN_setMotorCtrlVal+0x2a6>
 8002192:	2b04      	cmp	r3, #4
 8002194:	dc02      	bgt.n	800219c <CAN_setMotorCtrlVal+0x184>
 8002196:	2b00      	cmp	r3, #0
 8002198:	dc05      	bgt.n	80021a6 <CAN_setMotorCtrlVal+0x18e>
					break;
 800219a:	e090      	b.n	80022be <CAN_setMotorCtrlVal+0x2a6>
 800219c:	3b05      	subs	r3, #5
			switch(motorID) {
 800219e:	2b02      	cmp	r3, #2
 80021a0:	f200 808d 	bhi.w	80022be <CAN_setMotorCtrlVal+0x2a6>
 80021a4:	e044      	b.n	8002230 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021ae:	1e59      	subs	r1, r3, #1
 80021b0:	486f      	ldr	r0, [pc, #444]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3304      	adds	r3, #4
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	1e5a      	subs	r2, r3, #1
 80021c8:	4969      	ldr	r1, [pc, #420]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	3308      	adds	r3, #8
 80021d6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	4964      	ldr	r1, [pc, #400]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	330a      	adds	r3, #10
 80021ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	495e      	ldr	r1, [pc, #376]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	330c      	adds	r3, #12
 8002202:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	4859      	ldr	r0, [pc, #356]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4403      	add	r3, r0
 8002216:	330e      	adds	r3, #14
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	79f8      	ldrb	r0, [r7, #7]
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9100      	str	r1, [sp, #0]
 8002222:	462b      	mov	r3, r5
 8002224:	4622      	mov	r2, r4
 8002226:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800222a:	f7ff fe8d 	bl	8001f48 <CAN_DriveMotor>
					break;
 800222e:	e047      	b.n	80022c0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002238:	1f59      	subs	r1, r3, #5
 800223a:	484d      	ldr	r0, [pc, #308]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3308      	adds	r3, #8
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	4947      	ldr	r1, [pc, #284]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3310      	adds	r3, #16
 8002260:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	4941      	ldr	r1, [pc, #260]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3312      	adds	r3, #18
 8002276:	f9b3 5000 	ldrsh.w	r5, [r3]
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	493c      	ldr	r1, [pc, #240]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3314      	adds	r3, #20
 800228c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	4836      	ldr	r0, [pc, #216]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4403      	add	r3, r0
 80022a0:	3316      	adds	r3, #22
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	79f8      	ldrb	r0, [r7, #7]
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9100      	str	r1, [sp, #0]
 80022ac:	462b      	mov	r3, r5
 80022ae:	4622      	mov	r2, r4
 80022b0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80022b4:	f7ff fe48 	bl	8001f48 <CAN_DriveMotor>
					break;
 80022b8:	e002      	b.n	80022c0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 80022ba:	bf00      	nop
 80022bc:	e0a3      	b.n	8002406 <CAN_setMotorCtrlVal+0x3ee>
					break;
 80022be:	bf00      	nop
			break;
 80022c0:	e0a1      	b.n	8002406 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80022c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	f000 8099 	beq.w	80023fe <CAN_setMotorCtrlVal+0x3e6>
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	f300 8098 	bgt.w	8002402 <CAN_setMotorCtrlVal+0x3ea>
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	dc02      	bgt.n	80022dc <CAN_setMotorCtrlVal+0x2c4>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	dc05      	bgt.n	80022e6 <CAN_setMotorCtrlVal+0x2ce>
					break;
 80022da:	e092      	b.n	8002402 <CAN_setMotorCtrlVal+0x3ea>
 80022dc:	3b05      	subs	r3, #5
			switch(motorID) {
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f200 808f 	bhi.w	8002402 <CAN_setMotorCtrlVal+0x3ea>
 80022e4:	e046      	b.n	8002374 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80022ee:	1e59      	subs	r1, r3, #1
 80022f0:	481f      	ldr	r0, [pc, #124]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3304      	adds	r3, #4
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	4919      	ldr	r1, [pc, #100]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	3308      	adds	r3, #8
 8002316:	f9b3 4000 	ldrsh.w	r4, [r3]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	4914      	ldr	r1, [pc, #80]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	330a      	adds	r3, #10
 800232c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	330c      	adds	r3, #12
 8002342:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	4809      	ldr	r0, [pc, #36]	@ (8002370 <CAN_setMotorCtrlVal+0x358>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4403      	add	r3, r0
 8002356:	330e      	adds	r3, #14
 8002358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235c:	79f8      	ldrb	r0, [r7, #7]
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	9100      	str	r1, [sp, #0]
 8002362:	462b      	mov	r3, r5
 8002364:	4622      	mov	r2, r4
 8002366:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800236a:	f7ff fded 	bl	8001f48 <CAN_DriveMotor>
					break;
 800236e:	e049      	b.n	8002404 <CAN_setMotorCtrlVal+0x3ec>
 8002370:	20000168 	.word	0x20000168
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800237c:	1f59      	subs	r1, r3, #5
 800237e:	4824      	ldr	r0, [pc, #144]	@ (8002410 <CAN_setMotorCtrlVal+0x3f8>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3308      	adds	r3, #8
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	491e      	ldr	r1, [pc, #120]	@ (8002410 <CAN_setMotorCtrlVal+0x3f8>)
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3310      	adds	r3, #16
 80023a4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	4918      	ldr	r1, [pc, #96]	@ (8002410 <CAN_setMotorCtrlVal+0x3f8>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3312      	adds	r3, #18
 80023ba:	f9b3 5000 	ldrsh.w	r5, [r3]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	4913      	ldr	r1, [pc, #76]	@ (8002410 <CAN_setMotorCtrlVal+0x3f8>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	3314      	adds	r3, #20
 80023d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	480d      	ldr	r0, [pc, #52]	@ (8002410 <CAN_setMotorCtrlVal+0x3f8>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4403      	add	r3, r0
 80023e4:	3316      	adds	r3, #22
 80023e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ea:	79f8      	ldrb	r0, [r7, #7]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9100      	str	r1, [sp, #0]
 80023f0:	462b      	mov	r3, r5
 80023f2:	4622      	mov	r2, r4
 80023f4:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80023f8:	f7ff fda6 	bl	8001f48 <CAN_DriveMotor>
					break;
 80023fc:	e002      	b.n	8002404 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002402:	bf00      	nop
			break;
 8002404:	bf00      	nop
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bdb0      	pop	{r4, r5, r7, pc}
 800240e:	bf00      	nop
 8002410:	20000168 	.word	0x20000168

08002414 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b08b      	sub	sp, #44	@ 0x2c
 8002418:	af00      	add	r7, sp, #0
 800241a:	4604      	mov	r4, r0
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	eef0 6a40 	vmov.f32	s13, s0
 8002426:	eeb0 7a60 	vmov.f32	s14, s1
 800242a:	eef0 7a41 	vmov.f32	s15, s2
 800242e:	4623      	mov	r3, r4
 8002430:	75fb      	strb	r3, [r7, #23]
 8002432:	4603      	mov	r3, r0
 8002434:	75bb      	strb	r3, [r7, #22]
 8002436:	460b      	mov	r3, r1
 8002438:	757b      	strb	r3, [r7, #21]
 800243a:	4613      	mov	r3, r2
 800243c:	827b      	strh	r3, [r7, #18]
 800243e:	edc7 6a01 	vstr	s13, [r7, #4]
 8002442:	ed87 7a02 	vstr	s14, [r7, #8]
 8002446:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	3b01      	subs	r3, #1
 8002452:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8002454:	7dbb      	ldrb	r3, [r7, #22]
 8002456:	2b02      	cmp	r3, #2
 8002458:	dc02      	bgt.n	8002460 <calcRPM_PID+0x4c>
 800245a:	2b00      	cmp	r3, #0
 800245c:	dc04      	bgt.n	8002468 <calcRPM_PID+0x54>
 800245e:	e00d      	b.n	800247c <calcRPM_PID+0x68>
 8002460:	3b03      	subs	r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d80a      	bhi.n	800247c <calcRPM_PID+0x68>
 8002466:	e004      	b.n	8002472 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002468:	7d7b      	ldrb	r3, [r7, #21]
 800246a:	3b01      	subs	r3, #1
 800246c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002470:	e009      	b.n	8002486 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002472:	7d7b      	ldrb	r3, [r7, #21]
 8002474:	3303      	adds	r3, #3
 8002476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800247a:	e004      	b.n	8002486 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800247c:	7d7b      	ldrb	r3, [r7, #21]
 800247e:	3b01      	subs	r3, #1
 8002480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002484:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8002486:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800248a:	7ffa      	ldrb	r2, [r7, #31]
 800248c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002490:	4c70      	ldr	r4, [pc, #448]	@ (8002654 <calcRPM_PID+0x240>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	4403      	add	r3, r0
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4423      	add	r3, r4
 80024a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024a6:	7ffa      	ldrb	r2, [r7, #31]
 80024a8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80024ac:	1ac9      	subs	r1, r1, r3
 80024ae:	4c6a      	ldr	r4, [pc, #424]	@ (8002658 <calcRPM_PID+0x244>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	4403      	add	r3, r0
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4423      	add	r3, r4
 80024c0:	3304      	adds	r3, #4
 80024c2:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80024c4:	7ffa      	ldrb	r2, [r7, #31]
 80024c6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ca:	4863      	ldr	r0, [pc, #396]	@ (8002658 <calcRPM_PID+0x244>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4403      	add	r3, r0
 80024dc:	3308      	adds	r3, #8
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	7ffa      	ldrb	r2, [r7, #31]
 80024e2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80024e6:	4c5c      	ldr	r4, [pc, #368]	@ (8002658 <calcRPM_PID+0x244>)
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	4403      	add	r3, r0
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4423      	add	r3, r4
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	7ffa      	ldrb	r2, [r7, #31]
 80024fe:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002502:	4419      	add	r1, r3
 8002504:	4c54      	ldr	r4, [pc, #336]	@ (8002658 <calcRPM_PID+0x244>)
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	4403      	add	r3, r0
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4423      	add	r3, r4
 8002516:	3308      	adds	r3, #8
 8002518:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800251a:	7ffa      	ldrb	r2, [r7, #31]
 800251c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002520:	484d      	ldr	r0, [pc, #308]	@ (8002658 <calcRPM_PID+0x244>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	440b      	add	r3, r1
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4403      	add	r3, r0
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	7ffa      	ldrb	r2, [r7, #31]
 8002536:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800253a:	4c46      	ldr	r4, [pc, #280]	@ (8002654 <calcRPM_PID+0x240>)
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	4403      	add	r3, r0
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4423      	add	r3, r4
 800254c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002550:	7ffa      	ldrb	r2, [r7, #31]
 8002552:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002556:	1ac9      	subs	r1, r1, r3
 8002558:	4c3f      	ldr	r4, [pc, #252]	@ (8002658 <calcRPM_PID+0x244>)
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	4403      	add	r3, r0
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4423      	add	r3, r4
 800256a:	330c      	adds	r3, #12
 800256c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 800256e:	7ffa      	ldrb	r2, [r7, #31]
 8002570:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002574:	4837      	ldr	r0, [pc, #220]	@ (8002654 <calcRPM_PID+0x240>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	440b      	add	r3, r1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4403      	add	r3, r0
 8002586:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800258a:	7ffa      	ldrb	r2, [r7, #31]
 800258c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002590:	461c      	mov	r4, r3
 8002592:	4831      	ldr	r0, [pc, #196]	@ (8002658 <calcRPM_PID+0x244>)
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4403      	add	r3, r0
 80025a4:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80025a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80025aa:	7ffa      	ldrb	r2, [r7, #31]
 80025ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80025b0:	4829      	ldr	r0, [pc, #164]	@ (8002658 <calcRPM_PID+0x244>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	440b      	add	r3, r1
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4403      	add	r3, r0
 80025c2:	3304      	adds	r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80025d6:	7ffa      	ldrb	r2, [r7, #31]
 80025d8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80025dc:	481e      	ldr	r0, [pc, #120]	@ (8002658 <calcRPM_PID+0x244>)
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	4403      	add	r3, r0
 80025ee:	3308      	adds	r3, #8
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	edd7 6a03 	vldr	s13, [r7, #12]
 8002606:	7ffa      	ldrb	r2, [r7, #31]
 8002608:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800260c:	4812      	ldr	r0, [pc, #72]	@ (8002658 <calcRPM_PID+0x244>)
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	440b      	add	r3, r1
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4403      	add	r3, r0
 800261e:	330c      	adds	r3, #12
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002636:	ee17 3a90 	vmov	r3, s15
 800263a:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	6a39      	ldr	r1, [r7, #32]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f80b 	bl	800265c <applyCtrlLimit>
 8002646:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8002648:	6a3b      	ldr	r3, [r7, #32]
}
 800264a:	4618      	mov	r0, r3
 800264c:	372c      	adds	r7, #44	@ 0x2c
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000198 	.word	0x20000198
 8002658:	20000248 	.word	0x20000248

0800265c <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d009      	beq.n	8002682 <applyCtrlLimit+0x26>
 800266e:	2b04      	cmp	r3, #4
 8002670:	dc29      	bgt.n	80026c6 <applyCtrlLimit+0x6a>
 8002672:	2b02      	cmp	r3, #2
 8002674:	dc02      	bgt.n	800267c <applyCtrlLimit+0x20>
 8002676:	2b00      	cmp	r3, #0
 8002678:	dc03      	bgt.n	8002682 <applyCtrlLimit+0x26>
 800267a:	e024      	b.n	80026c6 <applyCtrlLimit+0x6a>
 800267c:	2b03      	cmp	r3, #3
 800267e:	d00f      	beq.n	80026a0 <applyCtrlLimit+0x44>
 8002680:	e021      	b.n	80026c6 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002688:	dd03      	ble.n	8002692 <applyCtrlLimit+0x36>
				val = 16384;
 800268a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800268e:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8002690:	e016      	b.n	80026c0 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8002698:	da12      	bge.n	80026c0 <applyCtrlLimit+0x64>
				val = -16384;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <applyCtrlLimit+0x78>)
 800269c:	603b      	str	r3, [r7, #0]
			break;
 800269e:	e00f      	b.n	80026c0 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80026a6:	4293      	cmp	r3, r2
 80026a8:	dd03      	ble.n	80026b2 <applyCtrlLimit+0x56>
				val = 25000;
 80026aa:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80026ae:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 80026b0:	e008      	b.n	80026c4 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <applyCtrlLimit+0x7c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	da04      	bge.n	80026c4 <applyCtrlLimit+0x68>
				val = -25000;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <applyCtrlLimit+0x7c>)
 80026bc:	603b      	str	r3, [r7, #0]
			break;
 80026be:	e001      	b.n	80026c4 <applyCtrlLimit+0x68>
			break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <applyCtrlLimit+0x6a>
			break;
 80026c4:	bf00      	nop
		}
	}
	return val;
 80026c6:	683b      	ldr	r3, [r7, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	ffffc000 	.word	0xffffc000
 80026d8:	ffff9e58 	.word	0xffff9e58

080026dc <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
 80026e6:	460b      	mov	r3, r1
 80026e8:	71bb      	strb	r3, [r7, #6]
 80026ea:	4613      	mov	r3, r2
 80026ec:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	dc02      	bgt.n	80026fa <getRotorPosition+0x1e>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dc04      	bgt.n	8002702 <getRotorPosition+0x26>
 80026f8:	e034      	b.n	8002764 <getRotorPosition+0x88>
 80026fa:	3b03      	subs	r3, #3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d831      	bhi.n	8002764 <getRotorPosition+0x88>
 8002700:	e016      	b.n	8002730 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002702:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002706:	2b00      	cmp	r3, #0
 8002708:	dd29      	ble.n	800275e <getRotorPosition+0x82>
 800270a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800270e:	2b08      	cmp	r3, #8
 8002710:	dc25      	bgt.n	800275e <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800271a:	1e59      	subs	r1, r3, #1
 800271c:	4815      	ldr	r0, [pc, #84]	@ (8002774 <getRotorPosition+0x98>)
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	440b      	add	r3, r1
 800272a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800272e:	e01b      	b.n	8002768 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002730:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002734:	2b00      	cmp	r3, #0
 8002736:	dd14      	ble.n	8002762 <getRotorPosition+0x86>
 8002738:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800273c:	2b07      	cmp	r3, #7
 800273e:	dc10      	bgt.n	8002762 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	1e5a      	subs	r2, r3, #1
 8002744:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002748:	1cd9      	adds	r1, r3, #3
 800274a:	480a      	ldr	r0, [pc, #40]	@ (8002774 <getRotorPosition+0x98>)
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	440b      	add	r3, r1
 8002758:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800275c:	e004      	b.n	8002768 <getRotorPosition+0x8c>
			break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <getRotorPosition+0x88>
			}
			break;
 8002762:	bf00      	nop
		}
	}
	return -1;
 8002764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000198 	.word	0x20000198

08002778 <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80027a6:	463b      	mov	r3, r7
 80027a8:	4619      	mov	r1, r3
 80027aa:	480f      	ldr	r0, [pc, #60]	@ (80027e8 <CAN_Init+0x70>)
 80027ac:	f004 fa0a 	bl	8006bc4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80027b0:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <CAN_Init+0x70>)
 80027b2:	f004 fae5 	bl	8006d80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80027b6:	2102      	movs	r1, #2
 80027b8:	480b      	ldr	r0, [pc, #44]	@ (80027e8 <CAN_Init+0x70>)
 80027ba:	f004 fd17 	bl	80071ec <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 80027be:	230d      	movs	r3, #13
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 80027c2:	230d      	movs	r3, #13
 80027c4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80027c6:	463b      	mov	r3, r7
 80027c8:	4619      	mov	r1, r3
 80027ca:	4808      	ldr	r0, [pc, #32]	@ (80027ec <CAN_Init+0x74>)
 80027cc:	f004 f9fa 	bl	8006bc4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80027d0:	4806      	ldr	r0, [pc, #24]	@ (80027ec <CAN_Init+0x74>)
 80027d2:	f004 fad5 	bl	8006d80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80027d6:	2102      	movs	r1, #2
 80027d8:	4804      	ldr	r0, [pc, #16]	@ (80027ec <CAN_Init+0x74>)
 80027da:	f004 fd07 	bl	80071ec <HAL_CAN_ActivateNotification>
}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	@ 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000a00 	.word	0x20000a00
 80027ec:	20000a28 	.word	0x20000a28

080027f0 <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 80027f8:	2212      	movs	r2, #18
 80027fa:	4914      	ldr	r1, [pc, #80]	@ (800284c <DBUS_Rx_Init+0x5c>)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f007 fdc0 	bl	800a382 <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 8002802:	4a13      	ldr	r2, [pc, #76]	@ (8002850 <DBUS_Rx_Init+0x60>)
 8002804:	8813      	ldrh	r3, [r2, #0]
 8002806:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800280a:	f361 030a 	bfi	r3, r1, #0, #11
 800280e:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 8002810:	4a0f      	ldr	r2, [pc, #60]	@ (8002850 <DBUS_Rx_Init+0x60>)
 8002812:	8853      	ldrh	r3, [r2, #2]
 8002814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002818:	f361 030a 	bfi	r3, r1, #0, #11
 800281c:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 800281e:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <DBUS_Rx_Init+0x60>)
 8002820:	8893      	ldrh	r3, [r2, #4]
 8002822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002826:	f361 030a 	bfi	r3, r1, #0, #11
 800282a:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 800282c:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <DBUS_Rx_Init+0x60>)
 800282e:	88d3      	ldrh	r3, [r2, #6]
 8002830:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002834:	f361 030a 	bfi	r3, r1, #0, #11
 8002838:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 800283a:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <DBUS_Rx_Init+0x60>)
 800283c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002840:	825a      	strh	r2, [r3, #18]
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200003bc 	.word	0x200003bc
 8002850:	200003a8 	.word	0x200003a8

08002854 <DBUS_Update>:


void DBUS_Update(){
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 8002858:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <DBUS_Update+0x16c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b21a      	sxth	r2, r3
 800285e:	4b58      	ldr	r3, [pc, #352]	@ (80029c0 <DBUS_Update+0x16c>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	b21b      	sxth	r3, r3
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21b      	sxth	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b21b      	sxth	r3, r3
 800286c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002870:	b299      	uxth	r1, r3
 8002872:	4a54      	ldr	r2, [pc, #336]	@ (80029c4 <DBUS_Update+0x170>)
 8002874:	8813      	ldrh	r3, [r2, #0]
 8002876:	f361 030a 	bfi	r3, r1, #0, #11
 800287a:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 800287c:	4b50      	ldr	r3, [pc, #320]	@ (80029c0 <DBUS_Update+0x16c>)
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	b21a      	sxth	r2, r3
 8002886:	4b4e      	ldr	r3, [pc, #312]	@ (80029c0 <DBUS_Update+0x16c>)
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	b21b      	sxth	r3, r3
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	b21b      	sxth	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b21b      	sxth	r3, r3
 8002894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002898:	b299      	uxth	r1, r3
 800289a:	4a4a      	ldr	r2, [pc, #296]	@ (80029c4 <DBUS_Update+0x170>)
 800289c:	8853      	ldrh	r3, [r2, #2]
 800289e:	f361 030a 	bfi	r3, r1, #0, #11
 80028a2:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 80028a4:	4b46      	ldr	r3, [pc, #280]	@ (80029c0 <DBUS_Update+0x16c>)
 80028a6:	789b      	ldrb	r3, [r3, #2]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	4b44      	ldr	r3, [pc, #272]	@ (80029c0 <DBUS_Update+0x16c>)
 80028b0:	78db      	ldrb	r3, [r3, #3]
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <DBUS_Update+0x16c>)
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ce:	b299      	uxth	r1, r3
 80028d0:	4a3c      	ldr	r2, [pc, #240]	@ (80029c4 <DBUS_Update+0x170>)
 80028d2:	8893      	ldrh	r3, [r2, #4]
 80028d4:	f361 030a 	bfi	r3, r1, #0, #11
 80028d8:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 80028da:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <DBUS_Update+0x16c>)
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <DBUS_Update+0x16c>)
 80028e6:	795b      	ldrb	r3, [r3, #5]
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f6:	b299      	uxth	r1, r3
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <DBUS_Update+0x170>)
 80028fa:	88d3      	ldrh	r3, [r2, #6]
 80028fc:	f361 030a 	bfi	r3, r1, #0, #11
 8002900:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <DBUS_Update+0x16c>)
 8002904:	795b      	ldrb	r3, [r3, #5]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	b2d9      	uxtb	r1, r3
 8002910:	4a2c      	ldr	r2, [pc, #176]	@ (80029c4 <DBUS_Update+0x170>)
 8002912:	79d3      	ldrb	r3, [r2, #7]
 8002914:	f361 03c4 	bfi	r3, r1, #3, #2
 8002918:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <DBUS_Update+0x16c>)
 800291c:	795b      	ldrb	r3, [r3, #5]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	b2db      	uxtb	r3, r3
 8002922:	109b      	asrs	r3, r3, #2
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	b2d9      	uxtb	r1, r3
 800292a:	4a26      	ldr	r2, [pc, #152]	@ (80029c4 <DBUS_Update+0x170>)
 800292c:	79d3      	ldrb	r3, [r2, #7]
 800292e:	f361 1346 	bfi	r3, r1, #5, #2
 8002932:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <DBUS_Update+0x16c>)
 8002936:	799b      	ldrb	r3, [r3, #6]
 8002938:	b21a      	sxth	r2, r3
 800293a:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <DBUS_Update+0x16c>)
 800293c:	79db      	ldrb	r3, [r3, #7]
 800293e:	b21b      	sxth	r3, r3
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b21b      	sxth	r3, r3
 8002944:	4313      	orrs	r3, r2
 8002946:	b21a      	sxth	r2, r3
 8002948:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <DBUS_Update+0x170>)
 800294a:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <DBUS_Update+0x16c>)
 800294e:	7a1b      	ldrb	r3, [r3, #8]
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <DBUS_Update+0x16c>)
 8002954:	7a5b      	ldrb	r3, [r3, #9]
 8002956:	b21b      	sxth	r3, r3
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b21a      	sxth	r2, r3
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <DBUS_Update+0x170>)
 8002962:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <DBUS_Update+0x16c>)
 8002966:	7a9b      	ldrb	r3, [r3, #10]
 8002968:	b21a      	sxth	r2, r3
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <DBUS_Update+0x16c>)
 800296c:	7adb      	ldrb	r3, [r3, #11]
 800296e:	b21b      	sxth	r3, r3
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21a      	sxth	r2, r3
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <DBUS_Update+0x170>)
 800297a:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <DBUS_Update+0x16c>)
 800297e:	7b1a      	ldrb	r2, [r3, #12]
 8002980:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <DBUS_Update+0x170>)
 8002982:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <DBUS_Update+0x16c>)
 8002986:	7b5a      	ldrb	r2, [r3, #13]
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <DBUS_Update+0x170>)
 800298a:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <DBUS_Update+0x16c>)
 800298e:	7b9a      	ldrb	r2, [r3, #14]
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <DBUS_Update+0x170>)
 8002992:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 8002994:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <DBUS_Update+0x16c>)
 8002996:	7bda      	ldrb	r2, [r3, #15]
 8002998:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <DBUS_Update+0x170>)
 800299a:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <DBUS_Update+0x16c>)
 800299e:	7c1b      	ldrb	r3, [r3, #16]
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <DBUS_Update+0x16c>)
 80029a4:	7c5b      	ldrb	r3, [r3, #17]
 80029a6:	b21b      	sxth	r3, r3
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <DBUS_Update+0x170>)
 80029b4:	825a      	strh	r2, [r3, #18]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	200003bc 	.word	0x200003bc
 80029c4:	200003a8 	.word	0x200003a8

080029c8 <getDR16_CH0>:

int16_t getDR16_CH0(){
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <getDR16_CH0+0x34>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 80029da:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <getDR16_CH0+0x34>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	e000      	b.n	80029f0 <getDR16_CH0+0x28>
	}
	else{
		return 0;
 80029ee:	2300      	movs	r3, #0
	}
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	200003a8 	.word	0x200003a8

08002a00 <getDR16_CH1>:

int16_t getDR16_CH1(){
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <getDR16_CH1+0x34>)
 8002a06:	885b      	ldrh	r3, [r3, #2]
 8002a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <getDR16_CH1+0x34>)
 8002a14:	885b      	ldrh	r3, [r3, #2]
 8002a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	e000      	b.n	8002a28 <getDR16_CH1+0x28>
	}
	else{
		return 0;
 8002a26:	2300      	movs	r3, #0
	}
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200003a8 	.word	0x200003a8

08002a38 <getDR16_CH2>:

int16_t getDR16_CH2(){
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <getDR16_CH2+0x34>)
 8002a3e:	889b      	ldrh	r3, [r3, #4]
 8002a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <getDR16_CH2+0x34>)
 8002a4c:	889b      	ldrh	r3, [r3, #4]
 8002a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	e000      	b.n	8002a60 <getDR16_CH2+0x28>
	}
	else{
		return 0;
 8002a5e:	2300      	movs	r3, #0
	}
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	200003a8 	.word	0x200003a8

08002a70 <getDR16_CH3>:

int16_t getDR16_CH3(){
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <getDR16_CH3+0x34>)
 8002a76:	88db      	ldrh	r3, [r3, #6]
 8002a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 8002a82:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <getDR16_CH3+0x34>)
 8002a84:	88db      	ldrh	r3, [r3, #6]
 8002a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	e000      	b.n	8002a98 <getDR16_CH3+0x28>
	}
	else{
		return 0;
 8002a96:	2300      	movs	r3, #0
	}
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200003a8 	.word	0x200003a8

08002aa8 <getDR16_S2>:

uint8_t getDR16_S1(){
	return DR16_DBUS.S1;
}

uint8_t getDR16_S2(){
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <getDR16_S2+0x18>)
 8002aae:	79db      	ldrb	r3, [r3, #7]
 8002ab0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	200003a8 	.word	0x200003a8

08002ac4 <getDR16_W>:
	else{
		return 0;
	}
}

uint8_t getDR16_W(){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <getDR16_W+0x18>)
 8002aca:	7c1b      	ldrb	r3, [r3, #16]
 8002acc:	2201      	movs	r2, #1
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f847 	bl	8002b64 <DBUS_getBits>
 8002ad6:	4603      	mov	r3, r0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200003a8 	.word	0x200003a8

08002ae0 <getDR16_S>:

uint8_t getDR16_S(){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <getDR16_S+0x18>)
 8002ae6:	7c1b      	ldrb	r3, [r3, #16]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f839 	bl	8002b64 <DBUS_getBits>
 8002af2:	4603      	mov	r3, r0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200003a8 	.word	0x200003a8

08002afc <getDR16_A>:

uint8_t getDR16_A(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <getDR16_A+0x18>)
 8002b02:	7c1b      	ldrb	r3, [r3, #16]
 8002b04:	2201      	movs	r2, #1
 8002b06:	2102      	movs	r1, #2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f82b 	bl	8002b64 <DBUS_getBits>
 8002b0e:	4603      	mov	r3, r0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200003a8 	.word	0x200003a8

08002b18 <getDR16_D>:

uint8_t getDR16_D(){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <getDR16_D+0x18>)
 8002b1e:	7c1b      	ldrb	r3, [r3, #16]
 8002b20:	2201      	movs	r2, #1
 8002b22:	2103      	movs	r1, #3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f81d 	bl	8002b64 <DBUS_getBits>
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200003a8 	.word	0x200003a8

08002b34 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <getDR16_MouseX+0x14>)
 8002b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	200003a8 	.word	0x200003a8

08002b4c <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 8002b50:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <getDR16_MouseY+0x14>)
 8002b52:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	200003a8 	.word	0x200003a8

08002b64 <DBUS_getBits>:
uint8_t getDR16_MouseR(){
	return DR16_DBUS.MouseR;
}


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	71bb      	strb	r3, [r7, #6]
 8002b72:	4613      	mov	r3, r2
 8002b74:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73bb      	strb	r3, [r7, #14]
 8002b7e:	e013      	b.n	8002ba8 <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	79b9      	ldrb	r1, [r7, #6]
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	440b      	add	r3, r1
 8002b88:	fa42 f303 	asr.w	r3, r2, r3
 8002b8c:	f003 0201 	and.w	r2, r3, #1
 8002b90:	7bbb      	ldrb	r3, [r7, #14]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	b25a      	sxtb	r2, r3
 8002b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8002ba2:	7bbb      	ldrb	r3, [r7, #14]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	73bb      	strb	r3, [r7, #14]
 8002ba8:	7bba      	ldrb	r2, [r7, #14]
 8002baa:	797b      	ldrb	r3, [r7, #5]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3e7      	bcc.n	8002b80 <DBUS_getBits+0x1c>
	}
	return result;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <determiningTrigAngle>:
int8_t noVelocity = 0;
PID_preset_t test = {5.0, 0.0, 0.0};
PID_preset_t test2 = {800.0, 60.0, 80.0};


float determiningTrigAngle (int16_t motorAngle[5]) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da2c      	bge.n	8002c2c <determiningTrigAngle+0x6c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	da26      	bge.n	8002c2c <determiningTrigAngle+0x6c>
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c00:	eeb0 0a66 	vmov.f32	s0, s13
 8002c04:	f00c fa1a 	bl	800f03c <atanf>
 8002c08:	ee10 3a10 	vmov	r3, s0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc9b 	bl	8000548 <__aeabi_f2d>
 8002c12:	a335      	add	r3, pc, #212	@ (adr r3, 8002ce8 <determiningTrigAngle+0x128>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fb36 	bl	8000288 <__aeabi_dsub>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ff22 	bl	8000a6c <__aeabi_d2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	e056      	b.n	8002cda <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db2c      	blt.n	8002c90 <determiningTrigAngle+0xd0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da26      	bge.n	8002c90 <determiningTrigAngle+0xd0>
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3302      	adds	r3, #2
 8002c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c64:	eeb0 0a66 	vmov.f32	s0, s13
 8002c68:	f00c f9e8 	bl	800f03c <atanf>
 8002c6c:	ee10 3a10 	vmov	r3, s0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc69 	bl	8000548 <__aeabi_f2d>
 8002c76:	a31c      	add	r3, pc, #112	@ (adr r3, 8002ce8 <determiningTrigAngle+0x128>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd fb06 	bl	800028c <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd fef0 	bl	8000a6c <__aeabi_d2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	e024      	b.n	8002cda <determiningTrigAngle+0x11a>
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <determiningTrigAngle+0xec>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <determiningTrigAngle+0xec>
		return 0;
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e016      	b.n	8002cda <determiningTrigAngle+0x11a>
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cce:	eeb0 0a66 	vmov.f32	s0, s13
 8002cd2:	f00c f9b3 	bl	800f03c <atanf>
 8002cd6:	ee10 3a10 	vmov	r3, s0
	}
}
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	54442d18 	.word	0x54442d18
 8002cec:	400921fb 	.word	0x400921fb

08002cf0 <wheelRotation>:

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	80fb      	strh	r3, [r7, #6]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80bb      	strh	r3, [r7, #4]
	int8_t newTargetRotationCounter = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
	int16_t ACD = abs(destinationRotation - currentRotation);
 8002d04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfb8      	it	lt
 8002d12:	425b      	neglt	r3, r3
 8002d14:	81bb      	strh	r3, [r7, #12]
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
 8002d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d1a:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8002d1e:	3b1f      	subs	r3, #31
 8002d20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bfb8      	it	lt
 8002d2a:	425b      	neglt	r3, r3
 8002d2c:	817b      	strh	r3, [r7, #10]
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
 8002d2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d32:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8002d36:	331f      	adds	r3, #31
 8002d38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bfb8      	it	lt
 8002d42:	425b      	neglt	r3, r3
 8002d44:	813b      	strh	r3, [r7, #8]
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
 8002d46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	da08      	bge.n	8002d64 <wheelRotation+0x74>
 8002d52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	da02      	bge.n	8002d64 <wheelRotation+0x74>
		newTargetRotationCounter = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e010      	b.n	8002d86 <wheelRotation+0x96>
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
 8002d64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	da08      	bge.n	8002d82 <wheelRotation+0x92>
 8002d70:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	da02      	bge.n	8002d82 <wheelRotation+0x92>
		newTargetRotationCounter = -1;
 8002d7c:	23ff      	movs	r3, #255	@ 0xff
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <wheelRotation+0x96>
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	0352      	lsls	r2, r2, #13
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b21b      	sxth	r3, r3
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <swerveScaler>:

float swerveScaler (int16_t motorInfo[4][5]) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	int16_t largestVal = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	737b      	strb	r3, [r7, #13]
 8002dc0:	e01f      	b.n	8002e02 <swerveScaler+0x52>
		if (motorInfo[i][2] > largestVal) {
 8002dc2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dd8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	da0a      	bge.n	8002df6 <swerveScaler+0x46>
			largestVal = motorInfo[i][2];
 8002de0:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	889b      	ldrh	r3, [r3, #4]
 8002df4:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002df6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	737b      	strb	r3, [r7, #13]
 8002e02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	dddb      	ble.n	8002dc2 <swerveScaler+0x12>
	if (largestVal == 0) {
		usart_printf("ERROR_WITH_SCALER\r\n");
	}
	*/
	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAlloweds) {
 8002e0a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	dc02      	bgt.n	8002e1c <swerveScaler+0x6c>
		return 1;
 8002e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e1a:	e00b      	b.n	8002e34 <swerveScaler+0x84>
	} else {
		return ((float)(maxValAlloweds)/(float)(largestVal));
 8002e1c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002e48 <swerveScaler+0x98>
 8002e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e30:	eec7 6a27 	vdiv.f32	s13, s14, s15
	}
}
 8002e34:	eef0 7a66 	vmov.f32	s15, s13
 8002e38:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	00000320 	.word	0x00000320

08002e4c <PD>:

int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e5a:	edc7 0a00 	vstr	s1, [r7]
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	4613      	mov	r3, r2
 8002e62:	81bb      	strh	r3, [r7, #12]

	return applyCtrlLimit(motorType, (currentDelta*kP + (*previousDelta - currentDelta)*kD));
 8002e64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e8e:	edd7 7a00 	vldr	s15, [r7]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	ee17 1a90 	vmov	r1, s15
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fbd9 	bl	800265c <applyCtrlLimit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b21b      	sxth	r3, r3
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <Loop>:

extern UART_HandleTypeDef huart1;

void Loop(int16_t Axies[3], int16_t GM6020TurretAngle) {
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	ed2d 8b02 	vpush	{d8}
 8002ebe:	b08c      	sub	sp, #48	@ 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]

	float CAngle = (2.0f*M_PI*(float)(614+(-1*GM6020TurretAngle)))/4095;
 8002ec8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ecc:	f5c3 7319 	rsb	r3, r3, #612	@ 0x264
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eda:	ee17 0a90 	vmov	r0, s15
 8002ede:	f7fd fb33 	bl	8000548 <__aeabi_f2d>
 8002ee2:	a3ef      	add	r3, pc, #956	@ (adr r3, 80032a0 <Loop+0x3e8>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fb86 	bl	80005f8 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	a3ec      	add	r3, pc, #944	@ (adr r3, 80032a8 <Loop+0x3f0>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fca7 	bl	800084c <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fdb1 	bl	8000a6c <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	623b      	str	r3, [r7, #32]
	int16_t FB = Axies[0];
	int16_t LR = Axies[1];
	int16_t Rotate = Axies[2];
	*/

	int16_t FB = Axies[0]*cosf(CAngle) - Axies[1]*sinf(CAngle);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002f1c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002f20:	f00c f960 	bl	800f1e4 <cosf>
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
 8002f28:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002f3c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002f40:	f00c f99c 	bl	800f27c <sinf>
 8002f44:	eef0 7a40 	vmov.f32	s15, s0
 8002f48:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002f4c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f54:	ee17 3a90 	vmov	r3, s15
 8002f58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t LR = Axies[0]*sinf(CAngle) + Axies[1]*cosf(CAngle);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002f68:	ed97 0a08 	vldr	s0, [r7, #32]
 8002f6c:	f00c f986 	bl	800f27c <sinf>
 8002f70:	eef0 7a40 	vmov.f32	s15, s0
 8002f74:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002f88:	ed97 0a08 	vldr	s0, [r7, #32]
 8002f8c:	f00c f92a 	bl	800f1e4 <cosf>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002f98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa0:	ee17 3a90 	vmov	r3, s15
 8002fa4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t Rotate = Axies[2];
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	889b      	ldrh	r3, [r3, #4]
 8002faa:	857b      	strh	r3, [r7, #42]	@ 0x2a

	/*
	 * Checks if All joystick Values are 0 to make the wheels maintain last orientation
	 */
	if (FB == 0 && LR == 0 && Rotate == 0) {
 8002fac:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <Loop+0x126>
 8002fb4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d110      	bne.n	8002fde <Loop+0x126>
 8002fbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10c      	bne.n	8002fde <Loop+0x126>
		FB = DP[0];
 8002fc4:	4bb0      	ldr	r3, [pc, #704]	@ (8003288 <Loop+0x3d0>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		LR = DP[1];
 8002fca:	4baf      	ldr	r3, [pc, #700]	@ (8003288 <Loop+0x3d0>)
 8002fcc:	885b      	ldrh	r3, [r3, #2]
 8002fce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		Rotate = DP[2];
 8002fd0:	4bad      	ldr	r3, [pc, #692]	@ (8003288 <Loop+0x3d0>)
 8002fd2:	889b      	ldrh	r3, [r3, #4]
 8002fd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
		noVelocity = 1;
 8002fd6:	4bad      	ldr	r3, [pc, #692]	@ (800328c <Loop+0x3d4>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e002      	b.n	8002fe4 <Loop+0x12c>
	} else {
		noVelocity = 0;
 8002fde:	4bab      	ldr	r3, [pc, #684]	@ (800328c <Loop+0x3d4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
	}
	DP[0] = FB;
 8002fe4:	4aa8      	ldr	r2, [pc, #672]	@ (8003288 <Loop+0x3d0>)
 8002fe6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002fe8:	8013      	strh	r3, [r2, #0]
	DP[1] = LR;
 8002fea:	4aa7      	ldr	r2, [pc, #668]	@ (8003288 <Loop+0x3d0>)
 8002fec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fee:	8053      	strh	r3, [r2, #2]
	DP[2] = Rotate;
 8002ff0:	4aa5      	ldr	r2, [pc, #660]	@ (8003288 <Loop+0x3d0>)
 8002ff2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002ff4:	8093      	strh	r3, [r2, #4]
	/*
	 * Starts by Calculating the motors X and Y Values.
	 * Then it Calculates the ABS value of the motors.
	 * Unless Velocity is 0 in which it'll then just not rotate the Motors and set the ABS value to 0
	 */
	for (int8_t i = 0; i < 4; i++ ) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8002ffc:	e095      	b.n	800312a <Loop+0x272>
		motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
 8002ffe:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8003002:	4aa3      	ldr	r2, [pc, #652]	@ (8003290 <Loop+0x3d8>)
 8003004:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8003008:	b29a      	uxth	r2, r3
 800300a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800300c:	fb12 f303 	smulbb	r3, r2, r3
 8003010:	b29a      	uxth	r2, r3
 8003012:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003014:	4413      	add	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800301c:	b218      	sxth	r0, r3
 800301e:	499d      	ldr	r1, [pc, #628]	@ (8003294 <Loop+0x3dc>)
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	4602      	mov	r2, r0
 800302c:	801a      	strh	r2, [r3, #0]
		motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
 800302e:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8003032:	4a97      	ldr	r2, [pc, #604]	@ (8003290 <Loop+0x3d8>)
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800303c:	b29a      	uxth	r2, r3
 800303e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003040:	fb12 f303 	smulbb	r3, r2, r3
 8003044:	b29a      	uxth	r2, r3
 8003046:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003048:	4413      	add	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8003050:	b218      	sxth	r0, r3
 8003052:	4990      	ldr	r1, [pc, #576]	@ (8003294 <Loop+0x3dc>)
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	3302      	adds	r3, #2
 8003060:	4602      	mov	r2, r0
 8003062:	801a      	strh	r2, [r3, #0]
		if (noVelocity == 0) {
 8003064:	4b89      	ldr	r3, [pc, #548]	@ (800328c <Loop+0x3d4>)
 8003066:	f993 3000 	ldrsb.w	r3, [r3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14b      	bne.n	8003106 <Loop+0x24e>
			motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
 800306e:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8003072:	4988      	ldr	r1, [pc, #544]	@ (8003294 <Loop+0x3dc>)
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	440b      	add	r3, r1
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	4618      	mov	r0, r3
 8003084:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 8003088:	4982      	ldr	r1, [pc, #520]	@ (8003294 <Loop+0x3dc>)
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	440b      	add	r3, r1
 8003094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003098:	fb03 f100 	mul.w	r1, r3, r0
 800309c:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80030a0:	487c      	ldr	r0, [pc, #496]	@ (8003294 <Loop+0x3dc>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4403      	add	r3, r0
 80030ac:	3302      	adds	r3, #2
 80030ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b2:	461c      	mov	r4, r3
 80030b4:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80030b8:	4876      	ldr	r0, [pc, #472]	@ (8003294 <Loop+0x3dc>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4403      	add	r3, r0
 80030c4:	3302      	adds	r3, #2
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	fb04 f303 	mul.w	r3, r4, r3
 80030ce:	440b      	add	r3, r1
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	f00b ff90 	bl	800f000 <sqrtf>
 80030e0:	eef0 7a40 	vmov.f32	s15, s0
 80030e4:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80030e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ec:	ee17 3a90 	vmov	r3, s15
 80030f0:	b218      	sxth	r0, r3
 80030f2:	4968      	ldr	r1, [pc, #416]	@ (8003294 <Loop+0x3dc>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	3304      	adds	r3, #4
 8003100:	4602      	mov	r2, r0
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e00a      	b.n	800311c <Loop+0x264>
		} else {
			motorInfo[i][2] = 0;
 8003106:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800310a:	4962      	ldr	r1, [pc, #392]	@ (8003294 <Loop+0x3dc>)
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	440b      	add	r3, r1
 8003116:	3304      	adds	r3, #4
 8003118:	2200      	movs	r2, #0
 800311a:	801a      	strh	r2, [r3, #0]
	for (int8_t i = 0; i < 4; i++ ) {
 800311c:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3301      	adds	r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800312a:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 800312e:	2b03      	cmp	r3, #3
 8003130:	f77f af65 	ble.w	8002ffe <Loop+0x146>
	}

	/*
	 * Scales ABS values of the Motor Speeds
	 */
	float SScalerVal = swerveScaler(motorInfo);
 8003134:	4857      	ldr	r0, [pc, #348]	@ (8003294 <Loop+0x3dc>)
 8003136:	f7ff fe3b 	bl	8002db0 <swerveScaler>
 800313a:	ed87 0a07 	vstr	s0, [r7, #28]
	 * Secondly it converts it into encoder increments
	 * Next it adds the offsets.
	 *
	 * Finally it makes sure that all values are within the min and max of the encoder
	 */
	for (int8_t j = 0; j < 4; j++) {
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003144:	e086      	b.n	8003254 <Loop+0x39c>
		// Scales Motor Speed Output
		// 800*11.25 = 9000
		motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;
 8003146:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800314a:	4952      	ldr	r1, [pc, #328]	@ (8003294 <Loop+0x3dc>)
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	3304      	adds	r3, #4
 8003158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003164:	edd7 7a07 	vldr	s15, [r7, #28]
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	ee17 0a90 	vmov	r0, s15
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <Loop+0x3e0>)
 800317a:	f7fd fa3d 	bl	80005f8 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	f997 4028 	ldrsb.w	r4, [r7, #40]	@ 0x28
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fd fc47 	bl	8000a1c <__aeabi_d2iz>
 800318e:	4603      	mov	r3, r0
 8003190:	b219      	sxth	r1, r3
 8003192:	4a40      	ldr	r2, [pc, #256]	@ (8003294 <Loop+0x3dc>)
 8003194:	4623      	mov	r3, r4
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4423      	add	r3, r4
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	460a      	mov	r2, r1
 80031a2:	801a      	strh	r2, [r3, #0]

		int16_t trigAng = (int16_t)(4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI));
 80031a4:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <Loop+0x3dc>)
 80031b2:	4413      	add	r3, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fd03 	bl	8002bc0 <determiningTrigAngle>
 80031ba:	ee10 3a10 	vmov	r3, s0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f9c2 	bl	8000548 <__aeabi_f2d>
 80031c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8003278 <Loop+0x3c0>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd fb3f 	bl	800084c <__aeabi_ddiv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	a32a      	add	r3, pc, #168	@ (adr r3, 8003280 <Loop+0x3c8>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd fa0c 	bl	80005f8 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fc18 	bl	8000a1c <__aeabi_d2iz>
 80031ec:	4603      	mov	r3, r0
 80031ee:	837b      	strh	r3, [r7, #26]

		int16_t tempAngle = trigAng+forwardsID[j];
 80031f0:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80031f4:	4a29      	ldr	r2, [pc, #164]	@ (800329c <Loop+0x3e4>)
 80031f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	4413      	add	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	84fb      	strh	r3, [r7, #38]	@ 0x26
		if (tempAngle > 8191) {
 8003204:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800320c:	db06      	blt.n	800321c <Loop+0x364>
			tempAngle = tempAngle-8191;
 800320e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003210:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8003214:	3b1f      	subs	r3, #31
 8003216:	b29b      	uxth	r3, r3
 8003218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800321a:	e009      	b.n	8003230 <Loop+0x378>
		} else if (tempAngle < 0) {
 800321c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003220:	2b00      	cmp	r3, #0
 8003222:	da05      	bge.n	8003230 <Loop+0x378>
			tempAngle = tempAngle+8191;
 8003224:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003226:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800322a:	331f      	adds	r3, #31
 800322c:	b29b      	uxth	r3, r3
 800322e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
		motorInfo[j][3] = tempAngle;
 8003230:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 8003234:	4917      	ldr	r1, [pc, #92]	@ (8003294 <Loop+0x3dc>)
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	440b      	add	r3, r1
 8003240:	3306      	adds	r3, #6
 8003242:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003244:	801a      	strh	r2, [r3, #0]
	for (int8_t j = 0; j < 4; j++) {
 8003246:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 800324a:	b2db      	uxtb	r3, r3
 800324c:	3301      	adds	r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003254:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8003258:	2b03      	cmp	r3, #3
 800325a:	f77f af74 	ble.w	8003146 <Loop+0x28e>
	/*
	 * This function outputs the power to the wheels.
	 * wheelRotation fines the optimal direction to rotate to
	 */

	int16_t allMotors[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]

	for (int8_t l = 0; l < 4; l++) {
 800326c:	2300      	movs	r3, #0
 800326e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003272:	e083      	b.n	800337c <Loop+0x4c4>
 8003274:	f3af 8000 	nop.w
 8003278:	54442d18 	.word	0x54442d18
 800327c:	400921fb 	.word	0x400921fb
 8003280:	00000000 	.word	0x00000000
 8003284:	40afff00 	.word	0x40afff00
 8003288:	20000474 	.word	0x20000474
 800328c:	2000047a 	.word	0x2000047a
 8003290:	2000002c 	.word	0x2000002c
 8003294:	2000044c 	.word	0x2000044c
 8003298:	40268000 	.word	0x40268000
 800329c:	20000034 	.word	0x20000034
 80032a0:	54442d18 	.word	0x54442d18
 80032a4:	401921fb 	.word	0x401921fb
 80032a8:	00000000 	.word	0x00000000
 80032ac:	40affe00 	.word	0x40affe00
		allMotors[l] = PD(GM6020, &wheelPrev[l], wheelRotation (getRotorPosition(Bus1, GM6020, l+1), motorInfo[l][3]), 100, 75);
 80032b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4a39      	ldr	r2, [pc, #228]	@ (800339c <Loop+0x4e4>)
 80032b8:	189d      	adds	r5, r3, r2
 80032ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032be:	3301      	adds	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	2103      	movs	r1, #3
 80032c8:	2001      	movs	r0, #1
 80032ca:	f7ff fa07 	bl	80026dc <getRotorPosition>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b218      	sxth	r0, r3
 80032d2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80032d6:	4932      	ldr	r1, [pc, #200]	@ (80033a0 <Loop+0x4e8>)
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	440b      	add	r3, r1
 80032e2:	3306      	adds	r3, #6
 80032e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f7ff fd01 	bl	8002cf0 <wheelRotation>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f997 4025 	ldrsb.w	r4, [r7, #37]	@ 0x25
 80032f4:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80033a4 <Loop+0x4ec>
 80032f8:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80033a8 <Loop+0x4f0>
 80032fc:	461a      	mov	r2, r3
 80032fe:	4629      	mov	r1, r5
 8003300:	2003      	movs	r0, #3
 8003302:	f7ff fda3 	bl	8002e4c <PD>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	0063      	lsls	r3, r4, #1
 800330c:	3330      	adds	r3, #48	@ 0x30
 800330e:	443b      	add	r3, r7
 8003310:	f823 2c28 	strh.w	r2, [r3, #-40]
		allMotors[l+4] = calcRPM_PID(Bus1, M3508, l+1, motorInfo[l][2], test);
 8003314:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003318:	3301      	adds	r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	b259      	sxtb	r1, r3
 800331e:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8003322:	481f      	ldr	r0, [pc, #124]	@ (80033a0 <Loop+0x4e8>)
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4403      	add	r3, r0
 800332e:	3304      	adds	r3, #4
 8003330:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <Loop+0x4f4>)
 8003336:	edd3 6a00 	vldr	s13, [r3]
 800333a:	ed93 7a01 	vldr	s14, [r3, #4]
 800333e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003342:	eeb0 0a66 	vmov.f32	s0, s13
 8003346:	eef0 0a47 	vmov.f32	s1, s14
 800334a:	eeb0 1a67 	vmov.f32	s2, s15
 800334e:	4613      	mov	r3, r2
 8003350:	460a      	mov	r2, r1
 8003352:	2101      	movs	r1, #1
 8003354:	2001      	movs	r0, #1
 8003356:	f7ff f85d 	bl	8002414 <calcRPM_PID>
 800335a:	4602      	mov	r2, r0
 800335c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003360:	3304      	adds	r3, #4
 8003362:	b212      	sxth	r2, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	3330      	adds	r3, #48	@ 0x30
 8003368:	443b      	add	r3, r7
 800336a:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int8_t l = 0; l < 4; l++) {
 800336e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800337c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003380:	2b03      	cmp	r3, #3
 8003382:	dd95      	ble.n	80032b0 <Loop+0x3f8>
	}

	AllCheShit2(allMotors);
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fa01 	bl	8003790 <AllCheShit2>
		} else {
			setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
		}
	}
	*/
}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	@ 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	ecbd 8b02 	vpop	{d8}
 8003398:	bdb0      	pop	{r4, r5, r7, pc}
 800339a:	bf00      	nop
 800339c:	2000043c 	.word	0x2000043c
 80033a0:	2000044c 	.word	0x2000044c
 80033a4:	42960000 	.word	0x42960000
 80033a8:	42c80000 	.word	0x42c80000
 80033ac:	2000003c 	.word	0x2000003c

080033b0 <AllBufferCalculations>:
		checkingValue = 1;
	}
	return (1-checkingValue);
}

void AllBufferCalculations(uint16_t bufferValFromPMM, uint8_t shift, int16_t WASDQE[3]) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	603a      	str	r2, [r7, #0]
 80033ba:	80fb      	strh	r3, [r7, #6]
 80033bc:	460b      	mov	r3, r1
 80033be:	717b      	strb	r3, [r7, #5]
	 * This is for the 3508s, and it's from the Mechanum Buffer
	 * The old library had a shift keybind for a boost mode? i decided to ignore it for now but ive kept a uint8_t var for the shift key
	 * This shift key will only apply to the M3508s for now, i may decide to apply it to the GM6020s later
	 */

	uint8_t shiftBoost = (shift+1)*2;
 80033c0:	797b      	ldrb	r3, [r7, #5]
 80033c2:	3301      	adds	r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
			maxPowerLimitM3508 = 0.00001;
		}
	}
	*/

	if (bufferValFromPMM > 50) {
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b32      	cmp	r3, #50	@ 0x32
 80033ce:	d903      	bls.n	80033d8 <AllBufferCalculations+0x28>
		maxPowerLimitM3508 = 8192;
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <AllBufferCalculations+0x138>)
 80033d2:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80033d6:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d91d      	bls.n	800341a <AllBufferCalculations+0x6a>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b32      	cmp	r3, #50	@ 0x32
 80033e2:	d81a      	bhi.n	800341a <AllBufferCalculations+0x6a>
		maxPowerLimitM3508 = (179.8*bufferValFromPMM) - 798.0f;
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f89c 	bl	8000524 <__aeabi_i2d>
 80033ec:	a338      	add	r3, pc, #224	@ (adr r3, 80034d0 <AllBufferCalculations+0x120>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f7fd f901 	bl	80005f8 <__aeabi_dmul>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <AllBufferCalculations+0x13c>)
 8003404:	f7fc ff40 	bl	8000288 <__aeabi_dsub>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	f7fd fb2c 	bl	8000a6c <__aeabi_d2f>
 8003414:	4603      	mov	r3, r0
 8003416:	4a34      	ldr	r2, [pc, #208]	@ (80034e8 <AllBufferCalculations+0x138>)
 8003418:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d802      	bhi.n	8003426 <AllBufferCalculations+0x76>
		maxPowerLimitM3508 = 0.00001;
 8003420:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <AllBufferCalculations+0x138>)
 8003422:	4a33      	ldr	r2, [pc, #204]	@ (80034f0 <AllBufferCalculations+0x140>)
 8003424:	601a      	str	r2, [r3, #0]
	}

	if (bufferValFromPMM > 30) {
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b1e      	cmp	r3, #30
 800342a:	d903      	bls.n	8003434 <AllBufferCalculations+0x84>
		maxPowerLimitGM6020 = 8192;
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <AllBufferCalculations+0x144>)
 800342e:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003432:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 30) {
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d91d      	bls.n	8003476 <AllBufferCalculations+0xc6>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b1e      	cmp	r3, #30
 800343e:	d81a      	bhi.n	8003476 <AllBufferCalculations+0xc6>
		maxPowerLimitGM6020 = (327.6*bufferValFromPMM) - 1638.4f;
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f86e 	bl	8000524 <__aeabi_i2d>
 8003448:	a323      	add	r3, pc, #140	@ (adr r3, 80034d8 <AllBufferCalculations+0x128>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f8d3 	bl	80005f8 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	a321      	add	r3, pc, #132	@ (adr r3, 80034e0 <AllBufferCalculations+0x130>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fc ff12 	bl	8000288 <__aeabi_dsub>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fafe 	bl	8000a6c <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	4a20      	ldr	r2, [pc, #128]	@ (80034f4 <AllBufferCalculations+0x144>)
 8003474:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d802      	bhi.n	8003482 <AllBufferCalculations+0xd2>
		maxPowerLimitGM6020 = 0.00001;
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <AllBufferCalculations+0x144>)
 800347e:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <AllBufferCalculations+0x140>)
 8003480:	601a      	str	r2, [r3, #0]
	}


	maxPowerLimitM3508 = maxPowerLimitM3508 * shiftBoost * M3508SCALER;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800348c:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <AllBufferCalculations+0x138>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003496:	2301      	movs	r3, #1
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <AllBufferCalculations+0x138>)
 80034a6:	edc3 7a00 	vstr	s15, [r3]
	maxPowerLimitGM6020 = maxPowerLimitGM6020 * 2 * GM6020SCALER;
 80034aa:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <AllBufferCalculations+0x144>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034b4:	2308      	movs	r3, #8
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <AllBufferCalculations+0x144>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]

}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	9999999a 	.word	0x9999999a
 80034d4:	40667999 	.word	0x40667999
 80034d8:	9999999a 	.word	0x9999999a
 80034dc:	40747999 	.word	0x40747999
 80034e0:	a0000000 	.word	0xa0000000
 80034e4:	40999999 	.word	0x40999999
 80034e8:	2000048c 	.word	0x2000048c
 80034ec:	4088f000 	.word	0x4088f000
 80034f0:	3727c5ac 	.word	0x3727c5ac
 80034f4:	20000490 	.word	0x20000490

080034f8 <M3508MaxBufferCurve>:

void M3508MaxBufferCurve (int16_t allMotors[8]) {
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	uint32_t sum2 = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 4; i < 8; i++) {
 8003504:	2304      	movs	r3, #4
 8003506:	72fb      	strb	r3, [r7, #11]
 8003508:	e01f      	b.n	800354a <M3508MaxBufferCurve+0x52>
		if (allMotors[i] > 0) {
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003516:	2b00      	cmp	r3, #0
 8003518:	dd0a      	ble.n	8003530 <M3508MaxBufferCurve+0x38>
			sum2 += allMotors[i];
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e009      	b.n	8003544 <M3508MaxBufferCurve+0x4c>
		} else {
			sum2 -= allMotors[i];
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800353c:	461a      	mov	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 4; i < 8; i++) {
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	3301      	adds	r3, #1
 8003548:	72fb      	strb	r3, [r7, #11]
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	2b07      	cmp	r3, #7
 800354e:	d9dc      	bls.n	800350a <M3508MaxBufferCurve+0x12>
		}
	}
	M3508PowerScaler = maxPowerLimitM3508/sum2;
 8003550:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <M3508MaxBufferCurve+0xb8>)
 8003552:	edd3 6a00 	vldr	s13, [r3]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <M3508MaxBufferCurve+0xbc>)
 8003566:	edc3 7a00 	vstr	s15, [r3]

	if (M3508PowerScaler > 1) {
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <M3508MaxBufferCurve+0xbc>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd04      	ble.n	8003588 <M3508MaxBufferCurve+0x90>
		M3508PowerScaler = 1;
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <M3508MaxBufferCurve+0xbc>)
 8003580:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003584:	601a      	str	r2, [r3, #0]
	} else if (M3508PowerScaler < 0) {
		M3508PowerScaler = 0;
	}
}
 8003586:	e00c      	b.n	80035a2 <M3508MaxBufferCurve+0xaa>
	} else if (M3508PowerScaler < 0) {
 8003588:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <M3508MaxBufferCurve+0xbc>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	d400      	bmi.n	800359a <M3508MaxBufferCurve+0xa2>
}
 8003598:	e003      	b.n	80035a2 <M3508MaxBufferCurve+0xaa>
		M3508PowerScaler = 0;
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <M3508MaxBufferCurve+0xbc>)
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000048c 	.word	0x2000048c
 80035b4:	20000494 	.word	0x20000494

080035b8 <GM6020MaxBufferCurve>:

void GM6020MaxBufferCurve (int16_t allMotors[8]) {
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	uint32_t sum1 = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 4; i++) {
 80035c4:	2300      	movs	r3, #0
 80035c6:	72fb      	strb	r3, [r7, #11]
 80035c8:	e01f      	b.n	800360a <GM6020MaxBufferCurve+0x52>
		if (allMotors[i] > 0) {
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dd0a      	ble.n	80035f0 <GM6020MaxBufferCurve+0x38>
			sum1 += allMotors[i];
 80035da:	7afb      	ldrb	r3, [r7, #11]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e009      	b.n	8003604 <GM6020MaxBufferCurve+0x4c>
		} else {
			sum1 -= allMotors[i];
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 4; i++) {
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	3301      	adds	r3, #1
 8003608:	72fb      	strb	r3, [r7, #11]
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d9dc      	bls.n	80035ca <GM6020MaxBufferCurve+0x12>
		}
	}
	GM6020PowerScaler = maxPowerLimitGM6020/sum1;
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <GM6020MaxBufferCurve+0xb8>)
 8003612:	edd3 6a00 	vldr	s13, [r3]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <GM6020MaxBufferCurve+0xbc>)
 8003626:	edc3 7a00 	vstr	s15, [r3]

	if (GM6020PowerScaler > 1) {
 800362a:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <GM6020MaxBufferCurve+0xbc>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363c:	dd04      	ble.n	8003648 <GM6020MaxBufferCurve+0x90>
		GM6020PowerScaler = 1;
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <GM6020MaxBufferCurve+0xbc>)
 8003640:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003644:	601a      	str	r2, [r3, #0]
	} else if (GM6020PowerScaler < 0) {
		GM6020PowerScaler = 0;
	}
}
 8003646:	e00c      	b.n	8003662 <GM6020MaxBufferCurve+0xaa>
	} else if (GM6020PowerScaler < 0) {
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <GM6020MaxBufferCurve+0xbc>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	d400      	bmi.n	800365a <GM6020MaxBufferCurve+0xa2>
}
 8003658:	e003      	b.n	8003662 <GM6020MaxBufferCurve+0xaa>
		GM6020PowerScaler = 0;
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <GM6020MaxBufferCurve+0xbc>)
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000490 	.word	0x20000490
 8003674:	20000498 	.word	0x20000498

08003678 <DriveAllMotors>:

void DriveAllMotors() {
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 800367e:	2300      	movs	r3, #0
 8003680:	71fb      	strb	r3, [r7, #7]
 8003682:	e01b      	b.n	80036bc <DriveAllMotors+0x44>
		CAN_setMotorCtrlVal(Bus1, GM6020, i+1, M3508AndGM6020Scaled[i]);
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	3301      	adds	r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	b25a      	sxtb	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	490f      	ldr	r1, [pc, #60]	@ (80036cc <DriveAllMotors+0x54>)
 8003690:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003694:	2103      	movs	r1, #3
 8003696:	2001      	movs	r0, #1
 8003698:	f7fe fcbe 	bl	8002018 <CAN_setMotorCtrlVal>
		CAN_setMotorCtrlVal(Bus1, M3508, i+1, M3508AndGM6020Scaled[i+4]);
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	b25a      	sxtb	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4908      	ldr	r1, [pc, #32]	@ (80036cc <DriveAllMotors+0x54>)
 80036aa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80036ae:	2101      	movs	r1, #1
 80036b0:	2001      	movs	r0, #1
 80036b2:	f7fe fcb1 	bl	8002018 <CAN_setMotorCtrlVal>
	for (uint8_t i = 0; i < 4; i++) {
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	3301      	adds	r3, #1
 80036ba:	71fb      	strb	r3, [r7, #7]
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d9e0      	bls.n	8003684 <DriveAllMotors+0xc>
	}
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	2000047c 	.word	0x2000047c

080036d0 <M3508Scaling>:

void M3508Scaling (int16_t allMotors[8]) {
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 4; i < 8; i++) {
 80036d8:	2304      	movs	r3, #4
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e01a      	b.n	8003714 <M3508Scaling+0x44>
		M3508AndGM6020Scaled[i] = allMotors[i]*M3508PowerScaler;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <M3508Scaling+0x58>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	ee17 2a90 	vmov	r2, s15
 8003706:	b211      	sxth	r1, r2
 8003708:	4a08      	ldr	r2, [pc, #32]	@ (800372c <M3508Scaling+0x5c>)
 800370a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 4; i < 8; i++) {
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	3301      	adds	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b07      	cmp	r3, #7
 8003718:	d9e1      	bls.n	80036de <M3508Scaling+0xe>
	}
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000494 	.word	0x20000494
 800372c:	2000047c 	.word	0x2000047c

08003730 <GM6020Scaling>:

void GM6020Scaling (int16_t allMotors[8]) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e01a      	b.n	8003774 <GM6020Scaling+0x44>
		M3508AndGM6020Scaled[i] = allMotors[i]*GM6020PowerScaler;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003752:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <GM6020Scaling+0x58>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003762:	ee17 2a90 	vmov	r2, s15
 8003766:	b211      	sxth	r1, r2
 8003768:	4a08      	ldr	r2, [pc, #32]	@ (800378c <GM6020Scaling+0x5c>)
 800376a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 4; i++) {
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	3301      	adds	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d9e1      	bls.n	800373e <GM6020Scaling+0xe>
	}
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20000498 	.word	0x20000498
 800378c:	2000047c 	.word	0x2000047c

08003790 <AllCheShit2>:

void AllCheShit2 (int16_t allMotors[8]) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	M3508MaxBufferCurve(allMotors);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fead 	bl	80034f8 <M3508MaxBufferCurve>
	GM6020MaxBufferCurve(allMotors);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff0a 	bl	80035b8 <GM6020MaxBufferCurve>
	M3508Scaling(allMotors);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff93 	bl	80036d0 <M3508Scaling>
	GM6020Scaling(allMotors);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ffc0 	bl	8003730 <GM6020Scaling>
	DriveAllMotors();
 80037b0:	f7ff ff62 	bl	8003678 <DriveAllMotors>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 80037d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037d4:	e017      	b.n	8003806 <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	60fa      	str	r2, [r7, #12]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	88f9      	ldrh	r1, [r7, #6]
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	404b      	eors	r3, r1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4909      	ldr	r1, [pc, #36]	@ (8003814 <Get_CRC16_Check_Sum+0x58>)
 80037f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037f4:	4053      	eors	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e8      	bne.n	80037d6 <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 8003804:	88fb      	ldrh	r3, [r7, #6]
}
 8003806:	4618      	mov	r0, r3
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	0800fd44 	.word	0x0800fd44

08003818 <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 8003818:	b40e      	push	{r1, r2, r3}
 800381a:	b580      	push	{r7, lr}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <UART_Printf+0x44>)
 8003828:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <UART_Printf+0x44>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	480b      	ldr	r0, [pc, #44]	@ (8003860 <UART_Printf+0x48>)
 8003832:	f00a feff 	bl	800e634 <vsiprintf>
 8003836:	4603      	mov	r3, r0
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <UART_Printf+0x4c>)
 800383c:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <UART_Printf+0x4c>)
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	2364      	movs	r3, #100	@ 0x64
 8003844:	4906      	ldr	r1, [pc, #24]	@ (8003860 <UART_Printf+0x48>)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f006 fd10 	bl	800a26c <HAL_UART_Transmit>
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003856:	b003      	add	sp, #12
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	200008a4 	.word	0x200008a4
 8003860:	200008a8 	.word	0x200008a8
 8003864:	200009a8 	.word	0x200009a8

08003868 <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8003870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003874:	4903      	ldr	r1, [pc, #12]	@ (8003884 <UART_Ex_Init+0x1c>)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f006 fda8 	bl	800a3cc <HAL_UARTEx_ReceiveToIdle_DMA>

}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000049c 	.word	0x2000049c

08003888 <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	b0af      	sub	sp, #188	@ 0xbc
 800388e:	af12      	add	r7, sp, #72	@ 0x48
 8003890:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003892:	460b      	mov	r3, r1
 8003894:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003896:	466b      	mov	r3, sp
 8003898:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 800389a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800389e:	49b7      	ldr	r1, [pc, #732]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038a2:	f006 fd93 	bl	800a3cc <HAL_UARTEx_ReceiveToIdle_DMA>
	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 80038a6:	49b5      	ldr	r1, [pc, #724]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038aa:	f001 f9b4 	bl	8004c16 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 80038ae:	4bb3      	ldr	r3, [pc, #716]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038b0:	799b      	ldrb	r3, [r3, #6]
 80038b2:	b21b      	sxth	r3, r3
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	b21a      	sxth	r2, r3
 80038b8:	4bb0      	ldr	r3, [pc, #704]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038ba:	795b      	ldrb	r3, [r3, #5]
 80038bc:	b21b      	sxth	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 80038c6:	4bad      	ldr	r3, [pc, #692]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038c8:	789b      	ldrb	r3, [r3, #2]
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	4baa      	ldr	r3, [pc, #680]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b21b      	sxth	r3, r3
 80038da:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 80038de:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80038e2:	3308      	adds	r3, #8
 80038e4:	4aa5      	ldr	r2, [pc, #660]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	b21b      	sxth	r3, r3
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80038f2:	3307      	adds	r3, #7
 80038f4:	49a1      	ldr	r1, [pc, #644]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8003902:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003906:	1dd9      	adds	r1, r3, #7
 8003908:	1e4b      	subs	r3, r1, #1
 800390a:	667b      	str	r3, [r7, #100]	@ 0x64
 800390c:	460a      	mov	r2, r1
 800390e:	2300      	movs	r3, #0
 8003910:	633a      	str	r2, [r7, #48]	@ 0x30
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800391e:	00c3      	lsls	r3, r0, #3
 8003920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003922:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003928:	00c2      	lsls	r2, r0, #3
 800392a:	460a      	mov	r2, r1
 800392c:	2300      	movs	r3, #0
 800392e:	4692      	mov	sl, r2
 8003930:	469b      	mov	fp, r3
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800393e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003942:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003946:	460b      	mov	r3, r1
 8003948:	3307      	adds	r3, #7
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	ebad 0d03 	sub.w	sp, sp, r3
 8003952:	ab12      	add	r3, sp, #72	@ 0x48
 8003954:	3300      	adds	r3, #0
 8003956:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 8003958:	2300      	movs	r3, #0
 800395a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800395e:	e00c      	b.n	800397a <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 8003960:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003964:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003968:	4984      	ldr	r1, [pc, #528]	@ (8003b7c <HAL_UARTEx_RxEventCallback+0x2f4>)
 800396a:	5c89      	ldrb	r1, [r1, r2]
 800396c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800396e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8003970:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003974:	3301      	adds	r3, #1
 8003976:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800397a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800397e:	1d9a      	adds	r2, r3, #6
 8003980:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003984:	429a      	cmp	r2, r3
 8003986:	daeb      	bge.n	8003960 <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 8003988:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800398c:	3307      	adds	r3, #7
 800398e:	4619      	mov	r1, r3
 8003990:	4b7b      	ldr	r3, [pc, #492]	@ (8003b80 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003998:	f7ff ff10 	bl	80037bc <Get_CRC16_Check_Sum>
 800399c:	4603      	mov	r3, r0
 800399e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 80039a2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80039a6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f040 87b7 	bne.w	800491e <HAL_UARTEx_RxEventCallback+0x1096>
 80039b0:	466b      	mov	r3, sp
 80039b2:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 80039b4:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 80039b8:	460b      	mov	r3, r1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039be:	b28b      	uxth	r3, r1
 80039c0:	2200      	movs	r2, #0
 80039c2:	4698      	mov	r8, r3
 80039c4:	4691      	mov	r9, r2
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039da:	b28b      	uxth	r3, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	461c      	mov	r4, r3
 80039e0:	4615      	mov	r5, r2
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	00eb      	lsls	r3, r5, #3
 80039ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f0:	00e2      	lsls	r2, r4, #3
 80039f2:	460b      	mov	r3, r1
 80039f4:	3307      	adds	r3, #7
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	ebad 0d03 	sub.w	sp, sp, r3
 80039fe:	ab12      	add	r3, sp, #72	@ 0x48
 8003a00:	3300      	adds	r3, #0
 8003a02:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8003a04:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003a08:	461a      	mov	r2, r3
 8003a0a:	495e      	ldr	r1, [pc, #376]	@ (8003b84 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003a0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003a0e:	f00a fead 	bl	800e76c <memcpy>

		switch (cmd_id) {
 8003a12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a16:	f240 4201 	movw	r2, #1025	@ 0x401
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f000 8772 	beq.w	8004904 <HAL_UARTEx_RxEventCallback+0x107c>
 8003a20:	f240 4201 	movw	r2, #1025	@ 0x401
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f300 8779 	bgt.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a2a:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8003a2e:	f280 8775 	bge.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a36:	dc1c      	bgt.n	8003a72 <HAL_UARTEx_RxEventCallback+0x1ea>
 8003a38:	f240 220e 	movw	r2, #526	@ 0x20e
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f300 876d 	bgt.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a46:	dc2b      	bgt.n	8003aa0 <HAL_UARTEx_RxEventCallback+0x218>
 8003a48:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8003a4c:	f280 8766 	bge.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a54:	dc48      	bgt.n	8003ae8 <HAL_UARTEx_RxEventCallback+0x260>
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	f000 80db 	beq.w	8003c12 <HAL_UARTEx_RxEventCallback+0x38a>
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	f300 875d 	bgt.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	f000 8090 	beq.w	8003b88 <HAL_UARTEx_RxEventCallback+0x300>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 80c7 	beq.w	8003bfc <HAL_UARTEx_RxEventCallback+0x374>
 8003a6e:	f000 bf55 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a72:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	f200 8750 	bhi.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	0800491d 	.word	0x0800491d
 8003a88:	08004561 	.word	0x08004561
 8003a8c:	08004587 	.word	0x08004587
 8003a90:	080045f5 	.word	0x080045f5
 8003a94:	0800491d 	.word	0x0800491d
 8003a98:	0800491d 	.word	0x0800491d
 8003a9c:	08004851 	.word	0x08004851
 8003aa0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003aa4:	2b0d      	cmp	r3, #13
 8003aa6:	f200 8739 	bhi.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <HAL_UARTEx_RxEventCallback+0x228>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003f31 	.word	0x08003f31
 8003ab4:	0800403f 	.word	0x0800403f
 8003ab8:	08004087 	.word	0x08004087
 8003abc:	080040cb 	.word	0x080040cb
 8003ac0:	0800491d 	.word	0x0800491d
 8003ac4:	0800412d 	.word	0x0800412d
 8003ac8:	0800416b 	.word	0x0800416b
 8003acc:	080041c9 	.word	0x080041c9
 8003ad0:	080041ff 	.word	0x080041ff
 8003ad4:	08004215 	.word	0x08004215
 8003ad8:	08004249 	.word	0x08004249
 8003adc:	08004301 	.word	0x08004301
 8003ae0:	080043a1 	.word	0x080043a1
 8003ae4:	08004523 	.word	0x08004523
 8003ae8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	f200 8715 	bhi.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_UARTEx_RxEventCallback+0x270>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003d35 	.word	0x08003d35
 8003afc:	0800491d 	.word	0x0800491d
 8003b00:	0800491d 	.word	0x0800491d
 8003b04:	08003e91 	.word	0x08003e91
 8003b08:	08003ec3 	.word	0x08003ec3
 8003b0c:	0800491d 	.word	0x0800491d
 8003b10:	0800491d 	.word	0x0800491d
 8003b14:	0800491d 	.word	0x0800491d
 8003b18:	0800491d 	.word	0x0800491d
 8003b1c:	0800491d 	.word	0x0800491d
 8003b20:	0800491d 	.word	0x0800491d
 8003b24:	0800491d 	.word	0x0800491d
 8003b28:	0800491d 	.word	0x0800491d
 8003b2c:	0800491d 	.word	0x0800491d
 8003b30:	0800491d 	.word	0x0800491d
 8003b34:	0800491d 	.word	0x0800491d
 8003b38:	0800491d 	.word	0x0800491d
 8003b3c:	0800491d 	.word	0x0800491d
 8003b40:	0800491d 	.word	0x0800491d
 8003b44:	0800491d 	.word	0x0800491d
 8003b48:	0800491d 	.word	0x0800491d
 8003b4c:	0800491d 	.word	0x0800491d
 8003b50:	0800491d 	.word	0x0800491d
 8003b54:	0800491d 	.word	0x0800491d
 8003b58:	0800491d 	.word	0x0800491d
 8003b5c:	0800491d 	.word	0x0800491d
 8003b60:	0800491d 	.word	0x0800491d
 8003b64:	0800491d 	.word	0x0800491d
 8003b68:	0800491d 	.word	0x0800491d
 8003b6c:	0800491d 	.word	0x0800491d
 8003b70:	0800491d 	.word	0x0800491d
 8003b74:	0800491d 	.word	0x0800491d
 8003b78:	0800491d 	.word	0x0800491d
 8003b7c:	2000059c 	.word	0x2000059c
 8003b80:	20000048 	.word	0x20000048
 8003b84:	200005a3 	.word	0x200005a3
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fed3 	bl	800493c <UART_RM25_getBits>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b63      	ldr	r3, [pc, #396]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003b9c:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fec8 	bl	800493c <UART_RM25_getBits>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003bb2:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003bbe:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bd0:	4955      	ldr	r1, [pc, #340]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003bd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 8003bd6:	4b54      	ldr	r3, [pc, #336]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003bd8:	7818      	ldrb	r0, [r3, #0]
 8003bda:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003bdc:	7859      	ldrb	r1, [r3, #1]
 8003bde:	4b52      	ldr	r3, [pc, #328]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003be0:	789c      	ldrb	r4, [r3, #2]
 8003be2:	4b51      	ldr	r3, [pc, #324]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003be4:	889d      	ldrh	r5, [r3, #4]
 8003be6:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003be8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bec:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	f7fd fe66 	bl	80018c4 <GAME_STATUS_RxEventCallback>
				break;
 8003bf8:	f000 be90 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	4b4a      	ldr	r3, [pc, #296]	@ (8003d2c <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003c02:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 8003c04:	4b49      	ldr	r3, [pc, #292]	@ (8003d2c <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fec4 	bl	8004996 <GAME_RESULT_RxEventCallback>
				break;
 8003c0e:	f000 be85 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b45      	ldr	r3, [pc, #276]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c1a:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1e:	3302      	adds	r3, #2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b42      	ldr	r3, [pc, #264]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c26:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 8003c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	4b3f      	ldr	r3, [pc, #252]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c32:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	3306      	adds	r3, #6
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c3e:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	330a      	adds	r3, #10
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	4b39      	ldr	r3, [pc, #228]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c4a:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	330c      	adds	r3, #12
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c56:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8003c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5a:	330e      	adds	r3, #14
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c62:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8003c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c66:	3310      	adds	r3, #16
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b30      	ldr	r3, [pc, #192]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c6e:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	3312      	adds	r3, #18
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b2d      	ldr	r3, [pc, #180]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c7a:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8003c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7e:	3314      	adds	r3, #20
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b2a      	ldr	r3, [pc, #168]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c86:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8a:	3316      	adds	r3, #22
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c92:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	331a      	adds	r3, #26
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b24      	ldr	r3, [pc, #144]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003c9e:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca2:	331c      	adds	r3, #28
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b21      	ldr	r3, [pc, #132]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003caa:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8003cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cae:	331e      	adds	r3, #30
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cb6:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cba:	f8b3 c000 	ldrh.w	ip, [r3]
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cc0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cc6:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003cca:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ccc:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cd2:	8918      	ldrh	r0, [r3, #8]
 8003cd4:	4b16      	ldr	r3, [pc, #88]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cd6:	895c      	ldrh	r4, [r3, #10]
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cda:	899d      	ldrh	r5, [r3, #12]
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cde:	89de      	ldrh	r6, [r3, #14]
 8003ce0:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ce2:	8a1b      	ldrh	r3, [r3, #16]
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ce6:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ce8:	8a5a      	ldrh	r2, [r3, #18]
 8003cea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cee:	8a99      	ldrh	r1, [r3, #20]
 8003cf0:	6279      	str	r1, [r7, #36]	@ 0x24
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cf4:	8ad9      	ldrh	r1, [r3, #22]
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cf8:	8b1a      	ldrh	r2, [r3, #24]
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003cfc:	8b5b      	ldrh	r3, [r3, #26]
 8003cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d00:	9208      	str	r2, [sp, #32]
 8003d02:	9107      	str	r1, [sp, #28]
 8003d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d06:	9106      	str	r1, [sp, #24]
 8003d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0a:	9205      	str	r2, [sp, #20]
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	9603      	str	r6, [sp, #12]
 8003d12:	9502      	str	r5, [sp, #8]
 8003d14:	9401      	str	r4, [sp, #4]
 8003d16:	9000      	str	r0, [sp, #0]
 8003d18:	464b      	mov	r3, r9
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	4671      	mov	r1, lr
 8003d1e:	4660      	mov	r0, ip
 8003d20:	f000 fe44 	bl	80049ac <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8003d24:	f000 bdfa 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003d28:	200006a0 	.word	0x200006a0
 8003d2c:	200006b0 	.word	0x200006b0
 8003d30:	200006b4 	.word	0x200006b4
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fdfd 	bl	800493c <UART_RM25_getBits>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b77      	ldr	r3, [pc, #476]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003d48:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fdf2 	bl	800493c <UART_RM25_getBits>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b71      	ldr	r3, [pc, #452]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003d5e:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 8003d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	2102      	movs	r1, #2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fde7 	bl	800493c <UART_RM25_getBits>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b6c      	ldr	r3, [pc, #432]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003d74:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2103      	movs	r1, #3
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fddc 	bl	800493c <UART_RM25_getBits>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b66      	ldr	r3, [pc, #408]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003d8a:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	2104      	movs	r1, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fdd1 	bl	800493c <UART_RM25_getBits>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b61      	ldr	r3, [pc, #388]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003da0:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8003da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2202      	movs	r2, #2
 8003da8:	2105      	movs	r1, #5
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fdc6 	bl	800493c <UART_RM25_getBits>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b5b      	ldr	r3, [pc, #364]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003db6:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 8003db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2107      	movs	r1, #7
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fdbb 	bl	800493c <UART_RM25_getBits>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	b25c      	sxtb	r4, r3
 8003dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fdb2 	bl	800493c <UART_RM25_getBits>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	b25b      	sxtb	r3, r3
 8003de0:	4323      	orrs	r3, r4
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003de8:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	2208      	movs	r2, #8
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fda2 	bl	800493c <UART_RM25_getBits>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e00:	789b      	ldrb	r3, [r3, #2]
 8003e02:	2202      	movs	r2, #2
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd98 	bl	800493c <UART_RM25_getBits>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 8003e12:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003e16:	4b43      	ldr	r3, [pc, #268]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e18:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 8003e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1c:	789b      	ldrb	r3, [r3, #2]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fd8a 	bl	800493c <UART_RM25_getBits>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e2e:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 8003e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e32:	789b      	ldrb	r3, [r3, #2]
 8003e34:	2202      	movs	r2, #2
 8003e36:	2105      	movs	r1, #5
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fd7f 	bl	800493c <UART_RM25_getBits>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b38      	ldr	r3, [pc, #224]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e44:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e48:	781e      	ldrb	r6, [r3, #0]
 8003e4a:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e4c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003e50:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e52:	f893 e002 	ldrb.w	lr, [r3, #2]
 8003e56:	4b33      	ldr	r3, [pc, #204]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e58:	f893 8003 	ldrb.w	r8, [r3, #3]
 8003e5c:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	4a30      	ldr	r2, [pc, #192]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e62:	7952      	ldrb	r2, [r2, #5]
 8003e64:	492f      	ldr	r1, [pc, #188]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e66:	7989      	ldrb	r1, [r1, #6]
 8003e68:	482e      	ldr	r0, [pc, #184]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e6a:	8900      	ldrh	r0, [r0, #8]
 8003e6c:	4c2d      	ldr	r4, [pc, #180]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e6e:	7aa4      	ldrb	r4, [r4, #10]
 8003e70:	4d2c      	ldr	r5, [pc, #176]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003e72:	7aed      	ldrb	r5, [r5, #11]
 8003e74:	9505      	str	r5, [sp, #20]
 8003e76:	9404      	str	r4, [sp, #16]
 8003e78:	9003      	str	r0, [sp, #12]
 8003e7a:	9102      	str	r1, [sp, #8]
 8003e7c:	9201      	str	r2, [sp, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4643      	mov	r3, r8
 8003e82:	4672      	mov	r2, lr
 8003e84:	4661      	mov	r1, ip
 8003e86:	4630      	mov	r0, r6
 8003e88:	f000 fda4 	bl	80049d4 <EVENT_DATA_RxEventCallback>
				break;
 8003e8c:	f000 bd46 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003e96:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003ea0:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003eaa:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8003eac:	4b1e      	ldr	r3, [pc, #120]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003eb2:	7851      	ldrb	r1, [r2, #1]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003eb6:	7892      	ldrb	r2, [r2, #2]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fd9f 	bl	80049fc <REFEREE_WARNING_RxEventCallback>
				break;
 8003ebe:	f000 bd2d 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	4b19      	ldr	r3, [pc, #100]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003ec8:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 8003eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fd32 	bl	800493c <UART_RM25_getBits>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b13      	ldr	r3, [pc, #76]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003ede:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fd27 	bl	800493c <UART_RM25_getBits>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003ef4:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2202      	movs	r2, #2
 8003efc:	2106      	movs	r1, #6
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd1c 	bl	800493c <UART_RM25_getBits>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f0a:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 8003f0c:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f0e:	7818      	ldrb	r0, [r3, #0]
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f12:	7859      	ldrb	r1, [r3, #1]
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f16:	789a      	ldrb	r2, [r3, #2]
 8003f18:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	f000 fd7d 	bl	8004a1a <DART_INFO_RxEventCallback>
				break;
 8003f20:	f000 bcfc 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 8003f24:	200006d0 	.word	0x200006d0
 8003f28:	200006dc 	.word	0x200006dc
 8003f2c:	200006e0 	.word	0x200006e0
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 8003f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	4b9e      	ldr	r3, [pc, #632]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f36:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8003f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f40:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 8003f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f44:	3302      	adds	r3, #2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b99      	ldr	r3, [pc, #612]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f4c:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	3304      	adds	r3, #4
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	4b96      	ldr	r3, [pc, #600]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f58:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	3306      	adds	r3, #6
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	4b93      	ldr	r3, [pc, #588]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f64:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8003f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f68:	3308      	adds	r3, #8
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	4b90      	ldr	r3, [pc, #576]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f70:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8003f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f74:	330a      	adds	r3, #10
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f7c:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f80:	7b1b      	ldrb	r3, [r3, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fcd8 	bl	800493c <UART_RM25_getBits>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	b2d9      	uxtb	r1, r3
 8003f94:	4a86      	ldr	r2, [pc, #536]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003f96:	7b13      	ldrb	r3, [r2, #12]
 8003f98:	f361 0300 	bfi	r3, r1, #0, #1
 8003f9c:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	7b1b      	ldrb	r3, [r3, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fcc8 	bl	800493c <UART_RM25_getBits>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	b2d9      	uxtb	r1, r3
 8003fb4:	4a7e      	ldr	r2, [pc, #504]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fb6:	7b13      	ldrb	r3, [r2, #12]
 8003fb8:	f361 0341 	bfi	r3, r1, #1, #1
 8003fbc:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 8003fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc0:	7b1b      	ldrb	r3, [r3, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fcb8 	bl	800493c <UART_RM25_getBits>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	b2d9      	uxtb	r1, r3
 8003fd4:	4a76      	ldr	r2, [pc, #472]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fd6:	7b13      	ldrb	r3, [r2, #12]
 8003fd8:	f361 0382 	bfi	r3, r1, #2, #1
 8003fdc:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8003fde:	4b74      	ldr	r3, [pc, #464]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fe0:	781c      	ldrb	r4, [r3, #0]
 8003fe2:	4b73      	ldr	r3, [pc, #460]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fe4:	785d      	ldrb	r5, [r3, #1]
 8003fe6:	4b72      	ldr	r3, [pc, #456]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fe8:	885e      	ldrh	r6, [r3, #2]
 8003fea:	4b71      	ldr	r3, [pc, #452]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003fec:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003ff2:	88db      	ldrh	r3, [r3, #6]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003ff6:	8912      	ldrh	r2, [r2, #8]
 8003ff8:	496d      	ldr	r1, [pc, #436]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003ffa:	8949      	ldrh	r1, [r1, #10]
 8003ffc:	486c      	ldr	r0, [pc, #432]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8003ffe:	7b00      	ldrb	r0, [r0, #12]
 8004000:	f3c0 0000 	ubfx	r0, r0, #0, #1
 8004004:	b2c0      	uxtb	r0, r0
 8004006:	6338      	str	r0, [r7, #48]	@ 0x30
 8004008:	4869      	ldr	r0, [pc, #420]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 800400a:	7b00      	ldrb	r0, [r0, #12]
 800400c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004010:	b2c0      	uxtb	r0, r0
 8004012:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004014:	4866      	ldr	r0, [pc, #408]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x928>)
 8004016:	7b00      	ldrb	r0, [r0, #12]
 8004018:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800401c:	b2c0      	uxtb	r0, r0
 800401e:	9005      	str	r0, [sp, #20]
 8004020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004022:	9004      	str	r0, [sp, #16]
 8004024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004026:	9003      	str	r0, [sp, #12]
 8004028:	9102      	str	r1, [sp, #8]
 800402a:	9201      	str	r2, [sp, #4]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4663      	mov	r3, ip
 8004030:	4632      	mov	r2, r6
 8004032:	4629      	mov	r1, r5
 8004034:	4620      	mov	r0, r4
 8004036:	f7fd fc73 	bl	8001920 <ROBOT_STATUS_RxEventCallback>
				break;
 800403a:	f000 bc6f 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	3308      	adds	r3, #8
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29a      	uxth	r2, r3
 8004046:	4b5b      	ldr	r3, [pc, #364]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004048:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 800404a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404c:	330a      	adds	r3, #10
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	4b58      	ldr	r3, [pc, #352]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004054:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	330c      	adds	r3, #12
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	4b55      	ldr	r3, [pc, #340]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004060:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	330e      	adds	r3, #14
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29a      	uxth	r2, r3
 800406a:	4b52      	ldr	r3, [pc, #328]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 800406c:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 800406e:	4b51      	ldr	r3, [pc, #324]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004070:	8818      	ldrh	r0, [r3, #0]
 8004072:	4b50      	ldr	r3, [pc, #320]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004074:	8859      	ldrh	r1, [r3, #2]
 8004076:	4b4f      	ldr	r3, [pc, #316]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004078:	889a      	ldrh	r2, [r3, #4]
 800407a:	4b4e      	ldr	r3, [pc, #312]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x92c>)
 800407c:	88db      	ldrh	r3, [r3, #6]
 800407e:	f7fd fc93 	bl	80019a8 <POWER_HEAT_DATA_RxEventCallback>
				break;
 8004082:	f000 bc4b 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	4b4a      	ldr	r3, [pc, #296]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 800408e:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8004090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b48      	ldr	r3, [pc, #288]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 8004098:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 800409a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	4b45      	ldr	r3, [pc, #276]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 80040a2:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 80040a4:	4b44      	ldr	r3, [pc, #272]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	4b43      	ldr	r3, [pc, #268]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 80040ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80040b0:	4b41      	ldr	r3, [pc, #260]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x930>)
 80040b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80040b6:	eeb0 1a66 	vmov.f32	s2, s13
 80040ba:	eef0 0a47 	vmov.f32	s1, s14
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	f000 fcbe 	bl	8004a42 <ROBOT_POSITION_RxEventCallback>
				break;
 80040c6:	f000 bc29 	b.w	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 80040d0:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 80040d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d4:	3301      	adds	r3, #1
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	4b38      	ldr	r3, [pc, #224]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 80040da:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	3302      	adds	r3, #2
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 80040e4:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	3303      	adds	r3, #3
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 80040ee:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f2:	3304      	adds	r3, #4
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 80040fa:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	3305      	adds	r3, #5
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	4b2e      	ldr	r3, [pc, #184]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 8004104:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 8004106:	4b2d      	ldr	r3, [pc, #180]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 8004108:	7818      	ldrb	r0, [r3, #0]
 800410a:	4b2c      	ldr	r3, [pc, #176]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 800410c:	7859      	ldrb	r1, [r3, #1]
 800410e:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 8004110:	789c      	ldrb	r4, [r3, #2]
 8004112:	4b2a      	ldr	r3, [pc, #168]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 8004114:	78dd      	ldrb	r5, [r3, #3]
 8004116:	4b29      	ldr	r3, [pc, #164]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 8004118:	889b      	ldrh	r3, [r3, #4]
 800411a:	4a28      	ldr	r2, [pc, #160]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x934>)
 800411c:	7992      	ldrb	r2, [r2, #6]
 800411e:	9201      	str	r2, [sp, #4]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	462b      	mov	r3, r5
 8004124:	4622      	mov	r2, r4
 8004126:	f000 fc9b 	bl	8004a60 <BUFF_RxEventCallback>
				break;
 800412a:	e3f7      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2204      	movs	r2, #4
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fc01 	bl	800493c <UART_RM25_getBits>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <HAL_UARTEx_RxEventCallback+0x938>)
 8004140:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 8004142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2204      	movs	r2, #4
 8004148:	2104      	movs	r1, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fbf6 	bl	800493c <UART_RM25_getBits>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <HAL_UARTEx_RxEventCallback+0x938>)
 8004156:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_UARTEx_RxEventCallback+0x938>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <HAL_UARTEx_RxEventCallback+0x938>)
 800415e:	7852      	ldrb	r2, [r2, #1]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fc90 	bl	8004a88 <DAMAGE_SOURCE_RxEventCallback>
				break;
 8004168:	e3d8      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 800416a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004170:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 8004172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004174:	3301      	adds	r3, #1
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 800417a:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 800417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417e:	3302      	adds	r3, #2
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004184:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	3303      	adds	r3, #3
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004190:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	4a0b      	ldr	r2, [pc, #44]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 8004198:	7851      	ldrb	r1, [r2, #1]
 800419a:	4a0a      	ldr	r2, [pc, #40]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 800419c:	7892      	ldrb	r2, [r2, #2]
 800419e:	4809      	ldr	r0, [pc, #36]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x93c>)
 80041a0:	edd0 7a01 	vldr	s15, [r0, #4]
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fc7b 	bl	8004aa4 <PROJECTILE_INFO_RxEventCallback>
				break;
 80041ae:	e3b5      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 80041b0:	200006e4 	.word	0x200006e4
 80041b4:	200006f4 	.word	0x200006f4
 80041b8:	200006fc 	.word	0x200006fc
 80041bc:	20000708 	.word	0x20000708
 80041c0:	20000710 	.word	0x20000710
 80041c4:	20000714 	.word	0x20000714
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	4b6f      	ldr	r3, [pc, #444]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041d0:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	3302      	adds	r3, #2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b6c      	ldr	r3, [pc, #432]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041dc:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	3304      	adds	r3, #4
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b69      	ldr	r3, [pc, #420]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041e8:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 80041ea:	4b68      	ldr	r3, [pc, #416]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	4a67      	ldr	r2, [pc, #412]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041f0:	8851      	ldrh	r1, [r2, #2]
 80041f2:	4a66      	ldr	r2, [pc, #408]	@ (800438c <HAL_UARTEx_RxEventCallback+0xb04>)
 80041f4:	8892      	ldrh	r2, [r2, #4]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fc65 	bl	8004ac6 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 80041fc:	e38e      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b62      	ldr	r3, [pc, #392]	@ (8004390 <HAL_UARTEx_RxEventCallback+0xb08>)
 8004206:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_UARTEx_RxEventCallback+0xb08>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fc69 	bl	8004ae4 <RFID_RxEventCallback>
				break;
 8004212:	e383      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 8004214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	4b5e      	ldr	r3, [pc, #376]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800421a:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 800421c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421e:	3302      	adds	r3, #2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	4b5b      	ldr	r3, [pc, #364]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8004226:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 8004228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422a:	3304      	adds	r3, #4
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29a      	uxth	r2, r3
 8004230:	4b58      	ldr	r3, [pc, #352]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8004232:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 8004234:	4b57      	ldr	r3, [pc, #348]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4a56      	ldr	r2, [pc, #344]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800423a:	8851      	ldrh	r1, [r2, #2]
 800423c:	4a55      	ldr	r2, [pc, #340]	@ (8004394 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800423e:	8892      	ldrh	r2, [r2, #4]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc59 	bl	8004af8 <DART_COMMAND_RxEventCallback>
				break;
 8004246:	e369      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b52      	ldr	r3, [pc, #328]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004250:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 8004252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004254:	3304      	adds	r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	4b4f      	ldr	r3, [pc, #316]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 800425c:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	3308      	adds	r3, #8
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	4b4c      	ldr	r3, [pc, #304]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004268:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	330c      	adds	r3, #12
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004274:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 8004276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004278:	3310      	adds	r3, #16
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b46      	ldr	r3, [pc, #280]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004280:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	3314      	adds	r3, #20
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 800428c:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	3318      	adds	r3, #24
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	4b40      	ldr	r3, [pc, #256]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004298:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 800429a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429c:	331c      	adds	r3, #28
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042a4:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 80042a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042a8:	edd3 7a00 	vldr	s15, [r3]
 80042ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80042b8:	4b37      	ldr	r3, [pc, #220]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042ba:	ed93 6a03 	vldr	s12, [r3, #12]
 80042be:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042c0:	edd3 5a04 	vldr	s11, [r3, #16]
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042c6:	ed93 5a05 	vldr	s10, [r3, #20]
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042cc:	ed93 3a06 	vldr	s6, [r3, #24]
 80042d0:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042d2:	edd3 3a07 	vldr	s7, [r3, #28]
 80042d6:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042d8:	ed93 4a08 	vldr	s8, [r3, #32]
 80042dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <HAL_UARTEx_RxEventCallback+0xb10>)
 80042de:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 80042e2:	eef0 2a45 	vmov.f32	s5, s10
 80042e6:	eeb0 2a65 	vmov.f32	s4, s11
 80042ea:	eef0 1a46 	vmov.f32	s3, s12
 80042ee:	eeb0 1a66 	vmov.f32	s2, s13
 80042f2:	eef0 0a47 	vmov.f32	s1, s14
 80042f6:	eeb0 0a67 	vmov.f32	s0, s15
 80042fa:	f000 fc0c 	bl	8004b16 <TEAM_POSITION_RxEventCallback>
				break;
 80042fe:	e30d      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 8004300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fb17 	bl	800493c <UART_RM25_getBits>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	4b22      	ldr	r3, [pc, #136]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004314:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 8004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb0c 	bl	800493c <UART_RM25_getBits>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 800432a:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 800432c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb01 	bl	800493c <UART_RM25_getBits>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b17      	ldr	r3, [pc, #92]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004340:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2201      	movs	r2, #1
 8004348:	2103      	movs	r1, #3
 800434a:	4618      	mov	r0, r3
 800434c:	f000 faf6 	bl	800493c <UART_RM25_getBits>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004356:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	2104      	movs	r1, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f000 faeb 	bl	800493c <UART_RM25_getBits>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 800436c:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004370:	7818      	ldrb	r0, [r3, #0]
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004374:	7859      	ldrb	r1, [r3, #1]
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004378:	789a      	ldrb	r2, [r3, #2]
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 800437c:	78dc      	ldrb	r4, [r3, #3]
 800437e:	4b07      	ldr	r3, [pc, #28]	@ (800439c <HAL_UARTEx_RxEventCallback+0xb14>)
 8004380:	791b      	ldrb	r3, [r3, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4623      	mov	r3, r4
 8004386:	f000 fbe3 	bl	8004b50 <RADAR_MARKING_RxEventCallback>
				break;
 800438a:	e2c7      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 800438c:	2000071c 	.word	0x2000071c
 8004390:	20000724 	.word	0x20000724
 8004394:	20000728 	.word	0x20000728
 8004398:	20000730 	.word	0x20000730
 800439c:	20000758 	.word	0x20000758
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 80043a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2203      	movs	r2, #3
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fac3 	bl	800493c <UART_RM25_getBits>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 80043bc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80043c2:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 80043c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2204      	movs	r2, #4
 80043ca:	2103      	movs	r1, #3
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fab5 	bl	800493c <UART_RM25_getBits>
 80043d2:	4603      	mov	r3, r0
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b83      	ldr	r3, [pc, #524]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80043d8:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 80043da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2201      	movs	r2, #1
 80043e0:	2107      	movs	r1, #7
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 faaa 	bl	800493c <UART_RM25_getBits>
 80043e8:	4603      	mov	r3, r0
 80043ea:	b25c      	sxtb	r4, r3
 80043ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ee:	789b      	ldrb	r3, [r3, #2]
 80043f0:	2203      	movs	r2, #3
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 faa1 	bl	800493c <UART_RM25_getBits>
 80043fa:	4603      	mov	r3, r0
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	b25b      	sxtb	r3, r3
 8004402:	4323      	orrs	r3, r4
 8004404:	b25b      	sxtb	r3, r3
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b76      	ldr	r3, [pc, #472]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800440a:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	2201      	movs	r2, #1
 8004412:	2103      	movs	r1, #3
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa91 	bl	800493c <UART_RM25_getBits>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	4b71      	ldr	r3, [pc, #452]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004420:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	789b      	ldrb	r3, [r3, #2]
 8004426:	2201      	movs	r2, #1
 8004428:	2104      	movs	r1, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa86 	bl	800493c <UART_RM25_getBits>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b6b      	ldr	r3, [pc, #428]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004436:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 8004438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443a:	789b      	ldrb	r3, [r3, #2]
 800443c:	2203      	movs	r2, #3
 800443e:	2105      	movs	r1, #5
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa7b 	bl	800493c <UART_RM25_getBits>
 8004446:	4603      	mov	r3, r0
 8004448:	b25c      	sxtb	r4, r3
 800444a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444c:	78db      	ldrb	r3, [r3, #3]
 800444e:	2205      	movs	r2, #5
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fa72 	bl	800493c <UART_RM25_getBits>
 8004458:	4603      	mov	r3, r0
 800445a:	b25b      	sxtb	r3, r3
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	b25b      	sxtb	r3, r3
 8004460:	4323      	orrs	r3, r4
 8004462:	b25b      	sxtb	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	2202      	movs	r2, #2
 8004470:	2105      	movs	r1, #5
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fa62 	bl	800493c <UART_RM25_getBits>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 800447e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004482:	4b58      	ldr	r3, [pc, #352]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004484:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 8004486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fa54 	bl	800493c <UART_RM25_getBits>
 8004494:	4603      	mov	r3, r0
 8004496:	461a      	mov	r2, r3
 8004498:	4b52      	ldr	r3, [pc, #328]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800449a:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 800449c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449e:	791b      	ldrb	r3, [r3, #4]
 80044a0:	2207      	movs	r2, #7
 80044a2:	2101      	movs	r1, #1
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fa49 	bl	800493c <UART_RM25_getBits>
 80044aa:	4603      	mov	r3, r0
 80044ac:	b25c      	sxtb	r4, r3
 80044ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b0:	795b      	ldrb	r3, [r3, #5]
 80044b2:	2201      	movs	r2, #1
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fa40 	bl	800493c <UART_RM25_getBits>
 80044bc:	4603      	mov	r3, r0
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	01db      	lsls	r3, r3, #7
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	4323      	orrs	r3, r4
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80044ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d0:	795b      	ldrb	r3, [r3, #5]
 80044d2:	2203      	movs	r2, #3
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fa30 	bl	800493c <UART_RM25_getBits>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 80044e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80044e6:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044e8:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 80044ea:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044ec:	881c      	ldrh	r4, [r3, #0]
 80044ee:	4b3d      	ldr	r3, [pc, #244]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044f0:	789d      	ldrb	r5, [r3, #2]
 80044f2:	4b3c      	ldr	r3, [pc, #240]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044f4:	78de      	ldrb	r6, [r3, #3]
 80044f6:	4b3b      	ldr	r3, [pc, #236]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044f8:	f893 c004 	ldrb.w	ip, [r3, #4]
 80044fc:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80044fe:	795b      	ldrb	r3, [r3, #5]
 8004500:	4a38      	ldr	r2, [pc, #224]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004502:	88d2      	ldrh	r2, [r2, #6]
 8004504:	4937      	ldr	r1, [pc, #220]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004506:	7a09      	ldrb	r1, [r1, #8]
 8004508:	4836      	ldr	r0, [pc, #216]	@ (80045e4 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800450a:	8940      	ldrh	r0, [r0, #10]
 800450c:	9003      	str	r0, [sp, #12]
 800450e:	9102      	str	r1, [sp, #8]
 8004510:	9201      	str	r2, [sp, #4]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4663      	mov	r3, ip
 8004516:	4632      	mov	r2, r6
 8004518:	4629      	mov	r1, r5
 800451a:	4620      	mov	r0, r4
 800451c:	f000 fb2c 	bl	8004b78 <SENTRY_RxEventCallback>
				break;
 8004520:	e1fc      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa06 	bl	800493c <UART_RM25_getBits>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b2c      	ldr	r3, [pc, #176]	@ (80045e8 <HAL_UARTEx_RxEventCallback+0xd60>)
 8004536:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 8004538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f9fb 	bl	800493c <UART_RM25_getBits>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	4b27      	ldr	r3, [pc, #156]	@ (80045e8 <HAL_UARTEx_RxEventCallback+0xd60>)
 800454c:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 800454e:	4b26      	ldr	r3, [pc, #152]	@ (80045e8 <HAL_UARTEx_RxEventCallback+0xd60>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4a25      	ldr	r2, [pc, #148]	@ (80045e8 <HAL_UARTEx_RxEventCallback+0xd60>)
 8004554:	7852      	ldrb	r2, [r2, #1]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fb21 	bl	8004ba0 <RADAR_BUFF_RxEventCallback>
				break;
 800455e:	e1dd      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 8004560:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <HAL_UARTEx_RxEventCallback+0xd64>)
 8004562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	6828      	ldr	r0, [r5, #0]
 800456a:	6869      	ldr	r1, [r5, #4]
 800456c:	68aa      	ldr	r2, [r5, #8]
 800456e:	68eb      	ldr	r3, [r5, #12]
 8004570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004572:	6928      	ldr	r0, [r5, #16]
 8004574:	6969      	ldr	r1, [r5, #20]
 8004576:	69aa      	ldr	r2, [r5, #24]
 8004578:	c407      	stmia	r4!, {r0, r1, r2}
 800457a:	8bab      	ldrh	r3, [r5, #28]
 800457c:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 800457e:	481b      	ldr	r0, [pc, #108]	@ (80045ec <HAL_UARTEx_RxEventCallback+0xd64>)
 8004580:	f7fd f8e4 	bl	800174c <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8004584:	e1ca      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 8004586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 800458e:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 8004590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004592:	3304      	adds	r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 800459a:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 800459c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459e:	3308      	adds	r3, #8
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045a4:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 80045a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a8:	3309      	adds	r3, #9
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045ae:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 80045b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b2:	330a      	adds	r3, #10
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045ba:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045be:	edd3 7a00 	vldr	s15, [r3]
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80045c8:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045ca:	7a1b      	ldrb	r3, [r3, #8]
 80045cc:	4a08      	ldr	r2, [pc, #32]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045ce:	7a51      	ldrb	r1, [r2, #9]
 80045d0:	4a07      	ldr	r2, [pc, #28]	@ (80045f0 <HAL_UARTEx_RxEventCallback+0xd68>)
 80045d2:	8952      	ldrh	r2, [r2, #10]
 80045d4:	4618      	mov	r0, r3
 80045d6:	eef0 0a47 	vmov.f32	s1, s14
 80045da:	eeb0 0a67 	vmov.f32	s0, s15
 80045de:	f000 faed 	bl	8004bbc <MINIMAP_COMMAND_RxEventCallback>
				break;
 80045e2:	e19b      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 80045e4:	20000760 	.word	0x20000760
 80045e8:	2000076c 	.word	0x2000076c
 80045ec:	20000804 	.word	0x20000804
 80045f0:	20000770 	.word	0x20000770
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 80045f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	4b94      	ldr	r3, [pc, #592]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045fc:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 80045fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004600:	3302      	adds	r3, #2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	4b91      	ldr	r3, [pc, #580]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004608:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 800460a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460c:	3304      	adds	r3, #4
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	4b8e      	ldr	r3, [pc, #568]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004614:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 8004616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004618:	3306      	adds	r3, #6
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	4b8b      	ldr	r3, [pc, #556]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800461e:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 8004620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004622:	3307      	adds	r3, #7
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	4b89      	ldr	r3, [pc, #548]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004628:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 800462a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462c:	7a1b      	ldrb	r3, [r3, #8]
 800462e:	2201      	movs	r2, #1
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f982 	bl	800493c <UART_RM25_getBits>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b83      	ldr	r3, [pc, #524]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800463e:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	7a1b      	ldrb	r3, [r3, #8]
 8004644:	2201      	movs	r2, #1
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f977 	bl	800493c <UART_RM25_getBits>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	4b7e      	ldr	r3, [pc, #504]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004654:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	7a1b      	ldrb	r3, [r3, #8]
 800465a:	2201      	movs	r2, #1
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f96c 	bl	800493c <UART_RM25_getBits>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	4b78      	ldr	r3, [pc, #480]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800466a:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 800466c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466e:	7a1b      	ldrb	r3, [r3, #8]
 8004670:	2201      	movs	r2, #1
 8004672:	2103      	movs	r1, #3
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f961 	bl	800493c <UART_RM25_getBits>
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	4b73      	ldr	r3, [pc, #460]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004680:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	7a1b      	ldrb	r3, [r3, #8]
 8004686:	2201      	movs	r2, #1
 8004688:	2104      	movs	r1, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f956 	bl	800493c <UART_RM25_getBits>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	4b6d      	ldr	r3, [pc, #436]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004696:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 8004698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469a:	7a1b      	ldrb	r3, [r3, #8]
 800469c:	2201      	movs	r2, #1
 800469e:	2105      	movs	r1, #5
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f94b 	bl	800493c <UART_RM25_getBits>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b68      	ldr	r3, [pc, #416]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046ac:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 80046ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b0:	7a1b      	ldrb	r3, [r3, #8]
 80046b2:	2201      	movs	r2, #1
 80046b4:	2106      	movs	r1, #6
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f940 	bl	800493c <UART_RM25_getBits>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	4b62      	ldr	r3, [pc, #392]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046c2:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 80046c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c6:	7a1b      	ldrb	r3, [r3, #8]
 80046c8:	2201      	movs	r2, #1
 80046ca:	2107      	movs	r1, #7
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f935 	bl	800493c <UART_RM25_getBits>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b5d      	ldr	r3, [pc, #372]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046d8:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 80046da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	2201      	movs	r2, #1
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f92a 	bl	800493c <UART_RM25_getBits>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b57      	ldr	r3, [pc, #348]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80046ee:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 80046f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f2:	7a5b      	ldrb	r3, [r3, #9]
 80046f4:	2201      	movs	r2, #1
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f91f 	bl	800493c <UART_RM25_getBits>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	4b52      	ldr	r3, [pc, #328]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004704:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 8004706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004708:	7a5b      	ldrb	r3, [r3, #9]
 800470a:	2201      	movs	r2, #1
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f914 	bl	800493c <UART_RM25_getBits>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	4b4c      	ldr	r3, [pc, #304]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800471a:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 800471c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471e:	7a5b      	ldrb	r3, [r3, #9]
 8004720:	2201      	movs	r2, #1
 8004722:	2103      	movs	r1, #3
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f909 	bl	800493c <UART_RM25_getBits>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	4b47      	ldr	r3, [pc, #284]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004730:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 8004732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004734:	7a5b      	ldrb	r3, [r3, #9]
 8004736:	2201      	movs	r2, #1
 8004738:	2104      	movs	r1, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f8fe 	bl	800493c <UART_RM25_getBits>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004746:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 8004748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474a:	7a5b      	ldrb	r3, [r3, #9]
 800474c:	2201      	movs	r2, #1
 800474e:	2105      	movs	r1, #5
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f8f3 	bl	800493c <UART_RM25_getBits>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b3c      	ldr	r3, [pc, #240]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800475c:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 800475e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004760:	7a5b      	ldrb	r3, [r3, #9]
 8004762:	2201      	movs	r2, #1
 8004764:	2106      	movs	r1, #6
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f8e8 	bl	800493c <UART_RM25_getBits>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	4b36      	ldr	r3, [pc, #216]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004772:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 8004774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004776:	7a5b      	ldrb	r3, [r3, #9]
 8004778:	2201      	movs	r2, #1
 800477a:	2107      	movs	r1, #7
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f8dd 	bl	800493c <UART_RM25_getBits>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004788:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800478c:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004790:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004792:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004796:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004798:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 800479c:	4b2b      	ldr	r3, [pc, #172]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 800479e:	f893 9006 	ldrb.w	r9, [r3, #6]
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047a4:	79db      	ldrb	r3, [r3, #7]
 80047a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a8:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047aa:	7b1a      	ldrb	r2, [r3, #12]
 80047ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047b0:	7b59      	ldrb	r1, [r3, #13]
 80047b2:	6279      	str	r1, [r7, #36]	@ 0x24
 80047b4:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047b6:	7b98      	ldrb	r0, [r3, #14]
 80047b8:	6238      	str	r0, [r7, #32]
 80047ba:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047bc:	7bdc      	ldrb	r4, [r3, #15]
 80047be:	61fc      	str	r4, [r7, #28]
 80047c0:	4b22      	ldr	r3, [pc, #136]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047c2:	7c1d      	ldrb	r5, [r3, #16]
 80047c4:	61bd      	str	r5, [r7, #24]
 80047c6:	4b21      	ldr	r3, [pc, #132]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047c8:	7c5e      	ldrb	r6, [r3, #17]
 80047ca:	617e      	str	r6, [r7, #20]
 80047cc:	4b1f      	ldr	r3, [pc, #124]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047ce:	f893 b012 	ldrb.w	fp, [r3, #18]
 80047d2:	465b      	mov	r3, fp
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047d8:	f893 b013 	ldrb.w	fp, [r3, #19]
 80047dc:	465a      	mov	r2, fp
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047e2:	f893 b014 	ldrb.w	fp, [r3, #20]
 80047e6:	4659      	mov	r1, fp
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4b18      	ldr	r3, [pc, #96]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047ec:	7d5e      	ldrb	r6, [r3, #21]
 80047ee:	4b17      	ldr	r3, [pc, #92]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f0:	7d9d      	ldrb	r5, [r3, #22]
 80047f2:	4b16      	ldr	r3, [pc, #88]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f4:	7ddc      	ldrb	r4, [r3, #23]
 80047f6:	4b15      	ldr	r3, [pc, #84]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047f8:	7e18      	ldrb	r0, [r3, #24]
 80047fa:	4b14      	ldr	r3, [pc, #80]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 80047fc:	7e59      	ldrb	r1, [r3, #25]
 80047fe:	4b13      	ldr	r3, [pc, #76]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004800:	7e9a      	ldrb	r2, [r3, #26]
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004804:	7edb      	ldrb	r3, [r3, #27]
 8004806:	9310      	str	r3, [sp, #64]	@ 0x40
 8004808:	920f      	str	r2, [sp, #60]	@ 0x3c
 800480a:	910e      	str	r1, [sp, #56]	@ 0x38
 800480c:	900d      	str	r0, [sp, #52]	@ 0x34
 800480e:	940c      	str	r4, [sp, #48]	@ 0x30
 8004810:	950b      	str	r5, [sp, #44]	@ 0x2c
 8004812:	960a      	str	r6, [sp, #40]	@ 0x28
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	9109      	str	r1, [sp, #36]	@ 0x24
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	9208      	str	r2, [sp, #32]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	9307      	str	r3, [sp, #28]
 8004820:	697e      	ldr	r6, [r7, #20]
 8004822:	9606      	str	r6, [sp, #24]
 8004824:	69bd      	ldr	r5, [r7, #24]
 8004826:	9505      	str	r5, [sp, #20]
 8004828:	69fc      	ldr	r4, [r7, #28]
 800482a:	9404      	str	r4, [sp, #16]
 800482c:	6a38      	ldr	r0, [r7, #32]
 800482e:	9003      	str	r0, [sp, #12]
 8004830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004832:	9102      	str	r1, [sp, #8]
 8004834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004836:	9201      	str	r2, [sp, #4]
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	464b      	mov	r3, r9
 800483e:	4642      	mov	r2, r8
 8004840:	4671      	mov	r1, lr
 8004842:	4660      	mov	r0, ip
 8004844:	f7fc ff8c 	bl	8001760 <PC_CONTROL_RxEventCallback>
				break;
 8004848:	e068      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
 800484a:	bf00      	nop
 800484c:	200007e8 	.word	0x200007e8
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004856:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 8004858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485a:	3301      	adds	r3, #1
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	4b32      	ldr	r3, [pc, #200]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004862:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8004864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004866:	3303      	adds	r3, #3
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29a      	uxth	r2, r3
 800486c:	4b2f      	ldr	r3, [pc, #188]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 800486e:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8004870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004872:	3305      	adds	r3, #5
 8004874:	4a2d      	ldr	r2, [pc, #180]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004876:	1d90      	adds	r0, r2, #6
 8004878:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800487c:	4602      	mov	r2, r0
 800487e:	4619      	mov	r1, r3
 8004880:	f8d1 c000 	ldr.w	ip, [r1]
 8004884:	684e      	ldr	r6, [r1, #4]
 8004886:	688d      	ldr	r5, [r1, #8]
 8004888:	68c9      	ldr	r1, [r1, #12]
 800488a:	f8c2 c000 	str.w	ip, [r2]
 800488e:	6056      	str	r6, [r2, #4]
 8004890:	6095      	str	r5, [r2, #8]
 8004892:	60d1      	str	r1, [r2, #12]
 8004894:	3310      	adds	r3, #16
 8004896:	3010      	adds	r0, #16
 8004898:	42a3      	cmp	r3, r4
 800489a:	d1ef      	bne.n	800487c <HAL_UARTEx_RxEventCallback+0xff4>
 800489c:	4602      	mov	r2, r0
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	3336      	adds	r3, #54	@ 0x36
 80048a6:	4a21      	ldr	r2, [pc, #132]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048a8:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 80048ac:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80048b0:	4602      	mov	r2, r0
 80048b2:	4619      	mov	r1, r3
 80048b4:	f8d1 c000 	ldr.w	ip, [r1]
 80048b8:	684e      	ldr	r6, [r1, #4]
 80048ba:	688d      	ldr	r5, [r1, #8]
 80048bc:	68c9      	ldr	r1, [r1, #12]
 80048be:	f8c2 c000 	str.w	ip, [r2]
 80048c2:	6056      	str	r6, [r2, #4]
 80048c4:	6095      	str	r5, [r2, #8]
 80048c6:	60d1      	str	r1, [r2, #12]
 80048c8:	3310      	adds	r3, #16
 80048ca:	3010      	adds	r0, #16
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d1ef      	bne.n	80048b0 <HAL_UARTEx_RxEventCallback+0x1028>
 80048d0:	4602      	mov	r2, r0
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 80048d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d8:	3367      	adds	r3, #103	@ 0x67
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	4b13      	ldr	r3, [pc, #76]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048e6:	7818      	ldrb	r0, [r3, #0]
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048ea:	8859      	ldrh	r1, [r3, #2]
 80048ec:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048ee:	889a      	ldrh	r2, [r3, #4]
 80048f0:	4b0e      	ldr	r3, [pc, #56]	@ (800492c <HAL_UARTEx_RxEventCallback+0x10a4>)
 80048f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <HAL_UARTEx_RxEventCallback+0x10a8>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <HAL_UARTEx_RxEventCallback+0x10ac>)
 80048fe:	f000 f970 	bl	8004be2 <MINIMAP_DATA_RxEventCallback>
				break;
 8004902:	e00b      	b.n	800491c <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8004904:	4a0c      	ldr	r2, [pc, #48]	@ (8004938 <HAL_UARTEx_RxEventCallback+0x10b0>)
 8004906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	461a      	mov	r2, r3
 8004910:	f009 ff2c 	bl	800e76c <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 8004914:	4808      	ldr	r0, [pc, #32]	@ (8004938 <HAL_UARTEx_RxEventCallback+0x10b0>)
 8004916:	f000 f974 	bl	8004c02 <CUSTOM_MESSAGE_RxEventCallback>
				break;
 800491a:	bf00      	nop
 800491c:	46d5      	mov	sp, sl
 800491e:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 8004922:	bf00      	nop
 8004924:	3774      	adds	r7, #116	@ 0x74
 8004926:	46bd      	mov	sp, r7
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	2000077c 	.word	0x2000077c
 8004930:	200007b3 	.word	0x200007b3
 8004934:	20000782 	.word	0x20000782
 8004938:	20000824 	.word	0x20000824

0800493c <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
 8004946:	460b      	mov	r3, r1
 8004948:	71bb      	strb	r3, [r7, #6]
 800494a:	4613      	mov	r3, r2
 800494c:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8004952:	2300      	movs	r3, #0
 8004954:	73bb      	strb	r3, [r7, #14]
 8004956:	e013      	b.n	8004980 <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8004958:	79fa      	ldrb	r2, [r7, #7]
 800495a:	79b9      	ldrb	r1, [r7, #6]
 800495c:	7bbb      	ldrb	r3, [r7, #14]
 800495e:	440b      	add	r3, r1
 8004960:	fa42 f303 	asr.w	r3, r2, r3
 8004964:	f003 0201 	and.w	r2, r3, #1
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	b25a      	sxtb	r2, r3
 8004970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004974:	4313      	orrs	r3, r2
 8004976:	b25b      	sxtb	r3, r3
 8004978:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	3301      	adds	r3, #1
 800497e:	73bb      	strb	r3, [r7, #14]
 8004980:	7bba      	ldrb	r2, [r7, #14]
 8004982:	797b      	ldrb	r3, [r7, #5]
 8004984:	429a      	cmp	r2, r3
 8004986:	d3e7      	bcc.n	8004958 <UART_RM25_getBits+0x1c>
	}
	return result;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 80049ac:	b490      	push	{r4, r7}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	80fb      	strh	r3, [r7, #6]
 80049be:	4603      	mov	r3, r0
 80049c0:	80bb      	strh	r3, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	807b      	strh	r3, [r7, #2]
 80049c6:	4613      	mov	r3, r2
 80049c8:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc90      	pop	{r4, r7}
 80049d2:	4770      	bx	lr

080049d4 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 80049d4:	b490      	push	{r4, r7}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	71fb      	strb	r3, [r7, #7]
 80049e6:	4603      	mov	r3, r0
 80049e8:	71bb      	strb	r3, [r7, #6]
 80049ea:	460b      	mov	r3, r1
 80049ec:	717b      	strb	r3, [r7, #5]
 80049ee:	4613      	mov	r3, r2
 80049f0:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc90      	pop	{r4, r7}
 80049fa:	4770      	bx	lr

080049fc <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
 8004a06:	460b      	mov	r3, r1
 8004a08:	71bb      	strb	r3, [r7, #6]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 8004a1a:	b490      	push	{r4, r7}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4604      	mov	r4, r0
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	71fb      	strb	r3, [r7, #7]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71bb      	strb	r3, [r7, #6]
 8004a30:	460b      	mov	r3, r1
 8004a32:	717b      	strb	r3, [r7, #5]
 8004a34:	4613      	mov	r3, r2
 8004a36:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc90      	pop	{r4, r7}
 8004a40:	4770      	bx	lr

08004a42 <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	ed87 0a03 	vstr	s0, [r7, #12]
 8004a4c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004a50:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 8004a60:	b490      	push	{r4, r7}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	71fb      	strb	r3, [r7, #7]
 8004a72:	4603      	mov	r3, r0
 8004a74:	71bb      	strb	r3, [r7, #6]
 8004a76:	460b      	mov	r3, r1
 8004a78:	717b      	strb	r3, [r7, #5]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc90      	pop	{r4, r7}
 8004a86:	4770      	bx	lr

08004a88 <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	460a      	mov	r2, r1
 8004a92:	71fb      	strb	r3, [r7, #7]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <PROJECTILE_INFO_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	ed87 0a00 	vstr	s0, [r7]
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	71bb      	strb	r3, [r7, #6]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	80fb      	strh	r3, [r7, #6]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	80bb      	strh	r3, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
 8004b02:	460b      	mov	r3, r1
 8004b04:	80bb      	strh	r3, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8004b16:	b480      	push	{r7}
 8004b18:	b08b      	sub	sp, #44	@ 0x2c
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8004b20:	edc7 0a08 	vstr	s1, [r7, #32]
 8004b24:	ed87 1a07 	vstr	s2, [r7, #28]
 8004b28:	edc7 1a06 	vstr	s3, [r7, #24]
 8004b2c:	ed87 2a05 	vstr	s4, [r7, #20]
 8004b30:	edc7 2a04 	vstr	s5, [r7, #16]
 8004b34:	ed87 3a03 	vstr	s6, [r7, #12]
 8004b38:	edc7 3a02 	vstr	s7, [r7, #8]
 8004b3c:	ed87 4a01 	vstr	s8, [r7, #4]
 8004b40:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8004b44:	bf00      	nop
 8004b46:	372c      	adds	r7, #44	@ 0x2c
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 8004b50:	b490      	push	{r4, r7}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	4603      	mov	r3, r0
 8004b64:	71bb      	strb	r3, [r7, #6]
 8004b66:	460b      	mov	r3, r1
 8004b68:	717b      	strb	r3, [r7, #5]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc90      	pop	{r4, r7}
 8004b76:	4770      	bx	lr

08004b78 <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8004b78:	b490      	push	{r4, r7}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	80fb      	strh	r3, [r7, #6]
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	717b      	strb	r3, [r7, #5]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	713b      	strb	r3, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc90      	pop	{r4, r7}
 8004b9e:	4770      	bx	lr

08004ba0 <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460a      	mov	r2, r1
 8004baa:	71fb      	strb	r3, [r7, #7]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	ed87 0a03 	vstr	s0, [r7, #12]
 8004bc6:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	71bb      	strb	r3, [r7, #6]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	81bb      	strh	r3, [r7, #12]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <UART_RxEventCallback_RM25Passthrough>:

__weak void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]

}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8004c36:	4a04      	ldr	r2, [pc, #16]	@ (8004c48 <imu_pwm_set+0x1c>)
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40014400 	.word	0x40014400

08004c4c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8004c54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c58:	f006 fe28 	bl	800b8ac <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8004c5c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004d00 <imu_temp_control_task+0xb4>
 8004c60:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8004d04 <imu_temp_control_task+0xb8>
 8004c64:	4a28      	ldr	r2, [pc, #160]	@ (8004d08 <imu_temp_control_task+0xbc>)
 8004c66:	2100      	movs	r1, #0
 8004c68:	4828      	ldr	r0, [pc, #160]	@ (8004d0c <imu_temp_control_task+0xc0>)
 8004c6a:	f000 fef9 	bl	8005a60 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c6e:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <imu_temp_control_task+0xc4>)
 8004c70:	2210      	movs	r2, #16
 8004c72:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c74:	4826      	ldr	r0, [pc, #152]	@ (8004d10 <imu_temp_control_task+0xc4>)
 8004c76:	f004 f9b4 	bl	8008fe2 <HAL_SPI_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8004c80:	f000 fee8 	bl	8005a54 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8004c84:	2000      	movs	r0, #0
 8004c86:	f007 ff2f 	bl	800cae8 <pcTaskGetName>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f007 ffbf 	bl	800cc10 <xTaskGetHandle>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4a1f      	ldr	r2, [pc, #124]	@ (8004d14 <imu_temp_control_task+0xc8>)
 8004c96:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8004c98:	4b1f      	ldr	r3, [pc, #124]	@ (8004d18 <imu_temp_control_task+0xcc>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8004c9e:	bf00      	nop
 8004ca0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f008 fbdf 	bl	800d468 <ulTaskNotifyTake>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d1f7      	bne.n	8004ca0 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8004cb0:	f7fc fa08 	bl	80010c4 <IMU_get_temp>
 8004cb4:	eef0 7a40 	vmov.f32	s15, s0
 8004cb8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004d1c <imu_temp_control_task+0xd0>
 8004cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc0:	4812      	ldr	r0, [pc, #72]	@ (8004d0c <imu_temp_control_task+0xc0>)
 8004cc2:	f000 ff24 	bl	8005b0e <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8004cc6:	4b11      	ldr	r3, [pc, #68]	@ (8004d0c <imu_temp_control_task+0xc0>)
 8004cc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	d503      	bpl.n	8004cde <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <imu_temp_control_task+0xc0>)
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <imu_temp_control_task+0xc0>)
 8004ce0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce8:	ee17 3a90 	vmov	r3, s15
 8004cec:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff9b 	bl	8004c2c <imu_pwm_set>
        osDelay(5);
 8004cf6:	2005      	movs	r0, #5
 8004cf8:	f006 fdd8 	bl	800b8ac <osDelay>
    {
 8004cfc:	e7cf      	b.n	8004c9e <imu_temp_control_task+0x52>
 8004cfe:	bf00      	nop
 8004d00:	45898000 	.word	0x45898000
 8004d04:	458ca000 	.word	0x458ca000
 8004d08:	0800ff44 	.word	0x0800ff44
 8004d0c:	200009b4 	.word	0x200009b4
 8004d10:	20000aa4 	.word	0x20000aa4
 8004d14:	200009ac 	.word	0x200009ac
 8004d18:	200009b0 	.word	0x200009b0
 8004d1c:	42200000 	.word	0x42200000

08004d20 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8004d2a:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_GPIO_EXTI_Callback+0x54>)
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d11b      	bne.n	8004d6c <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8004d34:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d016      	beq.n	8004d6c <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004d3e:	f008 fb05 	bl	800d34c <xTaskGetSchedulerState>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d011      	beq.n	8004d6c <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	490c      	ldr	r1, [pc, #48]	@ (8004d80 <HAL_GPIO_EXTI_Callback+0x60>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f008 fbd6 	bl	800d500 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004d54:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <HAL_GPIO_EXTI_Callback+0x60>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_GPIO_EXTI_Callback+0x4c>
 8004d5c:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_GPIO_EXTI_Callback+0x64>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000000e 	.word	0x2000000e
 8004d78:	200009b0 	.word	0x200009b0
 8004d7c:	200009ac 	.word	0x200009ac
 8004d80:	200009fc 	.word	0x200009fc
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d8c:	f001 fdac 	bl	80068e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d90:	f000 f85a 	bl	8004e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d94:	f000 fccc 	bl	8005730 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d98:	f000 fc8c 	bl	80056b4 <MX_DMA_Init>
  MX_CAN1_Init();
 8004d9c:	f000 f8c0 	bl	8004f20 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004da0:	f000 f8f4 	bl	8004f8c <MX_CAN2_Init>
  MX_SPI1_Init();
 8004da4:	f000 f956 	bl	8005054 <MX_SPI1_Init>
  MX_TIM4_Init();
 8004da8:	f000 fa32 	bl	8005210 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004dac:	f000 fc02 	bl	80055b4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004db0:	f000 fc56 	bl	8005660 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004db4:	f000 f984 	bl	80050c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004db8:	f000 fb12 	bl	80053e0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8004dbc:	f000 fc24 	bl	8005608 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004dc0:	f000 fbaa 	bl	8005518 <MX_TIM10_Init>
  MX_I2C3_Init();
 8004dc4:	f000 f918 	bl	8004ff8 <MX_I2C3_Init>
  MX_TIM5_Init();
 8004dc8:	f000 fa9a 	bl	8005300 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004dcc:	f006 fc92 	bl	800b6f4 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8004dd0:	4a11      	ldr	r2, [pc, #68]	@ (8004e18 <main+0x90>)
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4811      	ldr	r0, [pc, #68]	@ (8004e1c <main+0x94>)
 8004dd6:	f006 fcd7 	bl	800b788 <osThreadNew>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4a10      	ldr	r2, [pc, #64]	@ (8004e20 <main+0x98>)
 8004dde:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8004de0:	4a10      	ldr	r2, [pc, #64]	@ (8004e24 <main+0x9c>)
 8004de2:	2100      	movs	r1, #0
 8004de4:	4810      	ldr	r0, [pc, #64]	@ (8004e28 <main+0xa0>)
 8004de6:	f006 fccf 	bl	800b788 <osThreadNew>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4a0f      	ldr	r2, [pc, #60]	@ (8004e2c <main+0xa4>)
 8004dee:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(StartChassisTask, NULL, &ChassisTask_attributes);
 8004df0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e30 <main+0xa8>)
 8004df2:	2100      	movs	r1, #0
 8004df4:	480f      	ldr	r0, [pc, #60]	@ (8004e34 <main+0xac>)
 8004df6:	f006 fcc7 	bl	800b788 <osThreadNew>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8004e38 <main+0xb0>)
 8004dfe:	6013      	str	r3, [r2, #0]

  /* creation of SentryAutonomy */
  SentryAutonomyHandle = osThreadNew(StartSentryAutonomy, NULL, &SentryAutonomy_attributes);
 8004e00:	4a0e      	ldr	r2, [pc, #56]	@ (8004e3c <main+0xb4>)
 8004e02:	2100      	movs	r1, #0
 8004e04:	480e      	ldr	r0, [pc, #56]	@ (8004e40 <main+0xb8>)
 8004e06:	f006 fcbf 	bl	800b788 <osThreadNew>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <main+0xbc>)
 8004e0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004e10:	f006 fc94 	bl	800b73c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <main+0x8c>
 8004e18:	0800ff50 	.word	0x0800ff50
 8004e1c:	0800593d 	.word	0x0800593d
 8004e20:	20000e5c 	.word	0x20000e5c
 8004e24:	0800ff74 	.word	0x0800ff74
 8004e28:	08004c4d 	.word	0x08004c4d
 8004e2c:	20000e60 	.word	0x20000e60
 8004e30:	0800ff98 	.word	0x0800ff98
 8004e34:	080059cd 	.word	0x080059cd
 8004e38:	20000e64 	.word	0x20000e64
 8004e3c:	0800ffbc 	.word	0x0800ffbc
 8004e40:	08005a45 	.word	0x08005a45
 8004e44:	20000e68 	.word	0x20000e68

08004e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b094      	sub	sp, #80	@ 0x50
 8004e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e4e:	f107 0320 	add.w	r3, r7, #32
 8004e52:	2230      	movs	r2, #48	@ 0x30
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f009 fbf6 	bl	800e648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <SystemClock_Config+0xd0>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <SystemClock_Config+0xd0>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7c:	4b26      	ldr	r3, [pc, #152]	@ (8004f18 <SystemClock_Config+0xd0>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <SystemClock_Config+0xd4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <SystemClock_Config+0xd4>)
 8004e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b20      	ldr	r3, [pc, #128]	@ (8004f1c <SystemClock_Config+0xd4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ea8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004eb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004eb8:	2306      	movs	r3, #6
 8004eba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004ebc:	23a8      	movs	r3, #168	@ 0xa8
 8004ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ec8:	f107 0320 	add.w	r3, r7, #32
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 fc09 	bl	80086e4 <HAL_RCC_OscConfig>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004ed8:	f000 fdbc 	bl	8005a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004edc:	230f      	movs	r3, #15
 8004ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ee8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ef2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	2105      	movs	r1, #5
 8004efa:	4618      	mov	r0, r3
 8004efc:	f003 fe6a 	bl	8008bd4 <HAL_RCC_ClockConfig>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f06:	f000 fda5 	bl	8005a54 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004f0a:	f003 ff49 	bl	8008da0 <HAL_RCC_EnableCSS>
}
 8004f0e:	bf00      	nop
 8004f10:	3750      	adds	r7, #80	@ 0x50
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40007000 	.word	0x40007000

08004f20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f26:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <MX_CAN1_Init+0x68>)
 8004f28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8004f2a:	4b16      	ldr	r3, [pc, #88]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004f30:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8004f3c:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f3e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8004f42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f46:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004f4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004f52:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004f5e:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004f70:	4804      	ldr	r0, [pc, #16]	@ (8004f84 <MX_CAN1_Init+0x64>)
 8004f72:	f001 fd2b 	bl	80069cc <HAL_CAN_Init>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004f7c:	f000 fd6a 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000a00 	.word	0x20000a00
 8004f88:	40006400 	.word	0x40006400

08004f8c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004f90:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004f92:	4a18      	ldr	r2, [pc, #96]	@ (8004ff4 <MX_CAN2_Init+0x68>)
 8004f94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8004f96:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004f98:	2203      	movs	r2, #3
 8004f9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004faa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8004fae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004fb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004fca:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004fdc:	4804      	ldr	r0, [pc, #16]	@ (8004ff0 <MX_CAN2_Init+0x64>)
 8004fde:	f001 fcf5 	bl	80069cc <HAL_CAN_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8004fe8:	f000 fd34 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000a28 	.word	0x20000a28
 8004ff4:	40006800 	.word	0x40006800

08004ff8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004ffc:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <MX_I2C3_Init+0x50>)
 8004ffe:	4a13      	ldr	r2, [pc, #76]	@ (800504c <MX_I2C3_Init+0x54>)
 8005000:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8005002:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005004:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <MX_I2C3_Init+0x58>)
 8005006:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005008:	4b0f      	ldr	r3, [pc, #60]	@ (8005048 <MX_I2C3_Init+0x50>)
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800500e:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005010:	2200      	movs	r2, #0
 8005012:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800501a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <MX_I2C3_Init+0x50>)
 800501e:	2200      	movs	r2, #0
 8005020:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005022:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005028:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <MX_I2C3_Init+0x50>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005030:	2200      	movs	r2, #0
 8005032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005034:	4804      	ldr	r0, [pc, #16]	@ (8005048 <MX_I2C3_Init+0x50>)
 8005036:	f003 fa11 	bl	800845c <HAL_I2C_Init>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005040:	f000 fd08 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000a50 	.word	0x20000a50
 800504c:	40005c00 	.word	0x40005c00
 8005050:	00061a80 	.word	0x00061a80

08005054 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005058:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <MX_SPI1_Init+0x64>)
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <MX_SPI1_Init+0x68>)
 800505c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800505e:	4b16      	ldr	r3, [pc, #88]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005060:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005066:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <MX_SPI1_Init+0x64>)
 800506e:	2200      	movs	r2, #0
 8005070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005072:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005074:	2202      	movs	r2, #2
 8005076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005078:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <MX_SPI1_Init+0x64>)
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800507e:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005088:	2238      	movs	r2, #56	@ 0x38
 800508a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <MX_SPI1_Init+0x64>)
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005092:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <MX_SPI1_Init+0x64>)
 8005094:	2200      	movs	r2, #0
 8005096:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005098:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <MX_SPI1_Init+0x64>)
 800509a:	2200      	movs	r2, #0
 800509c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <MX_SPI1_Init+0x64>)
 80050a0:	220a      	movs	r2, #10
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80050a4:	4804      	ldr	r0, [pc, #16]	@ (80050b8 <MX_SPI1_Init+0x64>)
 80050a6:	f003 ff9c 	bl	8008fe2 <HAL_SPI_Init>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80050b0:	f000 fcd0 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80050b4:	bf00      	nop
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000aa4 	.word	0x20000aa4
 80050bc:	40013000 	.word	0x40013000

080050c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b092      	sub	sp, #72	@ 0x48
 80050c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
 80050e0:	615a      	str	r2, [r3, #20]
 80050e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	2220      	movs	r2, #32
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f009 faac 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <MX_TIM1_Init+0x148>)
 80050f2:	4a46      	ldr	r2, [pc, #280]	@ (800520c <MX_TIM1_Init+0x14c>)
 80050f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80050f6:	4b44      	ldr	r3, [pc, #272]	@ (8005208 <MX_TIM1_Init+0x148>)
 80050f8:	2253      	movs	r2, #83	@ 0x53
 80050fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050fc:	4b42      	ldr	r3, [pc, #264]	@ (8005208 <MX_TIM1_Init+0x148>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005102:	4b41      	ldr	r3, [pc, #260]	@ (8005208 <MX_TIM1_Init+0x148>)
 8005104:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <MX_TIM1_Init+0x148>)
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005110:	4b3d      	ldr	r3, [pc, #244]	@ (8005208 <MX_TIM1_Init+0x148>)
 8005112:	2200      	movs	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005116:	4b3c      	ldr	r3, [pc, #240]	@ (8005208 <MX_TIM1_Init+0x148>)
 8005118:	2200      	movs	r2, #0
 800511a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800511c:	483a      	ldr	r0, [pc, #232]	@ (8005208 <MX_TIM1_Init+0x148>)
 800511e:	f004 fabe 	bl	800969e <HAL_TIM_PWM_Init>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005128:	f000 fc94 	bl	8005a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800512c:	2300      	movs	r3, #0
 800512e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005130:	2300      	movs	r3, #0
 8005132:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005134:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005138:	4619      	mov	r1, r3
 800513a:	4833      	ldr	r0, [pc, #204]	@ (8005208 <MX_TIM1_Init+0x148>)
 800513c:	f004 ff78 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005146:	f000 fc85 	bl	8005a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800514a:	2360      	movs	r3, #96	@ 0x60
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005152:	2300      	movs	r3, #0
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005156:	2300      	movs	r3, #0
 8005158:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005162:	2300      	movs	r3, #0
 8005164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800516a:	2200      	movs	r2, #0
 800516c:	4619      	mov	r1, r3
 800516e:	4826      	ldr	r0, [pc, #152]	@ (8005208 <MX_TIM1_Init+0x148>)
 8005170:	f004 fae4 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800517a:	f000 fc6b 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800517e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005182:	2204      	movs	r2, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4820      	ldr	r0, [pc, #128]	@ (8005208 <MX_TIM1_Init+0x148>)
 8005188:	f004 fad8 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005192:	f000 fc5f 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519a:	2208      	movs	r2, #8
 800519c:	4619      	mov	r1, r3
 800519e:	481a      	ldr	r0, [pc, #104]	@ (8005208 <MX_TIM1_Init+0x148>)
 80051a0:	f004 facc 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80051aa:	f000 fc53 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80051ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051b2:	220c      	movs	r2, #12
 80051b4:	4619      	mov	r1, r3
 80051b6:	4814      	ldr	r0, [pc, #80]	@ (8005208 <MX_TIM1_Init+0x148>)
 80051b8:	f004 fac0 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80051c2:	f000 fc47 	bl	8005a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4807      	ldr	r0, [pc, #28]	@ (8005208 <MX_TIM1_Init+0x148>)
 80051ea:	f004 ff9d 	bl	800a128 <HAL_TIMEx_ConfigBreakDeadTime>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80051f4:	f000 fc2e 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051f8:	4803      	ldr	r0, [pc, #12]	@ (8005208 <MX_TIM1_Init+0x148>)
 80051fa:	f001 f805 	bl	8006208 <HAL_TIM_MspPostInit>

}
 80051fe:	bf00      	nop
 8005200:	3748      	adds	r7, #72	@ 0x48
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000afc 	.word	0x20000afc
 800520c:	40010000 	.word	0x40010000

08005210 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	@ 0x38
 8005214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005224:	f107 0320 	add.w	r3, r7, #32
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
 800523c:	615a      	str	r2, [r3, #20]
 800523e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005240:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005242:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <MX_TIM4_Init+0xec>)
 8005244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005246:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8005252:	4b29      	ldr	r3, [pc, #164]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005254:	f245 2207 	movw	r2, #20999	@ 0x5207
 8005258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525a:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005262:	2280      	movs	r2, #128	@ 0x80
 8005264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005266:	4824      	ldr	r0, [pc, #144]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005268:	f004 f9ca 	bl	8009600 <HAL_TIM_Base_Init>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005272:	f000 fbef 	bl	8005a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800527a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800527c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005280:	4619      	mov	r1, r3
 8005282:	481d      	ldr	r0, [pc, #116]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005284:	f004 fb1c 	bl	80098c0 <HAL_TIM_ConfigClockSource>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800528e:	f000 fbe1 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005292:	4819      	ldr	r0, [pc, #100]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 8005294:	f004 fa03 	bl	800969e <HAL_TIM_PWM_Init>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800529e:	f000 fbd9 	bl	8005a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80052aa:	f107 0320 	add.w	r3, r7, #32
 80052ae:	4619      	mov	r1, r3
 80052b0:	4811      	ldr	r0, [pc, #68]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 80052b2:	f004 febd 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80052bc:	f000 fbca 	bl	8005a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052c0:	2360      	movs	r3, #96	@ 0x60
 80052c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80052c4:	f642 1303 	movw	r3, #10499	@ 0x2903
 80052c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	2208      	movs	r2, #8
 80052d6:	4619      	mov	r1, r3
 80052d8:	4807      	ldr	r0, [pc, #28]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 80052da:	f004 fa2f 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80052e4:	f000 fbb6 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80052e8:	4803      	ldr	r0, [pc, #12]	@ (80052f8 <MX_TIM4_Init+0xe8>)
 80052ea:	f000 ff8d 	bl	8006208 <HAL_TIM_MspPostInit>

}
 80052ee:	bf00      	nop
 80052f0:	3738      	adds	r7, #56	@ 0x38
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000b44 	.word	0x20000b44
 80052fc:	40000800 	.word	0x40000800

08005300 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	@ 0x28
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005306:	f107 0320 	add.w	r3, r7, #32
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	615a      	str	r2, [r3, #20]
 8005320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005322:	4b2d      	ldr	r3, [pc, #180]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 8005324:	4a2d      	ldr	r2, [pc, #180]	@ (80053dc <MX_TIM5_Init+0xdc>)
 8005326:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 800532a:	222a      	movs	r2, #42	@ 0x2a
 800532c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532e:	4b2a      	ldr	r3, [pc, #168]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8005334:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 8005336:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800533a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800533c:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005348:	4823      	ldr	r0, [pc, #140]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 800534a:	f004 f9a8 	bl	800969e <HAL_TIM_PWM_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005354:	f000 fb7e 	bl	8005a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005360:	f107 0320 	add.w	r3, r7, #32
 8005364:	4619      	mov	r1, r3
 8005366:	481c      	ldr	r0, [pc, #112]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 8005368:	f004 fe62 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8005372:	f000 fb6f 	bl	8005a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005376:	2360      	movs	r3, #96	@ 0x60
 8005378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	2200      	movs	r2, #0
 800538a:	4619      	mov	r1, r3
 800538c:	4812      	ldr	r0, [pc, #72]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 800538e:	f004 f9d5 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005398:	f000 fb5c 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	2204      	movs	r2, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	480d      	ldr	r0, [pc, #52]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 80053a4:	f004 f9ca 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80053ae:	f000 fb51 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	2208      	movs	r2, #8
 80053b6:	4619      	mov	r1, r3
 80053b8:	4807      	ldr	r0, [pc, #28]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 80053ba:	f004 f9bf 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80053c4:	f000 fb46 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80053c8:	4803      	ldr	r0, [pc, #12]	@ (80053d8 <MX_TIM5_Init+0xd8>)
 80053ca:	f000 ff1d 	bl	8006208 <HAL_TIM_MspPostInit>

}
 80053ce:	bf00      	nop
 80053d0:	3728      	adds	r7, #40	@ 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000b8c 	.word	0x20000b8c
 80053dc:	40000c00 	.word	0x40000c00

080053e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b092      	sub	sp, #72	@ 0x48
 80053e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
 8005400:	615a      	str	r2, [r3, #20]
 8005402:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	2220      	movs	r2, #32
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f009 f91c 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005410:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005412:	4a40      	ldr	r2, [pc, #256]	@ (8005514 <MX_TIM8_Init+0x134>)
 8005414:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8005416:	4b3e      	ldr	r3, [pc, #248]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005418:	2253      	movs	r2, #83	@ 0x53
 800541a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541c:	4b3c      	ldr	r3, [pc, #240]	@ (8005510 <MX_TIM8_Init+0x130>)
 800541e:	2200      	movs	r2, #0
 8005420:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005422:	4b3b      	ldr	r3, [pc, #236]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005424:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005428:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800542a:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <MX_TIM8_Init+0x130>)
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005430:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005432:	2200      	movs	r2, #0
 8005434:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005436:	4b36      	ldr	r3, [pc, #216]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005438:	2280      	movs	r2, #128	@ 0x80
 800543a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800543c:	4834      	ldr	r0, [pc, #208]	@ (8005510 <MX_TIM8_Init+0x130>)
 800543e:	f004 f92e 	bl	800969e <HAL_TIM_PWM_Init>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8005448:	f000 fb04 	bl	8005a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800544c:	2300      	movs	r3, #0
 800544e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005450:	2300      	movs	r3, #0
 8005452:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005454:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005458:	4619      	mov	r1, r3
 800545a:	482d      	ldr	r0, [pc, #180]	@ (8005510 <MX_TIM8_Init+0x130>)
 800545c:	f004 fde8 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8005466:	f000 faf5 	bl	8005a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800546a:	2360      	movs	r3, #96	@ 0x60
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005472:	2300      	movs	r3, #0
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005476:	2300      	movs	r3, #0
 8005478:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800548a:	2200      	movs	r2, #0
 800548c:	4619      	mov	r1, r3
 800548e:	4820      	ldr	r0, [pc, #128]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005490:	f004 f954 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800549a:	f000 fadb 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800549e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054a2:	2204      	movs	r2, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	481a      	ldr	r0, [pc, #104]	@ (8005510 <MX_TIM8_Init+0x130>)
 80054a8:	f004 f948 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80054b2:	f000 facf 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054ba:	2208      	movs	r2, #8
 80054bc:	4619      	mov	r1, r3
 80054be:	4814      	ldr	r0, [pc, #80]	@ (8005510 <MX_TIM8_Init+0x130>)
 80054c0:	f004 f93c 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80054ca:	f000 fac3 	bl	8005a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4807      	ldr	r0, [pc, #28]	@ (8005510 <MX_TIM8_Init+0x130>)
 80054f2:	f004 fe19 	bl	800a128 <HAL_TIMEx_ConfigBreakDeadTime>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80054fc:	f000 faaa 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005500:	4803      	ldr	r0, [pc, #12]	@ (8005510 <MX_TIM8_Init+0x130>)
 8005502:	f000 fe81 	bl	8006208 <HAL_TIM_MspPostInit>

}
 8005506:	bf00      	nop
 8005508:	3748      	adds	r7, #72	@ 0x48
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000bd4 	.word	0x20000bd4
 8005514:	40010400 	.word	0x40010400

08005518 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
 800552c:	615a      	str	r2, [r3, #20]
 800552e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005530:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005532:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <MX_TIM10_Init+0x98>)
 8005534:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800553c:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <MX_TIM10_Init+0x94>)
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8005542:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005544:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005548:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800554a:	4b18      	ldr	r3, [pc, #96]	@ (80055ac <MX_TIM10_Init+0x94>)
 800554c:	2200      	movs	r2, #0
 800554e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005550:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005552:	2200      	movs	r2, #0
 8005554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005556:	4815      	ldr	r0, [pc, #84]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005558:	f004 f852 	bl	8009600 <HAL_TIM_Base_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005562:	f000 fa77 	bl	8005a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005566:	4811      	ldr	r0, [pc, #68]	@ (80055ac <MX_TIM10_Init+0x94>)
 8005568:	f004 f899 	bl	800969e <HAL_TIM_PWM_Init>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005572:	f000 fa6f 	bl	8005a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005576:	2360      	movs	r3, #96	@ 0x60
 8005578:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	2200      	movs	r2, #0
 800558a:	4619      	mov	r1, r3
 800558c:	4807      	ldr	r0, [pc, #28]	@ (80055ac <MX_TIM10_Init+0x94>)
 800558e:	f004 f8d5 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005598:	f000 fa5c 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800559c:	4803      	ldr	r0, [pc, #12]	@ (80055ac <MX_TIM10_Init+0x94>)
 800559e:	f000 fe33 	bl	8006208 <HAL_TIM_MspPostInit>

}
 80055a2:	bf00      	nop
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000c1c 	.word	0x20000c1c
 80055b0:	40014400 	.word	0x40014400

080055b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055b8:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055ba:	4a12      	ldr	r2, [pc, #72]	@ (8005604 <MX_USART1_UART_Init+0x50>)
 80055bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055be:	4b10      	ldr	r3, [pc, #64]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055d8:	4b09      	ldr	r3, [pc, #36]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055da:	220c      	movs	r2, #12
 80055dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055de:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055ea:	4805      	ldr	r0, [pc, #20]	@ (8005600 <MX_USART1_UART_Init+0x4c>)
 80055ec:	f004 fdee 	bl	800a1cc <HAL_UART_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80055f6:	f000 fa2d 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000c64 	.word	0x20000c64
 8005604:	40011000 	.word	0x40011000

08005608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800560c:	4b11      	ldr	r3, [pc, #68]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 800560e:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <MX_USART3_UART_Init+0x50>)
 8005610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 8005614:	4a11      	ldr	r2, [pc, #68]	@ (800565c <MX_USART3_UART_Init+0x54>)
 8005616:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005618:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 8005620:	2200      	movs	r2, #0
 8005622:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 8005626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800562a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 800562e:	220c      	movs	r2, #12
 8005630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005638:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800563e:	4805      	ldr	r0, [pc, #20]	@ (8005654 <MX_USART3_UART_Init+0x4c>)
 8005640:	f004 fdc4 	bl	800a1cc <HAL_UART_Init>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800564a:	f000 fa03 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000cac 	.word	0x20000cac
 8005658:	40004800 	.word	0x40004800
 800565c:	000186a0 	.word	0x000186a0

08005660 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005666:	4a12      	ldr	r2, [pc, #72]	@ (80056b0 <MX_USART6_UART_Init+0x50>)
 8005668:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800566a:	4b10      	ldr	r3, [pc, #64]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 800566c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005670:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005672:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800567e:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005684:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005686:	220c      	movs	r2, #12
 8005688:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800568a:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005692:	2200      	movs	r2, #0
 8005694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005696:	4805      	ldr	r0, [pc, #20]	@ (80056ac <MX_USART6_UART_Init+0x4c>)
 8005698:	f004 fd98 	bl	800a1cc <HAL_UART_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80056a2:	f000 f9d7 	bl	8005a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000cf4 	.word	0x20000cf4
 80056b0:	40011400 	.word	0x40011400

080056b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <MX_DMA_Init+0x78>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <MX_DMA_Init+0x78>)
 80056c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ca:	4b18      	ldr	r3, [pc, #96]	@ (800572c <MX_DMA_Init+0x78>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <MX_DMA_Init+0x78>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	4a13      	ldr	r2, [pc, #76]	@ (800572c <MX_DMA_Init+0x78>)
 80056e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056e6:	4b11      	ldr	r3, [pc, #68]	@ (800572c <MX_DMA_Init+0x78>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2105      	movs	r1, #5
 80056f6:	200c      	movs	r0, #12
 80056f8:	f002 f8a9 	bl	800784e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80056fc:	200c      	movs	r0, #12
 80056fe:	f002 f8c2 	bl	8007886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005702:	2200      	movs	r2, #0
 8005704:	2105      	movs	r1, #5
 8005706:	2039      	movs	r0, #57	@ 0x39
 8005708:	f002 f8a1 	bl	800784e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800570c:	2039      	movs	r0, #57	@ 0x39
 800570e:	f002 f8ba 	bl	8007886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8005712:	2200      	movs	r2, #0
 8005714:	2105      	movs	r1, #5
 8005716:	203a      	movs	r0, #58	@ 0x3a
 8005718:	f002 f899 	bl	800784e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800571c:	203a      	movs	r0, #58	@ 0x3a
 800571e:	f002 f8b2 	bl	8007886 <HAL_NVIC_EnableIRQ>

}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800

08005730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	@ 0x38
 8005734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	4b77      	ldr	r3, [pc, #476]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	4a76      	ldr	r2, [pc, #472]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	6313      	str	r3, [r2, #48]	@ 0x30
 8005756:	4b74      	ldr	r3, [pc, #464]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	4b70      	ldr	r3, [pc, #448]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	4a6f      	ldr	r2, [pc, #444]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 800576c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005770:	6313      	str	r3, [r2, #48]	@ 0x30
 8005772:	4b6d      	ldr	r3, [pc, #436]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	4b69      	ldr	r3, [pc, #420]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	4a68      	ldr	r2, [pc, #416]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6313      	str	r3, [r2, #48]	@ 0x30
 800578e:	4b66      	ldr	r3, [pc, #408]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	4b62      	ldr	r3, [pc, #392]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a2:	4a61      	ldr	r2, [pc, #388]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	4a5a      	ldr	r2, [pc, #360]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c6:	4b58      	ldr	r3, [pc, #352]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	4b54      	ldr	r3, [pc, #336]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	4a53      	ldr	r2, [pc, #332]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e2:	4b51      	ldr	r3, [pc, #324]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	4b46      	ldr	r3, [pc, #280]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	4a45      	ldr	r2, [pc, #276]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	6313      	str	r3, [r2, #48]	@ 0x30
 800581a:	4b43      	ldr	r3, [pc, #268]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005826:	2300      	movs	r3, #0
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	4b3f      	ldr	r3, [pc, #252]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	4a3e      	ldr	r2, [pc, #248]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005830:	f043 0310 	orr.w	r3, r3, #16
 8005834:	6313      	str	r3, [r2, #48]	@ 0x30
 8005836:	4b3c      	ldr	r3, [pc, #240]	@ (8005928 <MX_GPIO_Init+0x1f8>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8005842:	2200      	movs	r2, #0
 8005844:	2140      	movs	r1, #64	@ 0x40
 8005846:	4839      	ldr	r0, [pc, #228]	@ (800592c <MX_GPIO_Init+0x1fc>)
 8005848:	f002 fdd6 	bl	80083f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	2110      	movs	r1, #16
 8005850:	4837      	ldr	r0, [pc, #220]	@ (8005930 <MX_GPIO_Init+0x200>)
 8005852:	f002 fdd1 	bl	80083f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005856:	2200      	movs	r2, #0
 8005858:	2101      	movs	r1, #1
 800585a:	4836      	ldr	r0, [pc, #216]	@ (8005934 <MX_GPIO_Init+0x204>)
 800585c:	f002 fdcc 	bl	80083f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005864:	2301      	movs	r3, #1
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005868:	2300      	movs	r3, #0
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800586c:	2300      	movs	r3, #0
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005874:	4619      	mov	r1, r3
 8005876:	482d      	ldr	r0, [pc, #180]	@ (800592c <MX_GPIO_Init+0x1fc>)
 8005878:	f002 fc22 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800587c:	2308      	movs	r3, #8
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005880:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005886:	2300      	movs	r3, #0
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800588a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800588e:	4619      	mov	r1, r3
 8005890:	4826      	ldr	r0, [pc, #152]	@ (800592c <MX_GPIO_Init+0x1fc>)
 8005892:	f002 fc15 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005896:	2301      	movs	r3, #1
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800589a:	2300      	movs	r3, #0
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058a6:	4619      	mov	r1, r3
 80058a8:	4821      	ldr	r0, [pc, #132]	@ (8005930 <MX_GPIO_Init+0x200>)
 80058aa:	f002 fc09 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80058ae:	2310      	movs	r3, #16
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058b2:	2301      	movs	r3, #1
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ba:	2300      	movs	r3, #0
 80058bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c2:	4619      	mov	r1, r3
 80058c4:	481a      	ldr	r0, [pc, #104]	@ (8005930 <MX_GPIO_Init+0x200>)
 80058c6:	f002 fbfb 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80058ca:	2330      	movs	r3, #48	@ 0x30
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058dc:	4619      	mov	r1, r3
 80058de:	4816      	ldr	r0, [pc, #88]	@ (8005938 <MX_GPIO_Init+0x208>)
 80058e0:	f002 fbee 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80058e4:	2301      	movs	r3, #1
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058e8:	2301      	movs	r3, #1
 80058ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f0:	2300      	movs	r3, #0
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f8:	4619      	mov	r1, r3
 80058fa:	480e      	ldr	r0, [pc, #56]	@ (8005934 <MX_GPIO_Init+0x204>)
 80058fc:	f002 fbe0 	bl	80080c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005900:	2200      	movs	r2, #0
 8005902:	2105      	movs	r1, #5
 8005904:	2009      	movs	r0, #9
 8005906:	f001 ffa2 	bl	800784e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800590a:	2009      	movs	r0, #9
 800590c:	f001 ffbb 	bl	8007886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005910:	2200      	movs	r2, #0
 8005912:	2105      	movs	r1, #5
 8005914:	200a      	movs	r0, #10
 8005916:	f001 ff9a 	bl	800784e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800591a:	200a      	movs	r0, #10
 800591c:	f001 ffb3 	bl	8007886 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005920:	bf00      	nop
 8005922:	3738      	adds	r7, #56	@ 0x38
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40023800 	.word	0x40023800
 800592c:	40021800 	.word	0x40021800
 8005930:	40020000 	.word	0x40020000
 8005934:	40020400 	.word	0x40020400
 8005938:	40020800 	.word	0x40020800

0800593c <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]

	DBUS_Rx_Init(&huart3);
 8005948:	481c      	ldr	r0, [pc, #112]	@ (80059bc <StartFlowManager+0x80>)
 800594a:	f7fc ff51 	bl	80027f0 <DBUS_Rx_Init>

	UART_Ex_Init(&huart1);
 800594e:	481c      	ldr	r0, [pc, #112]	@ (80059c0 <StartFlowManager+0x84>)
 8005950:	f7fd ff8a 	bl	8003868 <UART_Ex_Init>
	UART_Ex_Init(&huart6);
 8005954:	481b      	ldr	r0, [pc, #108]	@ (80059c4 <StartFlowManager+0x88>)
 8005956:	f7fd ff87 	bl	8003868 <UART_Ex_Init>
	CAN_Init();
 800595a:	f7fc ff0d 	bl	8002778 <CAN_Init>
	BMI088_gyro_init();
 800595e:	f7fb fb19 	bl	8000f94 <BMI088_gyro_init>
	int16_t axis2[3] = {0, 0, 0};
 8005962:	2300      	movs	r3, #0
 8005964:	813b      	strh	r3, [r7, #8]
 8005966:	2300      	movs	r3, #0
 8005968:	817b      	strh	r3, [r7, #10]
 800596a:	2300      	movs	r3, #0
 800596c:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 800596e:	f7fc ff71 	bl	8002854 <DBUS_Update>
	  AllBufferCalculations(CAL_getBufferEnergy(), 0, axis2);
 8005972:	f7fc f9db 	bl	8001d2c <CAL_getBufferEnergy>
 8005976:	4603      	mov	r3, r0
 8005978:	4618      	mov	r0, r3
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	461a      	mov	r2, r3
 8005980:	2100      	movs	r1, #0
 8005982:	f7fd fd15 	bl	80033b0 <AllBufferCalculations>

	  // UART_Printf(&huart1, "%d %d\r\n", CAL_getBufferEnergy(), CAL_getPowerLimit());

	  if(iCount%3==0){
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	4b0f      	ldr	r3, [pc, #60]	@ (80059c8 <StartFlowManager+0x8c>)
 800598a:	fba3 1302 	umull	r1, r3, r3, r2
 800598e:	0859      	lsrs	r1, r3, #1
 8005990:	460b      	mov	r3, r1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	440b      	add	r3, r1
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <StartFlowManager+0x66>
		  CAL_Update();
 800599e:	f7fb fce1 	bl	8001364 <CAL_Update>


	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2bff      	cmp	r3, #255	@ 0xff
 80059a6:	d003      	beq.n	80059b0 <StartFlowManager+0x74>
		  iCount++;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	3301      	adds	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	e001      	b.n	80059b4 <StartFlowManager+0x78>
	  }else{
		  iCount = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
	  }
	  osDelay(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f005 ff79 	bl	800b8ac <osDelay>
	  DBUS_Update();
 80059ba:	e7d8      	b.n	800596e <StartFlowManager+0x32>
 80059bc:	20000cac 	.word	0x20000cac
 80059c0:	20000c64 	.word	0x20000c64
 80059c4:	20000cf4 	.word	0x20000cf4
 80059c8:	aaaaaaab 	.word	0xaaaaaaab

080059cc <StartChassisTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassisTask */
void StartChassisTask(void *argument)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassisTask */
	PID_preset_t test = {5.0, 0.0, 0.0};
 80059d4:	4b18      	ldr	r3, [pc, #96]	@ (8005a38 <StartChassisTask+0x6c>)
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
	int16_t axis[3] = {0, 0, 0};
 80059e4:	2300      	movs	r3, #0
 80059e6:	81bb      	strh	r3, [r7, #12]
 80059e8:	2300      	movs	r3, #0
 80059ea:	81fb      	strh	r3, [r7, #14]
 80059ec:	2300      	movs	r3, #0
 80059ee:	823b      	strh	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  axis[0] = CAL_getFrontBack();
 80059f0:	f7fc f9a8 	bl	8001d44 <CAL_getFrontBack>
 80059f4:	4603      	mov	r3, r0
 80059f6:	81bb      	strh	r3, [r7, #12]
	  axis[1] = CAL_getRightLeft();
 80059f8:	f7fc f9b0 	bl	8001d5c <CAL_getRightLeft>
 80059fc:	4603      	mov	r3, r0
 80059fe:	81fb      	strh	r3, [r7, #14]
	  axis[2] = CAL_getChassisSpin();
 8005a00:	f7fc f9b8 	bl	8001d74 <CAL_getChassisSpin>
 8005a04:	4603      	mov	r3, r0
 8005a06:	823b      	strh	r3, [r7, #16]
	  // UART_Printf(&huart1, "%d\r\n", CAL_getTurretSpin());
	  Loop(axis, CAL_getTurretSpin());
 8005a08:	f7fc f9c0 	bl	8001d8c <CAL_getTurretSpin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f107 030c 	add.w	r3, r7, #12
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd fa4e 	bl	8002eb8 <Loop>
	  UART_Printf(&huart1, "%d\r\n", CAL_getCurrentStage());
 8005a1c:	f7fc f97a 	bl	8001d14 <CAL_getCurrentStage>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	4905      	ldr	r1, [pc, #20]	@ (8005a3c <StartChassisTask+0x70>)
 8005a26:	4806      	ldr	r0, [pc, #24]	@ (8005a40 <StartChassisTask+0x74>)
 8005a28:	f7fd fef6 	bl	8003818 <UART_Printf>
    osDelay(5);
 8005a2c:	2005      	movs	r0, #5
 8005a2e:	f005 ff3d 	bl	800b8ac <osDelay>
	  axis[0] = CAL_getFrontBack();
 8005a32:	bf00      	nop
 8005a34:	e7dc      	b.n	80059f0 <StartChassisTask+0x24>
 8005a36:	bf00      	nop
 8005a38:	40a00000 	.word	0x40a00000
 8005a3c:	0800fd24 	.word	0x0800fd24
 8005a40:	20000c64 	.word	0x20000c64

08005a44 <StartSentryAutonomy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSentryAutonomy */
void StartSentryAutonomy(void *argument)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSentryAutonomy */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8005a4c:	2005      	movs	r0, #5
 8005a4e:	f005 ff2d 	bl	800b8ac <osDelay>
 8005a52:	e7fb      	b.n	8005a4c <StartSentryAutonomy+0x8>

08005a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a58:	b672      	cpsid	i
}
 8005a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <Error_Handler+0x8>

08005a60 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6178      	str	r0, [r7, #20]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	60fa      	str	r2, [r7, #12]
 8005a6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a70:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a74:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d042      	beq.n	8005b02 <PID_init+0xa2>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d03f      	beq.n	8005b02 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	7cfa      	ldrb	r2, [r7, #19]
 8005a86:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3304      	adds	r3, #4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	621a      	str	r2, [r3, #32]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b00:	e000      	b.n	8005b04 <PID_init+0xa4>
        return;
 8005b02:	bf00      	nop
}
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b1a:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <PID_calc+0x1c>
    {
        return 0.0f;
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e130      	b.n	8005d8c <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 8095 	bne.w	8005c8c <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	dd04      	ble.n	8005bf4 <PID_calc+0xe6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bf2:	e014      	b.n	8005c1e <PID_calc+0x110>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c00:	eef1 7a67 	vneg.f32	s15, s15
 8005c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	d507      	bpl.n	8005c1e <PID_calc+0x110>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c14:	eef1 7a67 	vneg.f32	s15, s15
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	ed93 7a08 	vldr	s14, [r3, #32]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c52:	dd04      	ble.n	8005c5e <PID_calc+0x150>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	621a      	str	r2, [r3, #32]
 8005c5c:	e094      	b.n	8005d88 <PID_calc+0x27a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	ed93 7a08 	vldr	s14, [r3, #32]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c6a:	eef1 7a67 	vneg.f32	s15, s15
 8005c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	f140 8087 	bpl.w	8005d88 <PID_calc+0x27a>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c80:	eef1 7a67 	vneg.f32	s15, s15
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	edc3 7a08 	vstr	s15, [r3, #32]
 8005c8a:	e07d      	b.n	8005d88 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d179      	bne.n	8005d88 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ca6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ce6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	ed93 7a03 	vldr	s14, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005d26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	dd04      	ble.n	8005d5e <PID_calc+0x250>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]
 8005d5c:	e014      	b.n	8005d88 <PID_calc+0x27a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d6a:	eef1 7a67 	vneg.f32	s15, s15
 8005d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	d507      	bpl.n	8005d88 <PID_calc+0x27a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d7e:	eef1 7a67 	vneg.f32	s15, s15
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
}
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eeb0 0a67 	vmov.f32	s0, s15
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_MspInit+0x54>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <HAL_MspInit+0x54>)
 8005db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005db6:	4b0f      	ldr	r3, [pc, #60]	@ (8005df4 <HAL_MspInit+0x54>)
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_MspInit+0x54>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	4a0a      	ldr	r2, [pc, #40]	@ (8005df4 <HAL_MspInit+0x54>)
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dd2:	4b08      	ldr	r3, [pc, #32]	@ (8005df4 <HAL_MspInit+0x54>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	210f      	movs	r1, #15
 8005de2:	f06f 0001 	mvn.w	r0, #1
 8005de6:	f001 fd32 	bl	800784e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e00:	f107 031c 	add.w	r3, r7, #28
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a4a      	ldr	r2, [pc, #296]	@ (8005f40 <HAL_CAN_MspInit+0x148>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d13d      	bne.n	8005e96 <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4a48      	ldr	r2, [pc, #288]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005e22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005e24:	4b47      	ldr	r3, [pc, #284]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10d      	bne.n	8005e48 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	4b45      	ldr	r3, [pc, #276]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	4a44      	ldr	r2, [pc, #272]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e3c:	4b42      	ldr	r3, [pc, #264]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	4a3d      	ldr	r2, [pc, #244]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e52:	f043 0308 	orr.w	r3, r3, #8
 8005e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e58:	4b3b      	ldr	r3, [pc, #236]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e64:	2303      	movs	r3, #3
 8005e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e70:	2303      	movs	r3, #3
 8005e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005e74:	2309      	movs	r3, #9
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e78:	f107 031c 	add.w	r3, r7, #28
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4833      	ldr	r0, [pc, #204]	@ (8005f4c <HAL_CAN_MspInit+0x154>)
 8005e80:	f002 f91e 	bl	80080c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2105      	movs	r1, #5
 8005e88:	2014      	movs	r0, #20
 8005e8a:	f001 fce0 	bl	800784e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005e8e:	2014      	movs	r0, #20
 8005e90:	f001 fcf9 	bl	8007886 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8005e94:	e04f      	b.n	8005f36 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f50 <HAL_CAN_MspInit+0x158>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d14a      	bne.n	8005f36 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	4a27      	ldr	r2, [pc, #156]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005eaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb0:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005ebc:	4b21      	ldr	r3, [pc, #132]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	4a20      	ldr	r2, [pc, #128]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005ec4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f44 <HAL_CAN_MspInit+0x14c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10d      	bne.n	8005eea <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ede:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	4b16      	ldr	r3, [pc, #88]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	4a15      	ldr	r2, [pc, #84]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005efa:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <HAL_CAN_MspInit+0x150>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005f06:	2360      	movs	r3, #96	@ 0x60
 8005f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f12:	2303      	movs	r3, #3
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005f16:	2309      	movs	r3, #9
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f1a:	f107 031c 	add.w	r3, r7, #28
 8005f1e:	4619      	mov	r1, r3
 8005f20:	480c      	ldr	r0, [pc, #48]	@ (8005f54 <HAL_CAN_MspInit+0x15c>)
 8005f22:	f002 f8cd 	bl	80080c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2105      	movs	r1, #5
 8005f2a:	2040      	movs	r0, #64	@ 0x40
 8005f2c:	f001 fc8f 	bl	800784e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8005f30:	2040      	movs	r0, #64	@ 0x40
 8005f32:	f001 fca8 	bl	8007886 <HAL_NVIC_EnableIRQ>
}
 8005f36:	bf00      	nop
 8005f38:	3730      	adds	r7, #48	@ 0x30
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40006400 	.word	0x40006400
 8005f44:	20000e6c 	.word	0x20000e6c
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40020c00 	.word	0x40020c00
 8005f50:	40006800 	.word	0x40006800
 8005f54:	40020400 	.word	0x40020400

08005f58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	@ 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a29      	ldr	r2, [pc, #164]	@ (800601c <HAL_I2C_MspInit+0xc4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d14b      	bne.n	8006012 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	4a27      	ldr	r2, [pc, #156]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005f84:	f043 0304 	orr.w	r3, r3, #4
 8005f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f8a:	4b25      	ldr	r3, [pc, #148]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	4a20      	ldr	r2, [pc, #128]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fb8:	2312      	movs	r3, #18
 8005fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fc8:	f107 0314 	add.w	r3, r7, #20
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4815      	ldr	r0, [pc, #84]	@ (8006024 <HAL_I2C_MspInit+0xcc>)
 8005fd0:	f002 f876 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fda:	2312      	movs	r3, #18
 8005fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fea:	f107 0314 	add.w	r3, r7, #20
 8005fee:	4619      	mov	r1, r3
 8005ff0:	480d      	ldr	r0, [pc, #52]	@ (8006028 <HAL_I2C_MspInit+0xd0>)
 8005ff2:	f002 f865 	bl	80080c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	4a08      	ldr	r2, [pc, #32]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8006000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006004:	6413      	str	r3, [r2, #64]	@ 0x40
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <HAL_I2C_MspInit+0xc8>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8006012:	bf00      	nop
 8006014:	3728      	adds	r7, #40	@ 0x28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40005c00 	.word	0x40005c00
 8006020:	40023800 	.word	0x40023800
 8006024:	40020800 	.word	0x40020800
 8006028:	40020000 	.word	0x40020000

0800602c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006034:	f107 0314 	add.w	r3, r7, #20
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a28      	ldr	r2, [pc, #160]	@ (80060ec <HAL_SPI_MspInit+0xc0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d149      	bne.n	80060e2 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	4b27      	ldr	r3, [pc, #156]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	4a26      	ldr	r2, [pc, #152]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800605c:	6453      	str	r3, [r2, #68]	@ 0x44
 800605e:	4b24      	ldr	r3, [pc, #144]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	4a1f      	ldr	r2, [pc, #124]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	6313      	str	r3, [r2, #48]	@ 0x30
 800607a:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	4b19      	ldr	r3, [pc, #100]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	6313      	str	r3, [r2, #48]	@ 0x30
 8006096:	4b16      	ldr	r3, [pc, #88]	@ (80060f0 <HAL_SPI_MspInit+0xc4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	60bb      	str	r3, [r7, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80060a2:	2318      	movs	r3, #24
 80060a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a6:	2302      	movs	r3, #2
 80060a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ae:	2303      	movs	r3, #3
 80060b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060b2:	2305      	movs	r3, #5
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	4619      	mov	r1, r3
 80060bc:	480d      	ldr	r0, [pc, #52]	@ (80060f4 <HAL_SPI_MspInit+0xc8>)
 80060be:	f001 ffff 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c6:	2302      	movs	r3, #2
 80060c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ce:	2303      	movs	r3, #3
 80060d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060d2:	2305      	movs	r3, #5
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	4619      	mov	r1, r3
 80060dc:	4806      	ldr	r0, [pc, #24]	@ (80060f8 <HAL_SPI_MspInit+0xcc>)
 80060de:	f001 ffef 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80060e2:	bf00      	nop
 80060e4:	3728      	adds	r7, #40	@ 0x28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40013000 	.word	0x40013000
 80060f0:	40023800 	.word	0x40023800
 80060f4:	40020400 	.word	0x40020400
 80060f8:	40020000 	.word	0x40020000

080060fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1f      	ldr	r2, [pc, #124]	@ (8006188 <HAL_TIM_PWM_MspInit+0x8c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10e      	bne.n	800612c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6453      	str	r3, [r2, #68]	@ 0x44
 800611e:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800612a:	e026      	b.n	800617a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <HAL_TIM_PWM_MspInit+0x94>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	4b14      	ldr	r3, [pc, #80]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	4a13      	ldr	r2, [pc, #76]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006140:	f043 0308 	orr.w	r3, r3, #8
 8006144:	6413      	str	r3, [r2, #64]	@ 0x40
 8006146:	4b11      	ldr	r3, [pc, #68]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]
}
 8006152:	e012      	b.n	800617a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a0e      	ldr	r2, [pc, #56]	@ (8006194 <HAL_TIM_PWM_MspInit+0x98>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d10d      	bne.n	800617a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006166:	4a09      	ldr	r2, [pc, #36]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	6453      	str	r3, [r2, #68]	@ 0x44
 800616e:	4b07      	ldr	r3, [pc, #28]	@ (800618c <HAL_TIM_PWM_MspInit+0x90>)
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40023800 	.word	0x40023800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40010400 	.word	0x40010400

08006198 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <HAL_TIM_Base_MspInit+0x64>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10e      	bne.n	80061c8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	4b14      	ldr	r3, [pc, #80]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	4a13      	ldr	r2, [pc, #76]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061b4:	f043 0304 	orr.w	r3, r3, #4
 80061b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ba:	4b11      	ldr	r3, [pc, #68]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 80061c6:	e012      	b.n	80061ee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <HAL_TIM_Base_MspInit+0x6c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10d      	bne.n	80061ee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80061e2:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <HAL_TIM_Base_MspInit+0x68>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	68bb      	ldr	r3, [r7, #8]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40000800 	.word	0x40000800
 8006200:	40023800 	.word	0x40023800
 8006204:	40014400 	.word	0x40014400

08006208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	@ 0x38
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6a      	ldr	r2, [pc, #424]	@ (80063d0 <HAL_TIM_MspPostInit+0x1c8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d11f      	bne.n	800626a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	4b69      	ldr	r3, [pc, #420]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	4a68      	ldr	r2, [pc, #416]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006234:	f043 0310 	orr.w	r3, r3, #16
 8006238:	6313      	str	r3, [r2, #48]	@ 0x30
 800623a:	4b66      	ldr	r3, [pc, #408]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	623b      	str	r3, [r7, #32]
 8006244:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8006246:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	2302      	movs	r3, #2
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006250:	2300      	movs	r3, #0
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006254:	2300      	movs	r3, #0
 8006256:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006258:	2301      	movs	r3, #1
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800625c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006260:	4619      	mov	r1, r3
 8006262:	485d      	ldr	r0, [pc, #372]	@ (80063d8 <HAL_TIM_MspPostInit+0x1d0>)
 8006264:	f001 ff2c 	bl	80080c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8006268:	e0ae      	b.n	80063c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5b      	ldr	r2, [pc, #364]	@ (80063dc <HAL_TIM_MspPostInit+0x1d4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d11f      	bne.n	80062b4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	4b56      	ldr	r3, [pc, #344]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627c:	4a55      	ldr	r2, [pc, #340]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800627e:	f043 0308 	orr.w	r3, r3, #8
 8006282:	6313      	str	r3, [r2, #48]	@ 0x30
 8006284:	4b53      	ldr	r3, [pc, #332]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006290:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006296:	2302      	movs	r3, #2
 8006298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629a:	2300      	movs	r3, #0
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629e:	2300      	movs	r3, #0
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062a2:	2302      	movs	r3, #2
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062aa:	4619      	mov	r1, r3
 80062ac:	484c      	ldr	r0, [pc, #304]	@ (80063e0 <HAL_TIM_MspPostInit+0x1d8>)
 80062ae:	f001 ff07 	bl	80080c0 <HAL_GPIO_Init>
}
 80062b2:	e089      	b.n	80063c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a4a      	ldr	r2, [pc, #296]	@ (80063e4 <HAL_TIM_MspPostInit+0x1dc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d11f      	bne.n	80062fe <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	4b44      	ldr	r3, [pc, #272]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c6:	4a43      	ldr	r2, [pc, #268]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 80062c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ce:	4b41      	ldr	r3, [pc, #260]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80062da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e0:	2302      	movs	r3, #2
 80062e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e8:	2300      	movs	r3, #0
 80062ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80062ec:	2302      	movs	r3, #2
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80062f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062f4:	4619      	mov	r1, r3
 80062f6:	483c      	ldr	r0, [pc, #240]	@ (80063e8 <HAL_TIM_MspPostInit+0x1e0>)
 80062f8:	f001 fee2 	bl	80080c0 <HAL_GPIO_Init>
}
 80062fc:	e064      	b.n	80063c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a3a      	ldr	r2, [pc, #232]	@ (80063ec <HAL_TIM_MspPostInit+0x1e4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d13c      	bne.n	8006382 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800630e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006310:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006316:	6313      	str	r3, [r2, #48]	@ 0x30
 8006318:	4b2e      	ldr	r3, [pc, #184]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800631a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	4b2a      	ldr	r3, [pc, #168]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	4a29      	ldr	r2, [pc, #164]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800632e:	f043 0304 	orr.w	r3, r3, #4
 8006332:	6313      	str	r3, [r2, #48]	@ 0x30
 8006334:	4b27      	ldr	r3, [pc, #156]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8006340:	23c0      	movs	r3, #192	@ 0xc0
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006344:	2302      	movs	r3, #2
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006348:	2300      	movs	r3, #0
 800634a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800634c:	2300      	movs	r3, #0
 800634e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006350:	2303      	movs	r3, #3
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006358:	4619      	mov	r1, r3
 800635a:	4825      	ldr	r0, [pc, #148]	@ (80063f0 <HAL_TIM_MspPostInit+0x1e8>)
 800635c:	f001 feb0 	bl	80080c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006360:	2340      	movs	r3, #64	@ 0x40
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006364:	2302      	movs	r3, #2
 8006366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006368:	2300      	movs	r3, #0
 800636a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800636c:	2300      	movs	r3, #0
 800636e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006370:	2303      	movs	r3, #3
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006378:	4619      	mov	r1, r3
 800637a:	481e      	ldr	r0, [pc, #120]	@ (80063f4 <HAL_TIM_MspPostInit+0x1ec>)
 800637c:	f001 fea0 	bl	80080c0 <HAL_GPIO_Init>
}
 8006380:	e022      	b.n	80063c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <HAL_TIM_MspPostInit+0x1f0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d11d      	bne.n	80063c8 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	4a0f      	ldr	r2, [pc, #60]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 8006396:	f043 0320 	orr.w	r3, r3, #32
 800639a:	6313      	str	r3, [r2, #48]	@ 0x30
 800639c:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <HAL_TIM_MspPostInit+0x1cc>)
 800639e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80063a8:	2340      	movs	r3, #64	@ 0x40
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ac:	2302      	movs	r3, #2
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063b0:	2301      	movs	r3, #1
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063b4:	2302      	movs	r3, #2
 80063b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80063b8:	2303      	movs	r3, #3
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80063bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063c0:	4619      	mov	r1, r3
 80063c2:	480e      	ldr	r0, [pc, #56]	@ (80063fc <HAL_TIM_MspPostInit+0x1f4>)
 80063c4:	f001 fe7c 	bl	80080c0 <HAL_GPIO_Init>
}
 80063c8:	bf00      	nop
 80063ca:	3738      	adds	r7, #56	@ 0x38
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40023800 	.word	0x40023800
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40000800 	.word	0x40000800
 80063e0:	40020c00 	.word	0x40020c00
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40021c00 	.word	0x40021c00
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40022000 	.word	0x40022000
 80063f4:	40020800 	.word	0x40020800
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40021400 	.word	0x40021400

08006400 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	@ 0x38
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a74      	ldr	r2, [pc, #464]	@ (80065f0 <HAL_UART_MspInit+0x1f0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	f040 8083 	bne.w	800652a <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	4b72      	ldr	r3, [pc, #456]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800642a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642c:	4a71      	ldr	r2, [pc, #452]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800642e:	f043 0310 	orr.w	r3, r3, #16
 8006432:	6453      	str	r3, [r2, #68]	@ 0x44
 8006434:	4b6f      	ldr	r3, [pc, #444]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	4b6b      	ldr	r3, [pc, #428]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	4a6a      	ldr	r2, [pc, #424]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006450:	4b68      	ldr	r3, [pc, #416]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645c:	2300      	movs	r3, #0
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	4b64      	ldr	r3, [pc, #400]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006464:	4a63      	ldr	r2, [pc, #396]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6313      	str	r3, [r2, #48]	@ 0x30
 800646c:	4b61      	ldr	r3, [pc, #388]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006478:	2380      	movs	r3, #128	@ 0x80
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006488:	2307      	movs	r3, #7
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800648c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006490:	4619      	mov	r1, r3
 8006492:	4859      	ldr	r0, [pc, #356]	@ (80065f8 <HAL_UART_MspInit+0x1f8>)
 8006494:	f001 fe14 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a6:	2303      	movs	r3, #3
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80064aa:	2307      	movs	r3, #7
 80064ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b2:	4619      	mov	r1, r3
 80064b4:	4851      	ldr	r0, [pc, #324]	@ (80065fc <HAL_UART_MspInit+0x1fc>)
 80064b6:	f001 fe03 	bl	80080c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80064ba:	4b51      	ldr	r3, [pc, #324]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064bc:	4a51      	ldr	r2, [pc, #324]	@ (8006604 <HAL_UART_MspInit+0x204>)
 80064be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80064c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80064c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064dc:	4b48      	ldr	r3, [pc, #288]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064de:	2200      	movs	r2, #0
 80064e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e2:	4b47      	ldr	r3, [pc, #284]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80064e8:	4b45      	ldr	r3, [pc, #276]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80064ee:	4b44      	ldr	r3, [pc, #272]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80064f4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064f6:	4b42      	ldr	r3, [pc, #264]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80064fc:	4840      	ldr	r0, [pc, #256]	@ (8006600 <HAL_UART_MspInit+0x200>)
 80064fe:	f001 f9dd 	bl	80078bc <HAL_DMA_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8006508:	f7ff faa4 	bl	8005a54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3c      	ldr	r2, [pc, #240]	@ (8006600 <HAL_UART_MspInit+0x200>)
 8006510:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006512:	4a3b      	ldr	r2, [pc, #236]	@ (8006600 <HAL_UART_MspInit+0x200>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006518:	2200      	movs	r2, #0
 800651a:	2105      	movs	r1, #5
 800651c:	2025      	movs	r0, #37	@ 0x25
 800651e:	f001 f996 	bl	800784e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006522:	2025      	movs	r0, #37	@ 0x25
 8006524:	f001 f9af 	bl	8007886 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8006528:	e0df      	b.n	80066ea <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a36      	ldr	r2, [pc, #216]	@ (8006608 <HAL_UART_MspInit+0x208>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d171      	bne.n	8006618 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	4b2e      	ldr	r3, [pc, #184]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	4a2d      	ldr	r2, [pc, #180]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800653e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006542:	6413      	str	r3, [r2, #64]	@ 0x40
 8006544:	4b2b      	ldr	r3, [pc, #172]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	4b27      	ldr	r3, [pc, #156]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006558:	4a26      	ldr	r2, [pc, #152]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006560:	4b24      	ldr	r3, [pc, #144]	@ (80065f4 <HAL_UART_MspInit+0x1f4>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800656c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006572:	2302      	movs	r3, #2
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006576:	2300      	movs	r3, #0
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800657a:	2303      	movs	r3, #3
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800657e:	2307      	movs	r3, #7
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006586:	4619      	mov	r1, r3
 8006588:	4820      	ldr	r0, [pc, #128]	@ (800660c <HAL_UART_MspInit+0x20c>)
 800658a:	f001 fd99 	bl	80080c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800658e:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <HAL_UART_MspInit+0x210>)
 8006590:	4a20      	ldr	r2, [pc, #128]	@ (8006614 <HAL_UART_MspInit+0x214>)
 8006592:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006594:	4b1e      	ldr	r3, [pc, #120]	@ (8006610 <HAL_UART_MspInit+0x210>)
 8006596:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800659a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800659c:	4b1c      	ldr	r3, [pc, #112]	@ (8006610 <HAL_UART_MspInit+0x210>)
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065a8:	4b19      	ldr	r3, [pc, #100]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065b0:	4b17      	ldr	r3, [pc, #92]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065b6:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80065bc:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80065c4:	4b12      	ldr	r3, [pc, #72]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80065ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065cc:	4b10      	ldr	r3, [pc, #64]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80065d2:	480f      	ldr	r0, [pc, #60]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065d4:	f001 f972 	bl	80078bc <HAL_DMA_Init>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 80065de:	f7ff fa39 	bl	8005a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065e8:	4a09      	ldr	r2, [pc, #36]	@ (8006610 <HAL_UART_MspInit+0x210>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80065ee:	e07c      	b.n	80066ea <HAL_UART_MspInit+0x2ea>
 80065f0:	40011000 	.word	0x40011000
 80065f4:	40023800 	.word	0x40023800
 80065f8:	40020400 	.word	0x40020400
 80065fc:	40020000 	.word	0x40020000
 8006600:	20000d3c 	.word	0x20000d3c
 8006604:	40026440 	.word	0x40026440
 8006608:	40004800 	.word	0x40004800
 800660c:	40020800 	.word	0x40020800
 8006610:	20000d9c 	.word	0x20000d9c
 8006614:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a35      	ldr	r2, [pc, #212]	@ (80066f4 <HAL_UART_MspInit+0x2f4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d163      	bne.n	80066ea <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4b34      	ldr	r3, [pc, #208]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 8006628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662a:	4a33      	ldr	r2, [pc, #204]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 800662c:	f043 0320 	orr.w	r3, r3, #32
 8006630:	6453      	str	r3, [r2, #68]	@ 0x44
 8006632:	4b31      	ldr	r3, [pc, #196]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	4b2d      	ldr	r3, [pc, #180]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	4a2c      	ldr	r2, [pc, #176]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 8006648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800664c:	6313      	str	r3, [r2, #48]	@ 0x30
 800664e:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <HAL_UART_MspInit+0x2f8>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006656:	60bb      	str	r3, [r7, #8]
 8006658:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800665a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006660:	2302      	movs	r3, #2
 8006662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006668:	2303      	movs	r3, #3
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800666c:	2308      	movs	r3, #8
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006674:	4619      	mov	r1, r3
 8006676:	4821      	ldr	r0, [pc, #132]	@ (80066fc <HAL_UART_MspInit+0x2fc>)
 8006678:	f001 fd22 	bl	80080c0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800667c:	4b20      	ldr	r3, [pc, #128]	@ (8006700 <HAL_UART_MspInit+0x300>)
 800667e:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <HAL_UART_MspInit+0x304>)
 8006680:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006682:	4b1f      	ldr	r3, [pc, #124]	@ (8006700 <HAL_UART_MspInit+0x300>)
 8006684:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006688:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800668a:	4b1d      	ldr	r3, [pc, #116]	@ (8006700 <HAL_UART_MspInit+0x300>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006690:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <HAL_UART_MspInit+0x300>)
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006696:	4b1a      	ldr	r3, [pc, #104]	@ (8006700 <HAL_UART_MspInit+0x300>)
 8006698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800669c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800669e:	4b18      	ldr	r3, [pc, #96]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066a4:	4b16      	ldr	r3, [pc, #88]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80066aa:	4b15      	ldr	r3, [pc, #84]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80066b0:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80066b6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066b8:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80066be:	4810      	ldr	r0, [pc, #64]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066c0:	f001 f8fc 	bl	80078bc <HAL_DMA_Init>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 80066ca:	f7ff f9c3 	bl	8005a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006700 <HAL_UART_MspInit+0x300>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80066da:	2200      	movs	r2, #0
 80066dc:	2105      	movs	r1, #5
 80066de:	2047      	movs	r0, #71	@ 0x47
 80066e0:	f001 f8b5 	bl	800784e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80066e4:	2047      	movs	r0, #71	@ 0x47
 80066e6:	f001 f8ce 	bl	8007886 <HAL_NVIC_EnableIRQ>
}
 80066ea:	bf00      	nop
 80066ec:	3738      	adds	r7, #56	@ 0x38
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40011400 	.word	0x40011400
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40021800 	.word	0x40021800
 8006700:	20000dfc 	.word	0x20000dfc
 8006704:	40026428 	.word	0x40026428

08006708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800670c:	f002 fc4e 	bl	8008fac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <NMI_Handler+0x8>

08006714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <HardFault_Handler+0x4>

0800671c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <MemManage_Handler+0x4>

08006724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006728:	bf00      	nop
 800672a:	e7fd      	b.n	8006728 <BusFault_Handler+0x4>

0800672c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <UsageFault_Handler+0x4>

08006734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006746:	f000 f921 	bl	800698c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800674a:	f006 fdff 	bl	800d34c <xTaskGetSchedulerState>
 800674e:	4603      	mov	r3, r0
 8006750:	2b01      	cmp	r3, #1
 8006752:	d001      	beq.n	8006758 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006754:	f007 fcd8 	bl	800e108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}

0800675c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006760:	2008      	movs	r0, #8
 8006762:	f001 fe63 	bl	800842c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006766:	bf00      	nop
 8006768:	bd80      	pop	{r7, pc}

0800676a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 800676e:	2010      	movs	r0, #16
 8006770:	f001 fe5c 	bl	800842c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006774:	bf00      	nop
 8006776:	bd80      	pop	{r7, pc}

08006778 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800677c:	4802      	ldr	r0, [pc, #8]	@ (8006788 <DMA1_Stream1_IRQHandler+0x10>)
 800677e:	f001 fa35 	bl	8007bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000d9c 	.word	0x20000d9c

0800678c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006790:	4802      	ldr	r0, [pc, #8]	@ (800679c <CAN1_RX0_IRQHandler+0x10>)
 8006792:	f000 fd51 	bl	8007238 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000a00 	.word	0x20000a00

080067a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80067a4:	4802      	ldr	r0, [pc, #8]	@ (80067b0 <USART1_IRQHandler+0x10>)
 80067a6:	f003 fe6b 	bl	800a480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000c64 	.word	0x20000c64

080067b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80067b8:	4802      	ldr	r0, [pc, #8]	@ (80067c4 <DMA2_Stream1_IRQHandler+0x10>)
 80067ba:	f001 fa17 	bl	8007bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000dfc 	.word	0x20000dfc

080067c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80067cc:	4802      	ldr	r0, [pc, #8]	@ (80067d8 <DMA2_Stream2_IRQHandler+0x10>)
 80067ce:	f001 fa0d 	bl	8007bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000d3c 	.word	0x20000d3c

080067dc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80067e0:	4802      	ldr	r0, [pc, #8]	@ (80067ec <CAN2_RX0_IRQHandler+0x10>)
 80067e2:	f000 fd29 	bl	8007238 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000a28 	.word	0x20000a28

080067f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80067f4:	4802      	ldr	r0, [pc, #8]	@ (8006800 <USART6_IRQHandler+0x10>)
 80067f6:	f003 fe43 	bl	800a480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000cf4 	.word	0x20000cf4

08006804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800680c:	4a14      	ldr	r2, [pc, #80]	@ (8006860 <_sbrk+0x5c>)
 800680e:	4b15      	ldr	r3, [pc, #84]	@ (8006864 <_sbrk+0x60>)
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006818:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <_sbrk+0x64>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006820:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <_sbrk+0x64>)
 8006822:	4a12      	ldr	r2, [pc, #72]	@ (800686c <_sbrk+0x68>)
 8006824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006826:	4b10      	ldr	r3, [pc, #64]	@ (8006868 <_sbrk+0x64>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	429a      	cmp	r2, r3
 8006832:	d207      	bcs.n	8006844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006834:	f007 ff10 	bl	800e658 <__errno>
 8006838:	4603      	mov	r3, r0
 800683a:	220c      	movs	r2, #12
 800683c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006842:	e009      	b.n	8006858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006844:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <_sbrk+0x64>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800684a:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <_sbrk+0x64>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	4a05      	ldr	r2, [pc, #20]	@ (8006868 <_sbrk+0x64>)
 8006854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20020000 	.word	0x20020000
 8006864:	00000400 	.word	0x00000400
 8006868:	20000e70 	.word	0x20000e70
 800686c:	200059a8 	.word	0x200059a8

08006870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <SystemInit+0x20>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <SystemInit+0x20>)
 800687c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00

08006894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006898:	f7ff ffea 	bl	8006870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800689c:	480c      	ldr	r0, [pc, #48]	@ (80068d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800689e:	490d      	ldr	r1, [pc, #52]	@ (80068d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068a0:	4a0d      	ldr	r2, [pc, #52]	@ (80068d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068a4:	e002      	b.n	80068ac <LoopCopyDataInit>

080068a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068aa:	3304      	adds	r3, #4

080068ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068b0:	d3f9      	bcc.n	80068a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068b4:	4c0a      	ldr	r4, [pc, #40]	@ (80068e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068b8:	e001      	b.n	80068be <LoopFillZerobss>

080068ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068bc:	3204      	adds	r2, #4

080068be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068c0:	d3fb      	bcc.n	80068ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068c2:	f007 fecf 	bl	800e664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068c6:	f7fe fa5f 	bl	8004d88 <main>
  bx  lr    
 80068ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068d4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80068d8:	08010434 	.word	0x08010434
  ldr r2, =_sbss
 80068dc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80068e0:	200059a8 	.word	0x200059a8

080068e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068e4:	e7fe      	b.n	80068e4 <ADC_IRQHandler>
	...

080068e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006928 <HAL_Init+0x40>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006928 <HAL_Init+0x40>)
 80068f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <HAL_Init+0x40>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006928 <HAL_Init+0x40>)
 80068fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006904:	4b08      	ldr	r3, [pc, #32]	@ (8006928 <HAL_Init+0x40>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a07      	ldr	r2, [pc, #28]	@ (8006928 <HAL_Init+0x40>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800690e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006910:	2003      	movs	r0, #3
 8006912:	f000 ff91 	bl	8007838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006916:	200f      	movs	r0, #15
 8006918:	f000 f808 	bl	800692c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800691c:	f7ff fa40 	bl	8005da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40023c00 	.word	0x40023c00

0800692c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006934:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <HAL_InitTick+0x54>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <HAL_InitTick+0x58>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4619      	mov	r1, r3
 800693e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006942:	fbb3 f3f1 	udiv	r3, r3, r1
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	4618      	mov	r0, r3
 800694c:	f000 ffa9 	bl	80078a2 <HAL_SYSTICK_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e00e      	b.n	8006978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b0f      	cmp	r3, #15
 800695e:	d80a      	bhi.n	8006976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006960:	2200      	movs	r2, #0
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006968:	f000 ff71 	bl	800784e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800696c:	4a06      	ldr	r2, [pc, #24]	@ (8006988 <HAL_InitTick+0x5c>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	2000004c 	.word	0x2000004c
 8006984:	20000054 	.word	0x20000054
 8006988:	20000050 	.word	0x20000050

0800698c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <HAL_IncTick+0x20>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <HAL_IncTick+0x24>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4413      	add	r3, r2
 800699c:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <HAL_IncTick+0x24>)
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000054 	.word	0x20000054
 80069b0:	20000e74 	.word	0x20000e74

080069b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return uwTick;
 80069b8:	4b03      	ldr	r3, [pc, #12]	@ (80069c8 <HAL_GetTick+0x14>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000e74 	.word	0x20000e74

080069cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e0ed      	b.n	8006bba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fa04 	bl	8005df8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a00:	f7ff ffd8 	bl	80069b4 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a06:	e012      	b.n	8006a2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a08:	f7ff ffd4 	bl	80069b4 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b0a      	cmp	r3, #10
 8006a14:	d90b      	bls.n	8006a2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2205      	movs	r2, #5
 8006a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0c5      	b.n	8006bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0e5      	beq.n	8006a08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0202 	bic.w	r2, r2, #2
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a4c:	f7ff ffb2 	bl	80069b4 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006a52:	e012      	b.n	8006a7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a54:	f7ff ffae 	bl	80069b4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b0a      	cmp	r3, #10
 8006a60:	d90b      	bls.n	8006a7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2205      	movs	r2, #5
 8006a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e09f      	b.n	8006bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7e1b      	ldrb	r3, [r3, #24]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d108      	bne.n	8006aa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e007      	b.n	8006ab2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7e5b      	ldrb	r3, [r3, #25]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d108      	bne.n	8006acc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e007      	b.n	8006adc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7e9b      	ldrb	r3, [r3, #26]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d108      	bne.n	8006af6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0220 	orr.w	r2, r2, #32
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e007      	b.n	8006b06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0220 	bic.w	r2, r2, #32
 8006b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7edb      	ldrb	r3, [r3, #27]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d108      	bne.n	8006b20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0210 	bic.w	r2, r2, #16
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e007      	b.n	8006b30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0210 	orr.w	r2, r2, #16
 8006b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7f1b      	ldrb	r3, [r3, #28]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d108      	bne.n	8006b4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0208 	orr.w	r2, r2, #8
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e007      	b.n	8006b5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0208 	bic.w	r2, r2, #8
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7f5b      	ldrb	r3, [r3, #29]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d108      	bne.n	8006b74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0204 	orr.w	r2, r2, #4
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e007      	b.n	8006b84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	ea42 0103 	orr.w	r1, r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	1e5a      	subs	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bd4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d003      	beq.n	8006be4 <HAL_CAN_ConfigFilter+0x20>
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	f040 80be 	bne.w	8006d60 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006be4:	4b65      	ldr	r3, [pc, #404]	@ (8006d7c <HAL_CAN_ConfigFilter+0x1b8>)
 8006be6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006bee:	f043 0201 	orr.w	r2, r3, #1
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006bfe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	431a      	orrs	r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2201      	movs	r2, #1
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	401a      	ands	r2, r3
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d123      	bne.n	8006c8e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	401a      	ands	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006c68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3248      	adds	r2, #72	@ 0x48
 8006c6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006c82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006c84:	6939      	ldr	r1, [r7, #16]
 8006c86:	3348      	adds	r3, #72	@ 0x48
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	440b      	add	r3, r1
 8006c8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d122      	bne.n	8006cdc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006cb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	3248      	adds	r2, #72	@ 0x48
 8006cbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006cd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006cd2:	6939      	ldr	r1, [r7, #16]
 8006cd4:	3348      	adds	r3, #72	@ 0x48
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	440b      	add	r3, r1
 8006cda:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006cf6:	e007      	b.n	8006d08 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006d22:	e007      	b.n	8006d34 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006d52:	f023 0201 	bic.w	r2, r3, #1
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e006      	b.n	8006d6e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40006400 	.word	0x40006400

08006d80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d12e      	bne.n	8006df2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dac:	f7ff fe02 	bl	80069b4 <HAL_GetTick>
 8006db0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006db2:	e012      	b.n	8006dda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006db4:	f7ff fdfe 	bl	80069b4 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b0a      	cmp	r3, #10
 8006dc0:	d90b      	bls.n	8006dda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e012      	b.n	8006e00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e5      	bne.n	8006db4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e006      	b.n	8006e00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b089      	sub	sp, #36	@ 0x24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e26:	7ffb      	ldrb	r3, [r7, #31]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d003      	beq.n	8006e34 <HAL_CAN_AddTxMessage+0x2c>
 8006e2c:	7ffb      	ldrb	r3, [r7, #31]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	f040 80ad 	bne.w	8006f8e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 8095 	beq.w	8006f7e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	0e1b      	lsrs	r3, r3, #24
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006e5e:	2201      	movs	r2, #1
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	409a      	lsls	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10d      	bne.n	8006e8c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6809      	ldr	r1, [r1, #0]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3318      	adds	r3, #24
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	440b      	add	r3, r1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00f      	b.n	8006eac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006e96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006ea0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	3318      	adds	r3, #24
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	440b      	add	r3, r1
 8006eaa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	440b      	add	r3, r1
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7d1b      	ldrb	r3, [r3, #20]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d111      	bne.n	8006eec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3318      	adds	r3, #24
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	6811      	ldr	r1, [r2, #0]
 8006edc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3318      	adds	r3, #24
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3304      	adds	r3, #4
 8006eea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3307      	adds	r3, #7
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	061a      	lsls	r2, r3, #24
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3306      	adds	r3, #6
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3305      	adds	r3, #5
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	4313      	orrs	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	3204      	adds	r2, #4
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	4610      	mov	r0, r2
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	6811      	ldr	r1, [r2, #0]
 8006f14:	ea43 0200 	orr.w	r2, r3, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	440b      	add	r3, r1
 8006f1e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006f22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3303      	adds	r3, #3
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	061a      	lsls	r2, r3, #24
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3302      	adds	r3, #2
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	4610      	mov	r0, r2
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	6811      	ldr	r1, [r2, #0]
 8006f4a:	ea43 0200 	orr.w	r2, r3, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	440b      	add	r3, r1
 8006f54:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006f58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	3318      	adds	r3, #24
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	4413      	add	r3, r2
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	6811      	ldr	r1, [r2, #0]
 8006f6c:	f043 0201 	orr.w	r2, r3, #1
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	3318      	adds	r3, #24
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	440b      	add	r3, r1
 8006f78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e00e      	b.n	8006f9c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e006      	b.n	8006f9c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3724      	adds	r7, #36	@ 0x24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fbc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <HAL_CAN_GetRxMessage+0x24>
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	f040 8103 	bne.w	80071d2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10e      	bne.n	8006ff0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d116      	bne.n	800700e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0f7      	b.n	80071e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d107      	bne.n	800700e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e0e8      	b.n	80071e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	331b      	adds	r3, #27
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0204 	and.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10c      	bne.n	8007046 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	331b      	adds	r3, #27
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	4413      	add	r3, r2
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	0d5b      	lsrs	r3, r3, #21
 800703c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e00b      	b.n	800705e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	331b      	adds	r3, #27
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	4413      	add	r3, r2
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	08db      	lsrs	r3, r3, #3
 8007056:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	331b      	adds	r3, #27
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	4413      	add	r3, r2
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0202 	and.w	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	331b      	adds	r3, #27
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	4413      	add	r3, r2
 8007080:	3304      	adds	r3, #4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2208      	movs	r2, #8
 8007090:	611a      	str	r2, [r3, #16]
 8007092:	e00b      	b.n	80070ac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	331b      	adds	r3, #27
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	4413      	add	r3, r2
 80070a0:	3304      	adds	r3, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 020f 	and.w	r2, r3, #15
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	331b      	adds	r3, #27
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4413      	add	r3, r2
 80070b8:	3304      	adds	r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	331b      	adds	r3, #27
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	4413      	add	r3, r2
 80070d0:	3304      	adds	r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	0a1a      	lsrs	r2, r3, #8
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	4413      	add	r3, r2
 8007116:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	0c1a      	lsrs	r2, r3, #16
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	3302      	adds	r3, #2
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	4413      	add	r3, r2
 8007130:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	0e1a      	lsrs	r2, r3, #24
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	3303      	adds	r3, #3
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	4413      	add	r3, r2
 800714a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	3304      	adds	r3, #4
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	4413      	add	r3, r2
 8007162:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0a1a      	lsrs	r2, r3, #8
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	3305      	adds	r3, #5
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	4413      	add	r3, r2
 800717c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0c1a      	lsrs	r2, r3, #16
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	3306      	adds	r3, #6
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	4413      	add	r3, r2
 8007196:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	0e1a      	lsrs	r2, r3, #24
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	3307      	adds	r3, #7
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d108      	bne.n	80071be <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0220 	orr.w	r2, r2, #32
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	e007      	b.n	80071ce <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0220 	orr.w	r2, r2, #32
 80071cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e006      	b.n	80071e0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d002      	beq.n	800720a <HAL_CAN_ActivateNotification+0x1e>
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d109      	bne.n	800721e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e006      	b.n	800722c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
  }
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	@ 0x28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d07c      	beq.n	8007378 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d023      	beq.n	80072d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f983 	bl	80075a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80072a0:	e016      	b.n	80072d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b4:	e00c      	b.n	80072d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	e002      	b.n	80072d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f989 	bl	80075e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d024      	beq.n	8007324 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f963 	bl	80075ba <HAL_CAN_TxMailbox1CompleteCallback>
 80072f4:	e016      	b.n	8007324 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
 8007308:	e00c      	b.n	8007324 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
 800731c:	e002      	b.n	8007324 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f969 	bl	80075f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d024      	beq.n	8007378 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007336:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f943 	bl	80075ce <HAL_CAN_TxMailbox2CompleteCallback>
 8007348:	e016      	b.n	8007378 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
 800735c:	e00c      	b.n	8007378 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007370:	e002      	b.n	8007378 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f949 	bl	800760a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	2b00      	cmp	r3, #0
 800738a:	d007      	beq.n	800739c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2210      	movs	r2, #16
 800739a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2208      	movs	r2, #8
 80073b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f930 	bl	800761e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fa fce4 	bl	8001da4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00c      	beq.n	8007400 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2210      	movs	r2, #16
 80073fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2208      	movs	r2, #8
 800741a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f912 	bl	8007646 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8f9 	bl	8007632 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2210      	movs	r2, #16
 800745a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8fc 	bl	800765a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2208      	movs	r2, #8
 800747c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f8f5 	bl	800766e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d07b      	beq.n	8007586 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d072      	beq.n	800757e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	f043 0304 	orr.w	r3, r3, #4
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d043      	beq.n	800757e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d03e      	beq.n	800757e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007506:	2b60      	cmp	r3, #96	@ 0x60
 8007508:	d02b      	beq.n	8007562 <HAL_CAN_IRQHandler+0x32a>
 800750a:	2b60      	cmp	r3, #96	@ 0x60
 800750c:	d82e      	bhi.n	800756c <HAL_CAN_IRQHandler+0x334>
 800750e:	2b50      	cmp	r3, #80	@ 0x50
 8007510:	d022      	beq.n	8007558 <HAL_CAN_IRQHandler+0x320>
 8007512:	2b50      	cmp	r3, #80	@ 0x50
 8007514:	d82a      	bhi.n	800756c <HAL_CAN_IRQHandler+0x334>
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d019      	beq.n	800754e <HAL_CAN_IRQHandler+0x316>
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d826      	bhi.n	800756c <HAL_CAN_IRQHandler+0x334>
 800751e:	2b30      	cmp	r3, #48	@ 0x30
 8007520:	d010      	beq.n	8007544 <HAL_CAN_IRQHandler+0x30c>
 8007522:	2b30      	cmp	r3, #48	@ 0x30
 8007524:	d822      	bhi.n	800756c <HAL_CAN_IRQHandler+0x334>
 8007526:	2b10      	cmp	r3, #16
 8007528:	d002      	beq.n	8007530 <HAL_CAN_IRQHandler+0x2f8>
 800752a:	2b20      	cmp	r3, #32
 800752c:	d005      	beq.n	800753a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800752e:	e01d      	b.n	800756c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	f043 0308 	orr.w	r3, r3, #8
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007538:	e019      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	f043 0310 	orr.w	r3, r3, #16
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007542:	e014      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	f043 0320 	orr.w	r3, r3, #32
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800754c:	e00f      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007556:	e00a      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007560:	e005      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800756a:	e000      	b.n	800756e <HAL_CAN_IRQHandler+0x336>
            break;
 800756c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800757c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2204      	movs	r2, #4
 8007584:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f872 	bl	8007682 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800759e:	bf00      	nop
 80075a0:	3728      	adds	r7, #40	@ 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076a8:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <__NVIC_SetPriorityGrouping+0x44>)
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80076b4:	4013      	ands	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076ca:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <__NVIC_SetPriorityGrouping+0x44>)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	60d3      	str	r3, [r2, #12]
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076e4:	4b04      	ldr	r3, [pc, #16]	@ (80076f8 <__NVIC_GetPriorityGrouping+0x18>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	f003 0307 	and.w	r3, r3, #7
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	e000ed00 	.word	0xe000ed00

080076fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	2b00      	cmp	r3, #0
 800770c:	db0b      	blt.n	8007726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	f003 021f 	and.w	r2, r3, #31
 8007714:	4907      	ldr	r1, [pc, #28]	@ (8007734 <__NVIC_EnableIRQ+0x38>)
 8007716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	2001      	movs	r0, #1
 800771e:	fa00 f202 	lsl.w	r2, r0, r2
 8007722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	e000e100 	.word	0xe000e100

08007738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007748:	2b00      	cmp	r3, #0
 800774a:	db0a      	blt.n	8007762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	b2da      	uxtb	r2, r3
 8007750:	490c      	ldr	r1, [pc, #48]	@ (8007784 <__NVIC_SetPriority+0x4c>)
 8007752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007756:	0112      	lsls	r2, r2, #4
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	440b      	add	r3, r1
 800775c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007760:	e00a      	b.n	8007778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	4908      	ldr	r1, [pc, #32]	@ (8007788 <__NVIC_SetPriority+0x50>)
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	3b04      	subs	r3, #4
 8007770:	0112      	lsls	r2, r2, #4
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	440b      	add	r3, r1
 8007776:	761a      	strb	r2, [r3, #24]
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	e000e100 	.word	0xe000e100
 8007788:	e000ed00 	.word	0xe000ed00

0800778c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	@ 0x24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f1c3 0307 	rsb	r3, r3, #7
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	bf28      	it	cs
 80077aa:	2304      	movcs	r3, #4
 80077ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d902      	bls.n	80077bc <NVIC_EncodePriority+0x30>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3b03      	subs	r3, #3
 80077ba:	e000      	b.n	80077be <NVIC_EncodePriority+0x32>
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	43da      	mvns	r2, r3
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	401a      	ands	r2, r3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	fa01 f303 	lsl.w	r3, r1, r3
 80077de:	43d9      	mvns	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077e4:	4313      	orrs	r3, r2
         );
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3724      	adds	r7, #36	@ 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3b01      	subs	r3, #1
 8007800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007804:	d301      	bcc.n	800780a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007806:	2301      	movs	r3, #1
 8007808:	e00f      	b.n	800782a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800780a:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <SysTick_Config+0x40>)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3b01      	subs	r3, #1
 8007810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007812:	210f      	movs	r1, #15
 8007814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007818:	f7ff ff8e 	bl	8007738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <SysTick_Config+0x40>)
 800781e:	2200      	movs	r2, #0
 8007820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007822:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <SysTick_Config+0x40>)
 8007824:	2207      	movs	r2, #7
 8007826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	e000e010 	.word	0xe000e010

08007838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff ff29 	bl	8007698 <__NVIC_SetPriorityGrouping>
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800784e:	b580      	push	{r7, lr}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	4603      	mov	r3, r0
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007860:	f7ff ff3e 	bl	80076e0 <__NVIC_GetPriorityGrouping>
 8007864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	6978      	ldr	r0, [r7, #20]
 800786c:	f7ff ff8e 	bl	800778c <NVIC_EncodePriority>
 8007870:	4602      	mov	r2, r0
 8007872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff ff5d 	bl	8007738 <__NVIC_SetPriority>
}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	4603      	mov	r3, r0
 800788e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff31 	bl	80076fc <__NVIC_EnableIRQ>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ffa2 	bl	80077f4 <SysTick_Config>
 80078b0:	4603      	mov	r3, r0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80078c8:	f7ff f874 	bl	80069b4 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e099      	b.n	8007a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0201 	bic.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078f8:	e00f      	b.n	800791a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078fa:	f7ff f85b 	bl	80069b4 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b05      	cmp	r3, #5
 8007906:	d908      	bls.n	800791a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e078      	b.n	8007a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e8      	bne.n	80078fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4b38      	ldr	r3, [pc, #224]	@ (8007a14 <HAL_DMA_Init+0x158>)
 8007934:	4013      	ands	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800795e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	2b04      	cmp	r3, #4
 8007972:	d107      	bne.n	8007984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797c:	4313      	orrs	r3, r2
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0307 	bic.w	r3, r3, #7
 800799a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d117      	bne.n	80079de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fb01 	bl	8007fc8 <DMA_CheckFifoParam>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2240      	movs	r2, #64	@ 0x40
 80079d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80079da:	2301      	movs	r3, #1
 80079dc:	e016      	b.n	8007a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fab8 	bl	8007f5c <DMA_CalcBaseAndBitshift>
 80079ec:	4603      	mov	r3, r0
 80079ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f4:	223f      	movs	r2, #63	@ 0x3f
 80079f6:	409a      	lsls	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	f010803f 	.word	0xf010803f

08007a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_DMA_Start_IT+0x26>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e040      	b.n	8007ac0 <HAL_DMA_Start_IT+0xa8>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d12f      	bne.n	8007ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2202      	movs	r2, #2
 8007a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fa4a 	bl	8007f00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a70:	223f      	movs	r2, #63	@ 0x3f
 8007a72:	409a      	lsls	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0216 	orr.w	r2, r2, #22
 8007a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0208 	orr.w	r2, r2, #8
 8007a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e005      	b.n	8007abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
 8007abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ad6:	f7fe ff6d 	bl	80069b4 <HAL_GetTick>
 8007ada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d008      	beq.n	8007afa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2280      	movs	r2, #128	@ 0x80
 8007aec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e052      	b.n	8007ba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0216 	bic.w	r2, r2, #22
 8007b08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <HAL_DMA_Abort+0x62>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0208 	bic.w	r2, r2, #8
 8007b38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b4a:	e013      	b.n	8007b74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b4c:	f7fe ff32 	bl	80069b4 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d90c      	bls.n	8007b74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e015      	b.n	8007ba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e4      	bne.n	8007b4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b86:	223f      	movs	r2, #63	@ 0x3f
 8007b88:	409a      	lsls	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d004      	beq.n	8007bc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2280      	movs	r2, #128	@ 0x80
 8007bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e00c      	b.n	8007be0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2205      	movs	r2, #5
 8007bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0201 	bic.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8007e34 <HAL_DMA_IRQHandler+0x248>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8007e38 <HAL_DMA_IRQHandler+0x24c>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	0a9b      	lsrs	r3, r3, #10
 8007c04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c16:	2208      	movs	r2, #8
 8007c18:	409a      	lsls	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01a      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d013      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0204 	bic.w	r2, r2, #4
 8007c3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c44:	2208      	movs	r2, #8
 8007c46:	409a      	lsls	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c50:	f043 0201 	orr.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d012      	beq.n	8007c8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f043 0202 	orr.w	r2, r3, #2
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c92:	2204      	movs	r2, #4
 8007c94:	409a      	lsls	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d012      	beq.n	8007cc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbc:	f043 0204 	orr.w	r2, r3, #4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc8:	2210      	movs	r2, #16
 8007cca:	409a      	lsls	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d043      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d03c      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	409a      	lsls	r2, r3
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d018      	beq.n	8007d2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d024      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
 8007d1a:	e01f      	b.n	8007d5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01b      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
 8007d2c:	e016      	b.n	8007d5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d107      	bne.n	8007d4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0208 	bic.w	r2, r2, #8
 8007d4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d60:	2220      	movs	r2, #32
 8007d62:	409a      	lsls	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 808f 	beq.w	8007e8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8087 	beq.w	8007e8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d82:	2220      	movs	r2, #32
 8007d84:	409a      	lsls	r2, r3
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d136      	bne.n	8007e04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0216 	bic.w	r2, r2, #22
 8007da4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695a      	ldr	r2, [r3, #20]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007db4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <HAL_DMA_IRQHandler+0x1da>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0208 	bic.w	r2, r2, #8
 8007dd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dda:	223f      	movs	r2, #63	@ 0x3f
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d07e      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
        }
        return;
 8007e02:	e079      	b.n	8007ef8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01d      	beq.n	8007e4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d031      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	4798      	blx	r3
 8007e30:	e02c      	b.n	8007e8c <HAL_DMA_IRQHandler+0x2a0>
 8007e32:	bf00      	nop
 8007e34:	2000004c 	.word	0x2000004c
 8007e38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d023      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
 8007e4c:	e01e      	b.n	8007e8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10f      	bne.n	8007e7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0210 	bic.w	r2, r2, #16
 8007e6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d032      	beq.n	8007efa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d022      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d307      	bcc.n	8007ed4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f2      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0x2cc>
 8007ed2:	e000      	b.n	8007ed6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007ed4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	e000      	b.n	8007efa <HAL_DMA_IRQHandler+0x30e>
        return;
 8007ef8:	bf00      	nop
    }
  }
}
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d108      	bne.n	8007f40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007f3e:	e007      	b.n	8007f50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	60da      	str	r2, [r3, #12]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	3b10      	subs	r3, #16
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <DMA_CalcBaseAndBitshift+0x64>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007f76:	4a13      	ldr	r2, [pc, #76]	@ (8007fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d909      	bls.n	8007f9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	1d1a      	adds	r2, r3, #4
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f9c:	e007      	b.n	8007fae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	aaaaaaab 	.word	0xaaaaaaab
 8007fc4:	0800fff8 	.word	0x0800fff8

08007fc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d11f      	bne.n	8008022 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d856      	bhi.n	8008096 <DMA_CheckFifoParam+0xce>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <DMA_CheckFifoParam+0x28>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008013 	.word	0x08008013
 8007ff8:	08008001 	.word	0x08008001
 8007ffc:	08008097 	.word	0x08008097
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d046      	beq.n	800809a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008010:	e043      	b.n	800809a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800801a:	d140      	bne.n	800809e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008020:	e03d      	b.n	800809e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802a:	d121      	bne.n	8008070 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b03      	cmp	r3, #3
 8008030:	d837      	bhi.n	80080a2 <DMA_CheckFifoParam+0xda>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <DMA_CheckFifoParam+0x70>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008049 	.word	0x08008049
 800803c:	0800804f 	.word	0x0800804f
 8008040:	08008049 	.word	0x08008049
 8008044:	08008061 	.word	0x08008061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	73fb      	strb	r3, [r7, #15]
      break;
 800804c:	e030      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008052:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d025      	beq.n	80080a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800805e:	e022      	b.n	80080a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008068:	d11f      	bne.n	80080aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800806e:	e01c      	b.n	80080aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d903      	bls.n	800807e <DMA_CheckFifoParam+0xb6>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d003      	beq.n	8008084 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800807c:	e018      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]
      break;
 8008082:	e015      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00e      	beq.n	80080ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e00b      	b.n	80080ae <DMA_CheckFifoParam+0xe6>
      break;
 8008096:	bf00      	nop
 8008098:	e00a      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;
 800809a:	bf00      	nop
 800809c:	e008      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;
 800809e:	bf00      	nop
 80080a0:	e006      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;
 80080a2:	bf00      	nop
 80080a4:	e004      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;
 80080a6:	bf00      	nop
 80080a8:	e002      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <DMA_CheckFifoParam+0xe8>
      break;
 80080ae:	bf00      	nop
    }
  } 
  
  return status; 
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	@ 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
 80080da:	e16b      	b.n	80083b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80080dc:	2201      	movs	r2, #1
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	f040 815a 	bne.w	80083ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b01      	cmp	r3, #1
 8008104:	d005      	beq.n	8008112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800810e:	2b02      	cmp	r3, #2
 8008110:	d130      	bne.n	8008174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	2203      	movs	r2, #3
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	43db      	mvns	r3, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4013      	ands	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4313      	orrs	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008148:	2201      	movs	r2, #1
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	43db      	mvns	r3, r3
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	4013      	ands	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	091b      	lsrs	r3, r3, #4
 800815e:	f003 0201 	and.w	r2, r3, #1
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4313      	orrs	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	2b03      	cmp	r3, #3
 800817e:	d017      	beq.n	80081b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	2203      	movs	r2, #3
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	43db      	mvns	r3, r3
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	4013      	ands	r3, r2
 8008196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d123      	bne.n	8008204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	08da      	lsrs	r2, r3, #3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3208      	adds	r2, #8
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	220f      	movs	r2, #15
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	4013      	ands	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	08da      	lsrs	r2, r3, #3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3208      	adds	r2, #8
 80081fe:	69b9      	ldr	r1, [r7, #24]
 8008200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	2203      	movs	r2, #3
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4013      	ands	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 0203 	and.w	r2, r3, #3
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	4313      	orrs	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80b4 	beq.w	80083ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	4b60      	ldr	r3, [pc, #384]	@ (80083cc <HAL_GPIO_Init+0x30c>)
 800824c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824e:	4a5f      	ldr	r2, [pc, #380]	@ (80083cc <HAL_GPIO_Init+0x30c>)
 8008250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008254:	6453      	str	r3, [r2, #68]	@ 0x44
 8008256:	4b5d      	ldr	r3, [pc, #372]	@ (80083cc <HAL_GPIO_Init+0x30c>)
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008262:	4a5b      	ldr	r2, [pc, #364]	@ (80083d0 <HAL_GPIO_Init+0x310>)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	3302      	adds	r3, #2
 800826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	220f      	movs	r2, #15
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	43db      	mvns	r3, r3
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	4013      	ands	r3, r2
 8008284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a52      	ldr	r2, [pc, #328]	@ (80083d4 <HAL_GPIO_Init+0x314>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d02b      	beq.n	80082e6 <HAL_GPIO_Init+0x226>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a51      	ldr	r2, [pc, #324]	@ (80083d8 <HAL_GPIO_Init+0x318>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d025      	beq.n	80082e2 <HAL_GPIO_Init+0x222>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a50      	ldr	r2, [pc, #320]	@ (80083dc <HAL_GPIO_Init+0x31c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01f      	beq.n	80082de <HAL_GPIO_Init+0x21e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a4f      	ldr	r2, [pc, #316]	@ (80083e0 <HAL_GPIO_Init+0x320>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d019      	beq.n	80082da <HAL_GPIO_Init+0x21a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a4e      	ldr	r2, [pc, #312]	@ (80083e4 <HAL_GPIO_Init+0x324>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <HAL_GPIO_Init+0x216>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a4d      	ldr	r2, [pc, #308]	@ (80083e8 <HAL_GPIO_Init+0x328>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00d      	beq.n	80082d2 <HAL_GPIO_Init+0x212>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a4c      	ldr	r2, [pc, #304]	@ (80083ec <HAL_GPIO_Init+0x32c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d007      	beq.n	80082ce <HAL_GPIO_Init+0x20e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a4b      	ldr	r2, [pc, #300]	@ (80083f0 <HAL_GPIO_Init+0x330>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <HAL_GPIO_Init+0x20a>
 80082c6:	2307      	movs	r3, #7
 80082c8:	e00e      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082ca:	2308      	movs	r3, #8
 80082cc:	e00c      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082ce:	2306      	movs	r3, #6
 80082d0:	e00a      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082d2:	2305      	movs	r3, #5
 80082d4:	e008      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082d6:	2304      	movs	r3, #4
 80082d8:	e006      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082da:	2303      	movs	r3, #3
 80082dc:	e004      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082de:	2302      	movs	r3, #2
 80082e0:	e002      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <HAL_GPIO_Init+0x228>
 80082e6:	2300      	movs	r3, #0
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	f002 0203 	and.w	r2, r2, #3
 80082ee:	0092      	lsls	r2, r2, #2
 80082f0:	4093      	lsls	r3, r2
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082f8:	4935      	ldr	r1, [pc, #212]	@ (80083d0 <HAL_GPIO_Init+0x310>)
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	089b      	lsrs	r3, r3, #2
 80082fe:	3302      	adds	r3, #2
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008306:	4b3b      	ldr	r3, [pc, #236]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	43db      	mvns	r3, r3
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	4013      	ands	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800832a:	4a32      	ldr	r2, [pc, #200]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008330:	4b30      	ldr	r3, [pc, #192]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	43db      	mvns	r3, r3
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	4013      	ands	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008354:	4a27      	ldr	r2, [pc, #156]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800835a:	4b26      	ldr	r3, [pc, #152]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	43db      	mvns	r3, r3
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	4013      	ands	r3, r2
 8008368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800837e:	4a1d      	ldr	r2, [pc, #116]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008384:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	43db      	mvns	r3, r3
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	4013      	ands	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083a8:	4a12      	ldr	r2, [pc, #72]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	3301      	adds	r3, #1
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	f67f ae90 	bls.w	80080dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3724      	adds	r7, #36	@ 0x24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40023800 	.word	0x40023800
 80083d0:	40013800 	.word	0x40013800
 80083d4:	40020000 	.word	0x40020000
 80083d8:	40020400 	.word	0x40020400
 80083dc:	40020800 	.word	0x40020800
 80083e0:	40020c00 	.word	0x40020c00
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40021400 	.word	0x40021400
 80083ec:	40021800 	.word	0x40021800
 80083f0:	40021c00 	.word	0x40021c00
 80083f4:	40013c00 	.word	0x40013c00

080083f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008408:	787b      	ldrb	r3, [r7, #1]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800840e:	887a      	ldrh	r2, [r7, #2]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008414:	e003      	b.n	800841e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	041a      	lsls	r2, r3, #16
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	619a      	str	r2, [r3, #24]
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008436:	4b08      	ldr	r3, [pc, #32]	@ (8008458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	4013      	ands	r3, r2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d006      	beq.n	8008450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008442:	4a05      	ldr	r2, [pc, #20]	@ (8008458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	4618      	mov	r0, r3
 800844c:	f7fc fc68 	bl	8004d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40013c00 	.word	0x40013c00

0800845c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e12b      	b.n	80086c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fd fd68 	bl	8005f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2224      	movs	r2, #36	@ 0x24
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80084c0:	f000 fd4c 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 80084c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	4a81      	ldr	r2, [pc, #516]	@ (80086d0 <HAL_I2C_Init+0x274>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d807      	bhi.n	80084e0 <HAL_I2C_Init+0x84>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a80      	ldr	r2, [pc, #512]	@ (80086d4 <HAL_I2C_Init+0x278>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	bf94      	ite	ls
 80084d8:	2301      	movls	r3, #1
 80084da:	2300      	movhi	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	e006      	b.n	80084ee <HAL_I2C_Init+0x92>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a7d      	ldr	r2, [pc, #500]	@ (80086d8 <HAL_I2C_Init+0x27c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	bf94      	ite	ls
 80084e8:	2301      	movls	r3, #1
 80084ea:	2300      	movhi	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e0e7      	b.n	80086c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a78      	ldr	r2, [pc, #480]	@ (80086dc <HAL_I2C_Init+0x280>)
 80084fa:	fba2 2303 	umull	r2, r3, r2, r3
 80084fe:	0c9b      	lsrs	r3, r3, #18
 8008500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a6a      	ldr	r2, [pc, #424]	@ (80086d0 <HAL_I2C_Init+0x274>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d802      	bhi.n	8008530 <HAL_I2C_Init+0xd4>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3301      	adds	r3, #1
 800852e:	e009      	b.n	8008544 <HAL_I2C_Init+0xe8>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	4a69      	ldr	r2, [pc, #420]	@ (80086e0 <HAL_I2C_Init+0x284>)
 800853c:	fba2 2303 	umull	r2, r3, r2, r3
 8008540:	099b      	lsrs	r3, r3, #6
 8008542:	3301      	adds	r3, #1
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	430b      	orrs	r3, r1
 800854a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	495c      	ldr	r1, [pc, #368]	@ (80086d0 <HAL_I2C_Init+0x274>)
 8008560:	428b      	cmp	r3, r1
 8008562:	d819      	bhi.n	8008598 <HAL_I2C_Init+0x13c>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1e59      	subs	r1, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008572:	1c59      	adds	r1, r3, #1
 8008574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008578:	400b      	ands	r3, r1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <HAL_I2C_Init+0x138>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1e59      	subs	r1, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	fbb1 f3f3 	udiv	r3, r1, r3
 800858c:	3301      	adds	r3, #1
 800858e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008592:	e051      	b.n	8008638 <HAL_I2C_Init+0x1dc>
 8008594:	2304      	movs	r3, #4
 8008596:	e04f      	b.n	8008638 <HAL_I2C_Init+0x1dc>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d111      	bne.n	80085c4 <HAL_I2C_Init+0x168>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	1e58      	subs	r0, r3, #1
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6859      	ldr	r1, [r3, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	005b      	lsls	r3, r3, #1
 80085ac:	440b      	add	r3, r1
 80085ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80085b2:	3301      	adds	r3, #1
 80085b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	e012      	b.n	80085ea <HAL_I2C_Init+0x18e>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	1e58      	subs	r0, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6859      	ldr	r1, [r3, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	440b      	add	r3, r1
 80085d2:	0099      	lsls	r1, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80085da:	3301      	adds	r3, #1
 80085dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bf0c      	ite	eq
 80085e4:	2301      	moveq	r3, #1
 80085e6:	2300      	movne	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <HAL_I2C_Init+0x196>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e022      	b.n	8008638 <HAL_I2C_Init+0x1dc>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10e      	bne.n	8008618 <HAL_I2C_Init+0x1bc>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1e58      	subs	r0, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	440b      	add	r3, r1
 8008608:	fbb0 f3f3 	udiv	r3, r0, r3
 800860c:	3301      	adds	r3, #1
 800860e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008616:	e00f      	b.n	8008638 <HAL_I2C_Init+0x1dc>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	1e58      	subs	r0, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6859      	ldr	r1, [r3, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	0099      	lsls	r1, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	fbb0 f3f3 	udiv	r3, r0, r3
 800862e:	3301      	adds	r3, #1
 8008630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	6809      	ldr	r1, [r1, #0]
 800863c:	4313      	orrs	r3, r2
 800863e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69da      	ldr	r2, [r3, #28]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6911      	ldr	r1, [r2, #16]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68d2      	ldr	r2, [r2, #12]
 8008672:	4311      	orrs	r1, r2
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	430b      	orrs	r3, r1
 800867a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695a      	ldr	r2, [r3, #20]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	000186a0 	.word	0x000186a0
 80086d4:	001e847f 	.word	0x001e847f
 80086d8:	003d08ff 	.word	0x003d08ff
 80086dc:	431bde83 	.word	0x431bde83
 80086e0:	10624dd3 	.word	0x10624dd3

080086e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e267      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d075      	beq.n	80087ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008702:	4b88      	ldr	r3, [pc, #544]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 030c 	and.w	r3, r3, #12
 800870a:	2b04      	cmp	r3, #4
 800870c:	d00c      	beq.n	8008728 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800870e:	4b85      	ldr	r3, [pc, #532]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008716:	2b08      	cmp	r3, #8
 8008718:	d112      	bne.n	8008740 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800871a:	4b82      	ldr	r3, [pc, #520]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008726:	d10b      	bne.n	8008740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008728:	4b7e      	ldr	r3, [pc, #504]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d05b      	beq.n	80087ec <HAL_RCC_OscConfig+0x108>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d157      	bne.n	80087ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e242      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008748:	d106      	bne.n	8008758 <HAL_RCC_OscConfig+0x74>
 800874a:	4b76      	ldr	r3, [pc, #472]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a75      	ldr	r2, [pc, #468]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e01d      	b.n	8008794 <HAL_RCC_OscConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0x98>
 8008762:	4b70      	ldr	r3, [pc, #448]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a6f      	ldr	r2, [pc, #444]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4b6d      	ldr	r3, [pc, #436]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a6c      	ldr	r2, [pc, #432]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0xb0>
 800877c:	4b69      	ldr	r3, [pc, #420]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a68      	ldr	r2, [pc, #416]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4b66      	ldr	r3, [pc, #408]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a65      	ldr	r2, [pc, #404]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 800878e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d013      	beq.n	80087c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879c:	f7fe f90a 	bl	80069b4 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a4:	f7fe f906 	bl	80069b4 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	@ 0x64
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e207      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0xc0>
 80087c2:	e014      	b.n	80087ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c4:	f7fe f8f6 	bl	80069b4 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087cc:	f7fe f8f2 	bl	80069b4 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b64      	cmp	r3, #100	@ 0x64
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e1f3      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087de:	4b51      	ldr	r3, [pc, #324]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <HAL_RCC_OscConfig+0xe8>
 80087ea:	e000      	b.n	80087ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d063      	beq.n	80088c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 030c 	and.w	r3, r3, #12
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008806:	4b47      	ldr	r3, [pc, #284]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800880e:	2b08      	cmp	r3, #8
 8008810:	d11c      	bne.n	800884c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008812:	4b44      	ldr	r3, [pc, #272]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d116      	bne.n	800884c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881e:	4b41      	ldr	r3, [pc, #260]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_RCC_OscConfig+0x152>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e1c7      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008836:	4b3b      	ldr	r3, [pc, #236]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	4937      	ldr	r1, [pc, #220]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008846:	4313      	orrs	r3, r2
 8008848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800884a:	e03a      	b.n	80088c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008854:	4b34      	ldr	r3, [pc, #208]	@ (8008928 <HAL_RCC_OscConfig+0x244>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fe f8ab 	bl	80069b4 <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008862:	f7fe f8a7 	bl	80069b4 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e1a8      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008874:	4b2b      	ldr	r3, [pc, #172]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0f0      	beq.n	8008862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008880:	4b28      	ldr	r3, [pc, #160]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	4925      	ldr	r1, [pc, #148]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 8008890:	4313      	orrs	r3, r2
 8008892:	600b      	str	r3, [r1, #0]
 8008894:	e015      	b.n	80088c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008896:	4b24      	ldr	r3, [pc, #144]	@ (8008928 <HAL_RCC_OscConfig+0x244>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800889c:	f7fe f88a 	bl	80069b4 <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a4:	f7fe f886 	bl	80069b4 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e187      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f0      	bne.n	80088a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d036      	beq.n	800893c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d6:	4b15      	ldr	r3, [pc, #84]	@ (800892c <HAL_RCC_OscConfig+0x248>)
 80088d8:	2201      	movs	r2, #1
 80088da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088dc:	f7fe f86a 	bl	80069b4 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e4:	f7fe f866 	bl	80069b4 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e167      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <HAL_RCC_OscConfig+0x240>)
 80088f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x200>
 8008902:	e01b      	b.n	800893c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008904:	4b09      	ldr	r3, [pc, #36]	@ (800892c <HAL_RCC_OscConfig+0x248>)
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800890a:	f7fe f853 	bl	80069b4 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008910:	e00e      	b.n	8008930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008912:	f7fe f84f 	bl	80069b4 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d907      	bls.n	8008930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e150      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
 8008924:	40023800 	.word	0x40023800
 8008928:	42470000 	.word	0x42470000
 800892c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008930:	4b88      	ldr	r3, [pc, #544]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1ea      	bne.n	8008912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8097 	beq.w	8008a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800894e:	4b81      	ldr	r3, [pc, #516]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10f      	bne.n	800897a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	4b7d      	ldr	r3, [pc, #500]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008962:	4a7c      	ldr	r2, [pc, #496]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008968:	6413      	str	r3, [r2, #64]	@ 0x40
 800896a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800897a:	4b77      	ldr	r3, [pc, #476]	@ (8008b58 <HAL_RCC_OscConfig+0x474>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008982:	2b00      	cmp	r3, #0
 8008984:	d118      	bne.n	80089b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008986:	4b74      	ldr	r3, [pc, #464]	@ (8008b58 <HAL_RCC_OscConfig+0x474>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a73      	ldr	r2, [pc, #460]	@ (8008b58 <HAL_RCC_OscConfig+0x474>)
 800898c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008992:	f7fe f80f 	bl	80069b4 <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800899a:	f7fe f80b 	bl	80069b4 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e10c      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ac:	4b6a      	ldr	r3, [pc, #424]	@ (8008b58 <HAL_RCC_OscConfig+0x474>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d106      	bne.n	80089ce <HAL_RCC_OscConfig+0x2ea>
 80089c0:	4b64      	ldr	r3, [pc, #400]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c4:	4a63      	ldr	r2, [pc, #396]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80089cc:	e01c      	b.n	8008a08 <HAL_RCC_OscConfig+0x324>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d10c      	bne.n	80089f0 <HAL_RCC_OscConfig+0x30c>
 80089d6:	4b5f      	ldr	r3, [pc, #380]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089da:	4a5e      	ldr	r2, [pc, #376]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089dc:	f043 0304 	orr.w	r3, r3, #4
 80089e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e6:	4a5b      	ldr	r2, [pc, #364]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ee:	e00b      	b.n	8008a08 <HAL_RCC_OscConfig+0x324>
 80089f0:	4b58      	ldr	r3, [pc, #352]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f4:	4a57      	ldr	r2, [pc, #348]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80089fc:	4b55      	ldr	r3, [pc, #340]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a00:	4a54      	ldr	r2, [pc, #336]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a02:	f023 0304 	bic.w	r3, r3, #4
 8008a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d015      	beq.n	8008a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fd ffd0 	bl	80069b4 <HAL_GetTick>
 8008a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a16:	e00a      	b.n	8008a2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a18:	f7fd ffcc 	bl	80069b4 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e0cb      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2e:	4b49      	ldr	r3, [pc, #292]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0ee      	beq.n	8008a18 <HAL_RCC_OscConfig+0x334>
 8008a3a:	e014      	b.n	8008a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3c:	f7fd ffba 	bl	80069b4 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a42:	e00a      	b.n	8008a5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a44:	f7fd ffb6 	bl	80069b4 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e0b5      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1ee      	bne.n	8008a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d105      	bne.n	8008a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6c:	4b39      	ldr	r3, [pc, #228]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a70:	4a38      	ldr	r2, [pc, #224]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80a1 	beq.w	8008bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a82:	4b34      	ldr	r3, [pc, #208]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d05c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d141      	bne.n	8008b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a96:	4b31      	ldr	r3, [pc, #196]	@ (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9c:	f7fd ff8a 	bl	80069b4 <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa4:	f7fd ff86 	bl	80069b4 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e087      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab6:	4b27      	ldr	r3, [pc, #156]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	019b      	lsls	r3, r3, #6
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	3b01      	subs	r3, #1
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	061b      	lsls	r3, r3, #24
 8008ae6:	491b      	ldr	r1, [pc, #108]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aec:	4b1b      	ldr	r3, [pc, #108]	@ (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af2:	f7fd ff5f 	bl	80069b4 <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afa:	f7fd ff5b 	bl	80069b4 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e05c      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x416>
 8008b18:	e054      	b.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b1a:	4b10      	ldr	r3, [pc, #64]	@ (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7fd ff48 	bl	80069b4 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b28:	f7fd ff44 	bl	80069b4 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e045      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3a:	4b06      	ldr	r3, [pc, #24]	@ (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x444>
 8008b46:	e03d      	b.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e038      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40007000 	.word	0x40007000
 8008b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b60:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd0 <HAL_RCC_OscConfig+0x4ec>)
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d028      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d121      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d11a      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d111      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40023800 	.word	0x40023800

08008bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0cc      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008be8:	4b68      	ldr	r3, [pc, #416]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d90c      	bls.n	8008c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b65      	ldr	r3, [pc, #404]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfe:	4b63      	ldr	r3, [pc, #396]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d001      	beq.n	8008c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0b8      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d020      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c28:	4b59      	ldr	r3, [pc, #356]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	4a58      	ldr	r2, [pc, #352]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c40:	4b53      	ldr	r3, [pc, #332]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	4a52      	ldr	r2, [pc, #328]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c4c:	4b50      	ldr	r3, [pc, #320]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	494d      	ldr	r1, [pc, #308]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d044      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d107      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c72:	4b47      	ldr	r3, [pc, #284]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d119      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e07f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d003      	beq.n	8008c92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d107      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c92:	4b3f      	ldr	r3, [pc, #252]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e06f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e067      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cb2:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 0203 	bic.w	r2, r3, #3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4934      	ldr	r1, [pc, #208]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cc4:	f7fd fe76 	bl	80069b4 <HAL_GetTick>
 8008cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ccc:	f7fd fe72 	bl	80069b4 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e04f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 020c 	and.w	r2, r3, #12
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d1eb      	bne.n	8008ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf4:	4b25      	ldr	r3, [pc, #148]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d20c      	bcs.n	8008d1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	4b22      	ldr	r3, [pc, #136]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0a:	4b20      	ldr	r3, [pc, #128]	@ (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e032      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d28:	4b19      	ldr	r3, [pc, #100]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	4916      	ldr	r1, [pc, #88]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d46:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	490e      	ldr	r1, [pc, #56]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d5a:	f000 f82d 	bl	8008db8 <HAL_RCC_GetSysClockFreq>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b0b      	ldr	r3, [pc, #44]	@ (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	091b      	lsrs	r3, r3, #4
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	490a      	ldr	r1, [pc, #40]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008d6c:	5ccb      	ldrb	r3, [r1, r3]
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	4a09      	ldr	r2, [pc, #36]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d76:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fd fdd6 	bl	800692c <HAL_InitTick>

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40023c00 	.word	0x40023c00
 8008d90:	40023800 	.word	0x40023800
 8008d94:	0800ffe0 	.word	0x0800ffe0
 8008d98:	2000004c 	.word	0x2000004c
 8008d9c:	20000050 	.word	0x20000050

08008da0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008da4:	4b03      	ldr	r3, [pc, #12]	@ (8008db4 <HAL_RCC_EnableCSS+0x14>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	bf00      	nop
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	4247004c 	.word	0x4247004c

08008db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dbc:	b090      	sub	sp, #64	@ 0x40
 8008dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dd0:	4b59      	ldr	r3, [pc, #356]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 030c 	and.w	r3, r3, #12
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d00d      	beq.n	8008df8 <HAL_RCC_GetSysClockFreq+0x40>
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	f200 80a1 	bhi.w	8008f24 <HAL_RCC_GetSysClockFreq+0x16c>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_RCC_GetSysClockFreq+0x34>
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d003      	beq.n	8008df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dea:	e09b      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dec:	4b53      	ldr	r3, [pc, #332]	@ (8008f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8008dee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008df0:	e09b      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008df2:	4b53      	ldr	r3, [pc, #332]	@ (8008f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8008df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008df6:	e098      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008df8:	4b4f      	ldr	r3, [pc, #316]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e02:	4b4d      	ldr	r3, [pc, #308]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d028      	beq.n	8008e60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	099b      	lsrs	r3, r3, #6
 8008e14:	2200      	movs	r2, #0
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e20:	2100      	movs	r1, #0
 8008e22:	4b47      	ldr	r3, [pc, #284]	@ (8008f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e24:	fb03 f201 	mul.w	r2, r3, r1
 8008e28:	2300      	movs	r3, #0
 8008e2a:	fb00 f303 	mul.w	r3, r0, r3
 8008e2e:	4413      	add	r3, r2
 8008e30:	4a43      	ldr	r2, [pc, #268]	@ (8008f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e32:	fba0 1202 	umull	r1, r2, r0, r2
 8008e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e38:	460a      	mov	r2, r1
 8008e3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e3e:	4413      	add	r3, r2
 8008e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e44:	2200      	movs	r2, #0
 8008e46:	61bb      	str	r3, [r7, #24]
 8008e48:	61fa      	str	r2, [r7, #28]
 8008e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008e52:	f7f7 fe5b 	bl	8000b0c <__aeabi_uldivmod>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e5e:	e053      	b.n	8008f08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e60:	4b35      	ldr	r3, [pc, #212]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	099b      	lsrs	r3, r3, #6
 8008e66:	2200      	movs	r2, #0
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	617a      	str	r2, [r7, #20]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e72:	f04f 0b00 	mov.w	fp, #0
 8008e76:	4652      	mov	r2, sl
 8008e78:	465b      	mov	r3, fp
 8008e7a:	f04f 0000 	mov.w	r0, #0
 8008e7e:	f04f 0100 	mov.w	r1, #0
 8008e82:	0159      	lsls	r1, r3, #5
 8008e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e88:	0150      	lsls	r0, r2, #5
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	ebb2 080a 	subs.w	r8, r2, sl
 8008e92:	eb63 090b 	sbc.w	r9, r3, fp
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ea2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ea6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008eaa:	ebb2 0408 	subs.w	r4, r2, r8
 8008eae:	eb63 0509 	sbc.w	r5, r3, r9
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	00eb      	lsls	r3, r5, #3
 8008ebc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ec0:	00e2      	lsls	r2, r4, #3
 8008ec2:	4614      	mov	r4, r2
 8008ec4:	461d      	mov	r5, r3
 8008ec6:	eb14 030a 	adds.w	r3, r4, sl
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	eb45 030b 	adc.w	r3, r5, fp
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ede:	4629      	mov	r1, r5
 8008ee0:	028b      	lsls	r3, r1, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ee8:	4621      	mov	r1, r4
 8008eea:	028a      	lsls	r2, r1, #10
 8008eec:	4610      	mov	r0, r2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	60fa      	str	r2, [r7, #12]
 8008ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008efc:	f7f7 fe06 	bl	8000b0c <__aeabi_uldivmod>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4613      	mov	r3, r2
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008f08:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	0c1b      	lsrs	r3, r3, #16
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	3301      	adds	r3, #1
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008f18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f22:	e002      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f24:	4b05      	ldr	r3, [pc, #20]	@ (8008f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8008f26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3740      	adds	r7, #64	@ 0x40
 8008f30:	46bd      	mov	sp, r7
 8008f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	00f42400 	.word	0x00f42400
 8008f40:	00b71b00 	.word	0x00b71b00

08008f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f48:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	2000004c 	.word	0x2000004c

08008f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f60:	f7ff fff0 	bl	8008f44 <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b05      	ldr	r3, [pc, #20]	@ (8008f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	0a9b      	lsrs	r3, r3, #10
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4903      	ldr	r1, [pc, #12]	@ (8008f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	0800fff0 	.word	0x0800fff0

08008f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f88:	f7ff ffdc 	bl	8008f44 <HAL_RCC_GetHCLKFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	0b5b      	lsrs	r3, r3, #13
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	4903      	ldr	r1, [pc, #12]	@ (8008fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40023800 	.word	0x40023800
 8008fa8:	0800fff0 	.word	0x0800fff0

08008fac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008fb0:	4b06      	ldr	r3, [pc, #24]	@ (8008fcc <HAL_RCC_NMI_IRQHandler+0x20>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb8:	2b80      	cmp	r3, #128	@ 0x80
 8008fba:	d104      	bne.n	8008fc6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008fbc:	f000 f80a 	bl	8008fd4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008fc0:	4b03      	ldr	r3, [pc, #12]	@ (8008fd0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008fc2:	2280      	movs	r2, #128	@ 0x80
 8008fc4:	701a      	strb	r2, [r3, #0]
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40023800 	.word	0x40023800
 8008fd0:	4002380e 	.word	0x4002380e

08008fd4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e07b      	b.n	80090ec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d108      	bne.n	800900e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009004:	d009      	beq.n	800901a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	61da      	str	r2, [r3, #28]
 800900c:	e005      	b.n	800901a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7fc fff9 	bl	800602c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2202      	movs	r2, #2
 800903e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009050:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800909e:	ea42 0103 	orr.w	r1, r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	0c1b      	lsrs	r3, r3, #16
 80090b8:	f003 0104 	and.w	r1, r3, #4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c0:	f003 0210 	and.w	r2, r3, #16
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08a      	sub	sp, #40	@ 0x28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009102:	2301      	movs	r3, #1
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009106:	f7fd fc55 	bl	80069b4 <HAL_GetTick>
 800910a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009112:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800911a:	887b      	ldrh	r3, [r7, #2]
 800911c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800911e:	7ffb      	ldrb	r3, [r7, #31]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d00c      	beq.n	800913e <HAL_SPI_TransmitReceive+0x4a>
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800912a:	d106      	bne.n	800913a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d102      	bne.n	800913a <HAL_SPI_TransmitReceive+0x46>
 8009134:	7ffb      	ldrb	r3, [r7, #31]
 8009136:	2b04      	cmp	r3, #4
 8009138:	d001      	beq.n	800913e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800913a:	2302      	movs	r3, #2
 800913c:	e17f      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_SPI_TransmitReceive+0x5c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <HAL_SPI_TransmitReceive+0x5c>
 800914a:	887b      	ldrh	r3, [r7, #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e174      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800915a:	2b01      	cmp	r3, #1
 800915c:	d101      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x6e>
 800915e:	2302      	movs	r3, #2
 8009160:	e16d      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b04      	cmp	r3, #4
 8009174:	d003      	beq.n	800917e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2205      	movs	r2, #5
 800917a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	887a      	ldrh	r2, [r7, #2]
 800918e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	887a      	ldrh	r2, [r7, #2]
 8009194:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	887a      	ldrh	r2, [r7, #2]
 80091a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	887a      	ldrh	r2, [r7, #2]
 80091a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	d007      	beq.n	80091d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091da:	d17e      	bne.n	80092da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_TransmitReceive+0xf6>
 80091e4:	8afb      	ldrh	r3, [r7, #22]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d16c      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fa:	1c9a      	adds	r2, r3, #2
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800920e:	e059      	b.n	80092c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b02      	cmp	r3, #2
 800921c:	d11b      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x162>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009222:	b29b      	uxth	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d016      	beq.n	8009256 <HAL_SPI_TransmitReceive+0x162>
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2b01      	cmp	r3, #1
 800922c:	d113      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009232:	881a      	ldrh	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923e:	1c9a      	adds	r2, r3, #2
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d119      	bne.n	8009298 <HAL_SPI_TransmitReceive+0x1a4>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009268:	b29b      	uxth	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d014      	beq.n	8009298 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	b292      	uxth	r2, r2
 800927a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	1c9a      	adds	r2, r3, #2
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009294:	2301      	movs	r3, #1
 8009296:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009298:	f7fd fb8c 	bl	80069b4 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d80d      	bhi.n	80092c4 <HAL_SPI_TransmitReceive+0x1d0>
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092ae:	d009      	beq.n	80092c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e0bc      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1a0      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x11c>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d19b      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x11c>
 80092d8:	e082      	b.n	80093e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x1f4>
 80092e2:	8afb      	ldrh	r3, [r7, #22]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d171      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	330c      	adds	r3, #12
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800930e:	e05d      	b.n	80093cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b02      	cmp	r3, #2
 800931c:	d11c      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x264>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009322:	b29b      	uxth	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <HAL_SPI_TransmitReceive+0x264>
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	2b01      	cmp	r3, #1
 800932c:	d114      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	330c      	adds	r3, #12
 8009338:	7812      	ldrb	r2, [r2, #0]
 800933a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d119      	bne.n	800939a <HAL_SPI_TransmitReceive+0x2a6>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d014      	beq.n	800939a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800938c:	b29b      	uxth	r3, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009396:	2301      	movs	r3, #1
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800939a:	f7fd fb0b 	bl	80069b4 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d803      	bhi.n	80093b2 <HAL_SPI_TransmitReceive+0x2be>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b0:	d102      	bne.n	80093b8 <HAL_SPI_TransmitReceive+0x2c4>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d109      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e038      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d19c      	bne.n	8009310 <HAL_SPI_TransmitReceive+0x21c>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d197      	bne.n	8009310 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093e0:	6a3a      	ldr	r2, [r7, #32]
 80093e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f8b7 	bl	8009558 <SPI_EndRxTxTransaction>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d008      	beq.n	8009402 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e01d      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800940a:	2300      	movs	r3, #0
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800943c:	2300      	movs	r3, #0
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	@ 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009458:	f7fd faac 	bl	80069b4 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4413      	add	r3, r2
 8009466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009468:	f7fd faa4 	bl	80069b4 <HAL_GetTick>
 800946c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800946e:	4b39      	ldr	r3, [pc, #228]	@ (8009554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	015b      	lsls	r3, r3, #5
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800947e:	e055      	b.n	800952c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009486:	d051      	beq.n	800952c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009488:	f7fd fa94 	bl	80069b4 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	429a      	cmp	r2, r3
 8009496:	d902      	bls.n	800949e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d13d      	bne.n	800951a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094b6:	d111      	bne.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094c0:	d004      	beq.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ca:	d107      	bne.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e4:	d10f      	bne.n	8009506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e018      	b.n	800954c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]
 8009524:	e002      	b.n	800952c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	3b01      	subs	r3, #1
 800952a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4013      	ands	r3, r2
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	429a      	cmp	r2, r3
 800953a:	bf0c      	ite	eq
 800953c:	2301      	moveq	r3, #1
 800953e:	2300      	movne	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	461a      	mov	r2, r3
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	429a      	cmp	r2, r3
 8009548:	d19a      	bne.n	8009480 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	2000004c 	.word	0x2000004c

08009558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2201      	movs	r2, #1
 800956c:	2102      	movs	r1, #2
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff ff6a 	bl	8009448 <SPI_WaitFlagStateUntilTimeout>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957e:	f043 0220 	orr.w	r2, r3, #32
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e032      	b.n	80095f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800958a:	4b1b      	ldr	r3, [pc, #108]	@ (80095f8 <SPI_EndRxTxTransaction+0xa0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a1b      	ldr	r2, [pc, #108]	@ (80095fc <SPI_EndRxTxTransaction+0xa4>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	0d5b      	lsrs	r3, r3, #21
 8009596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800959a:	fb02 f303 	mul.w	r3, r2, r3
 800959e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095a8:	d112      	bne.n	80095d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2200      	movs	r2, #0
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff ff47 	bl	8009448 <SPI_WaitFlagStateUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d016      	beq.n	80095ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c4:	f043 0220 	orr.w	r2, r3, #32
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e00f      	b.n	80095f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3b01      	subs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e6:	2b80      	cmp	r3, #128	@ 0x80
 80095e8:	d0f2      	beq.n	80095d0 <SPI_EndRxTxTransaction+0x78>
 80095ea:	e000      	b.n	80095ee <SPI_EndRxTxTransaction+0x96>
        break;
 80095ec:	bf00      	nop
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	2000004c 	.word	0x2000004c
 80095fc:	165e9f81 	.word	0x165e9f81

08009600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e041      	b.n	8009696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fc fdb6 	bl	8006198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f000 fa06 	bl	8009a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e041      	b.n	8009734 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fc fd19 	bl	80060fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3304      	adds	r3, #4
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f000 f9b7 	bl	8009a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009756:	2302      	movs	r3, #2
 8009758:	e0ae      	b.n	80098b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b0c      	cmp	r3, #12
 8009766:	f200 809f 	bhi.w	80098a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800976a:	a201      	add	r2, pc, #4	@ (adr r2, 8009770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080098a9 	.word	0x080098a9
 8009778:	080098a9 	.word	0x080098a9
 800977c:	080098a9 	.word	0x080098a9
 8009780:	080097e5 	.word	0x080097e5
 8009784:	080098a9 	.word	0x080098a9
 8009788:	080098a9 	.word	0x080098a9
 800978c:	080098a9 	.word	0x080098a9
 8009790:	08009827 	.word	0x08009827
 8009794:	080098a9 	.word	0x080098a9
 8009798:	080098a9 	.word	0x080098a9
 800979c:	080098a9 	.word	0x080098a9
 80097a0:	08009867 	.word	0x08009867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f9f6 	bl	8009b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0208 	orr.w	r2, r2, #8
 80097be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0204 	bic.w	r2, r2, #4
 80097ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6999      	ldr	r1, [r3, #24]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	619a      	str	r2, [r3, #24]
      break;
 80097e2:	e064      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fa46 	bl	8009c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699a      	ldr	r2, [r3, #24]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800980e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6999      	ldr	r1, [r3, #24]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	021a      	lsls	r2, r3, #8
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	619a      	str	r2, [r3, #24]
      break;
 8009824:	e043      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fa9b 	bl	8009d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0208 	orr.w	r2, r2, #8
 8009840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0204 	bic.w	r2, r2, #4
 8009850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69d9      	ldr	r1, [r3, #28]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	61da      	str	r2, [r3, #28]
      break;
 8009864:	e023      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 faef 	bl	8009e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69d9      	ldr	r1, [r3, #28]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	021a      	lsls	r2, r3, #8
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	61da      	str	r2, [r3, #28]
      break;
 80098a6:	e002      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]
      break;
 80098ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_TIM_ConfigClockSource+0x1c>
 80098d8:	2302      	movs	r3, #2
 80098da:	e0b4      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x186>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009914:	d03e      	beq.n	8009994 <HAL_TIM_ConfigClockSource+0xd4>
 8009916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800991a:	f200 8087 	bhi.w	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 800991e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009922:	f000 8086 	beq.w	8009a32 <HAL_TIM_ConfigClockSource+0x172>
 8009926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992a:	d87f      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b70      	cmp	r3, #112	@ 0x70
 800992e:	d01a      	beq.n	8009966 <HAL_TIM_ConfigClockSource+0xa6>
 8009930:	2b70      	cmp	r3, #112	@ 0x70
 8009932:	d87b      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 8009934:	2b60      	cmp	r3, #96	@ 0x60
 8009936:	d050      	beq.n	80099da <HAL_TIM_ConfigClockSource+0x11a>
 8009938:	2b60      	cmp	r3, #96	@ 0x60
 800993a:	d877      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 800993c:	2b50      	cmp	r3, #80	@ 0x50
 800993e:	d03c      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0xfa>
 8009940:	2b50      	cmp	r3, #80	@ 0x50
 8009942:	d873      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 8009944:	2b40      	cmp	r3, #64	@ 0x40
 8009946:	d058      	beq.n	80099fa <HAL_TIM_ConfigClockSource+0x13a>
 8009948:	2b40      	cmp	r3, #64	@ 0x40
 800994a:	d86f      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 800994c:	2b30      	cmp	r3, #48	@ 0x30
 800994e:	d064      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x15a>
 8009950:	2b30      	cmp	r3, #48	@ 0x30
 8009952:	d86b      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 8009954:	2b20      	cmp	r3, #32
 8009956:	d060      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x15a>
 8009958:	2b20      	cmp	r3, #32
 800995a:	d867      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d05c      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x15a>
 8009960:	2b10      	cmp	r3, #16
 8009962:	d05a      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x15a>
 8009964:	e062      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009976:	f000 fb3b 	bl	8009ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	609a      	str	r2, [r3, #8]
      break;
 8009992:	e04f      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099a4:	f000 fb24 	bl	8009ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689a      	ldr	r2, [r3, #8]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80099b6:	609a      	str	r2, [r3, #8]
      break;
 80099b8:	e03c      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099c6:	461a      	mov	r2, r3
 80099c8:	f000 fa98 	bl	8009efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2150      	movs	r1, #80	@ 0x50
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 faf1 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 80099d8:	e02c      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099e6:	461a      	mov	r2, r3
 80099e8:	f000 fab7 	bl	8009f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2160      	movs	r1, #96	@ 0x60
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fae1 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 80099f8:	e01c      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a06:	461a      	mov	r2, r3
 8009a08:	f000 fa78 	bl	8009efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2140      	movs	r1, #64	@ 0x40
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fad1 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009a18:	e00c      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f000 fac8 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009a2a:	e003      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a30:	e000      	b.n	8009a34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a43      	ldr	r2, [pc, #268]	@ (8009b70 <TIM_Base_SetConfig+0x120>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d013      	beq.n	8009a90 <TIM_Base_SetConfig+0x40>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6e:	d00f      	beq.n	8009a90 <TIM_Base_SetConfig+0x40>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a40      	ldr	r2, [pc, #256]	@ (8009b74 <TIM_Base_SetConfig+0x124>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00b      	beq.n	8009a90 <TIM_Base_SetConfig+0x40>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b78 <TIM_Base_SetConfig+0x128>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d007      	beq.n	8009a90 <TIM_Base_SetConfig+0x40>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a3e      	ldr	r2, [pc, #248]	@ (8009b7c <TIM_Base_SetConfig+0x12c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_Base_SetConfig+0x40>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b80 <TIM_Base_SetConfig+0x130>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d108      	bne.n	8009aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a32      	ldr	r2, [pc, #200]	@ (8009b70 <TIM_Base_SetConfig+0x120>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d02b      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ab0:	d027      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8009b74 <TIM_Base_SetConfig+0x124>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d023      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a2e      	ldr	r2, [pc, #184]	@ (8009b78 <TIM_Base_SetConfig+0x128>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d01f      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8009b7c <TIM_Base_SetConfig+0x12c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d01b      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a2c      	ldr	r2, [pc, #176]	@ (8009b80 <TIM_Base_SetConfig+0x130>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d017      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8009b84 <TIM_Base_SetConfig+0x134>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a2a      	ldr	r2, [pc, #168]	@ (8009b88 <TIM_Base_SetConfig+0x138>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a29      	ldr	r2, [pc, #164]	@ (8009b8c <TIM_Base_SetConfig+0x13c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00b      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a28      	ldr	r2, [pc, #160]	@ (8009b90 <TIM_Base_SetConfig+0x140>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a27      	ldr	r2, [pc, #156]	@ (8009b94 <TIM_Base_SetConfig+0x144>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_Base_SetConfig+0xb2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a26      	ldr	r2, [pc, #152]	@ (8009b98 <TIM_Base_SetConfig+0x148>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d108      	bne.n	8009b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a0e      	ldr	r2, [pc, #56]	@ (8009b70 <TIM_Base_SetConfig+0x120>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d003      	beq.n	8009b42 <TIM_Base_SetConfig+0xf2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a10      	ldr	r2, [pc, #64]	@ (8009b80 <TIM_Base_SetConfig+0x130>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d103      	bne.n	8009b4a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	691a      	ldr	r2, [r3, #16]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f043 0204 	orr.w	r2, r3, #4
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	601a      	str	r2, [r3, #0]
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	40010000 	.word	0x40010000
 8009b74:	40000400 	.word	0x40000400
 8009b78:	40000800 	.word	0x40000800
 8009b7c:	40000c00 	.word	0x40000c00
 8009b80:	40010400 	.word	0x40010400
 8009b84:	40014000 	.word	0x40014000
 8009b88:	40014400 	.word	0x40014400
 8009b8c:	40014800 	.word	0x40014800
 8009b90:	40001800 	.word	0x40001800
 8009b94:	40001c00 	.word	0x40001c00
 8009b98:	40002000 	.word	0x40002000

08009b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f023 0201 	bic.w	r2, r3, #1
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f023 0302 	bic.w	r3, r3, #2
 8009be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a20      	ldr	r2, [pc, #128]	@ (8009c74 <TIM_OC1_SetConfig+0xd8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d003      	beq.n	8009c00 <TIM_OC1_SetConfig+0x64>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8009c78 <TIM_OC1_SetConfig+0xdc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10c      	bne.n	8009c1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f023 0308 	bic.w	r3, r3, #8
 8009c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f023 0304 	bic.w	r3, r3, #4
 8009c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <TIM_OC1_SetConfig+0xd8>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d003      	beq.n	8009c2a <TIM_OC1_SetConfig+0x8e>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a14      	ldr	r2, [pc, #80]	@ (8009c78 <TIM_OC1_SetConfig+0xdc>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d111      	bne.n	8009c4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	621a      	str	r2, [r3, #32]
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	40010000 	.word	0x40010000
 8009c78:	40010400 	.word	0x40010400

08009c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f023 0210 	bic.w	r2, r3, #16
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f023 0320 	bic.w	r3, r3, #32
 8009cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a22      	ldr	r2, [pc, #136]	@ (8009d60 <TIM_OC2_SetConfig+0xe4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d003      	beq.n	8009ce4 <TIM_OC2_SetConfig+0x68>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a21      	ldr	r2, [pc, #132]	@ (8009d64 <TIM_OC2_SetConfig+0xe8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d10d      	bne.n	8009d00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a17      	ldr	r2, [pc, #92]	@ (8009d60 <TIM_OC2_SetConfig+0xe4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d003      	beq.n	8009d10 <TIM_OC2_SetConfig+0x94>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a16      	ldr	r2, [pc, #88]	@ (8009d64 <TIM_OC2_SetConfig+0xe8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d113      	bne.n	8009d38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	621a      	str	r2, [r3, #32]
}
 8009d52:	bf00      	nop
 8009d54:	371c      	adds	r7, #28
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40010400 	.word	0x40010400

08009d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a21      	ldr	r2, [pc, #132]	@ (8009e48 <TIM_OC3_SetConfig+0xe0>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d003      	beq.n	8009dce <TIM_OC3_SetConfig+0x66>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a20      	ldr	r2, [pc, #128]	@ (8009e4c <TIM_OC3_SetConfig+0xe4>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d10d      	bne.n	8009dea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a16      	ldr	r2, [pc, #88]	@ (8009e48 <TIM_OC3_SetConfig+0xe0>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d003      	beq.n	8009dfa <TIM_OC3_SetConfig+0x92>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a15      	ldr	r2, [pc, #84]	@ (8009e4c <TIM_OC3_SetConfig+0xe4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d113      	bne.n	8009e22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40010400 	.word	0x40010400

08009e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	021b      	lsls	r3, r3, #8
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	031b      	lsls	r3, r3, #12
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a12      	ldr	r2, [pc, #72]	@ (8009ef4 <TIM_OC4_SetConfig+0xa4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC4_SetConfig+0x68>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a11      	ldr	r2, [pc, #68]	@ (8009ef8 <TIM_OC4_SetConfig+0xa8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d109      	bne.n	8009ecc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	019b      	lsls	r3, r3, #6
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	621a      	str	r2, [r3, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40010400 	.word	0x40010400

08009efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f023 030a 	bic.w	r3, r3, #10
 8009f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	f023 0210 	bic.w	r2, r3, #16
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	031b      	lsls	r3, r3, #12
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	f043 0307 	orr.w	r3, r3, #7
 8009fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	609a      	str	r2, [r3, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a00a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	021a      	lsls	r2, r3, #8
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	431a      	orrs	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4313      	orrs	r3, r2
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	609a      	str	r2, [r3, #8]
}
 800a024:	bf00      	nop
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a044:	2302      	movs	r3, #2
 800a046:	e05a      	b.n	800a0fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a21      	ldr	r2, [pc, #132]	@ (800a10c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d022      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a094:	d01d      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a1d      	ldr	r2, [pc, #116]	@ (800a110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d018      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00e      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a18      	ldr	r2, [pc, #96]	@ (800a11c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d009      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a17      	ldr	r2, [pc, #92]	@ (800a120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d004      	beq.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a15      	ldr	r2, [pc, #84]	@ (800a124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d10c      	bne.n	800a0ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	40010000 	.word	0x40010000
 800a110:	40000400 	.word	0x40000400
 800a114:	40000800 	.word	0x40000800
 800a118:	40000c00 	.word	0x40000c00
 800a11c:	40010400 	.word	0x40010400
 800a120:	40014000 	.word	0x40014000
 800a124:	40001800 	.word	0x40001800

0800a128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a140:	2302      	movs	r3, #2
 800a142:	e03d      	b.n	800a1c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e042      	b.n	800a264 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fc f904 	bl	8006400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2224      	movs	r2, #36	@ 0x24
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a20e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 ffc7 	bl	800b1a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	695a      	ldr	r2, [r3, #20]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2220      	movs	r2, #32
 800a258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	4613      	mov	r3, r2
 800a27a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d175      	bne.n	800a378 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_Transmit+0x2c>
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e06e      	b.n	800a37a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2221      	movs	r2, #33	@ 0x21
 800a2a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2aa:	f7fc fb83 	bl	80069b4 <HAL_GetTick>
 800a2ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	88fa      	ldrh	r2, [r7, #6]
 800a2ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c4:	d108      	bne.n	800a2d8 <HAL_UART_Transmit+0x6c>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	e003      	b.n	800a2e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2e0:	e02e      	b.n	800a340 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2180      	movs	r1, #128	@ 0x80
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 fc97 	bl	800ac20 <UART_WaitOnFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e03a      	b.n	800a37a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	3302      	adds	r3, #2
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	e007      	b.n	800a332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	3301      	adds	r3, #1
 800a330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a336:	b29b      	uxth	r3, r3
 800a338:	3b01      	subs	r3, #1
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1cb      	bne.n	800a2e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2200      	movs	r2, #0
 800a352:	2140      	movs	r1, #64	@ 0x40
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fc63 	bl	800ac20 <UART_WaitOnFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2220      	movs	r2, #32
 800a364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e006      	b.n	800a37a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	e000      	b.n	800a37a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a378:	2302      	movs	r3, #2
  }
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d112      	bne.n	800a3c2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <HAL_UART_Receive_DMA+0x26>
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e00b      	b.n	800a3c4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fc8b 	bl	800acd4 <UART_Start_Receive_DMA>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	e000      	b.n	800a3c4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a3c2:	2302      	movs	r3, #2
  }
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08c      	sub	sp, #48	@ 0x30
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d146      	bne.n	800a474 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e03f      	b.n	800a476 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	461a      	mov	r2, r3
 800a406:	68b9      	ldr	r1, [r7, #8]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 fc63 	bl	800acd4 <UART_Start_Receive_DMA>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d125      	bne.n	800a468 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a41c:	2300      	movs	r3, #0
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	613b      	str	r3, [r7, #16]
 800a430:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	330c      	adds	r3, #12
 800a438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	617b      	str	r3, [r7, #20]
   return(result);
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f043 0310 	orr.w	r3, r3, #16
 800a448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	330c      	adds	r3, #12
 800a450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a452:	627a      	str	r2, [r7, #36]	@ 0x24
 800a454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	6a39      	ldr	r1, [r7, #32]
 800a458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e5      	bne.n	800a432 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800a466:	e002      	b.n	800a46e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800a46e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a472:	e000      	b.n	800a476 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800a474:	2302      	movs	r3, #2
  }
}
 800a476:	4618      	mov	r0, r3
 800a478:	3730      	adds	r7, #48	@ 0x30
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b0ba      	sub	sp, #232	@ 0xe8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a4be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10f      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x66>
 800a4d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fda2 	bl	800b028 <UART_Receive_IT>
      return;
 800a4e4:	e273      	b.n	800a9ce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80de 	beq.w	800a6ac <HAL_UART_IRQHandler+0x22c>
 800a4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d106      	bne.n	800a50a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a500:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80d1 	beq.w	800a6ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <HAL_UART_IRQHandler+0xae>
 800a516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a51a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a526:	f043 0201 	orr.w	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a532:	f003 0304 	and.w	r3, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <HAL_UART_IRQHandler+0xd2>
 800a53a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a54a:	f043 0202 	orr.w	r2, r3, #2
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00b      	beq.n	800a576 <HAL_UART_IRQHandler+0xf6>
 800a55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56e:	f043 0204 	orr.w	r2, r3, #4
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d011      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x126>
 800a582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d105      	bne.n	800a59a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a58e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a59e:	f043 0208 	orr.w	r2, r3, #8
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 820a 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_UART_IRQHandler+0x14e>
 800a5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fd2d 	bl	800b028 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d8:	2b40      	cmp	r3, #64	@ 0x40
 800a5da:	bf0c      	ite	eq
 800a5dc:	2301      	moveq	r3, #1
 800a5de:	2300      	movne	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <HAL_UART_IRQHandler+0x17a>
 800a5f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04f      	beq.n	800a69a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fc38 	bl	800ae70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60a:	2b40      	cmp	r3, #64	@ 0x40
 800a60c:	d141      	bne.n	800a692 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3314      	adds	r3, #20
 800a614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a624:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a62c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3314      	adds	r3, #20
 800a636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a63a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a63e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1d9      	bne.n	800a60e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d013      	beq.n	800a68a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a666:	4a8a      	ldr	r2, [pc, #552]	@ (800a890 <HAL_UART_IRQHandler+0x410>)
 800a668:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fd fa9a 	bl	8007ba8 <HAL_DMA_Abort_IT>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d016      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a688:	e00e      	b.n	800a6a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f9c0 	bl	800aa10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a690:	e00a      	b.n	800a6a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f9bc 	bl	800aa10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a698:	e006      	b.n	800a6a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f9b8 	bl	800aa10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6a6:	e18d      	b.n	800a9c4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a8:	bf00      	nop
    return;
 800a6aa:	e18b      	b.n	800a9c4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	f040 8167 	bne.w	800a984 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ba:	f003 0310 	and.w	r3, r3, #16
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8160 	beq.w	800a984 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 8159 	beq.w	800a984 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60bb      	str	r3, [r7, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60bb      	str	r3, [r7, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	60bb      	str	r3, [r7, #8]
 800a6e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f2:	2b40      	cmp	r3, #64	@ 0x40
 800a6f4:	f040 80ce 	bne.w	800a894 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 80a9 	beq.w	800a860 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a716:	429a      	cmp	r2, r3
 800a718:	f080 80a2 	bcs.w	800a860 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a722:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a72e:	f000 8088 	beq.w	800a842 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a748:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	330c      	adds	r3, #12
 800a75a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a75e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a766:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a76a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1d9      	bne.n	800a732 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3314      	adds	r3, #20
 800a784:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a78e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a790:	f023 0301 	bic.w	r3, r3, #1
 800a794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3314      	adds	r3, #20
 800a79e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7ae:	e841 2300 	strex	r3, r2, [r1]
 800a7b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e1      	bne.n	800a77e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3314      	adds	r3, #20
 800a7c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3314      	adds	r3, #20
 800a7da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a7de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e3      	bne.n	800a7ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	330c      	adds	r3, #12
 800a806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a812:	f023 0310 	bic.w	r3, r3, #16
 800a816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a824:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a826:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a82a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e3      	bne.n	800a800 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fd f943 	bl	8007ac8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2202      	movs	r2, #2
 800a846:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a850:	b29b      	uxth	r3, r3
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	b29b      	uxth	r3, r3
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7f9 f815 	bl	8003888 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a85e:	e0b3      	b.n	800a9c8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a868:	429a      	cmp	r2, r3
 800a86a:	f040 80ad 	bne.w	800a9c8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a878:	f040 80a6 	bne.w	800a9c8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7f8 fffd 	bl	8003888 <HAL_UARTEx_RxEventCallback>
      return;
 800a88e:	e09b      	b.n	800a9c8 <HAL_UART_IRQHandler+0x548>
 800a890:	0800af37 	.word	0x0800af37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 808e 	beq.w	800a9cc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a8b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8089 	beq.w	800a9cc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	330c      	adds	r3, #12
 800a8c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	330c      	adds	r3, #12
 800a8da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a8de:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e3      	bne.n	800a8ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3314      	adds	r3, #20
 800a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	e853 3f00 	ldrex	r3, [r3]
 800a900:	623b      	str	r3, [r7, #32]
   return(result);
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	f023 0301 	bic.w	r3, r3, #1
 800a908:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3314      	adds	r3, #20
 800a912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a916:	633a      	str	r2, [r7, #48]	@ 0x30
 800a918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a91c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e3      	bne.n	800a8f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	330c      	adds	r3, #12
 800a93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	60fb      	str	r3, [r7, #12]
   return(result);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f023 0310 	bic.w	r3, r3, #16
 800a94e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	330c      	adds	r3, #12
 800a958:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a95c:	61fa      	str	r2, [r7, #28]
 800a95e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	69b9      	ldr	r1, [r7, #24]
 800a962:	69fa      	ldr	r2, [r7, #28]
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	617b      	str	r3, [r7, #20]
   return(result);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e3      	bne.n	800a938 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7f8 ff83 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a982:	e023      	b.n	800a9cc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x524>
 800a990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fadb 	bl	800af58 <UART_Transmit_IT>
    return;
 800a9a2:	e014      	b.n	800a9ce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00e      	beq.n	800a9ce <HAL_UART_IRQHandler+0x54e>
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d008      	beq.n	800a9ce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb1b 	bl	800aff8 <UART_EndTransmit_IT>
    return;
 800a9c2:	e004      	b.n	800a9ce <HAL_UART_IRQHandler+0x54e>
    return;
 800a9c4:	bf00      	nop
 800a9c6:	e002      	b.n	800a9ce <HAL_UART_IRQHandler+0x54e>
      return;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <HAL_UART_IRQHandler+0x54e>
      return;
 800a9cc:	bf00      	nop
  }
}
 800a9ce:	37e8      	adds	r7, #232	@ 0xe8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b09c      	sub	sp, #112	@ 0x70
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa30:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d172      	bne.n	800ab26 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa42:	2200      	movs	r2, #0
 800aa44:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	330c      	adds	r3, #12
 800aa4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	330c      	adds	r3, #12
 800aa64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa66:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e5      	bne.n	800aa46 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3314      	adds	r3, #20
 800aa80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3314      	adds	r3, #20
 800aa98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa9a:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e5      	bne.n	800aa7a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3314      	adds	r3, #20
 800aab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	623b      	str	r3, [r7, #32]
   return(result);
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aac4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3314      	adds	r3, #20
 800aacc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aace:	633a      	str	r2, [r7, #48]	@ 0x30
 800aad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e5      	bne.n	800aaae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae4:	2220      	movs	r2, #32
 800aae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d119      	bne.n	800ab26 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	330c      	adds	r3, #12
 800aaf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f023 0310 	bic.w	r3, r3, #16
 800ab08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	330c      	adds	r3, #12
 800ab10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab12:	61fa      	str	r2, [r7, #28]
 800ab14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab16:	69b9      	ldr	r1, [r7, #24]
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e5      	bne.n	800aaf2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab28:	2200      	movs	r2, #0
 800ab2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d106      	bne.n	800ab42 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab3c:	f7f8 fea4 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab40:	e002      	b.n	800ab48 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab42:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab44:	f7ff ff50 	bl	800a9e8 <HAL_UART_RxCpltCallback>
}
 800ab48:	bf00      	nop
 800ab4a:	3770      	adds	r7, #112	@ 0x70
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d108      	bne.n	800ab7e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab70:	085b      	lsrs	r3, r3, #1
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	4619      	mov	r1, r3
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7f8 fe86 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab7c:	e002      	b.n	800ab84 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff ff3c 	bl	800a9fc <HAL_UART_RxHalfCpltCallback>
}
 800ab84:	bf00      	nop
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba8:	2b80      	cmp	r3, #128	@ 0x80
 800abaa:	bf0c      	ite	eq
 800abac:	2301      	moveq	r3, #1
 800abae:	2300      	movne	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b21      	cmp	r3, #33	@ 0x21
 800abbe:	d108      	bne.n	800abd2 <UART_DMAError+0x46>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	2200      	movs	r2, #0
 800abca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800abcc:	68b8      	ldr	r0, [r7, #8]
 800abce:	f000 f927 	bl	800ae20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abdc:	2b40      	cmp	r3, #64	@ 0x40
 800abde:	bf0c      	ite	eq
 800abe0:	2301      	moveq	r3, #1
 800abe2:	2300      	movne	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b22      	cmp	r3, #34	@ 0x22
 800abf2:	d108      	bne.n	800ac06 <UART_DMAError+0x7a>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	f000 f935 	bl	800ae70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac0a:	f043 0210 	orr.w	r2, r3, #16
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac12:	68b8      	ldr	r0, [r7, #8]
 800ac14:	f7ff fefc 	bl	800aa10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac30:	e03b      	b.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac38:	d037      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac3a:	f7fb febb 	bl	80069b4 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	6a3a      	ldr	r2, [r7, #32]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d302      	bcc.n	800ac50 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e03a      	b.n	800acca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d023      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b80      	cmp	r3, #128	@ 0x80
 800ac66:	d020      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b40      	cmp	r3, #64	@ 0x40
 800ac6c:	d01d      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0308 	and.w	r3, r3, #8
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d116      	bne.n	800acaa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f8ec 	bl	800ae70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2208      	movs	r2, #8
 800ac9c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e00f      	b.n	800acca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	4013      	ands	r3, r2
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	bf0c      	ite	eq
 800acba:	2301      	moveq	r3, #1
 800acbc:	2300      	movne	r3, #0
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	461a      	mov	r2, r3
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d0b4      	beq.n	800ac32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b098      	sub	sp, #96	@ 0x60
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4613      	mov	r3, r2
 800ace0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	88fa      	ldrh	r2, [r7, #6]
 800acec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2222      	movs	r2, #34	@ 0x22
 800acf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad00:	4a44      	ldr	r2, [pc, #272]	@ (800ae14 <UART_Start_Receive_DMA+0x140>)
 800ad02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad08:	4a43      	ldr	r2, [pc, #268]	@ (800ae18 <UART_Start_Receive_DMA+0x144>)
 800ad0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad10:	4a42      	ldr	r2, [pc, #264]	@ (800ae1c <UART_Start_Receive_DMA+0x148>)
 800ad12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad18:	2200      	movs	r2, #0
 800ad1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	88fb      	ldrh	r3, [r7, #6]
 800ad34:	f7fc fe70 	bl	8007a18 <HAL_DMA_Start_IT>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2210      	movs	r2, #16
 800ad42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2220      	movs	r2, #32
 800ad48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e05d      	b.n	800ae0c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad50:	2300      	movs	r3, #0
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d019      	beq.n	800ada2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	330c      	adds	r3, #12
 800ad74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad84:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad8e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ad90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ad94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e5      	bne.n	800ad6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3314      	adds	r3, #20
 800ada8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb4:	f043 0301 	orr.w	r3, r3, #1
 800adb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3314      	adds	r3, #20
 800adc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adc2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800adc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800adc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e5      	bne.n	800ada2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3314      	adds	r3, #20
 800addc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	617b      	str	r3, [r7, #20]
   return(result);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adec:	653b      	str	r3, [r7, #80]	@ 0x50
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3314      	adds	r3, #20
 800adf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adf6:	627a      	str	r2, [r7, #36]	@ 0x24
 800adf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6a39      	ldr	r1, [r7, #32]
 800adfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e5      	bne.n	800add6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3760      	adds	r7, #96	@ 0x60
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	0800aa25 	.word	0x0800aa25
 800ae18:	0800ab51 	.word	0x0800ab51
 800ae1c:	0800ab8d 	.word	0x0800ab8d

0800ae20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b089      	sub	sp, #36	@ 0x24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae3e:	61fb      	str	r3, [r7, #28]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	61ba      	str	r2, [r7, #24]
 800ae4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6979      	ldr	r1, [r7, #20]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	613b      	str	r3, [r7, #16]
   return(result);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ae64:	bf00      	nop
 800ae66:	3724      	adds	r7, #36	@ 0x24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b095      	sub	sp, #84	@ 0x54
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	330c      	adds	r3, #12
 800ae96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae98:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e5      	bne.n	800ae78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	61fb      	str	r3, [r7, #28]
   return(result);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f023 0301 	bic.w	r3, r3, #1
 800aec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3314      	adds	r3, #20
 800aeca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e5      	bne.n	800aeac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d119      	bne.n	800af1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	330c      	adds	r3, #12
 800aeee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	647b      	str	r3, [r7, #68]	@ 0x44
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	330c      	adds	r3, #12
 800af06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af08:	61ba      	str	r2, [r7, #24]
 800af0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6979      	ldr	r1, [r7, #20]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	613b      	str	r3, [r7, #16]
   return(result);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e5      	bne.n	800aee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af2a:	bf00      	nop
 800af2c:	3754      	adds	r7, #84	@ 0x54
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7ff fd60 	bl	800aa10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b21      	cmp	r3, #33	@ 0x21
 800af6a:	d13e      	bne.n	800afea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af74:	d114      	bne.n	800afa0 <UART_Transmit_IT+0x48>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d110      	bne.n	800afa0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	1c9a      	adds	r2, r3, #2
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	621a      	str	r2, [r3, #32]
 800af9e:	e008      	b.n	800afb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	1c59      	adds	r1, r3, #1
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6211      	str	r1, [r2, #32]
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	3b01      	subs	r3, #1
 800afba:	b29b      	uxth	r3, r3
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	4619      	mov	r1, r3
 800afc0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10f      	bne.n	800afe6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afe4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e000      	b.n	800afec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afea:	2302      	movs	r3, #2
  }
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b00e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2220      	movs	r2, #32
 800b014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff fcdb 	bl	800a9d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08c      	sub	sp, #48	@ 0x30
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b22      	cmp	r3, #34	@ 0x22
 800b042:	f040 80aa 	bne.w	800b19a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b04e:	d115      	bne.n	800b07c <UART_Receive_IT+0x54>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d111      	bne.n	800b07c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	b29b      	uxth	r3, r3
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	1c9a      	adds	r2, r3, #2
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	629a      	str	r2, [r3, #40]	@ 0x28
 800b07a:	e024      	b.n	800b0c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b080:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08a:	d007      	beq.n	800b09c <UART_Receive_IT+0x74>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <UART_Receive_IT+0x82>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	e008      	b.n	800b0bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d15d      	bne.n	800b196 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0220 	bic.w	r2, r2, #32
 800b0e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b0f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695a      	ldr	r2, [r3, #20]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2220      	movs	r2, #32
 800b10e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d135      	bne.n	800b18c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	330c      	adds	r3, #12
 800b12c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	613b      	str	r3, [r7, #16]
   return(result);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f023 0310 	bic.w	r3, r3, #16
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	330c      	adds	r3, #12
 800b144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b146:	623a      	str	r2, [r7, #32]
 800b148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	69f9      	ldr	r1, [r7, #28]
 800b14c:	6a3a      	ldr	r2, [r7, #32]
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	61bb      	str	r3, [r7, #24]
   return(result);
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e5      	bne.n	800b126 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b10      	cmp	r3, #16
 800b166:	d10a      	bne.n	800b17e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7f8 fb7f 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 800b18a:	e002      	b.n	800b192 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff fc2b 	bl	800a9e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	e002      	b.n	800b19c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	e000      	b.n	800b19c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b19a:	2302      	movs	r3, #2
  }
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3730      	adds	r7, #48	@ 0x30
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a8:	b0c0      	sub	sp, #256	@ 0x100
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c0:	68d9      	ldr	r1, [r3, #12]
 800b1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	ea40 0301 	orr.w	r3, r0, r1
 800b1cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d2:	689a      	ldr	r2, [r3, #8]
 800b1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b1fc:	f021 010c 	bic.w	r1, r1, #12
 800b200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b20a:	430b      	orrs	r3, r1
 800b20c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b21e:	6999      	ldr	r1, [r3, #24]
 800b220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	ea40 0301 	orr.w	r3, r0, r1
 800b22a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b8f      	ldr	r3, [pc, #572]	@ (800b470 <UART_SetConfig+0x2cc>)
 800b234:	429a      	cmp	r2, r3
 800b236:	d005      	beq.n	800b244 <UART_SetConfig+0xa0>
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	4b8d      	ldr	r3, [pc, #564]	@ (800b474 <UART_SetConfig+0x2d0>)
 800b240:	429a      	cmp	r2, r3
 800b242:	d104      	bne.n	800b24e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b244:	f7fd fe9e 	bl	8008f84 <HAL_RCC_GetPCLK2Freq>
 800b248:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b24c:	e003      	b.n	800b256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b24e:	f7fd fe85 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800b252:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b260:	f040 810c 	bne.w	800b47c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b26e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	1891      	adds	r1, r2, r2
 800b27c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b27e:	415b      	adcs	r3, r3
 800b280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b286:	4621      	mov	r1, r4
 800b288:	eb12 0801 	adds.w	r8, r2, r1
 800b28c:	4629      	mov	r1, r5
 800b28e:	eb43 0901 	adc.w	r9, r3, r1
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b29e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2a6:	4690      	mov	r8, r2
 800b2a8:	4699      	mov	r9, r3
 800b2aa:	4623      	mov	r3, r4
 800b2ac:	eb18 0303 	adds.w	r3, r8, r3
 800b2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	eb49 0303 	adc.w	r3, r9, r3
 800b2ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b2ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	18db      	adds	r3, r3, r3
 800b2d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2d8:	4613      	mov	r3, r2
 800b2da:	eb42 0303 	adc.w	r3, r2, r3
 800b2de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b2e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b2e8:	f7f5 fc10 	bl	8000b0c <__aeabi_uldivmod>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4b61      	ldr	r3, [pc, #388]	@ (800b478 <UART_SetConfig+0x2d4>)
 800b2f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2f6:	095b      	lsrs	r3, r3, #5
 800b2f8:	011c      	lsls	r4, r3, #4
 800b2fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b304:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	1891      	adds	r1, r2, r2
 800b312:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b314:	415b      	adcs	r3, r3
 800b316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b31c:	4641      	mov	r1, r8
 800b31e:	eb12 0a01 	adds.w	sl, r2, r1
 800b322:	4649      	mov	r1, r9
 800b324:	eb43 0b01 	adc.w	fp, r3, r1
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	f04f 0300 	mov.w	r3, #0
 800b330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b33c:	4692      	mov	sl, r2
 800b33e:	469b      	mov	fp, r3
 800b340:	4643      	mov	r3, r8
 800b342:	eb1a 0303 	adds.w	r3, sl, r3
 800b346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b34a:	464b      	mov	r3, r9
 800b34c:	eb4b 0303 	adc.w	r3, fp, r3
 800b350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b360:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b368:	460b      	mov	r3, r1
 800b36a:	18db      	adds	r3, r3, r3
 800b36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36e:	4613      	mov	r3, r2
 800b370:	eb42 0303 	adc.w	r3, r2, r3
 800b374:	647b      	str	r3, [r7, #68]	@ 0x44
 800b376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b37a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b37e:	f7f5 fbc5 	bl	8000b0c <__aeabi_uldivmod>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4611      	mov	r1, r2
 800b388:	4b3b      	ldr	r3, [pc, #236]	@ (800b478 <UART_SetConfig+0x2d4>)
 800b38a:	fba3 2301 	umull	r2, r3, r3, r1
 800b38e:	095b      	lsrs	r3, r3, #5
 800b390:	2264      	movs	r2, #100	@ 0x64
 800b392:	fb02 f303 	mul.w	r3, r2, r3
 800b396:	1acb      	subs	r3, r1, r3
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b39e:	4b36      	ldr	r3, [pc, #216]	@ (800b478 <UART_SetConfig+0x2d4>)
 800b3a0:	fba3 2302 	umull	r2, r3, r3, r2
 800b3a4:	095b      	lsrs	r3, r3, #5
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b3ac:	441c      	add	r4, r3
 800b3ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b3bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	464b      	mov	r3, r9
 800b3c4:	1891      	adds	r1, r2, r2
 800b3c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b3c8:	415b      	adcs	r3, r3
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	1851      	adds	r1, r2, r1
 800b3d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	414b      	adcs	r3, r1
 800b3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3dc:	f04f 0200 	mov.w	r2, #0
 800b3e0:	f04f 0300 	mov.w	r3, #0
 800b3e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	00cb      	lsls	r3, r1, #3
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3f2:	4651      	mov	r1, sl
 800b3f4:	00ca      	lsls	r2, r1, #3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4642      	mov	r2, r8
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b404:	464b      	mov	r3, r9
 800b406:	460a      	mov	r2, r1
 800b408:	eb42 0303 	adc.w	r3, r2, r3
 800b40c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b41c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b424:	460b      	mov	r3, r1
 800b426:	18db      	adds	r3, r3, r3
 800b428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b42a:	4613      	mov	r3, r2
 800b42c:	eb42 0303 	adc.w	r3, r2, r3
 800b430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b43a:	f7f5 fb67 	bl	8000b0c <__aeabi_uldivmod>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <UART_SetConfig+0x2d4>)
 800b444:	fba3 1302 	umull	r1, r3, r3, r2
 800b448:	095b      	lsrs	r3, r3, #5
 800b44a:	2164      	movs	r1, #100	@ 0x64
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	3332      	adds	r3, #50	@ 0x32
 800b456:	4a08      	ldr	r2, [pc, #32]	@ (800b478 <UART_SetConfig+0x2d4>)
 800b458:	fba2 2303 	umull	r2, r3, r2, r3
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	f003 0207 	and.w	r2, r3, #7
 800b462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4422      	add	r2, r4
 800b46a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b46c:	e106      	b.n	800b67c <UART_SetConfig+0x4d8>
 800b46e:	bf00      	nop
 800b470:	40011000 	.word	0x40011000
 800b474:	40011400 	.word	0x40011400
 800b478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b47c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b480:	2200      	movs	r2, #0
 800b482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b486:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b48a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b48e:	4642      	mov	r2, r8
 800b490:	464b      	mov	r3, r9
 800b492:	1891      	adds	r1, r2, r2
 800b494:	6239      	str	r1, [r7, #32]
 800b496:	415b      	adcs	r3, r3
 800b498:	627b      	str	r3, [r7, #36]	@ 0x24
 800b49a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b49e:	4641      	mov	r1, r8
 800b4a0:	1854      	adds	r4, r2, r1
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	eb43 0501 	adc.w	r5, r3, r1
 800b4a8:	f04f 0200 	mov.w	r2, #0
 800b4ac:	f04f 0300 	mov.w	r3, #0
 800b4b0:	00eb      	lsls	r3, r5, #3
 800b4b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4b6:	00e2      	lsls	r2, r4, #3
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	4643      	mov	r3, r8
 800b4be:	18e3      	adds	r3, r4, r3
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	eb45 0303 	adc.w	r3, r5, r3
 800b4ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b4da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b4de:	f04f 0200 	mov.w	r2, #0
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	008b      	lsls	r3, r1, #2
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	008a      	lsls	r2, r1, #2
 800b4f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b4fc:	f7f5 fb06 	bl	8000b0c <__aeabi_uldivmod>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4b60      	ldr	r3, [pc, #384]	@ (800b688 <UART_SetConfig+0x4e4>)
 800b506:	fba3 2302 	umull	r2, r3, r3, r2
 800b50a:	095b      	lsrs	r3, r3, #5
 800b50c:	011c      	lsls	r4, r3, #4
 800b50e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b512:	2200      	movs	r2, #0
 800b514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b518:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b51c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b520:	4642      	mov	r2, r8
 800b522:	464b      	mov	r3, r9
 800b524:	1891      	adds	r1, r2, r2
 800b526:	61b9      	str	r1, [r7, #24]
 800b528:	415b      	adcs	r3, r3
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b530:	4641      	mov	r1, r8
 800b532:	1851      	adds	r1, r2, r1
 800b534:	6139      	str	r1, [r7, #16]
 800b536:	4649      	mov	r1, r9
 800b538:	414b      	adcs	r3, r1
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b548:	4659      	mov	r1, fp
 800b54a:	00cb      	lsls	r3, r1, #3
 800b54c:	4651      	mov	r1, sl
 800b54e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b552:	4651      	mov	r1, sl
 800b554:	00ca      	lsls	r2, r1, #3
 800b556:	4610      	mov	r0, r2
 800b558:	4619      	mov	r1, r3
 800b55a:	4603      	mov	r3, r0
 800b55c:	4642      	mov	r2, r8
 800b55e:	189b      	adds	r3, r3, r2
 800b560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b564:	464b      	mov	r3, r9
 800b566:	460a      	mov	r2, r1
 800b568:	eb42 0303 	adc.w	r3, r2, r3
 800b56c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b57a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b57c:	f04f 0200 	mov.w	r2, #0
 800b580:	f04f 0300 	mov.w	r3, #0
 800b584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b588:	4649      	mov	r1, r9
 800b58a:	008b      	lsls	r3, r1, #2
 800b58c:	4641      	mov	r1, r8
 800b58e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b592:	4641      	mov	r1, r8
 800b594:	008a      	lsls	r2, r1, #2
 800b596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b59a:	f7f5 fab7 	bl	8000b0c <__aeabi_uldivmod>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4b38      	ldr	r3, [pc, #224]	@ (800b688 <UART_SetConfig+0x4e4>)
 800b5a6:	fba3 2301 	umull	r2, r3, r3, r1
 800b5aa:	095b      	lsrs	r3, r3, #5
 800b5ac:	2264      	movs	r2, #100	@ 0x64
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	1acb      	subs	r3, r1, r3
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	3332      	adds	r3, #50	@ 0x32
 800b5b8:	4a33      	ldr	r2, [pc, #204]	@ (800b688 <UART_SetConfig+0x4e4>)
 800b5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b5be:	095b      	lsrs	r3, r3, #5
 800b5c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5c4:	441c      	add	r4, r3
 800b5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800b5d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	1891      	adds	r1, r2, r2
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	415b      	adcs	r3, r3
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	1851      	adds	r1, r2, r1
 800b5e8:	6039      	str	r1, [r7, #0]
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	414b      	adcs	r3, r1
 800b5ee:	607b      	str	r3, [r7, #4]
 800b5f0:	f04f 0200 	mov.w	r2, #0
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5fc:	4659      	mov	r1, fp
 800b5fe:	00cb      	lsls	r3, r1, #3
 800b600:	4651      	mov	r1, sl
 800b602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b606:	4651      	mov	r1, sl
 800b608:	00ca      	lsls	r2, r1, #3
 800b60a:	4610      	mov	r0, r2
 800b60c:	4619      	mov	r1, r3
 800b60e:	4603      	mov	r3, r0
 800b610:	4642      	mov	r2, r8
 800b612:	189b      	adds	r3, r3, r2
 800b614:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b616:	464b      	mov	r3, r9
 800b618:	460a      	mov	r2, r1
 800b61a:	eb42 0303 	adc.w	r3, r2, r3
 800b61e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	663b      	str	r3, [r7, #96]	@ 0x60
 800b62a:	667a      	str	r2, [r7, #100]	@ 0x64
 800b62c:	f04f 0200 	mov.w	r2, #0
 800b630:	f04f 0300 	mov.w	r3, #0
 800b634:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b638:	4649      	mov	r1, r9
 800b63a:	008b      	lsls	r3, r1, #2
 800b63c:	4641      	mov	r1, r8
 800b63e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b642:	4641      	mov	r1, r8
 800b644:	008a      	lsls	r2, r1, #2
 800b646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b64a:	f7f5 fa5f 	bl	8000b0c <__aeabi_uldivmod>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4b0d      	ldr	r3, [pc, #52]	@ (800b688 <UART_SetConfig+0x4e4>)
 800b654:	fba3 1302 	umull	r1, r3, r3, r2
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	2164      	movs	r1, #100	@ 0x64
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	3332      	adds	r3, #50	@ 0x32
 800b666:	4a08      	ldr	r2, [pc, #32]	@ (800b688 <UART_SetConfig+0x4e4>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	f003 020f 	and.w	r2, r3, #15
 800b672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4422      	add	r2, r4
 800b67a:	609a      	str	r2, [r3, #8]
}
 800b67c:	bf00      	nop
 800b67e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b682:	46bd      	mov	sp, r7
 800b684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b688:	51eb851f 	.word	0x51eb851f

0800b68c <__NVIC_SetPriority>:
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	6039      	str	r1, [r7, #0]
 800b696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	db0a      	blt.n	800b6b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	490c      	ldr	r1, [pc, #48]	@ (800b6d8 <__NVIC_SetPriority+0x4c>)
 800b6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6aa:	0112      	lsls	r2, r2, #4
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b6b4:	e00a      	b.n	800b6cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	4908      	ldr	r1, [pc, #32]	@ (800b6dc <__NVIC_SetPriority+0x50>)
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	3b04      	subs	r3, #4
 800b6c4:	0112      	lsls	r2, r2, #4
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	761a      	strb	r2, [r3, #24]
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	e000e100 	.word	0xe000e100
 800b6dc:	e000ed00 	.word	0xe000ed00

0800b6e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f06f 0004 	mvn.w	r0, #4
 800b6ea:	f7ff ffcf 	bl	800b68c <__NVIC_SetPriority>
#endif
}
 800b6ee:	bf00      	nop
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6fa:	f3ef 8305 	mrs	r3, IPSR
 800b6fe:	603b      	str	r3, [r7, #0]
  return(result);
 800b700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b706:	f06f 0305 	mvn.w	r3, #5
 800b70a:	607b      	str	r3, [r7, #4]
 800b70c:	e00c      	b.n	800b728 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b70e:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <osKernelInitialize+0x44>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b716:	4b08      	ldr	r3, [pc, #32]	@ (800b738 <osKernelInitialize+0x44>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	607b      	str	r3, [r7, #4]
 800b720:	e002      	b.n	800b728 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b728:	687b      	ldr	r3, [r7, #4]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	20000e78 	.word	0x20000e78

0800b73c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b742:	f3ef 8305 	mrs	r3, IPSR
 800b746:	603b      	str	r3, [r7, #0]
  return(result);
 800b748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b74e:	f06f 0305 	mvn.w	r3, #5
 800b752:	607b      	str	r3, [r7, #4]
 800b754:	e010      	b.n	800b778 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b756:	4b0b      	ldr	r3, [pc, #44]	@ (800b784 <osKernelStart+0x48>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d109      	bne.n	800b772 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b75e:	f7ff ffbf 	bl	800b6e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b762:	4b08      	ldr	r3, [pc, #32]	@ (800b784 <osKernelStart+0x48>)
 800b764:	2202      	movs	r2, #2
 800b766:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b768:	f001 f892 	bl	800c890 <vTaskStartScheduler>
      stat = osOK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	607b      	str	r3, [r7, #4]
 800b770:	e002      	b.n	800b778 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b772:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b776:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b778:	687b      	ldr	r3, [r7, #4]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20000e78 	.word	0x20000e78

0800b788 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08e      	sub	sp, #56	@ 0x38
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b794:	2300      	movs	r3, #0
 800b796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b798:	f3ef 8305 	mrs	r3, IPSR
 800b79c:	617b      	str	r3, [r7, #20]
  return(result);
 800b79e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d17e      	bne.n	800b8a2 <osThreadNew+0x11a>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d07b      	beq.n	800b8a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b7aa:	2380      	movs	r3, #128	@ 0x80
 800b7ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b7ae:	2318      	movs	r3, #24
 800b7b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d045      	beq.n	800b84e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <osThreadNew+0x48>
        name = attr->name;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d008      	beq.n	800b7f6 <osThreadNew+0x6e>
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b38      	cmp	r3, #56	@ 0x38
 800b7e8:	d805      	bhi.n	800b7f6 <osThreadNew+0x6e>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f003 0301 	and.w	r3, r3, #1
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <osThreadNew+0x72>
        return (NULL);
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e054      	b.n	800b8a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	089b      	lsrs	r3, r3, #2
 800b808:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00e      	beq.n	800b830 <osThreadNew+0xa8>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	2ba7      	cmp	r3, #167	@ 0xa7
 800b818:	d90a      	bls.n	800b830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d006      	beq.n	800b830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <osThreadNew+0xa8>
        mem = 1;
 800b82a:	2301      	movs	r3, #1
 800b82c:	61bb      	str	r3, [r7, #24]
 800b82e:	e010      	b.n	800b852 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10c      	bne.n	800b852 <osThreadNew+0xca>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d108      	bne.n	800b852 <osThreadNew+0xca>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <osThreadNew+0xca>
          mem = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	61bb      	str	r3, [r7, #24]
 800b84c:	e001      	b.n	800b852 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d110      	bne.n	800b87a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b860:	9202      	str	r2, [sp, #8]
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	6a3a      	ldr	r2, [r7, #32]
 800b86c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fe1a 	bl	800c4a8 <xTaskCreateStatic>
 800b874:	4603      	mov	r3, r0
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	e013      	b.n	800b8a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d110      	bne.n	800b8a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	b29a      	uxth	r2, r3
 800b884:	f107 0310 	add.w	r3, r7, #16
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 fe68 	bl	800c568 <xTaskCreate>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d001      	beq.n	800b8a2 <osThreadNew+0x11a>
            hTask = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b8a2:	693b      	ldr	r3, [r7, #16]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3728      	adds	r7, #40	@ 0x28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b4:	f3ef 8305 	mrs	r3, IPSR
 800b8b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <osDelay+0x1c>
    stat = osErrorISR;
 800b8c0:	f06f 0305 	mvn.w	r3, #5
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	e007      	b.n	800b8d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 ffa6 	bl	800c824 <vTaskDelay>
    }
  }

  return (stat);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4a07      	ldr	r2, [pc, #28]	@ (800b910 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	4a06      	ldr	r2, [pc, #24]	@ (800b914 <vApplicationGetIdleTaskMemory+0x30>)
 800b8fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2280      	movs	r2, #128	@ 0x80
 800b900:	601a      	str	r2, [r3, #0]
}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20000e7c 	.word	0x20000e7c
 800b914:	20000f24 	.word	0x20000f24

0800b918 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4a07      	ldr	r2, [pc, #28]	@ (800b944 <vApplicationGetTimerTaskMemory+0x2c>)
 800b928:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	4a06      	ldr	r2, [pc, #24]	@ (800b948 <vApplicationGetTimerTaskMemory+0x30>)
 800b92e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b936:	601a      	str	r2, [r3, #0]
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	20001124 	.word	0x20001124
 800b948:	200011cc 	.word	0x200011cc

0800b94c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f103 0208 	add.w	r2, r3, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b964:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f103 0208 	add.w	r2, r3, #8
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f103 0208 	add.w	r2, r3, #8
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b99a:	bf00      	nop
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	1c5a      	adds	r2, r3, #1
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
}
 800b9e2:	bf00      	nop
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b085      	sub	sp, #20
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba04:	d103      	bne.n	800ba0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	e00c      	b.n	800ba28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3308      	adds	r3, #8
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	e002      	b.n	800ba1c <vListInsert+0x2e>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d2f6      	bcs.n	800ba16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	601a      	str	r2, [r3, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	6892      	ldr	r2, [r2, #8]
 800ba76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	6852      	ldr	r2, [r2, #4]
 800ba80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d103      	bne.n	800ba94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	1e5a      	subs	r2, r3, #1
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10b      	bne.n	800bae0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	e7fd      	b.n	800badc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bae0:	f002 fa82 	bl	800dfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baec:	68f9      	ldr	r1, [r7, #12]
 800baee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800baf0:	fb01 f303 	mul.w	r3, r1, r3
 800baf4:	441a      	add	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb10:	3b01      	subs	r3, #1
 800bb12:	68f9      	ldr	r1, [r7, #12]
 800bb14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	441a      	add	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	22ff      	movs	r2, #255	@ 0xff
 800bb24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	22ff      	movs	r2, #255	@ 0xff
 800bb2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d114      	bne.n	800bb60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d01a      	beq.n	800bb74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3310      	adds	r3, #16
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 fa3c 	bl	800cfc0 <xTaskRemoveFromEventList>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d012      	beq.n	800bb74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <xQueueGenericReset+0xd0>)
 800bb50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	e009      	b.n	800bb74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3310      	adds	r3, #16
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fef1 	bl	800b94c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3324      	adds	r3, #36	@ 0x24
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff feec 	bl	800b94c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb74:	f002 fa6a 	bl	800e04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb78:	2301      	movs	r3, #1
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	e000ed04 	.word	0xe000ed04

0800bb88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08e      	sub	sp, #56	@ 0x38
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10b      	bne.n	800bbb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	e7fd      	b.n	800bbb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10b      	bne.n	800bbd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <xQueueGenericCreateStatic+0x56>
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <xQueueGenericCreateStatic+0x5a>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e000      	b.n	800bbe4 <xQueueGenericCreateStatic+0x5c>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10b      	bne.n	800bc00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	623b      	str	r3, [r7, #32]
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	e7fd      	b.n	800bbfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d102      	bne.n	800bc0c <xQueueGenericCreateStatic+0x84>
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <xQueueGenericCreateStatic+0x88>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <xQueueGenericCreateStatic+0x8a>
 800bc10:	2300      	movs	r3, #0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	61fb      	str	r3, [r7, #28]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc2e:	2350      	movs	r3, #80	@ 0x50
 800bc30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b50      	cmp	r3, #80	@ 0x50
 800bc36:	d00b      	beq.n	800bc50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	61bb      	str	r3, [r7, #24]
}
 800bc4a:	bf00      	nop
 800bc4c:	bf00      	nop
 800bc4e:	e7fd      	b.n	800bc4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00d      	beq.n	800bc78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	68b9      	ldr	r1, [r7, #8]
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f000 f805 	bl	800bc82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3730      	adds	r7, #48	@ 0x30
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	607a      	str	r2, [r7, #4]
 800bc8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	e002      	b.n	800bca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	69b8      	ldr	r0, [r7, #24]
 800bcb4:	f7ff fefe 	bl	800bab4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	78fa      	ldrb	r2, [r7, #3]
 800bcbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	@ 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10b      	bne.n	800bcfc <xQueueGenericSend+0x34>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bcf6:	bf00      	nop
 800bcf8:	bf00      	nop
 800bcfa:	e7fd      	b.n	800bcf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <xQueueGenericSend+0x42>
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <xQueueGenericSend+0x46>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e000      	b.n	800bd10 <xQueueGenericSend+0x48>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10b      	bne.n	800bd2c <xQueueGenericSend+0x64>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	e7fd      	b.n	800bd28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d103      	bne.n	800bd3a <xQueueGenericSend+0x72>
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d101      	bne.n	800bd3e <xQueueGenericSend+0x76>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e000      	b.n	800bd40 <xQueueGenericSend+0x78>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10b      	bne.n	800bd5c <xQueueGenericSend+0x94>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	623b      	str	r3, [r7, #32]
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	e7fd      	b.n	800bd58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd5c:	f001 faf6 	bl	800d34c <xTaskGetSchedulerState>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <xQueueGenericSend+0xa4>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <xQueueGenericSend+0xa8>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e000      	b.n	800bd72 <xQueueGenericSend+0xaa>
 800bd70:	2300      	movs	r3, #0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10b      	bne.n	800bd8e <xQueueGenericSend+0xc6>
	__asm volatile
 800bd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	61fb      	str	r3, [r7, #28]
}
 800bd88:	bf00      	nop
 800bd8a:	bf00      	nop
 800bd8c:	e7fd      	b.n	800bd8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd8e:	f002 f92b 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d302      	bcc.n	800bda4 <xQueueGenericSend+0xdc>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d129      	bne.n	800bdf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	68b9      	ldr	r1, [r7, #8]
 800bda8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdaa:	f000 fa0f 	bl	800c1cc <prvCopyDataToQueue>
 800bdae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d010      	beq.n	800bdda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	3324      	adds	r3, #36	@ 0x24
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f001 f8ff 	bl	800cfc0 <xTaskRemoveFromEventList>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d013      	beq.n	800bdf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bdc8:	4b3f      	ldr	r3, [pc, #252]	@ (800bec8 <xQueueGenericSend+0x200>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	e00a      	b.n	800bdf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bde0:	4b39      	ldr	r3, [pc, #228]	@ (800bec8 <xQueueGenericSend+0x200>)
 800bde2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdf0:	f002 f92c 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e063      	b.n	800bec0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d103      	bne.n	800be06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdfe:	f002 f925 	bl	800e04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be02:	2300      	movs	r3, #0
 800be04:	e05c      	b.n	800bec0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d106      	bne.n	800be1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be0c:	f107 0314 	add.w	r3, r7, #20
 800be10:	4618      	mov	r0, r3
 800be12:	f001 f939 	bl	800d088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be16:	2301      	movs	r3, #1
 800be18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be1a:	f002 f917 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be1e:	f000 fda7 	bl	800c970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be22:	f002 f8e1 	bl	800dfe8 <vPortEnterCritical>
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be2c:	b25b      	sxtb	r3, r3
 800be2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be32:	d103      	bne.n	800be3c <xQueueGenericSend+0x174>
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be42:	b25b      	sxtb	r3, r3
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be48:	d103      	bne.n	800be52 <xQueueGenericSend+0x18a>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be52:	f002 f8fb 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be56:	1d3a      	adds	r2, r7, #4
 800be58:	f107 0314 	add.w	r3, r7, #20
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 f928 	bl	800d0b4 <xTaskCheckForTimeOut>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d124      	bne.n	800beb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be6c:	f000 faa6 	bl	800c3bc <prvIsQueueFull>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d018      	beq.n	800bea8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be78:	3310      	adds	r3, #16
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 f84c 	bl	800cf1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be86:	f000 fa31 	bl	800c2ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be8a:	f000 fd7f 	bl	800c98c <xTaskResumeAll>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	f47f af7c 	bne.w	800bd8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800be96:	4b0c      	ldr	r3, [pc, #48]	@ (800bec8 <xQueueGenericSend+0x200>)
 800be98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	e772      	b.n	800bd8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800beaa:	f000 fa1f 	bl	800c2ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beae:	f000 fd6d 	bl	800c98c <xTaskResumeAll>
 800beb2:	e76c      	b.n	800bd8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800beb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800beb6:	f000 fa19 	bl	800c2ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beba:	f000 fd67 	bl	800c98c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3738      	adds	r7, #56	@ 0x38
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000ed04 	.word	0xe000ed04

0800becc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b090      	sub	sp, #64	@ 0x40
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10b      	bne.n	800befc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	e7fd      	b.n	800bef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <xQueueGenericSendFromISR+0x3e>
 800bf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <xQueueGenericSendFromISR+0x42>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <xQueueGenericSendFromISR+0x44>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10b      	bne.n	800bf2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d103      	bne.n	800bf3a <xQueueGenericSendFromISR+0x6e>
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <xQueueGenericSendFromISR+0x72>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <xQueueGenericSendFromISR+0x74>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10b      	bne.n	800bf5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	623b      	str	r3, [r7, #32]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf5c:	f002 f924 	bl	800e1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf60:	f3ef 8211 	mrs	r2, BASEPRI
 800bf64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	61fa      	str	r2, [r7, #28]
 800bf76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d302      	bcc.n	800bf8e <xQueueGenericSendFromISR+0xc2>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d12f      	bne.n	800bfee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfa4:	f000 f912 	bl	800c1cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfa8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfb0:	d112      	bne.n	800bfd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	3324      	adds	r3, #36	@ 0x24
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fffe 	bl	800cfc0 <xTaskRemoveFromEventList>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00e      	beq.n	800bfe8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	e007      	b.n	800bfe8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bfdc:	3301      	adds	r3, #1
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	b25a      	sxtb	r2, r3
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bfec:	e001      	b.n	800bff2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bffc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c000:	4618      	mov	r0, r3
 800c002:	3740      	adds	r7, #64	@ 0x40
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08c      	sub	sp, #48	@ 0x30
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c014:	2300      	movs	r3, #0
 800c016:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10b      	bne.n	800c03a <xQueueReceive+0x32>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	623b      	str	r3, [r7, #32]
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop
 800c038:	e7fd      	b.n	800c036 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <xQueueReceive+0x40>
 800c040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <xQueueReceive+0x44>
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <xQueueReceive+0x46>
 800c04c:	2300      	movs	r3, #0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10b      	bne.n	800c06a <xQueueReceive+0x62>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	61fb      	str	r3, [r7, #28]
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	e7fd      	b.n	800c066 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c06a:	f001 f96f 	bl	800d34c <xTaskGetSchedulerState>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <xQueueReceive+0x72>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <xQueueReceive+0x76>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e000      	b.n	800c080 <xQueueReceive+0x78>
 800c07e:	2300      	movs	r3, #0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10b      	bne.n	800c09c <xQueueReceive+0x94>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	61bb      	str	r3, [r7, #24]
}
 800c096:	bf00      	nop
 800c098:	bf00      	nop
 800c09a:	e7fd      	b.n	800c098 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c09c:	f001 ffa4 	bl	800dfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01f      	beq.n	800c0ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0ac:	68b9      	ldr	r1, [r7, #8]
 800c0ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b0:	f000 f8f6 	bl	800c2a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b6:	1e5a      	subs	r2, r3, #1
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00f      	beq.n	800c0e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c6:	3310      	adds	r3, #16
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 ff79 	bl	800cfc0 <xTaskRemoveFromEventList>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d007      	beq.n	800c0e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0d4:	4b3c      	ldr	r3, [pc, #240]	@ (800c1c8 <xQueueReceive+0x1c0>)
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0e4:	f001 ffb2 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e069      	b.n	800c1c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d103      	bne.n	800c0fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0f2:	f001 ffab 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e062      	b.n	800c1c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d106      	bne.n	800c10e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c100:	f107 0310 	add.w	r3, r7, #16
 800c104:	4618      	mov	r0, r3
 800c106:	f000 ffbf 	bl	800d088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c10a:	2301      	movs	r3, #1
 800c10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c10e:	f001 ff9d 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c112:	f000 fc2d 	bl	800c970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c116:	f001 ff67 	bl	800dfe8 <vPortEnterCritical>
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c120:	b25b      	sxtb	r3, r3
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c126:	d103      	bne.n	800c130 <xQueueReceive+0x128>
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c132:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c136:	b25b      	sxtb	r3, r3
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c13c:	d103      	bne.n	800c146 <xQueueReceive+0x13e>
 800c13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c146:	f001 ff81 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c14a:	1d3a      	adds	r2, r7, #4
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f000 ffae 	bl	800d0b4 <xTaskCheckForTimeOut>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d123      	bne.n	800c1a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c160:	f000 f916 	bl	800c390 <prvIsQueueEmpty>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d017      	beq.n	800c19a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	3324      	adds	r3, #36	@ 0x24
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	4611      	mov	r1, r2
 800c172:	4618      	mov	r0, r3
 800c174:	f000 fed2 	bl	800cf1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c17a:	f000 f8b7 	bl	800c2ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c17e:	f000 fc05 	bl	800c98c <xTaskResumeAll>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d189      	bne.n	800c09c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c188:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c8 <xQueueReceive+0x1c0>)
 800c18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	e780      	b.n	800c09c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c19a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c19c:	f000 f8a6 	bl	800c2ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1a0:	f000 fbf4 	bl	800c98c <xTaskResumeAll>
 800c1a4:	e77a      	b.n	800c09c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1a8:	f000 f8a0 	bl	800c2ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1ac:	f000 fbee 	bl	800c98c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1b2:	f000 f8ed 	bl	800c390 <prvIsQueueEmpty>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f43f af6f 	beq.w	800c09c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3730      	adds	r7, #48	@ 0x30
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10d      	bne.n	800c206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d14d      	bne.n	800c28e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f001 f8c6 	bl	800d388 <xTaskPriorityDisinherit>
 800c1fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	609a      	str	r2, [r3, #8]
 800c204:	e043      	b.n	800c28e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d119      	bne.n	800c240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6858      	ldr	r0, [r3, #4]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c214:	461a      	mov	r2, r3
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	f002 faa8 	bl	800e76c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	429a      	cmp	r2, r3
 800c234:	d32b      	bcc.n	800c28e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	605a      	str	r2, [r3, #4]
 800c23e:	e026      	b.n	800c28e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68d8      	ldr	r0, [r3, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c248:	461a      	mov	r2, r3
 800c24a:	68b9      	ldr	r1, [r7, #8]
 800c24c:	f002 fa8e 	bl	800e76c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c258:	425b      	negs	r3, r3
 800c25a:	441a      	add	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68da      	ldr	r2, [r3, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d207      	bcs.n	800c27c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689a      	ldr	r2, [r3, #8]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c274:	425b      	negs	r3, r3
 800c276:	441a      	add	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d105      	bne.n	800c28e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c296:	697b      	ldr	r3, [r7, #20]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d018      	beq.n	800c2e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68da      	ldr	r2, [r3, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ba:	441a      	add	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68da      	ldr	r2, [r3, #12]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d303      	bcc.n	800c2d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68d9      	ldr	r1, [r3, #12]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2dc:	461a      	mov	r2, r3
 800c2de:	6838      	ldr	r0, [r7, #0]
 800c2e0:	f002 fa44 	bl	800e76c <memcpy>
	}
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2f4:	f001 fe78 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c300:	e011      	b.n	800c326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c306:	2b00      	cmp	r3, #0
 800c308:	d012      	beq.n	800c330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3324      	adds	r3, #36	@ 0x24
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 fe56 	bl	800cfc0 <xTaskRemoveFromEventList>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c31a:	f000 ff2f 	bl	800d17c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	3b01      	subs	r3, #1
 800c322:	b2db      	uxtb	r3, r3
 800c324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dce9      	bgt.n	800c302 <prvUnlockQueue+0x16>
 800c32e:	e000      	b.n	800c332 <prvUnlockQueue+0x46>
					break;
 800c330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	22ff      	movs	r2, #255	@ 0xff
 800c336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c33a:	f001 fe87 	bl	800e04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c33e:	f001 fe53 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c34a:	e011      	b.n	800c370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d012      	beq.n	800c37a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3310      	adds	r3, #16
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fe31 	bl	800cfc0 <xTaskRemoveFromEventList>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c364:	f000 ff0a 	bl	800d17c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c368:	7bbb      	ldrb	r3, [r7, #14]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c374:	2b00      	cmp	r3, #0
 800c376:	dce9      	bgt.n	800c34c <prvUnlockQueue+0x60>
 800c378:	e000      	b.n	800c37c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c37a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	22ff      	movs	r2, #255	@ 0xff
 800c380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c384:	f001 fe62 	bl	800e04c <vPortExitCritical>
}
 800c388:	bf00      	nop
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c398:	f001 fe26 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	e001      	b.n	800c3ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ae:	f001 fe4d 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3c4:	f001 fe10 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d102      	bne.n	800c3da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	e001      	b.n	800c3de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3de:	f001 fe35 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e014      	b.n	800c426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3fc:	4a0f      	ldr	r2, [pc, #60]	@ (800c43c <vQueueAddToRegistry+0x50>)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10b      	bne.n	800c420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c408:	490c      	ldr	r1, [pc, #48]	@ (800c43c <vQueueAddToRegistry+0x50>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c412:	4a0a      	ldr	r2, [pc, #40]	@ (800c43c <vQueueAddToRegistry+0x50>)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	4413      	add	r3, r2
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c41e:	e006      	b.n	800c42e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3301      	adds	r3, #1
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b07      	cmp	r3, #7
 800c42a:	d9e7      	bls.n	800c3fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	200015cc 	.word	0x200015cc

0800c440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c450:	f001 fdca 	bl	800dfe8 <vPortEnterCritical>
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c460:	d103      	bne.n	800c46a <vQueueWaitForMessageRestricted+0x2a>
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c470:	b25b      	sxtb	r3, r3
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c476:	d103      	bne.n	800c480 <vQueueWaitForMessageRestricted+0x40>
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c480:	f001 fde4 	bl	800e04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d106      	bne.n	800c49a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	3324      	adds	r3, #36	@ 0x24
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	4618      	mov	r0, r3
 800c496:	f000 fd67 	bl	800cf68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c49a:	6978      	ldr	r0, [r7, #20]
 800c49c:	f7ff ff26 	bl	800c2ec <prvUnlockQueue>
	}
 800c4a0:	bf00      	nop
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08e      	sub	sp, #56	@ 0x38
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10b      	bne.n	800c4d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	623b      	str	r3, [r7, #32]
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	e7fd      	b.n	800c4d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10b      	bne.n	800c4f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	61fb      	str	r3, [r7, #28]
}
 800c4ec:	bf00      	nop
 800c4ee:	bf00      	nop
 800c4f0:	e7fd      	b.n	800c4ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4f2:	23a8      	movs	r3, #168	@ 0xa8
 800c4f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2ba8      	cmp	r3, #168	@ 0xa8
 800c4fa:	d00b      	beq.n	800c514 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	61bb      	str	r3, [r7, #24]
}
 800c50e:	bf00      	nop
 800c510:	bf00      	nop
 800c512:	e7fd      	b.n	800c510 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c514:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d01e      	beq.n	800c55a <xTaskCreateStatic+0xb2>
 800c51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01b      	beq.n	800c55a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c52a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c534:	2300      	movs	r3, #0
 800c536:	9303      	str	r3, [sp, #12]
 800c538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53a:	9302      	str	r3, [sp, #8]
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	68b9      	ldr	r1, [r7, #8]
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 f851 	bl	800c5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c552:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c554:	f000 f8f6 	bl	800c744 <prvAddNewTaskToReadyList>
 800c558:	e001      	b.n	800c55e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c55e:	697b      	ldr	r3, [r7, #20]
	}
 800c560:	4618      	mov	r0, r3
 800c562:	3728      	adds	r7, #40	@ 0x28
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08c      	sub	sp, #48	@ 0x30
 800c56c:	af04      	add	r7, sp, #16
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f001 fe55 	bl	800e22c <pvPortMalloc>
 800c582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00e      	beq.n	800c5a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c58a:	20a8      	movs	r0, #168	@ 0xa8
 800c58c:	f001 fe4e 	bl	800e22c <pvPortMalloc>
 800c590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c59e:	e005      	b.n	800c5ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5a0:	6978      	ldr	r0, [r7, #20]
 800c5a2:	f001 ff11 	bl	800e3c8 <vPortFree>
 800c5a6:	e001      	b.n	800c5ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d017      	beq.n	800c5e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5ba:	88fa      	ldrh	r2, [r7, #6]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 f80f 	bl	800c5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5d6:	69f8      	ldr	r0, [r7, #28]
 800c5d8:	f000 f8b4 	bl	800c744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	e002      	b.n	800c5e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
	}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	461a      	mov	r2, r3
 800c60c:	21a5      	movs	r1, #165	@ 0xa5
 800c60e:	f002 f81b 	bl	800e648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c61c:	3b01      	subs	r3, #1
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	f023 0307 	bic.w	r3, r3, #7
 800c62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	f003 0307 	and.w	r3, r3, #7
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00b      	beq.n	800c64e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	617b      	str	r3, [r7, #20]
}
 800c648:	bf00      	nop
 800c64a:	bf00      	nop
 800c64c:	e7fd      	b.n	800c64a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01f      	beq.n	800c694 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]
 800c658:	e012      	b.n	800c680 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	4413      	add	r3, r2
 800c660:	7819      	ldrb	r1, [r3, #0]
 800c662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	4413      	add	r3, r2
 800c668:	3334      	adds	r3, #52	@ 0x34
 800c66a:	460a      	mov	r2, r1
 800c66c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	4413      	add	r3, r2
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d006      	beq.n	800c688 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	3301      	adds	r3, #1
 800c67e:	61fb      	str	r3, [r7, #28]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	2b0f      	cmp	r3, #15
 800c684:	d9e9      	bls.n	800c65a <prvInitialiseNewTask+0x66>
 800c686:	e000      	b.n	800c68a <prvInitialiseNewTask+0x96>
			{
				break;
 800c688:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c692:	e003      	b.n	800c69c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69e:	2b37      	cmp	r3, #55	@ 0x37
 800c6a0:	d901      	bls.n	800c6a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6a2:	2337      	movs	r3, #55	@ 0x37
 800c6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff f965 	bl	800b98c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	3318      	adds	r3, #24
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff f960 	bl	800b98c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	3354      	adds	r3, #84	@ 0x54
 800c6f6:	224c      	movs	r2, #76	@ 0x4c
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f001 ffa4 	bl	800e648 <memset>
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	4a0d      	ldr	r2, [pc, #52]	@ (800c738 <prvInitialiseNewTask+0x144>)
 800c704:	659a      	str	r2, [r3, #88]	@ 0x58
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	4a0c      	ldr	r2, [pc, #48]	@ (800c73c <prvInitialiseNewTask+0x148>)
 800c70a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70e:	4a0c      	ldr	r2, [pc, #48]	@ (800c740 <prvInitialiseNewTask+0x14c>)
 800c710:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	68f9      	ldr	r1, [r7, #12]
 800c716:	69b8      	ldr	r0, [r7, #24]
 800c718:	f001 fb36 	bl	800dd88 <pxPortInitialiseStack>
 800c71c:	4602      	mov	r2, r0
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c72c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c72e:	bf00      	nop
 800c730:	3720      	adds	r7, #32
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20005860 	.word	0x20005860
 800c73c:	200058c8 	.word	0x200058c8
 800c740:	20005930 	.word	0x20005930

0800c744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c74c:	f001 fc4c 	bl	800dfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c750:	4b2d      	ldr	r3, [pc, #180]	@ (800c808 <prvAddNewTaskToReadyList+0xc4>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	4a2c      	ldr	r2, [pc, #176]	@ (800c808 <prvAddNewTaskToReadyList+0xc4>)
 800c758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c75a:	4b2c      	ldr	r3, [pc, #176]	@ (800c80c <prvAddNewTaskToReadyList+0xc8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c762:	4a2a      	ldr	r2, [pc, #168]	@ (800c80c <prvAddNewTaskToReadyList+0xc8>)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c768:	4b27      	ldr	r3, [pc, #156]	@ (800c808 <prvAddNewTaskToReadyList+0xc4>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d110      	bne.n	800c792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c770:	f000 fd28 	bl	800d1c4 <prvInitialiseTaskLists>
 800c774:	e00d      	b.n	800c792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c776:	4b26      	ldr	r3, [pc, #152]	@ (800c810 <prvAddNewTaskToReadyList+0xcc>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d109      	bne.n	800c792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c77e:	4b23      	ldr	r3, [pc, #140]	@ (800c80c <prvAddNewTaskToReadyList+0xc8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c788:	429a      	cmp	r2, r3
 800c78a:	d802      	bhi.n	800c792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c78c:	4a1f      	ldr	r2, [pc, #124]	@ (800c80c <prvAddNewTaskToReadyList+0xc8>)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c792:	4b20      	ldr	r3, [pc, #128]	@ (800c814 <prvAddNewTaskToReadyList+0xd0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3301      	adds	r3, #1
 800c798:	4a1e      	ldr	r2, [pc, #120]	@ (800c814 <prvAddNewTaskToReadyList+0xd0>)
 800c79a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c79c:	4b1d      	ldr	r3, [pc, #116]	@ (800c814 <prvAddNewTaskToReadyList+0xd0>)
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c818 <prvAddNewTaskToReadyList+0xd4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d903      	bls.n	800c7b8 <prvAddNewTaskToReadyList+0x74>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b4:	4a18      	ldr	r2, [pc, #96]	@ (800c818 <prvAddNewTaskToReadyList+0xd4>)
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7bc:	4613      	mov	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4a15      	ldr	r2, [pc, #84]	@ (800c81c <prvAddNewTaskToReadyList+0xd8>)
 800c7c6:	441a      	add	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	f7ff f8e9 	bl	800b9a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7d4:	f001 fc3a 	bl	800e04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800c810 <prvAddNewTaskToReadyList+0xcc>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00e      	beq.n	800c7fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c80c <prvAddNewTaskToReadyList+0xc8>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d207      	bcs.n	800c7fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c820 <prvAddNewTaskToReadyList+0xdc>)
 800c7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20001ae0 	.word	0x20001ae0
 800c80c:	2000160c 	.word	0x2000160c
 800c810:	20001aec 	.word	0x20001aec
 800c814:	20001afc 	.word	0x20001afc
 800c818:	20001ae8 	.word	0x20001ae8
 800c81c:	20001610 	.word	0x20001610
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d018      	beq.n	800c868 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c836:	4b14      	ldr	r3, [pc, #80]	@ (800c888 <vTaskDelay+0x64>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <vTaskDelay+0x32>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60bb      	str	r3, [r7, #8]
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	e7fd      	b.n	800c852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c856:	f000 f88b 	bl	800c970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c85a:	2100      	movs	r1, #0
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fee5 	bl	800d62c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c862:	f000 f893 	bl	800c98c <xTaskResumeAll>
 800c866:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d107      	bne.n	800c87e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c86e:	4b07      	ldr	r3, [pc, #28]	@ (800c88c <vTaskDelay+0x68>)
 800c870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20001b08 	.word	0x20001b08
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08a      	sub	sp, #40	@ 0x28
 800c894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c89e:	463a      	mov	r2, r7
 800c8a0:	1d39      	adds	r1, r7, #4
 800c8a2:	f107 0308 	add.w	r3, r7, #8
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7ff f81c 	bl	800b8e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	9202      	str	r2, [sp, #8]
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	460a      	mov	r2, r1
 800c8be:	4924      	ldr	r1, [pc, #144]	@ (800c950 <vTaskStartScheduler+0xc0>)
 800c8c0:	4824      	ldr	r0, [pc, #144]	@ (800c954 <vTaskStartScheduler+0xc4>)
 800c8c2:	f7ff fdf1 	bl	800c4a8 <xTaskCreateStatic>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	4a23      	ldr	r2, [pc, #140]	@ (800c958 <vTaskStartScheduler+0xc8>)
 800c8ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8cc:	4b22      	ldr	r3, [pc, #136]	@ (800c958 <vTaskStartScheduler+0xc8>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	e001      	b.n	800c8de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d102      	bne.n	800c8ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8e4:	f000 fef6 	bl	800d6d4 <xTimerCreateTimerTask>
 800c8e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d11b      	bne.n	800c928 <vTaskStartScheduler+0x98>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	613b      	str	r3, [r7, #16]
}
 800c902:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c904:	4b15      	ldr	r3, [pc, #84]	@ (800c95c <vTaskStartScheduler+0xcc>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3354      	adds	r3, #84	@ 0x54
 800c90a:	4a15      	ldr	r2, [pc, #84]	@ (800c960 <vTaskStartScheduler+0xd0>)
 800c90c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c90e:	4b15      	ldr	r3, [pc, #84]	@ (800c964 <vTaskStartScheduler+0xd4>)
 800c910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c916:	4b14      	ldr	r3, [pc, #80]	@ (800c968 <vTaskStartScheduler+0xd8>)
 800c918:	2201      	movs	r2, #1
 800c91a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c91c:	4b13      	ldr	r3, [pc, #76]	@ (800c96c <vTaskStartScheduler+0xdc>)
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c922:	f001 fabd 	bl	800dea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c926:	e00f      	b.n	800c948 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c92e:	d10b      	bne.n	800c948 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	60fb      	str	r3, [r7, #12]
}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	e7fd      	b.n	800c944 <vTaskStartScheduler+0xb4>
}
 800c948:	bf00      	nop
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	0800fd2c 	.word	0x0800fd2c
 800c954:	0800d195 	.word	0x0800d195
 800c958:	20001b04 	.word	0x20001b04
 800c95c:	2000160c 	.word	0x2000160c
 800c960:	2000005c 	.word	0x2000005c
 800c964:	20001b00 	.word	0x20001b00
 800c968:	20001aec 	.word	0x20001aec
 800c96c:	20001ae4 	.word	0x20001ae4

0800c970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c974:	4b04      	ldr	r3, [pc, #16]	@ (800c988 <vTaskSuspendAll+0x18>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3301      	adds	r3, #1
 800c97a:	4a03      	ldr	r2, [pc, #12]	@ (800c988 <vTaskSuspendAll+0x18>)
 800c97c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c97e:	bf00      	nop
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20001b08 	.word	0x20001b08

0800c98c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c99a:	4b42      	ldr	r3, [pc, #264]	@ (800caa4 <xTaskResumeAll+0x118>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10b      	bne.n	800c9ba <xTaskResumeAll+0x2e>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	603b      	str	r3, [r7, #0]
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	e7fd      	b.n	800c9b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9ba:	f001 fb15 	bl	800dfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9be:	4b39      	ldr	r3, [pc, #228]	@ (800caa4 <xTaskResumeAll+0x118>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	4a37      	ldr	r2, [pc, #220]	@ (800caa4 <xTaskResumeAll+0x118>)
 800c9c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9c8:	4b36      	ldr	r3, [pc, #216]	@ (800caa4 <xTaskResumeAll+0x118>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d162      	bne.n	800ca96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9d0:	4b35      	ldr	r3, [pc, #212]	@ (800caa8 <xTaskResumeAll+0x11c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d05e      	beq.n	800ca96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9d8:	e02f      	b.n	800ca3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9da:	4b34      	ldr	r3, [pc, #208]	@ (800caac <xTaskResumeAll+0x120>)
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3318      	adds	r3, #24
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff f83a 	bl	800ba60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff f835 	bl	800ba60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800cab0 <xTaskResumeAll+0x124>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d903      	bls.n	800ca0a <xTaskResumeAll+0x7e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca06:	4a2a      	ldr	r2, [pc, #168]	@ (800cab0 <xTaskResumeAll+0x124>)
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4a27      	ldr	r2, [pc, #156]	@ (800cab4 <xTaskResumeAll+0x128>)
 800ca18:	441a      	add	r2, r3
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f7fe ffc0 	bl	800b9a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca2a:	4b23      	ldr	r3, [pc, #140]	@ (800cab8 <xTaskResumeAll+0x12c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d302      	bcc.n	800ca3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ca34:	4b21      	ldr	r3, [pc, #132]	@ (800cabc <xTaskResumeAll+0x130>)
 800ca36:	2201      	movs	r2, #1
 800ca38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca3a:	4b1c      	ldr	r3, [pc, #112]	@ (800caac <xTaskResumeAll+0x120>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1cb      	bne.n	800c9da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca48:	f000 fc60 	bl	800d30c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca4c:	4b1c      	ldr	r3, [pc, #112]	@ (800cac0 <xTaskResumeAll+0x134>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d010      	beq.n	800ca7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca58:	f000 f940 	bl	800ccdc <xTaskIncrementTick>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ca62:	4b16      	ldr	r3, [pc, #88]	@ (800cabc <xTaskResumeAll+0x130>)
 800ca64:	2201      	movs	r2, #1
 800ca66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1f1      	bne.n	800ca58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ca74:	4b12      	ldr	r3, [pc, #72]	@ (800cac0 <xTaskResumeAll+0x134>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca7a:	4b10      	ldr	r3, [pc, #64]	@ (800cabc <xTaskResumeAll+0x130>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d009      	beq.n	800ca96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca82:	2301      	movs	r3, #1
 800ca84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca86:	4b0f      	ldr	r3, [pc, #60]	@ (800cac4 <xTaskResumeAll+0x138>)
 800ca88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca96:	f001 fad9 	bl	800e04c <vPortExitCritical>

	return xAlreadyYielded;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20001b08 	.word	0x20001b08
 800caa8:	20001ae0 	.word	0x20001ae0
 800caac:	20001aa0 	.word	0x20001aa0
 800cab0:	20001ae8 	.word	0x20001ae8
 800cab4:	20001610 	.word	0x20001610
 800cab8:	2000160c 	.word	0x2000160c
 800cabc:	20001af4 	.word	0x20001af4
 800cac0:	20001af0 	.word	0x20001af0
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cace:	4b05      	ldr	r3, [pc, #20]	@ (800cae4 <xTaskGetTickCount+0x1c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cad4:	687b      	ldr	r3, [r7, #4]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20001ae4 	.word	0x20001ae4

0800cae8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d102      	bne.n	800cafc <pcTaskGetName+0x14>
 800caf6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb30 <pcTaskGetName+0x48>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	e000      	b.n	800cafe <pcTaskGetName+0x16>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10b      	bne.n	800cb1e <pcTaskGetName+0x36>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	60bb      	str	r3, [r7, #8]
}
 800cb18:	bf00      	nop
 800cb1a:	bf00      	nop
 800cb1c:	e7fd      	b.n	800cb1a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3334      	adds	r3, #52	@ 0x34
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	2000160c 	.word	0x2000160c

0800cb34 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800cb34:	b480      	push	{r7}
 800cb36:	b08b      	sub	sp, #44	@ 0x2c
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d05b      	beq.n	800cc02 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	685a      	ldr	r2, [r3, #4]
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	605a      	str	r2, [r3, #4]
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	3308      	adds	r3, #8
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d104      	bne.n	800cb6e <prvSearchForNameWithinSingleList+0x3a>
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	605a      	str	r2, [r3, #4]
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	605a      	str	r2, [r3, #4]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d104      	bne.n	800cb9a <prvSearchForNameWithinSingleList+0x66>
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	605a      	str	r2, [r3, #4]
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cba6:	2300      	movs	r3, #0
 800cba8:	623b      	str	r3, [r7, #32]
 800cbaa:	e01c      	b.n	800cbe6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	3334      	adds	r3, #52	@ 0x34
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	7afa      	ldrb	r2, [r7, #11]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d002      	beq.n	800cbcc <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	61fb      	str	r3, [r7, #28]
 800cbca:	e006      	b.n	800cbda <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800cbcc:	7afb      	ldrb	r3, [r7, #11]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d103      	bne.n	800cbda <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbe0:	6a3b      	ldr	r3, [r7, #32]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	623b      	str	r3, [r7, #32]
 800cbe6:	6a3b      	ldr	r3, [r7, #32]
 800cbe8:	2b0f      	cmp	r3, #15
 800cbea:	d9df      	bls.n	800cbac <prvSearchForNameWithinSingleList+0x78>
 800cbec:	e000      	b.n	800cbf0 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800cbee:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d104      	bne.n	800cc00 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d1bb      	bne.n	800cb76 <prvSearchForNameWithinSingleList+0x42>
 800cbfe:	e000      	b.n	800cc02 <prvSearchForNameWithinSingleList+0xce>
					break;
 800cc00:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800cc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	372c      	adds	r7, #44	@ 0x2c
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800cc18:	2338      	movs	r3, #56	@ 0x38
 800cc1a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7f3 fad7 	bl	80001d0 <strlen>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b0f      	cmp	r3, #15
 800cc26:	d90b      	bls.n	800cc40 <xTaskGetHandle+0x30>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	60fb      	str	r3, [r7, #12]
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	e7fd      	b.n	800cc3c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800cc40:	f7ff fe96 	bl	800c970 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4a1c      	ldr	r2, [pc, #112]	@ (800ccc8 <xTaskGetHandle+0xb8>)
 800cc56:	4413      	add	r3, r2
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff ff6a 	bl	800cb34 <prvSearchForNameWithinSingleList>
 800cc60:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d103      	bne.n	800cc70 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1ea      	bne.n	800cc44 <xTaskGetHandle+0x34>
 800cc6e:	e000      	b.n	800cc72 <xTaskGetHandle+0x62>
					break;
 800cc70:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800cc78:	4b14      	ldr	r3, [pc, #80]	@ (800cccc <xTaskGetHandle+0xbc>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff ff58 	bl	800cb34 <prvSearchForNameWithinSingleList>
 800cc84:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800cc8c:	4b10      	ldr	r3, [pc, #64]	@ (800ccd0 <xTaskGetHandle+0xc0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff ff4e 	bl	800cb34 <prvSearchForNameWithinSingleList>
 800cc98:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d104      	bne.n	800ccaa <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	480c      	ldr	r0, [pc, #48]	@ (800ccd4 <xTaskGetHandle+0xc4>)
 800cca4:	f7ff ff46 	bl	800cb34 <prvSearchForNameWithinSingleList>
 800cca8:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d104      	bne.n	800ccba <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	4809      	ldr	r0, [pc, #36]	@ (800ccd8 <xTaskGetHandle+0xc8>)
 800ccb4:	f7ff ff3e 	bl	800cb34 <prvSearchForNameWithinSingleList>
 800ccb8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ccba:	f7ff fe67 	bl	800c98c <xTaskResumeAll>

		return pxTCB;
 800ccbe:	693b      	ldr	r3, [r7, #16]
	}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20001610 	.word	0x20001610
 800cccc:	20001a98 	.word	0x20001a98
 800ccd0:	20001a9c 	.word	0x20001a9c
 800ccd4:	20001acc 	.word	0x20001acc
 800ccd8:	20001ab4 	.word	0x20001ab4

0800ccdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cce2:	2300      	movs	r3, #0
 800cce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce6:	4b4f      	ldr	r3, [pc, #316]	@ (800ce24 <xTaskIncrementTick+0x148>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f040 8090 	bne.w	800ce10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccf0:	4b4d      	ldr	r3, [pc, #308]	@ (800ce28 <xTaskIncrementTick+0x14c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccf8:	4a4b      	ldr	r2, [pc, #300]	@ (800ce28 <xTaskIncrementTick+0x14c>)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d121      	bne.n	800cd48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd04:	4b49      	ldr	r3, [pc, #292]	@ (800ce2c <xTaskIncrementTick+0x150>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00b      	beq.n	800cd26 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	603b      	str	r3, [r7, #0]
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	e7fd      	b.n	800cd22 <xTaskIncrementTick+0x46>
 800cd26:	4b41      	ldr	r3, [pc, #260]	@ (800ce2c <xTaskIncrementTick+0x150>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	4b40      	ldr	r3, [pc, #256]	@ (800ce30 <xTaskIncrementTick+0x154>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a3e      	ldr	r2, [pc, #248]	@ (800ce2c <xTaskIncrementTick+0x150>)
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	4a3e      	ldr	r2, [pc, #248]	@ (800ce30 <xTaskIncrementTick+0x154>)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ce34 <xTaskIncrementTick+0x158>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	4a3c      	ldr	r2, [pc, #240]	@ (800ce34 <xTaskIncrementTick+0x158>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	f000 fae2 	bl	800d30c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd48:	4b3b      	ldr	r3, [pc, #236]	@ (800ce38 <xTaskIncrementTick+0x15c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d349      	bcc.n	800cde6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd52:	4b36      	ldr	r3, [pc, #216]	@ (800ce2c <xTaskIncrementTick+0x150>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d104      	bne.n	800cd66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd5c:	4b36      	ldr	r3, [pc, #216]	@ (800ce38 <xTaskIncrementTick+0x15c>)
 800cd5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd62:	601a      	str	r2, [r3, #0]
					break;
 800cd64:	e03f      	b.n	800cde6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd66:	4b31      	ldr	r3, [pc, #196]	@ (800ce2c <xTaskIncrementTick+0x150>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d203      	bcs.n	800cd86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd7e:	4a2e      	ldr	r2, [pc, #184]	@ (800ce38 <xTaskIncrementTick+0x15c>)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd84:	e02f      	b.n	800cde6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	3304      	adds	r3, #4
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe fe68 	bl	800ba60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d004      	beq.n	800cda2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	3318      	adds	r3, #24
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fe5f 	bl	800ba60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cda6:	4b25      	ldr	r3, [pc, #148]	@ (800ce3c <xTaskIncrementTick+0x160>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d903      	bls.n	800cdb6 <xTaskIncrementTick+0xda>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb2:	4a22      	ldr	r2, [pc, #136]	@ (800ce3c <xTaskIncrementTick+0x160>)
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdba:	4613      	mov	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce40 <xTaskIncrementTick+0x164>)
 800cdc4:	441a      	add	r2, r3
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4610      	mov	r0, r2
 800cdce:	f7fe fdea 	bl	800b9a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdd6:	4b1b      	ldr	r3, [pc, #108]	@ (800ce44 <xTaskIncrementTick+0x168>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3b8      	bcc.n	800cd52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde4:	e7b5      	b.n	800cd52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cde6:	4b17      	ldr	r3, [pc, #92]	@ (800ce44 <xTaskIncrementTick+0x168>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdec:	4914      	ldr	r1, [pc, #80]	@ (800ce40 <xTaskIncrementTick+0x164>)
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	440b      	add	r3, r1
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d901      	bls.n	800ce02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce02:	4b11      	ldr	r3, [pc, #68]	@ (800ce48 <xTaskIncrementTick+0x16c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d007      	beq.n	800ce1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	617b      	str	r3, [r7, #20]
 800ce0e:	e004      	b.n	800ce1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce10:	4b0e      	ldr	r3, [pc, #56]	@ (800ce4c <xTaskIncrementTick+0x170>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a0d      	ldr	r2, [pc, #52]	@ (800ce4c <xTaskIncrementTick+0x170>)
 800ce18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce1a:	697b      	ldr	r3, [r7, #20]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20001b08 	.word	0x20001b08
 800ce28:	20001ae4 	.word	0x20001ae4
 800ce2c:	20001a98 	.word	0x20001a98
 800ce30:	20001a9c 	.word	0x20001a9c
 800ce34:	20001af8 	.word	0x20001af8
 800ce38:	20001b00 	.word	0x20001b00
 800ce3c:	20001ae8 	.word	0x20001ae8
 800ce40:	20001610 	.word	0x20001610
 800ce44:	2000160c 	.word	0x2000160c
 800ce48:	20001af4 	.word	0x20001af4
 800ce4c:	20001af0 	.word	0x20001af0

0800ce50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce56:	4b2b      	ldr	r3, [pc, #172]	@ (800cf04 <vTaskSwitchContext+0xb4>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce5e:	4b2a      	ldr	r3, [pc, #168]	@ (800cf08 <vTaskSwitchContext+0xb8>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce64:	e047      	b.n	800cef6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ce66:	4b28      	ldr	r3, [pc, #160]	@ (800cf08 <vTaskSwitchContext+0xb8>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6c:	4b27      	ldr	r3, [pc, #156]	@ (800cf0c <vTaskSwitchContext+0xbc>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	e011      	b.n	800ce98 <vTaskSwitchContext+0x48>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10b      	bne.n	800ce92 <vTaskSwitchContext+0x42>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	607b      	str	r3, [r7, #4]
}
 800ce8c:	bf00      	nop
 800ce8e:	bf00      	nop
 800ce90:	e7fd      	b.n	800ce8e <vTaskSwitchContext+0x3e>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	491d      	ldr	r1, [pc, #116]	@ (800cf10 <vTaskSwitchContext+0xc0>)
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	440b      	add	r3, r1
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0e3      	beq.n	800ce74 <vTaskSwitchContext+0x24>
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4a16      	ldr	r2, [pc, #88]	@ (800cf10 <vTaskSwitchContext+0xc0>)
 800ceb8:	4413      	add	r3, r2
 800ceba:	60bb      	str	r3, [r7, #8]
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	605a      	str	r2, [r3, #4]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	3308      	adds	r3, #8
 800cece:	429a      	cmp	r2, r3
 800ced0:	d104      	bne.n	800cedc <vTaskSwitchContext+0x8c>
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	605a      	str	r2, [r3, #4]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	4a0c      	ldr	r2, [pc, #48]	@ (800cf14 <vTaskSwitchContext+0xc4>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	4a09      	ldr	r2, [pc, #36]	@ (800cf0c <vTaskSwitchContext+0xbc>)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ceec:	4b09      	ldr	r3, [pc, #36]	@ (800cf14 <vTaskSwitchContext+0xc4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3354      	adds	r3, #84	@ 0x54
 800cef2:	4a09      	ldr	r2, [pc, #36]	@ (800cf18 <vTaskSwitchContext+0xc8>)
 800cef4:	6013      	str	r3, [r2, #0]
}
 800cef6:	bf00      	nop
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20001b08 	.word	0x20001b08
 800cf08:	20001af4 	.word	0x20001af4
 800cf0c:	20001ae8 	.word	0x20001ae8
 800cf10:	20001610 	.word	0x20001610
 800cf14:	2000160c 	.word	0x2000160c
 800cf18:	2000005c 	.word	0x2000005c

0800cf1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10b      	bne.n	800cf44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	60fb      	str	r3, [r7, #12]
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	e7fd      	b.n	800cf40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf44:	4b07      	ldr	r3, [pc, #28]	@ (800cf64 <vTaskPlaceOnEventList+0x48>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3318      	adds	r3, #24
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7fe fd4e 	bl	800b9ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf52:	2101      	movs	r1, #1
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f000 fb69 	bl	800d62c <prvAddCurrentTaskToDelayedList>
}
 800cf5a:	bf00      	nop
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000160c 	.word	0x2000160c

0800cf68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	617b      	str	r3, [r7, #20]
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	e7fd      	b.n	800cf8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf92:	4b0a      	ldr	r3, [pc, #40]	@ (800cfbc <vTaskPlaceOnEventListRestricted+0x54>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3318      	adds	r3, #24
 800cf98:	4619      	mov	r1, r3
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f7fe fd03 	bl	800b9a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d002      	beq.n	800cfac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfaa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f000 fb3c 	bl	800d62c <prvAddCurrentTaskToDelayedList>
	}
 800cfb4:	bf00      	nop
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	2000160c 	.word	0x2000160c

0800cfc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10b      	bne.n	800cfee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	60fb      	str	r3, [r7, #12]
}
 800cfe8:	bf00      	nop
 800cfea:	bf00      	nop
 800cfec:	e7fd      	b.n	800cfea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	3318      	adds	r3, #24
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fd34 	bl	800ba60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cff8:	4b1d      	ldr	r3, [pc, #116]	@ (800d070 <xTaskRemoveFromEventList+0xb0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d11d      	bne.n	800d03c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	3304      	adds	r3, #4
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fd2b 	bl	800ba60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d00e:	4b19      	ldr	r3, [pc, #100]	@ (800d074 <xTaskRemoveFromEventList+0xb4>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d903      	bls.n	800d01e <xTaskRemoveFromEventList+0x5e>
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01a:	4a16      	ldr	r2, [pc, #88]	@ (800d074 <xTaskRemoveFromEventList+0xb4>)
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d022:	4613      	mov	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4a13      	ldr	r2, [pc, #76]	@ (800d078 <xTaskRemoveFromEventList+0xb8>)
 800d02c:	441a      	add	r2, r3
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	3304      	adds	r3, #4
 800d032:	4619      	mov	r1, r3
 800d034:	4610      	mov	r0, r2
 800d036:	f7fe fcb6 	bl	800b9a6 <vListInsertEnd>
 800d03a:	e005      	b.n	800d048 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3318      	adds	r3, #24
 800d040:	4619      	mov	r1, r3
 800d042:	480e      	ldr	r0, [pc, #56]	@ (800d07c <xTaskRemoveFromEventList+0xbc>)
 800d044:	f7fe fcaf 	bl	800b9a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04c:	4b0c      	ldr	r3, [pc, #48]	@ (800d080 <xTaskRemoveFromEventList+0xc0>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d052:	429a      	cmp	r2, r3
 800d054:	d905      	bls.n	800d062 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d056:	2301      	movs	r3, #1
 800d058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d05a:	4b0a      	ldr	r3, [pc, #40]	@ (800d084 <xTaskRemoveFromEventList+0xc4>)
 800d05c:	2201      	movs	r2, #1
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e001      	b.n	800d066 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d066:	697b      	ldr	r3, [r7, #20]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20001b08 	.word	0x20001b08
 800d074:	20001ae8 	.word	0x20001ae8
 800d078:	20001610 	.word	0x20001610
 800d07c:	20001aa0 	.word	0x20001aa0
 800d080:	2000160c 	.word	0x2000160c
 800d084:	20001af4 	.word	0x20001af4

0800d088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d090:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <vTaskInternalSetTimeOutState+0x24>)
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d098:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <vTaskInternalSetTimeOutState+0x28>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	605a      	str	r2, [r3, #4]
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	20001af8 	.word	0x20001af8
 800d0b0:	20001ae4 	.word	0x20001ae4

0800d0b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	613b      	str	r3, [r7, #16]
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	e7fd      	b.n	800d0d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	60fb      	str	r3, [r7, #12]
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d0fa:	f000 ff75 	bl	800dfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0fe:	4b1d      	ldr	r3, [pc, #116]	@ (800d174 <xTaskCheckForTimeOut+0xc0>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d116:	d102      	bne.n	800d11e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d118:	2300      	movs	r3, #0
 800d11a:	61fb      	str	r3, [r7, #28]
 800d11c:	e023      	b.n	800d166 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4b15      	ldr	r3, [pc, #84]	@ (800d178 <xTaskCheckForTimeOut+0xc4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	429a      	cmp	r2, r3
 800d128:	d007      	beq.n	800d13a <xTaskCheckForTimeOut+0x86>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	69ba      	ldr	r2, [r7, #24]
 800d130:	429a      	cmp	r2, r3
 800d132:	d302      	bcc.n	800d13a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d134:	2301      	movs	r3, #1
 800d136:	61fb      	str	r3, [r7, #28]
 800d138:	e015      	b.n	800d166 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	429a      	cmp	r2, r3
 800d142:	d20b      	bcs.n	800d15c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	1ad2      	subs	r2, r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff ff99 	bl	800d088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d156:	2300      	movs	r3, #0
 800d158:	61fb      	str	r3, [r7, #28]
 800d15a:	e004      	b.n	800d166 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d162:	2301      	movs	r3, #1
 800d164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d166:	f000 ff71 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800d16a:	69fb      	ldr	r3, [r7, #28]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3720      	adds	r7, #32
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20001ae4 	.word	0x20001ae4
 800d178:	20001af8 	.word	0x20001af8

0800d17c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d180:	4b03      	ldr	r3, [pc, #12]	@ (800d190 <vTaskMissedYield+0x14>)
 800d182:	2201      	movs	r2, #1
 800d184:	601a      	str	r2, [r3, #0]
}
 800d186:	bf00      	nop
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	20001af4 	.word	0x20001af4

0800d194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d19c:	f000 f852 	bl	800d244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1a0:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <prvIdleTask+0x28>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d9f9      	bls.n	800d19c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1a8:	4b05      	ldr	r3, [pc, #20]	@ (800d1c0 <prvIdleTask+0x2c>)
 800d1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ae:	601a      	str	r2, [r3, #0]
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1b8:	e7f0      	b.n	800d19c <prvIdleTask+0x8>
 800d1ba:	bf00      	nop
 800d1bc:	20001610 	.word	0x20001610
 800d1c0:	e000ed04 	.word	0xe000ed04

0800d1c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	e00c      	b.n	800d1ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4a12      	ldr	r2, [pc, #72]	@ (800d224 <prvInitialiseTaskLists+0x60>)
 800d1dc:	4413      	add	r3, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe fbb4 	bl	800b94c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	607b      	str	r3, [r7, #4]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b37      	cmp	r3, #55	@ 0x37
 800d1ee:	d9ef      	bls.n	800d1d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1f0:	480d      	ldr	r0, [pc, #52]	@ (800d228 <prvInitialiseTaskLists+0x64>)
 800d1f2:	f7fe fbab 	bl	800b94c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1f6:	480d      	ldr	r0, [pc, #52]	@ (800d22c <prvInitialiseTaskLists+0x68>)
 800d1f8:	f7fe fba8 	bl	800b94c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1fc:	480c      	ldr	r0, [pc, #48]	@ (800d230 <prvInitialiseTaskLists+0x6c>)
 800d1fe:	f7fe fba5 	bl	800b94c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d202:	480c      	ldr	r0, [pc, #48]	@ (800d234 <prvInitialiseTaskLists+0x70>)
 800d204:	f7fe fba2 	bl	800b94c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d208:	480b      	ldr	r0, [pc, #44]	@ (800d238 <prvInitialiseTaskLists+0x74>)
 800d20a:	f7fe fb9f 	bl	800b94c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d20e:	4b0b      	ldr	r3, [pc, #44]	@ (800d23c <prvInitialiseTaskLists+0x78>)
 800d210:	4a05      	ldr	r2, [pc, #20]	@ (800d228 <prvInitialiseTaskLists+0x64>)
 800d212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d214:	4b0a      	ldr	r3, [pc, #40]	@ (800d240 <prvInitialiseTaskLists+0x7c>)
 800d216:	4a05      	ldr	r2, [pc, #20]	@ (800d22c <prvInitialiseTaskLists+0x68>)
 800d218:	601a      	str	r2, [r3, #0]
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20001610 	.word	0x20001610
 800d228:	20001a70 	.word	0x20001a70
 800d22c:	20001a84 	.word	0x20001a84
 800d230:	20001aa0 	.word	0x20001aa0
 800d234:	20001ab4 	.word	0x20001ab4
 800d238:	20001acc 	.word	0x20001acc
 800d23c:	20001a98 	.word	0x20001a98
 800d240:	20001a9c 	.word	0x20001a9c

0800d244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d24a:	e019      	b.n	800d280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d24c:	f000 fecc 	bl	800dfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d250:	4b10      	ldr	r3, [pc, #64]	@ (800d294 <prvCheckTasksWaitingTermination+0x50>)
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3304      	adds	r3, #4
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe fbff 	bl	800ba60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d262:	4b0d      	ldr	r3, [pc, #52]	@ (800d298 <prvCheckTasksWaitingTermination+0x54>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3b01      	subs	r3, #1
 800d268:	4a0b      	ldr	r2, [pc, #44]	@ (800d298 <prvCheckTasksWaitingTermination+0x54>)
 800d26a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d26c:	4b0b      	ldr	r3, [pc, #44]	@ (800d29c <prvCheckTasksWaitingTermination+0x58>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3b01      	subs	r3, #1
 800d272:	4a0a      	ldr	r2, [pc, #40]	@ (800d29c <prvCheckTasksWaitingTermination+0x58>)
 800d274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d276:	f000 fee9 	bl	800e04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f810 	bl	800d2a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d280:	4b06      	ldr	r3, [pc, #24]	@ (800d29c <prvCheckTasksWaitingTermination+0x58>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e1      	bne.n	800d24c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	20001ab4 	.word	0x20001ab4
 800d298:	20001ae0 	.word	0x20001ae0
 800d29c:	20001ac8 	.word	0x20001ac8

0800d2a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	3354      	adds	r3, #84	@ 0x54
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f001 f9ff 	bl	800e6b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d108      	bne.n	800d2ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f001 f881 	bl	800e3c8 <vPortFree>
				vPortFree( pxTCB );
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 f87e 	bl	800e3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2cc:	e019      	b.n	800d302 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d103      	bne.n	800d2e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 f875 	bl	800e3c8 <vPortFree>
	}
 800d2de:	e010      	b.n	800d302 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d00b      	beq.n	800d302 <prvDeleteTCB+0x62>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	60fb      	str	r3, [r7, #12]
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	e7fd      	b.n	800d2fe <prvDeleteTCB+0x5e>
	}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d312:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <prvResetNextTaskUnblockTime+0x38>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d104      	bne.n	800d326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d31c:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <prvResetNextTaskUnblockTime+0x3c>)
 800d31e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d324:	e008      	b.n	800d338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d326:	4b07      	ldr	r3, [pc, #28]	@ (800d344 <prvResetNextTaskUnblockTime+0x38>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	4a04      	ldr	r2, [pc, #16]	@ (800d348 <prvResetNextTaskUnblockTime+0x3c>)
 800d336:	6013      	str	r3, [r2, #0]
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	20001a98 	.word	0x20001a98
 800d348:	20001b00 	.word	0x20001b00

0800d34c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d352:	4b0b      	ldr	r3, [pc, #44]	@ (800d380 <xTaskGetSchedulerState+0x34>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d102      	bne.n	800d360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d35a:	2301      	movs	r3, #1
 800d35c:	607b      	str	r3, [r7, #4]
 800d35e:	e008      	b.n	800d372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d360:	4b08      	ldr	r3, [pc, #32]	@ (800d384 <xTaskGetSchedulerState+0x38>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d102      	bne.n	800d36e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d368:	2302      	movs	r3, #2
 800d36a:	607b      	str	r3, [r7, #4]
 800d36c:	e001      	b.n	800d372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d36e:	2300      	movs	r3, #0
 800d370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d372:	687b      	ldr	r3, [r7, #4]
	}
 800d374:	4618      	mov	r0, r3
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	20001aec 	.word	0x20001aec
 800d384:	20001b08 	.word	0x20001b08

0800d388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d058      	beq.n	800d450 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d39e:	4b2f      	ldr	r3, [pc, #188]	@ (800d45c <xTaskPriorityDisinherit+0xd4>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d00b      	beq.n	800d3c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	60fb      	str	r3, [r7, #12]
}
 800d3ba:	bf00      	nop
 800d3bc:	bf00      	nop
 800d3be:	e7fd      	b.n	800d3bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10b      	bne.n	800d3e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	60bb      	str	r3, [r7, #8]
}
 800d3da:	bf00      	nop
 800d3dc:	bf00      	nop
 800d3de:	e7fd      	b.n	800d3dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3e4:	1e5a      	subs	r2, r3, #1
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d02c      	beq.n	800d450 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d128      	bne.n	800d450 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	3304      	adds	r3, #4
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe fb2c 	bl	800ba60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d414:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d420:	4b0f      	ldr	r3, [pc, #60]	@ (800d460 <xTaskPriorityDisinherit+0xd8>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d903      	bls.n	800d430 <xTaskPriorityDisinherit+0xa8>
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42c:	4a0c      	ldr	r2, [pc, #48]	@ (800d460 <xTaskPriorityDisinherit+0xd8>)
 800d42e:	6013      	str	r3, [r2, #0]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d434:	4613      	mov	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4413      	add	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4a09      	ldr	r2, [pc, #36]	@ (800d464 <xTaskPriorityDisinherit+0xdc>)
 800d43e:	441a      	add	r2, r3
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	3304      	adds	r3, #4
 800d444:	4619      	mov	r1, r3
 800d446:	4610      	mov	r0, r2
 800d448:	f7fe faad 	bl	800b9a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d44c:	2301      	movs	r3, #1
 800d44e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d450:	697b      	ldr	r3, [r7, #20]
	}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2000160c 	.word	0x2000160c
 800d460:	20001ae8 	.word	0x20001ae8
 800d464:	20001610 	.word	0x20001610

0800d468 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d472:	f000 fdb9 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d476:	4b20      	ldr	r3, [pc, #128]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d113      	bne.n	800d4aa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d482:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00b      	beq.n	800d4aa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d492:	2101      	movs	r1, #1
 800d494:	6838      	ldr	r0, [r7, #0]
 800d496:	f000 f8c9 	bl	800d62c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d49a:	4b18      	ldr	r3, [pc, #96]	@ (800d4fc <ulTaskNotifyTake+0x94>)
 800d49c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d4aa:	f000 fdcf 	bl	800e04c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d4ae:	f000 fd9b 	bl	800dfe8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d4b2:	4b11      	ldr	r3, [pc, #68]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d4ba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00e      	beq.n	800d4e0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d4d2:	e005      	b.n	800d4e0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d4d4:	4b08      	ldr	r3, [pc, #32]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	3a01      	subs	r2, #1
 800d4dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4e0:	4b05      	ldr	r3, [pc, #20]	@ (800d4f8 <ulTaskNotifyTake+0x90>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d4ea:	f000 fdaf 	bl	800e04c <vPortExitCritical>

		return ulReturn;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	2000160c 	.word	0x2000160c
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b08a      	sub	sp, #40	@ 0x28
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10b      	bne.n	800d528 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	61bb      	str	r3, [r7, #24]
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	e7fd      	b.n	800d524 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d528:	f000 fe3e 	bl	800e1a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d530:	f3ef 8211 	mrs	r2, BASEPRI
 800d534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	617a      	str	r2, [r7, #20]
 800d546:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d548:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d54a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d552:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	2202      	movs	r2, #2
 800d558:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d566:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d56a:	7ffb      	ldrb	r3, [r7, #31]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d147      	bne.n	800d600 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	60fb      	str	r3, [r7, #12]
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	e7fd      	b.n	800d58c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d590:	4b20      	ldr	r3, [pc, #128]	@ (800d614 <vTaskNotifyGiveFromISR+0x114>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d11d      	bne.n	800d5d4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	3304      	adds	r3, #4
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fa5f 	bl	800ba60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d618 <vTaskNotifyGiveFromISR+0x118>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d903      	bls.n	800d5b6 <vTaskNotifyGiveFromISR+0xb6>
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b2:	4a19      	ldr	r2, [pc, #100]	@ (800d618 <vTaskNotifyGiveFromISR+0x118>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4a16      	ldr	r2, [pc, #88]	@ (800d61c <vTaskNotifyGiveFromISR+0x11c>)
 800d5c4:	441a      	add	r2, r3
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7fe f9ea 	bl	800b9a6 <vListInsertEnd>
 800d5d2:	e005      	b.n	800d5e0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d6:	3318      	adds	r3, #24
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4811      	ldr	r0, [pc, #68]	@ (800d620 <vTaskNotifyGiveFromISR+0x120>)
 800d5dc:	f7fe f9e3 	bl	800b9a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d624 <vTaskNotifyGiveFromISR+0x124>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d908      	bls.n	800d600 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d628 <vTaskNotifyGiveFromISR+0x128>)
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f383 8811 	msr	BASEPRI, r3
}
 800d60a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d60c:	bf00      	nop
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20001b08 	.word	0x20001b08
 800d618:	20001ae8 	.word	0x20001ae8
 800d61c:	20001610 	.word	0x20001610
 800d620:	20001aa0 	.word	0x20001aa0
 800d624:	2000160c 	.word	0x2000160c
 800d628:	20001af4 	.word	0x20001af4

0800d62c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d636:	4b21      	ldr	r3, [pc, #132]	@ (800d6bc <prvAddCurrentTaskToDelayedList+0x90>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d63c:	4b20      	ldr	r3, [pc, #128]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3304      	adds	r3, #4
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fa0c 	bl	800ba60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d64e:	d10a      	bne.n	800d666 <prvAddCurrentTaskToDelayedList+0x3a>
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d656:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3304      	adds	r3, #4
 800d65c:	4619      	mov	r1, r3
 800d65e:	4819      	ldr	r0, [pc, #100]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d660:	f7fe f9a1 	bl	800b9a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d664:	e026      	b.n	800d6b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d66e:	4b14      	ldr	r3, [pc, #80]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d209      	bcs.n	800d692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d67e:	4b12      	ldr	r3, [pc, #72]	@ (800d6c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3304      	adds	r3, #4
 800d688:	4619      	mov	r1, r3
 800d68a:	4610      	mov	r0, r2
 800d68c:	f7fe f9af 	bl	800b9ee <vListInsert>
}
 800d690:	e010      	b.n	800d6b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d692:	4b0e      	ldr	r3, [pc, #56]	@ (800d6cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3304      	adds	r3, #4
 800d69c:	4619      	mov	r1, r3
 800d69e:	4610      	mov	r0, r2
 800d6a0:	f7fe f9a5 	bl	800b9ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d202      	bcs.n	800d6b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d6ae:	4a08      	ldr	r2, [pc, #32]	@ (800d6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	6013      	str	r3, [r2, #0]
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20001ae4 	.word	0x20001ae4
 800d6c0:	2000160c 	.word	0x2000160c
 800d6c4:	20001acc 	.word	0x20001acc
 800d6c8:	20001a9c 	.word	0x20001a9c
 800d6cc:	20001a98 	.word	0x20001a98
 800d6d0:	20001b00 	.word	0x20001b00

0800d6d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08a      	sub	sp, #40	@ 0x28
 800d6d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6de:	f000 fb13 	bl	800dd08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d758 <xTimerCreateTimerTask+0x84>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d021      	beq.n	800d72e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6f2:	1d3a      	adds	r2, r7, #4
 800d6f4:	f107 0108 	add.w	r1, r7, #8
 800d6f8:	f107 030c 	add.w	r3, r7, #12
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe f90b 	bl	800b918 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	9202      	str	r2, [sp, #8]
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	2302      	movs	r3, #2
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	2300      	movs	r3, #0
 800d712:	460a      	mov	r2, r1
 800d714:	4911      	ldr	r1, [pc, #68]	@ (800d75c <xTimerCreateTimerTask+0x88>)
 800d716:	4812      	ldr	r0, [pc, #72]	@ (800d760 <xTimerCreateTimerTask+0x8c>)
 800d718:	f7fe fec6 	bl	800c4a8 <xTaskCreateStatic>
 800d71c:	4603      	mov	r3, r0
 800d71e:	4a11      	ldr	r2, [pc, #68]	@ (800d764 <xTimerCreateTimerTask+0x90>)
 800d720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d722:	4b10      	ldr	r3, [pc, #64]	@ (800d764 <xTimerCreateTimerTask+0x90>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d72a:	2301      	movs	r3, #1
 800d72c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	613b      	str	r3, [r7, #16]
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d74c:	697b      	ldr	r3, [r7, #20]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20001b3c 	.word	0x20001b3c
 800d75c:	0800fd34 	.word	0x0800fd34
 800d760:	0800d8a1 	.word	0x0800d8a1
 800d764:	20001b40 	.word	0x20001b40

0800d768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	@ 0x28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d776:	2300      	movs	r3, #0
 800d778:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10b      	bne.n	800d798 <xTimerGenericCommand+0x30>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	623b      	str	r3, [r7, #32]
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	e7fd      	b.n	800d794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d798:	4b19      	ldr	r3, [pc, #100]	@ (800d800 <xTimerGenericCommand+0x98>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d02a      	beq.n	800d7f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2b05      	cmp	r3, #5
 800d7b0:	dc18      	bgt.n	800d7e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d7b2:	f7ff fdcb 	bl	800d34c <xTaskGetSchedulerState>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d109      	bne.n	800d7d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d7bc:	4b10      	ldr	r3, [pc, #64]	@ (800d800 <xTimerGenericCommand+0x98>)
 800d7be:	6818      	ldr	r0, [r3, #0]
 800d7c0:	f107 0110 	add.w	r1, r7, #16
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7c8:	f7fe fa7e 	bl	800bcc8 <xQueueGenericSend>
 800d7cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7ce:	e012      	b.n	800d7f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d800 <xTimerGenericCommand+0x98>)
 800d7d2:	6818      	ldr	r0, [r3, #0]
 800d7d4:	f107 0110 	add.w	r1, r7, #16
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f7fe fa74 	bl	800bcc8 <xQueueGenericSend>
 800d7e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7e2:	e008      	b.n	800d7f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d7e4:	4b06      	ldr	r3, [pc, #24]	@ (800d800 <xTimerGenericCommand+0x98>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	f107 0110 	add.w	r1, r7, #16
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	f7fe fb6c 	bl	800becc <xQueueGenericSendFromISR>
 800d7f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3728      	adds	r7, #40	@ 0x28
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20001b3c 	.word	0x20001b3c

0800d804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af02      	add	r7, sp, #8
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d80e:	4b23      	ldr	r3, [pc, #140]	@ (800d89c <prvProcessExpiredTimer+0x98>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	3304      	adds	r3, #4
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe f91f 	bl	800ba60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d828:	f003 0304 	and.w	r3, r3, #4
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d023      	beq.n	800d878 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	699a      	ldr	r2, [r3, #24]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	18d1      	adds	r1, r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	6978      	ldr	r0, [r7, #20]
 800d83e:	f000 f8d5 	bl	800d9ec <prvInsertTimerInActiveList>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d020      	beq.n	800d88a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d848:	2300      	movs	r3, #0
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	2300      	movs	r3, #0
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	2100      	movs	r1, #0
 800d852:	6978      	ldr	r0, [r7, #20]
 800d854:	f7ff ff88 	bl	800d768 <xTimerGenericCommand>
 800d858:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d114      	bne.n	800d88a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	e7fd      	b.n	800d874 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d87e:	f023 0301 	bic.w	r3, r3, #1
 800d882:	b2da      	uxtb	r2, r3
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	6a1b      	ldr	r3, [r3, #32]
 800d88e:	6978      	ldr	r0, [r7, #20]
 800d890:	4798      	blx	r3
}
 800d892:	bf00      	nop
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	20001b34 	.word	0x20001b34

0800d8a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f859 	bl	800d964 <prvGetNextExpireTime>
 800d8b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 f805 	bl	800d8c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d8be:	f000 f8d7 	bl	800da70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8c2:	bf00      	nop
 800d8c4:	e7f0      	b.n	800d8a8 <prvTimerTask+0x8>
	...

0800d8c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d8d2:	f7ff f84d 	bl	800c970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8d6:	f107 0308 	add.w	r3, r7, #8
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 f866 	bl	800d9ac <prvSampleTimeNow>
 800d8e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d130      	bne.n	800d94a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10a      	bne.n	800d904 <prvProcessTimerOrBlockTask+0x3c>
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d806      	bhi.n	800d904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8f6:	f7ff f849 	bl	800c98c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8fa:	68f9      	ldr	r1, [r7, #12]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f7ff ff81 	bl	800d804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d902:	e024      	b.n	800d94e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d008      	beq.n	800d91c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d90a:	4b13      	ldr	r3, [pc, #76]	@ (800d958 <prvProcessTimerOrBlockTask+0x90>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <prvProcessTimerOrBlockTask+0x50>
 800d914:	2301      	movs	r3, #1
 800d916:	e000      	b.n	800d91a <prvProcessTimerOrBlockTask+0x52>
 800d918:	2300      	movs	r3, #0
 800d91a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d91c:	4b0f      	ldr	r3, [pc, #60]	@ (800d95c <prvProcessTimerOrBlockTask+0x94>)
 800d91e:	6818      	ldr	r0, [r3, #0]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	4619      	mov	r1, r3
 800d92a:	f7fe fd89 	bl	800c440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d92e:	f7ff f82d 	bl	800c98c <xTaskResumeAll>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d938:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <prvProcessTimerOrBlockTask+0x98>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
}
 800d948:	e001      	b.n	800d94e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d94a:	f7ff f81f 	bl	800c98c <xTaskResumeAll>
}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20001b38 	.word	0x20001b38
 800d95c:	20001b3c 	.word	0x20001b3c
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d96c:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a8 <prvGetNextExpireTime+0x44>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <prvGetNextExpireTime+0x16>
 800d976:	2201      	movs	r2, #1
 800d978:	e000      	b.n	800d97c <prvGetNextExpireTime+0x18>
 800d97a:	2200      	movs	r2, #0
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d105      	bne.n	800d994 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d988:	4b07      	ldr	r3, [pc, #28]	@ (800d9a8 <prvGetNextExpireTime+0x44>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]
 800d992:	e001      	b.n	800d998 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d998:	68fb      	ldr	r3, [r7, #12]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	20001b34 	.word	0x20001b34

0800d9ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d9b4:	f7ff f888 	bl	800cac8 <xTaskGetTickCount>
 800d9b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e8 <prvSampleTimeNow+0x3c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d205      	bcs.n	800d9d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d9c4:	f000 f93a 	bl	800dc3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	e002      	b.n	800d9d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d9d6:	4a04      	ldr	r2, [pc, #16]	@ (800d9e8 <prvSampleTimeNow+0x3c>)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20001b44 	.word	0x20001b44

0800d9ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	68ba      	ldr	r2, [r7, #8]
 800da02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d812      	bhi.n	800da38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d302      	bcc.n	800da26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da20:	2301      	movs	r3, #1
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	e01b      	b.n	800da5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da26:	4b10      	ldr	r3, [pc, #64]	@ (800da68 <prvInsertTimerInActiveList+0x7c>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	3304      	adds	r3, #4
 800da2e:	4619      	mov	r1, r3
 800da30:	4610      	mov	r0, r2
 800da32:	f7fd ffdc 	bl	800b9ee <vListInsert>
 800da36:	e012      	b.n	800da5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d206      	bcs.n	800da4e <prvInsertTimerInActiveList+0x62>
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	429a      	cmp	r2, r3
 800da46:	d302      	bcc.n	800da4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da48:	2301      	movs	r3, #1
 800da4a:	617b      	str	r3, [r7, #20]
 800da4c:	e007      	b.n	800da5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da4e:	4b07      	ldr	r3, [pc, #28]	@ (800da6c <prvInsertTimerInActiveList+0x80>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	3304      	adds	r3, #4
 800da56:	4619      	mov	r1, r3
 800da58:	4610      	mov	r0, r2
 800da5a:	f7fd ffc8 	bl	800b9ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da5e:	697b      	ldr	r3, [r7, #20]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3718      	adds	r7, #24
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20001b38 	.word	0x20001b38
 800da6c:	20001b34 	.word	0x20001b34

0800da70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08e      	sub	sp, #56	@ 0x38
 800da74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da76:	e0ce      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	da19      	bge.n	800dab2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da7e:	1d3b      	adds	r3, r7, #4
 800da80:	3304      	adds	r3, #4
 800da82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10b      	bne.n	800daa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	61fb      	str	r3, [r7, #28]
}
 800da9c:	bf00      	nop
 800da9e:	bf00      	nop
 800daa0:	e7fd      	b.n	800da9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800daa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daa8:	6850      	ldr	r0, [r2, #4]
 800daaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daac:	6892      	ldr	r2, [r2, #8]
 800daae:	4611      	mov	r1, r2
 800dab0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f2c0 80ae 	blt.w	800dc16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac8:	3304      	adds	r3, #4
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fd ffc8 	bl	800ba60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dad0:	463b      	mov	r3, r7
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff ff6a 	bl	800d9ac <prvSampleTimeNow>
 800dad8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2b09      	cmp	r3, #9
 800dade:	f200 8097 	bhi.w	800dc10 <prvProcessReceivedCommands+0x1a0>
 800dae2:	a201      	add	r2, pc, #4	@ (adr r2, 800dae8 <prvProcessReceivedCommands+0x78>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db11 	.word	0x0800db11
 800daec:	0800db11 	.word	0x0800db11
 800daf0:	0800db11 	.word	0x0800db11
 800daf4:	0800db87 	.word	0x0800db87
 800daf8:	0800db9b 	.word	0x0800db9b
 800dafc:	0800dbe7 	.word	0x0800dbe7
 800db00:	0800db11 	.word	0x0800db11
 800db04:	0800db11 	.word	0x0800db11
 800db08:	0800db87 	.word	0x0800db87
 800db0c:	0800db9b 	.word	0x0800db9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db16:	f043 0301 	orr.w	r3, r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	18d1      	adds	r1, r2, r3
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db30:	f7ff ff5c 	bl	800d9ec <prvInsertTimerInActiveList>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d06c      	beq.n	800dc14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3c:	6a1b      	ldr	r3, [r3, #32]
 800db3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d061      	beq.n	800dc14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	441a      	add	r2, r3
 800db58:	2300      	movs	r3, #0
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	2300      	movs	r3, #0
 800db5e:	2100      	movs	r1, #0
 800db60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db62:	f7ff fe01 	bl	800d768 <xTimerGenericCommand>
 800db66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db68:	6a3b      	ldr	r3, [r7, #32]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d152      	bne.n	800dc14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	61bb      	str	r3, [r7, #24]
}
 800db80:	bf00      	nop
 800db82:	bf00      	nop
 800db84:	e7fd      	b.n	800db82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db8c:	f023 0301 	bic.w	r3, r3, #1
 800db90:	b2da      	uxtb	r2, r3
 800db92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db98:	e03d      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dba0:	f043 0301 	orr.w	r3, r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10b      	bne.n	800dbd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	617b      	str	r3, [r7, #20]
}
 800dbcc:	bf00      	nop
 800dbce:	bf00      	nop
 800dbd0:	e7fd      	b.n	800dbce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd4:	699a      	ldr	r2, [r3, #24]
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd8:	18d1      	adds	r1, r2, r3
 800dbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbe0:	f7ff ff04 	bl	800d9ec <prvInsertTimerInActiveList>
					break;
 800dbe4:	e017      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d103      	bne.n	800dbfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dbf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbf6:	f000 fbe7 	bl	800e3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbfa:	e00c      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc02:	f023 0301 	bic.w	r3, r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dc0e:	e002      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dc10:	bf00      	nop
 800dc12:	e000      	b.n	800dc16 <prvProcessReceivedCommands+0x1a6>
					break;
 800dc14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc16:	4b08      	ldr	r3, [pc, #32]	@ (800dc38 <prvProcessReceivedCommands+0x1c8>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	1d39      	adds	r1, r7, #4
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fe f9f2 	bl	800c008 <xQueueReceive>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f47f af26 	bne.w	800da78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	3730      	adds	r7, #48	@ 0x30
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	20001b3c 	.word	0x20001b3c

0800dc3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc42:	e049      	b.n	800dcd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc44:	4b2e      	ldr	r3, [pc, #184]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc4e:	4b2c      	ldr	r3, [pc, #176]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fd feff 	bl	800ba60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a1b      	ldr	r3, [r3, #32]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d02f      	beq.n	800dcd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	4413      	add	r3, r2
 800dc80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d90e      	bls.n	800dca8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc96:	4b1a      	ldr	r3, [pc, #104]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f7fd fea4 	bl	800b9ee <vListInsert>
 800dca6:	e017      	b.n	800dcd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	2300      	movs	r3, #0
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7ff fd58 	bl	800d768 <xTimerGenericCommand>
 800dcb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10b      	bne.n	800dcd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	603b      	str	r3, [r7, #0]
}
 800dcd2:	bf00      	nop
 800dcd4:	bf00      	nop
 800dcd6:	e7fd      	b.n	800dcd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcd8:	4b09      	ldr	r3, [pc, #36]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1b0      	bne.n	800dc44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dce2:	4b07      	ldr	r3, [pc, #28]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dce8:	4b06      	ldr	r3, [pc, #24]	@ (800dd04 <prvSwitchTimerLists+0xc8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a04      	ldr	r2, [pc, #16]	@ (800dd00 <prvSwitchTimerLists+0xc4>)
 800dcee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dcf0:	4a04      	ldr	r2, [pc, #16]	@ (800dd04 <prvSwitchTimerLists+0xc8>)
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	6013      	str	r3, [r2, #0]
}
 800dcf6:	bf00      	nop
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	20001b34 	.word	0x20001b34
 800dd04:	20001b38 	.word	0x20001b38

0800dd08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd0e:	f000 f96b 	bl	800dfe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd12:	4b15      	ldr	r3, [pc, #84]	@ (800dd68 <prvCheckForValidListAndQueue+0x60>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d120      	bne.n	800dd5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd1a:	4814      	ldr	r0, [pc, #80]	@ (800dd6c <prvCheckForValidListAndQueue+0x64>)
 800dd1c:	f7fd fe16 	bl	800b94c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd20:	4813      	ldr	r0, [pc, #76]	@ (800dd70 <prvCheckForValidListAndQueue+0x68>)
 800dd22:	f7fd fe13 	bl	800b94c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd26:	4b13      	ldr	r3, [pc, #76]	@ (800dd74 <prvCheckForValidListAndQueue+0x6c>)
 800dd28:	4a10      	ldr	r2, [pc, #64]	@ (800dd6c <prvCheckForValidListAndQueue+0x64>)
 800dd2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd2c:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <prvCheckForValidListAndQueue+0x70>)
 800dd2e:	4a10      	ldr	r2, [pc, #64]	@ (800dd70 <prvCheckForValidListAndQueue+0x68>)
 800dd30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd32:	2300      	movs	r3, #0
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	4b11      	ldr	r3, [pc, #68]	@ (800dd7c <prvCheckForValidListAndQueue+0x74>)
 800dd38:	4a11      	ldr	r2, [pc, #68]	@ (800dd80 <prvCheckForValidListAndQueue+0x78>)
 800dd3a:	2110      	movs	r1, #16
 800dd3c:	200a      	movs	r0, #10
 800dd3e:	f7fd ff23 	bl	800bb88 <xQueueGenericCreateStatic>
 800dd42:	4603      	mov	r3, r0
 800dd44:	4a08      	ldr	r2, [pc, #32]	@ (800dd68 <prvCheckForValidListAndQueue+0x60>)
 800dd46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd48:	4b07      	ldr	r3, [pc, #28]	@ (800dd68 <prvCheckForValidListAndQueue+0x60>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd50:	4b05      	ldr	r3, [pc, #20]	@ (800dd68 <prvCheckForValidListAndQueue+0x60>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	490b      	ldr	r1, [pc, #44]	@ (800dd84 <prvCheckForValidListAndQueue+0x7c>)
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe fb48 	bl	800c3ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd5c:	f000 f976 	bl	800e04c <vPortExitCritical>
}
 800dd60:	bf00      	nop
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20001b3c 	.word	0x20001b3c
 800dd6c:	20001b0c 	.word	0x20001b0c
 800dd70:	20001b20 	.word	0x20001b20
 800dd74:	20001b34 	.word	0x20001b34
 800dd78:	20001b38 	.word	0x20001b38
 800dd7c:	20001be8 	.word	0x20001be8
 800dd80:	20001b48 	.word	0x20001b48
 800dd84:	0800fd3c 	.word	0x0800fd3c

0800dd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3b04      	subs	r3, #4
 800dd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3b04      	subs	r3, #4
 800dda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	f023 0201 	bic.w	r2, r3, #1
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3b04      	subs	r3, #4
 800ddb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddb8:	4a0c      	ldr	r2, [pc, #48]	@ (800ddec <pxPortInitialiseStack+0x64>)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3b14      	subs	r3, #20
 800ddc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3b04      	subs	r3, #4
 800ddce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f06f 0202 	mvn.w	r2, #2
 800ddd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3b20      	subs	r3, #32
 800dddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ddde:	68fb      	ldr	r3, [r7, #12]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	0800ddf1 	.word	0x0800ddf1

0800ddf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddfa:	4b13      	ldr	r3, [pc, #76]	@ (800de48 <prvTaskExitError+0x58>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de02:	d00b      	beq.n	800de1c <prvTaskExitError+0x2c>
	__asm volatile
 800de04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	60fb      	str	r3, [r7, #12]
}
 800de16:	bf00      	nop
 800de18:	bf00      	nop
 800de1a:	e7fd      	b.n	800de18 <prvTaskExitError+0x28>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	60bb      	str	r3, [r7, #8]
}
 800de2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de30:	bf00      	nop
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d0fc      	beq.n	800de32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	20000058 	.word	0x20000058
 800de4c:	00000000 	.word	0x00000000

0800de50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de50:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <pxCurrentTCBConst2>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	6808      	ldr	r0, [r1, #0]
 800de56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5a:	f380 8809 	msr	PSP, r0
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f380 8811 	msr	BASEPRI, r0
 800de6a:	4770      	bx	lr
 800de6c:	f3af 8000 	nop.w

0800de70 <pxCurrentTCBConst2>:
 800de70:	2000160c 	.word	0x2000160c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de78:	4808      	ldr	r0, [pc, #32]	@ (800de9c <prvPortStartFirstTask+0x24>)
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f380 8808 	msr	MSP, r0
 800de82:	f04f 0000 	mov.w	r0, #0
 800de86:	f380 8814 	msr	CONTROL, r0
 800de8a:	b662      	cpsie	i
 800de8c:	b661      	cpsie	f
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	df00      	svc	0
 800de98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de9a:	bf00      	nop
 800de9c:	e000ed08 	.word	0xe000ed08

0800dea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dea6:	4b47      	ldr	r3, [pc, #284]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a47      	ldr	r2, [pc, #284]	@ (800dfc8 <xPortStartScheduler+0x128>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d10b      	bne.n	800dec8 <xPortStartScheduler+0x28>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	60fb      	str	r3, [r7, #12]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dec8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a3f      	ldr	r2, [pc, #252]	@ (800dfcc <xPortStartScheduler+0x12c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d10b      	bne.n	800deea <xPortStartScheduler+0x4a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	613b      	str	r3, [r7, #16]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800deea:	4b39      	ldr	r3, [pc, #228]	@ (800dfd0 <xPortStartScheduler+0x130>)
 800deec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	22ff      	movs	r2, #255	@ 0xff
 800defa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	4b31      	ldr	r3, [pc, #196]	@ (800dfd4 <xPortStartScheduler+0x134>)
 800df10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df12:	4b31      	ldr	r3, [pc, #196]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df14:	2207      	movs	r2, #7
 800df16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df18:	e009      	b.n	800df2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800df1a:	4b2f      	ldr	r3, [pc, #188]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3b01      	subs	r3, #1
 800df20:	4a2d      	ldr	r2, [pc, #180]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df24:	78fb      	ldrb	r3, [r7, #3]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df2e:	78fb      	ldrb	r3, [r7, #3]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df36:	2b80      	cmp	r3, #128	@ 0x80
 800df38:	d0ef      	beq.n	800df1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df3a:	4b27      	ldr	r3, [pc, #156]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f1c3 0307 	rsb	r3, r3, #7
 800df42:	2b04      	cmp	r3, #4
 800df44:	d00b      	beq.n	800df5e <xPortStartScheduler+0xbe>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	60bb      	str	r3, [r7, #8]
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	e7fd      	b.n	800df5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df68:	4b1b      	ldr	r3, [pc, #108]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800df70:	4a19      	ldr	r2, [pc, #100]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	b2da      	uxtb	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df7c:	4b17      	ldr	r3, [pc, #92]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a16      	ldr	r2, [pc, #88]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800df86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df88:	4b14      	ldr	r3, [pc, #80]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a13      	ldr	r2, [pc, #76]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800df92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df94:	f000 f8da 	bl	800e14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df98:	4b11      	ldr	r3, [pc, #68]	@ (800dfe0 <xPortStartScheduler+0x140>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df9e:	f000 f8f9 	bl	800e194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfa2:	4b10      	ldr	r3, [pc, #64]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfae:	f7ff ff63 	bl	800de78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfb2:	f7fe ff4d 	bl	800ce50 <vTaskSwitchContext>
	prvTaskExitError();
 800dfb6:	f7ff ff1b 	bl	800ddf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e000ed00 	.word	0xe000ed00
 800dfc8:	410fc271 	.word	0x410fc271
 800dfcc:	410fc270 	.word	0x410fc270
 800dfd0:	e000e400 	.word	0xe000e400
 800dfd4:	20001c38 	.word	0x20001c38
 800dfd8:	20001c3c 	.word	0x20001c3c
 800dfdc:	e000ed20 	.word	0xe000ed20
 800dfe0:	20000058 	.word	0x20000058
 800dfe4:	e000ef34 	.word	0xe000ef34

0800dfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	607b      	str	r3, [r7, #4]
}
 800e000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e002:	4b10      	ldr	r3, [pc, #64]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3301      	adds	r3, #1
 800e008:	4a0e      	ldr	r2, [pc, #56]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e00c:	4b0d      	ldr	r3, [pc, #52]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d110      	bne.n	800e036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e014:	4b0c      	ldr	r3, [pc, #48]	@ (800e048 <vPortEnterCritical+0x60>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00b      	beq.n	800e036 <vPortEnterCritical+0x4e>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	603b      	str	r3, [r7, #0]
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	e7fd      	b.n	800e032 <vPortEnterCritical+0x4a>
	}
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	20000058 	.word	0x20000058
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <vPortExitCritical+0x50>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <vPortExitCritical+0x26>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	607b      	str	r3, [r7, #4]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e072:	4b0a      	ldr	r3, [pc, #40]	@ (800e09c <vPortExitCritical+0x50>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3b01      	subs	r3, #1
 800e078:	4a08      	ldr	r2, [pc, #32]	@ (800e09c <vPortExitCritical+0x50>)
 800e07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e07c:	4b07      	ldr	r3, [pc, #28]	@ (800e09c <vPortExitCritical+0x50>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <vPortExitCritical+0x44>
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	20000058 	.word	0x20000058

0800e0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0a0:	f3ef 8009 	mrs	r0, PSP
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	4b15      	ldr	r3, [pc, #84]	@ (800e100 <pxCurrentTCBConst>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f01e 0f10 	tst.w	lr, #16
 800e0b0:	bf08      	it	eq
 800e0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e0c4:	f380 8811 	msr	BASEPRI, r0
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f7fe febe 	bl	800ce50 <vTaskSwitchContext>
 800e0d4:	f04f 0000 	mov.w	r0, #0
 800e0d8:	f380 8811 	msr	BASEPRI, r0
 800e0dc:	bc09      	pop	{r0, r3}
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	6808      	ldr	r0, [r1, #0]
 800e0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e6:	f01e 0f10 	tst.w	lr, #16
 800e0ea:	bf08      	it	eq
 800e0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0f0:	f380 8809 	msr	PSP, r0
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst>:
 800e100:	2000160c 	.word	0x2000160c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e122:	f7fe fddb 	bl	800ccdc <xTaskIncrementTick>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12c:	4b06      	ldr	r3, [pc, #24]	@ (800e148 <xPortSysTickHandler+0x40>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	2300      	movs	r3, #0
 800e136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f383 8811 	msr	BASEPRI, r3
}
 800e13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e150:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e156:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <vPortSetupTimerInterrupt+0x38>)
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	@ (800e188 <vPortSetupTimerInterrupt+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0a      	ldr	r2, [pc, #40]	@ (800e18c <vPortSetupTimerInterrupt+0x40>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	099b      	lsrs	r3, r3, #6
 800e168:	4a09      	ldr	r2, [pc, #36]	@ (800e190 <vPortSetupTimerInterrupt+0x44>)
 800e16a:	3b01      	subs	r3, #1
 800e16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
}
 800e174:	bf00      	nop
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	e000e010 	.word	0xe000e010
 800e184:	e000e018 	.word	0xe000e018
 800e188:	2000004c 	.word	0x2000004c
 800e18c:	10624dd3 	.word	0x10624dd3
 800e190:	e000e014 	.word	0xe000e014

0800e194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e1a4 <vPortEnableVFP+0x10>
 800e198:	6801      	ldr	r1, [r0, #0]
 800e19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e19e:	6001      	str	r1, [r0, #0]
 800e1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1a2:	bf00      	nop
 800e1a4:	e000ed88 	.word	0xe000ed88

0800e1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ae:	f3ef 8305 	mrs	r3, IPSR
 800e1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b0f      	cmp	r3, #15
 800e1b8:	d915      	bls.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ba:	4a18      	ldr	r2, [pc, #96]	@ (800e21c <vPortValidateInterruptPriority+0x74>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1c4:	4b16      	ldr	r3, [pc, #88]	@ (800e220 <vPortValidateInterruptPriority+0x78>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	7afa      	ldrb	r2, [r7, #11]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d20b      	bcs.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
}
 800e1e0:	bf00      	nop
 800e1e2:	bf00      	nop
 800e1e4:	e7fd      	b.n	800e1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e224 <vPortValidateInterruptPriority+0x7c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e228 <vPortValidateInterruptPriority+0x80>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d90b      	bls.n	800e20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	603b      	str	r3, [r7, #0]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortValidateInterruptPriority+0x62>
	}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	e000e3f0 	.word	0xe000e3f0
 800e220:	20001c38 	.word	0x20001c38
 800e224:	e000ed0c 	.word	0xe000ed0c
 800e228:	20001c3c 	.word	0x20001c3c

0800e22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	@ 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e238:	f7fe fb9a 	bl	800c970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e23c:	4b5c      	ldr	r3, [pc, #368]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e244:	f000 f924 	bl	800e490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e248:	4b5a      	ldr	r3, [pc, #360]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4013      	ands	r3, r2
 800e250:	2b00      	cmp	r3, #0
 800e252:	f040 8095 	bne.w	800e380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01e      	beq.n	800e29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e25c:	2208      	movs	r2, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4413      	add	r3, r2
 800e262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d015      	beq.n	800e29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <pvPortMalloc+0x6e>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	617b      	str	r3, [r7, #20]
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop
 800e298:	e7fd      	b.n	800e296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d06f      	beq.n	800e380 <pvPortMalloc+0x154>
 800e2a0:	4b45      	ldr	r3, [pc, #276]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d86a      	bhi.n	800e380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2aa:	4b44      	ldr	r3, [pc, #272]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2ae:	4b43      	ldr	r3, [pc, #268]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2b4:	e004      	b.n	800e2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <pvPortMalloc+0xa6>
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1f1      	bne.n	800e2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2d2:	4b37      	ldr	r3, [pc, #220]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d051      	beq.n	800e380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	1ad2      	subs	r2, r2, r3
 800e2f6:	2308      	movs	r3, #8
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d920      	bls.n	800e340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	f003 0307 	and.w	r3, r3, #7
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <pvPortMalloc+0xfc>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	613b      	str	r3, [r7, #16]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e33a:	69b8      	ldr	r0, [r7, #24]
 800e33c:	f000 f90a 	bl	800e554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e340:	4b1d      	ldr	r3, [pc, #116]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e34e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d203      	bcs.n	800e362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e35a:	4b17      	ldr	r3, [pc, #92]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a18      	ldr	r2, [pc, #96]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	4b13      	ldr	r3, [pc, #76]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	431a      	orrs	r2, r3
 800e36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e376:	4b13      	ldr	r3, [pc, #76]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3301      	adds	r3, #1
 800e37c:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e380:	f7fe fb04 	bl	800c98c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3728      	adds	r7, #40	@ 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20005848 	.word	0x20005848
 800e3b4:	2000585c 	.word	0x2000585c
 800e3b8:	2000584c 	.word	0x2000584c
 800e3bc:	20005840 	.word	0x20005840
 800e3c0:	20005850 	.word	0x20005850
 800e3c4:	20005854 	.word	0x20005854

0800e3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d04f      	beq.n	800e47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3da:	2308      	movs	r3, #8
 800e3dc:	425b      	negs	r3, r3
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	4b25      	ldr	r3, [pc, #148]	@ (800e484 <vPortFree+0xbc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10b      	bne.n	800e40e <vPortFree+0x46>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00b      	beq.n	800e42e <vPortFree+0x66>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	60bb      	str	r3, [r7, #8]
}
 800e428:	bf00      	nop
 800e42a:	bf00      	nop
 800e42c:	e7fd      	b.n	800e42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <vPortFree+0xbc>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01e      	beq.n	800e47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d11a      	bne.n	800e47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	4b0e      	ldr	r3, [pc, #56]	@ (800e484 <vPortFree+0xbc>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	43db      	mvns	r3, r3
 800e44e:	401a      	ands	r2, r3
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e454:	f7fe fa8c 	bl	800c970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <vPortFree+0xc0>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4413      	add	r3, r2
 800e462:	4a09      	ldr	r2, [pc, #36]	@ (800e488 <vPortFree+0xc0>)
 800e464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f000 f874 	bl	800e554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e46c:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <vPortFree+0xc4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	4a06      	ldr	r2, [pc, #24]	@ (800e48c <vPortFree+0xc4>)
 800e474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e476:	f7fe fa89 	bl	800c98c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e47a:	bf00      	nop
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	2000585c 	.word	0x2000585c
 800e488:	2000584c 	.word	0x2000584c
 800e48c:	20005858 	.word	0x20005858

0800e490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e49c:	4b27      	ldr	r3, [pc, #156]	@ (800e53c <prvHeapInit+0xac>)
 800e49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f003 0307 	and.w	r3, r3, #7
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3307      	adds	r3, #7
 800e4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f023 0307 	bic.w	r3, r3, #7
 800e4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	4a1f      	ldr	r2, [pc, #124]	@ (800e53c <prvHeapInit+0xac>)
 800e4c0:	4413      	add	r3, r2
 800e4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e540 <prvHeapInit+0xb0>)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e540 <prvHeapInit+0xb0>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	4413      	add	r3, r2
 800e4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4dc:	2208      	movs	r2, #8
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1a9b      	subs	r3, r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f023 0307 	bic.w	r3, r3, #7
 800e4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4a15      	ldr	r2, [pc, #84]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4f2:	4b14      	ldr	r3, [pc, #80]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4fa:	4b12      	ldr	r3, [pc, #72]	@ (800e544 <prvHeapInit+0xb4>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2200      	movs	r2, #0
 800e500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	1ad2      	subs	r2, r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e510:	4b0c      	ldr	r3, [pc, #48]	@ (800e544 <prvHeapInit+0xb4>)
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	4a0a      	ldr	r2, [pc, #40]	@ (800e548 <prvHeapInit+0xb8>)
 800e51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4a09      	ldr	r2, [pc, #36]	@ (800e54c <prvHeapInit+0xbc>)
 800e526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e528:	4b09      	ldr	r3, [pc, #36]	@ (800e550 <prvHeapInit+0xc0>)
 800e52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e52e:	601a      	str	r2, [r3, #0]
}
 800e530:	bf00      	nop
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20001c40 	.word	0x20001c40
 800e540:	20005840 	.word	0x20005840
 800e544:	20005848 	.word	0x20005848
 800e548:	20005850 	.word	0x20005850
 800e54c:	2000584c 	.word	0x2000584c
 800e550:	2000585c 	.word	0x2000585c

0800e554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e55c:	4b28      	ldr	r3, [pc, #160]	@ (800e600 <prvInsertBlockIntoFreeList+0xac>)
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e002      	b.n	800e568 <prvInsertBlockIntoFreeList+0x14>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d8f7      	bhi.n	800e562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	4413      	add	r3, r2
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d108      	bne.n	800e596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	441a      	add	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d118      	bne.n	800e5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	4b15      	ldr	r3, [pc, #84]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d00d      	beq.n	800e5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	441a      	add	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	e008      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e003      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d002      	beq.n	800e5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f2:	bf00      	nop
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	20005840 	.word	0x20005840
 800e604:	20005848 	.word	0x20005848

0800e608 <_vsiprintf_r>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	b09a      	sub	sp, #104	@ 0x68
 800e60c:	2400      	movs	r4, #0
 800e60e:	9100      	str	r1, [sp, #0]
 800e610:	9104      	str	r1, [sp, #16]
 800e612:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e616:	9105      	str	r1, [sp, #20]
 800e618:	9102      	str	r1, [sp, #8]
 800e61a:	4905      	ldr	r1, [pc, #20]	@ (800e630 <_vsiprintf_r+0x28>)
 800e61c:	9103      	str	r1, [sp, #12]
 800e61e:	4669      	mov	r1, sp
 800e620:	9419      	str	r4, [sp, #100]	@ 0x64
 800e622:	f000 f957 	bl	800e8d4 <_svfiprintf_r>
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	701c      	strb	r4, [r3, #0]
 800e62a:	b01a      	add	sp, #104	@ 0x68
 800e62c:	bd10      	pop	{r4, pc}
 800e62e:	bf00      	nop
 800e630:	ffff0208 	.word	0xffff0208

0800e634 <vsiprintf>:
 800e634:	4613      	mov	r3, r2
 800e636:	460a      	mov	r2, r1
 800e638:	4601      	mov	r1, r0
 800e63a:	4802      	ldr	r0, [pc, #8]	@ (800e644 <vsiprintf+0x10>)
 800e63c:	6800      	ldr	r0, [r0, #0]
 800e63e:	f7ff bfe3 	b.w	800e608 <_vsiprintf_r>
 800e642:	bf00      	nop
 800e644:	2000005c 	.word	0x2000005c

0800e648 <memset>:
 800e648:	4402      	add	r2, r0
 800e64a:	4603      	mov	r3, r0
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d100      	bne.n	800e652 <memset+0xa>
 800e650:	4770      	bx	lr
 800e652:	f803 1b01 	strb.w	r1, [r3], #1
 800e656:	e7f9      	b.n	800e64c <memset+0x4>

0800e658 <__errno>:
 800e658:	4b01      	ldr	r3, [pc, #4]	@ (800e660 <__errno+0x8>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	2000005c 	.word	0x2000005c

0800e664 <__libc_init_array>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4d0d      	ldr	r5, [pc, #52]	@ (800e69c <__libc_init_array+0x38>)
 800e668:	4c0d      	ldr	r4, [pc, #52]	@ (800e6a0 <__libc_init_array+0x3c>)
 800e66a:	1b64      	subs	r4, r4, r5
 800e66c:	10a4      	asrs	r4, r4, #2
 800e66e:	2600      	movs	r6, #0
 800e670:	42a6      	cmp	r6, r4
 800e672:	d109      	bne.n	800e688 <__libc_init_array+0x24>
 800e674:	4d0b      	ldr	r5, [pc, #44]	@ (800e6a4 <__libc_init_array+0x40>)
 800e676:	4c0c      	ldr	r4, [pc, #48]	@ (800e6a8 <__libc_init_array+0x44>)
 800e678:	f001 fb2c 	bl	800fcd4 <_init>
 800e67c:	1b64      	subs	r4, r4, r5
 800e67e:	10a4      	asrs	r4, r4, #2
 800e680:	2600      	movs	r6, #0
 800e682:	42a6      	cmp	r6, r4
 800e684:	d105      	bne.n	800e692 <__libc_init_array+0x2e>
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	f855 3b04 	ldr.w	r3, [r5], #4
 800e68c:	4798      	blx	r3
 800e68e:	3601      	adds	r6, #1
 800e690:	e7ee      	b.n	800e670 <__libc_init_array+0xc>
 800e692:	f855 3b04 	ldr.w	r3, [r5], #4
 800e696:	4798      	blx	r3
 800e698:	3601      	adds	r6, #1
 800e69a:	e7f2      	b.n	800e682 <__libc_init_array+0x1e>
 800e69c:	0801042c 	.word	0x0801042c
 800e6a0:	0801042c 	.word	0x0801042c
 800e6a4:	0801042c 	.word	0x0801042c
 800e6a8:	08010430 	.word	0x08010430

0800e6ac <__retarget_lock_acquire_recursive>:
 800e6ac:	4770      	bx	lr

0800e6ae <__retarget_lock_release_recursive>:
 800e6ae:	4770      	bx	lr

0800e6b0 <_reclaim_reent>:
 800e6b0:	4b2d      	ldr	r3, [pc, #180]	@ (800e768 <_reclaim_reent+0xb8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4283      	cmp	r3, r0
 800e6b6:	b570      	push	{r4, r5, r6, lr}
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	d053      	beq.n	800e764 <_reclaim_reent+0xb4>
 800e6bc:	69c3      	ldr	r3, [r0, #28]
 800e6be:	b31b      	cbz	r3, 800e708 <_reclaim_reent+0x58>
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	b163      	cbz	r3, 800e6de <_reclaim_reent+0x2e>
 800e6c4:	2500      	movs	r5, #0
 800e6c6:	69e3      	ldr	r3, [r4, #28]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	5959      	ldr	r1, [r3, r5]
 800e6cc:	b9b1      	cbnz	r1, 800e6fc <_reclaim_reent+0x4c>
 800e6ce:	3504      	adds	r5, #4
 800e6d0:	2d80      	cmp	r5, #128	@ 0x80
 800e6d2:	d1f8      	bne.n	800e6c6 <_reclaim_reent+0x16>
 800e6d4:	69e3      	ldr	r3, [r4, #28]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	68d9      	ldr	r1, [r3, #12]
 800e6da:	f000 f855 	bl	800e788 <_free_r>
 800e6de:	69e3      	ldr	r3, [r4, #28]
 800e6e0:	6819      	ldr	r1, [r3, #0]
 800e6e2:	b111      	cbz	r1, 800e6ea <_reclaim_reent+0x3a>
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f000 f84f 	bl	800e788 <_free_r>
 800e6ea:	69e3      	ldr	r3, [r4, #28]
 800e6ec:	689d      	ldr	r5, [r3, #8]
 800e6ee:	b15d      	cbz	r5, 800e708 <_reclaim_reent+0x58>
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	682d      	ldr	r5, [r5, #0]
 800e6f6:	f000 f847 	bl	800e788 <_free_r>
 800e6fa:	e7f8      	b.n	800e6ee <_reclaim_reent+0x3e>
 800e6fc:	680e      	ldr	r6, [r1, #0]
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 f842 	bl	800e788 <_free_r>
 800e704:	4631      	mov	r1, r6
 800e706:	e7e1      	b.n	800e6cc <_reclaim_reent+0x1c>
 800e708:	6961      	ldr	r1, [r4, #20]
 800e70a:	b111      	cbz	r1, 800e712 <_reclaim_reent+0x62>
 800e70c:	4620      	mov	r0, r4
 800e70e:	f000 f83b 	bl	800e788 <_free_r>
 800e712:	69e1      	ldr	r1, [r4, #28]
 800e714:	b111      	cbz	r1, 800e71c <_reclaim_reent+0x6c>
 800e716:	4620      	mov	r0, r4
 800e718:	f000 f836 	bl	800e788 <_free_r>
 800e71c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e71e:	b111      	cbz	r1, 800e726 <_reclaim_reent+0x76>
 800e720:	4620      	mov	r0, r4
 800e722:	f000 f831 	bl	800e788 <_free_r>
 800e726:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e728:	b111      	cbz	r1, 800e730 <_reclaim_reent+0x80>
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 f82c 	bl	800e788 <_free_r>
 800e730:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e732:	b111      	cbz	r1, 800e73a <_reclaim_reent+0x8a>
 800e734:	4620      	mov	r0, r4
 800e736:	f000 f827 	bl	800e788 <_free_r>
 800e73a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e73c:	b111      	cbz	r1, 800e744 <_reclaim_reent+0x94>
 800e73e:	4620      	mov	r0, r4
 800e740:	f000 f822 	bl	800e788 <_free_r>
 800e744:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e746:	b111      	cbz	r1, 800e74e <_reclaim_reent+0x9e>
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 f81d 	bl	800e788 <_free_r>
 800e74e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e750:	b111      	cbz	r1, 800e758 <_reclaim_reent+0xa8>
 800e752:	4620      	mov	r0, r4
 800e754:	f000 f818 	bl	800e788 <_free_r>
 800e758:	6a23      	ldr	r3, [r4, #32]
 800e75a:	b11b      	cbz	r3, 800e764 <_reclaim_reent+0xb4>
 800e75c:	4620      	mov	r0, r4
 800e75e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e762:	4718      	bx	r3
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	bf00      	nop
 800e768:	2000005c 	.word	0x2000005c

0800e76c <memcpy>:
 800e76c:	440a      	add	r2, r1
 800e76e:	4291      	cmp	r1, r2
 800e770:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e774:	d100      	bne.n	800e778 <memcpy+0xc>
 800e776:	4770      	bx	lr
 800e778:	b510      	push	{r4, lr}
 800e77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e782:	4291      	cmp	r1, r2
 800e784:	d1f9      	bne.n	800e77a <memcpy+0xe>
 800e786:	bd10      	pop	{r4, pc}

0800e788 <_free_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4605      	mov	r5, r0
 800e78c:	2900      	cmp	r1, #0
 800e78e:	d041      	beq.n	800e814 <_free_r+0x8c>
 800e790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e794:	1f0c      	subs	r4, r1, #4
 800e796:	2b00      	cmp	r3, #0
 800e798:	bfb8      	it	lt
 800e79a:	18e4      	addlt	r4, r4, r3
 800e79c:	f000 fbc4 	bl	800ef28 <__malloc_lock>
 800e7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e818 <_free_r+0x90>)
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	b933      	cbnz	r3, 800e7b4 <_free_r+0x2c>
 800e7a6:	6063      	str	r3, [r4, #4]
 800e7a8:	6014      	str	r4, [r2, #0]
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7b0:	f000 bbc0 	b.w	800ef34 <__malloc_unlock>
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d908      	bls.n	800e7ca <_free_r+0x42>
 800e7b8:	6820      	ldr	r0, [r4, #0]
 800e7ba:	1821      	adds	r1, r4, r0
 800e7bc:	428b      	cmp	r3, r1
 800e7be:	bf01      	itttt	eq
 800e7c0:	6819      	ldreq	r1, [r3, #0]
 800e7c2:	685b      	ldreq	r3, [r3, #4]
 800e7c4:	1809      	addeq	r1, r1, r0
 800e7c6:	6021      	streq	r1, [r4, #0]
 800e7c8:	e7ed      	b.n	800e7a6 <_free_r+0x1e>
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	b10b      	cbz	r3, 800e7d4 <_free_r+0x4c>
 800e7d0:	42a3      	cmp	r3, r4
 800e7d2:	d9fa      	bls.n	800e7ca <_free_r+0x42>
 800e7d4:	6811      	ldr	r1, [r2, #0]
 800e7d6:	1850      	adds	r0, r2, r1
 800e7d8:	42a0      	cmp	r0, r4
 800e7da:	d10b      	bne.n	800e7f4 <_free_r+0x6c>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	4401      	add	r1, r0
 800e7e0:	1850      	adds	r0, r2, r1
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	6011      	str	r1, [r2, #0]
 800e7e6:	d1e0      	bne.n	800e7aa <_free_r+0x22>
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	6053      	str	r3, [r2, #4]
 800e7ee:	4408      	add	r0, r1
 800e7f0:	6010      	str	r0, [r2, #0]
 800e7f2:	e7da      	b.n	800e7aa <_free_r+0x22>
 800e7f4:	d902      	bls.n	800e7fc <_free_r+0x74>
 800e7f6:	230c      	movs	r3, #12
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	e7d6      	b.n	800e7aa <_free_r+0x22>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	1821      	adds	r1, r4, r0
 800e800:	428b      	cmp	r3, r1
 800e802:	bf04      	itt	eq
 800e804:	6819      	ldreq	r1, [r3, #0]
 800e806:	685b      	ldreq	r3, [r3, #4]
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	bf04      	itt	eq
 800e80c:	1809      	addeq	r1, r1, r0
 800e80e:	6021      	streq	r1, [r4, #0]
 800e810:	6054      	str	r4, [r2, #4]
 800e812:	e7ca      	b.n	800e7aa <_free_r+0x22>
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	200059a4 	.word	0x200059a4

0800e81c <__ssputs_r>:
 800e81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e820:	688e      	ldr	r6, [r1, #8]
 800e822:	461f      	mov	r7, r3
 800e824:	42be      	cmp	r6, r7
 800e826:	680b      	ldr	r3, [r1, #0]
 800e828:	4682      	mov	sl, r0
 800e82a:	460c      	mov	r4, r1
 800e82c:	4690      	mov	r8, r2
 800e82e:	d82d      	bhi.n	800e88c <__ssputs_r+0x70>
 800e830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e834:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e838:	d026      	beq.n	800e888 <__ssputs_r+0x6c>
 800e83a:	6965      	ldr	r5, [r4, #20]
 800e83c:	6909      	ldr	r1, [r1, #16]
 800e83e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e842:	eba3 0901 	sub.w	r9, r3, r1
 800e846:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e84a:	1c7b      	adds	r3, r7, #1
 800e84c:	444b      	add	r3, r9
 800e84e:	106d      	asrs	r5, r5, #1
 800e850:	429d      	cmp	r5, r3
 800e852:	bf38      	it	cc
 800e854:	461d      	movcc	r5, r3
 800e856:	0553      	lsls	r3, r2, #21
 800e858:	d527      	bpl.n	800e8aa <__ssputs_r+0x8e>
 800e85a:	4629      	mov	r1, r5
 800e85c:	f000 f958 	bl	800eb10 <_malloc_r>
 800e860:	4606      	mov	r6, r0
 800e862:	b360      	cbz	r0, 800e8be <__ssputs_r+0xa2>
 800e864:	6921      	ldr	r1, [r4, #16]
 800e866:	464a      	mov	r2, r9
 800e868:	f7ff ff80 	bl	800e76c <memcpy>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	6126      	str	r6, [r4, #16]
 800e87a:	6165      	str	r5, [r4, #20]
 800e87c:	444e      	add	r6, r9
 800e87e:	eba5 0509 	sub.w	r5, r5, r9
 800e882:	6026      	str	r6, [r4, #0]
 800e884:	60a5      	str	r5, [r4, #8]
 800e886:	463e      	mov	r6, r7
 800e888:	42be      	cmp	r6, r7
 800e88a:	d900      	bls.n	800e88e <__ssputs_r+0x72>
 800e88c:	463e      	mov	r6, r7
 800e88e:	6820      	ldr	r0, [r4, #0]
 800e890:	4632      	mov	r2, r6
 800e892:	4641      	mov	r1, r8
 800e894:	f000 fb82 	bl	800ef9c <memmove>
 800e898:	68a3      	ldr	r3, [r4, #8]
 800e89a:	1b9b      	subs	r3, r3, r6
 800e89c:	60a3      	str	r3, [r4, #8]
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	4433      	add	r3, r6
 800e8a2:	6023      	str	r3, [r4, #0]
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8aa:	462a      	mov	r2, r5
 800e8ac:	f000 fb48 	bl	800ef40 <_realloc_r>
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d1e0      	bne.n	800e878 <__ssputs_r+0x5c>
 800e8b6:	6921      	ldr	r1, [r4, #16]
 800e8b8:	4650      	mov	r0, sl
 800e8ba:	f7ff ff65 	bl	800e788 <_free_r>
 800e8be:	230c      	movs	r3, #12
 800e8c0:	f8ca 3000 	str.w	r3, [sl]
 800e8c4:	89a3      	ldrh	r3, [r4, #12]
 800e8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8ca:	81a3      	strh	r3, [r4, #12]
 800e8cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8d0:	e7e9      	b.n	800e8a6 <__ssputs_r+0x8a>
	...

0800e8d4 <_svfiprintf_r>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	4698      	mov	r8, r3
 800e8da:	898b      	ldrh	r3, [r1, #12]
 800e8dc:	061b      	lsls	r3, r3, #24
 800e8de:	b09d      	sub	sp, #116	@ 0x74
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	4614      	mov	r4, r2
 800e8e6:	d510      	bpl.n	800e90a <_svfiprintf_r+0x36>
 800e8e8:	690b      	ldr	r3, [r1, #16]
 800e8ea:	b973      	cbnz	r3, 800e90a <_svfiprintf_r+0x36>
 800e8ec:	2140      	movs	r1, #64	@ 0x40
 800e8ee:	f000 f90f 	bl	800eb10 <_malloc_r>
 800e8f2:	6028      	str	r0, [r5, #0]
 800e8f4:	6128      	str	r0, [r5, #16]
 800e8f6:	b930      	cbnz	r0, 800e906 <_svfiprintf_r+0x32>
 800e8f8:	230c      	movs	r3, #12
 800e8fa:	603b      	str	r3, [r7, #0]
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e900:	b01d      	add	sp, #116	@ 0x74
 800e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e906:	2340      	movs	r3, #64	@ 0x40
 800e908:	616b      	str	r3, [r5, #20]
 800e90a:	2300      	movs	r3, #0
 800e90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e90e:	2320      	movs	r3, #32
 800e910:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e914:	f8cd 800c 	str.w	r8, [sp, #12]
 800e918:	2330      	movs	r3, #48	@ 0x30
 800e91a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eab8 <_svfiprintf_r+0x1e4>
 800e91e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e922:	f04f 0901 	mov.w	r9, #1
 800e926:	4623      	mov	r3, r4
 800e928:	469a      	mov	sl, r3
 800e92a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e92e:	b10a      	cbz	r2, 800e934 <_svfiprintf_r+0x60>
 800e930:	2a25      	cmp	r2, #37	@ 0x25
 800e932:	d1f9      	bne.n	800e928 <_svfiprintf_r+0x54>
 800e934:	ebba 0b04 	subs.w	fp, sl, r4
 800e938:	d00b      	beq.n	800e952 <_svfiprintf_r+0x7e>
 800e93a:	465b      	mov	r3, fp
 800e93c:	4622      	mov	r2, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	4638      	mov	r0, r7
 800e942:	f7ff ff6b 	bl	800e81c <__ssputs_r>
 800e946:	3001      	adds	r0, #1
 800e948:	f000 80a7 	beq.w	800ea9a <_svfiprintf_r+0x1c6>
 800e94c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e94e:	445a      	add	r2, fp
 800e950:	9209      	str	r2, [sp, #36]	@ 0x24
 800e952:	f89a 3000 	ldrb.w	r3, [sl]
 800e956:	2b00      	cmp	r3, #0
 800e958:	f000 809f 	beq.w	800ea9a <_svfiprintf_r+0x1c6>
 800e95c:	2300      	movs	r3, #0
 800e95e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e966:	f10a 0a01 	add.w	sl, sl, #1
 800e96a:	9304      	str	r3, [sp, #16]
 800e96c:	9307      	str	r3, [sp, #28]
 800e96e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e972:	931a      	str	r3, [sp, #104]	@ 0x68
 800e974:	4654      	mov	r4, sl
 800e976:	2205      	movs	r2, #5
 800e978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e97c:	484e      	ldr	r0, [pc, #312]	@ (800eab8 <_svfiprintf_r+0x1e4>)
 800e97e:	f7f1 fc2f 	bl	80001e0 <memchr>
 800e982:	9a04      	ldr	r2, [sp, #16]
 800e984:	b9d8      	cbnz	r0, 800e9be <_svfiprintf_r+0xea>
 800e986:	06d0      	lsls	r0, r2, #27
 800e988:	bf44      	itt	mi
 800e98a:	2320      	movmi	r3, #32
 800e98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e990:	0711      	lsls	r1, r2, #28
 800e992:	bf44      	itt	mi
 800e994:	232b      	movmi	r3, #43	@ 0x2b
 800e996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e99a:	f89a 3000 	ldrb.w	r3, [sl]
 800e99e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9a0:	d015      	beq.n	800e9ce <_svfiprintf_r+0xfa>
 800e9a2:	9a07      	ldr	r2, [sp, #28]
 800e9a4:	4654      	mov	r4, sl
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	f04f 0c0a 	mov.w	ip, #10
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9b2:	3b30      	subs	r3, #48	@ 0x30
 800e9b4:	2b09      	cmp	r3, #9
 800e9b6:	d94b      	bls.n	800ea50 <_svfiprintf_r+0x17c>
 800e9b8:	b1b0      	cbz	r0, 800e9e8 <_svfiprintf_r+0x114>
 800e9ba:	9207      	str	r2, [sp, #28]
 800e9bc:	e014      	b.n	800e9e8 <_svfiprintf_r+0x114>
 800e9be:	eba0 0308 	sub.w	r3, r0, r8
 800e9c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	9304      	str	r3, [sp, #16]
 800e9ca:	46a2      	mov	sl, r4
 800e9cc:	e7d2      	b.n	800e974 <_svfiprintf_r+0xa0>
 800e9ce:	9b03      	ldr	r3, [sp, #12]
 800e9d0:	1d19      	adds	r1, r3, #4
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	9103      	str	r1, [sp, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	bfbb      	ittet	lt
 800e9da:	425b      	neglt	r3, r3
 800e9dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e9e0:	9307      	strge	r3, [sp, #28]
 800e9e2:	9307      	strlt	r3, [sp, #28]
 800e9e4:	bfb8      	it	lt
 800e9e6:	9204      	strlt	r2, [sp, #16]
 800e9e8:	7823      	ldrb	r3, [r4, #0]
 800e9ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9ec:	d10a      	bne.n	800ea04 <_svfiprintf_r+0x130>
 800e9ee:	7863      	ldrb	r3, [r4, #1]
 800e9f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9f2:	d132      	bne.n	800ea5a <_svfiprintf_r+0x186>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	1d1a      	adds	r2, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	9203      	str	r2, [sp, #12]
 800e9fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea00:	3402      	adds	r4, #2
 800ea02:	9305      	str	r3, [sp, #20]
 800ea04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eac8 <_svfiprintf_r+0x1f4>
 800ea08:	7821      	ldrb	r1, [r4, #0]
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	4650      	mov	r0, sl
 800ea0e:	f7f1 fbe7 	bl	80001e0 <memchr>
 800ea12:	b138      	cbz	r0, 800ea24 <_svfiprintf_r+0x150>
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	eba0 000a 	sub.w	r0, r0, sl
 800ea1a:	2240      	movs	r2, #64	@ 0x40
 800ea1c:	4082      	lsls	r2, r0
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	3401      	adds	r4, #1
 800ea22:	9304      	str	r3, [sp, #16]
 800ea24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea28:	4824      	ldr	r0, [pc, #144]	@ (800eabc <_svfiprintf_r+0x1e8>)
 800ea2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea2e:	2206      	movs	r2, #6
 800ea30:	f7f1 fbd6 	bl	80001e0 <memchr>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d036      	beq.n	800eaa6 <_svfiprintf_r+0x1d2>
 800ea38:	4b21      	ldr	r3, [pc, #132]	@ (800eac0 <_svfiprintf_r+0x1ec>)
 800ea3a:	bb1b      	cbnz	r3, 800ea84 <_svfiprintf_r+0x1b0>
 800ea3c:	9b03      	ldr	r3, [sp, #12]
 800ea3e:	3307      	adds	r3, #7
 800ea40:	f023 0307 	bic.w	r3, r3, #7
 800ea44:	3308      	adds	r3, #8
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea4a:	4433      	add	r3, r6
 800ea4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea4e:	e76a      	b.n	800e926 <_svfiprintf_r+0x52>
 800ea50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea54:	460c      	mov	r4, r1
 800ea56:	2001      	movs	r0, #1
 800ea58:	e7a8      	b.n	800e9ac <_svfiprintf_r+0xd8>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	3401      	adds	r4, #1
 800ea5e:	9305      	str	r3, [sp, #20]
 800ea60:	4619      	mov	r1, r3
 800ea62:	f04f 0c0a 	mov.w	ip, #10
 800ea66:	4620      	mov	r0, r4
 800ea68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea6c:	3a30      	subs	r2, #48	@ 0x30
 800ea6e:	2a09      	cmp	r2, #9
 800ea70:	d903      	bls.n	800ea7a <_svfiprintf_r+0x1a6>
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0c6      	beq.n	800ea04 <_svfiprintf_r+0x130>
 800ea76:	9105      	str	r1, [sp, #20]
 800ea78:	e7c4      	b.n	800ea04 <_svfiprintf_r+0x130>
 800ea7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea7e:	4604      	mov	r4, r0
 800ea80:	2301      	movs	r3, #1
 800ea82:	e7f0      	b.n	800ea66 <_svfiprintf_r+0x192>
 800ea84:	ab03      	add	r3, sp, #12
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	462a      	mov	r2, r5
 800ea8a:	4b0e      	ldr	r3, [pc, #56]	@ (800eac4 <_svfiprintf_r+0x1f0>)
 800ea8c:	a904      	add	r1, sp, #16
 800ea8e:	4638      	mov	r0, r7
 800ea90:	f3af 8000 	nop.w
 800ea94:	1c42      	adds	r2, r0, #1
 800ea96:	4606      	mov	r6, r0
 800ea98:	d1d6      	bne.n	800ea48 <_svfiprintf_r+0x174>
 800ea9a:	89ab      	ldrh	r3, [r5, #12]
 800ea9c:	065b      	lsls	r3, r3, #25
 800ea9e:	f53f af2d 	bmi.w	800e8fc <_svfiprintf_r+0x28>
 800eaa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eaa4:	e72c      	b.n	800e900 <_svfiprintf_r+0x2c>
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	462a      	mov	r2, r5
 800eaac:	4b05      	ldr	r3, [pc, #20]	@ (800eac4 <_svfiprintf_r+0x1f0>)
 800eaae:	a904      	add	r1, sp, #16
 800eab0:	4638      	mov	r0, r7
 800eab2:	f000 f91b 	bl	800ecec <_printf_i>
 800eab6:	e7ed      	b.n	800ea94 <_svfiprintf_r+0x1c0>
 800eab8:	08010000 	.word	0x08010000
 800eabc:	0801000a 	.word	0x0801000a
 800eac0:	00000000 	.word	0x00000000
 800eac4:	0800e81d 	.word	0x0800e81d
 800eac8:	08010006 	.word	0x08010006

0800eacc <sbrk_aligned>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	4e0f      	ldr	r6, [pc, #60]	@ (800eb0c <sbrk_aligned+0x40>)
 800ead0:	460c      	mov	r4, r1
 800ead2:	6831      	ldr	r1, [r6, #0]
 800ead4:	4605      	mov	r5, r0
 800ead6:	b911      	cbnz	r1, 800eade <sbrk_aligned+0x12>
 800ead8:	f000 fa7a 	bl	800efd0 <_sbrk_r>
 800eadc:	6030      	str	r0, [r6, #0]
 800eade:	4621      	mov	r1, r4
 800eae0:	4628      	mov	r0, r5
 800eae2:	f000 fa75 	bl	800efd0 <_sbrk_r>
 800eae6:	1c43      	adds	r3, r0, #1
 800eae8:	d103      	bne.n	800eaf2 <sbrk_aligned+0x26>
 800eaea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800eaee:	4620      	mov	r0, r4
 800eaf0:	bd70      	pop	{r4, r5, r6, pc}
 800eaf2:	1cc4      	adds	r4, r0, #3
 800eaf4:	f024 0403 	bic.w	r4, r4, #3
 800eaf8:	42a0      	cmp	r0, r4
 800eafa:	d0f8      	beq.n	800eaee <sbrk_aligned+0x22>
 800eafc:	1a21      	subs	r1, r4, r0
 800eafe:	4628      	mov	r0, r5
 800eb00:	f000 fa66 	bl	800efd0 <_sbrk_r>
 800eb04:	3001      	adds	r0, #1
 800eb06:	d1f2      	bne.n	800eaee <sbrk_aligned+0x22>
 800eb08:	e7ef      	b.n	800eaea <sbrk_aligned+0x1e>
 800eb0a:	bf00      	nop
 800eb0c:	200059a0 	.word	0x200059a0

0800eb10 <_malloc_r>:
 800eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb14:	1ccd      	adds	r5, r1, #3
 800eb16:	f025 0503 	bic.w	r5, r5, #3
 800eb1a:	3508      	adds	r5, #8
 800eb1c:	2d0c      	cmp	r5, #12
 800eb1e:	bf38      	it	cc
 800eb20:	250c      	movcc	r5, #12
 800eb22:	2d00      	cmp	r5, #0
 800eb24:	4606      	mov	r6, r0
 800eb26:	db01      	blt.n	800eb2c <_malloc_r+0x1c>
 800eb28:	42a9      	cmp	r1, r5
 800eb2a:	d904      	bls.n	800eb36 <_malloc_r+0x26>
 800eb2c:	230c      	movs	r3, #12
 800eb2e:	6033      	str	r3, [r6, #0]
 800eb30:	2000      	movs	r0, #0
 800eb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec0c <_malloc_r+0xfc>
 800eb3a:	f000 f9f5 	bl	800ef28 <__malloc_lock>
 800eb3e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb42:	461c      	mov	r4, r3
 800eb44:	bb44      	cbnz	r4, 800eb98 <_malloc_r+0x88>
 800eb46:	4629      	mov	r1, r5
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f7ff ffbf 	bl	800eacc <sbrk_aligned>
 800eb4e:	1c43      	adds	r3, r0, #1
 800eb50:	4604      	mov	r4, r0
 800eb52:	d158      	bne.n	800ec06 <_malloc_r+0xf6>
 800eb54:	f8d8 4000 	ldr.w	r4, [r8]
 800eb58:	4627      	mov	r7, r4
 800eb5a:	2f00      	cmp	r7, #0
 800eb5c:	d143      	bne.n	800ebe6 <_malloc_r+0xd6>
 800eb5e:	2c00      	cmp	r4, #0
 800eb60:	d04b      	beq.n	800ebfa <_malloc_r+0xea>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	4639      	mov	r1, r7
 800eb66:	4630      	mov	r0, r6
 800eb68:	eb04 0903 	add.w	r9, r4, r3
 800eb6c:	f000 fa30 	bl	800efd0 <_sbrk_r>
 800eb70:	4581      	cmp	r9, r0
 800eb72:	d142      	bne.n	800ebfa <_malloc_r+0xea>
 800eb74:	6821      	ldr	r1, [r4, #0]
 800eb76:	1a6d      	subs	r5, r5, r1
 800eb78:	4629      	mov	r1, r5
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f7ff ffa6 	bl	800eacc <sbrk_aligned>
 800eb80:	3001      	adds	r0, #1
 800eb82:	d03a      	beq.n	800ebfa <_malloc_r+0xea>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	442b      	add	r3, r5
 800eb88:	6023      	str	r3, [r4, #0]
 800eb8a:	f8d8 3000 	ldr.w	r3, [r8]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	bb62      	cbnz	r2, 800ebec <_malloc_r+0xdc>
 800eb92:	f8c8 7000 	str.w	r7, [r8]
 800eb96:	e00f      	b.n	800ebb8 <_malloc_r+0xa8>
 800eb98:	6822      	ldr	r2, [r4, #0]
 800eb9a:	1b52      	subs	r2, r2, r5
 800eb9c:	d420      	bmi.n	800ebe0 <_malloc_r+0xd0>
 800eb9e:	2a0b      	cmp	r2, #11
 800eba0:	d917      	bls.n	800ebd2 <_malloc_r+0xc2>
 800eba2:	1961      	adds	r1, r4, r5
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	6025      	str	r5, [r4, #0]
 800eba8:	bf18      	it	ne
 800ebaa:	6059      	strne	r1, [r3, #4]
 800ebac:	6863      	ldr	r3, [r4, #4]
 800ebae:	bf08      	it	eq
 800ebb0:	f8c8 1000 	streq.w	r1, [r8]
 800ebb4:	5162      	str	r2, [r4, r5]
 800ebb6:	604b      	str	r3, [r1, #4]
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f000 f9bb 	bl	800ef34 <__malloc_unlock>
 800ebbe:	f104 000b 	add.w	r0, r4, #11
 800ebc2:	1d23      	adds	r3, r4, #4
 800ebc4:	f020 0007 	bic.w	r0, r0, #7
 800ebc8:	1ac2      	subs	r2, r0, r3
 800ebca:	bf1c      	itt	ne
 800ebcc:	1a1b      	subne	r3, r3, r0
 800ebce:	50a3      	strne	r3, [r4, r2]
 800ebd0:	e7af      	b.n	800eb32 <_malloc_r+0x22>
 800ebd2:	6862      	ldr	r2, [r4, #4]
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	bf0c      	ite	eq
 800ebd8:	f8c8 2000 	streq.w	r2, [r8]
 800ebdc:	605a      	strne	r2, [r3, #4]
 800ebde:	e7eb      	b.n	800ebb8 <_malloc_r+0xa8>
 800ebe0:	4623      	mov	r3, r4
 800ebe2:	6864      	ldr	r4, [r4, #4]
 800ebe4:	e7ae      	b.n	800eb44 <_malloc_r+0x34>
 800ebe6:	463c      	mov	r4, r7
 800ebe8:	687f      	ldr	r7, [r7, #4]
 800ebea:	e7b6      	b.n	800eb5a <_malloc_r+0x4a>
 800ebec:	461a      	mov	r2, r3
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	42a3      	cmp	r3, r4
 800ebf2:	d1fb      	bne.n	800ebec <_malloc_r+0xdc>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	6053      	str	r3, [r2, #4]
 800ebf8:	e7de      	b.n	800ebb8 <_malloc_r+0xa8>
 800ebfa:	230c      	movs	r3, #12
 800ebfc:	6033      	str	r3, [r6, #0]
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f000 f998 	bl	800ef34 <__malloc_unlock>
 800ec04:	e794      	b.n	800eb30 <_malloc_r+0x20>
 800ec06:	6005      	str	r5, [r0, #0]
 800ec08:	e7d6      	b.n	800ebb8 <_malloc_r+0xa8>
 800ec0a:	bf00      	nop
 800ec0c:	200059a4 	.word	0x200059a4

0800ec10 <_printf_common>:
 800ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec14:	4616      	mov	r6, r2
 800ec16:	4698      	mov	r8, r3
 800ec18:	688a      	ldr	r2, [r1, #8]
 800ec1a:	690b      	ldr	r3, [r1, #16]
 800ec1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec20:	4293      	cmp	r3, r2
 800ec22:	bfb8      	it	lt
 800ec24:	4613      	movlt	r3, r2
 800ec26:	6033      	str	r3, [r6, #0]
 800ec28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	460c      	mov	r4, r1
 800ec30:	b10a      	cbz	r2, 800ec36 <_printf_common+0x26>
 800ec32:	3301      	adds	r3, #1
 800ec34:	6033      	str	r3, [r6, #0]
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	0699      	lsls	r1, r3, #26
 800ec3a:	bf42      	ittt	mi
 800ec3c:	6833      	ldrmi	r3, [r6, #0]
 800ec3e:	3302      	addmi	r3, #2
 800ec40:	6033      	strmi	r3, [r6, #0]
 800ec42:	6825      	ldr	r5, [r4, #0]
 800ec44:	f015 0506 	ands.w	r5, r5, #6
 800ec48:	d106      	bne.n	800ec58 <_printf_common+0x48>
 800ec4a:	f104 0a19 	add.w	sl, r4, #25
 800ec4e:	68e3      	ldr	r3, [r4, #12]
 800ec50:	6832      	ldr	r2, [r6, #0]
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	42ab      	cmp	r3, r5
 800ec56:	dc26      	bgt.n	800eca6 <_printf_common+0x96>
 800ec58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec5c:	6822      	ldr	r2, [r4, #0]
 800ec5e:	3b00      	subs	r3, #0
 800ec60:	bf18      	it	ne
 800ec62:	2301      	movne	r3, #1
 800ec64:	0692      	lsls	r2, r2, #26
 800ec66:	d42b      	bmi.n	800ecc0 <_printf_common+0xb0>
 800ec68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec6c:	4641      	mov	r1, r8
 800ec6e:	4638      	mov	r0, r7
 800ec70:	47c8      	blx	r9
 800ec72:	3001      	adds	r0, #1
 800ec74:	d01e      	beq.n	800ecb4 <_printf_common+0xa4>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	6922      	ldr	r2, [r4, #16]
 800ec7a:	f003 0306 	and.w	r3, r3, #6
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	bf02      	ittt	eq
 800ec82:	68e5      	ldreq	r5, [r4, #12]
 800ec84:	6833      	ldreq	r3, [r6, #0]
 800ec86:	1aed      	subeq	r5, r5, r3
 800ec88:	68a3      	ldr	r3, [r4, #8]
 800ec8a:	bf0c      	ite	eq
 800ec8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec90:	2500      	movne	r5, #0
 800ec92:	4293      	cmp	r3, r2
 800ec94:	bfc4      	itt	gt
 800ec96:	1a9b      	subgt	r3, r3, r2
 800ec98:	18ed      	addgt	r5, r5, r3
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	341a      	adds	r4, #26
 800ec9e:	42b5      	cmp	r5, r6
 800eca0:	d11a      	bne.n	800ecd8 <_printf_common+0xc8>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e008      	b.n	800ecb8 <_printf_common+0xa8>
 800eca6:	2301      	movs	r3, #1
 800eca8:	4652      	mov	r2, sl
 800ecaa:	4641      	mov	r1, r8
 800ecac:	4638      	mov	r0, r7
 800ecae:	47c8      	blx	r9
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d103      	bne.n	800ecbc <_printf_common+0xac>
 800ecb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	e7c6      	b.n	800ec4e <_printf_common+0x3e>
 800ecc0:	18e1      	adds	r1, r4, r3
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	2030      	movs	r0, #48	@ 0x30
 800ecc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecca:	4422      	add	r2, r4
 800eccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecd4:	3302      	adds	r3, #2
 800ecd6:	e7c7      	b.n	800ec68 <_printf_common+0x58>
 800ecd8:	2301      	movs	r3, #1
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4641      	mov	r1, r8
 800ecde:	4638      	mov	r0, r7
 800ece0:	47c8      	blx	r9
 800ece2:	3001      	adds	r0, #1
 800ece4:	d0e6      	beq.n	800ecb4 <_printf_common+0xa4>
 800ece6:	3601      	adds	r6, #1
 800ece8:	e7d9      	b.n	800ec9e <_printf_common+0x8e>
	...

0800ecec <_printf_i>:
 800ecec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf0:	7e0f      	ldrb	r7, [r1, #24]
 800ecf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ecf4:	2f78      	cmp	r7, #120	@ 0x78
 800ecf6:	4691      	mov	r9, r2
 800ecf8:	4680      	mov	r8, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	469a      	mov	sl, r3
 800ecfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed02:	d807      	bhi.n	800ed14 <_printf_i+0x28>
 800ed04:	2f62      	cmp	r7, #98	@ 0x62
 800ed06:	d80a      	bhi.n	800ed1e <_printf_i+0x32>
 800ed08:	2f00      	cmp	r7, #0
 800ed0a:	f000 80d1 	beq.w	800eeb0 <_printf_i+0x1c4>
 800ed0e:	2f58      	cmp	r7, #88	@ 0x58
 800ed10:	f000 80b8 	beq.w	800ee84 <_printf_i+0x198>
 800ed14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed1c:	e03a      	b.n	800ed94 <_printf_i+0xa8>
 800ed1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed22:	2b15      	cmp	r3, #21
 800ed24:	d8f6      	bhi.n	800ed14 <_printf_i+0x28>
 800ed26:	a101      	add	r1, pc, #4	@ (adr r1, 800ed2c <_printf_i+0x40>)
 800ed28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed2c:	0800ed85 	.word	0x0800ed85
 800ed30:	0800ed99 	.word	0x0800ed99
 800ed34:	0800ed15 	.word	0x0800ed15
 800ed38:	0800ed15 	.word	0x0800ed15
 800ed3c:	0800ed15 	.word	0x0800ed15
 800ed40:	0800ed15 	.word	0x0800ed15
 800ed44:	0800ed99 	.word	0x0800ed99
 800ed48:	0800ed15 	.word	0x0800ed15
 800ed4c:	0800ed15 	.word	0x0800ed15
 800ed50:	0800ed15 	.word	0x0800ed15
 800ed54:	0800ed15 	.word	0x0800ed15
 800ed58:	0800ee97 	.word	0x0800ee97
 800ed5c:	0800edc3 	.word	0x0800edc3
 800ed60:	0800ee51 	.word	0x0800ee51
 800ed64:	0800ed15 	.word	0x0800ed15
 800ed68:	0800ed15 	.word	0x0800ed15
 800ed6c:	0800eeb9 	.word	0x0800eeb9
 800ed70:	0800ed15 	.word	0x0800ed15
 800ed74:	0800edc3 	.word	0x0800edc3
 800ed78:	0800ed15 	.word	0x0800ed15
 800ed7c:	0800ed15 	.word	0x0800ed15
 800ed80:	0800ee59 	.word	0x0800ee59
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	1d1a      	adds	r2, r3, #4
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6032      	str	r2, [r6, #0]
 800ed8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed94:	2301      	movs	r3, #1
 800ed96:	e09c      	b.n	800eed2 <_printf_i+0x1e6>
 800ed98:	6833      	ldr	r3, [r6, #0]
 800ed9a:	6820      	ldr	r0, [r4, #0]
 800ed9c:	1d19      	adds	r1, r3, #4
 800ed9e:	6031      	str	r1, [r6, #0]
 800eda0:	0606      	lsls	r6, r0, #24
 800eda2:	d501      	bpl.n	800eda8 <_printf_i+0xbc>
 800eda4:	681d      	ldr	r5, [r3, #0]
 800eda6:	e003      	b.n	800edb0 <_printf_i+0xc4>
 800eda8:	0645      	lsls	r5, r0, #25
 800edaa:	d5fb      	bpl.n	800eda4 <_printf_i+0xb8>
 800edac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	da03      	bge.n	800edbc <_printf_i+0xd0>
 800edb4:	232d      	movs	r3, #45	@ 0x2d
 800edb6:	426d      	negs	r5, r5
 800edb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edbc:	4858      	ldr	r0, [pc, #352]	@ (800ef20 <_printf_i+0x234>)
 800edbe:	230a      	movs	r3, #10
 800edc0:	e011      	b.n	800ede6 <_printf_i+0xfa>
 800edc2:	6821      	ldr	r1, [r4, #0]
 800edc4:	6833      	ldr	r3, [r6, #0]
 800edc6:	0608      	lsls	r0, r1, #24
 800edc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800edcc:	d402      	bmi.n	800edd4 <_printf_i+0xe8>
 800edce:	0649      	lsls	r1, r1, #25
 800edd0:	bf48      	it	mi
 800edd2:	b2ad      	uxthmi	r5, r5
 800edd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800edd6:	4852      	ldr	r0, [pc, #328]	@ (800ef20 <_printf_i+0x234>)
 800edd8:	6033      	str	r3, [r6, #0]
 800edda:	bf14      	ite	ne
 800eddc:	230a      	movne	r3, #10
 800edde:	2308      	moveq	r3, #8
 800ede0:	2100      	movs	r1, #0
 800ede2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ede6:	6866      	ldr	r6, [r4, #4]
 800ede8:	60a6      	str	r6, [r4, #8]
 800edea:	2e00      	cmp	r6, #0
 800edec:	db05      	blt.n	800edfa <_printf_i+0x10e>
 800edee:	6821      	ldr	r1, [r4, #0]
 800edf0:	432e      	orrs	r6, r5
 800edf2:	f021 0104 	bic.w	r1, r1, #4
 800edf6:	6021      	str	r1, [r4, #0]
 800edf8:	d04b      	beq.n	800ee92 <_printf_i+0x1a6>
 800edfa:	4616      	mov	r6, r2
 800edfc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee00:	fb03 5711 	mls	r7, r3, r1, r5
 800ee04:	5dc7      	ldrb	r7, [r0, r7]
 800ee06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee0a:	462f      	mov	r7, r5
 800ee0c:	42bb      	cmp	r3, r7
 800ee0e:	460d      	mov	r5, r1
 800ee10:	d9f4      	bls.n	800edfc <_printf_i+0x110>
 800ee12:	2b08      	cmp	r3, #8
 800ee14:	d10b      	bne.n	800ee2e <_printf_i+0x142>
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	07df      	lsls	r7, r3, #31
 800ee1a:	d508      	bpl.n	800ee2e <_printf_i+0x142>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	6861      	ldr	r1, [r4, #4]
 800ee20:	4299      	cmp	r1, r3
 800ee22:	bfde      	ittt	le
 800ee24:	2330      	movle	r3, #48	@ 0x30
 800ee26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ee2e:	1b92      	subs	r2, r2, r6
 800ee30:	6122      	str	r2, [r4, #16]
 800ee32:	f8cd a000 	str.w	sl, [sp]
 800ee36:	464b      	mov	r3, r9
 800ee38:	aa03      	add	r2, sp, #12
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	f7ff fee7 	bl	800ec10 <_printf_common>
 800ee42:	3001      	adds	r0, #1
 800ee44:	d14a      	bne.n	800eedc <_printf_i+0x1f0>
 800ee46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee4a:	b004      	add	sp, #16
 800ee4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee50:	6823      	ldr	r3, [r4, #0]
 800ee52:	f043 0320 	orr.w	r3, r3, #32
 800ee56:	6023      	str	r3, [r4, #0]
 800ee58:	4832      	ldr	r0, [pc, #200]	@ (800ef24 <_printf_i+0x238>)
 800ee5a:	2778      	movs	r7, #120	@ 0x78
 800ee5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	6831      	ldr	r1, [r6, #0]
 800ee64:	061f      	lsls	r7, r3, #24
 800ee66:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee6a:	d402      	bmi.n	800ee72 <_printf_i+0x186>
 800ee6c:	065f      	lsls	r7, r3, #25
 800ee6e:	bf48      	it	mi
 800ee70:	b2ad      	uxthmi	r5, r5
 800ee72:	6031      	str	r1, [r6, #0]
 800ee74:	07d9      	lsls	r1, r3, #31
 800ee76:	bf44      	itt	mi
 800ee78:	f043 0320 	orrmi.w	r3, r3, #32
 800ee7c:	6023      	strmi	r3, [r4, #0]
 800ee7e:	b11d      	cbz	r5, 800ee88 <_printf_i+0x19c>
 800ee80:	2310      	movs	r3, #16
 800ee82:	e7ad      	b.n	800ede0 <_printf_i+0xf4>
 800ee84:	4826      	ldr	r0, [pc, #152]	@ (800ef20 <_printf_i+0x234>)
 800ee86:	e7e9      	b.n	800ee5c <_printf_i+0x170>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	f023 0320 	bic.w	r3, r3, #32
 800ee8e:	6023      	str	r3, [r4, #0]
 800ee90:	e7f6      	b.n	800ee80 <_printf_i+0x194>
 800ee92:	4616      	mov	r6, r2
 800ee94:	e7bd      	b.n	800ee12 <_printf_i+0x126>
 800ee96:	6833      	ldr	r3, [r6, #0]
 800ee98:	6825      	ldr	r5, [r4, #0]
 800ee9a:	6961      	ldr	r1, [r4, #20]
 800ee9c:	1d18      	adds	r0, r3, #4
 800ee9e:	6030      	str	r0, [r6, #0]
 800eea0:	062e      	lsls	r6, r5, #24
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	d501      	bpl.n	800eeaa <_printf_i+0x1be>
 800eea6:	6019      	str	r1, [r3, #0]
 800eea8:	e002      	b.n	800eeb0 <_printf_i+0x1c4>
 800eeaa:	0668      	lsls	r0, r5, #25
 800eeac:	d5fb      	bpl.n	800eea6 <_printf_i+0x1ba>
 800eeae:	8019      	strh	r1, [r3, #0]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	6123      	str	r3, [r4, #16]
 800eeb4:	4616      	mov	r6, r2
 800eeb6:	e7bc      	b.n	800ee32 <_printf_i+0x146>
 800eeb8:	6833      	ldr	r3, [r6, #0]
 800eeba:	1d1a      	adds	r2, r3, #4
 800eebc:	6032      	str	r2, [r6, #0]
 800eebe:	681e      	ldr	r6, [r3, #0]
 800eec0:	6862      	ldr	r2, [r4, #4]
 800eec2:	2100      	movs	r1, #0
 800eec4:	4630      	mov	r0, r6
 800eec6:	f7f1 f98b 	bl	80001e0 <memchr>
 800eeca:	b108      	cbz	r0, 800eed0 <_printf_i+0x1e4>
 800eecc:	1b80      	subs	r0, r0, r6
 800eece:	6060      	str	r0, [r4, #4]
 800eed0:	6863      	ldr	r3, [r4, #4]
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	2300      	movs	r3, #0
 800eed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeda:	e7aa      	b.n	800ee32 <_printf_i+0x146>
 800eedc:	6923      	ldr	r3, [r4, #16]
 800eede:	4632      	mov	r2, r6
 800eee0:	4649      	mov	r1, r9
 800eee2:	4640      	mov	r0, r8
 800eee4:	47d0      	blx	sl
 800eee6:	3001      	adds	r0, #1
 800eee8:	d0ad      	beq.n	800ee46 <_printf_i+0x15a>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	079b      	lsls	r3, r3, #30
 800eeee:	d413      	bmi.n	800ef18 <_printf_i+0x22c>
 800eef0:	68e0      	ldr	r0, [r4, #12]
 800eef2:	9b03      	ldr	r3, [sp, #12]
 800eef4:	4298      	cmp	r0, r3
 800eef6:	bfb8      	it	lt
 800eef8:	4618      	movlt	r0, r3
 800eefa:	e7a6      	b.n	800ee4a <_printf_i+0x15e>
 800eefc:	2301      	movs	r3, #1
 800eefe:	4632      	mov	r2, r6
 800ef00:	4649      	mov	r1, r9
 800ef02:	4640      	mov	r0, r8
 800ef04:	47d0      	blx	sl
 800ef06:	3001      	adds	r0, #1
 800ef08:	d09d      	beq.n	800ee46 <_printf_i+0x15a>
 800ef0a:	3501      	adds	r5, #1
 800ef0c:	68e3      	ldr	r3, [r4, #12]
 800ef0e:	9903      	ldr	r1, [sp, #12]
 800ef10:	1a5b      	subs	r3, r3, r1
 800ef12:	42ab      	cmp	r3, r5
 800ef14:	dcf2      	bgt.n	800eefc <_printf_i+0x210>
 800ef16:	e7eb      	b.n	800eef0 <_printf_i+0x204>
 800ef18:	2500      	movs	r5, #0
 800ef1a:	f104 0619 	add.w	r6, r4, #25
 800ef1e:	e7f5      	b.n	800ef0c <_printf_i+0x220>
 800ef20:	08010011 	.word	0x08010011
 800ef24:	08010022 	.word	0x08010022

0800ef28 <__malloc_lock>:
 800ef28:	4801      	ldr	r0, [pc, #4]	@ (800ef30 <__malloc_lock+0x8>)
 800ef2a:	f7ff bbbf 	b.w	800e6ac <__retarget_lock_acquire_recursive>
 800ef2e:	bf00      	nop
 800ef30:	20005998 	.word	0x20005998

0800ef34 <__malloc_unlock>:
 800ef34:	4801      	ldr	r0, [pc, #4]	@ (800ef3c <__malloc_unlock+0x8>)
 800ef36:	f7ff bbba 	b.w	800e6ae <__retarget_lock_release_recursive>
 800ef3a:	bf00      	nop
 800ef3c:	20005998 	.word	0x20005998

0800ef40 <_realloc_r>:
 800ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef44:	4607      	mov	r7, r0
 800ef46:	4614      	mov	r4, r2
 800ef48:	460d      	mov	r5, r1
 800ef4a:	b921      	cbnz	r1, 800ef56 <_realloc_r+0x16>
 800ef4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef50:	4611      	mov	r1, r2
 800ef52:	f7ff bddd 	b.w	800eb10 <_malloc_r>
 800ef56:	b92a      	cbnz	r2, 800ef64 <_realloc_r+0x24>
 800ef58:	f7ff fc16 	bl	800e788 <_free_r>
 800ef5c:	4625      	mov	r5, r4
 800ef5e:	4628      	mov	r0, r5
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef64:	f000 f844 	bl	800eff0 <_malloc_usable_size_r>
 800ef68:	4284      	cmp	r4, r0
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	d802      	bhi.n	800ef74 <_realloc_r+0x34>
 800ef6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef72:	d8f4      	bhi.n	800ef5e <_realloc_r+0x1e>
 800ef74:	4621      	mov	r1, r4
 800ef76:	4638      	mov	r0, r7
 800ef78:	f7ff fdca 	bl	800eb10 <_malloc_r>
 800ef7c:	4680      	mov	r8, r0
 800ef7e:	b908      	cbnz	r0, 800ef84 <_realloc_r+0x44>
 800ef80:	4645      	mov	r5, r8
 800ef82:	e7ec      	b.n	800ef5e <_realloc_r+0x1e>
 800ef84:	42b4      	cmp	r4, r6
 800ef86:	4622      	mov	r2, r4
 800ef88:	4629      	mov	r1, r5
 800ef8a:	bf28      	it	cs
 800ef8c:	4632      	movcs	r2, r6
 800ef8e:	f7ff fbed 	bl	800e76c <memcpy>
 800ef92:	4629      	mov	r1, r5
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff fbf7 	bl	800e788 <_free_r>
 800ef9a:	e7f1      	b.n	800ef80 <_realloc_r+0x40>

0800ef9c <memmove>:
 800ef9c:	4288      	cmp	r0, r1
 800ef9e:	b510      	push	{r4, lr}
 800efa0:	eb01 0402 	add.w	r4, r1, r2
 800efa4:	d902      	bls.n	800efac <memmove+0x10>
 800efa6:	4284      	cmp	r4, r0
 800efa8:	4623      	mov	r3, r4
 800efaa:	d807      	bhi.n	800efbc <memmove+0x20>
 800efac:	1e43      	subs	r3, r0, #1
 800efae:	42a1      	cmp	r1, r4
 800efb0:	d008      	beq.n	800efc4 <memmove+0x28>
 800efb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efba:	e7f8      	b.n	800efae <memmove+0x12>
 800efbc:	4402      	add	r2, r0
 800efbe:	4601      	mov	r1, r0
 800efc0:	428a      	cmp	r2, r1
 800efc2:	d100      	bne.n	800efc6 <memmove+0x2a>
 800efc4:	bd10      	pop	{r4, pc}
 800efc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efce:	e7f7      	b.n	800efc0 <memmove+0x24>

0800efd0 <_sbrk_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	4d06      	ldr	r5, [pc, #24]	@ (800efec <_sbrk_r+0x1c>)
 800efd4:	2300      	movs	r3, #0
 800efd6:	4604      	mov	r4, r0
 800efd8:	4608      	mov	r0, r1
 800efda:	602b      	str	r3, [r5, #0]
 800efdc:	f7f7 fc12 	bl	8006804 <_sbrk>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	d102      	bne.n	800efea <_sbrk_r+0x1a>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	b103      	cbz	r3, 800efea <_sbrk_r+0x1a>
 800efe8:	6023      	str	r3, [r4, #0]
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	2000599c 	.word	0x2000599c

0800eff0 <_malloc_usable_size_r>:
 800eff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eff4:	1f18      	subs	r0, r3, #4
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	bfbc      	itt	lt
 800effa:	580b      	ldrlt	r3, [r1, r0]
 800effc:	18c0      	addlt	r0, r0, r3
 800effe:	4770      	bx	lr

0800f000 <sqrtf>:
 800f000:	b508      	push	{r3, lr}
 800f002:	ed2d 8b02 	vpush	{d8}
 800f006:	eeb0 8a40 	vmov.f32	s16, s0
 800f00a:	f000 fa1d 	bl	800f448 <__ieee754_sqrtf>
 800f00e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f016:	d60c      	bvs.n	800f032 <sqrtf+0x32>
 800f018:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f038 <sqrtf+0x38>
 800f01c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	d505      	bpl.n	800f032 <sqrtf+0x32>
 800f026:	f7ff fb17 	bl	800e658 <__errno>
 800f02a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f02e:	2321      	movs	r3, #33	@ 0x21
 800f030:	6003      	str	r3, [r0, #0]
 800f032:	ecbd 8b02 	vpop	{d8}
 800f036:	bd08      	pop	{r3, pc}
 800f038:	00000000 	.word	0x00000000

0800f03c <atanf>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	ee10 5a10 	vmov	r5, s0
 800f042:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f046:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f04a:	eef0 7a40 	vmov.f32	s15, s0
 800f04e:	d310      	bcc.n	800f072 <atanf+0x36>
 800f050:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f054:	d904      	bls.n	800f060 <atanf+0x24>
 800f056:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f05a:	eeb0 0a67 	vmov.f32	s0, s15
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f198 <atanf+0x15c>
 800f064:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f19c <atanf+0x160>
 800f068:	2d00      	cmp	r5, #0
 800f06a:	bfc8      	it	gt
 800f06c:	eef0 7a47 	vmovgt.f32	s15, s14
 800f070:	e7f3      	b.n	800f05a <atanf+0x1e>
 800f072:	4b4b      	ldr	r3, [pc, #300]	@ (800f1a0 <atanf+0x164>)
 800f074:	429c      	cmp	r4, r3
 800f076:	d810      	bhi.n	800f09a <atanf+0x5e>
 800f078:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f07c:	d20a      	bcs.n	800f094 <atanf+0x58>
 800f07e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f1a4 <atanf+0x168>
 800f082:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f08a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f092:	dce2      	bgt.n	800f05a <atanf+0x1e>
 800f094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f098:	e013      	b.n	800f0c2 <atanf+0x86>
 800f09a:	f000 f8e7 	bl	800f26c <fabsf>
 800f09e:	4b42      	ldr	r3, [pc, #264]	@ (800f1a8 <atanf+0x16c>)
 800f0a0:	429c      	cmp	r4, r3
 800f0a2:	d84f      	bhi.n	800f144 <atanf+0x108>
 800f0a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f0a8:	429c      	cmp	r4, r3
 800f0aa:	d841      	bhi.n	800f130 <atanf+0xf4>
 800f0ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f0b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f0b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f0be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f0c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f1ac <atanf+0x170>
 800f0cc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f1b0 <atanf+0x174>
 800f0d0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f1b4 <atanf+0x178>
 800f0d4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f0d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f0dc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f1b8 <atanf+0x17c>
 800f0e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f0e4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f1bc <atanf+0x180>
 800f0e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f0ec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f1c0 <atanf+0x184>
 800f0f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f0f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f1c4 <atanf+0x188>
 800f0f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f0fc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f1c8 <atanf+0x18c>
 800f100:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f104:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f1cc <atanf+0x190>
 800f108:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f10c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f1d0 <atanf+0x194>
 800f110:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f114:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f1d4 <atanf+0x198>
 800f118:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f11c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f120:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f124:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f128:	d121      	bne.n	800f16e <atanf+0x132>
 800f12a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f12e:	e794      	b.n	800f05a <atanf+0x1e>
 800f130:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f134:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f138:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f13c:	2301      	movs	r3, #1
 800f13e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f142:	e7be      	b.n	800f0c2 <atanf+0x86>
 800f144:	4b24      	ldr	r3, [pc, #144]	@ (800f1d8 <atanf+0x19c>)
 800f146:	429c      	cmp	r4, r3
 800f148:	d80b      	bhi.n	800f162 <atanf+0x126>
 800f14a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f14e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f152:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f156:	2302      	movs	r3, #2
 800f158:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f160:	e7af      	b.n	800f0c2 <atanf+0x86>
 800f162:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f166:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f16a:	2303      	movs	r3, #3
 800f16c:	e7a9      	b.n	800f0c2 <atanf+0x86>
 800f16e:	4a1b      	ldr	r2, [pc, #108]	@ (800f1dc <atanf+0x1a0>)
 800f170:	491b      	ldr	r1, [pc, #108]	@ (800f1e0 <atanf+0x1a4>)
 800f172:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f176:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f17a:	edd3 6a00 	vldr	s13, [r3]
 800f17e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f182:	2d00      	cmp	r5, #0
 800f184:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f188:	edd2 7a00 	vldr	s15, [r2]
 800f18c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f190:	bfb8      	it	lt
 800f192:	eef1 7a67 	vneglt.f32	s15, s15
 800f196:	e760      	b.n	800f05a <atanf+0x1e>
 800f198:	bfc90fdb 	.word	0xbfc90fdb
 800f19c:	3fc90fdb 	.word	0x3fc90fdb
 800f1a0:	3edfffff 	.word	0x3edfffff
 800f1a4:	7149f2ca 	.word	0x7149f2ca
 800f1a8:	3f97ffff 	.word	0x3f97ffff
 800f1ac:	3c8569d7 	.word	0x3c8569d7
 800f1b0:	3d4bda59 	.word	0x3d4bda59
 800f1b4:	bd6ef16b 	.word	0xbd6ef16b
 800f1b8:	3d886b35 	.word	0x3d886b35
 800f1bc:	3dba2e6e 	.word	0x3dba2e6e
 800f1c0:	3e124925 	.word	0x3e124925
 800f1c4:	3eaaaaab 	.word	0x3eaaaaab
 800f1c8:	bd15a221 	.word	0xbd15a221
 800f1cc:	bd9d8795 	.word	0xbd9d8795
 800f1d0:	bde38e38 	.word	0xbde38e38
 800f1d4:	be4ccccd 	.word	0xbe4ccccd
 800f1d8:	401bffff 	.word	0x401bffff
 800f1dc:	08010044 	.word	0x08010044
 800f1e0:	08010034 	.word	0x08010034

0800f1e4 <cosf>:
 800f1e4:	ee10 3a10 	vmov	r3, s0
 800f1e8:	b507      	push	{r0, r1, r2, lr}
 800f1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f264 <cosf+0x80>)
 800f1ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d806      	bhi.n	800f202 <cosf+0x1e>
 800f1f4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f268 <cosf+0x84>
 800f1f8:	b003      	add	sp, #12
 800f1fa:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1fe:	f000 b883 	b.w	800f308 <__kernel_cosf>
 800f202:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f206:	d304      	bcc.n	800f212 <cosf+0x2e>
 800f208:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f20c:	b003      	add	sp, #12
 800f20e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f212:	4668      	mov	r0, sp
 800f214:	f000 f91c 	bl	800f450 <__ieee754_rem_pio2f>
 800f218:	f000 0003 	and.w	r0, r0, #3
 800f21c:	2801      	cmp	r0, #1
 800f21e:	d009      	beq.n	800f234 <cosf+0x50>
 800f220:	2802      	cmp	r0, #2
 800f222:	d010      	beq.n	800f246 <cosf+0x62>
 800f224:	b9b0      	cbnz	r0, 800f254 <cosf+0x70>
 800f226:	eddd 0a01 	vldr	s1, [sp, #4]
 800f22a:	ed9d 0a00 	vldr	s0, [sp]
 800f22e:	f000 f86b 	bl	800f308 <__kernel_cosf>
 800f232:	e7eb      	b.n	800f20c <cosf+0x28>
 800f234:	eddd 0a01 	vldr	s1, [sp, #4]
 800f238:	ed9d 0a00 	vldr	s0, [sp]
 800f23c:	f000 f8bc 	bl	800f3b8 <__kernel_sinf>
 800f240:	eeb1 0a40 	vneg.f32	s0, s0
 800f244:	e7e2      	b.n	800f20c <cosf+0x28>
 800f246:	eddd 0a01 	vldr	s1, [sp, #4]
 800f24a:	ed9d 0a00 	vldr	s0, [sp]
 800f24e:	f000 f85b 	bl	800f308 <__kernel_cosf>
 800f252:	e7f5      	b.n	800f240 <cosf+0x5c>
 800f254:	eddd 0a01 	vldr	s1, [sp, #4]
 800f258:	ed9d 0a00 	vldr	s0, [sp]
 800f25c:	2001      	movs	r0, #1
 800f25e:	f000 f8ab 	bl	800f3b8 <__kernel_sinf>
 800f262:	e7d3      	b.n	800f20c <cosf+0x28>
 800f264:	3f490fd8 	.word	0x3f490fd8
 800f268:	00000000 	.word	0x00000000

0800f26c <fabsf>:
 800f26c:	ee10 3a10 	vmov	r3, s0
 800f270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f274:	ee00 3a10 	vmov	s0, r3
 800f278:	4770      	bx	lr
	...

0800f27c <sinf>:
 800f27c:	ee10 3a10 	vmov	r3, s0
 800f280:	b507      	push	{r0, r1, r2, lr}
 800f282:	4a1f      	ldr	r2, [pc, #124]	@ (800f300 <sinf+0x84>)
 800f284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f288:	4293      	cmp	r3, r2
 800f28a:	d807      	bhi.n	800f29c <sinf+0x20>
 800f28c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f304 <sinf+0x88>
 800f290:	2000      	movs	r0, #0
 800f292:	b003      	add	sp, #12
 800f294:	f85d eb04 	ldr.w	lr, [sp], #4
 800f298:	f000 b88e 	b.w	800f3b8 <__kernel_sinf>
 800f29c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f2a0:	d304      	bcc.n	800f2ac <sinf+0x30>
 800f2a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f2a6:	b003      	add	sp, #12
 800f2a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2ac:	4668      	mov	r0, sp
 800f2ae:	f000 f8cf 	bl	800f450 <__ieee754_rem_pio2f>
 800f2b2:	f000 0003 	and.w	r0, r0, #3
 800f2b6:	2801      	cmp	r0, #1
 800f2b8:	d00a      	beq.n	800f2d0 <sinf+0x54>
 800f2ba:	2802      	cmp	r0, #2
 800f2bc:	d00f      	beq.n	800f2de <sinf+0x62>
 800f2be:	b9c0      	cbnz	r0, 800f2f2 <sinf+0x76>
 800f2c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2c4:	ed9d 0a00 	vldr	s0, [sp]
 800f2c8:	2001      	movs	r0, #1
 800f2ca:	f000 f875 	bl	800f3b8 <__kernel_sinf>
 800f2ce:	e7ea      	b.n	800f2a6 <sinf+0x2a>
 800f2d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2d4:	ed9d 0a00 	vldr	s0, [sp]
 800f2d8:	f000 f816 	bl	800f308 <__kernel_cosf>
 800f2dc:	e7e3      	b.n	800f2a6 <sinf+0x2a>
 800f2de:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2e2:	ed9d 0a00 	vldr	s0, [sp]
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	f000 f866 	bl	800f3b8 <__kernel_sinf>
 800f2ec:	eeb1 0a40 	vneg.f32	s0, s0
 800f2f0:	e7d9      	b.n	800f2a6 <sinf+0x2a>
 800f2f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2f6:	ed9d 0a00 	vldr	s0, [sp]
 800f2fa:	f000 f805 	bl	800f308 <__kernel_cosf>
 800f2fe:	e7f5      	b.n	800f2ec <sinf+0x70>
 800f300:	3f490fd8 	.word	0x3f490fd8
 800f304:	00000000 	.word	0x00000000

0800f308 <__kernel_cosf>:
 800f308:	ee10 3a10 	vmov	r3, s0
 800f30c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f310:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f314:	eef0 6a40 	vmov.f32	s13, s0
 800f318:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f31c:	d204      	bcs.n	800f328 <__kernel_cosf+0x20>
 800f31e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f322:	ee17 2a90 	vmov	r2, s15
 800f326:	b342      	cbz	r2, 800f37a <__kernel_cosf+0x72>
 800f328:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f32c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f398 <__kernel_cosf+0x90>
 800f330:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f39c <__kernel_cosf+0x94>
 800f334:	4a1a      	ldr	r2, [pc, #104]	@ (800f3a0 <__kernel_cosf+0x98>)
 800f336:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f33a:	4293      	cmp	r3, r2
 800f33c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f3a4 <__kernel_cosf+0x9c>
 800f340:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f344:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f3a8 <__kernel_cosf+0xa0>
 800f348:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f34c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f3ac <__kernel_cosf+0xa4>
 800f350:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f354:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f3b0 <__kernel_cosf+0xa8>
 800f358:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f35c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f360:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f364:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f368:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f370:	d804      	bhi.n	800f37c <__kernel_cosf+0x74>
 800f372:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f376:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f37a:	4770      	bx	lr
 800f37c:	4a0d      	ldr	r2, [pc, #52]	@ (800f3b4 <__kernel_cosf+0xac>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	bf9a      	itte	ls
 800f382:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f386:	ee07 3a10 	vmovls	s14, r3
 800f38a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f38e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f396:	e7ec      	b.n	800f372 <__kernel_cosf+0x6a>
 800f398:	ad47d74e 	.word	0xad47d74e
 800f39c:	310f74f6 	.word	0x310f74f6
 800f3a0:	3e999999 	.word	0x3e999999
 800f3a4:	b493f27c 	.word	0xb493f27c
 800f3a8:	37d00d01 	.word	0x37d00d01
 800f3ac:	bab60b61 	.word	0xbab60b61
 800f3b0:	3d2aaaab 	.word	0x3d2aaaab
 800f3b4:	3f480000 	.word	0x3f480000

0800f3b8 <__kernel_sinf>:
 800f3b8:	ee10 3a10 	vmov	r3, s0
 800f3bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f3c4:	d204      	bcs.n	800f3d0 <__kernel_sinf+0x18>
 800f3c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f3ca:	ee17 3a90 	vmov	r3, s15
 800f3ce:	b35b      	cbz	r3, 800f428 <__kernel_sinf+0x70>
 800f3d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f3d4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f42c <__kernel_sinf+0x74>
 800f3d8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f430 <__kernel_sinf+0x78>
 800f3dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f3e0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f434 <__kernel_sinf+0x7c>
 800f3e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3e8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f438 <__kernel_sinf+0x80>
 800f3ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f3f0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f43c <__kernel_sinf+0x84>
 800f3f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f3f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3fc:	b930      	cbnz	r0, 800f40c <__kernel_sinf+0x54>
 800f3fe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f440 <__kernel_sinf+0x88>
 800f402:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f406:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f40a:	4770      	bx	lr
 800f40c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f410:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f414:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f418:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f41c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f444 <__kernel_sinf+0x8c>
 800f420:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f424:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f430:	b2d72f34 	.word	0xb2d72f34
 800f434:	3638ef1b 	.word	0x3638ef1b
 800f438:	b9500d01 	.word	0xb9500d01
 800f43c:	3c088889 	.word	0x3c088889
 800f440:	be2aaaab 	.word	0xbe2aaaab
 800f444:	3e2aaaab 	.word	0x3e2aaaab

0800f448 <__ieee754_sqrtf>:
 800f448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f44c:	4770      	bx	lr
	...

0800f450 <__ieee754_rem_pio2f>:
 800f450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f452:	ee10 6a10 	vmov	r6, s0
 800f456:	4b88      	ldr	r3, [pc, #544]	@ (800f678 <__ieee754_rem_pio2f+0x228>)
 800f458:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f45c:	429d      	cmp	r5, r3
 800f45e:	b087      	sub	sp, #28
 800f460:	4604      	mov	r4, r0
 800f462:	d805      	bhi.n	800f470 <__ieee754_rem_pio2f+0x20>
 800f464:	2300      	movs	r3, #0
 800f466:	ed80 0a00 	vstr	s0, [r0]
 800f46a:	6043      	str	r3, [r0, #4]
 800f46c:	2000      	movs	r0, #0
 800f46e:	e022      	b.n	800f4b6 <__ieee754_rem_pio2f+0x66>
 800f470:	4b82      	ldr	r3, [pc, #520]	@ (800f67c <__ieee754_rem_pio2f+0x22c>)
 800f472:	429d      	cmp	r5, r3
 800f474:	d83a      	bhi.n	800f4ec <__ieee754_rem_pio2f+0x9c>
 800f476:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f47a:	2e00      	cmp	r6, #0
 800f47c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f680 <__ieee754_rem_pio2f+0x230>
 800f480:	4a80      	ldr	r2, [pc, #512]	@ (800f684 <__ieee754_rem_pio2f+0x234>)
 800f482:	f023 030f 	bic.w	r3, r3, #15
 800f486:	dd18      	ble.n	800f4ba <__ieee754_rem_pio2f+0x6a>
 800f488:	4293      	cmp	r3, r2
 800f48a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f48e:	bf09      	itett	eq
 800f490:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f688 <__ieee754_rem_pio2f+0x238>
 800f494:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f68c <__ieee754_rem_pio2f+0x23c>
 800f498:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f690 <__ieee754_rem_pio2f+0x240>
 800f49c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f4a0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f4a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4a8:	ed80 7a00 	vstr	s14, [r0]
 800f4ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f4b0:	edc0 7a01 	vstr	s15, [r0, #4]
 800f4b4:	2001      	movs	r0, #1
 800f4b6:	b007      	add	sp, #28
 800f4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f4c0:	bf09      	itett	eq
 800f4c2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f688 <__ieee754_rem_pio2f+0x238>
 800f4c6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f68c <__ieee754_rem_pio2f+0x23c>
 800f4ca:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f690 <__ieee754_rem_pio2f+0x240>
 800f4ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f4d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f4d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4da:	ed80 7a00 	vstr	s14, [r0]
 800f4de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4e2:	edc0 7a01 	vstr	s15, [r0, #4]
 800f4e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4ea:	e7e4      	b.n	800f4b6 <__ieee754_rem_pio2f+0x66>
 800f4ec:	4b69      	ldr	r3, [pc, #420]	@ (800f694 <__ieee754_rem_pio2f+0x244>)
 800f4ee:	429d      	cmp	r5, r3
 800f4f0:	d873      	bhi.n	800f5da <__ieee754_rem_pio2f+0x18a>
 800f4f2:	f7ff febb 	bl	800f26c <fabsf>
 800f4f6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f698 <__ieee754_rem_pio2f+0x248>
 800f4fa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f4fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f50a:	ee17 0a90 	vmov	r0, s15
 800f50e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f680 <__ieee754_rem_pio2f+0x230>
 800f512:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f516:	281f      	cmp	r0, #31
 800f518:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f68c <__ieee754_rem_pio2f+0x23c>
 800f51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f520:	eeb1 6a47 	vneg.f32	s12, s14
 800f524:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f528:	ee16 1a90 	vmov	r1, s13
 800f52c:	dc09      	bgt.n	800f542 <__ieee754_rem_pio2f+0xf2>
 800f52e:	4a5b      	ldr	r2, [pc, #364]	@ (800f69c <__ieee754_rem_pio2f+0x24c>)
 800f530:	1e47      	subs	r7, r0, #1
 800f532:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f536:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f53a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f53e:	4293      	cmp	r3, r2
 800f540:	d107      	bne.n	800f552 <__ieee754_rem_pio2f+0x102>
 800f542:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f546:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f54a:	2a08      	cmp	r2, #8
 800f54c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f550:	dc14      	bgt.n	800f57c <__ieee754_rem_pio2f+0x12c>
 800f552:	6021      	str	r1, [r4, #0]
 800f554:	ed94 7a00 	vldr	s14, [r4]
 800f558:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f55c:	2e00      	cmp	r6, #0
 800f55e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f562:	ed84 0a01 	vstr	s0, [r4, #4]
 800f566:	daa6      	bge.n	800f4b6 <__ieee754_rem_pio2f+0x66>
 800f568:	eeb1 7a47 	vneg.f32	s14, s14
 800f56c:	eeb1 0a40 	vneg.f32	s0, s0
 800f570:	ed84 7a00 	vstr	s14, [r4]
 800f574:	ed84 0a01 	vstr	s0, [r4, #4]
 800f578:	4240      	negs	r0, r0
 800f57a:	e79c      	b.n	800f4b6 <__ieee754_rem_pio2f+0x66>
 800f57c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f688 <__ieee754_rem_pio2f+0x238>
 800f580:	eef0 6a40 	vmov.f32	s13, s0
 800f584:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f588:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f58c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f590:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f690 <__ieee754_rem_pio2f+0x240>
 800f594:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f598:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f59c:	ee15 2a90 	vmov	r2, s11
 800f5a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f5a4:	1a5b      	subs	r3, r3, r1
 800f5a6:	2b19      	cmp	r3, #25
 800f5a8:	dc04      	bgt.n	800f5b4 <__ieee754_rem_pio2f+0x164>
 800f5aa:	edc4 5a00 	vstr	s11, [r4]
 800f5ae:	eeb0 0a66 	vmov.f32	s0, s13
 800f5b2:	e7cf      	b.n	800f554 <__ieee754_rem_pio2f+0x104>
 800f5b4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f6a0 <__ieee754_rem_pio2f+0x250>
 800f5b8:	eeb0 0a66 	vmov.f32	s0, s13
 800f5bc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f5c0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f5c4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f6a4 <__ieee754_rem_pio2f+0x254>
 800f5c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f5cc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f5d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f5d4:	ed84 7a00 	vstr	s14, [r4]
 800f5d8:	e7bc      	b.n	800f554 <__ieee754_rem_pio2f+0x104>
 800f5da:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f5de:	d306      	bcc.n	800f5ee <__ieee754_rem_pio2f+0x19e>
 800f5e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f5e4:	edc0 7a01 	vstr	s15, [r0, #4]
 800f5e8:	edc0 7a00 	vstr	s15, [r0]
 800f5ec:	e73e      	b.n	800f46c <__ieee754_rem_pio2f+0x1c>
 800f5ee:	15ea      	asrs	r2, r5, #23
 800f5f0:	3a86      	subs	r2, #134	@ 0x86
 800f5f2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f5f6:	ee07 3a90 	vmov	s15, r3
 800f5fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f5fe:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f6a8 <__ieee754_rem_pio2f+0x258>
 800f602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f60a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f60e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f612:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f61a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f61e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62e:	edcd 7a05 	vstr	s15, [sp, #20]
 800f632:	d11e      	bne.n	800f672 <__ieee754_rem_pio2f+0x222>
 800f634:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	bf0c      	ite	eq
 800f63e:	2301      	moveq	r3, #1
 800f640:	2302      	movne	r3, #2
 800f642:	491a      	ldr	r1, [pc, #104]	@ (800f6ac <__ieee754_rem_pio2f+0x25c>)
 800f644:	9101      	str	r1, [sp, #4]
 800f646:	2102      	movs	r1, #2
 800f648:	9100      	str	r1, [sp, #0]
 800f64a:	a803      	add	r0, sp, #12
 800f64c:	4621      	mov	r1, r4
 800f64e:	f000 f82f 	bl	800f6b0 <__kernel_rem_pio2f>
 800f652:	2e00      	cmp	r6, #0
 800f654:	f6bf af2f 	bge.w	800f4b6 <__ieee754_rem_pio2f+0x66>
 800f658:	edd4 7a00 	vldr	s15, [r4]
 800f65c:	eef1 7a67 	vneg.f32	s15, s15
 800f660:	edc4 7a00 	vstr	s15, [r4]
 800f664:	edd4 7a01 	vldr	s15, [r4, #4]
 800f668:	eef1 7a67 	vneg.f32	s15, s15
 800f66c:	edc4 7a01 	vstr	s15, [r4, #4]
 800f670:	e782      	b.n	800f578 <__ieee754_rem_pio2f+0x128>
 800f672:	2303      	movs	r3, #3
 800f674:	e7e5      	b.n	800f642 <__ieee754_rem_pio2f+0x1f2>
 800f676:	bf00      	nop
 800f678:	3f490fd8 	.word	0x3f490fd8
 800f67c:	4016cbe3 	.word	0x4016cbe3
 800f680:	3fc90f80 	.word	0x3fc90f80
 800f684:	3fc90fd0 	.word	0x3fc90fd0
 800f688:	37354400 	.word	0x37354400
 800f68c:	37354443 	.word	0x37354443
 800f690:	2e85a308 	.word	0x2e85a308
 800f694:	43490f80 	.word	0x43490f80
 800f698:	3f22f984 	.word	0x3f22f984
 800f69c:	08010054 	.word	0x08010054
 800f6a0:	2e85a300 	.word	0x2e85a300
 800f6a4:	248d3132 	.word	0x248d3132
 800f6a8:	43800000 	.word	0x43800000
 800f6ac:	080100d4 	.word	0x080100d4

0800f6b0 <__kernel_rem_pio2f>:
 800f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	ed2d 8b04 	vpush	{d8-d9}
 800f6b8:	b0d9      	sub	sp, #356	@ 0x164
 800f6ba:	4690      	mov	r8, r2
 800f6bc:	9001      	str	r0, [sp, #4]
 800f6be:	4ab6      	ldr	r2, [pc, #728]	@ (800f998 <__kernel_rem_pio2f+0x2e8>)
 800f6c0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f6c2:	f118 0f04 	cmn.w	r8, #4
 800f6c6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f6ca:	460f      	mov	r7, r1
 800f6cc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800f6d0:	db26      	blt.n	800f720 <__kernel_rem_pio2f+0x70>
 800f6d2:	f1b8 0203 	subs.w	r2, r8, #3
 800f6d6:	bf48      	it	mi
 800f6d8:	f108 0204 	addmi.w	r2, r8, #4
 800f6dc:	10d2      	asrs	r2, r2, #3
 800f6de:	1c55      	adds	r5, r2, #1
 800f6e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f6e2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800f6e6:	00e8      	lsls	r0, r5, #3
 800f6e8:	eba2 060b 	sub.w	r6, r2, fp
 800f6ec:	9002      	str	r0, [sp, #8]
 800f6ee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f6f2:	eb0a 0c0b 	add.w	ip, sl, fp
 800f6f6:	ac1c      	add	r4, sp, #112	@ 0x70
 800f6f8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	4560      	cmp	r0, ip
 800f700:	dd10      	ble.n	800f724 <__kernel_rem_pio2f+0x74>
 800f702:	a91c      	add	r1, sp, #112	@ 0x70
 800f704:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f708:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f70c:	2600      	movs	r6, #0
 800f70e:	4556      	cmp	r6, sl
 800f710:	dc24      	bgt.n	800f75c <__kernel_rem_pio2f+0xac>
 800f712:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f716:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800f71a:	4684      	mov	ip, r0
 800f71c:	2400      	movs	r4, #0
 800f71e:	e016      	b.n	800f74e <__kernel_rem_pio2f+0x9e>
 800f720:	2200      	movs	r2, #0
 800f722:	e7dc      	b.n	800f6de <__kernel_rem_pio2f+0x2e>
 800f724:	42c6      	cmn	r6, r0
 800f726:	bf5d      	ittte	pl
 800f728:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f72c:	ee07 1a90 	vmovpl	s15, r1
 800f730:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f734:	eef0 7a47 	vmovmi.f32	s15, s14
 800f738:	ece4 7a01 	vstmia	r4!, {s15}
 800f73c:	3001      	adds	r0, #1
 800f73e:	e7de      	b.n	800f6fe <__kernel_rem_pio2f+0x4e>
 800f740:	ecfe 6a01 	vldmia	lr!, {s13}
 800f744:	ed3c 7a01 	vldmdb	ip!, {s14}
 800f748:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f74c:	3401      	adds	r4, #1
 800f74e:	455c      	cmp	r4, fp
 800f750:	ddf6      	ble.n	800f740 <__kernel_rem_pio2f+0x90>
 800f752:	ece9 7a01 	vstmia	r9!, {s15}
 800f756:	3601      	adds	r6, #1
 800f758:	3004      	adds	r0, #4
 800f75a:	e7d8      	b.n	800f70e <__kernel_rem_pio2f+0x5e>
 800f75c:	a908      	add	r1, sp, #32
 800f75e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f762:	9104      	str	r1, [sp, #16]
 800f764:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f766:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800f9a4 <__kernel_rem_pio2f+0x2f4>
 800f76a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800f9a0 <__kernel_rem_pio2f+0x2f0>
 800f76e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f772:	9203      	str	r2, [sp, #12]
 800f774:	4654      	mov	r4, sl
 800f776:	00a2      	lsls	r2, r4, #2
 800f778:	9205      	str	r2, [sp, #20]
 800f77a:	aa58      	add	r2, sp, #352	@ 0x160
 800f77c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f780:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f784:	a944      	add	r1, sp, #272	@ 0x110
 800f786:	aa08      	add	r2, sp, #32
 800f788:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f78c:	4694      	mov	ip, r2
 800f78e:	4626      	mov	r6, r4
 800f790:	2e00      	cmp	r6, #0
 800f792:	dc4c      	bgt.n	800f82e <__kernel_rem_pio2f+0x17e>
 800f794:	4628      	mov	r0, r5
 800f796:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f79a:	f000 fa35 	bl	800fc08 <scalbnf>
 800f79e:	eeb0 8a40 	vmov.f32	s16, s0
 800f7a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f7a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f7aa:	f000 f9e9 	bl	800fb80 <floorf>
 800f7ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f7b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f7b6:	2d00      	cmp	r5, #0
 800f7b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f7c0:	ee17 9a90 	vmov	r9, s15
 800f7c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f7cc:	dd41      	ble.n	800f852 <__kernel_rem_pio2f+0x1a2>
 800f7ce:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800f7d2:	a908      	add	r1, sp, #32
 800f7d4:	f1c5 0e08 	rsb	lr, r5, #8
 800f7d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f7dc:	fa46 f00e 	asr.w	r0, r6, lr
 800f7e0:	4481      	add	r9, r0
 800f7e2:	fa00 f00e 	lsl.w	r0, r0, lr
 800f7e6:	1a36      	subs	r6, r6, r0
 800f7e8:	f1c5 0007 	rsb	r0, r5, #7
 800f7ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f7f0:	4106      	asrs	r6, r0
 800f7f2:	2e00      	cmp	r6, #0
 800f7f4:	dd3c      	ble.n	800f870 <__kernel_rem_pio2f+0x1c0>
 800f7f6:	f04f 0e00 	mov.w	lr, #0
 800f7fa:	f109 0901 	add.w	r9, r9, #1
 800f7fe:	4670      	mov	r0, lr
 800f800:	4574      	cmp	r4, lr
 800f802:	dc68      	bgt.n	800f8d6 <__kernel_rem_pio2f+0x226>
 800f804:	2d00      	cmp	r5, #0
 800f806:	dd03      	ble.n	800f810 <__kernel_rem_pio2f+0x160>
 800f808:	2d01      	cmp	r5, #1
 800f80a:	d074      	beq.n	800f8f6 <__kernel_rem_pio2f+0x246>
 800f80c:	2d02      	cmp	r5, #2
 800f80e:	d07d      	beq.n	800f90c <__kernel_rem_pio2f+0x25c>
 800f810:	2e02      	cmp	r6, #2
 800f812:	d12d      	bne.n	800f870 <__kernel_rem_pio2f+0x1c0>
 800f814:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f818:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f81c:	b340      	cbz	r0, 800f870 <__kernel_rem_pio2f+0x1c0>
 800f81e:	4628      	mov	r0, r5
 800f820:	9306      	str	r3, [sp, #24]
 800f822:	f000 f9f1 	bl	800fc08 <scalbnf>
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f82c:	e020      	b.n	800f870 <__kernel_rem_pio2f+0x1c0>
 800f82e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f832:	3e01      	subs	r6, #1
 800f834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f83c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f840:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f844:	ecac 0a01 	vstmia	ip!, {s0}
 800f848:	ed30 0a01 	vldmdb	r0!, {s0}
 800f84c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f850:	e79e      	b.n	800f790 <__kernel_rem_pio2f+0xe0>
 800f852:	d105      	bne.n	800f860 <__kernel_rem_pio2f+0x1b0>
 800f854:	1e60      	subs	r0, r4, #1
 800f856:	a908      	add	r1, sp, #32
 800f858:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f85c:	11f6      	asrs	r6, r6, #7
 800f85e:	e7c8      	b.n	800f7f2 <__kernel_rem_pio2f+0x142>
 800f860:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f864:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86c:	da31      	bge.n	800f8d2 <__kernel_rem_pio2f+0x222>
 800f86e:	2600      	movs	r6, #0
 800f870:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f878:	f040 8098 	bne.w	800f9ac <__kernel_rem_pio2f+0x2fc>
 800f87c:	1e60      	subs	r0, r4, #1
 800f87e:	2200      	movs	r2, #0
 800f880:	4550      	cmp	r0, sl
 800f882:	da4b      	bge.n	800f91c <__kernel_rem_pio2f+0x26c>
 800f884:	2a00      	cmp	r2, #0
 800f886:	d065      	beq.n	800f954 <__kernel_rem_pio2f+0x2a4>
 800f888:	3c01      	subs	r4, #1
 800f88a:	ab08      	add	r3, sp, #32
 800f88c:	3d08      	subs	r5, #8
 800f88e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0f8      	beq.n	800f888 <__kernel_rem_pio2f+0x1d8>
 800f896:	4628      	mov	r0, r5
 800f898:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f89c:	f000 f9b4 	bl	800fc08 <scalbnf>
 800f8a0:	1c63      	adds	r3, r4, #1
 800f8a2:	aa44      	add	r2, sp, #272	@ 0x110
 800f8a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800f9a4 <__kernel_rem_pio2f+0x2f4>
 800f8a8:	0099      	lsls	r1, r3, #2
 800f8aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f8ae:	4623      	mov	r3, r4
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f280 80a9 	bge.w	800fa08 <__kernel_rem_pio2f+0x358>
 800f8b6:	4623      	mov	r3, r4
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f2c0 80c7 	blt.w	800fa4c <__kernel_rem_pio2f+0x39c>
 800f8be:	aa44      	add	r2, sp, #272	@ 0x110
 800f8c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f8c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800f99c <__kernel_rem_pio2f+0x2ec>
 800f8c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	1ae2      	subs	r2, r4, r3
 800f8d0:	e0b1      	b.n	800fa36 <__kernel_rem_pio2f+0x386>
 800f8d2:	2602      	movs	r6, #2
 800f8d4:	e78f      	b.n	800f7f6 <__kernel_rem_pio2f+0x146>
 800f8d6:	f852 1b04 	ldr.w	r1, [r2], #4
 800f8da:	b948      	cbnz	r0, 800f8f0 <__kernel_rem_pio2f+0x240>
 800f8dc:	b121      	cbz	r1, 800f8e8 <__kernel_rem_pio2f+0x238>
 800f8de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800f8e2:	f842 1c04 	str.w	r1, [r2, #-4]
 800f8e6:	2101      	movs	r1, #1
 800f8e8:	f10e 0e01 	add.w	lr, lr, #1
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	e787      	b.n	800f800 <__kernel_rem_pio2f+0x150>
 800f8f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800f8f4:	e7f5      	b.n	800f8e2 <__kernel_rem_pio2f+0x232>
 800f8f6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800f8fa:	aa08      	add	r2, sp, #32
 800f8fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f904:	a908      	add	r1, sp, #32
 800f906:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800f90a:	e781      	b.n	800f810 <__kernel_rem_pio2f+0x160>
 800f90c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800f910:	aa08      	add	r2, sp, #32
 800f912:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f916:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f91a:	e7f3      	b.n	800f904 <__kernel_rem_pio2f+0x254>
 800f91c:	a908      	add	r1, sp, #32
 800f91e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f922:	3801      	subs	r0, #1
 800f924:	430a      	orrs	r2, r1
 800f926:	e7ab      	b.n	800f880 <__kernel_rem_pio2f+0x1d0>
 800f928:	3201      	adds	r2, #1
 800f92a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f92e:	2e00      	cmp	r6, #0
 800f930:	d0fa      	beq.n	800f928 <__kernel_rem_pio2f+0x278>
 800f932:	9905      	ldr	r1, [sp, #20]
 800f934:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800f938:	eb0d 0001 	add.w	r0, sp, r1
 800f93c:	18e6      	adds	r6, r4, r3
 800f93e:	a91c      	add	r1, sp, #112	@ 0x70
 800f940:	f104 0c01 	add.w	ip, r4, #1
 800f944:	384c      	subs	r0, #76	@ 0x4c
 800f946:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800f94a:	4422      	add	r2, r4
 800f94c:	4562      	cmp	r2, ip
 800f94e:	da04      	bge.n	800f95a <__kernel_rem_pio2f+0x2aa>
 800f950:	4614      	mov	r4, r2
 800f952:	e710      	b.n	800f776 <__kernel_rem_pio2f+0xc6>
 800f954:	9804      	ldr	r0, [sp, #16]
 800f956:	2201      	movs	r2, #1
 800f958:	e7e7      	b.n	800f92a <__kernel_rem_pio2f+0x27a>
 800f95a:	9903      	ldr	r1, [sp, #12]
 800f95c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f960:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800f964:	9105      	str	r1, [sp, #20]
 800f966:	ee07 1a90 	vmov	s15, r1
 800f96a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f96e:	2400      	movs	r4, #0
 800f970:	ece6 7a01 	vstmia	r6!, {s15}
 800f974:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800f978:	46b1      	mov	r9, r6
 800f97a:	455c      	cmp	r4, fp
 800f97c:	dd04      	ble.n	800f988 <__kernel_rem_pio2f+0x2d8>
 800f97e:	ece0 7a01 	vstmia	r0!, {s15}
 800f982:	f10c 0c01 	add.w	ip, ip, #1
 800f986:	e7e1      	b.n	800f94c <__kernel_rem_pio2f+0x29c>
 800f988:	ecfe 6a01 	vldmia	lr!, {s13}
 800f98c:	ed39 7a01 	vldmdb	r9!, {s14}
 800f990:	3401      	adds	r4, #1
 800f992:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f996:	e7f0      	b.n	800f97a <__kernel_rem_pio2f+0x2ca>
 800f998:	08010418 	.word	0x08010418
 800f99c:	080103ec 	.word	0x080103ec
 800f9a0:	43800000 	.word	0x43800000
 800f9a4:	3b800000 	.word	0x3b800000
 800f9a8:	00000000 	.word	0x00000000
 800f9ac:	9b02      	ldr	r3, [sp, #8]
 800f9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800f9b2:	eba3 0008 	sub.w	r0, r3, r8
 800f9b6:	f000 f927 	bl	800fc08 <scalbnf>
 800f9ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800f9a0 <__kernel_rem_pio2f+0x2f0>
 800f9be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c6:	db19      	blt.n	800f9fc <__kernel_rem_pio2f+0x34c>
 800f9c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800f9a4 <__kernel_rem_pio2f+0x2f4>
 800f9cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f9d0:	aa08      	add	r2, sp, #32
 800f9d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9d6:	3508      	adds	r5, #8
 800f9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f9e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9e8:	ee10 3a10 	vmov	r3, s0
 800f9ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f9f0:	ee17 3a90 	vmov	r3, s15
 800f9f4:	3401      	adds	r4, #1
 800f9f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f9fa:	e74c      	b.n	800f896 <__kernel_rem_pio2f+0x1e6>
 800f9fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fa00:	aa08      	add	r2, sp, #32
 800fa02:	ee10 3a10 	vmov	r3, s0
 800fa06:	e7f6      	b.n	800f9f6 <__kernel_rem_pio2f+0x346>
 800fa08:	a808      	add	r0, sp, #32
 800fa0a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fa0e:	9001      	str	r0, [sp, #4]
 800fa10:	ee07 0a90 	vmov	s15, r0
 800fa14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa1e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fa22:	ed62 7a01 	vstmdb	r2!, {s15}
 800fa26:	e743      	b.n	800f8b0 <__kernel_rem_pio2f+0x200>
 800fa28:	ecfc 6a01 	vldmia	ip!, {s13}
 800fa2c:	ecb5 7a01 	vldmia	r5!, {s14}
 800fa30:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa34:	3001      	adds	r0, #1
 800fa36:	4550      	cmp	r0, sl
 800fa38:	dc01      	bgt.n	800fa3e <__kernel_rem_pio2f+0x38e>
 800fa3a:	4290      	cmp	r0, r2
 800fa3c:	ddf4      	ble.n	800fa28 <__kernel_rem_pio2f+0x378>
 800fa3e:	a858      	add	r0, sp, #352	@ 0x160
 800fa40:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fa44:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	e735      	b.n	800f8b8 <__kernel_rem_pio2f+0x208>
 800fa4c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	dc09      	bgt.n	800fa66 <__kernel_rem_pio2f+0x3b6>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	dc27      	bgt.n	800faa6 <__kernel_rem_pio2f+0x3f6>
 800fa56:	d040      	beq.n	800fada <__kernel_rem_pio2f+0x42a>
 800fa58:	f009 0007 	and.w	r0, r9, #7
 800fa5c:	b059      	add	sp, #356	@ 0x164
 800fa5e:	ecbd 8b04 	vpop	{d8-d9}
 800fa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa66:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fa68:	2b03      	cmp	r3, #3
 800fa6a:	d1f5      	bne.n	800fa58 <__kernel_rem_pio2f+0x3a8>
 800fa6c:	aa30      	add	r2, sp, #192	@ 0xc0
 800fa6e:	1f0b      	subs	r3, r1, #4
 800fa70:	4413      	add	r3, r2
 800fa72:	461a      	mov	r2, r3
 800fa74:	4620      	mov	r0, r4
 800fa76:	2800      	cmp	r0, #0
 800fa78:	dc50      	bgt.n	800fb1c <__kernel_rem_pio2f+0x46c>
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	2a01      	cmp	r2, #1
 800fa7e:	dc5d      	bgt.n	800fb3c <__kernel_rem_pio2f+0x48c>
 800fa80:	ab30      	add	r3, sp, #192	@ 0xc0
 800fa82:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800fa86:	440b      	add	r3, r1
 800fa88:	2c01      	cmp	r4, #1
 800fa8a:	dc67      	bgt.n	800fb5c <__kernel_rem_pio2f+0x4ac>
 800fa8c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fa90:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fa94:	2e00      	cmp	r6, #0
 800fa96:	d167      	bne.n	800fb68 <__kernel_rem_pio2f+0x4b8>
 800fa98:	edc7 6a00 	vstr	s13, [r7]
 800fa9c:	ed87 7a01 	vstr	s14, [r7, #4]
 800faa0:	edc7 7a02 	vstr	s15, [r7, #8]
 800faa4:	e7d8      	b.n	800fa58 <__kernel_rem_pio2f+0x3a8>
 800faa6:	ab30      	add	r3, sp, #192	@ 0xc0
 800faa8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800faac:	440b      	add	r3, r1
 800faae:	4622      	mov	r2, r4
 800fab0:	2a00      	cmp	r2, #0
 800fab2:	da24      	bge.n	800fafe <__kernel_rem_pio2f+0x44e>
 800fab4:	b34e      	cbz	r6, 800fb0a <__kernel_rem_pio2f+0x45a>
 800fab6:	eef1 7a47 	vneg.f32	s15, s14
 800faba:	edc7 7a00 	vstr	s15, [r7]
 800fabe:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fac6:	aa31      	add	r2, sp, #196	@ 0xc4
 800fac8:	2301      	movs	r3, #1
 800faca:	429c      	cmp	r4, r3
 800facc:	da20      	bge.n	800fb10 <__kernel_rem_pio2f+0x460>
 800face:	b10e      	cbz	r6, 800fad4 <__kernel_rem_pio2f+0x424>
 800fad0:	eef1 7a67 	vneg.f32	s15, s15
 800fad4:	edc7 7a01 	vstr	s15, [r7, #4]
 800fad8:	e7be      	b.n	800fa58 <__kernel_rem_pio2f+0x3a8>
 800fada:	ab30      	add	r3, sp, #192	@ 0xc0
 800fadc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800f9a8 <__kernel_rem_pio2f+0x2f8>
 800fae0:	440b      	add	r3, r1
 800fae2:	2c00      	cmp	r4, #0
 800fae4:	da05      	bge.n	800faf2 <__kernel_rem_pio2f+0x442>
 800fae6:	b10e      	cbz	r6, 800faec <__kernel_rem_pio2f+0x43c>
 800fae8:	eef1 7a67 	vneg.f32	s15, s15
 800faec:	edc7 7a00 	vstr	s15, [r7]
 800faf0:	e7b2      	b.n	800fa58 <__kernel_rem_pio2f+0x3a8>
 800faf2:	ed33 7a01 	vldmdb	r3!, {s14}
 800faf6:	3c01      	subs	r4, #1
 800faf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fafc:	e7f1      	b.n	800fae2 <__kernel_rem_pio2f+0x432>
 800fafe:	ed73 7a01 	vldmdb	r3!, {s15}
 800fb02:	3a01      	subs	r2, #1
 800fb04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb08:	e7d2      	b.n	800fab0 <__kernel_rem_pio2f+0x400>
 800fb0a:	eef0 7a47 	vmov.f32	s15, s14
 800fb0e:	e7d4      	b.n	800faba <__kernel_rem_pio2f+0x40a>
 800fb10:	ecb2 7a01 	vldmia	r2!, {s14}
 800fb14:	3301      	adds	r3, #1
 800fb16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb1a:	e7d6      	b.n	800faca <__kernel_rem_pio2f+0x41a>
 800fb1c:	ed72 7a01 	vldmdb	r2!, {s15}
 800fb20:	edd2 6a01 	vldr	s13, [r2, #4]
 800fb24:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb28:	3801      	subs	r0, #1
 800fb2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb2e:	ed82 7a00 	vstr	s14, [r2]
 800fb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb36:	edc2 7a01 	vstr	s15, [r2, #4]
 800fb3a:	e79c      	b.n	800fa76 <__kernel_rem_pio2f+0x3c6>
 800fb3c:	ed73 7a01 	vldmdb	r3!, {s15}
 800fb40:	edd3 6a01 	vldr	s13, [r3, #4]
 800fb44:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb48:	3a01      	subs	r2, #1
 800fb4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb4e:	ed83 7a00 	vstr	s14, [r3]
 800fb52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb56:	edc3 7a01 	vstr	s15, [r3, #4]
 800fb5a:	e78f      	b.n	800fa7c <__kernel_rem_pio2f+0x3cc>
 800fb5c:	ed33 7a01 	vldmdb	r3!, {s14}
 800fb60:	3c01      	subs	r4, #1
 800fb62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb66:	e78f      	b.n	800fa88 <__kernel_rem_pio2f+0x3d8>
 800fb68:	eef1 6a66 	vneg.f32	s13, s13
 800fb6c:	eeb1 7a47 	vneg.f32	s14, s14
 800fb70:	edc7 6a00 	vstr	s13, [r7]
 800fb74:	ed87 7a01 	vstr	s14, [r7, #4]
 800fb78:	eef1 7a67 	vneg.f32	s15, s15
 800fb7c:	e790      	b.n	800faa0 <__kernel_rem_pio2f+0x3f0>
 800fb7e:	bf00      	nop

0800fb80 <floorf>:
 800fb80:	ee10 3a10 	vmov	r3, s0
 800fb84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb88:	3a7f      	subs	r2, #127	@ 0x7f
 800fb8a:	2a16      	cmp	r2, #22
 800fb8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fb90:	dc2b      	bgt.n	800fbea <floorf+0x6a>
 800fb92:	2a00      	cmp	r2, #0
 800fb94:	da12      	bge.n	800fbbc <floorf+0x3c>
 800fb96:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fbfc <floorf+0x7c>
 800fb9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba6:	dd06      	ble.n	800fbb6 <floorf+0x36>
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	da24      	bge.n	800fbf6 <floorf+0x76>
 800fbac:	2900      	cmp	r1, #0
 800fbae:	4b14      	ldr	r3, [pc, #80]	@ (800fc00 <floorf+0x80>)
 800fbb0:	bf08      	it	eq
 800fbb2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fbb6:	ee00 3a10 	vmov	s0, r3
 800fbba:	4770      	bx	lr
 800fbbc:	4911      	ldr	r1, [pc, #68]	@ (800fc04 <floorf+0x84>)
 800fbbe:	4111      	asrs	r1, r2
 800fbc0:	420b      	tst	r3, r1
 800fbc2:	d0fa      	beq.n	800fbba <floorf+0x3a>
 800fbc4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fbfc <floorf+0x7c>
 800fbc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd4:	ddef      	ble.n	800fbb6 <floorf+0x36>
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bfbe      	ittt	lt
 800fbda:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fbde:	fa40 f202 	asrlt.w	r2, r0, r2
 800fbe2:	189b      	addlt	r3, r3, r2
 800fbe4:	ea23 0301 	bic.w	r3, r3, r1
 800fbe8:	e7e5      	b.n	800fbb6 <floorf+0x36>
 800fbea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fbee:	d3e4      	bcc.n	800fbba <floorf+0x3a>
 800fbf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbf4:	4770      	bx	lr
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e7dd      	b.n	800fbb6 <floorf+0x36>
 800fbfa:	bf00      	nop
 800fbfc:	7149f2ca 	.word	0x7149f2ca
 800fc00:	bf800000 	.word	0xbf800000
 800fc04:	007fffff 	.word	0x007fffff

0800fc08 <scalbnf>:
 800fc08:	ee10 3a10 	vmov	r3, s0
 800fc0c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fc10:	d02b      	beq.n	800fc6a <scalbnf+0x62>
 800fc12:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fc16:	d302      	bcc.n	800fc1e <scalbnf+0x16>
 800fc18:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc1c:	4770      	bx	lr
 800fc1e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fc22:	d123      	bne.n	800fc6c <scalbnf+0x64>
 800fc24:	4b24      	ldr	r3, [pc, #144]	@ (800fcb8 <scalbnf+0xb0>)
 800fc26:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fcbc <scalbnf+0xb4>
 800fc2a:	4298      	cmp	r0, r3
 800fc2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc30:	db17      	blt.n	800fc62 <scalbnf+0x5a>
 800fc32:	ee10 3a10 	vmov	r3, s0
 800fc36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc3a:	3a19      	subs	r2, #25
 800fc3c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fc40:	4288      	cmp	r0, r1
 800fc42:	dd15      	ble.n	800fc70 <scalbnf+0x68>
 800fc44:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fcc0 <scalbnf+0xb8>
 800fc48:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fcc4 <scalbnf+0xbc>
 800fc4c:	ee10 3a10 	vmov	r3, s0
 800fc50:	eeb0 7a67 	vmov.f32	s14, s15
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	bfb8      	it	lt
 800fc58:	eef0 7a66 	vmovlt.f32	s15, s13
 800fc5c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fc60:	4770      	bx	lr
 800fc62:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fcc8 <scalbnf+0xc0>
 800fc66:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc6a:	4770      	bx	lr
 800fc6c:	0dd2      	lsrs	r2, r2, #23
 800fc6e:	e7e5      	b.n	800fc3c <scalbnf+0x34>
 800fc70:	4410      	add	r0, r2
 800fc72:	28fe      	cmp	r0, #254	@ 0xfe
 800fc74:	dce6      	bgt.n	800fc44 <scalbnf+0x3c>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	dd06      	ble.n	800fc88 <scalbnf+0x80>
 800fc7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc7e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc82:	ee00 3a10 	vmov	s0, r3
 800fc86:	4770      	bx	lr
 800fc88:	f110 0f16 	cmn.w	r0, #22
 800fc8c:	da09      	bge.n	800fca2 <scalbnf+0x9a>
 800fc8e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fcc8 <scalbnf+0xc0>
 800fc92:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fccc <scalbnf+0xc4>
 800fc96:	ee10 3a10 	vmov	r3, s0
 800fc9a:	eeb0 7a67 	vmov.f32	s14, s15
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	e7d9      	b.n	800fc56 <scalbnf+0x4e>
 800fca2:	3019      	adds	r0, #25
 800fca4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fca8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fcac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fcd0 <scalbnf+0xc8>
 800fcb0:	ee07 3a90 	vmov	s15, r3
 800fcb4:	e7d7      	b.n	800fc66 <scalbnf+0x5e>
 800fcb6:	bf00      	nop
 800fcb8:	ffff3cb0 	.word	0xffff3cb0
 800fcbc:	4c000000 	.word	0x4c000000
 800fcc0:	7149f2ca 	.word	0x7149f2ca
 800fcc4:	f149f2ca 	.word	0xf149f2ca
 800fcc8:	0da24260 	.word	0x0da24260
 800fccc:	8da24260 	.word	0x8da24260
 800fcd0:	33000000 	.word	0x33000000

0800fcd4 <_init>:
 800fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd6:	bf00      	nop
 800fcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcda:	bc08      	pop	{r3}
 800fcdc:	469e      	mov	lr, r3
 800fcde:	4770      	bx	lr

0800fce0 <_fini>:
 800fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce2:	bf00      	nop
 800fce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fce6:	bc08      	pop	{r3}
 800fce8:	469e      	mov	lr, r3
 800fcea:	4770      	bx	lr
