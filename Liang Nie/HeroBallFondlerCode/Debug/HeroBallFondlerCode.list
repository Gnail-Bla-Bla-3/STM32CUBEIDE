
HeroBallFondlerCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800e35c  0800e35c  0000f35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e60c  0800e60c  000100d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e60c  0800e60c  0000f60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e614  0800e614  000100d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e614  0800e614  0000f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e618  0800e618  0000f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800e61c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100d8  2**0
                  CONTENTS
 10 .bss          000058b4  200000d8  200000d8  000100d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000598c  2000598c  000100d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e87  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000555b  00000000  00000000  00035f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  0003b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000185b  00000000  00000000  0003d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002626b  00000000  00000000  0003ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025da1  00000000  00000000  00064ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16a3  00000000  00000000  0008ac7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0016c322  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008764  00000000  00000000  0016c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00174b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e344 	.word	0x0800e344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800e344 	.word	0x0800e344

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 800057a:	e003      	b.n	8000584 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000580:	f000 f80a 	bl	8000598 <BMI088_delay_us>
    while(ms--)
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	80fa      	strh	r2, [r7, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f6      	bne.n	800057c <BMI088_delay_ms+0xc>
    }
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	@ 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <BMI088_delay_us+0x84>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	22a8      	movs	r2, #168	@ 0xa8
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <BMI088_delay_us+0x84>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <BMI088_delay_us+0x84>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d0f8      	beq.n	80005cc <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d206      	bcs.n	80005f0 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	4413      	add	r3, r2
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	e007      	b.n	8000600 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	4413      	add	r3, r2
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	429a      	cmp	r2, r3
 800060a:	d200      	bcs.n	800060e <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 800060c:	e7de      	b.n	80005cc <BMI088_delay_us+0x34>
            {
                break;
 800060e:	bf00      	nop
            }
        }
    }


}
 8000610:	bf00      	nop
 8000612:	3724      	adds	r7, #36	@ 0x24
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e010 	.word	0xe000e010

08000620 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <BMI088_ACCEL_NS_L+0x18>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <BMI088_ACCEL_NS_L+0x1c>)
 800062a:	8811      	ldrh	r1, [r2, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f828 	bl	8006684 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000004 	.word	0x20000004

08000640 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <BMI088_ACCEL_NS_H+0x18>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <BMI088_ACCEL_NS_H+0x1c>)
 800064a:	8811      	ldrh	r1, [r2, #0]
 800064c:	2201      	movs	r2, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f818 	bl	8006684 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000004 	.word	0x20000004

08000660 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <BMI088_GYRO_NS_L+0x18>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <BMI088_GYRO_NS_L+0x1c>)
 800066a:	8811      	ldrh	r1, [r2, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f808 	bl	8006684 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008
 800067c:	2000000c 	.word	0x2000000c

08000680 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <BMI088_GYRO_NS_H+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <BMI088_GYRO_NS_H+0x1c>)
 800068a:	8811      	ldrh	r1, [r2, #0]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fff8 	bl	8006684 <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000008 	.word	0x20000008
 800069c:	2000000c 	.word	0x2000000c

080006a0 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80006aa:	f107 020f 	add.w	r2, r7, #15
 80006ae:	1df9      	adds	r1, r7, #7
 80006b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <BMI088_read_write_byte+0x28>)
 80006ba:	f007 fd41 	bl	8008140 <HAL_SPI_TransmitReceive>
    return rx_data;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200007cc 	.word	0x200007cc

080006cc <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80006da:	f7ff ffa1 	bl	8000620 <BMI088_ACCEL_NS_L>
 80006de:	2080      	movs	r0, #128	@ 0x80
 80006e0:	f7ff ffde 	bl	80006a0 <BMI088_read_write_byte>
 80006e4:	2055      	movs	r0, #85	@ 0x55
 80006e6:	f7ff ffdb 	bl	80006a0 <BMI088_read_write_byte>
 80006ea:	2055      	movs	r0, #85	@ 0x55
 80006ec:	f7ff ffd8 	bl	80006a0 <BMI088_read_write_byte>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71bb      	strb	r3, [r7, #6]
 80006f4:	f7ff ffa4 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80006f8:	2096      	movs	r0, #150	@ 0x96
 80006fa:	f7ff ff4d 	bl	8000598 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80006fe:	f7ff ff8f 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000702:	2080      	movs	r0, #128	@ 0x80
 8000704:	f7ff ffcc 	bl	80006a0 <BMI088_read_write_byte>
 8000708:	2055      	movs	r0, #85	@ 0x55
 800070a:	f7ff ffc9 	bl	80006a0 <BMI088_read_write_byte>
 800070e:	2055      	movs	r0, #85	@ 0x55
 8000710:	f7ff ffc6 	bl	80006a0 <BMI088_read_write_byte>
 8000714:	4603      	mov	r3, r0
 8000716:	71bb      	strb	r3, [r7, #6]
 8000718:	f7ff ff92 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800071c:	2096      	movs	r0, #150	@ 0x96
 800071e:	f7ff ff3b 	bl	8000598 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8000722:	f7ff ff7d 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000726:	21b6      	movs	r1, #182	@ 0xb6
 8000728:	207e      	movs	r0, #126	@ 0x7e
 800072a:	f000 fa21 	bl	8000b70 <BMI088_write_single_reg>
 800072e:	f7ff ff87 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8000732:	2050      	movs	r0, #80	@ 0x50
 8000734:	f7ff ff1c 	bl	8000570 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8000738:	f7ff ff72 	bl	8000620 <BMI088_ACCEL_NS_L>
 800073c:	2080      	movs	r0, #128	@ 0x80
 800073e:	f7ff ffaf 	bl	80006a0 <BMI088_read_write_byte>
 8000742:	2055      	movs	r0, #85	@ 0x55
 8000744:	f7ff ffac 	bl	80006a0 <BMI088_read_write_byte>
 8000748:	2055      	movs	r0, #85	@ 0x55
 800074a:	f7ff ffa9 	bl	80006a0 <BMI088_read_write_byte>
 800074e:	4603      	mov	r3, r0
 8000750:	71bb      	strb	r3, [r7, #6]
 8000752:	f7ff ff75 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000756:	2096      	movs	r0, #150	@ 0x96
 8000758:	f7ff ff1e 	bl	8000598 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800075c:	f7ff ff60 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000760:	2080      	movs	r0, #128	@ 0x80
 8000762:	f7ff ff9d 	bl	80006a0 <BMI088_read_write_byte>
 8000766:	2055      	movs	r0, #85	@ 0x55
 8000768:	f7ff ff9a 	bl	80006a0 <BMI088_read_write_byte>
 800076c:	2055      	movs	r0, #85	@ 0x55
 800076e:	f7ff ff97 	bl	80006a0 <BMI088_read_write_byte>
 8000772:	4603      	mov	r3, r0
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	f7ff ff63 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800077a:	2096      	movs	r0, #150	@ 0x96
 800077c:	f7ff ff0c 	bl	8000598 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b1e      	cmp	r3, #30
 8000784:	d001      	beq.n	800078a <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 8000786:	23ff      	movs	r3, #255	@ 0xff
 8000788:	e052      	b.n	8000830 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e04b      	b.n	8000828 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8000790:	f7ff ff46 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	4928      	ldr	r1, [pc, #160]	@ (8000838 <BMI088_accel_init+0x16c>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	440b      	add	r3, r1
 80007a0:	7818      	ldrb	r0, [r3, #0]
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	4924      	ldr	r1, [pc, #144]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 f9dc 	bl	8000b70 <BMI088_write_single_reg>
 80007b8:	f7ff ff42 	bl	8000640 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007bc:	2096      	movs	r0, #150	@ 0x96
 80007be:	f7ff feeb 	bl	8000598 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80007c2:	f7ff ff2d 	bl	8000620 <BMI088_ACCEL_NS_L>
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	491b      	ldr	r1, [pc, #108]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff60 	bl	80006a0 <BMI088_read_write_byte>
 80007e0:	2055      	movs	r0, #85	@ 0x55
 80007e2:	f7ff ff5d 	bl	80006a0 <BMI088_read_write_byte>
 80007e6:	2055      	movs	r0, #85	@ 0x55
 80007e8:	f7ff ff5a 	bl	80006a0 <BMI088_read_write_byte>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	f7ff ff26 	bl	8000640 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007f4:	2096      	movs	r0, #150	@ 0x96
 80007f6:	f7ff fecf 	bl	8000598 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	490e      	ldr	r1, [pc, #56]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	440b      	add	r3, r1
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	429a      	cmp	r2, r3
 800080e:	d008      	beq.n	8000822 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	4909      	ldr	r1, [pc, #36]	@ (8000838 <BMI088_accel_init+0x16c>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	440b      	add	r3, r1
 800081c:	3302      	adds	r3, #2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e006      	b.n	8000830 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b05      	cmp	r3, #5
 800082c:	d9b0      	bls.n	8000790 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000018 	.word	0x20000018

0800083c <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800084a:	f7ff ff09 	bl	8000660 <BMI088_GYRO_NS_L>
 800084e:	1dbb      	adds	r3, r7, #6
 8000850:	4619      	mov	r1, r3
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f9a0 	bl	8000b98 <BMI088_read_single_reg>
 8000858:	f7ff ff12 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800085c:	2096      	movs	r0, #150	@ 0x96
 800085e:	f7ff fe9b 	bl	8000598 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000862:	f7ff fefd 	bl	8000660 <BMI088_GYRO_NS_L>
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	4619      	mov	r1, r3
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f994 	bl	8000b98 <BMI088_read_single_reg>
 8000870:	f7ff ff06 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000874:	2096      	movs	r0, #150	@ 0x96
 8000876:	f7ff fe8f 	bl	8000598 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800087a:	f7ff fef1 	bl	8000660 <BMI088_GYRO_NS_L>
 800087e:	21b6      	movs	r1, #182	@ 0xb6
 8000880:	2014      	movs	r0, #20
 8000882:	f000 f975 	bl	8000b70 <BMI088_write_single_reg>
 8000886:	f7ff fefb 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800088a:	2050      	movs	r0, #80	@ 0x50
 800088c:	f7ff fe70 	bl	8000570 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000890:	f7ff fee6 	bl	8000660 <BMI088_GYRO_NS_L>
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	4619      	mov	r1, r3
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f97d 	bl	8000b98 <BMI088_read_single_reg>
 800089e:	f7ff feef 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008a2:	2096      	movs	r0, #150	@ 0x96
 80008a4:	f7ff fe78 	bl	8000598 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80008a8:	f7ff feda 	bl	8000660 <BMI088_GYRO_NS_L>
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	4619      	mov	r1, r3
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 f971 	bl	8000b98 <BMI088_read_single_reg>
 80008b6:	f7ff fee3 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008ba:	2096      	movs	r0, #150	@ 0x96
 80008bc:	f7ff fe6c 	bl	8000598 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d001      	beq.n	80008ca <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80008c6:	23ff      	movs	r3, #255	@ 0xff
 80008c8:	e049      	b.n	800095e <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e042      	b.n	8000956 <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80008d0:	f7ff fec6 	bl	8000660 <BMI088_GYRO_NS_L>
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4924      	ldr	r1, [pc, #144]	@ (8000968 <BMI088_gyro_init+0x12c>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	440b      	add	r3, r1
 80008e0:	7818      	ldrb	r0, [r3, #0]
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	4920      	ldr	r1, [pc, #128]	@ (8000968 <BMI088_gyro_init+0x12c>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 f93c 	bl	8000b70 <BMI088_write_single_reg>
 80008f8:	f7ff fec2 	bl	8000680 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008fc:	2096      	movs	r0, #150	@ 0x96
 80008fe:	f7ff fe4b 	bl	8000598 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8000902:	f7ff fead 	bl	8000660 <BMI088_GYRO_NS_L>
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	4917      	ldr	r1, [pc, #92]	@ (8000968 <BMI088_gyro_init+0x12c>)
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	440b      	add	r3, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	1dba      	adds	r2, r7, #6
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f93d 	bl	8000b98 <BMI088_read_single_reg>
 800091e:	f7ff feaf 	bl	8000680 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000922:	2096      	movs	r0, #150	@ 0x96
 8000924:	f7ff fe38 	bl	8000598 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8000928:	79fa      	ldrb	r2, [r7, #7]
 800092a:	490f      	ldr	r1, [pc, #60]	@ (8000968 <BMI088_gyro_init+0x12c>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	440b      	add	r3, r1
 8000934:	3301      	adds	r3, #1
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	429a      	cmp	r2, r3
 800093c:	d008      	beq.n	8000950 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	4909      	ldr	r1, [pc, #36]	@ (8000968 <BMI088_gyro_init+0x12c>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	440b      	add	r3, r1
 800094a:	3302      	adds	r3, #2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	e006      	b.n	800095e <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3301      	adds	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b05      	cmp	r3, #5
 800095a:	d9b9      	bls.n	80008d0 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000002c 	.word	0x2000002c

0800096c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000970:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <IMU_get_temp+0x1c>)
 8000972:	4906      	ldr	r1, [pc, #24]	@ (800098c <IMU_get_temp+0x20>)
 8000974:	4806      	ldr	r0, [pc, #24]	@ (8000990 <IMU_get_temp+0x24>)
 8000976:	f000 f80d 	bl	8000994 <BMI088_read>
	return temp;
 800097a:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <IMU_get_temp+0x1c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	ee07 3a90 	vmov	s15, r3
}
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000010c 	.word	0x2000010c
 800098c:	20000100 	.word	0x20000100
 8000990:	200000f4 	.word	0x200000f4

08000994 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80009a0:	4a70      	ldr	r2, [pc, #448]	@ (8000b64 <BMI088_read+0x1d0>)
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009aa:	6018      	str	r0, [r3, #0]
 80009ac:	3304      	adds	r3, #4
 80009ae:	8019      	strh	r1, [r3, #0]
 80009b0:	3302      	adds	r3, #2
 80009b2:	0c0a      	lsrs	r2, r1, #16
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80009ba:	f7ff fe31 	bl	8000620 <BMI088_ACCEL_NS_L>
 80009be:	2092      	movs	r0, #146	@ 0x92
 80009c0:	f7ff fe6e 	bl	80006a0 <BMI088_read_write_byte>
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2206      	movs	r2, #6
 80009ca:	4619      	mov	r1, r3
 80009cc:	2012      	movs	r0, #18
 80009ce:	f000 f8fb 	bl	8000bc8 <BMI088_read_muli_reg>
 80009d2:	f7ff fe35 	bl	8000640 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80009d6:	7d7b      	ldrb	r3, [r7, #21]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b21a      	sxth	r2, r3
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80009e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000b68 <BMI088_read+0x1d4>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	7dbb      	ldrb	r3, [r7, #22]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000a0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1a:	4b53      	ldr	r3, [pc, #332]	@ (8000b68 <BMI088_read+0x1d4>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3304      	adds	r3, #4
 8000a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a28:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000a2c:	7e7b      	ldrb	r3, [r7, #25]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7e3b      	ldrb	r3, [r7, #24]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000a3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a46:	4b48      	ldr	r3, [pc, #288]	@ (8000b68 <BMI088_read+0x1d4>)
 8000a48:	edd3 7a00 	vldr	s15, [r3]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000a58:	f7ff fe02 	bl	8000660 <BMI088_GYRO_NS_L>
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2208      	movs	r2, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8af 	bl	8000bc8 <BMI088_read_muli_reg>
 8000a6a:	f7ff fe09 	bl	8000680 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000a6e:	7d3b      	ldrb	r3, [r7, #20]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d140      	bne.n	8000af6 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <BMI088_read+0x1d8>)
 8000a90:	edd3 7a00 	vldr	s15, [r3]
 8000a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000a9e:	7e7b      	ldrb	r3, [r7, #25]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	7e3b      	ldrb	r3, [r7, #24]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000aac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <BMI088_read+0x1d8>)
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000aca:	7efb      	ldrb	r3, [r7, #27]
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	7ebb      	ldrb	r3, [r7, #26]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000ad8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <BMI088_read+0x1d8>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3308      	adds	r3, #8
 8000aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af2:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000af6:	f7ff fd93 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000afa:	20a2      	movs	r0, #162	@ 0xa2
 8000afc:	f7ff fdd0 	bl	80006a0 <BMI088_read_write_byte>
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2202      	movs	r2, #2
 8000b06:	4619      	mov	r1, r3
 8000b08:	2022      	movs	r0, #34	@ 0x22
 8000b0a:	f000 f85d 	bl	8000bc8 <BMI088_read_muli_reg>
 8000b0e:	f7ff fd97 	bl	8000640 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000b12:	7d3b      	ldrb	r3, [r7, #20]
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	7d7b      	ldrb	r3, [r7, #21]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8000b24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b2c:	db04      	blt.n	8000b38 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8000b2e:	8bfb      	ldrh	r3, [r7, #30]
 8000b30:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000b38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b44:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	edc3 7a00 	vstr	s15, [r3]
}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800e35c 	.word	0x0800e35c
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	20000014 	.word	0x20000014

08000b70 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fd8c 	bl	80006a0 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd88 	bl	80006a0 <BMI088_read_write_byte>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd77 	bl	80006a0 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8000bb2:	2055      	movs	r0, #85	@ 0x55
 8000bb4:	f7ff fd74 	bl	80006a0 <BMI088_read_write_byte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	701a      	strb	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fd5d 	bl	80006a0 <BMI088_read_write_byte>

    while (len != 0)
 8000be6:	e00c      	b.n	8000c02 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000be8:	2055      	movs	r0, #85	@ 0x55
 8000bea:	f7ff fd59 	bl	80006a0 <BMI088_read_write_byte>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	701a      	strb	r2, [r3, #0]
        buf++;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
        len--;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <BMI088_read_muli_reg+0x20>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_CAN_RxFifo0MsgPendingCallback>:

extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;
extern game_status_t game_status;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	@ 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f004 faec 	bl	8005204 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000c32:	d817      	bhi.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c38:	f240 80e2 	bls.w	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8000c3c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	f200 80dd 	bhi.w	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8000c46:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000d5b 	.word	0x08000d5b
 8000c50:	08000d6d 	.word	0x08000d6d
 8000c54:	08000e01 	.word	0x08000e01
 8000c58:	08000e01 	.word	0x08000e01
 8000c5c:	08000d7f 	.word	0x08000d7f
 8000c60:	08000df9 	.word	0x08000df9
 8000c64:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	f200 80c9 	bhi.w	8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            if (hcan == &hcan1) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a65      	ldr	r2, [pc, #404]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d131      	bne.n	8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8000c80:	7c3b      	ldrb	r3, [r7, #16]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7c7b      	ldrb	r3, [r7, #17]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c92:	b291      	uxth	r1, r2
 8000c94:	4a5f      	ldr	r2, [pc, #380]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000c96:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000c9a:	7cbb      	ldrb	r3, [r7, #18]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b219      	sxth	r1, r3
 8000ca0:	7cfb      	ldrb	r3, [r7, #19]
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	b211      	sxth	r1, r2
 8000cac:	4a59      	ldr	r2, [pc, #356]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	460a      	mov	r2, r1
 8000cb4:	805a      	strh	r2, [r3, #2]
 8000cb6:	7d3b      	ldrb	r3, [r7, #20]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b219      	sxth	r1, r3
 8000cbc:	7d7b      	ldrb	r3, [r7, #21]
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	b211      	sxth	r1, r2
 8000cc8:	4a52      	ldr	r2, [pc, #328]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4413      	add	r3, r2
 8000cce:	460a      	mov	r2, r1
 8000cd0:	809a      	strh	r2, [r3, #4]
 8000cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cd6:	7db9      	ldrb	r1, [r7, #22]
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8000ce2:	e08f      	b.n	8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
            } else if (hcan == &hcan2) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	f040 808b 	bne.w	8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8000cee:	7c3b      	ldrb	r3, [r7, #16]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7c7b      	ldrb	r3, [r7, #17]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d00:	b291      	uxth	r1, r2
 8000d02:	4a44      	ldr	r2, [pc, #272]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000d04:	330b      	adds	r3, #11
 8000d06:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000d0a:	7cbb      	ldrb	r3, [r7, #18]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b219      	sxth	r1, r3
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	b211      	sxth	r1, r2
 8000d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000d1e:	330b      	adds	r3, #11
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	460a      	mov	r2, r1
 8000d26:	805a      	strh	r2, [r3, #2]
 8000d28:	7d3b      	ldrb	r3, [r7, #20]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b219      	sxth	r1, r3
 8000d2e:	7d7b      	ldrb	r3, [r7, #21]
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d36:	430a      	orrs	r2, r1
 8000d38:	b211      	sxth	r1, r2
 8000d3a:	4a36      	ldr	r2, [pc, #216]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000d3c:	330b      	adds	r3, #11
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4413      	add	r3, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	809a      	strh	r2, [r3, #4]
 8000d46:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d4a:	7db9      	ldrb	r1, [r7, #22]
 8000d4c:	4a31      	ldr	r2, [pc, #196]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000d4e:	330b      	adds	r3, #11
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	460a      	mov	r2, r1
 8000d56:	719a      	strb	r2, [r3, #6]
            break;
 8000d58:	e054      	b.n	8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 8000d5a:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d66:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 8000d6a:	e04c      	b.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000d6e:	3308      	adds	r3, #8
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d78:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8000d7c:	e043      	b.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        case CAN_STATUS_2_ID: {
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }
        case CAN_GAME_STATUS_ID: {
            uint8_t game_progress_temp = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
            uint8_t game_progress = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            memcpy(&game_progress_temp, &rx_data, 1);
 8000d88:	7c3b      	ldrb	r3, [r7, #16]
 8000d8a:	73fb      	strb	r3, [r7, #15]
            if(game_progress_temp > 127){
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da08      	bge.n	8000da6 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
                game_progress+=8;
 8000d94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d98:	3308      	adds	r3, #8
 8000d9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=128;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3b80      	subs	r3, #128	@ 0x80
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 63){
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000daa:	d908      	bls.n	8000dbe <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
                game_progress+=4;
 8000dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000db0:	3304      	adds	r3, #4
 8000db2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=64;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	3b40      	subs	r3, #64	@ 0x40
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 31){
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b1f      	cmp	r3, #31
 8000dc2:	d908      	bls.n	8000dd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c2>
                game_progress+=2;
 8000dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=32;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3b20      	subs	r3, #32
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 15){
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d908      	bls.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
                game_progress+=1;
 8000ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000de0:	3301      	adds	r3, #1
 8000de2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=16;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	3b10      	subs	r3, #16
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	73fb      	strb	r3, [r7, #15]
            }
            game_status.game_progress = game_progress;
 8000dee:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000df0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000df4:	7053      	strb	r3, [r2, #1]
            break;
 8000df6:	e006      	b.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }
        case CAN_COLOUR_TRANSMIT_ID: {
        	memcpy(&robot_status.robot_id, &rx_data, 1);
 8000df8:	7c3a      	ldrb	r2, [r7, #16]
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000dfc:	701a      	strb	r2, [r3, #0]
        	break;
 8000dfe:	e002      	b.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }

        default: {
            break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
            break;
 8000e04:	bf00      	nop
        }
    }
}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	@ 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000728 	.word	0x20000728
 8000e14:	20000160 	.word	0x20000160
 8000e18:	20000750 	.word	0x20000750
 8000e1c:	20000590 	.word	0x20000590
 8000e20:	20000570 	.word	0x20000570
 8000e24:	20000580 	.word	0x20000580

08000e28 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
 8000e42:	4613      	mov	r3, r2
 8000e44:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000e4a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8000e52:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8000e58:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8000e5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e62:	121b      	asrs	r3, r3, #8
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e6a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e72:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8000e74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e78:	121b      	asrs	r3, r3, #8
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e80:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e88:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8000e8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e96:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8000e98:	8c3b      	ldrh	r3, [r7, #32]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000e9e:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8000ea0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ea4:	121b      	asrs	r3, r3, #8
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000eac:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8000eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000eb4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d107      	bne.n	8000ecc <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000ec2:	4909      	ldr	r1, [pc, #36]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000ec4:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <CAN_DriveMotor+0xc8>)
 8000ec6:	f004 f8cd 	bl	8005064 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8000eca:	e009      	b.n	8000ee0 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d106      	bne.n	8000ee0 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <CAN_DriveMotor+0xc4>)
 8000ed8:	4903      	ldr	r1, [pc, #12]	@ (8000ee8 <CAN_DriveMotor+0xc0>)
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <CAN_DriveMotor+0xcc>)
 8000edc:	f004 f8c2 	bl	8005064 <HAL_CAN_AddTxMessage>
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	20000128 	.word	0x20000128
 8000ef0:	20000728 	.word	0x20000728
 8000ef4:	20000750 	.word	0x20000750

08000ef8 <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	460b      	mov	r3, r1
 8000f04:	71bb      	strb	r3, [r7, #6]
 8000f06:	4613      	mov	r3, r2
 8000f08:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	dc02      	bgt.n	8000f16 <CAN_defineMotor+0x1e>
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dc03      	bgt.n	8000f1c <CAN_defineMotor+0x24>
 8000f14:	e082      	b.n	800101c <CAN_defineMotor+0x124>
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d03a      	beq.n	8000f90 <CAN_defineMotor+0x98>
 8000f1a:	e07f      	b.n	800101c <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8000f1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	dc02      	bgt.n	8000f2a <CAN_defineMotor+0x32>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dc04      	bgt.n	8000f32 <CAN_defineMotor+0x3a>
 8000f28:	e02a      	b.n	8000f80 <CAN_defineMotor+0x88>
 8000f2a:	3b05      	subs	r3, #5
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d827      	bhi.n	8000f80 <CAN_defineMotor+0x88>
 8000f30:	e012      	b.n	8000f58 <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	1e5a      	subs	r2, r3, #1
 8000f36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f3a:	1e59      	subs	r1, r3, #1
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	4a39      	ldr	r2, [pc, #228]	@ (8001030 <CAN_defineMotor+0x138>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f875 	bl	8001040 <CAN_setMotorDefinition>
					break;
 8000f56:	e01a      	b.n	8000f8e <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f60:	1e59      	subs	r1, r3, #1
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	4a30      	ldr	r2, [pc, #192]	@ (8001030 <CAN_defineMotor+0x138>)
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f861 	bl	8001040 <CAN_setMotorDefinition>
					break;
 8000f7e:	e006      	b.n	8000f8e <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8000f80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f84:	4619      	mov	r1, r3
 8000f86:	482b      	ldr	r0, [pc, #172]	@ (8001034 <CAN_defineMotor+0x13c>)
 8000f88:	f000 fc2a 	bl	80017e0 <usart_printf>
					break;
 8000f8c:	bf00      	nop
				}
			}
			break;
 8000f8e:	e04b      	b.n	8001028 <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 8000f90:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d032      	beq.n	8000ffe <CAN_defineMotor+0x106>
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	dc37      	bgt.n	800100c <CAN_defineMotor+0x114>
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	dc02      	bgt.n	8000fa6 <CAN_defineMotor+0xae>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dc04      	bgt.n	8000fae <CAN_defineMotor+0xb6>
 8000fa4:	e032      	b.n	800100c <CAN_defineMotor+0x114>
 8000fa6:	3b05      	subs	r3, #5
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d82f      	bhi.n	800100c <CAN_defineMotor+0x114>
 8000fac:	e013      	b.n	8000fd6 <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fb6:	1e59      	subs	r1, r3, #1
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <CAN_defineMotor+0x138>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3304      	adds	r3, #4
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f836 	bl	8001040 <CAN_setMotorDefinition>
					break;
 8000fd4:	e021      	b.n	800101a <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fde:	1f59      	subs	r1, r3, #5
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	3308      	adds	r3, #8
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <CAN_defineMotor+0x138>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f822 	bl	8001040 <CAN_setMotorDefinition>
					break;
 8000ffc:	e00d      	b.n	800101a <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 8000ffe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <CAN_defineMotor+0x140>)
 8001006:	f000 fbeb 	bl	80017e0 <usart_printf>
					break;
 800100a:	e006      	b.n	800101a <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 800100c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001010:	4619      	mov	r1, r3
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <CAN_defineMotor+0x13c>)
 8001014:	f000 fbe4 	bl	80017e0 <usart_printf>
					break;
 8001018:	bf00      	nop
				}
			}
			break;
 800101a:	e005      	b.n	8001028 <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <CAN_defineMotor+0x144>)
 8001022:	f000 fbdd 	bl	80017e0 <usart_printf>
			break;
 8001026:	bf00      	nop
		}
	}
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000040 	.word	0x20000040
 8001034:	0800e364 	.word	0x0800e364
 8001038:	0800e3a4 	.word	0x0800e3a4
 800103c:	0800e3fc 	.word	0x0800e3fc

08001040 <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f993 3000 	ldrsb.w	r3, [r3]
 8001052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001056:	d104      	bne.n	8001062 <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 8001058:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 8001060:	e002      	b.n	8001068 <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 8001062:	4803      	ldr	r0, [pc, #12]	@ (8001070 <CAN_setMotorDefinition+0x30>)
 8001064:	f000 fbbc 	bl	80017e0 <usart_printf>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0800e43c 	.word	0x0800e43c

08001074 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	4603      	mov	r3, r0
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	460b      	mov	r3, r1
 800108c:	717b      	strb	r3, [r7, #5]
 800108e:	4613      	mov	r3, r2
 8001090:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	2b04      	cmp	r3, #4
 8001096:	f000 8142 	beq.w	800131e <CAN_setMotorCtrlVal+0x2aa>
 800109a:	2b04      	cmp	r3, #4
 800109c:	f300 81e1 	bgt.w	8001462 <CAN_setMotorCtrlVal+0x3ee>
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	dc02      	bgt.n	80010aa <CAN_setMotorCtrlVal+0x36>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc04      	bgt.n	80010b2 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80010a8:	e1db      	b.n	8001462 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	f000 8097 	beq.w	80011de <CAN_setMotorCtrlVal+0x16a>
}
 80010b0:	e1d7      	b.n	8001462 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80010b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	dc02      	bgt.n	80010c0 <CAN_setMotorCtrlVal+0x4c>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dc05      	bgt.n	80010ca <CAN_setMotorCtrlVal+0x56>
					break;
 80010be:	e08c      	b.n	80011da <CAN_setMotorCtrlVal+0x166>
 80010c0:	3b05      	subs	r3, #5
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	f200 8089 	bhi.w	80011da <CAN_setMotorCtrlVal+0x166>
 80010c8:	e042      	b.n	8001150 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010d2:	1e59      	subs	r1, r3, #1
 80010d4:	48bd      	ldr	r0, [pc, #756]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	1e5a      	subs	r2, r3, #1
 80010ea:	49b8      	ldr	r1, [pc, #736]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	49b3      	ldr	r1, [pc, #716]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	3302      	adds	r3, #2
 800110c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	49ad      	ldr	r1, [pc, #692]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	48a8      	ldr	r0, [pc, #672]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4403      	add	r3, r0
 8001136:	3306      	adds	r3, #6
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	79f8      	ldrb	r0, [r7, #7]
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	9100      	str	r1, [sp, #0]
 8001142:	462b      	mov	r3, r5
 8001144:	4622      	mov	r2, r4
 8001146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114a:	f7ff fe6d 	bl	8000e28 <CAN_DriveMotor>
					break;
 800114e:	e045      	b.n	80011dc <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001158:	1f59      	subs	r1, r3, #5
 800115a:	489c      	ldr	r0, [pc, #624]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4996      	ldr	r1, [pc, #600]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	4990      	ldr	r1, [pc, #576]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	330a      	adds	r3, #10
 8001196:	f9b3 5000 	ldrsh.w	r5, [r3]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	498b      	ldr	r1, [pc, #556]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	330c      	adds	r3, #12
 80011ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	4885      	ldr	r0, [pc, #532]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4403      	add	r3, r0
 80011c0:	330e      	adds	r3, #14
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	79f8      	ldrb	r0, [r7, #7]
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	9100      	str	r1, [sp, #0]
 80011cc:	462b      	mov	r3, r5
 80011ce:	4622      	mov	r2, r4
 80011d0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80011d4:	f7ff fe28 	bl	8000e28 <CAN_DriveMotor>
					break;
 80011d8:	e000      	b.n	80011dc <CAN_setMotorCtrlVal+0x168>
					break;
 80011da:	bf00      	nop
			break;
 80011dc:	e141      	b.n	8001462 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80011de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	f000 8097 	beq.w	8001316 <CAN_setMotorCtrlVal+0x2a2>
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	f300 8096 	bgt.w	800131a <CAN_setMotorCtrlVal+0x2a6>
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	dc02      	bgt.n	80011f8 <CAN_setMotorCtrlVal+0x184>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc05      	bgt.n	8001202 <CAN_setMotorCtrlVal+0x18e>
					break;
 80011f6:	e090      	b.n	800131a <CAN_setMotorCtrlVal+0x2a6>
 80011f8:	3b05      	subs	r3, #5
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	f200 808d 	bhi.w	800131a <CAN_setMotorCtrlVal+0x2a6>
 8001200:	e044      	b.n	800128c <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800120a:	1e59      	subs	r1, r3, #1
 800120c:	486f      	ldr	r0, [pc, #444]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	4969      	ldr	r1, [pc, #420]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	3308      	adds	r3, #8
 8001232:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	4964      	ldr	r1, [pc, #400]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	330a      	adds	r3, #10
 8001248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	495e      	ldr	r1, [pc, #376]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	330c      	adds	r3, #12
 800125e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	4859      	ldr	r0, [pc, #356]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4403      	add	r3, r0
 8001272:	330e      	adds	r3, #14
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	79f8      	ldrb	r0, [r7, #7]
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	462b      	mov	r3, r5
 8001280:	4622      	mov	r2, r4
 8001282:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001286:	f7ff fdcf 	bl	8000e28 <CAN_DriveMotor>
					break;
 800128a:	e047      	b.n	800131c <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001294:	1f59      	subs	r1, r3, #5
 8001296:	484d      	ldr	r0, [pc, #308]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3308      	adds	r3, #8
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	4947      	ldr	r1, [pc, #284]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3310      	adds	r3, #16
 80012bc:	f9b3 4000 	ldrsh.w	r4, [r3]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	1e5a      	subs	r2, r3, #1
 80012c4:	4941      	ldr	r1, [pc, #260]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3312      	adds	r3, #18
 80012d2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	493c      	ldr	r1, [pc, #240]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3314      	adds	r3, #20
 80012e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	1e5a      	subs	r2, r3, #1
 80012f0:	4836      	ldr	r0, [pc, #216]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4403      	add	r3, r0
 80012fc:	3316      	adds	r3, #22
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	79f8      	ldrb	r0, [r7, #7]
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	9100      	str	r1, [sp, #0]
 8001308:	462b      	mov	r3, r5
 800130a:	4622      	mov	r2, r4
 800130c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001310:	f7ff fd8a 	bl	8000e28 <CAN_DriveMotor>
					break;
 8001314:	e002      	b.n	800131c <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001316:	bf00      	nop
 8001318:	e0a3      	b.n	8001462 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800131a:	bf00      	nop
			break;
 800131c:	e0a1      	b.n	8001462 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 800131e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001322:	2b08      	cmp	r3, #8
 8001324:	f000 8099 	beq.w	800145a <CAN_setMotorCtrlVal+0x3e6>
 8001328:	2b08      	cmp	r3, #8
 800132a:	f300 8098 	bgt.w	800145e <CAN_setMotorCtrlVal+0x3ea>
 800132e:	2b04      	cmp	r3, #4
 8001330:	dc02      	bgt.n	8001338 <CAN_setMotorCtrlVal+0x2c4>
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc05      	bgt.n	8001342 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001336:	e092      	b.n	800145e <CAN_setMotorCtrlVal+0x3ea>
 8001338:	3b05      	subs	r3, #5
 800133a:	2b02      	cmp	r3, #2
 800133c:	f200 808f 	bhi.w	800145e <CAN_setMotorCtrlVal+0x3ea>
 8001340:	e046      	b.n	80013d0 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800134a:	1e59      	subs	r1, r3, #1
 800134c:	481f      	ldr	r0, [pc, #124]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	3304      	adds	r3, #4
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	4919      	ldr	r1, [pc, #100]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	4914      	ldr	r1, [pc, #80]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	330a      	adds	r3, #10
 8001388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	490e      	ldr	r1, [pc, #56]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	330c      	adds	r3, #12
 800139e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	4809      	ldr	r0, [pc, #36]	@ (80013cc <CAN_setMotorCtrlVal+0x358>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4403      	add	r3, r0
 80013b2:	330e      	adds	r3, #14
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	79f8      	ldrb	r0, [r7, #7]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	9100      	str	r1, [sp, #0]
 80013be:	462b      	mov	r3, r5
 80013c0:	4622      	mov	r2, r4
 80013c2:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80013c6:	f7ff fd2f 	bl	8000e28 <CAN_DriveMotor>
					break;
 80013ca:	e049      	b.n	8001460 <CAN_setMotorCtrlVal+0x3ec>
 80013cc:	20000130 	.word	0x20000130
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013d8:	1f59      	subs	r1, r3, #5
 80013da:	4824      	ldr	r0, [pc, #144]	@ (800146c <CAN_setMotorCtrlVal+0x3f8>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3308      	adds	r3, #8
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	491e      	ldr	r1, [pc, #120]	@ (800146c <CAN_setMotorCtrlVal+0x3f8>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3310      	adds	r3, #16
 8001400:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	4918      	ldr	r1, [pc, #96]	@ (800146c <CAN_setMotorCtrlVal+0x3f8>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	3312      	adds	r3, #18
 8001416:	f9b3 5000 	ldrsh.w	r5, [r3]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	4913      	ldr	r1, [pc, #76]	@ (800146c <CAN_setMotorCtrlVal+0x3f8>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3314      	adds	r3, #20
 800142c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <CAN_setMotorCtrlVal+0x3f8>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4403      	add	r3, r0
 8001440:	3316      	adds	r3, #22
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	79f8      	ldrb	r0, [r7, #7]
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	9100      	str	r1, [sp, #0]
 800144c:	462b      	mov	r3, r5
 800144e:	4622      	mov	r2, r4
 8001450:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001454:	f7ff fce8 	bl	8000e28 <CAN_DriveMotor>
					break;
 8001458:	e002      	b.n	8001460 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800145e:	bf00      	nop
			break;
 8001460:	bf00      	nop
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}
 800146a:	bf00      	nop
 800146c:	20000130 	.word	0x20000130

08001470 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b08b      	sub	sp, #44	@ 0x2c
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	eef0 6a40 	vmov.f32	s13, s0
 8001482:	eeb0 7a60 	vmov.f32	s14, s1
 8001486:	eef0 7a41 	vmov.f32	s15, s2
 800148a:	4623      	mov	r3, r4
 800148c:	75fb      	strb	r3, [r7, #23]
 800148e:	4603      	mov	r3, r0
 8001490:	75bb      	strb	r3, [r7, #22]
 8001492:	460b      	mov	r3, r1
 8001494:	757b      	strb	r3, [r7, #21]
 8001496:	4613      	mov	r3, r2
 8001498:	827b      	strh	r3, [r7, #18]
 800149a:	edc7 6a01 	vstr	s13, [r7, #4]
 800149e:	ed87 7a02 	vstr	s14, [r7, #8]
 80014a2:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	dc02      	bgt.n	80014bc <calcRPM_PID+0x4c>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dc04      	bgt.n	80014c4 <calcRPM_PID+0x54>
 80014ba:	e00d      	b.n	80014d8 <calcRPM_PID+0x68>
 80014bc:	3b03      	subs	r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d80a      	bhi.n	80014d8 <calcRPM_PID+0x68>
 80014c2:	e004      	b.n	80014ce <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80014c4:	7d7b      	ldrb	r3, [r7, #21]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014cc:	e009      	b.n	80014e2 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80014ce:	7d7b      	ldrb	r3, [r7, #21]
 80014d0:	3303      	adds	r3, #3
 80014d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014d6:	e004      	b.n	80014e2 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80014d8:	7d7b      	ldrb	r3, [r7, #21]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014e0:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80014e2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80014e6:	7ffa      	ldrb	r2, [r7, #31]
 80014e8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80014ec:	4c70      	ldr	r4, [pc, #448]	@ (80016b0 <calcRPM_PID+0x240>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	4403      	add	r3, r0
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4423      	add	r3, r4
 80014fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001502:	7ffa      	ldrb	r2, [r7, #31]
 8001504:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001508:	1ac9      	subs	r1, r1, r3
 800150a:	4c6a      	ldr	r4, [pc, #424]	@ (80016b4 <calcRPM_PID+0x244>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	4403      	add	r3, r0
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4423      	add	r3, r4
 800151c:	3304      	adds	r3, #4
 800151e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001520:	7ffa      	ldrb	r2, [r7, #31]
 8001522:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001526:	4863      	ldr	r0, [pc, #396]	@ (80016b4 <calcRPM_PID+0x244>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	440b      	add	r3, r1
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4403      	add	r3, r0
 8001538:	3308      	adds	r3, #8
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	7ffa      	ldrb	r2, [r7, #31]
 800153e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001542:	4c5c      	ldr	r4, [pc, #368]	@ (80016b4 <calcRPM_PID+0x244>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	4403      	add	r3, r0
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4423      	add	r3, r4
 8001554:	3304      	adds	r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	7ffa      	ldrb	r2, [r7, #31]
 800155a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800155e:	4419      	add	r1, r3
 8001560:	4c54      	ldr	r4, [pc, #336]	@ (80016b4 <calcRPM_PID+0x244>)
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	4403      	add	r3, r0
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4423      	add	r3, r4
 8001572:	3308      	adds	r3, #8
 8001574:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001576:	7ffa      	ldrb	r2, [r7, #31]
 8001578:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800157c:	484d      	ldr	r0, [pc, #308]	@ (80016b4 <calcRPM_PID+0x244>)
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	440b      	add	r3, r1
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4403      	add	r3, r0
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	7ffa      	ldrb	r2, [r7, #31]
 8001592:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001596:	4c46      	ldr	r4, [pc, #280]	@ (80016b0 <calcRPM_PID+0x240>)
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	4403      	add	r3, r0
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4423      	add	r3, r4
 80015a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ac:	7ffa      	ldrb	r2, [r7, #31]
 80015ae:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80015b2:	1ac9      	subs	r1, r1, r3
 80015b4:	4c3f      	ldr	r4, [pc, #252]	@ (80016b4 <calcRPM_PID+0x244>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	4403      	add	r3, r0
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4423      	add	r3, r4
 80015c6:	330c      	adds	r3, #12
 80015c8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80015ca:	7ffa      	ldrb	r2, [r7, #31]
 80015cc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015d0:	4837      	ldr	r0, [pc, #220]	@ (80016b0 <calcRPM_PID+0x240>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	440b      	add	r3, r1
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4403      	add	r3, r0
 80015e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e6:	7ffa      	ldrb	r2, [r7, #31]
 80015e8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015ec:	461c      	mov	r4, r3
 80015ee:	4831      	ldr	r0, [pc, #196]	@ (80016b4 <calcRPM_PID+0x244>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4403      	add	r3, r0
 8001600:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001602:	ed97 7a01 	vldr	s14, [r7, #4]
 8001606:	7ffa      	ldrb	r2, [r7, #31]
 8001608:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800160c:	4829      	ldr	r0, [pc, #164]	@ (80016b4 <calcRPM_PID+0x244>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	440b      	add	r3, r1
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4403      	add	r3, r0
 800161e:	3304      	adds	r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001632:	7ffa      	ldrb	r2, [r7, #31]
 8001634:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001638:	481e      	ldr	r0, [pc, #120]	@ (80016b4 <calcRPM_PID+0x244>)
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	440b      	add	r3, r1
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4403      	add	r3, r0
 800164a:	3308      	adds	r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001662:	7ffa      	ldrb	r2, [r7, #31]
 8001664:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <calcRPM_PID+0x244>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	440b      	add	r3, r1
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4403      	add	r3, r0
 800167a:	330c      	adds	r3, #12
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001698:	7dbb      	ldrb	r3, [r7, #22]
 800169a:	6a39      	ldr	r1, [r7, #32]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f80b 	bl	80016b8 <applyCtrlLimit>
 80016a2:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 80016a4:	6a3b      	ldr	r3, [r7, #32]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	372c      	adds	r7, #44	@ 0x2c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000160 	.word	0x20000160
 80016b4:	20000210 	.word	0x20000210

080016b8 <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d009      	beq.n	80016de <applyCtrlLimit+0x26>
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	dc29      	bgt.n	8001722 <applyCtrlLimit+0x6a>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	dc02      	bgt.n	80016d8 <applyCtrlLimit+0x20>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dc03      	bgt.n	80016de <applyCtrlLimit+0x26>
 80016d6:	e024      	b.n	8001722 <applyCtrlLimit+0x6a>
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d00f      	beq.n	80016fc <applyCtrlLimit+0x44>
 80016dc:	e021      	b.n	8001722 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016e4:	dd03      	ble.n	80016ee <applyCtrlLimit+0x36>
				val = 16384;
 80016e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016ea:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80016ec:	e016      	b.n	800171c <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80016f4:	da12      	bge.n	800171c <applyCtrlLimit+0x64>
				val = -16384;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <applyCtrlLimit+0x78>)
 80016f8:	603b      	str	r3, [r7, #0]
			break;
 80016fa:	e00f      	b.n	800171c <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001702:	4293      	cmp	r3, r2
 8001704:	dd03      	ble.n	800170e <applyCtrlLimit+0x56>
				val = 25000;
 8001706:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800170a:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 800170c:	e008      	b.n	8001720 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <applyCtrlLimit+0x7c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	da04      	bge.n	8001720 <applyCtrlLimit+0x68>
				val = -25000;
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <applyCtrlLimit+0x7c>)
 8001718:	603b      	str	r3, [r7, #0]
			break;
 800171a:	e001      	b.n	8001720 <applyCtrlLimit+0x68>
			break;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <applyCtrlLimit+0x6a>
			break;
 8001720:	bf00      	nop
		}
	}
	return val;
 8001722:	683b      	ldr	r3, [r7, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	ffffc000 	.word	0xffffc000
 8001734:	ffff9e58 	.word	0xffff9e58

08001738 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	eef0 6a40 	vmov.f32	s13, s0
 800174a:	eeb0 7a60 	vmov.f32	s14, s1
 800174e:	eef0 7a41 	vmov.f32	s15, s2
 8001752:	4623      	mov	r3, r4
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	4603      	mov	r3, r0
 8001758:	75bb      	strb	r3, [r7, #22]
 800175a:	460b      	mov	r3, r1
 800175c:	757b      	strb	r3, [r7, #21]
 800175e:	4613      	mov	r3, r2
 8001760:	827b      	strh	r3, [r7, #18]
 8001762:	edc7 6a01 	vstr	s13, [r7, #4]
 8001766:	ed87 7a02 	vstr	s14, [r7, #8]
 800176a:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 800176e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001772:	ed97 7a02 	vldr	s14, [r7, #8]
 8001776:	edd7 7a03 	vldr	s15, [r7, #12]
 800177a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800177e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001782:	7db9      	ldrb	r1, [r7, #22]
 8001784:	7df8      	ldrb	r0, [r7, #23]
 8001786:	eeb0 0a66 	vmov.f32	s0, s13
 800178a:	eef0 0a47 	vmov.f32	s1, s14
 800178e:	eeb0 1a67 	vmov.f32	s2, s15
 8001792:	f7ff fe6d 	bl	8001470 <calcRPM_PID>
 8001796:	4603      	mov	r3, r0
 8001798:	b21b      	sxth	r3, r3
 800179a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800179e:	7db9      	ldrb	r1, [r7, #22]
 80017a0:	7df8      	ldrb	r0, [r7, #23]
 80017a2:	f7ff fc67 	bl	8001074 <CAN_setMotorCtrlVal>
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
	...

080017b0 <usart_Init>:
0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78,
};

void usart_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80017b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b8:	4905      	ldr	r1, [pc, #20]	@ (80017d0 <usart_Init+0x20>)
 80017ba:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <usart_Init+0x24>)
 80017bc:	f007 ffc0 	bl	8009740 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80017c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c4:	4904      	ldr	r1, [pc, #16]	@ (80017d8 <usart_Init+0x28>)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <usart_Init+0x2c>)
 80017c8:	f007 ffba 	bl	8009740 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000370 	.word	0x20000370
 80017d4:	20000aac 	.word	0x20000aac
 80017d8:	20000470 	.word	0x20000470
 80017dc:	20000b3c 	.word	0x20000b3c

080017e0 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80017e0:	b40f      	push	{r0, r1, r2, r3}
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <usart_printf+0x3c>)
 80017ec:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <usart_printf+0x3c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	480a      	ldr	r0, [pc, #40]	@ (8001820 <usart_printf+0x40>)
 80017f6:	f00c f8c5 	bl	800d984 <vsiprintf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <usart_printf+0x44>)
 8001800:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <usart_printf+0x44>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4905      	ldr	r1, [pc, #20]	@ (8001820 <usart_printf+0x40>)
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <usart_printf+0x48>)
 800180c:	f007 ff28 	bl	8009660 <HAL_UART_Transmit_DMA>
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001818:	b004      	add	sp, #16
 800181a:	4770      	bx	lr
 800181c:	200005c0 	.word	0x200005c0
 8001820:	200005c4 	.word	0x200005c4
 8001824:	200006c4 	.word	0x200006c4
 8001828:	20000aac 	.word	0x20000aac

0800182c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_UARTEx_RxEventCallback+0x30>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d109      	bne.n	8001854 <HAL_UARTEx_RxEventCallback+0x28>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001844:	4906      	ldr	r1, [pc, #24]	@ (8001860 <HAL_UARTEx_RxEventCallback+0x34>)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UARTEx_RxEventCallback+0x30>)
 8001848:	f007 ff7a 	bl	8009740 <HAL_UARTEx_ReceiveToIdle_DMA>
		memcpy(&cv_receive,&RxBuff_2,4);
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <HAL_UARTEx_RxEventCallback+0x34>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_UARTEx_RxEventCallback+0x38>)
 8001852:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	*/
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000b3c 	.word	0x20000b3c
 8001860:	20000470 	.word	0x20000470
 8001864:	200005bc 	.word	0x200005bc

08001868 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	@ (80018d4 <can_filter_init+0x6c>)
 8001898:	f003 fac0 	bl	8004e1c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800189c:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <can_filter_init+0x6c>)
 800189e:	f003 fb9d 	bl	8004fdc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80018a2:	2102      	movs	r1, #2
 80018a4:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <can_filter_init+0x6c>)
 80018a6:	f003 fdcf 	bl	8005448 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80018aa:	230e      	movs	r3, #14
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80018ae:	230e      	movs	r3, #14
 80018b0:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <can_filter_init+0x70>)
 80018b8:	f003 fab0 	bl	8004e1c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80018bc:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <can_filter_init+0x70>)
 80018be:	f003 fb8d 	bl	8004fdc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80018c2:	2102      	movs	r1, #2
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <can_filter_init+0x70>)
 80018c6:	f003 fdbf 	bl	8005448 <HAL_CAN_ActivateNotification>
}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	@ 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000728 	.word	0x20000728
 80018d8:	20000750 	.word	0x20000750

080018dc <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <imu_pwm_set+0x1c>)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40014400 	.word	0x40014400

080018fc <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <RC_init+0xac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <RC_init+0xac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001918:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <RC_init+0xac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <RC_init+0xac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0210 	orr.w	r2, r2, #16
 8001928:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <RC_init+0xb0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <RC_init+0xb0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800193a:	e007      	b.n	800194c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <RC_init+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <RC_init+0xb0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <RC_init+0xb0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <RC_init+0xb0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <RC_init+0xb4>)
 8001960:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <RC_init+0xb0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <RC_init+0xb0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <RC_init+0xb0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <RC_init+0xb0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <RC_init+0xb0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001988:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <RC_init+0xb0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <RC_init+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000af4 	.word	0x20000af4
 80019ac:	20000c44 	.word	0x20000c44
 80019b0:	40004804 	.word	0x40004804

080019b4 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80019bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c0:	f009 f91e 	bl	800ac00 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80019c4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001a68 <imu_temp_control_task+0xb4>
 80019c8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001a6c <imu_temp_control_task+0xb8>
 80019cc:	4a28      	ldr	r2, [pc, #160]	@ (8001a70 <imu_temp_control_task+0xbc>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4828      	ldr	r0, [pc, #160]	@ (8001a74 <imu_temp_control_task+0xc0>)
 80019d2:	f001 f959 	bl	8002c88 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <imu_temp_control_task+0xc4>)
 80019d8:	2210      	movs	r2, #16
 80019da:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019dc:	4826      	ldr	r0, [pc, #152]	@ (8001a78 <imu_temp_control_task+0xc4>)
 80019de:	f006 fb26 	bl	800802e <HAL_SPI_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80019e8:	f001 f948 	bl	8002c7c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80019ec:	2000      	movs	r0, #0
 80019ee:	f00a fa25 	bl	800be3c <pcTaskGetName>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00a fab5 	bl	800bf64 <xTaskGetHandle>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <imu_temp_control_task+0xc8>)
 80019fe:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <imu_temp_control_task+0xcc>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001a06:	bf00      	nop
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f00a fed5 	bl	800c7bc <ulTaskNotifyTake>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d1f7      	bne.n	8001a08 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001a18:	f7fe ffa8 	bl	800096c <IMU_get_temp>
 8001a1c:	eef0 7a40 	vmov.f32	s15, s0
 8001a20:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001a84 <imu_temp_control_task+0xd0>
 8001a24:	eeb0 0a67 	vmov.f32	s0, s15
 8001a28:	4812      	ldr	r0, [pc, #72]	@ (8001a74 <imu_temp_control_task+0xc0>)
 8001a2a:	f001 f984 	bl	8002d36 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <imu_temp_control_task+0xc0>)
 8001a30:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d503      	bpl.n	8001a46 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <imu_temp_control_task+0xc0>)
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <imu_temp_control_task+0xc0>)
 8001a48:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a50:	ee17 3a90 	vmov	r3, s15
 8001a54:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff3f 	bl	80018dc <imu_pwm_set>
        osDelay(5);
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f009 f8ce 	bl	800ac00 <osDelay>
    {
 8001a64:	e7cf      	b.n	8001a06 <imu_temp_control_task+0x52>
 8001a66:	bf00      	nop
 8001a68:	45898000 	.word	0x45898000
 8001a6c:	458ca000 	.word	0x458ca000
 8001a70:	0800e50c 	.word	0x0800e50c
 8001a74:	200006d0 	.word	0x200006d0
 8001a78:	200007cc 	.word	0x200007cc
 8001a7c:	200006c8 	.word	0x200006c8
 8001a80:	200006cc 	.word	0x200006cc
 8001a84:	42200000 	.word	0x42200000

08001a88 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d016      	beq.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001aa6:	f00a fdfb 	bl	800c6a0 <xTaskGetSchedulerState>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d011      	beq.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00a fecc 	bl	800c854 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x4c>
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_GPIO_EXTI_Callback+0x64>)
 8001ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000000e 	.word	0x2000000e
 8001ae0:	200006cc 	.word	0x200006cc
 8001ae4:	200006c8 	.word	0x200006c8
 8001ae8:	20000718 	.word	0x20000718
 8001aec:	e000ed04 	.word	0xe000ed04

08001af0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 8001afe:	f000 f8bd 	bl	8001c7c <ist8310_GPIO_init>
    ist8310_com_init();
 8001b02:	f000 f8c2 	bl	8001c8a <ist8310_com_init>

    ist8310_RST_L();
 8001b06:	f000 f97b 	bl	8001e00 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <ist8310_init+0xdc>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f916 	bl	8001d40 <ist8310_delay_ms>
    ist8310_RST_H();
 8001b14:	f000 f968 	bl	8001de8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8001b18:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <ist8310_init+0xdc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f90f 	bl	8001d40 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f8b8 	bl	8001c98 <ist8310_IIC_read_single_reg>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d001      	beq.n	8001b36 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8001b32:	2340      	movs	r3, #64	@ 0x40
 8001b34:	e045      	b.n	8001bc2 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e03e      	b.n	8001bba <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	4924      	ldr	r1, [pc, #144]	@ (8001bd0 <ist8310_init+0xe0>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	7818      	ldrb	r0, [r3, #0]
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	4920      	ldr	r1, [pc, #128]	@ (8001bd0 <ist8310_init+0xe0>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	3301      	adds	r3, #1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f000 f8b8 	bl	8001cd0 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <ist8310_init+0xe4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f8f9 	bl	8001d5c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4918      	ldr	r1, [pc, #96]	@ (8001bd0 <ist8310_init+0xe0>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f88d 	bl	8001c98 <ist8310_IIC_read_single_reg>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <ist8310_init+0xe4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f8e8 	bl	8001d5c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	4910      	ldr	r1, [pc, #64]	@ (8001bd0 <ist8310_init+0xe0>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	3301      	adds	r3, #1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	79ba      	ldrb	r2, [r7, #6]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d008      	beq.n	8001bb4 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	490a      	ldr	r1, [pc, #40]	@ (8001bd0 <ist8310_init+0xe0>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	3302      	adds	r3, #2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	e006      	b.n	8001bc2 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d9bd      	bls.n	8001b3c <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800e524 	.word	0x0800e524
 8001bd0:	0800e518 	.word	0x0800e518
 8001bd4:	0800e525 	.word	0x0800e525

08001bd8 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	2206      	movs	r2, #6
 8001bea:	4619      	mov	r1, r3
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 f88b 	bl	8001d08 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001bf2:	7a7b      	ldrb	r3, [r7, #9]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	7a3b      	ldrb	r3, [r7, #8]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001c78 <ist8310_read_mag+0xa0>
 8001c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	7abb      	ldrb	r3, [r7, #10]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001c78 <ist8310_read_mag+0xa0>
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	7b3b      	ldrb	r3, [r7, #12]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8001c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3308      	adds	r3, #8
 8001c62:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001c78 <ist8310_read_mag+0xa0>
 8001c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	3e99999a 	.word	0x3e99999a

08001c7c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	230a      	movs	r3, #10
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	f107 030f 	add.w	r3, r7, #15
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	211c      	movs	r1, #28
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <ist8310_IIC_read_single_reg+0x34>)
 8001cbe:	f004 ff51 	bl	8006b64 <HAL_I2C_Mem_Read>
    return res;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000778 	.word	0x20000778

08001cd0 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	1dbb      	adds	r3, r7, #6
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	211c      	movs	r1, #28
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <ist8310_IIC_write_single_reg+0x34>)
 8001cf6:	f004 fe3b 	bl	8006970 <HAL_I2C_Mem_Write>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000778 	.word	0x20000778

08001d08 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af04      	add	r7, sp, #16
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	210a      	movs	r1, #10
 8001d22:	9102      	str	r1, [sp, #8]
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	211c      	movs	r1, #28
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <ist8310_IIC_read_muli_reg+0x34>)
 8001d30:	f004 ff18 	bl	8006b64 <HAL_I2C_Mem_Read>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000778 	.word	0x20000778

08001d40 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 ff45 	bl	8004bdc <HAL_Delay>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <ist8310_delay_us+0x88>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <ist8310_delay_us+0x88>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001d92:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <ist8310_delay_us+0x88>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d0f8      	beq.n	8001d92 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d206      	bcs.n	8001db6 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4413      	add	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	e007      	b.n	8001dc6 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad2      	subs	r2, r2, r3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d200      	bcs.n	8001dd4 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 8001dd2:	e7de      	b.n	8001d92 <ist8310_delay_us+0x36>
            {
                break;
 8001dd4:	bf00      	nop
            }
        }
    }
}
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	@ 0x40
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <ist8310_RST_H+0x14>)
 8001df2:	f004 fc47 	bl	8006684 <HAL_GPIO_WritePin>
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021800 	.word	0x40021800

08001e00 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2140      	movs	r1, #64	@ 0x40
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <ist8310_RST_L+0x14>)
 8001e0a:	f004 fc3b 	bl	8006684 <HAL_GPIO_WritePin>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021800 	.word	0x40021800

08001e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e1c:	f002 fe6c 	bl	8004af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e20:	f000 f868 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e24:	f000 fd02 	bl	800282c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e28:	f000 fc9a 	bl	8002760 <MX_DMA_Init>
  MX_CAN1_Init();
 8001e2c:	f000 f8ce 	bl	8001fcc <MX_CAN1_Init>
  MX_CAN2_Init();
 8001e30:	f000 f902 	bl	8002038 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001e34:	f000 f964 	bl	8002100 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001e38:	f000 fa40 	bl	80022bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e3c:	f000 fc10 	bl	8002660 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001e40:	f000 fc64 	bl	800270c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001e44:	f000 f992 	bl	800216c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001e48:	f000 fb20 	bl	800248c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001e4c:	f000 fc32 	bl	80026b4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001e50:	f000 fbb8 	bl	80025c4 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001e54:	f000 f926 	bl	80020a4 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001e58:	f000 faa8 	bl	80023ac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001e5c:	f7ff fd04 	bl	8001868 <can_filter_init>
  remote_control_init();
 8001e60:	f001 fc7c 	bl	800375c <remote_control_init>
  usart_Init();
 8001e64:	f7ff fca4 	bl	80017b0 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001e68:	f001 fc86 	bl	8003778 <get_remote_control_point>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <main+0xa8>)
 8001e70:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e72:	f008 fde9 	bl	800aa48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001e76:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <main+0xac>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <main+0xb0>)
 8001e7c:	f008 fe2e 	bl	800aadc <osThreadNew>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <main+0xb4>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <main+0xb8>)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4812      	ldr	r0, [pc, #72]	@ (8001ed4 <main+0xbc>)
 8001e8c:	f008 fe26 	bl	800aadc <osThreadNew>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <main+0xc0>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <main+0xc4>)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <main+0xc8>)
 8001e9c:	f008 fe1e 	bl	800aadc <osThreadNew>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <main+0xcc>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <main+0xd0>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4810      	ldr	r0, [pc, #64]	@ (8001eec <main+0xd4>)
 8001eac:	f008 fe16 	bl	800aadc <osThreadNew>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <main+0xd8>)
 8001eb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001eb6:	f008 fdeb 	bl	800aa90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <main+0xa2>
 8001ebe:	bf00      	nop
 8001ec0:	20000d74 	.word	0x20000d74
 8001ec4:	0800e528 	.word	0x0800e528
 8001ec8:	08002a21 	.word	0x08002a21
 8001ecc:	20000d64 	.word	0x20000d64
 8001ed0:	0800e54c 	.word	0x0800e54c
 8001ed4:	08002ad9 	.word	0x08002ad9
 8001ed8:	20000d68 	.word	0x20000d68
 8001edc:	0800e570 	.word	0x0800e570
 8001ee0:	080019b5 	.word	0x080019b5
 8001ee4:	20000d6c 	.word	0x20000d6c
 8001ee8:	0800e594 	.word	0x0800e594
 8001eec:	08002c6d 	.word	0x08002c6d
 8001ef0:	20000d70 	.word	0x20000d70

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b094      	sub	sp, #80	@ 0x50
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2230      	movs	r2, #48	@ 0x30
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00b fd48 	bl	800d998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	4a28      	ldr	r2, [pc, #160]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <SystemClock_Config+0xd0>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <SystemClock_Config+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001f64:	2306      	movs	r3, #6
 8001f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f68:	23a8      	movs	r3, #168	@ 0xa8
 8001f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f70:	2304      	movs	r3, #4
 8001f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f005 fbd9 	bl	8007730 <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f84:	f000 fe7a 	bl	8002c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2105      	movs	r1, #5
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f005 fe3a 	bl	8007c20 <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fb2:	f000 fe63 	bl	8002c7c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001fb6:	f005 ff19 	bl	8007dec <HAL_RCC_EnableCSS>
}
 8001fba:	bf00      	nop
 8001fbc:	3750      	adds	r7, #80	@ 0x50
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <MX_CAN1_Init+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001fd8:	2203      	movs	r2, #3
 8001fda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001fea:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001fee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001ff2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ff6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <MX_CAN1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <MX_CAN1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <MX_CAN1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <MX_CAN1_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <MX_CAN1_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <MX_CAN1_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	@ (8002030 <MX_CAN1_Init+0x64>)
 800201e:	f002 fe01 	bl	8004c24 <HAL_CAN_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002028:	f000 fe28 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000728 	.word	0x20000728
 8002034:	40006400 	.word	0x40006400

08002038 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <MX_CAN2_Init+0x64>)
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <MX_CAN2_Init+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <MX_CAN2_Init+0x64>)
 8002044:	2203      	movs	r2, #3
 8002046:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <MX_CAN2_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800204e:	4b13      	ldr	r3, [pc, #76]	@ (800209c <MX_CAN2_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_CAN2_Init+0x64>)
 8002056:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800205a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <MX_CAN2_Init+0x64>)
 800205e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002062:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <MX_CAN2_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_CAN2_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <MX_CAN2_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_CAN2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <MX_CAN2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_CAN2_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	@ (800209c <MX_CAN2_Init+0x64>)
 800208a:	f002 fdcb 	bl	8004c24 <HAL_CAN_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002094:	f000 fdf2 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000750 	.word	0x20000750
 80020a0:	40006800 	.word	0x40006800

080020a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020aa:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <MX_I2C3_Init+0x54>)
 80020ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020b0:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <MX_I2C3_Init+0x58>)
 80020b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020e0:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <MX_I2C3_Init+0x50>)
 80020e2:	f004 fb01 	bl	80066e8 <HAL_I2C_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80020ec:	f000 fdc6 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000778 	.word	0x20000778
 80020f8:	40005c00 	.word	0x40005c00
 80020fc:	00061a80 	.word	0x00061a80

08002100 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002106:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <MX_SPI1_Init+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_SPI1_Init+0x64>)
 800210c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <MX_SPI1_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002120:	2202      	movs	r2, #2
 8002122:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_SPI1_Init+0x64>)
 800212c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002130:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002134:	2238      	movs	r2, #56	@ 0x38
 8002136:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <MX_SPI1_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_SPI1_Init+0x64>)
 800214c:	220a      	movs	r2, #10
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_SPI1_Init+0x64>)
 8002152:	f005 ff6c 	bl	800802e <HAL_SPI_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800215c:	f000 fd8e 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200007cc 	.word	0x200007cc
 8002168:	40013000 	.word	0x40013000

0800216c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b092      	sub	sp, #72	@ 0x48
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2220      	movs	r2, #32
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f00b fbfe 	bl	800d998 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800219c:	4b45      	ldr	r3, [pc, #276]	@ (80022b4 <MX_TIM1_Init+0x148>)
 800219e:	4a46      	ldr	r2, [pc, #280]	@ (80022b8 <MX_TIM1_Init+0x14c>)
 80021a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80021a2:	4b44      	ldr	r3, [pc, #272]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021a4:	2253      	movs	r2, #83	@ 0x53
 80021a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80021ae:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80021b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b6:	4b3f      	ldr	r3, [pc, #252]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021bc:	4b3d      	ldr	r3, [pc, #244]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b3c      	ldr	r3, [pc, #240]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c8:	483a      	ldr	r0, [pc, #232]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021ca:	f006 fafd 	bl	80087c8 <HAL_TIM_PWM_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80021d4:	f000 fd52 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021e4:	4619      	mov	r1, r3
 80021e6:	4833      	ldr	r0, [pc, #204]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80021e8:	f007 f91c 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80021f2:	f000 fd43 	bl	8002c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f6:	2360      	movs	r3, #96	@ 0x60
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002216:	2200      	movs	r2, #0
 8002218:	4619      	mov	r1, r3
 800221a:	4826      	ldr	r0, [pc, #152]	@ (80022b4 <MX_TIM1_Init+0x148>)
 800221c:	f006 fc5c 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002226:	f000 fd29 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800222a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222e:	2204      	movs	r2, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4820      	ldr	r0, [pc, #128]	@ (80022b4 <MX_TIM1_Init+0x148>)
 8002234:	f006 fc50 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800223e:	f000 fd1d 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002246:	2208      	movs	r2, #8
 8002248:	4619      	mov	r1, r3
 800224a:	481a      	ldr	r0, [pc, #104]	@ (80022b4 <MX_TIM1_Init+0x148>)
 800224c:	f006 fc44 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002256:	f000 fd11 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800225a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225e:	220c      	movs	r2, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4814      	ldr	r0, [pc, #80]	@ (80022b4 <MX_TIM1_Init+0x148>)
 8002264:	f006 fc38 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800226e:	f000 fd05 	bl	8002c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4807      	ldr	r0, [pc, #28]	@ (80022b4 <MX_TIM1_Init+0x148>)
 8002296:	f007 f941 	bl	800951c <HAL_TIMEx_ConfigBreakDeadTime>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80022a0:	f000 fcec 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022a4:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <MX_TIM1_Init+0x148>)
 80022a6:	f002 f80f 	bl	80042c8 <HAL_TIM_MspPostInit>

}
 80022aa:	bf00      	nop
 80022ac:	3748      	adds	r7, #72	@ 0x48
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000824 	.word	0x20000824
 80022b8:	40010000 	.word	0x40010000

080022bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08e      	sub	sp, #56	@ 0x38
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 80022ee:	4a2e      	ldr	r2, [pc, #184]	@ (80023a8 <MX_TIM4_Init+0xec>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80022f2:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 80022f4:	2253      	movs	r2, #83	@ 0x53
 80022f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002300:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002304:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002306:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 800230e:	2280      	movs	r2, #128	@ 0x80
 8002310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002312:	4824      	ldr	r0, [pc, #144]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002314:	f006 f9a0 	bl	8008658 <HAL_TIM_Base_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800231e:	f000 fcad 	bl	8002c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232c:	4619      	mov	r1, r3
 800232e:	481d      	ldr	r0, [pc, #116]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002330:	f006 fc94 	bl	8008c5c <HAL_TIM_ConfigClockSource>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800233a:	f000 fc9f 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800233e:	4819      	ldr	r0, [pc, #100]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002340:	f006 fa42 	bl	80087c8 <HAL_TIM_PWM_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800234a:	f000 fc97 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	4619      	mov	r1, r3
 800235c:	4811      	ldr	r0, [pc, #68]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 800235e:	f007 f861 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002368:	f000 fc88 	bl	8002c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236c:	2360      	movs	r3, #96	@ 0x60
 800236e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002370:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2208      	movs	r2, #8
 8002382:	4619      	mov	r1, r3
 8002384:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002386:	f006 fba7 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002390:	f000 fc74 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <MX_TIM4_Init+0xe8>)
 8002396:	f001 ff97 	bl	80042c8 <HAL_TIM_MspPostInit>

}
 800239a:	bf00      	nop
 800239c:	3738      	adds	r7, #56	@ 0x38
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000086c 	.word	0x2000086c
 80023a8:	40000800 	.word	0x40000800

080023ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002488 <MX_TIM5_Init+0xdc>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023d6:	2253      	movs	r2, #83	@ 0x53
 80023d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023e2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80023e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023f4:	4823      	ldr	r0, [pc, #140]	@ (8002484 <MX_TIM5_Init+0xd8>)
 80023f6:	f006 f9e7 	bl	80087c8 <HAL_TIM_PWM_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002400:	f000 fc3c 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800240c:	f107 0320 	add.w	r3, r7, #32
 8002410:	4619      	mov	r1, r3
 8002412:	481c      	ldr	r0, [pc, #112]	@ (8002484 <MX_TIM5_Init+0xd8>)
 8002414:	f007 f806 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800241e:	f000 fc2d 	bl	8002c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002422:	2360      	movs	r3, #96	@ 0x60
 8002424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4812      	ldr	r0, [pc, #72]	@ (8002484 <MX_TIM5_Init+0xd8>)
 800243a:	f006 fb4d 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002444:	f000 fc1a 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2204      	movs	r2, #4
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_TIM5_Init+0xd8>)
 8002450:	f006 fb42 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800245a:	f000 fc0f 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2208      	movs	r2, #8
 8002462:	4619      	mov	r1, r3
 8002464:	4807      	ldr	r0, [pc, #28]	@ (8002484 <MX_TIM5_Init+0xd8>)
 8002466:	f006 fb37 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002470:	f000 fc04 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002474:	4803      	ldr	r0, [pc, #12]	@ (8002484 <MX_TIM5_Init+0xd8>)
 8002476:	f001 ff27 	bl	80042c8 <HAL_TIM_MspPostInit>

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200008b4 	.word	0x200008b4
 8002488:	40000c00 	.word	0x40000c00

0800248c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b092      	sub	sp, #72	@ 0x48
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	615a      	str	r2, [r3, #20]
 80024ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2220      	movs	r2, #32
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00b fa6e 	bl	800d998 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024bc:	4b3f      	ldr	r3, [pc, #252]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024be:	4a40      	ldr	r2, [pc, #256]	@ (80025c0 <MX_TIM8_Init+0x134>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80024c2:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024c4:	2253      	movs	r2, #83	@ 0x53
 80024c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024d0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80024d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024dc:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e2:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024e8:	4834      	ldr	r0, [pc, #208]	@ (80025bc <MX_TIM8_Init+0x130>)
 80024ea:	f006 f96d 	bl	80087c8 <HAL_TIM_PWM_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80024f4:	f000 fbc2 	bl	8002c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002500:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002504:	4619      	mov	r1, r3
 8002506:	482d      	ldr	r0, [pc, #180]	@ (80025bc <MX_TIM8_Init+0x130>)
 8002508:	f006 ff8c 	bl	8009424 <HAL_TIMEx_MasterConfigSynchronization>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002512:	f000 fbb3 	bl	8002c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002516:	2360      	movs	r3, #96	@ 0x60
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	4820      	ldr	r0, [pc, #128]	@ (80025bc <MX_TIM8_Init+0x130>)
 800253c:	f006 facc 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002546:	f000 fb99 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800254a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254e:	2204      	movs	r2, #4
 8002550:	4619      	mov	r1, r3
 8002552:	481a      	ldr	r0, [pc, #104]	@ (80025bc <MX_TIM8_Init+0x130>)
 8002554:	f006 fac0 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800255e:	f000 fb8d 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	4814      	ldr	r0, [pc, #80]	@ (80025bc <MX_TIM8_Init+0x130>)
 800256c:	f006 fab4 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002576:	f000 fb81 	bl	8002c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800258e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002592:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4807      	ldr	r0, [pc, #28]	@ (80025bc <MX_TIM8_Init+0x130>)
 800259e:	f006 ffbd 	bl	800951c <HAL_TIMEx_ConfigBreakDeadTime>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80025a8:	f000 fb68 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80025ac:	4803      	ldr	r0, [pc, #12]	@ (80025bc <MX_TIM8_Init+0x130>)
 80025ae:	f001 fe8b 	bl	80042c8 <HAL_TIM_MspPostInit>

}
 80025b2:	bf00      	nop
 80025b4:	3748      	adds	r7, #72	@ 0x48
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200008fc 	.word	0x200008fc
 80025c0:	40010400 	.word	0x40010400

080025c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	615a      	str	r2, [r3, #20]
 80025da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <MX_TIM10_Init+0x98>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <MX_TIM10_Init+0x94>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002602:	4815      	ldr	r0, [pc, #84]	@ (8002658 <MX_TIM10_Init+0x94>)
 8002604:	f006 f828 	bl	8008658 <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800260e:	f000 fb35 	bl	8002c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002612:	4811      	ldr	r0, [pc, #68]	@ (8002658 <MX_TIM10_Init+0x94>)
 8002614:	f006 f8d8 	bl	80087c8 <HAL_TIM_PWM_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800261e:	f000 fb2d 	bl	8002c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	@ 0x60
 8002624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	4807      	ldr	r0, [pc, #28]	@ (8002658 <MX_TIM10_Init+0x94>)
 800263a:	f006 fa4d 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002644:	f000 fb1a 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002648:	4803      	ldr	r0, [pc, #12]	@ (8002658 <MX_TIM10_Init+0x94>)
 800264a:	f001 fe3d 	bl	80042c8 <HAL_TIM_MspPostInit>

}
 800264e:	bf00      	nop
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000944 	.word	0x20000944
 800265c:	40014400 	.word	0x40014400

08002660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <MX_USART1_UART_Init+0x50>)
 8002668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_USART1_UART_Init+0x4c>)
 8002698:	f006 ff92 	bl	80095c0 <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f000 faeb 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000aac 	.word	0x20000aac
 80026b0:	40011000 	.word	0x40011000

080026b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <MX_USART3_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026c0:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <MX_USART3_UART_Init+0x54>)
 80026c2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026ec:	f006 ff68 	bl	80095c0 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f000 fac1 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000af4 	.word	0x20000af4
 8002704:	40004800 	.word	0x40004800
 8002708:	000186a0 	.word	0x000186a0

0800270c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <MX_USART6_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800271c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_USART6_UART_Init+0x4c>)
 8002744:	f006 ff3c 	bl	80095c0 <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f000 fa95 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000b3c 	.word	0x20000b3c
 800275c:	40011400 	.word	0x40011400

08002760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <MX_DMA_Init+0xc8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a2e      	ldr	r2, [pc, #184]	@ (8002828 <MX_DMA_Init+0xc8>)
 8002770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <MX_DMA_Init+0xc8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <MX_DMA_Init+0xc8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <MX_DMA_Init+0xc8>)
 800278c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <MX_DMA_Init+0xc8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2105      	movs	r1, #5
 80027a2:	200c      	movs	r0, #12
 80027a4:	f003 f981 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027a8:	200c      	movs	r0, #12
 80027aa:	f003 f99a 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2105      	movs	r1, #5
 80027b2:	200d      	movs	r0, #13
 80027b4:	f003 f979 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027b8:	200d      	movs	r0, #13
 80027ba:	f003 f992 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2105      	movs	r1, #5
 80027c2:	200f      	movs	r0, #15
 80027c4:	f003 f971 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027c8:	200f      	movs	r0, #15
 80027ca:	f003 f98a 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	202f      	movs	r0, #47	@ 0x2f
 80027d4:	f003 f969 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80027d8:	202f      	movs	r0, #47	@ 0x2f
 80027da:	f003 f982 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	2039      	movs	r0, #57	@ 0x39
 80027e4:	f003 f961 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80027e8:	2039      	movs	r0, #57	@ 0x39
 80027ea:	f003 f97a 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	203a      	movs	r0, #58	@ 0x3a
 80027f4:	f003 f959 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	@ 0x3a
 80027fa:	f003 f972 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2105      	movs	r1, #5
 8002802:	2045      	movs	r0, #69	@ 0x45
 8002804:	f003 f951 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002808:	2045      	movs	r0, #69	@ 0x45
 800280a:	f003 f96a 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2105      	movs	r1, #5
 8002812:	2046      	movs	r0, #70	@ 0x46
 8002814:	f003 f949 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002818:	2046      	movs	r0, #70	@ 0x46
 800281a:	f003 f962 	bl	8005ae2 <HAL_NVIC_EnableIRQ>

}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08e      	sub	sp, #56	@ 0x38
 8002830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	4b71      	ldr	r3, [pc, #452]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a70      	ldr	r2, [pc, #448]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a69      	ldr	r2, [pc, #420]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	4b63      	ldr	r3, [pc, #396]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b60      	ldr	r3, [pc, #384]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a54      	ldr	r2, [pc, #336]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b52      	ldr	r3, [pc, #328]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a46      	ldr	r2, [pc, #280]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002910:	f043 0320 	orr.w	r3, r3, #32
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <MX_GPIO_Init+0x1e0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800293e:	2200      	movs	r2, #0
 8002940:	2140      	movs	r1, #64	@ 0x40
 8002942:	4833      	ldr	r0, [pc, #204]	@ (8002a10 <MX_GPIO_Init+0x1e4>)
 8002944:	f003 fe9e 	bl	8006684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2110      	movs	r1, #16
 800294c:	4831      	ldr	r0, [pc, #196]	@ (8002a14 <MX_GPIO_Init+0x1e8>)
 800294e:	f003 fe99 	bl	8006684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	2101      	movs	r1, #1
 8002956:	4830      	ldr	r0, [pc, #192]	@ (8002a18 <MX_GPIO_Init+0x1ec>)
 8002958:	f003 fe94 	bl	8006684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800295c:	2340      	movs	r3, #64	@ 0x40
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	4827      	ldr	r0, [pc, #156]	@ (8002a10 <MX_GPIO_Init+0x1e4>)
 8002974:	f003 fcd2 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002978:	2308      	movs	r3, #8
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800297c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800298a:	4619      	mov	r1, r3
 800298c:	4820      	ldr	r0, [pc, #128]	@ (8002a10 <MX_GPIO_Init+0x1e4>)
 800298e:	f003 fcc5 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002992:	2310      	movs	r3, #16
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	481a      	ldr	r0, [pc, #104]	@ (8002a14 <MX_GPIO_Init+0x1e8>)
 80029aa:	f003 fcb7 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80029ae:	2330      	movs	r3, #48	@ 0x30
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4816      	ldr	r0, [pc, #88]	@ (8002a1c <MX_GPIO_Init+0x1f0>)
 80029c4:	f003 fcaa 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029dc:	4619      	mov	r1, r3
 80029de:	480e      	ldr	r0, [pc, #56]	@ (8002a18 <MX_GPIO_Init+0x1ec>)
 80029e0:	f003 fc9c 	bl	800631c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2105      	movs	r1, #5
 80029e8:	2009      	movs	r0, #9
 80029ea:	f003 f85e 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80029ee:	2009      	movs	r0, #9
 80029f0:	f003 f877 	bl	8005ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2105      	movs	r1, #5
 80029f8:	200a      	movs	r0, #10
 80029fa:	f003 f856 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80029fe:	200a      	movs	r0, #10
 8002a00:	f003 f86f 	bl	8005ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a04:	bf00      	nop
 8002a06:	3738      	adds	r7, #56	@ 0x38
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800

08002a20 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int16_t aimingCounter = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	81fb      	strh	r3, [r7, #14]
	int16_t firingCounter = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	81bb      	strh	r3, [r7, #12]
	// LED_PWM_Start();
	// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8002a30:	f7fd fe4c 	bl	80006cc <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8002a34:	f7fd ff02 	bl	800083c <BMI088_gyro_init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <TaskMain+0x24>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 8002a3e:	4821      	ldr	r0, [pc, #132]	@ (8002ac4 <TaskMain+0xa4>)
 8002a40:	f7fe fece 	bl	80017e0 <usart_printf>
	}
	if (ist8310_init()) {
 8002a44:	f7ff f854 	bl	8001af0 <ist8310_init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <TaskMain+0x34>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 8002a4e:	481e      	ldr	r0, [pc, #120]	@ (8002ac8 <TaskMain+0xa8>)
 8002a50:	f7fe fec6 	bl	80017e0 <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	2101      	movs	r1, #1
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f7fe fa4d 	bl	8000ef8 <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 8002a5e:	2202      	movs	r2, #2
 8002a60:	2102      	movs	r1, #2
 8002a62:	2002      	movs	r0, #2
 8002a64:	f7fe fa48 	bl	8000ef8 <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f7fe fa43 	bl	8000ef8 <CAN_defineMotor>

	osDelay(150);
 8002a72:	2096      	movs	r0, #150	@ 0x96
 8002a74:	f008 f8c4 	bl	800ac00 <osDelay>

	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	JoulesBuffer = 60;
 8002a78:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <TaskMain+0xac>)
 8002a7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <TaskMain+0xb0>)
 8002a7c:	601a      	str	r2, [r3, #0]
	for(;;) {


		PWMOutput(LED, 2, 1);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2102      	movs	r1, #2
 8002a82:	2001      	movs	r0, #1
 8002a84:	f000 fcd6 	bl	8003434 <PWMOutput>
		PWMInitialize(LED, FR, 2, 0.5);
 8002a88:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2001      	movs	r0, #1
 8002a92:	f000 fbb7 	bl	8003204 <PWMInitialize>
		PWMOutput(Buzzer, 1, 500);
 8002a96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f000 fcc9 	bl	8003434 <PWMOutput>
		PWMInitialize(Buzzer, FR, 1, 0.001);
 8002aa2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002ad4 <TaskMain+0xb4>
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	2002      	movs	r0, #2
 8002aac:	f000 fbaa 	bl	8003204 <PWMInitialize>
		PWMOff(Buzzer, 1);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	f000 fd1a 	bl	80034ec <PWMOff>
		osDelay(5);
 8002ab8:	2005      	movs	r0, #5
 8002aba:	f008 f8a1 	bl	800ac00 <osDelay>
		PWMOutput(LED, 2, 1);
 8002abe:	bf00      	nop
 8002ac0:	e7dd      	b.n	8002a7e <TaskMain+0x5e>
 8002ac2:	bf00      	nop
 8002ac4:	0800e49c 	.word	0x0800e49c
 8002ac8:	0800e4c8 	.word	0x0800e4c8
 8002acc:	20000070 	.word	0x20000070
 8002ad0:	42700000 	.word	0x42700000
 8002ad4:	3a83126f 	.word	0x3a83126f

08002ad8 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */

	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002ae0:	4b58      	ldr	r3, [pc, #352]	@ (8002c44 <TaskChassis+0x16c>)
 8002ae2:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <TaskChassis+0x170>)
 8002ae4:	4959      	ldr	r1, [pc, #356]	@ (8002c4c <TaskChassis+0x174>)
 8002ae6:	485a      	ldr	r0, [pc, #360]	@ (8002c50 <TaskChassis+0x178>)
 8002ae8:	f000 fa6e 	bl	8002fc8 <PWMInit>

    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
    //int16_t targetRPM[4] = {0,0,0,0};

  /* Infinite loop */
    for(;;) {

	    for (int i = 0; i < 4; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e01b      	b.n	8002b34 <TaskChassis+0x5c>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 ffef 	bl	8003ae4 <getRCchannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b10:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002c54 <TaskChassis+0x17c>
 8002b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1c:	ee17 3a90 	vmov	r3, s15
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	3318      	adds	r3, #24
 8002b28:	443b      	add	r3, r7
 8002b2a:	f823 2c10 	strh.w	r2, [r3, #-16]
	    for (int i = 0; i < 4; i++) {
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	dde0      	ble.n	8002afc <TaskChassis+0x24>
	    }
	    int16_t ballsPerSecond = 3;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	827b      	strh	r3, [r7, #18]

		PWMOutput(LED, 3, 1);
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2103      	movs	r1, #3
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 fc76 	bl	8003434 <PWMOutput>
		PWMInitialize(LED, FR, 3, 0.999);
 8002b48:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002c58 <TaskChassis+0x180>
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2001      	movs	r0, #1
 8002b52:	f000 fb57 	bl	8003204 <PWMInitialize>

	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8002b56:	2101      	movs	r1, #1
 8002b58:	4840      	ldr	r0, [pc, #256]	@ (8002c5c <TaskChassis+0x184>)
 8002b5a:	f003 fd7b 	bl	8006654 <HAL_GPIO_ReadPin>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d138      	bne.n	8002bd6 <TaskChassis+0xfe>
			setMotorRPM(Bus2, M2006, 2, 2160*ballsPerSecond, indexerPreset);
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	461a      	mov	r2, r3
 8002b68:	00d2      	lsls	r2, r2, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <TaskChassis+0x188>)
 8002b7a:	edd3 6a00 	vldr	s13, [r3]
 8002b7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b82:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b86:	eeb0 0a66 	vmov.f32	s0, s13
 8002b8a:	eef0 0a47 	vmov.f32	s1, s14
 8002b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8002b92:	4613      	mov	r3, r2
 8002b94:	2202      	movs	r2, #2
 8002b96:	2102      	movs	r1, #2
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f7fe fdcd 	bl	8001738 <setMotorRPM>
			setMotorRPM(Bus2, M3508, 1, -2000, chassisPreset);
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <TaskChassis+0x18c>)
 8002ba0:	edd3 6a00 	vldr	s13, [r3]
 8002ba4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bac:	eeb0 0a66 	vmov.f32	s0, s13
 8002bb0:	eef0 0a47 	vmov.f32	s1, s14
 8002bb4:	eeb0 1a67 	vmov.f32	s2, s15
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <TaskChassis+0x190>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7fe fdba 	bl	8001738 <setMotorRPM>
			PWMOn(LED, 3);
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f000 fc64 	bl	8003494 <PWMOn>
			PWMOff(LED, 2);
 8002bcc:	2102      	movs	r1, #2
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f000 fc8c 	bl	80034ec <PWMOff>
 8002bd4:	e02d      	b.n	8002c32 <TaskChassis+0x15a>
	    } else {
			setMotorRPM(Bus2, M2006, 2, 0, indexerPreset);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <TaskChassis+0x188>)
 8002bd8:	edd3 6a00 	vldr	s13, [r3]
 8002bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002be0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002be4:	eeb0 0a66 	vmov.f32	s0, s13
 8002be8:	eef0 0a47 	vmov.f32	s1, s14
 8002bec:	eeb0 1a67 	vmov.f32	s2, s15
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f7fe fd9e 	bl	8001738 <setMotorRPM>
			setMotorRPM(Bus2, M3508, 1, 0, chassisPreset);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <TaskChassis+0x18c>)
 8002bfe:	edd3 6a00 	vldr	s13, [r3]
 8002c02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c0a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c0e:	eef0 0a47 	vmov.f32	s1, s14
 8002c12:	eeb0 1a67 	vmov.f32	s2, s15
 8002c16:	2300      	movs	r3, #0
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7fe fd8b 	bl	8001738 <setMotorRPM>
			PWMOff(LED, 3);
 8002c22:	2103      	movs	r1, #3
 8002c24:	2001      	movs	r0, #1
 8002c26:	f000 fc61 	bl	80034ec <PWMOff>
			PWMOn(LED, 2);
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 fc31 	bl	8003494 <PWMOn>
	    }


		PWMTimerStarter();
 8002c32:	f000 fc87 	bl	8003544 <PWMTimerStarter>
		RCkeysRefresh();
 8002c36:	f000 ff69 	bl	8003b0c <RCkeysRefresh>
        osDelay(5);
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f007 ffe0 	bl	800ac00 <osDelay>
    for(;;) {
 8002c40:	e759      	b.n	8002af6 <TaskChassis+0x1e>
 8002c42:	bf00      	nop
 8002c44:	200008fc 	.word	0x200008fc
 8002c48:	200008b4 	.word	0x200008b4
 8002c4c:	2000086c 	.word	0x2000086c
 8002c50:	20000824 	.word	0x20000824
 8002c54:	415a51ec 	.word	0x415a51ec
 8002c58:	3f7fbe77 	.word	0x3f7fbe77
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	20000064 	.word	0x20000064
 8002c64:	20000058 	.word	0x20000058
 8002c68:	fffff830 	.word	0xfffff830

08002c6c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8002c74:	2005      	movs	r0, #5
 8002c76:	f007 ffc3 	bl	800ac00 <osDelay>
 8002c7a:	e7fb      	b.n	8002c74 <TaskTurret+0x8>

08002c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <Error_Handler+0x8>

08002c88 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6178      	str	r0, [r7, #20]
 8002c90:	460b      	mov	r3, r1
 8002c92:	60fa      	str	r2, [r7, #12]
 8002c94:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c98:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c9c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d042      	beq.n	8002d2a <PID_init+0xa2>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d03f      	beq.n	8002d2a <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	7cfa      	ldrb	r2, [r7, #19]
 8002cae:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d28:	e000      	b.n	8002d2c <PID_init+0xa4>
        return;
 8002d2a:	bf00      	nop
}
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d42:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <PID_calc+0x1c>
    {
        return 0.0f;
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e130      	b.n	8002fb4 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8002d6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d72:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8095 	bne.w	8002eb4 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	dd04      	ble.n	8002e1c <PID_calc+0xe6>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e1a:	e014      	b.n	8002e46 <PID_calc+0x110>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e28:	eef1 7a67 	vneg.f32	s15, s15
 8002e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	d507      	bpl.n	8002e46 <PID_calc+0x110>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e3c:	eef1 7a67 	vneg.f32	s15, s15
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd04      	ble.n	8002e86 <PID_calc+0x150>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	621a      	str	r2, [r3, #32]
 8002e84:	e094      	b.n	8002fb0 <PID_calc+0x27a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e92:	eef1 7a67 	vneg.f32	s15, s15
 8002e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	f140 8087 	bpl.w	8002fb0 <PID_calc+0x27a>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ea8:	eef1 7a67 	vneg.f32	s15, s15
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	edc3 7a08 	vstr	s15, [r3, #32]
 8002eb2:	e07d      	b.n	8002fb0 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d179      	bne.n	8002fb0 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ece:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002f4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dd04      	ble.n	8002f86 <PID_calc+0x250>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
 8002f84:	e014      	b.n	8002fb0 <PID_calc+0x27a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f92:	eef1 7a67 	vneg.f32	s15, s15
 8002f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	d507      	bpl.n	8002fb0 <PID_calc+0x27a>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fa6:	eef1 7a67 	vneg.f32	s15, s15
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
}
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8002fd6:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <PWMInit+0x58>)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8002fdc:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <PWMInit+0x5c>)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8002fe2:	4a11      	ldr	r2, [pc, #68]	@ (8003028 <PWMInit+0x60>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8002fe8:	4a10      	ldr	r2, [pc, #64]	@ (800302c <PWMInit+0x64>)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8002fee:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <PWMInit+0x58>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f005 fb80 	bl	80086f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <PWMInit+0x5c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 fb7b 	bl	80086f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <PWMInit+0x60>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f005 fb76 	bl	80086f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 800300c:	4b07      	ldr	r3, [pc, #28]	@ (800302c <PWMInit+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fb71 	bl	80086f8 <HAL_TIM_Base_Start>
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000d78 	.word	0x20000d78
 8003024:	20000d7c 	.word	0x20000d7c
 8003028:	20000d80 	.word	0x20000d80
 800302c:	20000d84 	.word	0x20000d84

08003030 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d02c      	beq.n	80030a0 <calculateOutputPeriodToGetFrequency+0x70>
 8003046:	2b02      	cmp	r3, #2
 8003048:	dc3d      	bgt.n	80030c6 <calculateOutputPeriodToGetFrequency+0x96>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <calculateOutputPeriodToGetFrequency+0x24>
 800304e:	2b01      	cmp	r3, #1
 8003050:	d013      	beq.n	800307a <calculateOutputPeriodToGetFrequency+0x4a>
 8003052:	e038      	b.n	80030c6 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80030d4 <calculateOutputPeriodToGetFrequency+0xa4>
 8003062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003072:	ee17 3a90 	vmov	r3, s15
 8003076:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8003078:	e025      	b.n	80030c6 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003084:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80030d8 <calculateOutputPeriodToGetFrequency+0xa8>
 8003088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800308c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003098:	ee17 3a90 	vmov	r3, s15
 800309c:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 800309e:	e012      	b.n	80030c6 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80030d8 <calculateOutputPeriodToGetFrequency+0xa8>
 80030ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030be:	ee17 3a90 	vmov	r3, s15
 80030c2:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80030c4:	bf00      	nop
	}

	return finalVal;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	360637bd 	.word	0x360637bd
 80030d8:	358637bd 	.word	0x358637bd

080030dc <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f2:	edd7 7a00 	vldr	s15, [r7]
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fe:	ee17 3a90 	vmov	r3, s15
 8003102:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d902      	bls.n	8003112 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e004      	b.n	800311c <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8003118:	2301      	movs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 800311c:	68fb      	ldr	r3, [r7, #12]

}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	ed87 0a00 	vstr	s0, [r7]
 8003138:	71fb      	strb	r3, [r7, #7]
 800313a:	460b      	mov	r3, r1
 800313c:	71bb      	strb	r3, [r7, #6]
 800313e:	4613      	mov	r3, r2
 8003140:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d03c      	beq.n	80031c6 <calculateOutputPeriodValue+0x9a>
 800314c:	2b02      	cmp	r3, #2
 800314e:	dc51      	bgt.n	80031f4 <calculateOutputPeriodValue+0xc8>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <calculateOutputPeriodValue+0x2e>
 8003154:	2b01      	cmp	r3, #1
 8003156:	d01b      	beq.n	8003190 <calculateOutputPeriodValue+0x64>
 8003158:	e04c      	b.n	80031f4 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8003160:	edd7 7a00 	vldr	s15, [r7]
 8003164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003168:	ee17 2a90 	vmov	r2, s15
 800316c:	2302      	movs	r3, #2
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8003174:	e03e      	b.n	80031f4 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8003176:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800317a:	3b01      	subs	r3, #1
 800317c:	4a20      	ldr	r2, [pc, #128]	@ (8003200 <calculateOutputPeriodValue+0xd4>)
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	ed97 0a00 	vldr	s0, [r7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ffa8 	bl	80030dc <safeOutputPeriodValueCalculator>
 800318c:	60f8      	str	r0, [r7, #12]
			break;
 800318e:	e031      	b.n	80031f4 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8003196:	edd7 7a00 	vldr	s15, [r7]
 800319a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319e:	ee17 2a90 	vmov	r2, s15
 80031a2:	2301      	movs	r3, #1
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 80031aa:	e023      	b.n	80031f4 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 80031ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031b0:	3306      	adds	r3, #6
 80031b2:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <calculateOutputPeriodValue+0xd4>)
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	ed97 0a00 	vldr	s0, [r7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff8d 	bl	80030dc <safeOutputPeriodValueCalculator>
 80031c2:	60f8      	str	r0, [r7, #12]
			break;
 80031c4:	e016      	b.n	80031f4 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 80031c6:	79bb      	ldrb	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 80031cc:	edd7 7a00 	vldr	s15, [r7]
 80031d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d4:	ee17 2a90 	vmov	r2, s15
 80031d8:	2301      	movs	r3, #1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 80031e0:	e007      	b.n	80031f2 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <calculateOutputPeriodValue+0xd4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	ed97 0a00 	vldr	s0, [r7]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff76 	bl	80030dc <safeOutputPeriodValueCalculator>
 80031f0:	60f8      	str	r0, [r7, #12]
			break;
 80031f2:	bf00      	nop
		default:
	}
	return returnVal;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000dc0 	.word	0x20000dc0

08003204 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	ed87 0a00 	vstr	s0, [r7]
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	460b      	mov	r3, r1
 8003214:	71bb      	strb	r3, [r7, #6]
 8003216:	4613      	mov	r3, r2
 8003218:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 800321a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800321e:	79b9      	ldrb	r1, [r7, #6]
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	ed97 0a00 	vldr	s0, [r7]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff80 	bl	800312c <calculateOutputPeriodValue>
 800322c:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d076      	beq.n	8003322 <PWMInitialize+0x11e>
 8003234:	2b02      	cmp	r3, #2
 8003236:	dc7e      	bgt.n	8003336 <PWMInitialize+0x132>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <PWMInitialize+0x3e>
 800323c:	2b01      	cmp	r3, #1
 800323e:	d04a      	beq.n	80032d6 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8003240:	e079      	b.n	8003336 <PWMInitialize+0x132>
		switch (position) {
 8003242:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003246:	3b01      	subs	r3, #1
 8003248:	2b06      	cmp	r3, #6
 800324a:	d83b      	bhi.n	80032c4 <PWMInitialize+0xc0>
 800324c:	a201      	add	r2, pc, #4	@ (adr r2, 8003254 <PWMInitialize+0x50>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003271 	.word	0x08003271
 8003258:	0800327d 	.word	0x0800327d
 800325c:	08003289 	.word	0x08003289
 8003260:	08003295 	.word	0x08003295
 8003264:	080032a1 	.word	0x080032a1
 8003268:	080032ad 	.word	0x080032ad
 800326c:	080032b9 	.word	0x080032b9
			(*tim1).Instance->CCR1=value;
 8003270:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <PWMInitialize+0x13c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800327a:	e024      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 800327c:	4b30      	ldr	r3, [pc, #192]	@ (8003340 <PWMInitialize+0x13c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003286:	e01e      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8003288:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <PWMInitialize+0x13c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8003292:	e018      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8003294:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <PWMInitialize+0x13c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800329e:	e012      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 80032a0:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <PWMInitialize+0x140>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80032aa:	e00c      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <PWMInitialize+0x140>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80032b6:	e006      	b.n	80032c6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 80032b8:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <PWMInitialize+0x140>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80032c2:	e000      	b.n	80032c6 <PWMInitialize+0xc2>
			break;
 80032c4:	bf00      	nop
		subPeriod[position-1] = value;
 80032c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	491e      	ldr	r1, [pc, #120]	@ (8003348 <PWMInitialize+0x144>)
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80032d4:	e02e      	b.n	8003334 <PWMInitialize+0x130>
		switch (position) {
 80032d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d012      	beq.n	8003304 <PWMInitialize+0x100>
 80032de:	2b03      	cmp	r3, #3
 80032e0:	dc16      	bgt.n	8003310 <PWMInitialize+0x10c>
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d002      	beq.n	80032ec <PWMInitialize+0xe8>
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d006      	beq.n	80032f8 <PWMInitialize+0xf4>
			break;
 80032ea:	e011      	b.n	8003310 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <PWMInitialize+0x148>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80032f6:	e00c      	b.n	8003312 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <PWMInitialize+0x148>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003302:	e006      	b.n	8003312 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <PWMInitialize+0x148>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800330e:	e000      	b.n	8003312 <PWMInitialize+0x10e>
			break;
 8003310:	bf00      	nop
		subPeriod[position+6] = value;
 8003312:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003316:	3306      	adds	r3, #6
 8003318:	490b      	ldr	r1, [pc, #44]	@ (8003348 <PWMInitialize+0x144>)
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8003320:	e008      	b.n	8003334 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <PWMInitialize+0x14c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 800332c:	4a06      	ldr	r2, [pc, #24]	@ (8003348 <PWMInitialize+0x144>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8003332:	bf00      	nop
	return;
 8003334:	bf00      	nop
 8003336:	bf00      	nop
}
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000d78 	.word	0x20000d78
 8003344:	20000d84 	.word	0x20000d84
 8003348:	20000d94 	.word	0x20000d94
 800334c:	20000d80 	.word	0x20000d80
 8003350:	20000d7c 	.word	0x20000d7c

08003354 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b04      	cmp	r3, #4
 8003366:	dc0c      	bgt.n	8003382 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8003368:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <MotorPositionForInitializingPeriod+0x54>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	3b01      	subs	r3, #1
 8003378:	490c      	ldr	r1, [pc, #48]	@ (80033ac <MotorPositionForInitializingPeriod+0x58>)
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8003380:	e00b      	b.n	800339a <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <MotorPositionForInitializingPeriod+0x5c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	3b01      	subs	r3, #1
 8003392:	4906      	ldr	r1, [pc, #24]	@ (80033ac <MotorPositionForInitializingPeriod+0x58>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000d78 	.word	0x20000d78
 80033ac:	20000dc0 	.word	0x20000dc0
 80033b0:	20000d84 	.word	0x20000d84

080033b4 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	603a      	str	r2, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	460b      	mov	r3, r1
 80033c2:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fe31 	bl	8003030 <calculateOutputPeriodToGetFrequency>
 80033ce:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d01a      	beq.n	800340c <initializePeriod+0x58>
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	dc22      	bgt.n	8003420 <initializePeriod+0x6c>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <initializePeriod+0x30>
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d007      	beq.n	80033f2 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 80033e2:	e01d      	b.n	8003420 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 80033e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ffb2 	bl	8003354 <MotorPositionForInitializingPeriod>
		break;
 80033f0:	e015      	b.n	800341e <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <initializePeriod+0x74>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 80033fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003400:	3306      	adds	r3, #6
 8003402:	490a      	ldr	r1, [pc, #40]	@ (800342c <initializePeriod+0x78>)
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800340a:	e008      	b.n	800341e <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <initializePeriod+0x7c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <initializePeriod+0x78>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 800341c:	bf00      	nop
	return;
 800341e:	bf00      	nop
 8003420:	bf00      	nop
}
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000d80 	.word	0x20000d80
 800342c:	20000dc0 	.word	0x20000dc0
 8003430:	20000d7c 	.word	0x20000d7c

08003434 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	603a      	str	r2, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
 8003440:	460b      	mov	r3, r1
 8003442:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8003444:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ffb1 	bl	80033b4 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d014      	beq.n	8003482 <PWMOutput+0x4e>
 8003458:	2b02      	cmp	r3, #2
 800345a:	dc16      	bgt.n	800348a <PWMOutput+0x56>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <PWMOutput+0x32>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <PWMOutput+0x40>
 8003464:	e011      	b.n	800348a <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8003466:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800346a:	3b01      	subs	r3, #1
 800346c:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <PWMOutput+0x5c>)
 800346e:	2101      	movs	r1, #1
 8003470:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8003472:	e00a      	b.n	800348a <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8003474:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003478:	3306      	adds	r3, #6
 800347a:	4a05      	ldr	r2, [pc, #20]	@ (8003490 <PWMOutput+0x5c>)
 800347c:	2101      	movs	r1, #1
 800347e:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8003480:	e003      	b.n	800348a <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8003482:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <PWMOutput+0x5c>)
 8003484:	2201      	movs	r2, #1
 8003486:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8003488:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000d88 	.word	0x20000d88

08003494 <PWMOn>:

void PWMOn(TypesThatUsePWM_t Type, int8_t Position) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d014      	beq.n	80034d4 <PWMOn+0x40>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	dc16      	bgt.n	80034dc <PWMOn+0x48>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <PWMOn+0x24>
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d007      	beq.n	80034c6 <PWMOn+0x32>
 80034b6:	e011      	b.n	80034dc <PWMOn+0x48>
	case 0:
		whichPWMisOn[Position-1] = 1;
 80034b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034bc:	3b01      	subs	r3, #1
 80034be:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <PWMOn+0x54>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 80034c4:	e00a      	b.n	80034dc <PWMOn+0x48>
	case 1:
		whichPWMisOn[Position+6] = 1;
 80034c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80034ca:	3306      	adds	r3, #6
 80034cc:	4a06      	ldr	r2, [pc, #24]	@ (80034e8 <PWMOn+0x54>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 80034d2:	e003      	b.n	80034dc <PWMOn+0x48>
	case 2:
		whichPWMisOn[10] = 1;
 80034d4:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <PWMOn+0x54>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 80034da:	bf00      	nop
	}
}
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000d88 	.word	0x20000d88

080034ec <PWMOff>:

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	460a      	mov	r2, r1
 80034f6:	71fb      	strb	r3, [r7, #7]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d014      	beq.n	800352c <PWMOff+0x40>
 8003502:	2b02      	cmp	r3, #2
 8003504:	dc16      	bgt.n	8003534 <PWMOff+0x48>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <PWMOff+0x24>
 800350a:	2b01      	cmp	r3, #1
 800350c:	d007      	beq.n	800351e <PWMOff+0x32>
 800350e:	e011      	b.n	8003534 <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8003510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003514:	3b01      	subs	r3, #1
 8003516:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <PWMOff+0x54>)
 8003518:	2100      	movs	r1, #0
 800351a:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 800351c:	e00a      	b.n	8003534 <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 800351e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003522:	3306      	adds	r3, #6
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <PWMOff+0x54>)
 8003526:	2100      	movs	r1, #0
 8003528:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 800352a:	e003      	b.n	8003534 <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <PWMOff+0x54>)
 800352e:	2200      	movs	r2, #0
 8003530:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8003532:	bf00      	nop
	}
}
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000d88 	.word	0x20000d88

08003544 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	e0f1      	b.n	8003734 <PWMTimerStarter+0x1f0>
		switch (i) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b0a      	cmp	r3, #10
 8003554:	f200 80eb 	bhi.w	800372e <PWMTimerStarter+0x1ea>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <PWMTimerStarter+0x1c>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	0800358d 	.word	0x0800358d
 8003564:	080035b3 	.word	0x080035b3
 8003568:	080035d9 	.word	0x080035d9
 800356c:	080035ff 	.word	0x080035ff
 8003570:	08003625 	.word	0x08003625
 8003574:	0800364b 	.word	0x0800364b
 8003578:	08003671 	.word	0x08003671
 800357c:	08003697 	.word	0x08003697
 8003580:	080036bd 	.word	0x080036bd
 8003584:	080036e3 	.word	0x080036e3
 8003588:	08003709 	.word	0x08003709
		case 0:
			if (whichPWMisOn[0] == 1) {
 800358c:	4b6e      	ldr	r3, [pc, #440]	@ (8003748 <PWMTimerStarter+0x204>)
 800358e:	f993 3000 	ldrsb.w	r3, [r3]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d106      	bne.n	80035a4 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8003596:	4b6d      	ldr	r3, [pc, #436]	@ (800374c <PWMTimerStarter+0x208>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f005 f963 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 80035a2:	e0c4      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 80035a4:	4b69      	ldr	r3, [pc, #420]	@ (800374c <PWMTimerStarter+0x208>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fa24 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 80035b0:	e0bd      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 80035b2:	4b65      	ldr	r3, [pc, #404]	@ (8003748 <PWMTimerStarter+0x204>)
 80035b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d106      	bne.n	80035ca <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 80035bc:	4b63      	ldr	r3, [pc, #396]	@ (800374c <PWMTimerStarter+0x208>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2104      	movs	r1, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f950 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 80035c8:	e0b1      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 80035ca:	4b60      	ldr	r3, [pc, #384]	@ (800374c <PWMTimerStarter+0x208>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2104      	movs	r1, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f005 fa11 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 80035d6:	e0aa      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 80035d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <PWMTimerStarter+0x204>)
 80035da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d106      	bne.n	80035f0 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80035e2:	4b5a      	ldr	r3, [pc, #360]	@ (800374c <PWMTimerStarter+0x208>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2108      	movs	r1, #8
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 f93d 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80035ee:	e09e      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80035f0:	4b56      	ldr	r3, [pc, #344]	@ (800374c <PWMTimerStarter+0x208>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2108      	movs	r1, #8
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 f9fe 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 80035fc:	e097      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80035fe:	4b52      	ldr	r3, [pc, #328]	@ (8003748 <PWMTimerStarter+0x204>)
 8003600:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8003608:	4b50      	ldr	r3, [pc, #320]	@ (800374c <PWMTimerStarter+0x208>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	210c      	movs	r1, #12
 800360e:	4618      	mov	r0, r3
 8003610:	f005 f92a 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8003614:	e08b      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8003616:	4b4d      	ldr	r3, [pc, #308]	@ (800374c <PWMTimerStarter+0x208>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	210c      	movs	r1, #12
 800361c:	4618      	mov	r0, r3
 800361e:	f005 f9eb 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 8003622:	e084      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8003624:	4b48      	ldr	r3, [pc, #288]	@ (8003748 <PWMTimerStarter+0x204>)
 8003626:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 800362e:	4b48      	ldr	r3, [pc, #288]	@ (8003750 <PWMTimerStarter+0x20c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f005 f917 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 800363a:	e078      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 800363c:	4b44      	ldr	r3, [pc, #272]	@ (8003750 <PWMTimerStarter+0x20c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f005 f9d8 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 8003648:	e071      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 800364a:	4b3f      	ldr	r3, [pc, #252]	@ (8003748 <PWMTimerStarter+0x204>)
 800364c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8003654:	4b3e      	ldr	r3, [pc, #248]	@ (8003750 <PWMTimerStarter+0x20c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2104      	movs	r1, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f005 f904 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8003660:	e065      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <PWMTimerStarter+0x20c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2104      	movs	r1, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f005 f9c5 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 800366e:	e05e      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <PWMTimerStarter+0x204>)
 8003672:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d106      	bne.n	8003688 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 800367a:	4b35      	ldr	r3, [pc, #212]	@ (8003750 <PWMTimerStarter+0x20c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2108      	movs	r1, #8
 8003680:	4618      	mov	r0, r3
 8003682:	f005 f8f1 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8003686:	e052      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003688:	4b31      	ldr	r3, [pc, #196]	@ (8003750 <PWMTimerStarter+0x20c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2108      	movs	r1, #8
 800368e:	4618      	mov	r0, r3
 8003690:	f005 f9b2 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 8003694:	e04b      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8003696:	4b2c      	ldr	r3, [pc, #176]	@ (8003748 <PWMTimerStarter+0x204>)
 8003698:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 80036a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <PWMTimerStarter+0x210>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f005 f8de 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 80036ac:	e03f      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 80036ae:	4b29      	ldr	r3, [pc, #164]	@ (8003754 <PWMTimerStarter+0x210>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f005 f99f 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 80036ba:	e038      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 80036bc:	4b22      	ldr	r3, [pc, #136]	@ (8003748 <PWMTimerStarter+0x204>)
 80036be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d106      	bne.n	80036d4 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 80036c6:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <PWMTimerStarter+0x210>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2104      	movs	r1, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 f8cb 	bl	8008868 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 80036d2:	e02c      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 80036d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <PWMTimerStarter+0x210>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2104      	movs	r1, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 f98c 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 80036e0:	e025      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 80036e2:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <PWMTimerStarter+0x204>)
 80036e4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80036ec:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <PWMTimerStarter+0x210>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2108      	movs	r1, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f005 f8b8 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 80036f8:	e019      	b.n	800372e <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80036fa:	4b16      	ldr	r3, [pc, #88]	@ (8003754 <PWMTimerStarter+0x210>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2108      	movs	r1, #8
 8003700:	4618      	mov	r0, r3
 8003702:	f005 f979 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 8003706:	e012      	b.n	800372e <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003708:	4b0f      	ldr	r3, [pc, #60]	@ (8003748 <PWMTimerStarter+0x204>)
 800370a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8003712:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <PWMTimerStarter+0x214>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2108      	movs	r1, #8
 8003718:	4618      	mov	r0, r3
 800371a:	f005 f8a5 	bl	8008868 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 800371e:	e005      	b.n	800372c <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <PWMTimerStarter+0x214>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2108      	movs	r1, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f005 f966 	bl	80089f8 <HAL_TIM_PWM_Stop>
			break;
 800372c:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3301      	adds	r3, #1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b0a      	cmp	r3, #10
 8003738:	f77f af0a 	ble.w	8003550 <PWMTimerStarter+0xc>
		}
	}
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000d88 	.word	0x20000d88
 800374c:	20000d78 	.word	0x20000d78
 8003750:	20000d84 	.word	0x20000d84
 8003754:	20000d80 	.word	0x20000d80
 8003758:	20000d7c 	.word	0x20000d7c

0800375c <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003760:	2224      	movs	r2, #36	@ 0x24
 8003762:	4903      	ldr	r1, [pc, #12]	@ (8003770 <remote_control_init+0x14>)
 8003764:	4803      	ldr	r0, [pc, #12]	@ (8003774 <remote_control_init+0x18>)
 8003766:	f7fe f8c9 	bl	80018fc <RC_init>
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000e28 	.word	0x20000e28
 8003774:	20000e04 	.word	0x20000e04

08003778 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 800377c:	4b02      	ldr	r3, [pc, #8]	@ (8003788 <get_remote_control_point+0x10>)
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20000dec 	.word	0x20000dec

0800378c <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003792:	4b44      	ldr	r3, [pc, #272]	@ (80038a4 <USART3_IRQHandler+0x118>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80037a0:	2300      	movs	r3, #0
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <USART3_IRQHandler+0x118>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <USART3_IRQHandler+0x118>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 80037b6:	e070      	b.n	800389a <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 80037b8:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <USART3_IRQHandler+0x11c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d06a      	beq.n	800389a <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <USART3_IRQHandler+0x118>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <USART3_IRQHandler+0x118>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 80037da:	4b34      	ldr	r3, [pc, #208]	@ (80038ac <USART3_IRQHandler+0x120>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12d      	bne.n	8003844 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80037e8:	4b30      	ldr	r3, [pc, #192]	@ (80038ac <USART3_IRQHandler+0x120>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <USART3_IRQHandler+0x120>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80037f8:	4b2c      	ldr	r3, [pc, #176]	@ (80038ac <USART3_IRQHandler+0x120>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <USART3_IRQHandler+0x124>)
 8003808:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 800380a:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <USART3_IRQHandler+0x120>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2224      	movs	r2, #36	@ 0x24
 8003810:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003812:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <USART3_IRQHandler+0x120>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003820:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <USART3_IRQHandler+0x120>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003832:	4b1f      	ldr	r3, [pc, #124]	@ (80038b0 <USART3_IRQHandler+0x124>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	2b12      	cmp	r3, #18
 8003838:	d12f      	bne.n	800389a <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 800383a:	491e      	ldr	r1, [pc, #120]	@ (80038b4 <USART3_IRQHandler+0x128>)
 800383c:	481e      	ldr	r0, [pc, #120]	@ (80038b8 <USART3_IRQHandler+0x12c>)
 800383e:	f000 f841 	bl	80038c4 <sbus_to_rc>
}
 8003842:	e02a      	b.n	800389a <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <USART3_IRQHandler+0x120>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003854:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003860:	b29a      	uxth	r2, r3
 8003862:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <USART3_IRQHandler+0x124>)
 8003864:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003866:	4b11      	ldr	r3, [pc, #68]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2224      	movs	r2, #36	@ 0x24
 800386c:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 800386e:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <USART3_IRQHandler+0x130>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <USART3_IRQHandler+0x130>)
 8003874:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003878:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800387a:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <USART3_IRQHandler+0x120>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <USART3_IRQHandler+0x120>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 800388a:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <USART3_IRQHandler+0x124>)
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	2b12      	cmp	r3, #18
 8003890:	d103      	bne.n	800389a <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003892:	4908      	ldr	r1, [pc, #32]	@ (80038b4 <USART3_IRQHandler+0x128>)
 8003894:	480a      	ldr	r0, [pc, #40]	@ (80038c0 <USART3_IRQHandler+0x134>)
 8003896:	f000 f815 	bl	80038c4 <sbus_to_rc>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000af4 	.word	0x20000af4
 80038a8:	40004800 	.word	0x40004800
 80038ac:	20000c44 	.word	0x20000c44
 80038b0:	20000e4c 	.word	0x20000e4c
 80038b4:	20000dec 	.word	0x20000dec
 80038b8:	20000e04 	.word	0x20000e04
 80038bc:	40026028 	.word	0x40026028
 80038c0:	20000e28 	.word	0x20000e28

080038c4 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8101 	beq.w	8003ad8 <sbus_to_rc+0x214>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80fd 	beq.w	8003ad8 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	b21a      	sxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3301      	adds	r3, #1
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	b21a      	sxth	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3301      	adds	r3, #1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	b21a      	sxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3302      	adds	r3, #2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	b21b      	sxth	r3, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	b21b      	sxth	r3, r3
 800391e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003922:	b21a      	sxth	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3302      	adds	r3, #2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	b2db      	uxtb	r3, r3
 8003934:	b21a      	sxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3303      	adds	r3, #3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	b21b      	sxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003950:	b21b      	sxth	r3, r3
 8003952:	4313      	orrs	r3, r2
 8003954:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800395a:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	b21a      	sxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3305      	adds	r3, #5
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	01db      	lsls	r3, r3, #7
 8003978:	b21b      	sxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b21b      	sxth	r3, r3
 800397e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003982:	b21a      	sxth	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3305      	adds	r3, #5
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	b2da      	uxtb	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3305      	adds	r3, #5
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	109b      	asrs	r3, r3, #2
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3306      	adds	r3, #6
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	b21a      	sxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3307      	adds	r3, #7
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b21a      	sxth	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3308      	adds	r3, #8
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	b21a      	sxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3309      	adds	r3, #9
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b21a      	sxth	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	330a      	adds	r3, #10
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	330b      	adds	r3, #11
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	b21a      	sxth	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	330c      	adds	r3, #12
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	330d      	adds	r3, #13
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	330e      	adds	r3, #14
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	330f      	adds	r3, #15
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	b21a      	sxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3311      	adds	r3, #17
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	b21a      	sxth	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b21a      	sxth	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b21a      	sxth	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	811a      	strh	r2, [r3, #8]
 8003ad6:	e000      	b.n	8003ada <sbus_to_rc+0x216>
        return;
 8003ad8:	bf00      	nop
}
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <getRCchannel+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003af6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003afa:	b21b      	sxth	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000074 	.word	0x20000074

08003b0c <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8003b12:	4b85      	ldr	r3, [pc, #532]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	7d1a      	ldrb	r2, [r3, #20]
 8003b18:	7d5b      	ldrb	r3, [r3, #21]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8003b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da07      	bge.n	8003b38 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8003b28:	4b80      	ldr	r3, [pc, #512]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003b34:	80fb      	strh	r3, [r7, #6]
 8003b36:	e002      	b.n	8003b3e <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8003b38:	4b7c      	ldr	r3, [pc, #496]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b44:	d307      	bcc.n	8003b56 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8003b46:	4b79      	ldr	r3, [pc, #484]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003b52:	80fb      	strh	r3, [r7, #6]
 8003b54:	e002      	b.n	8003b5c <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8003b56:	4b75      	ldr	r3, [pc, #468]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b62:	d307      	bcc.n	8003b74 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003b64:	4b71      	ldr	r3, [pc, #452]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003b70:	80fb      	strh	r3, [r7, #6]
 8003b72:	e002      	b.n	8003b7a <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003b74:	4b6d      	ldr	r3, [pc, #436]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b80:	d307      	bcc.n	8003b92 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003b82:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003b8e:	80fb      	strh	r3, [r7, #6]
 8003b90:	e002      	b.n	8003b98 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003b92:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9e:	d307      	bcc.n	8003bb0 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003ba0:	4b62      	ldr	r3, [pc, #392]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003bac:	80fb      	strh	r3, [r7, #6]
 8003bae:	e002      	b.n	8003bb6 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d307      	bcc.n	8003bce <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003bca:	80fb      	strh	r3, [r7, #6]
 8003bcc:	e002      	b.n	8003bd4 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8003bce:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bda:	d307      	bcc.n	8003bec <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8003bdc:	4b53      	ldr	r3, [pc, #332]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003be8:	80fb      	strh	r3, [r7, #6]
 8003bea:	e002      	b.n	8003bf2 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8003bec:	4b4f      	ldr	r3, [pc, #316]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2bff      	cmp	r3, #255	@ 0xff
 8003bf6:	d907      	bls.n	8003c08 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c04:	80fb      	strh	r3, [r7, #6]
 8003c06:	e002      	b.n	8003c0e <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8003c08:	4b48      	ldr	r3, [pc, #288]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c12:	d906      	bls.n	8003c22 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003c14:	4b45      	ldr	r3, [pc, #276]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	3b80      	subs	r3, #128	@ 0x80
 8003c1e:	80fb      	strh	r3, [r7, #6]
 8003c20:	e002      	b.n	8003c28 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8003c22:	4b42      	ldr	r3, [pc, #264]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c2c:	d906      	bls.n	8003c3c <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	3b40      	subs	r3, #64	@ 0x40
 8003c38:	80fb      	strh	r3, [r7, #6]
 8003c3a:	e002      	b.n	8003c42 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b1f      	cmp	r3, #31
 8003c46:	d906      	bls.n	8003c56 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003c48:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	3b20      	subs	r3, #32
 8003c52:	80fb      	strh	r3, [r7, #6]
 8003c54:	e002      	b.n	8003c5c <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003c56:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	d906      	bls.n	8003c70 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003c62:	4b32      	ldr	r3, [pc, #200]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	3b10      	subs	r3, #16
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	e002      	b.n	8003c76 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003c70:	4b2e      	ldr	r3, [pc, #184]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d906      	bls.n	8003c8a <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	3b08      	subs	r3, #8
 8003c86:	80fb      	strh	r3, [r7, #6]
 8003c88:	e002      	b.n	8003c90 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 8003c8a:	4b28      	ldr	r3, [pc, #160]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d906      	bls.n	8003ca4 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8003c96:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	80fb      	strh	r3, [r7, #6]
 8003ca2:	e002      	b.n	8003caa <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8003ca4:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d906      	bls.n	8003cbe <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	80fb      	strh	r3, [r7, #6]
 8003cbc:	e002      	b.n	8003cc4 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 8003cca:	4b18      	ldr	r3, [pc, #96]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	731a      	strb	r2, [r3, #12]
 8003cd0:	e002      	b.n	8003cd8 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ce0:	b21a      	sxth	r2, r3
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003ce4:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003cf2:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003cfc:	b21a      	sxth	r2, r3
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003d00:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8003d02:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	7c9b      	ldrb	r3, [r3, #18]
 8003d08:	b25a      	sxtb	r2, r3
 8003d0a:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003d0c:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <RCkeysRefresh+0x21c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	7cdb      	ldrb	r3, [r3, #19]
 8003d14:	b25a      	sxtb	r2, r3
 8003d16:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <RCkeysRefresh+0x220>)
 8003d18:	71da      	strb	r2, [r3, #7]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000074 	.word	0x20000074
 8003d2c:	200005a0 	.word	0x200005a0

08003d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	4a11      	ldr	r2, [pc, #68]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_MspInit+0x54>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	210f      	movs	r1, #15
 8003d72:	f06f 0001 	mvn.w	r0, #1
 8003d76:	f001 fe98 	bl	8005aaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	@ 0x30
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed0 <HAL_CAN_MspInit+0x148>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d13d      	bne.n	8003e26 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003daa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a48      	ldr	r2, [pc, #288]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003db4:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10d      	bne.n	8003dd8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	4b45      	ldr	r3, [pc, #276]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	4a44      	ldr	r2, [pc, #272]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dcc:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003de2:	f043 0308 	orr.w	r3, r3, #8
 8003de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003df4:	2303      	movs	r3, #3
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e00:	2303      	movs	r3, #3
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003e04:	2309      	movs	r3, #9
 8003e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4833      	ldr	r0, [pc, #204]	@ (8003edc <HAL_CAN_MspInit+0x154>)
 8003e10:	f002 fa84 	bl	800631c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2105      	movs	r1, #5
 8003e18:	2014      	movs	r0, #20
 8003e1a:	f001 fe46 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003e1e:	2014      	movs	r0, #20
 8003e20:	f001 fe5f 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003e24:	e04f      	b.n	8003ec6 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee0 <HAL_CAN_MspInit+0x158>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d14a      	bne.n	8003ec6 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003e4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a20      	ldr	r2, [pc, #128]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003e56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed4 <HAL_CAN_MspInit+0x14c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10d      	bne.n	8003e7a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a15      	ldr	r2, [pc, #84]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <HAL_CAN_MspInit+0x150>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e96:	2360      	movs	r3, #96	@ 0x60
 8003e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003ea6:	2309      	movs	r3, #9
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	4619      	mov	r1, r3
 8003eb0:	480c      	ldr	r0, [pc, #48]	@ (8003ee4 <HAL_CAN_MspInit+0x15c>)
 8003eb2:	f002 fa33 	bl	800631c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2105      	movs	r1, #5
 8003eba:	2040      	movs	r0, #64	@ 0x40
 8003ebc:	f001 fdf5 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003ec0:	2040      	movs	r0, #64	@ 0x40
 8003ec2:	f001 fe0e 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
}
 8003ec6:	bf00      	nop
 8003ec8:	3730      	adds	r7, #48	@ 0x30
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40006400 	.word	0x40006400
 8003ed4:	20000e50 	.word	0x20000e50
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020c00 	.word	0x40020c00
 8003ee0:	40006800 	.word	0x40006800
 8003ee4:	40020400 	.word	0x40020400

08003ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	@ 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a29      	ldr	r2, [pc, #164]	@ (8003fac <HAL_I2C_MspInit+0xc4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d14b      	bne.n	8003fa2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	4a27      	ldr	r2, [pc, #156]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1a:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f48:	2312      	movs	r3, #18
 8003f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f50:	2303      	movs	r3, #3
 8003f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f54:	2304      	movs	r3, #4
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4815      	ldr	r0, [pc, #84]	@ (8003fb4 <HAL_I2C_MspInit+0xcc>)
 8003f60:	f002 f9dc 	bl	800631c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f6a:	2312      	movs	r3, #18
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f76:	2304      	movs	r3, #4
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	480d      	ldr	r0, [pc, #52]	@ (8003fb8 <HAL_I2C_MspInit+0xd0>)
 8003f82:	f002 f9cb 	bl	800631c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_I2C_MspInit+0xc8>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fa2:	bf00      	nop
 8003fa4:	3728      	adds	r7, #40	@ 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40005c00 	.word	0x40005c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020000 	.word	0x40020000

08003fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a28      	ldr	r2, [pc, #160]	@ (800407c <HAL_SPI_MspInit+0xc0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d149      	bne.n	8004072 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	4b27      	ldr	r3, [pc, #156]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8003fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	6313      	str	r3, [r2, #48]	@ 0x30
 800400a:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6313      	str	r3, [r2, #48]	@ 0x30
 8004026:	4b16      	ldr	r3, [pc, #88]	@ (8004080 <HAL_SPI_MspInit+0xc4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004032:	2318      	movs	r3, #24
 8004034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	2303      	movs	r3, #3
 8004040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004042:	2305      	movs	r3, #5
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	480d      	ldr	r0, [pc, #52]	@ (8004084 <HAL_SPI_MspInit+0xc8>)
 800404e:	f002 f965 	bl	800631c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004056:	2302      	movs	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405e:	2303      	movs	r3, #3
 8004060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004062:	2305      	movs	r3, #5
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	4806      	ldr	r0, [pc, #24]	@ (8004088 <HAL_SPI_MspInit+0xcc>)
 800406e:	f002 f955 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	@ 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40013000 	.word	0x40013000
 8004080:	40023800 	.word	0x40023800
 8004084:	40020400 	.word	0x40020400
 8004088:	40020000 	.word	0x40020000

0800408c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a4e      	ldr	r2, [pc, #312]	@ (80041d4 <HAL_TIM_PWM_MspInit+0x148>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	4a4c      	ldr	r2, [pc, #304]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ae:	4b4a      	ldr	r3, [pc, #296]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040ba:	e086      	b.n	80041ca <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a46      	ldr	r2, [pc, #280]	@ (80041dc <HAL_TIM_PWM_MspInit+0x150>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d16e      	bne.n	80041a4 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	4b43      	ldr	r3, [pc, #268]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a42      	ldr	r2, [pc, #264]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040d0:	f043 0308 	orr.w	r3, r3, #8
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b40      	ldr	r3, [pc, #256]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80040e2:	4b3f      	ldr	r3, [pc, #252]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 80040e4:	4a3f      	ldr	r2, [pc, #252]	@ (80041e4 <HAL_TIM_PWM_MspInit+0x158>)
 80040e6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80040e8:	4b3d      	ldr	r3, [pc, #244]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 80040ea:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80040ee:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80040fc:	4b38      	ldr	r3, [pc, #224]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 80040fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004102:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004104:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 8004106:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800410a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800410c:	4b34      	ldr	r3, [pc, #208]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 800410e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004112:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8004114:	4b32      	ldr	r3, [pc, #200]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800411a:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004120:	4b2f      	ldr	r3, [pc, #188]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 8004122:	2200      	movs	r2, #0
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8004126:	482e      	ldr	r0, [pc, #184]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 8004128:	f001 fcf6 	bl	8005b18 <HAL_DMA_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8004132:	f7fe fda3 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24
 800413c:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <HAL_TIM_PWM_MspInit+0x154>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8004142:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004144:	4a29      	ldr	r2, [pc, #164]	@ (80041ec <HAL_TIM_PWM_MspInit+0x160>)
 8004146:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800414a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800414e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004156:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800415c:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800415e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004162:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004166:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800416a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800416c:	4b1e      	ldr	r3, [pc, #120]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800416e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004172:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8004174:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004176:	2200      	movs	r2, #0
 8004178:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800417a:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8004186:	4818      	ldr	r0, [pc, #96]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004188:	f001 fcc6 	bl	8005b18 <HAL_DMA_Init>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8004192:	f7fe fd73 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
 800419c:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <HAL_TIM_PWM_MspInit+0x15c>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80041a2:	e012      	b.n	80041ca <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <HAL_TIM_PWM_MspInit+0x164>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_TIM_PWM_MspInit+0x14c>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	200009ec 	.word	0x200009ec
 80041e4:	40026040 	.word	0x40026040
 80041e8:	20000a4c 	.word	0x20000a4c
 80041ec:	40026070 	.word	0x40026070
 80041f0:	40010400 	.word	0x40010400

080041f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2c      	ldr	r2, [pc, #176]	@ (80042b4 <HAL_TIM_Base_MspInit+0xc0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d13e      	bne.n	8004284 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a2a      	ldr	r2, [pc, #168]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8004222:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <HAL_TIM_Base_MspInit+0xcc>)
 8004226:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8004228:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800422a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800422e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004230:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004236:	4b21      	ldr	r3, [pc, #132]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004238:	2200      	movs	r2, #0
 800423a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800423c:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800423e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004242:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004244:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800424a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800424e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004252:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004260:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004262:	2200      	movs	r2, #0
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8004266:	4815      	ldr	r0, [pc, #84]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 8004268:	f001 fc56 	bl	8005b18 <HAL_DMA_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004272:	f7fe fd03 	bl	8002c7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a10      	ldr	r2, [pc, #64]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800427c:	4a0f      	ldr	r2, [pc, #60]	@ (80042bc <HAL_TIM_Base_MspInit+0xc8>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004282:	e012      	b.n	80042aa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <HAL_TIM_Base_MspInit+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10d      	bne.n	80042aa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429c:	6453      	str	r3, [r2, #68]	@ 0x44
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_TIM_Base_MspInit+0xc4>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40023800 	.word	0x40023800
 80042bc:	2000098c 	.word	0x2000098c
 80042c0:	400260b8 	.word	0x400260b8
 80042c4:	40014400 	.word	0x40014400

080042c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	@ 0x38
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004490 <HAL_TIM_MspPostInit+0x1c8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d11f      	bne.n	800432a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	4b69      	ldr	r3, [pc, #420]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a68      	ldr	r2, [pc, #416]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80042f4:	f043 0310 	orr.w	r3, r3, #16
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b66      	ldr	r3, [pc, #408]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8004306:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004314:	2300      	movs	r3, #0
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004318:	2301      	movs	r3, #1
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800431c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004320:	4619      	mov	r1, r3
 8004322:	485d      	ldr	r0, [pc, #372]	@ (8004498 <HAL_TIM_MspPostInit+0x1d0>)
 8004324:	f001 fffa 	bl	800631c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004328:	e0ae      	b.n	8004488 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5b      	ldr	r2, [pc, #364]	@ (800449c <HAL_TIM_MspPostInit+0x1d4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d11f      	bne.n	8004374 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	4b56      	ldr	r3, [pc, #344]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433c:	4a55      	ldr	r2, [pc, #340]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 800433e:	f043 0308 	orr.w	r3, r3, #8
 8004342:	6313      	str	r3, [r2, #48]	@ 0x30
 8004344:	4b53      	ldr	r3, [pc, #332]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004350:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2300      	movs	r3, #0
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004362:	2302      	movs	r3, #2
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800436a:	4619      	mov	r1, r3
 800436c:	484c      	ldr	r0, [pc, #304]	@ (80044a0 <HAL_TIM_MspPostInit+0x1d8>)
 800436e:	f001 ffd5 	bl	800631c <HAL_GPIO_Init>
}
 8004372:	e089      	b.n	8004488 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4a      	ldr	r2, [pc, #296]	@ (80044a4 <HAL_TIM_MspPostInit+0x1dc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d11f      	bne.n	80043be <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	4b44      	ldr	r3, [pc, #272]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	4a43      	ldr	r2, [pc, #268]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800438c:	6313      	str	r3, [r2, #48]	@ 0x30
 800438e:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800439a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a8:	2300      	movs	r3, #0
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043ac:	2302      	movs	r3, #2
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80043b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043b4:	4619      	mov	r1, r3
 80043b6:	483c      	ldr	r0, [pc, #240]	@ (80044a8 <HAL_TIM_MspPostInit+0x1e0>)
 80043b8:	f001 ffb0 	bl	800631c <HAL_GPIO_Init>
}
 80043bc:	e064      	b.n	8004488 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3a      	ldr	r2, [pc, #232]	@ (80044ac <HAL_TIM_MspPostInit+0x1e4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d13c      	bne.n	8004442 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	4b31      	ldr	r3, [pc, #196]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	4a30      	ldr	r2, [pc, #192]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f4:	4b27      	ldr	r3, [pc, #156]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004400:	23c0      	movs	r3, #192	@ 0xc0
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	2300      	movs	r3, #0
 800440e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004410:	2303      	movs	r3, #3
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004418:	4619      	mov	r1, r3
 800441a:	4825      	ldr	r0, [pc, #148]	@ (80044b0 <HAL_TIM_MspPostInit+0x1e8>)
 800441c:	f001 ff7e 	bl	800631c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004420:	2340      	movs	r3, #64	@ 0x40
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004424:	2302      	movs	r3, #2
 8004426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004430:	2303      	movs	r3, #3
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004438:	4619      	mov	r1, r3
 800443a:	481e      	ldr	r0, [pc, #120]	@ (80044b4 <HAL_TIM_MspPostInit+0x1ec>)
 800443c:	f001 ff6e 	bl	800631c <HAL_GPIO_Init>
}
 8004440:	e022      	b.n	8004488 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <HAL_TIM_MspPostInit+0x1f0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d11d      	bne.n	8004488 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 8004456:	f043 0320 	orr.w	r3, r3, #32
 800445a:	6313      	str	r3, [r2, #48]	@ 0x30
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <HAL_TIM_MspPostInit+0x1cc>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004468:	2340      	movs	r3, #64	@ 0x40
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004474:	2302      	movs	r3, #2
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004478:	2303      	movs	r3, #3
 800447a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800447c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004480:	4619      	mov	r1, r3
 8004482:	480e      	ldr	r0, [pc, #56]	@ (80044bc <HAL_TIM_MspPostInit+0x1f4>)
 8004484:	f001 ff4a 	bl	800631c <HAL_GPIO_Init>
}
 8004488:	bf00      	nop
 800448a:	3738      	adds	r7, #56	@ 0x38
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40010000 	.word	0x40010000
 8004494:	40023800 	.word	0x40023800
 8004498:	40021000 	.word	0x40021000
 800449c:	40000800 	.word	0x40000800
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40021c00 	.word	0x40021c00
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40020800 	.word	0x40020800
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40021400 	.word	0x40021400

080044c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08e      	sub	sp, #56	@ 0x38
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a90      	ldr	r2, [pc, #576]	@ (8004720 <HAL_UART_MspInit+0x260>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f040 80b2 	bne.w	8004648 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004724 <HAL_UART_MspInit+0x264>)
 80044ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ec:	4a8d      	ldr	r2, [pc, #564]	@ (8004724 <HAL_UART_MspInit+0x264>)
 80044ee:	f043 0310 	orr.w	r3, r3, #16
 80044f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80044f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004724 <HAL_UART_MspInit+0x264>)
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	4b87      	ldr	r3, [pc, #540]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	4a86      	ldr	r2, [pc, #536]	@ (8004724 <HAL_UART_MspInit+0x264>)
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004510:	4b84      	ldr	r3, [pc, #528]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451c:	2300      	movs	r3, #0
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	4b80      	ldr	r3, [pc, #512]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	4a7f      	ldr	r2, [pc, #508]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6313      	str	r3, [r2, #48]	@ 0x30
 800452c:	4b7d      	ldr	r3, [pc, #500]	@ (8004724 <HAL_UART_MspInit+0x264>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004544:	2303      	movs	r3, #3
 8004546:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004548:	2307      	movs	r3, #7
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004550:	4619      	mov	r1, r3
 8004552:	4875      	ldr	r0, [pc, #468]	@ (8004728 <HAL_UART_MspInit+0x268>)
 8004554:	f001 fee2 	bl	800631c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004566:	2303      	movs	r3, #3
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800456a:	2307      	movs	r3, #7
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004572:	4619      	mov	r1, r3
 8004574:	486d      	ldr	r0, [pc, #436]	@ (800472c <HAL_UART_MspInit+0x26c>)
 8004576:	f001 fed1 	bl	800631c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800457a:	4b6d      	ldr	r3, [pc, #436]	@ (8004730 <HAL_UART_MspInit+0x270>)
 800457c:	4a6d      	ldr	r2, [pc, #436]	@ (8004734 <HAL_UART_MspInit+0x274>)
 800457e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004580:	4b6b      	ldr	r3, [pc, #428]	@ (8004730 <HAL_UART_MspInit+0x270>)
 8004582:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004586:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004588:	4b69      	ldr	r3, [pc, #420]	@ (8004730 <HAL_UART_MspInit+0x270>)
 800458a:	2240      	movs	r2, #64	@ 0x40
 800458c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800458e:	4b68      	ldr	r3, [pc, #416]	@ (8004730 <HAL_UART_MspInit+0x270>)
 8004590:	2200      	movs	r2, #0
 8004592:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004594:	4b66      	ldr	r3, [pc, #408]	@ (8004730 <HAL_UART_MspInit+0x270>)
 8004596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800459a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800459c:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_UART_MspInit+0x270>)
 800459e:	2200      	movs	r2, #0
 80045a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045a2:	4b63      	ldr	r3, [pc, #396]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80045a8:	4b61      	ldr	r3, [pc, #388]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80045ae:	4b60      	ldr	r3, [pc, #384]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80045b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80045bc:	485c      	ldr	r0, [pc, #368]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045be:	f001 faab 	bl	8005b18 <HAL_DMA_Init>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80045c8:	f7fe fb58 	bl	8002c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a58      	ldr	r2, [pc, #352]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80045d2:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_UART_MspInit+0x270>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80045d8:	4b57      	ldr	r3, [pc, #348]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045da:	4a58      	ldr	r2, [pc, #352]	@ (800473c <HAL_UART_MspInit+0x27c>)
 80045dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80045de:	4b56      	ldr	r3, [pc, #344]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80045e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e6:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ec:	4b52      	ldr	r3, [pc, #328]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045f2:	4b51      	ldr	r3, [pc, #324]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <HAL_UART_MspInit+0x278>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004600:	4b4d      	ldr	r3, [pc, #308]	@ (8004738 <HAL_UART_MspInit+0x278>)
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004606:	4b4c      	ldr	r3, [pc, #304]	@ (8004738 <HAL_UART_MspInit+0x278>)
 8004608:	2200      	movs	r2, #0
 800460a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800460c:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_UART_MspInit+0x278>)
 800460e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004612:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004614:	4b48      	ldr	r3, [pc, #288]	@ (8004738 <HAL_UART_MspInit+0x278>)
 8004616:	2200      	movs	r2, #0
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800461a:	4847      	ldr	r0, [pc, #284]	@ (8004738 <HAL_UART_MspInit+0x278>)
 800461c:	f001 fa7c 	bl	8005b18 <HAL_DMA_Init>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8004626:	f7fe fb29 	bl	8002c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a42      	ldr	r2, [pc, #264]	@ (8004738 <HAL_UART_MspInit+0x278>)
 800462e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004630:	4a41      	ldr	r2, [pc, #260]	@ (8004738 <HAL_UART_MspInit+0x278>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004636:	2200      	movs	r2, #0
 8004638:	2105      	movs	r1, #5
 800463a:	2025      	movs	r0, #37	@ 0x25
 800463c:	f001 fa35 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004640:	2025      	movs	r0, #37	@ 0x25
 8004642:	f001 fa4e 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004646:	e11c      	b.n	8004882 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <HAL_UART_MspInit+0x280>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d17e      	bne.n	8004750 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	4b33      	ldr	r3, [pc, #204]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	4a32      	ldr	r2, [pc, #200]	@ (8004724 <HAL_UART_MspInit+0x264>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004660:	6413      	str	r3, [r2, #64]	@ 0x40
 8004662:	4b30      	ldr	r3, [pc, #192]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6313      	str	r3, [r2, #48]	@ 0x30
 800467e:	4b29      	ldr	r3, [pc, #164]	@ (8004724 <HAL_UART_MspInit+0x264>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800468a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800469c:	2307      	movs	r3, #7
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046a4:	4619      	mov	r1, r3
 80046a6:	4827      	ldr	r0, [pc, #156]	@ (8004744 <HAL_UART_MspInit+0x284>)
 80046a8:	f001 fe38 	bl	800631c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80046ac:	4b26      	ldr	r3, [pc, #152]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046ae:	4a27      	ldr	r2, [pc, #156]	@ (800474c <HAL_UART_MspInit+0x28c>)
 80046b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046ba:	4b23      	ldr	r3, [pc, #140]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c0:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c6:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80046da:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046e2:	4b19      	ldr	r3, [pc, #100]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80046e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ea:	4b17      	ldr	r3, [pc, #92]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046f0:	4815      	ldr	r0, [pc, #84]	@ (8004748 <HAL_UART_MspInit+0x288>)
 80046f2:	f001 fa11 	bl	8005b18 <HAL_DMA_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80046fc:	f7fe fabe 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <HAL_UART_MspInit+0x288>)
 8004704:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004706:	4a10      	ldr	r2, [pc, #64]	@ (8004748 <HAL_UART_MspInit+0x288>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	2105      	movs	r1, #5
 8004710:	2027      	movs	r0, #39	@ 0x27
 8004712:	f001 f9ca 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004716:	2027      	movs	r0, #39	@ 0x27
 8004718:	f001 f9e3 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
}
 800471c:	e0b1      	b.n	8004882 <HAL_UART_MspInit+0x3c2>
 800471e:	bf00      	nop
 8004720:	40011000 	.word	0x40011000
 8004724:	40023800 	.word	0x40023800
 8004728:	40020400 	.word	0x40020400
 800472c:	40020000 	.word	0x40020000
 8004730:	20000b84 	.word	0x20000b84
 8004734:	400264b8 	.word	0x400264b8
 8004738:	20000be4 	.word	0x20000be4
 800473c:	40026440 	.word	0x40026440
 8004740:	40004800 	.word	0x40004800
 8004744:	40020800 	.word	0x40020800
 8004748:	20000c44 	.word	0x20000c44
 800474c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a4d      	ldr	r2, [pc, #308]	@ (800488c <HAL_UART_MspInit+0x3cc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	f040 8093 	bne.w	8004882 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	4b4b      	ldr	r3, [pc, #300]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	4a4a      	ldr	r2, [pc, #296]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 8004766:	f043 0320 	orr.w	r3, r3, #32
 800476a:	6453      	str	r3, [r2, #68]	@ 0x44
 800476c:	4b48      	ldr	r3, [pc, #288]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 800476e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	4b44      	ldr	r3, [pc, #272]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	4a43      	ldr	r2, [pc, #268]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 8004782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004786:	6313      	str	r3, [r2, #48]	@ 0x30
 8004788:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <HAL_UART_MspInit+0x3d0>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004794:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047a6:	2308      	movs	r3, #8
 80047a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ae:	4619      	mov	r1, r3
 80047b0:	4838      	ldr	r0, [pc, #224]	@ (8004894 <HAL_UART_MspInit+0x3d4>)
 80047b2:	f001 fdb3 	bl	800631c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80047b6:	4b38      	ldr	r3, [pc, #224]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047b8:	4a38      	ldr	r2, [pc, #224]	@ (800489c <HAL_UART_MspInit+0x3dc>)
 80047ba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80047bc:	4b36      	ldr	r3, [pc, #216]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047be:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80047c2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c4:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ca:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d0:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047d6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047da:	2200      	movs	r2, #0
 80047dc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047de:	4b2e      	ldr	r3, [pc, #184]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80047e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80047f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f2:	4b29      	ldr	r3, [pc, #164]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80047f8:	4827      	ldr	r0, [pc, #156]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 80047fa:	f001 f98d 	bl	8005b18 <HAL_DMA_Init>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004804:	f7fe fa3a 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a23      	ldr	r2, [pc, #140]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 800480c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_UART_MspInit+0x3d8>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004814:	4b22      	ldr	r3, [pc, #136]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004816:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <HAL_UART_MspInit+0x3e4>)
 8004818:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800481a:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800481c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004820:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004822:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004824:	2240      	movs	r2, #64	@ 0x40
 8004826:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004828:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800482a:	2200      	movs	r2, #0
 800482c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800482e:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004830:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004834:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004836:	4b1a      	ldr	r3, [pc, #104]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800483c:	4b18      	ldr	r3, [pc, #96]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004842:	4b17      	ldr	r3, [pc, #92]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004844:	2200      	movs	r2, #0
 8004846:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800484a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800484e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004850:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004852:	2200      	movs	r2, #0
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004856:	4812      	ldr	r0, [pc, #72]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 8004858:	f001 f95e 	bl	8005b18 <HAL_DMA_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004862:	f7fe fa0b 	bl	8002c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
 800486c:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <HAL_UART_MspInit+0x3e0>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004872:	2200      	movs	r2, #0
 8004874:	2105      	movs	r1, #5
 8004876:	2047      	movs	r0, #71	@ 0x47
 8004878:	f001 f917 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800487c:	2047      	movs	r0, #71	@ 0x47
 800487e:	f001 f930 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
}
 8004882:	bf00      	nop
 8004884:	3738      	adds	r7, #56	@ 0x38
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40011400 	.word	0x40011400
 8004890:	40023800 	.word	0x40023800
 8004894:	40021800 	.word	0x40021800
 8004898:	20000ca4 	.word	0x20000ca4
 800489c:	40026428 	.word	0x40026428
 80048a0:	20000d04 	.word	0x20000d04
 80048a4:	400264a0 	.word	0x400264a0

080048a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80048ac:	f003 fba4 	bl	8007ff8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <NMI_Handler+0x8>

080048b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <HardFault_Handler+0x4>

080048bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <MemManage_Handler+0x4>

080048c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <BusFault_Handler+0x4>

080048cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <UsageFault_Handler+0x4>

080048d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e6:	f000 f959 	bl	8004b9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048ea:	f007 fed9 	bl	800c6a0 <xTaskGetSchedulerState>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80048f4:	f008 fdb0 	bl	800d458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004900:	2008      	movs	r0, #8
 8004902:	f001 fed9 	bl	80066b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004906:	4802      	ldr	r0, [pc, #8]	@ (8004910 <EXTI3_IRQHandler+0x14>)
 8004908:	f7fd f966 	bl	8001bd8 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800490c:	bf00      	nop
 800490e:	bd80      	pop	{r7, pc}
 8004910:	2000071c 	.word	0x2000071c

08004914 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004918:	2010      	movs	r0, #16
 800491a:	f001 fecd 	bl	80066b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004928:	4802      	ldr	r0, [pc, #8]	@ (8004934 <DMA1_Stream1_IRQHandler+0x10>)
 800492a:	f001 fa8d 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000c44 	.word	0x20000c44

08004938 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800493c:	4802      	ldr	r0, [pc, #8]	@ (8004948 <DMA1_Stream2_IRQHandler+0x10>)
 800493e:	f001 fa83 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200009ec 	.word	0x200009ec

0800494c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004950:	4802      	ldr	r0, [pc, #8]	@ (800495c <DMA1_Stream4_IRQHandler+0x10>)
 8004952:	f001 fa79 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000a4c 	.word	0x20000a4c

08004960 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004964:	4802      	ldr	r0, [pc, #8]	@ (8004970 <CAN1_RX0_IRQHandler+0x10>)
 8004966:	f000 fd95 	bl	8005494 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000728 	.word	0x20000728

08004974 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004978:	4802      	ldr	r0, [pc, #8]	@ (8004984 <USART1_IRQHandler+0x10>)
 800497a:	f004 ff3f 	bl	80097fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000aac 	.word	0x20000aac

08004988 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800498c:	4802      	ldr	r0, [pc, #8]	@ (8004998 <DMA1_Stream7_IRQHandler+0x10>)
 800498e:	f001 fa5b 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000098c 	.word	0x2000098c

0800499c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80049a0:	4802      	ldr	r0, [pc, #8]	@ (80049ac <DMA2_Stream1_IRQHandler+0x10>)
 80049a2:	f001 fa51 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000ca4 	.word	0x20000ca4

080049b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80049b4:	4802      	ldr	r0, [pc, #8]	@ (80049c0 <DMA2_Stream2_IRQHandler+0x10>)
 80049b6:	f001 fa47 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000be4 	.word	0x20000be4

080049c4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80049c8:	4802      	ldr	r0, [pc, #8]	@ (80049d4 <CAN2_RX0_IRQHandler+0x10>)
 80049ca:	f000 fd63 	bl	8005494 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000750 	.word	0x20000750

080049d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80049dc:	4802      	ldr	r0, [pc, #8]	@ (80049e8 <DMA2_Stream6_IRQHandler+0x10>)
 80049de:	f001 fa33 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000d04 	.word	0x20000d04

080049ec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049f0:	4802      	ldr	r0, [pc, #8]	@ (80049fc <DMA2_Stream7_IRQHandler+0x10>)
 80049f2:	f001 fa29 	bl	8005e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000b84 	.word	0x20000b84

08004a00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a04:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <USART6_IRQHandler+0x10>)
 8004a06:	f004 fef9 	bl	80097fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000b3c 	.word	0x20000b3c

08004a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a1c:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <_sbrk+0x5c>)
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <_sbrk+0x60>)
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <_sbrk+0x64>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a30:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <_sbrk+0x64>)
 8004a32:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <_sbrk+0x68>)
 8004a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a36:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <_sbrk+0x64>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d207      	bcs.n	8004a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a44:	f009 f806 	bl	800da54 <__errno>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a52:	e009      	b.n	8004a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a54:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <_sbrk+0x64>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <_sbrk+0x64>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	4a05      	ldr	r2, [pc, #20]	@ (8004a78 <_sbrk+0x64>)
 8004a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20020000 	.word	0x20020000
 8004a74:	00000400 	.word	0x00000400
 8004a78:	20000e54 	.word	0x20000e54
 8004a7c:	20005990 	.word	0x20005990

08004a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <SystemInit+0x20>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8a:	4a05      	ldr	r2, [pc, #20]	@ (8004aa0 <SystemInit+0x20>)
 8004a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004aa8:	f7ff ffea 	bl	8004a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004aac:	480c      	ldr	r0, [pc, #48]	@ (8004ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004aae:	490d      	ldr	r1, [pc, #52]	@ (8004ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ab4:	e002      	b.n	8004abc <LoopCopyDataInit>

08004ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aba:	3304      	adds	r3, #4

08004abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ac0:	d3f9      	bcc.n	8004ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8004af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ac8:	e001      	b.n	8004ace <LoopFillZerobss>

08004aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004acc:	3204      	adds	r2, #4

08004ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ad0:	d3fb      	bcc.n	8004aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ad2:	f008 ffc5 	bl	800da60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ad6:	f7fd f99f 	bl	8001e18 <main>
  bx  lr    
 8004ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ae4:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8004ae8:	0800e61c 	.word	0x0800e61c
  ldr r2, =_sbss
 8004aec:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8004af0:	2000598c 	.word	0x2000598c

08004af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004af4:	e7fe      	b.n	8004af4 <ADC_IRQHandler>
	...

08004af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004afc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b38 <HAL_Init+0x40>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0d      	ldr	r2, [pc, #52]	@ (8004b38 <HAL_Init+0x40>)
 8004b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_Init+0x40>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b38 <HAL_Init+0x40>)
 8004b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <HAL_Init+0x40>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a07      	ldr	r2, [pc, #28]	@ (8004b38 <HAL_Init+0x40>)
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b20:	2003      	movs	r0, #3
 8004b22:	f000 ffb7 	bl	8005a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b26:	200f      	movs	r0, #15
 8004b28:	f000 f808 	bl	8004b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b2c:	f7ff f900 	bl	8003d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023c00 	.word	0x40023c00

08004b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b44:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <HAL_InitTick+0x54>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_InitTick+0x58>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 ffcf 	bl	8005afe <HAL_SYSTICK_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00e      	b.n	8004b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d80a      	bhi.n	8004b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b70:	2200      	movs	r2, #0
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b78:	f000 ff97 	bl	8005aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b7c:	4a06      	ldr	r2, [pc, #24]	@ (8004b98 <HAL_InitTick+0x5c>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000078 	.word	0x20000078
 8004b94:	20000080 	.word	0x20000080
 8004b98:	2000007c 	.word	0x2000007c

08004b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_IncTick+0x20>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_IncTick+0x24>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	4a04      	ldr	r2, [pc, #16]	@ (8004bc0 <HAL_IncTick+0x24>)
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000080 	.word	0x20000080
 8004bc0:	20000e58 	.word	0x20000e58

08004bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004bc8:	4b03      	ldr	r3, [pc, #12]	@ (8004bd8 <HAL_GetTick+0x14>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20000e58 	.word	0x20000e58

08004bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004be4:	f7ff ffee 	bl	8004bc4 <HAL_GetTick>
 8004be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bf4:	d005      	beq.n	8004c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <HAL_Delay+0x44>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c02:	bf00      	nop
 8004c04:	f7ff ffde 	bl	8004bc4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d8f7      	bhi.n	8004c04 <HAL_Delay+0x28>
  {
  }
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000080 	.word	0x20000080

08004c24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0ed      	b.n	8004e12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff f8a0 	bl	8003d88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c58:	f7ff ffb4 	bl	8004bc4 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c5e:	e012      	b.n	8004c86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c60:	f7ff ffb0 	bl	8004bc4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b0a      	cmp	r3, #10
 8004c6c:	d90b      	bls.n	8004c86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0c5      	b.n	8004e12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0e5      	beq.n	8004c60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0202 	bic.w	r2, r2, #2
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca4:	f7ff ff8e 	bl	8004bc4 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004caa:	e012      	b.n	8004cd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cac:	f7ff ff8a 	bl	8004bc4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b0a      	cmp	r3, #10
 8004cb8:	d90b      	bls.n	8004cd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2205      	movs	r2, #5
 8004cca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e09f      	b.n	8004e12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	7e1b      	ldrb	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e007      	b.n	8004d0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7e5b      	ldrb	r3, [r3, #25]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d108      	bne.n	8004d24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e007      	b.n	8004d34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7e9b      	ldrb	r3, [r3, #26]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0220 	orr.w	r2, r2, #32
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e007      	b.n	8004d5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0220 	bic.w	r2, r2, #32
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7edb      	ldrb	r3, [r3, #27]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d108      	bne.n	8004d78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0210 	bic.w	r2, r2, #16
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e007      	b.n	8004d88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0210 	orr.w	r2, r2, #16
 8004d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	7f1b      	ldrb	r3, [r3, #28]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d108      	bne.n	8004da2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e007      	b.n	8004db2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0208 	bic.w	r2, r2, #8
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7f5b      	ldrb	r3, [r3, #29]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d108      	bne.n	8004dcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0204 	orr.w	r2, r2, #4
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e007      	b.n	8004ddc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d003      	beq.n	8004e42 <HAL_CAN_ConfigFilter+0x26>
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	f040 80be 	bne.w	8004fbe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004e42:	4b65      	ldr	r3, [pc, #404]	@ (8004fd8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004e44:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e5c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	431a      	orrs	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2201      	movs	r2, #1
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d123      	bne.n	8004eec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ec6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3248      	adds	r2, #72	@ 0x48
 8004ecc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ee0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	3348      	adds	r3, #72	@ 0x48
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	440b      	add	r3, r1
 8004eea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d122      	bne.n	8004f3a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3248      	adds	r2, #72	@ 0x48
 8004f1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	3348      	adds	r3, #72	@ 0x48
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	401a      	ands	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004f54:	e007      	b.n	8004f66 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	401a      	ands	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004f80:	e007      	b.n	8004f92 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fb0:	f023 0201 	bic.w	r2, r3, #1
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e006      	b.n	8004fcc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40006400 	.word	0x40006400

08004fdc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d12e      	bne.n	800504e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005008:	f7ff fddc 	bl	8004bc4 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800500e:	e012      	b.n	8005036 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005010:	f7ff fdd8 	bl	8004bc4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b0a      	cmp	r3, #10
 800501c:	d90b      	bls.n	8005036 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2205      	movs	r2, #5
 800502e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e012      	b.n	800505c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e006      	b.n	800505c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
  }
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005064:	b480      	push	{r7}
 8005066:	b089      	sub	sp, #36	@ 0x24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005078:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005082:	7ffb      	ldrb	r3, [r7, #31]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d003      	beq.n	8005090 <HAL_CAN_AddTxMessage+0x2c>
 8005088:	7ffb      	ldrb	r3, [r7, #31]
 800508a:	2b02      	cmp	r3, #2
 800508c:	f040 80ad 	bne.w	80051ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8095 	beq.w	80051da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	0e1b      	lsrs	r3, r3, #24
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80050ba:	2201      	movs	r2, #1
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	409a      	lsls	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10d      	bne.n	80050e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	6809      	ldr	r1, [r1, #0]
 80050da:	431a      	orrs	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3318      	adds	r3, #24
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00f      	b.n	8005108 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80050f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80050fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	3318      	adds	r3, #24
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	440b      	add	r3, r1
 8005106:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3318      	adds	r3, #24
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	440b      	add	r3, r1
 8005118:	3304      	adds	r3, #4
 800511a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	7d1b      	ldrb	r3, [r3, #20]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d111      	bne.n	8005148 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3318      	adds	r3, #24
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	6811      	ldr	r1, [r2, #0]
 8005138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3318      	adds	r3, #24
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	440b      	add	r3, r1
 8005144:	3304      	adds	r3, #4
 8005146:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3307      	adds	r3, #7
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	061a      	lsls	r2, r3, #24
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3306      	adds	r3, #6
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3305      	adds	r3, #5
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	4313      	orrs	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	3204      	adds	r2, #4
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	4610      	mov	r0, r2
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	6811      	ldr	r1, [r2, #0]
 8005170:	ea43 0200 	orr.w	r2, r3, r0
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	440b      	add	r3, r1
 800517a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800517e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3303      	adds	r3, #3
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	061a      	lsls	r2, r3, #24
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3302      	adds	r3, #2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3301      	adds	r3, #1
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	4313      	orrs	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	4610      	mov	r0, r2
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	ea43 0200 	orr.w	r2, r3, r0
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	440b      	add	r3, r1
 80051b0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80051b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	3318      	adds	r3, #24
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4413      	add	r3, r2
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6811      	ldr	r1, [r2, #0]
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3318      	adds	r3, #24
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	440b      	add	r3, r1
 80051d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e00e      	b.n	80051f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e006      	b.n	80051f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3724      	adds	r7, #36	@ 0x24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005218:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d003      	beq.n	8005228 <HAL_CAN_GetRxMessage+0x24>
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b02      	cmp	r3, #2
 8005224:	f040 8103 	bne.w	800542e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10e      	bne.n	800524c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0f7      	b.n	800543c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d107      	bne.n	800526a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0e8      	b.n	800543c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	331b      	adds	r3, #27
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0204 	and.w	r2, r3, #4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	331b      	adds	r3, #27
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0d5b      	lsrs	r3, r3, #21
 8005298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e00b      	b.n	80052ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	331b      	adds	r3, #27
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	331b      	adds	r3, #27
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	4413      	add	r3, r2
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0202 	and.w	r2, r3, #2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	331b      	adds	r3, #27
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4413      	add	r3, r2
 80052dc:	3304      	adds	r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2208      	movs	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
 80052ee:	e00b      	b.n	8005308 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	331b      	adds	r3, #27
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	331b      	adds	r3, #27
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	0a1b      	lsrs	r3, r3, #8
 800531a:	b2da      	uxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	331b      	adds	r3, #27
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4413      	add	r3, r2
 8005342:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	4413      	add	r3, r2
 8005358:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0a1a      	lsrs	r2, r3, #8
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	4413      	add	r3, r2
 8005372:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0c1a      	lsrs	r2, r3, #16
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	3302      	adds	r3, #2
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	4413      	add	r3, r2
 800538c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	0e1a      	lsrs	r2, r3, #24
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	3303      	adds	r3, #3
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	0a1a      	lsrs	r2, r3, #8
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	3305      	adds	r3, #5
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	0c1a      	lsrs	r2, r3, #16
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	3306      	adds	r3, #6
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0e1a      	lsrs	r2, r3, #24
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	3307      	adds	r3, #7
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0220 	orr.w	r2, r2, #32
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e007      	b.n	800542a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0220 	orr.w	r2, r2, #32
 8005428:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e006      	b.n	800543c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005458:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d002      	beq.n	8005466 <HAL_CAN_ActivateNotification+0x1e>
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d109      	bne.n	800547a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6959      	ldr	r1, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e006      	b.n	8005488 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	@ 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d07c      	beq.n	80055d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f983 	bl	8005802 <HAL_CAN_TxMailbox0CompleteCallback>
 80054fc:	e016      	b.n	800552c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	e00c      	b.n	800552c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
 8005524:	e002      	b.n	800552c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f989 	bl	800583e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d024      	beq.n	8005580 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800553e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f963 	bl	8005816 <HAL_CAN_TxMailbox1CompleteCallback>
 8005550:	e016      	b.n	8005580 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e00c      	b.n	8005580 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
 8005578:	e002      	b.n	8005580 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f969 	bl	8005852 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d024      	beq.n	80055d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005592:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f943 	bl	800582a <HAL_CAN_TxMailbox2CompleteCallback>
 80055a4:	e016      	b.n	80055d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b8:	e00c      	b.n	80055d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80055cc:	e002      	b.n	80055d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f949 	bl	8005866 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2210      	movs	r2, #16
 80055f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2208      	movs	r2, #8
 8005612:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f930 	bl	800587a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb faee 	bl	8000c14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2208      	movs	r2, #8
 8005676:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f912 	bl	80058a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8f9 	bl	800588e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2210      	movs	r2, #16
 80056b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f8fc 	bl	80058b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2208      	movs	r2, #8
 80056d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8f5 	bl	80058ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d07b      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d072      	beq.n	80057da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	f043 0302 	orr.w	r3, r3, #2
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574e:	2b00      	cmp	r3, #0
 8005750:	d043      	beq.n	80057da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	d03e      	beq.n	80057da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005762:	2b60      	cmp	r3, #96	@ 0x60
 8005764:	d02b      	beq.n	80057be <HAL_CAN_IRQHandler+0x32a>
 8005766:	2b60      	cmp	r3, #96	@ 0x60
 8005768:	d82e      	bhi.n	80057c8 <HAL_CAN_IRQHandler+0x334>
 800576a:	2b50      	cmp	r3, #80	@ 0x50
 800576c:	d022      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x320>
 800576e:	2b50      	cmp	r3, #80	@ 0x50
 8005770:	d82a      	bhi.n	80057c8 <HAL_CAN_IRQHandler+0x334>
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d019      	beq.n	80057aa <HAL_CAN_IRQHandler+0x316>
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d826      	bhi.n	80057c8 <HAL_CAN_IRQHandler+0x334>
 800577a:	2b30      	cmp	r3, #48	@ 0x30
 800577c:	d010      	beq.n	80057a0 <HAL_CAN_IRQHandler+0x30c>
 800577e:	2b30      	cmp	r3, #48	@ 0x30
 8005780:	d822      	bhi.n	80057c8 <HAL_CAN_IRQHandler+0x334>
 8005782:	2b10      	cmp	r3, #16
 8005784:	d002      	beq.n	800578c <HAL_CAN_IRQHandler+0x2f8>
 8005786:	2b20      	cmp	r3, #32
 8005788:	d005      	beq.n	8005796 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800578a:	e01d      	b.n	80057c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	f043 0308 	orr.w	r3, r3, #8
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005794:	e019      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	f043 0310 	orr.w	r3, r3, #16
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800579e:	e014      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	f043 0320 	orr.w	r3, r3, #32
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057a8:	e00f      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057b2:	e00a      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057bc:	e005      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057c6:	e000      	b.n	80057ca <HAL_CAN_IRQHandler+0x336>
            break;
 80057c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80057d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2204      	movs	r2, #4
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f872 	bl	80058de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80057fa:	bf00      	nop
 80057fc:	3728      	adds	r7, #40	@ 0x28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005904:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800591c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005926:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	60d3      	str	r3, [r2, #12]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005940:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <__NVIC_GetPriorityGrouping+0x18>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0307 	and.w	r3, r3, #7
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db0b      	blt.n	8005982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4907      	ldr	r1, [pc, #28]	@ (8005990 <__NVIC_EnableIRQ+0x38>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2001      	movs	r0, #1
 800597a:	fa00 f202 	lsl.w	r2, r0, r2
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e100 	.word	0xe000e100

08005994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	@ (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	@ (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	@ 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	bf28      	it	cs
 8005a06:	2304      	movcs	r3, #4
 8005a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d902      	bls.n	8005a18 <NVIC_EncodePriority+0x30>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3b03      	subs	r3, #3
 8005a16:	e000      	b.n	8005a1a <NVIC_EncodePriority+0x32>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	43d9      	mvns	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	4313      	orrs	r3, r2
         );
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3724      	adds	r7, #36	@ 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a60:	d301      	bcc.n	8005a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00f      	b.n	8005a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a66:	4a0a      	ldr	r2, [pc, #40]	@ (8005a90 <SysTick_Config+0x40>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a6e:	210f      	movs	r1, #15
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a74:	f7ff ff8e 	bl	8005994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <SysTick_Config+0x40>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a7e:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <SysTick_Config+0x40>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	e000e010 	.word	0xe000e010

08005a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff29 	bl	80058f4 <__NVIC_SetPriorityGrouping>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005abc:	f7ff ff3e 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	6978      	ldr	r0, [r7, #20]
 8005ac8:	f7ff ff8e 	bl	80059e8 <NVIC_EncodePriority>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff5d 	bl	8005994 <__NVIC_SetPriority>
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	4603      	mov	r3, r0
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff31 	bl	8005958 <__NVIC_EnableIRQ>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff ffa2 	bl	8005a50 <SysTick_Config>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b24:	f7ff f84e 	bl	8004bc4 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e099      	b.n	8005c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b54:	e00f      	b.n	8005b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b56:	f7ff f835 	bl	8004bc4 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d908      	bls.n	8005b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e078      	b.n	8005c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e8      	bne.n	8005b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4b38      	ldr	r3, [pc, #224]	@ (8005c70 <HAL_DMA_Init+0x158>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d107      	bne.n	8005be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0307 	bic.w	r3, r3, #7
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d117      	bne.n	8005c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00e      	beq.n	8005c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fb01 	bl	8006224 <DMA_CheckFifoParam>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2240      	movs	r2, #64	@ 0x40
 8005c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005c36:	2301      	movs	r3, #1
 8005c38:	e016      	b.n	8005c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fab8 	bl	80061b8 <DMA_CalcBaseAndBitshift>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c50:	223f      	movs	r2, #63	@ 0x3f
 8005c52:	409a      	lsls	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	f010803f 	.word	0xf010803f

08005c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_DMA_Start_IT+0x26>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e040      	b.n	8005d1c <HAL_DMA_Start_IT+0xa8>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d12f      	bne.n	8005d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fa4a 	bl	800615c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	223f      	movs	r2, #63	@ 0x3f
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0216 	orr.w	r2, r2, #22
 8005ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e005      	b.n	8005d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
 8005d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d32:	f7fe ff47 	bl	8004bc4 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d008      	beq.n	8005d56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2280      	movs	r2, #128	@ 0x80
 8005d48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e052      	b.n	8005dfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0216 	bic.w	r2, r2, #22
 8005d64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <HAL_DMA_Abort+0x62>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0208 	bic.w	r2, r2, #8
 8005d94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da6:	e013      	b.n	8005dd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005da8:	f7fe ff0c 	bl	8004bc4 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d90c      	bls.n	8005dd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e015      	b.n	8005dfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e4      	bne.n	8005da8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	223f      	movs	r2, #63	@ 0x3f
 8005de4:	409a      	lsls	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d004      	beq.n	8005e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2280      	movs	r2, #128	@ 0x80
 8005e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e00c      	b.n	8005e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2205      	movs	r2, #5
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e54:	4b8e      	ldr	r3, [pc, #568]	@ (8006090 <HAL_DMA_IRQHandler+0x248>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a8e      	ldr	r2, [pc, #568]	@ (8006094 <HAL_DMA_IRQHandler+0x24c>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	0a9b      	lsrs	r3, r3, #10
 8005e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e72:	2208      	movs	r2, #8
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01a      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0204 	bic.w	r2, r2, #4
 8005e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eac:	f043 0201 	orr.w	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	2201      	movs	r2, #1
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d012      	beq.n	8005eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	2204      	movs	r2, #4
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d012      	beq.n	8005f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f24:	2210      	movs	r2, #16
 8005f26:	409a      	lsls	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d043      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d03c      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f42:	2210      	movs	r2, #16
 8005f44:	409a      	lsls	r2, r3
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d018      	beq.n	8005f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d108      	bne.n	8005f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d024      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	e01f      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
 8005f88:	e016      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0208 	bic.w	r2, r2, #8
 8005fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 808f 	beq.w	80060e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8087 	beq.w	80060e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fde:	2220      	movs	r2, #32
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d136      	bne.n	8006060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0216 	bic.w	r2, r2, #22
 8006000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <HAL_DMA_IRQHandler+0x1da>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0208 	bic.w	r2, r2, #8
 8006030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006036:	223f      	movs	r2, #63	@ 0x3f
 8006038:	409a      	lsls	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006052:	2b00      	cmp	r3, #0
 8006054:	d07e      	beq.n	8006154 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
        }
        return;
 800605e:	e079      	b.n	8006154 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10d      	bne.n	8006098 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006080:	2b00      	cmp	r3, #0
 8006082:	d031      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
 800608c:	e02c      	b.n	80060e8 <HAL_DMA_IRQHandler+0x2a0>
 800608e:	bf00      	nop
 8006090:	20000078 	.word	0x20000078
 8006094:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d023      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	e01e      	b.n	80060e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10f      	bne.n	80060d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0210 	bic.w	r2, r2, #16
 80060c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d032      	beq.n	8006156 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2205      	movs	r2, #5
 8006100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3301      	adds	r3, #1
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d307      	bcc.n	8006130 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f2      	bne.n	8006114 <HAL_DMA_IRQHandler+0x2cc>
 800612e:	e000      	b.n	8006132 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006130:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
 8006152:	e000      	b.n	8006156 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006154:	bf00      	nop
    }
  }
}
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006178:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b40      	cmp	r3, #64	@ 0x40
 8006188:	d108      	bne.n	800619c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800619a:	e007      	b.n	80061ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	3b10      	subs	r3, #16
 80061c8:	4a14      	ldr	r2, [pc, #80]	@ (800621c <DMA_CalcBaseAndBitshift+0x64>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061d2:	4a13      	ldr	r2, [pc, #76]	@ (8006220 <DMA_CalcBaseAndBitshift+0x68>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d909      	bls.n	80061fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80061ee:	f023 0303 	bic.w	r3, r3, #3
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80061f8:	e007      	b.n	800620a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	aaaaaaab 	.word	0xaaaaaaab
 8006220:	0800e5d0 	.word	0x0800e5d0

08006224 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11f      	bne.n	800627e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d856      	bhi.n	80062f2 <DMA_CheckFifoParam+0xce>
 8006244:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <DMA_CheckFifoParam+0x28>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	0800625d 	.word	0x0800625d
 8006250:	0800626f 	.word	0x0800626f
 8006254:	0800625d 	.word	0x0800625d
 8006258:	080062f3 	.word	0x080062f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d046      	beq.n	80062f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626c:	e043      	b.n	80062f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006276:	d140      	bne.n	80062fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800627c:	e03d      	b.n	80062fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006286:	d121      	bne.n	80062cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d837      	bhi.n	80062fe <DMA_CheckFifoParam+0xda>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <DMA_CheckFifoParam+0x70>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062ab 	.word	0x080062ab
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	080062bd 	.word	0x080062bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      break;
 80062a8:	e030      	b.n	800630c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d025      	beq.n	8006302 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ba:	e022      	b.n	8006302 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062c4:	d11f      	bne.n	8006306 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062ca:	e01c      	b.n	8006306 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d903      	bls.n	80062da <DMA_CheckFifoParam+0xb6>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d003      	beq.n	80062e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062d8:	e018      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      break;
 80062de:	e015      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e00b      	b.n	800630a <DMA_CheckFifoParam+0xe6>
      break;
 80062f2:	bf00      	nop
 80062f4:	e00a      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;
 80062f6:	bf00      	nop
 80062f8:	e008      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;
 80062fa:	bf00      	nop
 80062fc:	e006      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;   
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <DMA_CheckFifoParam+0xe8>
      break;
 800630a:	bf00      	nop
    }
  } 
  
  return status; 
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	@ 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e16b      	b.n	8006610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	f040 815a 	bne.w	800660a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d005      	beq.n	800636e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636a:	2b02      	cmp	r3, #2
 800636c:	d130      	bne.n	80063d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 0201 	and.w	r2, r3, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d017      	beq.n	800640c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d123      	bne.n	8006460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	08da      	lsrs	r2, r3, #3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3208      	adds	r2, #8
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	220f      	movs	r2, #15
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	08da      	lsrs	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3208      	adds	r2, #8
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	2203      	movs	r2, #3
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80b4 	beq.w	800660a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	4b60      	ldr	r3, [pc, #384]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80064b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064be:	4a5b      	ldr	r2, [pc, #364]	@ (800662c <HAL_GPIO_Init+0x310>)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	089b      	lsrs	r3, r3, #2
 80064c4:	3302      	adds	r3, #2
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	220f      	movs	r2, #15
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a52      	ldr	r2, [pc, #328]	@ (8006630 <HAL_GPIO_Init+0x314>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d02b      	beq.n	8006542 <HAL_GPIO_Init+0x226>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a51      	ldr	r2, [pc, #324]	@ (8006634 <HAL_GPIO_Init+0x318>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d025      	beq.n	800653e <HAL_GPIO_Init+0x222>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a50      	ldr	r2, [pc, #320]	@ (8006638 <HAL_GPIO_Init+0x31c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01f      	beq.n	800653a <HAL_GPIO_Init+0x21e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a4f      	ldr	r2, [pc, #316]	@ (800663c <HAL_GPIO_Init+0x320>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d019      	beq.n	8006536 <HAL_GPIO_Init+0x21a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a4e      	ldr	r2, [pc, #312]	@ (8006640 <HAL_GPIO_Init+0x324>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_GPIO_Init+0x216>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4d      	ldr	r2, [pc, #308]	@ (8006644 <HAL_GPIO_Init+0x328>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_GPIO_Init+0x212>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a4c      	ldr	r2, [pc, #304]	@ (8006648 <HAL_GPIO_Init+0x32c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_GPIO_Init+0x20e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a4b      	ldr	r2, [pc, #300]	@ (800664c <HAL_GPIO_Init+0x330>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_GPIO_Init+0x20a>
 8006522:	2307      	movs	r3, #7
 8006524:	e00e      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006526:	2308      	movs	r3, #8
 8006528:	e00c      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800652a:	2306      	movs	r3, #6
 800652c:	e00a      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800652e:	2305      	movs	r3, #5
 8006530:	e008      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006532:	2304      	movs	r3, #4
 8006534:	e006      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006536:	2303      	movs	r3, #3
 8006538:	e004      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800653a:	2302      	movs	r3, #2
 800653c:	e002      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006542:	2300      	movs	r3, #0
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	f002 0203 	and.w	r2, r2, #3
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	4093      	lsls	r3, r2
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006554:	4935      	ldr	r1, [pc, #212]	@ (800662c <HAL_GPIO_Init+0x310>)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	089b      	lsrs	r3, r3, #2
 800655a:	3302      	adds	r3, #2
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	43db      	mvns	r3, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4013      	ands	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006586:	4a32      	ldr	r2, [pc, #200]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800658c:	4b30      	ldr	r3, [pc, #192]	@ (8006650 <HAL_GPIO_Init+0x334>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065b0:	4a27      	ldr	r2, [pc, #156]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065b6:	4b26      	ldr	r3, [pc, #152]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	43db      	mvns	r3, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006604:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	f67f ae90 	bls.w	8006338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	@ 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	40013800 	.word	0x40013800
 8006630:	40020000 	.word	0x40020000
 8006634:	40020400 	.word	0x40020400
 8006638:	40020800 	.word	0x40020800
 800663c:	40020c00 	.word	0x40020c00
 8006640:	40021000 	.word	0x40021000
 8006644:	40021400 	.word	0x40021400
 8006648:	40021800 	.word	0x40021800
 800664c:	40021c00 	.word	0x40021c00
 8006650:	40013c00 	.word	0x40013c00

08006654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e001      	b.n	8006676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	807b      	strh	r3, [r7, #2]
 8006690:	4613      	mov	r3, r2
 8006692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006694:	787b      	ldrb	r3, [r7, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066a0:	e003      	b.n	80066aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	041a      	lsls	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	619a      	str	r2, [r3, #24]
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066c2:	4b08      	ldr	r3, [pc, #32]	@ (80066e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066ce:	4a05      	ldr	r2, [pc, #20]	@ (80066e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fb f9d6 	bl	8001a88 <HAL_GPIO_EXTI_Callback>
  }
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40013c00 	.word	0x40013c00

080066e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e12b      	b.n	8006952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fd fbea 	bl	8003ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800673a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800674a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800674c:	f001 fc2c 	bl	8007fa8 <HAL_RCC_GetPCLK1Freq>
 8006750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4a81      	ldr	r2, [pc, #516]	@ (800695c <HAL_I2C_Init+0x274>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d807      	bhi.n	800676c <HAL_I2C_Init+0x84>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4a80      	ldr	r2, [pc, #512]	@ (8006960 <HAL_I2C_Init+0x278>)
 8006760:	4293      	cmp	r3, r2
 8006762:	bf94      	ite	ls
 8006764:	2301      	movls	r3, #1
 8006766:	2300      	movhi	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e006      	b.n	800677a <HAL_I2C_Init+0x92>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a7d      	ldr	r2, [pc, #500]	@ (8006964 <HAL_I2C_Init+0x27c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	bf94      	ite	ls
 8006774:	2301      	movls	r3, #1
 8006776:	2300      	movhi	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0e7      	b.n	8006952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a78      	ldr	r2, [pc, #480]	@ (8006968 <HAL_I2C_Init+0x280>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	0c9b      	lsrs	r3, r3, #18
 800678c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4a6a      	ldr	r2, [pc, #424]	@ (800695c <HAL_I2C_Init+0x274>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d802      	bhi.n	80067bc <HAL_I2C_Init+0xd4>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	3301      	adds	r3, #1
 80067ba:	e009      	b.n	80067d0 <HAL_I2C_Init+0xe8>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	4a69      	ldr	r2, [pc, #420]	@ (800696c <HAL_I2C_Init+0x284>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	099b      	lsrs	r3, r3, #6
 80067ce:	3301      	adds	r3, #1
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80067e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	495c      	ldr	r1, [pc, #368]	@ (800695c <HAL_I2C_Init+0x274>)
 80067ec:	428b      	cmp	r3, r1
 80067ee:	d819      	bhi.n	8006824 <HAL_I2C_Init+0x13c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1e59      	subs	r1, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006804:	400b      	ands	r3, r1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_I2C_Init+0x138>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1e59      	subs	r1, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fbb1 f3f3 	udiv	r3, r1, r3
 8006818:	3301      	adds	r3, #1
 800681a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681e:	e051      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 8006820:	2304      	movs	r3, #4
 8006822:	e04f      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d111      	bne.n	8006850 <HAL_I2C_Init+0x168>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1e58      	subs	r0, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	440b      	add	r3, r1
 800683a:	fbb0 f3f3 	udiv	r3, r0, r3
 800683e:	3301      	adds	r3, #1
 8006840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006844:	2b00      	cmp	r3, #0
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e012      	b.n	8006876 <HAL_I2C_Init+0x18e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e58      	subs	r0, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	0099      	lsls	r1, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	fbb0 f3f3 	udiv	r3, r0, r3
 8006866:	3301      	adds	r3, #1
 8006868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_I2C_Init+0x196>
 800687a:	2301      	movs	r3, #1
 800687c:	e022      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10e      	bne.n	80068a4 <HAL_I2C_Init+0x1bc>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1e58      	subs	r0, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	440b      	add	r3, r1
 8006894:	fbb0 f3f3 	udiv	r3, r0, r3
 8006898:	3301      	adds	r3, #1
 800689a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a2:	e00f      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1e58      	subs	r0, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	0099      	lsls	r1, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ba:	3301      	adds	r3, #1
 80068bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	6809      	ldr	r1, [r1, #0]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80068f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6911      	ldr	r1, [r2, #16]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68d2      	ldr	r2, [r2, #12]
 80068fe:	4311      	orrs	r1, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	000186a0 	.word	0x000186a0
 8006960:	001e847f 	.word	0x001e847f
 8006964:	003d08ff 	.word	0x003d08ff
 8006968:	431bde83 	.word	0x431bde83
 800696c:	10624dd3 	.word	0x10624dd3

08006970 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	4608      	mov	r0, r1
 800697a:	4611      	mov	r1, r2
 800697c:	461a      	mov	r2, r3
 800697e:	4603      	mov	r3, r0
 8006980:	817b      	strh	r3, [r7, #10]
 8006982:	460b      	mov	r3, r1
 8006984:	813b      	strh	r3, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800698a:	f7fe f91b 	bl	8004bc4 <HAL_GetTick>
 800698e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b20      	cmp	r3, #32
 800699a:	f040 80d9 	bne.w	8006b50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	2319      	movs	r3, #25
 80069a4:	2201      	movs	r2, #1
 80069a6:	496d      	ldr	r1, [pc, #436]	@ (8006b5c <HAL_I2C_Mem_Write+0x1ec>)
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fc8b 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0cc      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_I2C_Mem_Write+0x56>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e0c5      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d007      	beq.n	80069ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2221      	movs	r2, #33	@ 0x21
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2240      	movs	r2, #64	@ 0x40
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a3a      	ldr	r2, [r7, #32]
 8006a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006b60 <HAL_I2C_Mem_Write+0x1f0>)
 8006a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a2e:	88f8      	ldrh	r0, [r7, #6]
 8006a30:	893a      	ldrh	r2, [r7, #8]
 8006a32:	8979      	ldrh	r1, [r7, #10]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fac2 	bl	8006fc8 <I2C_RequestMemoryWrite>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d052      	beq.n	8006af0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e081      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fd50 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d107      	bne.n	8006a76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e06b      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11b      	bne.n	8006af0 <HAL_I2C_Mem_Write+0x180>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1aa      	bne.n	8006a4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fd43 	bl	8007588 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00d      	beq.n	8006b24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d107      	bne.n	8006b20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e016      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
  }
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	00100002 	.word	0x00100002
 8006b60:	ffff0000 	.word	0xffff0000

08006b64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	@ 0x30
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	461a      	mov	r2, r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	817b      	strh	r3, [r7, #10]
 8006b76:	460b      	mov	r3, r1
 8006b78:	813b      	strh	r3, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b7e:	f7fe f821 	bl	8004bc4 <HAL_GetTick>
 8006b82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	f040 8214 	bne.w	8006fba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	2319      	movs	r3, #25
 8006b98:	2201      	movs	r2, #1
 8006b9a:	497b      	ldr	r1, [pc, #492]	@ (8006d88 <HAL_I2C_Mem_Read+0x224>)
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fb91 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e207      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_I2C_Mem_Read+0x56>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e200      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d007      	beq.n	8006be0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2222      	movs	r2, #34	@ 0x22
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2240      	movs	r2, #64	@ 0x40
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006d8c <HAL_I2C_Mem_Read+0x228>)
 8006c20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c22:	88f8      	ldrh	r0, [r7, #6]
 8006c24:	893a      	ldrh	r2, [r7, #8]
 8006c26:	8979      	ldrh	r1, [r7, #10]
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fa5e 	bl	80070f4 <I2C_RequestMemoryRead>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e1bc      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d113      	bne.n	8006c72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	623b      	str	r3, [r7, #32]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e190      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d11b      	bne.n	8006cb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e170      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d11b      	bne.n	8006cf2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	e150      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d08:	e144      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	f200 80f1 	bhi.w	8006ef6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d123      	bne.n	8006d64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fc79 	bl	8007618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e145      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d62:	e117      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d14e      	bne.n	8006e0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	2200      	movs	r2, #0
 8006d74:	4906      	ldr	r1, [pc, #24]	@ (8006d90 <HAL_I2C_Mem_Read+0x22c>)
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 faa4 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d008      	beq.n	8006d94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e11a      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
 8006d86:	bf00      	nop
 8006d88:	00100002 	.word	0x00100002
 8006d8c:	ffff0000 	.word	0xffff0000
 8006d90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e08:	e0c4      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	2200      	movs	r2, #0
 8006e12:	496c      	ldr	r1, [pc, #432]	@ (8006fc4 <HAL_I2C_Mem_Read+0x460>)
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa55 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0cb      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4955      	ldr	r1, [pc, #340]	@ (8006fc4 <HAL_I2C_Mem_Read+0x460>)
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fa27 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e09d      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ef4:	e04e      	b.n	8006f94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fb8c 	bl	8007618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e058      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d124      	bne.n	8006f94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f47f aeb6 	bne.w	8006d0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e000      	b.n	8006fbc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3728      	adds	r7, #40	@ 0x28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	00010004 	.word	0x00010004

08006fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	817b      	strh	r3, [r7, #10]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	813b      	strh	r3, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f960 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007018:	d103      	bne.n	8007022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007020:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e05f      	b.n	80070e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007026:	897b      	ldrh	r3, [r7, #10]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	492d      	ldr	r1, [pc, #180]	@ (80070f0 <I2C_RequestMemoryWrite+0x128>)
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f9bb 	bl	80073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e04c      	b.n	80070e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007064:	6a39      	ldr	r1, [r7, #32]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fa46 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00d      	beq.n	800708e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	2b04      	cmp	r3, #4
 8007078:	d107      	bne.n	800708a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e02b      	b.n	80070e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	611a      	str	r2, [r3, #16]
 800709e:	e021      	b.n	80070e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	6a39      	ldr	r1, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fa20 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d107      	bne.n	80070d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e005      	b.n	80070e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070da:	893b      	ldrh	r3, [r7, #8]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	00010002 	.word	0x00010002

080070f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	817b      	strh	r3, [r7, #10]
 8007106:	460b      	mov	r3, r1
 8007108:	813b      	strh	r3, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800711c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800712c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	2200      	movs	r2, #0
 8007136:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f8c2 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007154:	d103      	bne.n	800715e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800715c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e0aa      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	6a3a      	ldr	r2, [r7, #32]
 8007176:	4952      	ldr	r1, [pc, #328]	@ (80072c0 <I2C_RequestMemoryRead+0x1cc>)
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f91d 	bl	80073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e097      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800719e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a0:	6a39      	ldr	r1, [r7, #32]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f9a8 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d107      	bne.n	80071c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e076      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d105      	bne.n	80071dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	611a      	str	r2, [r3, #16]
 80071da:	e021      	b.n	8007220 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071dc:	893b      	ldrh	r3, [r7, #8]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ec:	6a39      	ldr	r1, [r7, #32]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f982 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d107      	bne.n	8007212 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e050      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007216:	893b      	ldrh	r3, [r7, #8]
 8007218:	b2da      	uxtb	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007222:	6a39      	ldr	r1, [r7, #32]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f967 	bl	80074f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007234:	2b04      	cmp	r3, #4
 8007236:	d107      	bne.n	8007248 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007246:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e035      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800725a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	2200      	movs	r2, #0
 8007264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f82b 	bl	80072c4 <I2C_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00d      	beq.n	8007290 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007282:	d103      	bne.n	800728c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800728a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e013      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007290:	897b      	ldrh	r3, [r7, #10]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	6a3a      	ldr	r2, [r7, #32]
 80072a4:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <I2C_RequestMemoryRead+0x1cc>)
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f886 	bl	80073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	00010002 	.word	0x00010002

080072c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072d4:	e048      	b.n	8007368 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072dc:	d044      	beq.n	8007368 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072de:	f7fd fc71 	bl	8004bc4 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d139      	bne.n	8007368 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	0c1b      	lsrs	r3, r3, #16
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d10d      	bne.n	800731a <I2C_WaitOnFlagUntilTimeout+0x56>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	43da      	mvns	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4013      	ands	r3, r2
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	bf0c      	ite	eq
 8007310:	2301      	moveq	r3, #1
 8007312:	2300      	movne	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	e00c      	b.n	8007334 <I2C_WaitOnFlagUntilTimeout+0x70>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	43da      	mvns	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4013      	ands	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	bf0c      	ite	eq
 800732c:	2301      	moveq	r3, #1
 800732e:	2300      	movne	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	429a      	cmp	r2, r3
 8007338:	d116      	bne.n	8007368 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	f043 0220 	orr.w	r2, r3, #32
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e023      	b.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10d      	bne.n	800738e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	43da      	mvns	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	e00c      	b.n	80073a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	43da      	mvns	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4013      	ands	r3, r2
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d093      	beq.n	80072d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073c6:	e071      	b.n	80074ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d6:	d123      	bne.n	8007420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	f043 0204 	orr.w	r2, r3, #4
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e067      	b.n	80074f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007426:	d041      	beq.n	80074ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007428:	f7fd fbcc 	bl	8004bc4 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d136      	bne.n	80074ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d10c      	bne.n	8007462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	43da      	mvns	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4013      	ands	r3, r2
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf14      	ite	ne
 800745a:	2301      	movne	r3, #1
 800745c:	2300      	moveq	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	e00b      	b.n	800747a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	43da      	mvns	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e021      	b.n	80074f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d10c      	bne.n	80074d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	43da      	mvns	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4013      	ands	r3, r2
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf14      	ite	ne
 80074c8:	2301      	movne	r3, #1
 80074ca:	2300      	moveq	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	e00b      	b.n	80074e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	43da      	mvns	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	2300      	moveq	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f af6d 	bne.w	80073c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007504:	e034      	b.n	8007570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f8e3 	bl	80076d2 <I2C_IsAcknowledgeFailed>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e034      	b.n	8007580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800751c:	d028      	beq.n	8007570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fd fb51 	bl	8004bc4 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11d      	bne.n	8007570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b80      	cmp	r3, #128	@ 0x80
 8007540:	d016      	beq.n	8007570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e007      	b.n	8007580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757a:	2b80      	cmp	r3, #128	@ 0x80
 800757c:	d1c3      	bne.n	8007506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007594:	e034      	b.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f89b 	bl	80076d2 <I2C_IsAcknowledgeFailed>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e034      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075ac:	d028      	beq.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ae:	f7fd fb09 	bl	8004bc4 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d302      	bcc.n	80075c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11d      	bne.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d016      	beq.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e007      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b04      	cmp	r3, #4
 800760c:	d1c3      	bne.n	8007596 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007624:	e049      	b.n	80076ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b10      	cmp	r3, #16
 8007632:	d119      	bne.n	8007668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0210 	mvn.w	r2, #16
 800763c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e030      	b.n	80076ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007668:	f7fd faac 	bl	8004bc4 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d11d      	bne.n	80076ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007688:	2b40      	cmp	r3, #64	@ 0x40
 800768a:	d016      	beq.n	80076ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a6:	f043 0220 	orr.w	r2, r3, #32
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e007      	b.n	80076ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d1ae      	bne.n	8007626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e8:	d11b      	bne.n	8007722 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80076f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e267      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d075      	beq.n	800783a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800774e:	4b88      	ldr	r3, [pc, #544]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00c      	beq.n	8007774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	4b85      	ldr	r3, [pc, #532]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007762:	2b08      	cmp	r3, #8
 8007764:	d112      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007766:	4b82      	ldr	r3, [pc, #520]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800776e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007772:	d10b      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	4b7e      	ldr	r3, [pc, #504]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05b      	beq.n	8007838 <HAL_RCC_OscConfig+0x108>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d157      	bne.n	8007838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e242      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007794:	d106      	bne.n	80077a4 <HAL_RCC_OscConfig+0x74>
 8007796:	4b76      	ldr	r3, [pc, #472]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a75      	ldr	r2, [pc, #468]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e01d      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x98>
 80077ae:	4b70      	ldr	r3, [pc, #448]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6f      	ldr	r2, [pc, #444]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a6c      	ldr	r2, [pc, #432]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00b      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077c8:	4b69      	ldr	r3, [pc, #420]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a68      	ldr	r2, [pc, #416]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4b66      	ldr	r3, [pc, #408]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a65      	ldr	r2, [pc, #404]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80077da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fd f9ec 	bl	8004bc4 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fd f9e8 	bl	8004bc4 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	@ 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e207      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	4b5b      	ldr	r3, [pc, #364]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0xc0>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fd f9d8 	bl	8004bc4 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007818:	f7fd f9d4 	bl	8004bc4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	@ 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e1f3      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	4b51      	ldr	r3, [pc, #324]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0xe8>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d063      	beq.n	800790e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007846:	4b4a      	ldr	r3, [pc, #296]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007852:	4b47      	ldr	r3, [pc, #284]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d11c      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785e:	4b44      	ldr	r3, [pc, #272]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d116      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786a:	4b41      	ldr	r3, [pc, #260]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1c7      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007882:	4b3b      	ldr	r3, [pc, #236]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4937      	ldr	r1, [pc, #220]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007896:	e03a      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078a0:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <HAL_RCC_OscConfig+0x244>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a6:	f7fd f98d 	bl	8004bc4 <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ae:	f7fd f989 	bl	8004bc4 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e1a8      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078cc:	4b28      	ldr	r3, [pc, #160]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4925      	ldr	r1, [pc, #148]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	e015      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078e2:	4b24      	ldr	r3, [pc, #144]	@ (8007974 <HAL_RCC_OscConfig+0x244>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fd f96c 	bl	8004bc4 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f0:	f7fd f968 	bl	8004bc4 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e187      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	4b1b      	ldr	r3, [pc, #108]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d036      	beq.n	8007988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007922:	4b15      	ldr	r3, [pc, #84]	@ (8007978 <HAL_RCC_OscConfig+0x248>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007928:	f7fd f94c 	bl	8004bc4 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007930:	f7fd f948 	bl	8004bc4 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e167      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCC_OscConfig+0x240>)
 8007944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x200>
 800794e:	e01b      	b.n	8007988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007950:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <HAL_RCC_OscConfig+0x248>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007956:	f7fd f935 	bl	8004bc4 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800795c:	e00e      	b.n	800797c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800795e:	f7fd f931 	bl	8004bc4 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d907      	bls.n	800797c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e150      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007970:	40023800 	.word	0x40023800
 8007974:	42470000 	.word	0x42470000
 8007978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	4b88      	ldr	r3, [pc, #544]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ea      	bne.n	800795e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8097 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800799a:	4b81      	ldr	r3, [pc, #516]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	4b7d      	ldr	r3, [pc, #500]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ae:	4a7c      	ldr	r2, [pc, #496]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80079b6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c6:	4b77      	ldr	r3, [pc, #476]	@ (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d118      	bne.n	8007a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079d2:	4b74      	ldr	r3, [pc, #464]	@ (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a73      	ldr	r2, [pc, #460]	@ (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079de:	f7fd f8f1 	bl	8004bc4 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e6:	f7fd f8ed 	bl	8004bc4 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e10c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	4b6a      	ldr	r3, [pc, #424]	@ (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0f0      	beq.n	80079e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x2ea>
 8007a0c:	4b64      	ldr	r3, [pc, #400]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a10:	4a63      	ldr	r2, [pc, #396]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a18:	e01c      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCC_OscConfig+0x30c>
 8007a22:	4b5f      	ldr	r3, [pc, #380]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a26:	4a5e      	ldr	r2, [pc, #376]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a28:	f043 0304 	orr.w	r3, r3, #4
 8007a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a32:	4a5b      	ldr	r2, [pc, #364]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a3c:	4b58      	ldr	r3, [pc, #352]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a40:	4a57      	ldr	r2, [pc, #348]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a48:	4b55      	ldr	r3, [pc, #340]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4c:	4a54      	ldr	r2, [pc, #336]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d015      	beq.n	8007a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fd f8b2 	bl	8004bc4 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a62:	e00a      	b.n	8007a7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a64:	f7fd f8ae 	bl	8004bc4 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e0cb      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7a:	4b49      	ldr	r3, [pc, #292]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0ee      	beq.n	8007a64 <HAL_RCC_OscConfig+0x334>
 8007a86:	e014      	b.n	8007ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a88:	f7fd f89c 	bl	8004bc4 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a8e:	e00a      	b.n	8007aa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fd f898 	bl	8004bc4 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e0b5      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1ee      	bne.n	8007a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab8:	4b39      	ldr	r3, [pc, #228]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	4a38      	ldr	r2, [pc, #224]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80a1 	beq.w	8007c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ace:	4b34      	ldr	r3, [pc, #208]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d05c      	beq.n	8007b94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d141      	bne.n	8007b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae2:	4b31      	ldr	r3, [pc, #196]	@ (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae8:	f7fd f86c 	bl	8004bc4 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af0:	f7fd f868 	bl	8004bc4 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e087      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	4b27      	ldr	r3, [pc, #156]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	019b      	lsls	r3, r3, #6
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	3b01      	subs	r3, #1
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	491b      	ldr	r1, [pc, #108]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3e:	f7fd f841 	bl	8004bc4 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b46:	f7fd f83d 	bl	8004bc4 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e05c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b58:	4b11      	ldr	r3, [pc, #68]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x416>
 8007b64:	e054      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b66:	4b10      	ldr	r3, [pc, #64]	@ (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6c:	f7fd f82a 	bl	8004bc4 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fd f826 	bl	8004bc4 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e045      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	4b06      	ldr	r3, [pc, #24]	@ (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x444>
 8007b92:	e03d      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e038      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40007000 	.word	0x40007000
 8007ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	@ (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d028      	beq.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d121      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d11a      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007bdc:	4013      	ands	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d111      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800

08007c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0cc      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b68      	ldr	r3, [pc, #416]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d90c      	bls.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b65      	ldr	r3, [pc, #404]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b63      	ldr	r3, [pc, #396]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d001      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0b8      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c74:	4b59      	ldr	r3, [pc, #356]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a58      	ldr	r2, [pc, #352]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c8c:	4b53      	ldr	r3, [pc, #332]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a52      	ldr	r2, [pc, #328]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c98:	4b50      	ldr	r3, [pc, #320]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	494d      	ldr	r1, [pc, #308]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d044      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cbe:	4b47      	ldr	r3, [pc, #284]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d119      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e07f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cde:	4b3f      	ldr	r3, [pc, #252]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cee:	4b3b      	ldr	r3, [pc, #236]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e067      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b37      	ldr	r3, [pc, #220]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4934      	ldr	r1, [pc, #208]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d10:	f7fc ff58 	bl	8004bc4 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fc ff54 	bl	8004bc4 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d40:	4b25      	ldr	r3, [pc, #148]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20c      	bcs.n	8007d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b22      	ldr	r3, [pc, #136]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b20      	ldr	r3, [pc, #128]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e032      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d74:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4916      	ldr	r1, [pc, #88]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d92:	4b12      	ldr	r3, [pc, #72]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	490e      	ldr	r1, [pc, #56]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007da6:	f000 f82d 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	490a      	ldr	r1, [pc, #40]	@ (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007db8:	5ccb      	ldrb	r3, [r1, r3]
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dc2:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fc feb8 	bl	8004b3c <HAL_InitTick>

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40023c00 	.word	0x40023c00
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	0800e5b8 	.word	0x0800e5b8
 8007de4:	20000078 	.word	0x20000078
 8007de8:	2000007c 	.word	0x2000007c

08007dec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007df0:	4b03      	ldr	r3, [pc, #12]	@ (8007e00 <HAL_RCC_EnableCSS+0x14>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	4247004c 	.word	0x4247004c

08007e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e08:	b090      	sub	sp, #64	@ 0x40
 8007e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e14:	2300      	movs	r3, #0
 8007e16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e1c:	4b59      	ldr	r3, [pc, #356]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 030c 	and.w	r3, r3, #12
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d00d      	beq.n	8007e44 <HAL_RCC_GetSysClockFreq+0x40>
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	f200 80a1 	bhi.w	8007f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <HAL_RCC_GetSysClockFreq+0x34>
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d003      	beq.n	8007e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e36:	e09b      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e38:	4b53      	ldr	r3, [pc, #332]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007e3c:	e09b      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e3e:	4b53      	ldr	r3, [pc, #332]	@ (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e42:	e098      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e44:	4b4f      	ldr	r3, [pc, #316]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d028      	beq.n	8007eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	099b      	lsrs	r3, r3, #6
 8007e60:	2200      	movs	r2, #0
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4b47      	ldr	r3, [pc, #284]	@ (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e70:	fb03 f201 	mul.w	r2, r3, r1
 8007e74:	2300      	movs	r3, #0
 8007e76:	fb00 f303 	mul.w	r3, r0, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4a43      	ldr	r2, [pc, #268]	@ (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e84:	460a      	mov	r2, r1
 8007e86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e8a:	4413      	add	r3, r2
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	2200      	movs	r2, #0
 8007e92:	61bb      	str	r3, [r7, #24]
 8007e94:	61fa      	str	r2, [r7, #28]
 8007e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e9e:	f7f8 f9ef 	bl	8000280 <__aeabi_uldivmod>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eaa:	e053      	b.n	8007f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eac:	4b35      	ldr	r3, [pc, #212]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	617a      	str	r2, [r7, #20]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ebe:	f04f 0b00 	mov.w	fp, #0
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	f04f 0000 	mov.w	r0, #0
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	0159      	lsls	r1, r3, #5
 8007ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ed4:	0150      	lsls	r0, r2, #5
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	ebb2 080a 	subs.w	r8, r2, sl
 8007ede:	eb63 090b 	sbc.w	r9, r3, fp
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8007efa:	eb63 0509 	sbc.w	r5, r3, r9
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	00eb      	lsls	r3, r5, #3
 8007f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f0c:	00e2      	lsls	r2, r4, #3
 8007f0e:	4614      	mov	r4, r2
 8007f10:	461d      	mov	r5, r3
 8007f12:	eb14 030a 	adds.w	r3, r4, sl
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	eb45 030b 	adc.w	r3, r5, fp
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	028b      	lsls	r3, r1, #10
 8007f2e:	4621      	mov	r1, r4
 8007f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f34:	4621      	mov	r1, r4
 8007f36:	028a      	lsls	r2, r1, #10
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3e:	2200      	movs	r2, #0
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	60fa      	str	r2, [r7, #12]
 8007f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f48:	f7f8 f99a 	bl	8000280 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4613      	mov	r3, r2
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f54:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	3301      	adds	r3, #1
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f70:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3740      	adds	r7, #64	@ 0x40
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f82:	bf00      	nop
 8007f84:	40023800 	.word	0x40023800
 8007f88:	00f42400 	.word	0x00f42400
 8007f8c:	00b71b00 	.word	0x00b71b00

08007f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f94:	4b03      	ldr	r3, [pc, #12]	@ (8007fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f96:	681b      	ldr	r3, [r3, #0]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000078 	.word	0x20000078

08007fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fac:	f7ff fff0 	bl	8007f90 <HAL_RCC_GetHCLKFreq>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	4b05      	ldr	r3, [pc, #20]	@ (8007fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	0a9b      	lsrs	r3, r3, #10
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	4903      	ldr	r1, [pc, #12]	@ (8007fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fbe:	5ccb      	ldrb	r3, [r1, r3]
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	0800e5c8 	.word	0x0800e5c8

08007fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fd4:	f7ff ffdc 	bl	8007f90 <HAL_RCC_GetHCLKFreq>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4b05      	ldr	r3, [pc, #20]	@ (8007ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	0b5b      	lsrs	r3, r3, #13
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	4903      	ldr	r1, [pc, #12]	@ (8007ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fe6:	5ccb      	ldrb	r3, [r1, r3]
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	0800e5c8 	.word	0x0800e5c8

08007ff8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008004:	2b80      	cmp	r3, #128	@ 0x80
 8008006:	d104      	bne.n	8008012 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008008:	f000 f80a 	bl	8008020 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800800c:	4b03      	ldr	r3, [pc, #12]	@ (800801c <HAL_RCC_NMI_IRQHandler+0x24>)
 800800e:	2280      	movs	r2, #128	@ 0x80
 8008010:	701a      	strb	r2, [r3, #0]
  }
}
 8008012:	bf00      	nop
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	40023800 	.word	0x40023800
 800801c:	4002380e 	.word	0x4002380e

08008020 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e07b      	b.n	8008138 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d108      	bne.n	800805a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008050:	d009      	beq.n	8008066 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	61da      	str	r2, [r3, #28]
 8008058:	e005      	b.n	8008066 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fb ff9b 	bl	8003fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800809c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ea:	ea42 0103 	orr.w	r1, r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 0104 	and.w	r1, r3, #4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810c:	f003 0210 	and.w	r2, r3, #16
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008126:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08c      	sub	sp, #48	@ 0x30
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800814e:	2301      	movs	r3, #1
 8008150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_SPI_TransmitReceive+0x26>
 8008162:	2302      	movs	r3, #2
 8008164:	e198      	b.n	8008498 <HAL_SPI_TransmitReceive+0x358>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800816e:	f7fc fd29 	bl	8004bc4 <HAL_GetTick>
 8008172:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008184:	887b      	ldrh	r3, [r7, #2]
 8008186:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008188:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800818c:	2b01      	cmp	r3, #1
 800818e:	d00f      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x70>
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008196:	d107      	bne.n	80081a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <HAL_SPI_TransmitReceive+0x68>
 80081a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d003      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081a8:	2302      	movs	r3, #2
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80081ae:	e16d      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_SPI_TransmitReceive+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <HAL_SPI_TransmitReceive+0x82>
 80081bc:	887b      	ldrh	r3, [r7, #2]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80081c8:	e160      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d003      	beq.n	80081de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2205      	movs	r2, #5
 80081da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	887a      	ldrh	r2, [r7, #2]
 80081ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	887a      	ldrh	r2, [r7, #2]
 80081f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	887a      	ldrh	r2, [r7, #2]
 8008206:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821e:	2b40      	cmp	r3, #64	@ 0x40
 8008220:	d007      	beq.n	8008232 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800823a:	d17c      	bne.n	8008336 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_SPI_TransmitReceive+0x10a>
 8008244:	8b7b      	ldrh	r3, [r7, #26]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d16a      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	881a      	ldrh	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800826e:	e057      	b.n	8008320 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b02      	cmp	r3, #2
 800827c:	d11b      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x176>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d016      	beq.n	80082b6 <HAL_SPI_TransmitReceive+0x176>
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	2b01      	cmp	r3, #1
 800828c:	d113      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	881a      	ldrh	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d119      	bne.n	80082f8 <HAL_SPI_TransmitReceive+0x1b8>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d014      	beq.n	80082f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	b292      	uxth	r2, r2
 80082da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e0:	1c9a      	adds	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082f4:	2301      	movs	r3, #1
 80082f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082f8:	f7fc fc64 	bl	8004bc4 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008304:	429a      	cmp	r2, r3
 8008306:	d80b      	bhi.n	8008320 <HAL_SPI_TransmitReceive+0x1e0>
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800830e:	d007      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800831e:	e0b5      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1a2      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x130>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d19d      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x130>
 8008334:	e080      	b.n	8008438 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_SPI_TransmitReceive+0x204>
 800833e:	8b7b      	ldrh	r3, [r7, #26]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d16f      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800836a:	e05b      	b.n	8008424 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b02      	cmp	r3, #2
 8008378:	d11c      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x274>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d017      	beq.n	80083b4 <HAL_SPI_TransmitReceive+0x274>
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d114      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	7812      	ldrb	r2, [r2, #0]
 8008396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d119      	bne.n	80083f6 <HAL_SPI_TransmitReceive+0x2b6>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d014      	beq.n	80083f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083f2:	2301      	movs	r3, #1
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083f6:	f7fc fbe5 	bl	8004bc4 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008402:	429a      	cmp	r2, r3
 8008404:	d803      	bhi.n	800840e <HAL_SPI_TransmitReceive+0x2ce>
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800840c:	d102      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x2d4>
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	2b00      	cmp	r3, #0
 8008412:	d107      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008422:	e033      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d19e      	bne.n	800836c <HAL_SPI_TransmitReceive+0x22c>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d199      	bne.n	800836c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f8b7 	bl	80085b0 <SPI_EndRxTxTransaction>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d006      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008454:	e01a      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008482:	e003      	b.n	800848c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008494:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008498:	4618      	mov	r0, r3
 800849a:	3730      	adds	r7, #48	@ 0x30
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084b0:	f7fc fb88 	bl	8004bc4 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	4413      	add	r3, r2
 80084be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084c0:	f7fc fb80 	bl	8004bc4 <HAL_GetTick>
 80084c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084c6:	4b39      	ldr	r3, [pc, #228]	@ (80085ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	015b      	lsls	r3, r3, #5
 80084cc:	0d1b      	lsrs	r3, r3, #20
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084d6:	e054      	b.n	8008582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084de:	d050      	beq.n	8008582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084e0:	f7fc fb70 	bl	8004bc4 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d902      	bls.n	80084f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d13d      	bne.n	8008572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800850e:	d111      	bne.n	8008534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008518:	d004      	beq.n	8008524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008522:	d107      	bne.n	8008534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853c:	d10f      	bne.n	800855e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800855c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e017      	b.n	80085a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	3b01      	subs	r3, #1
 8008580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4013      	ands	r3, r2
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	bf0c      	ite	eq
 8008592:	2301      	moveq	r3, #1
 8008594:	2300      	movne	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	429a      	cmp	r2, r3
 800859e:	d19b      	bne.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000078 	.word	0x20000078

080085b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2201      	movs	r2, #1
 80085c4:	2102      	movs	r1, #2
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff ff6a 	bl	80084a0 <SPI_WaitFlagStateUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d6:	f043 0220 	orr.w	r2, r3, #32
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e032      	b.n	8008648 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008650 <SPI_EndRxTxTransaction+0xa0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <SPI_EndRxTxTransaction+0xa4>)
 80085e8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ec:	0d5b      	lsrs	r3, r3, #21
 80085ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
 80085f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008600:	d112      	bne.n	8008628 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	2180      	movs	r1, #128	@ 0x80
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff ff47 	bl	80084a0 <SPI_WaitFlagStateUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d016      	beq.n	8008646 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861c:	f043 0220 	orr.w	r2, r3, #32
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e00f      	b.n	8008648 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	3b01      	subs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b80      	cmp	r3, #128	@ 0x80
 8008640:	d0f2      	beq.n	8008628 <SPI_EndRxTxTransaction+0x78>
 8008642:	e000      	b.n	8008646 <SPI_EndRxTxTransaction+0x96>
        break;
 8008644:	bf00      	nop
  }

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000078 	.word	0x20000078
 8008654:	165e9f81 	.word	0x165e9f81

08008658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e041      	b.n	80086ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fb fdb8 	bl	80041f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f000 fba8 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d001      	beq.n	8008710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e046      	b.n	800879e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a23      	ldr	r2, [pc, #140]	@ (80087ac <HAL_TIM_Base_Start+0xb4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d022      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872a:	d01d      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1f      	ldr	r2, [pc, #124]	@ (80087b0 <HAL_TIM_Base_Start+0xb8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d018      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a1e      	ldr	r2, [pc, #120]	@ (80087b4 <HAL_TIM_Base_Start+0xbc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1c      	ldr	r2, [pc, #112]	@ (80087b8 <HAL_TIM_Base_Start+0xc0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00e      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1b      	ldr	r2, [pc, #108]	@ (80087bc <HAL_TIM_Base_Start+0xc4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a19      	ldr	r2, [pc, #100]	@ (80087c0 <HAL_TIM_Base_Start+0xc8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_TIM_Base_Start+0x70>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a18      	ldr	r2, [pc, #96]	@ (80087c4 <HAL_TIM_Base_Start+0xcc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d111      	bne.n	800878c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b06      	cmp	r3, #6
 8008778:	d010      	beq.n	800879c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0201 	orr.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878a:	e007      	b.n	800879c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	40010000 	.word	0x40010000
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	40000c00 	.word	0x40000c00
 80087bc:	40010400 	.word	0x40010400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40001800 	.word	0x40001800

080087c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e041      	b.n	800885e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fb fc4c 	bl	800408c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3304      	adds	r3, #4
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f000 faf0 	bl	8008dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_TIM_PWM_Start+0x24>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e022      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b04      	cmp	r3, #4
 8008890:	d109      	bne.n	80088a6 <HAL_TIM_PWM_Start+0x3e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e015      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d109      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x58>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e008      	b.n	80088d2 <HAL_TIM_PWM_Start+0x6a>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e07c      	b.n	80089d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <HAL_TIM_PWM_Start+0x82>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088e8:	e013      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d104      	bne.n	80088fa <HAL_TIM_PWM_Start+0x92>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088f8:	e00b      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d104      	bne.n	800890a <HAL_TIM_PWM_Start+0xa2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008908:	e003      	b.n	8008912 <HAL_TIM_PWM_Start+0xaa>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fd5c 	bl	80093d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a2d      	ldr	r2, [pc, #180]	@ (80089dc <HAL_TIM_PWM_Start+0x174>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d004      	beq.n	8008934 <HAL_TIM_PWM_Start+0xcc>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a2c      	ldr	r2, [pc, #176]	@ (80089e0 <HAL_TIM_PWM_Start+0x178>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d101      	bne.n	8008938 <HAL_TIM_PWM_Start+0xd0>
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <HAL_TIM_PWM_Start+0xd2>
 8008938:	2300      	movs	r3, #0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800894c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a22      	ldr	r2, [pc, #136]	@ (80089dc <HAL_TIM_PWM_Start+0x174>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d022      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008960:	d01d      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1f      	ldr	r2, [pc, #124]	@ (80089e4 <HAL_TIM_PWM_Start+0x17c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d018      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1d      	ldr	r2, [pc, #116]	@ (80089e8 <HAL_TIM_PWM_Start+0x180>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d013      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a1c      	ldr	r2, [pc, #112]	@ (80089ec <HAL_TIM_PWM_Start+0x184>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00e      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a16      	ldr	r2, [pc, #88]	@ (80089e0 <HAL_TIM_PWM_Start+0x178>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d009      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <HAL_TIM_PWM_Start+0x188>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d004      	beq.n	800899e <HAL_TIM_PWM_Start+0x136>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a16      	ldr	r2, [pc, #88]	@ (80089f4 <HAL_TIM_PWM_Start+0x18c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d111      	bne.n	80089c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d010      	beq.n	80089d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c0:	e007      	b.n	80089d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40001800 	.word	0x40001800

080089f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fce4 	bl	80093d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a2e      	ldr	r2, [pc, #184]	@ (8008ad0 <HAL_TIM_PWM_Stop+0xd8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d004      	beq.n	8008a24 <HAL_TIM_PWM_Stop+0x2c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ad4 <HAL_TIM_PWM_Stop+0xdc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_PWM_Stop+0x30>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <HAL_TIM_PWM_Stop+0x32>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d017      	beq.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10f      	bne.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <HAL_TIM_PWM_Stop+0x66>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10f      	bne.n	8008a8e <HAL_TIM_PWM_Stop+0x96>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6a1a      	ldr	r2, [r3, #32]
 8008a74:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <HAL_TIM_PWM_Stop+0x96>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_PWM_Stop+0xa6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a9c:	e013      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_PWM_Stop+0xb6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aac:	e00b      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_PWM_Stop+0xc6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008abc:	e003      	b.n	8008ac6 <HAL_TIM_PWM_Stop+0xce>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40010400 	.word	0x40010400

08008ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d101      	bne.n	8008af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008af2:	2302      	movs	r3, #2
 8008af4:	e0ae      	b.n	8008c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b0c      	cmp	r3, #12
 8008b02:	f200 809f 	bhi.w	8008c44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b41 	.word	0x08008b41
 8008b10:	08008c45 	.word	0x08008c45
 8008b14:	08008c45 	.word	0x08008c45
 8008b18:	08008c45 	.word	0x08008c45
 8008b1c:	08008b81 	.word	0x08008b81
 8008b20:	08008c45 	.word	0x08008c45
 8008b24:	08008c45 	.word	0x08008c45
 8008b28:	08008c45 	.word	0x08008c45
 8008b2c:	08008bc3 	.word	0x08008bc3
 8008b30:	08008c45 	.word	0x08008c45
 8008b34:	08008c45 	.word	0x08008c45
 8008b38:	08008c45 	.word	0x08008c45
 8008b3c:	08008c03 	.word	0x08008c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f9fc 	bl	8008f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0208 	orr.w	r2, r2, #8
 8008b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0204 	bic.w	r2, r2, #4
 8008b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6999      	ldr	r1, [r3, #24]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	619a      	str	r2, [r3, #24]
      break;
 8008b7e:	e064      	b.n	8008c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fa4c 	bl	8009024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6999      	ldr	r1, [r3, #24]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	021a      	lsls	r2, r3, #8
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	619a      	str	r2, [r3, #24]
      break;
 8008bc0:	e043      	b.n	8008c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 faa1 	bl	8009110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69da      	ldr	r2, [r3, #28]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0208 	orr.w	r2, r2, #8
 8008bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69da      	ldr	r2, [r3, #28]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0204 	bic.w	r2, r2, #4
 8008bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69d9      	ldr	r1, [r3, #28]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	61da      	str	r2, [r3, #28]
      break;
 8008c00:	e023      	b.n	8008c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 faf5 	bl	80091f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69d9      	ldr	r1, [r3, #28]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	021a      	lsls	r2, r3, #8
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	61da      	str	r2, [r3, #28]
      break;
 8008c42:	e002      	b.n	8008c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
      break;
 8008c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_TIM_ConfigClockSource+0x1c>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e0b4      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x186>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb0:	d03e      	beq.n	8008d30 <HAL_TIM_ConfigClockSource+0xd4>
 8008cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb6:	f200 8087 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cbe:	f000 8086 	beq.w	8008dce <HAL_TIM_ConfigClockSource+0x172>
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc6:	d87f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc8:	2b70      	cmp	r3, #112	@ 0x70
 8008cca:	d01a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0xa6>
 8008ccc:	2b70      	cmp	r3, #112	@ 0x70
 8008cce:	d87b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd0:	2b60      	cmp	r3, #96	@ 0x60
 8008cd2:	d050      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x11a>
 8008cd4:	2b60      	cmp	r3, #96	@ 0x60
 8008cd6:	d877      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd8:	2b50      	cmp	r3, #80	@ 0x50
 8008cda:	d03c      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0xfa>
 8008cdc:	2b50      	cmp	r3, #80	@ 0x50
 8008cde:	d873      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ce0:	2b40      	cmp	r3, #64	@ 0x40
 8008ce2:	d058      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x13a>
 8008ce4:	2b40      	cmp	r3, #64	@ 0x40
 8008ce6:	d86f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ce8:	2b30      	cmp	r3, #48	@ 0x30
 8008cea:	d064      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x15a>
 8008cec:	2b30      	cmp	r3, #48	@ 0x30
 8008cee:	d86b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d060      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x15a>
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d867      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d05c      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x15a>
 8008cfc:	2b10      	cmp	r3, #16
 8008cfe:	d05a      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x15a>
 8008d00:	e062      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	f000 fb41 	bl	8009398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	609a      	str	r2, [r3, #8]
      break;
 8008d2e:	e04f      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d40:	f000 fb2a 	bl	8009398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d52:	609a      	str	r2, [r3, #8]
      break;
 8008d54:	e03c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d62:	461a      	mov	r2, r3
 8008d64:	f000 fa9e 	bl	80092a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2150      	movs	r1, #80	@ 0x50
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 faf7 	bl	8009362 <TIM_ITRx_SetConfig>
      break;
 8008d74:	e02c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 fabd 	bl	8009302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2160      	movs	r1, #96	@ 0x60
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fae7 	bl	8009362 <TIM_ITRx_SetConfig>
      break;
 8008d94:	e01c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	461a      	mov	r2, r3
 8008da4:	f000 fa7e 	bl	80092a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2140      	movs	r1, #64	@ 0x40
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fad7 	bl	8009362 <TIM_ITRx_SetConfig>
      break;
 8008db4:	e00c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f000 face 	bl	8009362 <TIM_ITRx_SetConfig>
      break;
 8008dc6:	e003      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e000      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a46      	ldr	r2, [pc, #280]	@ (8008f18 <TIM_Base_SetConfig+0x12c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d013      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0a:	d00f      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a43      	ldr	r2, [pc, #268]	@ (8008f1c <TIM_Base_SetConfig+0x130>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a42      	ldr	r2, [pc, #264]	@ (8008f20 <TIM_Base_SetConfig+0x134>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a41      	ldr	r2, [pc, #260]	@ (8008f24 <TIM_Base_SetConfig+0x138>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_Base_SetConfig+0x40>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a40      	ldr	r2, [pc, #256]	@ (8008f28 <TIM_Base_SetConfig+0x13c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d108      	bne.n	8008e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a35      	ldr	r2, [pc, #212]	@ (8008f18 <TIM_Base_SetConfig+0x12c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d02b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4c:	d027      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a32      	ldr	r2, [pc, #200]	@ (8008f1c <TIM_Base_SetConfig+0x130>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d023      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a31      	ldr	r2, [pc, #196]	@ (8008f20 <TIM_Base_SetConfig+0x134>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01f      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a30      	ldr	r2, [pc, #192]	@ (8008f24 <TIM_Base_SetConfig+0x138>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a2f      	ldr	r2, [pc, #188]	@ (8008f28 <TIM_Base_SetConfig+0x13c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d017      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a2e      	ldr	r2, [pc, #184]	@ (8008f2c <TIM_Base_SetConfig+0x140>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a2d      	ldr	r2, [pc, #180]	@ (8008f30 <TIM_Base_SetConfig+0x144>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00f      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a2c      	ldr	r2, [pc, #176]	@ (8008f34 <TIM_Base_SetConfig+0x148>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a2b      	ldr	r2, [pc, #172]	@ (8008f38 <TIM_Base_SetConfig+0x14c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d007      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a2a      	ldr	r2, [pc, #168]	@ (8008f3c <TIM_Base_SetConfig+0x150>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_Base_SetConfig+0xb2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a29      	ldr	r2, [pc, #164]	@ (8008f40 <TIM_Base_SetConfig+0x154>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d108      	bne.n	8008eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a10      	ldr	r2, [pc, #64]	@ (8008f18 <TIM_Base_SetConfig+0x12c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_Base_SetConfig+0xf8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a12      	ldr	r2, [pc, #72]	@ (8008f28 <TIM_Base_SetConfig+0x13c>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d103      	bne.n	8008eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691a      	ldr	r2, [r3, #16]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d105      	bne.n	8008f0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f023 0201 	bic.w	r2, r3, #1
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40010000 	.word	0x40010000
 8008f1c:	40000400 	.word	0x40000400
 8008f20:	40000800 	.word	0x40000800
 8008f24:	40000c00 	.word	0x40000c00
 8008f28:	40010400 	.word	0x40010400
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800
 8008f38:	40001800 	.word	0x40001800
 8008f3c:	40001c00 	.word	0x40001c00
 8008f40:	40002000 	.word	0x40002000

08008f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	f023 0201 	bic.w	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0303 	bic.w	r3, r3, #3
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f023 0302 	bic.w	r3, r3, #2
 8008f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a20      	ldr	r2, [pc, #128]	@ (800901c <TIM_OC1_SetConfig+0xd8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x64>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8009020 <TIM_OC1_SetConfig+0xdc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d10c      	bne.n	8008fc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 0308 	bic.w	r3, r3, #8
 8008fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f023 0304 	bic.w	r3, r3, #4
 8008fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	@ (800901c <TIM_OC1_SetConfig+0xd8>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d003      	beq.n	8008fd2 <TIM_OC1_SetConfig+0x8e>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a14      	ldr	r2, [pc, #80]	@ (8009020 <TIM_OC1_SetConfig+0xdc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d111      	bne.n	8008ff6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	621a      	str	r2, [r3, #32]
}
 8009010:	bf00      	nop
 8009012:	371c      	adds	r7, #28
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	40010000 	.word	0x40010000
 8009020:	40010400 	.word	0x40010400

08009024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	f023 0210 	bic.w	r2, r3, #16
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f023 0320 	bic.w	r3, r3, #32
 800906e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a22      	ldr	r2, [pc, #136]	@ (8009108 <TIM_OC2_SetConfig+0xe4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC2_SetConfig+0x68>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a21      	ldr	r2, [pc, #132]	@ (800910c <TIM_OC2_SetConfig+0xe8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10d      	bne.n	80090a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a17      	ldr	r2, [pc, #92]	@ (8009108 <TIM_OC2_SetConfig+0xe4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <TIM_OC2_SetConfig+0x94>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a16      	ldr	r2, [pc, #88]	@ (800910c <TIM_OC2_SetConfig+0xe8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d113      	bne.n	80090e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	621a      	str	r2, [r3, #32]
}
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40010000 	.word	0x40010000
 800910c:	40010400 	.word	0x40010400

08009110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a21      	ldr	r2, [pc, #132]	@ (80091f0 <TIM_OC3_SetConfig+0xe0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d003      	beq.n	8009176 <TIM_OC3_SetConfig+0x66>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a20      	ldr	r2, [pc, #128]	@ (80091f4 <TIM_OC3_SetConfig+0xe4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d10d      	bne.n	8009192 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800917c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a16      	ldr	r2, [pc, #88]	@ (80091f0 <TIM_OC3_SetConfig+0xe0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d003      	beq.n	80091a2 <TIM_OC3_SetConfig+0x92>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <TIM_OC3_SetConfig+0xe4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d113      	bne.n	80091ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	011b      	lsls	r3, r3, #4
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	621a      	str	r2, [r3, #32]
}
 80091e4:	bf00      	nop
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40010000 	.word	0x40010000
 80091f4:	40010400 	.word	0x40010400

080091f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	031b      	lsls	r3, r3, #12
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a12      	ldr	r2, [pc, #72]	@ (800929c <TIM_OC4_SetConfig+0xa4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d003      	beq.n	8009260 <TIM_OC4_SetConfig+0x68>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a11      	ldr	r2, [pc, #68]	@ (80092a0 <TIM_OC4_SetConfig+0xa8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d109      	bne.n	8009274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	019b      	lsls	r3, r3, #6
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	40010000 	.word	0x40010000
 80092a0:	40010400 	.word	0x40010400

080092a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f023 030a 	bic.w	r3, r3, #10
 80092e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009302:	b480      	push	{r7}
 8009304:	b087      	sub	sp, #28
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	f023 0210 	bic.w	r2, r3, #16
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800932c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	031b      	lsls	r3, r3, #12
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800933e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009362:	b480      	push	{r7}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	f043 0307 	orr.w	r3, r3, #7
 8009384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	609a      	str	r2, [r3, #8]
}
 800938c:	bf00      	nop
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	021a      	lsls	r2, r3, #8
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4313      	orrs	r3, r2
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	609a      	str	r2, [r3, #8]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 031f 	and.w	r3, r3, #31
 80093ea:	2201      	movs	r2, #1
 80093ec:	fa02 f303 	lsl.w	r3, r2, r3
 80093f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6a1a      	ldr	r2, [r3, #32]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	43db      	mvns	r3, r3
 80093fa:	401a      	ands	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a1a      	ldr	r2, [r3, #32]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 031f 	and.w	r3, r3, #31
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	fa01 f303 	lsl.w	r3, r1, r3
 8009410:	431a      	orrs	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
	...

08009424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009438:	2302      	movs	r3, #2
 800943a:	e05a      	b.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a21      	ldr	r2, [pc, #132]	@ (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d022      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009488:	d01d      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1d      	ldr	r2, [pc, #116]	@ (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d018      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a1b      	ldr	r2, [pc, #108]	@ (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d013      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1a      	ldr	r2, [pc, #104]	@ (800950c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00e      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a18      	ldr	r2, [pc, #96]	@ (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d009      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a17      	ldr	r2, [pc, #92]	@ (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a15      	ldr	r2, [pc, #84]	@ (8009518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d10c      	bne.n	80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40010000 	.word	0x40010000
 8009504:	40000400 	.word	0x40000400
 8009508:	40000800 	.word	0x40000800
 800950c:	40000c00 	.word	0x40000c00
 8009510:	40010400 	.word	0x40010400
 8009514:	40014000 	.word	0x40014000
 8009518:	40001800 	.word	0x40001800

0800951c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009534:	2302      	movs	r3, #2
 8009536:	e03d      	b.n	80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e042      	b.n	8009658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fa ff6a 	bl	80044c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2224      	movs	r2, #36	@ 0x24
 80095f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 ff77 	bl	800a4f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695a      	ldr	r2, [r3, #20]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08c      	sub	sp, #48	@ 0x30
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b20      	cmp	r3, #32
 8009678:	d156      	bne.n	8009728 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <HAL_UART_Transmit_DMA+0x26>
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e04f      	b.n	800972a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	88fa      	ldrh	r2, [r7, #6]
 8009694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	88fa      	ldrh	r2, [r7, #6]
 800969a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2221      	movs	r2, #33	@ 0x21
 80096a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	4a21      	ldr	r2, [pc, #132]	@ (8009734 <HAL_UART_Transmit_DMA+0xd4>)
 80096b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b6:	4a20      	ldr	r2, [pc, #128]	@ (8009738 <HAL_UART_Transmit_DMA+0xd8>)
 80096b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	4a1f      	ldr	r2, [pc, #124]	@ (800973c <HAL_UART_Transmit_DMA+0xdc>)
 80096c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	2200      	movs	r2, #0
 80096c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80096ca:	f107 0308 	add.w	r3, r7, #8
 80096ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80096d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3304      	adds	r3, #4
 80096de:	461a      	mov	r2, r3
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	f7fc fac7 	bl	8005c74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80096ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3314      	adds	r3, #20
 80096f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3314      	adds	r3, #20
 800970e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009710:	627a      	str	r2, [r7, #36]	@ 0x24
 8009712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6a39      	ldr	r1, [r7, #32]
 8009716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	61fb      	str	r3, [r7, #28]
   return(result);
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e5      	bne.n	80096f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	e000      	b.n	800972a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009728:	2302      	movs	r3, #2
  }
}
 800972a:	4618      	mov	r0, r3
 800972c:	3730      	adds	r7, #48	@ 0x30
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08009d85 	.word	0x08009d85
 8009738:	08009e1f 	.word	0x08009e1f
 800973c:	08009fa3 	.word	0x08009fa3

08009740 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08c      	sub	sp, #48	@ 0x30
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b20      	cmp	r3, #32
 8009758:	d14a      	bne.n	80097f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009760:	88fb      	ldrh	r3, [r7, #6]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e043      	b.n	80097f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2201      	movs	r2, #1
 800976e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	461a      	mov	r2, r3
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fc5b 	bl	800a038 <UART_Start_Receive_DMA>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800978c:	2b00      	cmp	r3, #0
 800978e:	d12c      	bne.n	80097ea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009794:	2b01      	cmp	r3, #1
 8009796:	d125      	bne.n	80097e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	613b      	str	r3, [r7, #16]
 80097ac:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	617b      	str	r3, [r7, #20]
   return(result);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f043 0310 	orr.w	r3, r3, #16
 80097c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	330c      	adds	r3, #12
 80097cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80097d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6a39      	ldr	r1, [r7, #32]
 80097d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	61fb      	str	r3, [r7, #28]
   return(result);
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e5      	bne.n	80097ae <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80097e2:	e002      	b.n	80097ea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80097ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097ee:	e000      	b.n	80097f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80097f0:	2302      	movs	r3, #2
  }
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3730      	adds	r7, #48	@ 0x30
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b0ba      	sub	sp, #232	@ 0xe8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009822:	2300      	movs	r3, #0
 8009824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800982e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800983a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10f      	bne.n	8009862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <HAL_UART_IRQHandler+0x66>
 800984e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fd8d 	bl	800a37a <UART_Receive_IT>
      return;
 8009860:	e25b      	b.n	8009d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 80de 	beq.w	8009a28 <HAL_UART_IRQHandler+0x22c>
 800986c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 80d1 	beq.w	8009a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <HAL_UART_IRQHandler+0xae>
 8009892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a2:	f043 0201 	orr.w	r2, r3, #1
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <HAL_UART_IRQHandler+0xd2>
 80098b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d005      	beq.n	80098ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c6:	f043 0202 	orr.w	r2, r3, #2
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <HAL_UART_IRQHandler+0xf6>
 80098da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ea:	f043 0204 	orr.w	r2, r3, #4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d011      	beq.n	8009922 <HAL_UART_IRQHandler+0x126>
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d105      	bne.n	8009916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800990a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991a:	f043 0208 	orr.w	r2, r3, #8
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 81f2 	beq.w	8009d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009930:	f003 0320 	and.w	r3, r3, #32
 8009934:	2b00      	cmp	r3, #0
 8009936:	d008      	beq.n	800994a <HAL_UART_IRQHandler+0x14e>
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fd18 	bl	800a37a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009954:	2b40      	cmp	r3, #64	@ 0x40
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d103      	bne.n	8009976 <HAL_UART_IRQHandler+0x17a>
 800996e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d04f      	beq.n	8009a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fc20 	bl	800a1bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009986:	2b40      	cmp	r3, #64	@ 0x40
 8009988:	d141      	bne.n	8009a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3314      	adds	r3, #20
 8009990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80099a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3314      	adds	r3, #20
 80099b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80099b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80099ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80099c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1d9      	bne.n	800998a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d013      	beq.n	8009a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e2:	4a7e      	ldr	r2, [pc, #504]	@ (8009bdc <HAL_UART_IRQHandler+0x3e0>)
 80099e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fc fa0a 	bl	8005e04 <HAL_DMA_Abort_IT>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d016      	beq.n	8009a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	e00e      	b.n	8009a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9b2 	bl	8009d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	e00a      	b.n	8009a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9ae 	bl	8009d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	e006      	b.n	8009a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f9aa 	bl	8009d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009a22:	e175      	b.n	8009d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a24:	bf00      	nop
    return;
 8009a26:	e173      	b.n	8009d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	f040 814f 	bne.w	8009cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a36:	f003 0310 	and.w	r3, r3, #16
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 8148 	beq.w	8009cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8141 	beq.w	8009cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	60bb      	str	r3, [r7, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a6e:	2b40      	cmp	r3, #64	@ 0x40
 8009a70:	f040 80b6 	bne.w	8009be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8145 	beq.w	8009d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a92:	429a      	cmp	r2, r3
 8009a94:	f080 813e 	bcs.w	8009d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aaa:	f000 8088 	beq.w	8009bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	330c      	adds	r3, #12
 8009ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1d9      	bne.n	8009aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3314      	adds	r3, #20
 8009b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3314      	adds	r3, #20
 8009b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e1      	bne.n	8009afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3314      	adds	r3, #20
 8009b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3314      	adds	r3, #20
 8009b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e3      	bne.n	8009b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	330c      	adds	r3, #12
 8009b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b8e:	f023 0310 	bic.w	r3, r3, #16
 8009b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e3      	bne.n	8009b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fc f8b3 	bl	8005d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7f7 fe29 	bl	800182c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bda:	e09b      	b.n	8009d14 <HAL_UART_IRQHandler+0x518>
 8009bdc:	0800a283 	.word	0x0800a283
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 808e 	beq.w	8009d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 8089 	beq.w	8009d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	330c      	adds	r3, #12
 8009c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e3      	bne.n	8009c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3314      	adds	r3, #20
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3314      	adds	r3, #20
 8009c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e3      	bne.n	8009c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	330c      	adds	r3, #12
 8009c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0310 	bic.w	r3, r3, #16
 8009c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ca8:	61fa      	str	r2, [r7, #28]
 8009caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	69b9      	ldr	r1, [r7, #24]
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e3      	bne.n	8009c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7f7 fdaf 	bl	800182c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cce:	e023      	b.n	8009d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d009      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x4f4>
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fade 	bl	800a2aa <UART_Transmit_IT>
    return;
 8009cee:	e014      	b.n	8009d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00e      	beq.n	8009d1a <HAL_UART_IRQHandler+0x51e>
 8009cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d008      	beq.n	8009d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fb1e 	bl	800a34a <UART_EndTransmit_IT>
    return;
 8009d0e:	e004      	b.n	8009d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8009d10:	bf00      	nop
 8009d12:	e002      	b.n	8009d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009d14:	bf00      	nop
 8009d16:	e000      	b.n	8009d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009d18:	bf00      	nop
  }
}
 8009d1a:	37e8      	adds	r7, #232	@ 0xe8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b090      	sub	sp, #64	@ 0x40
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d137      	bne.n	8009e10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da2:	2200      	movs	r2, #0
 8009da4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3314      	adds	r3, #20
 8009dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	623b      	str	r3, [r7, #32]
   return(result);
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3314      	adds	r3, #20
 8009dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e5      	bne.n	8009da6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	330c      	adds	r3, #12
 8009de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	e853 3f00 	ldrex	r3, [r3]
 8009de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dfa:	61fa      	str	r2, [r7, #28]
 8009dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	69b9      	ldr	r1, [r7, #24]
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	617b      	str	r3, [r7, #20]
   return(result);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e5      	bne.n	8009dda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e0e:	e002      	b.n	8009e16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e12:	f7ff ff85 	bl	8009d20 <HAL_UART_TxCpltCallback>
}
 8009e16:	bf00      	nop
 8009e18:	3740      	adds	r7, #64	@ 0x40
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7ff ff81 	bl	8009d34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e32:	bf00      	nop
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b09c      	sub	sp, #112	@ 0x70
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d172      	bne.n	8009f3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e58:	2200      	movs	r2, #0
 8009e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	330c      	adds	r3, #12
 8009e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	330c      	adds	r3, #12
 8009e7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e5      	bne.n	8009e5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3314      	adds	r3, #20
 8009e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea2:	f023 0301 	bic.w	r3, r3, #1
 8009ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3314      	adds	r3, #20
 8009eae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009eb0:	647a      	str	r2, [r7, #68]	@ 0x44
 8009eb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e5      	bne.n	8009e90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3314      	adds	r3, #20
 8009eca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8009edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009ee4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d119      	bne.n	8009f3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0310 	bic.w	r3, r3, #16
 8009f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	330c      	adds	r3, #12
 8009f26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f28:	61fa      	str	r2, [r7, #28]
 8009f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	617b      	str	r3, [r7, #20]
   return(result);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e5      	bne.n	8009f08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f3e:	2200      	movs	r2, #0
 8009f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d106      	bne.n	8009f58 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f52:	f7f7 fc6b 	bl	800182c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f56:	e002      	b.n	8009f5e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009f58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f5a:	f7ff fef5 	bl	8009d48 <HAL_UART_RxCpltCallback>
}
 8009f5e:	bf00      	nop
 8009f60:	3770      	adds	r7, #112	@ 0x70
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d108      	bne.n	8009f94 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7f7 fc4d 	bl	800182c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f92:	e002      	b.n	8009f9a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fee1 	bl	8009d5c <HAL_UART_RxHalfCpltCallback>
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fbe:	2b80      	cmp	r3, #128	@ 0x80
 8009fc0:	bf0c      	ite	eq
 8009fc2:	2301      	moveq	r3, #1
 8009fc4:	2300      	movne	r3, #0
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b21      	cmp	r3, #33	@ 0x21
 8009fd4:	d108      	bne.n	8009fe8 <UART_DMAError+0x46>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f000 f8c2 	bl	800a16c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff2:	2b40      	cmp	r3, #64	@ 0x40
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2301      	moveq	r3, #1
 8009ff8:	2300      	movne	r3, #0
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b22      	cmp	r3, #34	@ 0x22
 800a008:	d108      	bne.n	800a01c <UART_DMAError+0x7a>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a016:	68b8      	ldr	r0, [r7, #8]
 800a018:	f000 f8d0 	bl	800a1bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a020:	f043 0210 	orr.w	r2, r3, #16
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a028:	68b8      	ldr	r0, [r7, #8]
 800a02a:	f7ff fea1 	bl	8009d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b098      	sub	sp, #96	@ 0x60
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	88fa      	ldrh	r2, [r7, #6]
 800a050:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2222      	movs	r2, #34	@ 0x22
 800a05c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	4a3e      	ldr	r2, [pc, #248]	@ (800a160 <UART_Start_Receive_DMA+0x128>)
 800a066:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a06c:	4a3d      	ldr	r2, [pc, #244]	@ (800a164 <UART_Start_Receive_DMA+0x12c>)
 800a06e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a074:	4a3c      	ldr	r2, [pc, #240]	@ (800a168 <UART_Start_Receive_DMA+0x130>)
 800a076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07c:	2200      	movs	r2, #0
 800a07e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	f7fb fdec 	bl	8005c74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a09c:	2300      	movs	r3, #0
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	613b      	str	r3, [r7, #16]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d019      	beq.n	800a0ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	330c      	adds	r3, #12
 800a0c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	330c      	adds	r3, #12
 800a0d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a0e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a0e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e5      	bne.n	800a0ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3314      	adds	r3, #20
 800a0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f8:	e853 3f00 	ldrex	r3, [r3]
 800a0fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	657b      	str	r3, [r7, #84]	@ 0x54
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a10e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e5      	bne.n	800a0ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3314      	adds	r3, #20
 800a128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a138:	653b      	str	r3, [r7, #80]	@ 0x50
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3314      	adds	r3, #20
 800a140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a142:	627a      	str	r2, [r7, #36]	@ 0x24
 800a144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6a39      	ldr	r1, [r7, #32]
 800a148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e5      	bne.n	800a122 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3760      	adds	r7, #96	@ 0x60
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	08009e3b 	.word	0x08009e3b
 800a164:	08009f67 	.word	0x08009f67
 800a168:	08009fa3 	.word	0x08009fa3

0800a16c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b089      	sub	sp, #36	@ 0x24
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	330c      	adds	r3, #12
 800a17a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	60bb      	str	r3, [r7, #8]
   return(result);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a18a:	61fb      	str	r3, [r7, #28]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	330c      	adds	r3, #12
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	61ba      	str	r2, [r7, #24]
 800a196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6979      	ldr	r1, [r7, #20]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e5      	bne.n	800a174 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a1b0:	bf00      	nop
 800a1b2:	3724      	adds	r7, #36	@ 0x24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b095      	sub	sp, #84	@ 0x54
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	330c      	adds	r3, #12
 800a1e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e5      	bne.n	800a1c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3314      	adds	r3, #20
 800a1fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	61fb      	str	r3, [r7, #28]
   return(result);
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f023 0301 	bic.w	r3, r3, #1
 800a20e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3314      	adds	r3, #20
 800a216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a21a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a21e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e5      	bne.n	800a1f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a230:	2b01      	cmp	r3, #1
 800a232:	d119      	bne.n	800a268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60bb      	str	r3, [r7, #8]
   return(result);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f023 0310 	bic.w	r3, r3, #16
 800a24a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	330c      	adds	r3, #12
 800a252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a254:	61ba      	str	r2, [r7, #24]
 800a256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6979      	ldr	r1, [r7, #20]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	613b      	str	r3, [r7, #16]
   return(result);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e5      	bne.n	800a234 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a276:	bf00      	nop
 800a278:	3754      	adds	r7, #84	@ 0x54
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fd67 	bl	8009d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b21      	cmp	r3, #33	@ 0x21
 800a2bc:	d13e      	bne.n	800a33c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c6:	d114      	bne.n	800a2f2 <UART_Transmit_IT+0x48>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d110      	bne.n	800a2f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	1c9a      	adds	r2, r3, #2
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	621a      	str	r2, [r3, #32]
 800a2f0:	e008      	b.n	800a304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	1c59      	adds	r1, r3, #1
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6211      	str	r1, [r2, #32]
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	4619      	mov	r1, r3
 800a312:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10f      	bne.n	800a338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	e000      	b.n	800a33e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a33c:	2302      	movs	r3, #2
  }
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2220      	movs	r2, #32
 800a366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fcd8 	bl	8009d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b08c      	sub	sp, #48	@ 0x30
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b22      	cmp	r3, #34	@ 0x22
 800a38c:	f040 80ae 	bne.w	800a4ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a398:	d117      	bne.n	800a3ca <UART_Receive_IT+0x50>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d113      	bne.n	800a3ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c2:	1c9a      	adds	r2, r3, #2
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3c8:	e026      	b.n	800a418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3dc:	d007      	beq.n	800a3ee <UART_Receive_IT+0x74>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10a      	bne.n	800a3fc <UART_Receive_IT+0x82>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	e008      	b.n	800a40e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	b29b      	uxth	r3, r3
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	4619      	mov	r1, r3
 800a426:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d15d      	bne.n	800a4e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0220 	bic.w	r2, r2, #32
 800a43a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68da      	ldr	r2, [r3, #12]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a44a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	695a      	ldr	r2, [r3, #20]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f022 0201 	bic.w	r2, r2, #1
 800a45a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d135      	bne.n	800a4de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	330c      	adds	r3, #12
 800a47e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	613b      	str	r3, [r7, #16]
   return(result);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	f023 0310 	bic.w	r3, r3, #16
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	330c      	adds	r3, #12
 800a496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a498:	623a      	str	r2, [r7, #32]
 800a49a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	69f9      	ldr	r1, [r7, #28]
 800a49e:	6a3a      	ldr	r2, [r7, #32]
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0310 	and.w	r3, r3, #16
 800a4b6:	2b10      	cmp	r3, #16
 800a4b8:	d10a      	bne.n	800a4d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7f7 f9a8 	bl	800182c <HAL_UARTEx_RxEventCallback>
 800a4dc:	e002      	b.n	800a4e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff fc32 	bl	8009d48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e002      	b.n	800a4ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e000      	b.n	800a4ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a4ec:	2302      	movs	r3, #2
  }
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3730      	adds	r7, #48	@ 0x30
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4fc:	b0c0      	sub	sp, #256	@ 0x100
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a514:	68d9      	ldr	r1, [r3, #12]
 800a516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	ea40 0301 	orr.w	r3, r0, r1
 800a520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	431a      	orrs	r2, r3
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	431a      	orrs	r2, r3
 800a538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a550:	f021 010c 	bic.w	r1, r1, #12
 800a554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a55e:	430b      	orrs	r3, r1
 800a560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a572:	6999      	ldr	r1, [r3, #24]
 800a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	ea40 0301 	orr.w	r3, r0, r1
 800a57e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4b8f      	ldr	r3, [pc, #572]	@ (800a7c4 <UART_SetConfig+0x2cc>)
 800a588:	429a      	cmp	r2, r3
 800a58a:	d005      	beq.n	800a598 <UART_SetConfig+0xa0>
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4b8d      	ldr	r3, [pc, #564]	@ (800a7c8 <UART_SetConfig+0x2d0>)
 800a594:	429a      	cmp	r2, r3
 800a596:	d104      	bne.n	800a5a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a598:	f7fd fd1a 	bl	8007fd0 <HAL_RCC_GetPCLK2Freq>
 800a59c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5a0:	e003      	b.n	800a5aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5a2:	f7fd fd01 	bl	8007fa8 <HAL_RCC_GetPCLK1Freq>
 800a5a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5b4:	f040 810c 	bne.w	800a7d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	1891      	adds	r1, r2, r2
 800a5d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5d2:	415b      	adcs	r3, r3
 800a5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5da:	4621      	mov	r1, r4
 800a5dc:	eb12 0801 	adds.w	r8, r2, r1
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	eb43 0901 	adc.w	r9, r3, r1
 800a5e6:	f04f 0200 	mov.w	r2, #0
 800a5ea:	f04f 0300 	mov.w	r3, #0
 800a5ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5fa:	4690      	mov	r8, r2
 800a5fc:	4699      	mov	r9, r3
 800a5fe:	4623      	mov	r3, r4
 800a600:	eb18 0303 	adds.w	r3, r8, r3
 800a604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a608:	462b      	mov	r3, r5
 800a60a:	eb49 0303 	adc.w	r3, r9, r3
 800a60e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a61e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a626:	460b      	mov	r3, r1
 800a628:	18db      	adds	r3, r3, r3
 800a62a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a62c:	4613      	mov	r3, r2
 800a62e:	eb42 0303 	adc.w	r3, r2, r3
 800a632:	657b      	str	r3, [r7, #84]	@ 0x54
 800a634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a63c:	f7f5 fe20 	bl	8000280 <__aeabi_uldivmod>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4b61      	ldr	r3, [pc, #388]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a646:	fba3 2302 	umull	r2, r3, r3, r2
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	011c      	lsls	r4, r3, #4
 800a64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a652:	2200      	movs	r2, #0
 800a654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a658:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a65c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	1891      	adds	r1, r2, r2
 800a666:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a668:	415b      	adcs	r3, r3
 800a66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a66c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a670:	4641      	mov	r1, r8
 800a672:	eb12 0a01 	adds.w	sl, r2, r1
 800a676:	4649      	mov	r1, r9
 800a678:	eb43 0b01 	adc.w	fp, r3, r1
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a68c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a690:	4692      	mov	sl, r2
 800a692:	469b      	mov	fp, r3
 800a694:	4643      	mov	r3, r8
 800a696:	eb1a 0303 	adds.w	r3, sl, r3
 800a69a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a69e:	464b      	mov	r3, r9
 800a6a0:	eb4b 0303 	adc.w	r3, fp, r3
 800a6a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a6b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	18db      	adds	r3, r3, r3
 800a6c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	eb42 0303 	adc.w	r3, r2, r3
 800a6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6d2:	f7f5 fdd5 	bl	8000280 <__aeabi_uldivmod>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a6de:	fba3 2301 	umull	r2, r3, r3, r1
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	2264      	movs	r2, #100	@ 0x64
 800a6e6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ea:	1acb      	subs	r3, r1, r3
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6f2:	4b36      	ldr	r3, [pc, #216]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a6f4:	fba3 2302 	umull	r2, r3, r3, r2
 800a6f8:	095b      	lsrs	r3, r3, #5
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a700:	441c      	add	r4, r3
 800a702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a706:	2200      	movs	r2, #0
 800a708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a70c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	1891      	adds	r1, r2, r2
 800a71a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a71c:	415b      	adcs	r3, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a724:	4641      	mov	r1, r8
 800a726:	1851      	adds	r1, r2, r1
 800a728:	6339      	str	r1, [r7, #48]	@ 0x30
 800a72a:	4649      	mov	r1, r9
 800a72c:	414b      	adcs	r3, r1
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a73c:	4659      	mov	r1, fp
 800a73e:	00cb      	lsls	r3, r1, #3
 800a740:	4651      	mov	r1, sl
 800a742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a746:	4651      	mov	r1, sl
 800a748:	00ca      	lsls	r2, r1, #3
 800a74a:	4610      	mov	r0, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	4642      	mov	r2, r8
 800a752:	189b      	adds	r3, r3, r2
 800a754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a758:	464b      	mov	r3, r9
 800a75a:	460a      	mov	r2, r1
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a770:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a778:	460b      	mov	r3, r1
 800a77a:	18db      	adds	r3, r3, r3
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a77e:	4613      	mov	r3, r2
 800a780:	eb42 0303 	adc.w	r3, r2, r3
 800a784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a78a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a78e:	f7f5 fd77 	bl	8000280 <__aeabi_uldivmod>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4b0d      	ldr	r3, [pc, #52]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a798:	fba3 1302 	umull	r1, r3, r3, r2
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	2164      	movs	r1, #100	@ 0x64
 800a7a0:	fb01 f303 	mul.w	r3, r1, r3
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	3332      	adds	r3, #50	@ 0x32
 800a7aa:	4a08      	ldr	r2, [pc, #32]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	f003 0207 	and.w	r2, r3, #7
 800a7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4422      	add	r2, r4
 800a7be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7c0:	e106      	b.n	800a9d0 <UART_SetConfig+0x4d8>
 800a7c2:	bf00      	nop
 800a7c4:	40011000 	.word	0x40011000
 800a7c8:	40011400 	.word	0x40011400
 800a7cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7e2:	4642      	mov	r2, r8
 800a7e4:	464b      	mov	r3, r9
 800a7e6:	1891      	adds	r1, r2, r2
 800a7e8:	6239      	str	r1, [r7, #32]
 800a7ea:	415b      	adcs	r3, r3
 800a7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	1854      	adds	r4, r2, r1
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	eb43 0501 	adc.w	r5, r3, r1
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	f04f 0300 	mov.w	r3, #0
 800a804:	00eb      	lsls	r3, r5, #3
 800a806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a80a:	00e2      	lsls	r2, r4, #3
 800a80c:	4614      	mov	r4, r2
 800a80e:	461d      	mov	r5, r3
 800a810:	4643      	mov	r3, r8
 800a812:	18e3      	adds	r3, r4, r3
 800a814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a818:	464b      	mov	r3, r9
 800a81a:	eb45 0303 	adc.w	r3, r5, r3
 800a81e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a82e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a832:	f04f 0200 	mov.w	r2, #0
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a83e:	4629      	mov	r1, r5
 800a840:	008b      	lsls	r3, r1, #2
 800a842:	4621      	mov	r1, r4
 800a844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a848:	4621      	mov	r1, r4
 800a84a:	008a      	lsls	r2, r1, #2
 800a84c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a850:	f7f5 fd16 	bl	8000280 <__aeabi_uldivmod>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4b60      	ldr	r3, [pc, #384]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a85a:	fba3 2302 	umull	r2, r3, r3, r2
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	011c      	lsls	r4, r3, #4
 800a862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a866:	2200      	movs	r2, #0
 800a868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a86c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a874:	4642      	mov	r2, r8
 800a876:	464b      	mov	r3, r9
 800a878:	1891      	adds	r1, r2, r2
 800a87a:	61b9      	str	r1, [r7, #24]
 800a87c:	415b      	adcs	r3, r3
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a884:	4641      	mov	r1, r8
 800a886:	1851      	adds	r1, r2, r1
 800a888:	6139      	str	r1, [r7, #16]
 800a88a:	4649      	mov	r1, r9
 800a88c:	414b      	adcs	r3, r1
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a89c:	4659      	mov	r1, fp
 800a89e:	00cb      	lsls	r3, r1, #3
 800a8a0:	4651      	mov	r1, sl
 800a8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	00ca      	lsls	r2, r1, #3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	189b      	adds	r3, r3, r2
 800a8b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	eb42 0303 	adc.w	r3, r2, r3
 800a8c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8d0:	f04f 0200 	mov.w	r2, #0
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8dc:	4649      	mov	r1, r9
 800a8de:	008b      	lsls	r3, r1, #2
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e6:	4641      	mov	r1, r8
 800a8e8:	008a      	lsls	r2, r1, #2
 800a8ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8ee:	f7f5 fcc7 	bl	8000280 <__aeabi_uldivmod>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4b38      	ldr	r3, [pc, #224]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a8fa:	fba3 2301 	umull	r2, r3, r3, r1
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	2264      	movs	r2, #100	@ 0x64
 800a902:	fb02 f303 	mul.w	r3, r2, r3
 800a906:	1acb      	subs	r3, r1, r3
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	3332      	adds	r3, #50	@ 0x32
 800a90c:	4a33      	ldr	r2, [pc, #204]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a90e:	fba2 2303 	umull	r2, r3, r2, r3
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a918:	441c      	add	r4, r3
 800a91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a91e:	2200      	movs	r2, #0
 800a920:	673b      	str	r3, [r7, #112]	@ 0x70
 800a922:	677a      	str	r2, [r7, #116]	@ 0x74
 800a924:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	1891      	adds	r1, r2, r2
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	415b      	adcs	r3, r3
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a938:	4641      	mov	r1, r8
 800a93a:	1851      	adds	r1, r2, r1
 800a93c:	6039      	str	r1, [r7, #0]
 800a93e:	4649      	mov	r1, r9
 800a940:	414b      	adcs	r3, r1
 800a942:	607b      	str	r3, [r7, #4]
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a950:	4659      	mov	r1, fp
 800a952:	00cb      	lsls	r3, r1, #3
 800a954:	4651      	mov	r1, sl
 800a956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a95a:	4651      	mov	r1, sl
 800a95c:	00ca      	lsls	r2, r1, #3
 800a95e:	4610      	mov	r0, r2
 800a960:	4619      	mov	r1, r3
 800a962:	4603      	mov	r3, r0
 800a964:	4642      	mov	r2, r8
 800a966:	189b      	adds	r3, r3, r2
 800a968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a96a:	464b      	mov	r3, r9
 800a96c:	460a      	mov	r2, r1
 800a96e:	eb42 0303 	adc.w	r3, r2, r3
 800a972:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a97e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a98c:	4649      	mov	r1, r9
 800a98e:	008b      	lsls	r3, r1, #2
 800a990:	4641      	mov	r1, r8
 800a992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a996:	4641      	mov	r1, r8
 800a998:	008a      	lsls	r2, r1, #2
 800a99a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a99e:	f7f5 fc6f 	bl	8000280 <__aeabi_uldivmod>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ac:	095b      	lsrs	r3, r3, #5
 800a9ae:	2164      	movs	r1, #100	@ 0x64
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	3332      	adds	r3, #50	@ 0x32
 800a9ba:	4a08      	ldr	r2, [pc, #32]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f003 020f 	and.w	r2, r3, #15
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4422      	add	r2, r4
 800a9ce:	609a      	str	r2, [r3, #8]
}
 800a9d0:	bf00      	nop
 800a9d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9dc:	51eb851f 	.word	0x51eb851f

0800a9e0 <__NVIC_SetPriority>:
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	db0a      	blt.n	800aa0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	490c      	ldr	r1, [pc, #48]	@ (800aa2c <__NVIC_SetPriority+0x4c>)
 800a9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9fe:	0112      	lsls	r2, r2, #4
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	440b      	add	r3, r1
 800aa04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aa08:	e00a      	b.n	800aa20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	4908      	ldr	r1, [pc, #32]	@ (800aa30 <__NVIC_SetPriority+0x50>)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	f003 030f 	and.w	r3, r3, #15
 800aa16:	3b04      	subs	r3, #4
 800aa18:	0112      	lsls	r2, r2, #4
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	761a      	strb	r2, [r3, #24]
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	e000e100 	.word	0xe000e100
 800aa30:	e000ed00 	.word	0xe000ed00

0800aa34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aa38:	2100      	movs	r1, #0
 800aa3a:	f06f 0004 	mvn.w	r0, #4
 800aa3e:	f7ff ffcf 	bl	800a9e0 <__NVIC_SetPriority>
#endif
}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa4e:	f3ef 8305 	mrs	r3, IPSR
 800aa52:	603b      	str	r3, [r7, #0]
  return(result);
 800aa54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aa5a:	f06f 0305 	mvn.w	r3, #5
 800aa5e:	607b      	str	r3, [r7, #4]
 800aa60:	e00c      	b.n	800aa7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa62:	4b0a      	ldr	r3, [pc, #40]	@ (800aa8c <osKernelInitialize+0x44>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d105      	bne.n	800aa76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa6a:	4b08      	ldr	r3, [pc, #32]	@ (800aa8c <osKernelInitialize+0x44>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	607b      	str	r3, [r7, #4]
 800aa74:	e002      	b.n	800aa7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa7c:	687b      	ldr	r3, [r7, #4]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000e5c 	.word	0x20000e5c

0800aa90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa96:	f3ef 8305 	mrs	r3, IPSR
 800aa9a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <osKernelStart+0x1a>
    stat = osErrorISR;
 800aaa2:	f06f 0305 	mvn.w	r3, #5
 800aaa6:	607b      	str	r3, [r7, #4]
 800aaa8:	e010      	b.n	800aacc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	@ (800aad8 <osKernelStart+0x48>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d109      	bne.n	800aac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aab2:	f7ff ffbf 	bl	800aa34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aab6:	4b08      	ldr	r3, [pc, #32]	@ (800aad8 <osKernelStart+0x48>)
 800aab8:	2202      	movs	r2, #2
 800aaba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aabc:	f001 f892 	bl	800bbe4 <vTaskStartScheduler>
      stat = osOK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	607b      	str	r3, [r7, #4]
 800aac4:	e002      	b.n	800aacc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aacc:	687b      	ldr	r3, [r7, #4]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000e5c 	.word	0x20000e5c

0800aadc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08e      	sub	sp, #56	@ 0x38
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaec:	f3ef 8305 	mrs	r3, IPSR
 800aaf0:	617b      	str	r3, [r7, #20]
  return(result);
 800aaf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d17e      	bne.n	800abf6 <osThreadNew+0x11a>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d07b      	beq.n	800abf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aafe:	2380      	movs	r3, #128	@ 0x80
 800ab00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab02:	2318      	movs	r3, #24
 800ab04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ab0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d045      	beq.n	800aba2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <osThreadNew+0x48>
        name = attr->name;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <osThreadNew+0x6e>
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	2b38      	cmp	r3, #56	@ 0x38
 800ab3c:	d805      	bhi.n	800ab4a <osThreadNew+0x6e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <osThreadNew+0x72>
        return (NULL);
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e054      	b.n	800abf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	089b      	lsrs	r3, r3, #2
 800ab5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <osThreadNew+0xa8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ab6c:	d90a      	bls.n	800ab84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d006      	beq.n	800ab84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <osThreadNew+0xa8>
        mem = 1;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	e010      	b.n	800aba6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10c      	bne.n	800aba6 <osThreadNew+0xca>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d108      	bne.n	800aba6 <osThreadNew+0xca>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d104      	bne.n	800aba6 <osThreadNew+0xca>
          mem = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61bb      	str	r3, [r7, #24]
 800aba0:	e001      	b.n	800aba6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d110      	bne.n	800abce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800abb4:	9202      	str	r2, [sp, #8]
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	6a3a      	ldr	r2, [r7, #32]
 800abc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fe1a 	bl	800b7fc <xTaskCreateStatic>
 800abc8:	4603      	mov	r3, r0
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	e013      	b.n	800abf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d110      	bne.n	800abf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	f107 0310 	add.w	r3, r7, #16
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fe68 	bl	800b8bc <xTaskCreate>
 800abec:	4603      	mov	r3, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d001      	beq.n	800abf6 <osThreadNew+0x11a>
            hTask = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800abf6:	693b      	ldr	r3, [r7, #16]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3728      	adds	r7, #40	@ 0x28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac08:	f3ef 8305 	mrs	r3, IPSR
 800ac0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <osDelay+0x1c>
    stat = osErrorISR;
 800ac14:	f06f 0305 	mvn.w	r3, #5
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e007      	b.n	800ac2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 ffa6 	bl	800bb78 <vTaskDelay>
    }
  }

  return (stat);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a07      	ldr	r2, [pc, #28]	@ (800ac64 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	4a06      	ldr	r2, [pc, #24]	@ (800ac68 <vApplicationGetIdleTaskMemory+0x30>)
 800ac4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2280      	movs	r2, #128	@ 0x80
 800ac54:	601a      	str	r2, [r3, #0]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000e60 	.word	0x20000e60
 800ac68:	20000f08 	.word	0x20000f08

0800ac6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4a07      	ldr	r2, [pc, #28]	@ (800ac98 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	4a06      	ldr	r2, [pc, #24]	@ (800ac9c <vApplicationGetTimerTaskMemory+0x30>)
 800ac82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac8a:	601a      	str	r2, [r3, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	20001108 	.word	0x20001108
 800ac9c:	200011b0 	.word	0x200011b0

0800aca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f103 0208 	add.w	r2, r3, #8
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f103 0208 	add.w	r2, r3, #8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f103 0208 	add.w	r2, r3, #8
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800acee:	bf00      	nop
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad58:	d103      	bne.n	800ad62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e00c      	b.n	800ad7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3308      	adds	r3, #8
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	e002      	b.n	800ad70 <vListInsert+0x2e>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d2f6      	bcs.n	800ad6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	601a      	str	r2, [r3, #0]
}
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6892      	ldr	r2, [r2, #8]
 800adca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	6852      	ldr	r2, [r2, #4]
 800add4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d103      	bne.n	800ade8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	689a      	ldr	r2, [r3, #8]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	1e5a      	subs	r2, r3, #1
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	e7fd      	b.n	800ae30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae34:	f002 fa80 	bl	800d338 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae40:	68f9      	ldr	r1, [r7, #12]
 800ae42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae44:	fb01 f303 	mul.w	r3, r1, r3
 800ae48:	441a      	add	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae64:	3b01      	subs	r3, #1
 800ae66:	68f9      	ldr	r1, [r7, #12]
 800ae68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae6a:	fb01 f303 	mul.w	r3, r1, r3
 800ae6e:	441a      	add	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	22ff      	movs	r2, #255	@ 0xff
 800ae78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	22ff      	movs	r2, #255	@ 0xff
 800ae80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d114      	bne.n	800aeb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01a      	beq.n	800aec8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3310      	adds	r3, #16
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 fa3c 	bl	800c314 <xTaskRemoveFromEventList>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d012      	beq.n	800aec8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aea2:	4b0d      	ldr	r3, [pc, #52]	@ (800aed8 <xQueueGenericReset+0xd0>)
 800aea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	e009      	b.n	800aec8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3310      	adds	r3, #16
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff fef1 	bl	800aca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3324      	adds	r3, #36	@ 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff feec 	bl	800aca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aec8:	f002 fa68 	bl	800d39c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aecc:	2301      	movs	r3, #1
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08e      	sub	sp, #56	@ 0x38
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10b      	bne.n	800af08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10b      	bne.n	800af26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <xQueueGenericCreateStatic+0x56>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <xQueueGenericCreateStatic+0x5a>
 800af32:	2301      	movs	r3, #1
 800af34:	e000      	b.n	800af38 <xQueueGenericCreateStatic+0x5c>
 800af36:	2300      	movs	r3, #0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10b      	bne.n	800af54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	623b      	str	r3, [r7, #32]
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	e7fd      	b.n	800af50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <xQueueGenericCreateStatic+0x84>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <xQueueGenericCreateStatic+0x88>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <xQueueGenericCreateStatic+0x8a>
 800af64:	2300      	movs	r3, #0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	61fb      	str	r3, [r7, #28]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af82:	2350      	movs	r3, #80	@ 0x50
 800af84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d00b      	beq.n	800afa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	61bb      	str	r3, [r7, #24]
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800afa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800afaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00d      	beq.n	800afcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800afb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800afbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f805 	bl	800afd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800afce:	4618      	mov	r0, r3
 800afd0:	3730      	adds	r7, #48	@ 0x30
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d103      	bne.n	800aff2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	e002      	b.n	800aff8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b004:	2101      	movs	r1, #1
 800b006:	69b8      	ldr	r0, [r7, #24]
 800b008:	f7ff fefe 	bl	800ae08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08e      	sub	sp, #56	@ 0x38
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b02a:	2300      	movs	r3, #0
 800b02c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10b      	bne.n	800b050 <xQueueGenericSend+0x34>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	e7fd      	b.n	800b04c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d103      	bne.n	800b05e <xQueueGenericSend+0x42>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <xQueueGenericSend+0x46>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <xQueueGenericSend+0x48>
 800b062:	2300      	movs	r3, #0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10b      	bne.n	800b080 <xQueueGenericSend+0x64>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b07a:	bf00      	nop
 800b07c:	bf00      	nop
 800b07e:	e7fd      	b.n	800b07c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b02      	cmp	r3, #2
 800b084:	d103      	bne.n	800b08e <xQueueGenericSend+0x72>
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <xQueueGenericSend+0x76>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <xQueueGenericSend+0x78>
 800b092:	2300      	movs	r3, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10b      	bne.n	800b0b0 <xQueueGenericSend+0x94>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	623b      	str	r3, [r7, #32]
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	e7fd      	b.n	800b0ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b0:	f001 faf6 	bl	800c6a0 <xTaskGetSchedulerState>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <xQueueGenericSend+0xa4>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <xQueueGenericSend+0xa8>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <xQueueGenericSend+0xaa>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10b      	bne.n	800b0e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	61fb      	str	r3, [r7, #28]
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	e7fd      	b.n	800b0de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e2:	f002 f929 	bl	800d338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d302      	bcc.n	800b0f8 <xQueueGenericSend+0xdc>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d129      	bne.n	800b14c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0fe:	f000 fa0f 	bl	800b520 <prvCopyDataToQueue>
 800b102:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d010      	beq.n	800b12e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	3324      	adds	r3, #36	@ 0x24
 800b110:	4618      	mov	r0, r3
 800b112:	f001 f8ff 	bl	800c314 <xTaskRemoveFromEventList>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d013      	beq.n	800b144 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b11c:	4b3f      	ldr	r3, [pc, #252]	@ (800b21c <xQueueGenericSend+0x200>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	e00a      	b.n	800b144 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	2b00      	cmp	r3, #0
 800b132:	d007      	beq.n	800b144 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b134:	4b39      	ldr	r3, [pc, #228]	@ (800b21c <xQueueGenericSend+0x200>)
 800b136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b144:	f002 f92a 	bl	800d39c <vPortExitCritical>
				return pdPASS;
 800b148:	2301      	movs	r3, #1
 800b14a:	e063      	b.n	800b214 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d103      	bne.n	800b15a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b152:	f002 f923 	bl	800d39c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b156:	2300      	movs	r3, #0
 800b158:	e05c      	b.n	800b214 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b160:	f107 0314 	add.w	r3, r7, #20
 800b164:	4618      	mov	r0, r3
 800b166:	f001 f939 	bl	800c3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b16e:	f002 f915 	bl	800d39c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b172:	f000 fda7 	bl	800bcc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b176:	f002 f8df 	bl	800d338 <vPortEnterCritical>
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b180:	b25b      	sxtb	r3, r3
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b186:	d103      	bne.n	800b190 <xQueueGenericSend+0x174>
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b196:	b25b      	sxtb	r3, r3
 800b198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b19c:	d103      	bne.n	800b1a6 <xQueueGenericSend+0x18a>
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1a6:	f002 f8f9 	bl	800d39c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1aa:	1d3a      	adds	r2, r7, #4
 800b1ac:	f107 0314 	add.w	r3, r7, #20
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 f928 	bl	800c408 <xTaskCheckForTimeOut>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d124      	bne.n	800b208 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1c0:	f000 faa6 	bl	800b710 <prvIsQueueFull>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d018      	beq.n	800b1fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	3310      	adds	r3, #16
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f001 f84c 	bl	800c270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1da:	f000 fa31 	bl	800b640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1de:	f000 fd7f 	bl	800bce0 <xTaskResumeAll>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f af7c 	bne.w	800b0e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b21c <xQueueGenericSend+0x200>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	e772      	b.n	800b0e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1fe:	f000 fa1f 	bl	800b640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b202:	f000 fd6d 	bl	800bce0 <xTaskResumeAll>
 800b206:	e76c      	b.n	800b0e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b20a:	f000 fa19 	bl	800b640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b20e:	f000 fd67 	bl	800bce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b214:	4618      	mov	r0, r3
 800b216:	3738      	adds	r7, #56	@ 0x38
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b090      	sub	sp, #64	@ 0x40
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10b      	bne.n	800b250 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
 800b24e:	e7fd      	b.n	800b24c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d103      	bne.n	800b25e <xQueueGenericSendFromISR+0x3e>
 800b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <xQueueGenericSendFromISR+0x42>
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <xQueueGenericSendFromISR+0x44>
 800b262:	2300      	movs	r3, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10b      	bne.n	800b280 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	e7fd      	b.n	800b27c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d103      	bne.n	800b28e <xQueueGenericSendFromISR+0x6e>
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <xQueueGenericSendFromISR+0x72>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <xQueueGenericSendFromISR+0x74>
 800b292:	2300      	movs	r3, #0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10b      	bne.n	800b2b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	623b      	str	r3, [r7, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2b0:	f002 f922 	bl	800d4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	61fa      	str	r2, [r7, #28]
 800b2ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <xQueueGenericSendFromISR+0xc2>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d12f      	bne.n	800b342 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2f8:	f000 f912 	bl	800b520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b304:	d112      	bne.n	800b32c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d016      	beq.n	800b33c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	3324      	adds	r3, #36	@ 0x24
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fffe 	bl	800c314 <xTaskRemoveFromEventList>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00e      	beq.n	800b33c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e007      	b.n	800b33c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b32c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b330:	3301      	adds	r3, #1
 800b332:	b2db      	uxtb	r3, r3
 800b334:	b25a      	sxtb	r2, r3
 800b336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b33c:	2301      	movs	r3, #1
 800b33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b340:	e001      	b.n	800b346 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b342:	2300      	movs	r3, #0
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b348:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b354:	4618      	mov	r0, r3
 800b356:	3740      	adds	r7, #64	@ 0x40
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08c      	sub	sp, #48	@ 0x30
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b368:	2300      	movs	r3, #0
 800b36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10b      	bne.n	800b38e <xQueueReceive+0x32>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	623b      	str	r3, [r7, #32]
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	e7fd      	b.n	800b38a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d103      	bne.n	800b39c <xQueueReceive+0x40>
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <xQueueReceive+0x44>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e000      	b.n	800b3a2 <xQueueReceive+0x46>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10b      	bne.n	800b3be <xQueueReceive+0x62>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	61fb      	str	r3, [r7, #28]
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	e7fd      	b.n	800b3ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3be:	f001 f96f 	bl	800c6a0 <xTaskGetSchedulerState>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <xQueueReceive+0x72>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <xQueueReceive+0x76>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <xQueueReceive+0x78>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10b      	bne.n	800b3f0 <xQueueReceive+0x94>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	61bb      	str	r3, [r7, #24]
}
 800b3ea:	bf00      	nop
 800b3ec:	bf00      	nop
 800b3ee:	e7fd      	b.n	800b3ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3f0:	f001 ffa2 	bl	800d338 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01f      	beq.n	800b440 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b400:	68b9      	ldr	r1, [r7, #8]
 800b402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b404:	f000 f8f6 	bl	800b5f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	1e5a      	subs	r2, r3, #1
 800b40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00f      	beq.n	800b438 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	3310      	adds	r3, #16
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 ff79 	bl	800c314 <xTaskRemoveFromEventList>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b428:	4b3c      	ldr	r3, [pc, #240]	@ (800b51c <xQueueReceive+0x1c0>)
 800b42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b438:	f001 ffb0 	bl	800d39c <vPortExitCritical>
				return pdPASS;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e069      	b.n	800b514 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d103      	bne.n	800b44e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b446:	f001 ffa9 	bl	800d39c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b44a:	2300      	movs	r3, #0
 800b44c:	e062      	b.n	800b514 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b454:	f107 0310 	add.w	r3, r7, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 ffbf 	bl	800c3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b45e:	2301      	movs	r3, #1
 800b460:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b462:	f001 ff9b 	bl	800d39c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b466:	f000 fc2d 	bl	800bcc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b46a:	f001 ff65 	bl	800d338 <vPortEnterCritical>
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b474:	b25b      	sxtb	r3, r3
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b47a:	d103      	bne.n	800b484 <xQueueReceive+0x128>
 800b47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b490:	d103      	bne.n	800b49a <xQueueReceive+0x13e>
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b49a:	f001 ff7f 	bl	800d39c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b49e:	1d3a      	adds	r2, r7, #4
 800b4a0:	f107 0310 	add.w	r3, r7, #16
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 ffae 	bl	800c408 <xTaskCheckForTimeOut>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d123      	bne.n	800b4fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b4:	f000 f916 	bl	800b6e4 <prvIsQueueEmpty>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d017      	beq.n	800b4ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c0:	3324      	adds	r3, #36	@ 0x24
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fed2 	bl	800c270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ce:	f000 f8b7 	bl	800b640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4d2:	f000 fc05 	bl	800bce0 <xTaskResumeAll>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d189      	bne.n	800b3f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b51c <xQueueReceive+0x1c0>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	e780      	b.n	800b3f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f0:	f000 f8a6 	bl	800b640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4f4:	f000 fbf4 	bl	800bce0 <xTaskResumeAll>
 800b4f8:	e77a      	b.n	800b3f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4fc:	f000 f8a0 	bl	800b640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b500:	f000 fbee 	bl	800bce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b506:	f000 f8ed 	bl	800b6e4 <prvIsQueueEmpty>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f43f af6f 	beq.w	800b3f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b514:	4618      	mov	r0, r3
 800b516:	3730      	adds	r7, #48	@ 0x30
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10d      	bne.n	800b55a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d14d      	bne.n	800b5e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 f8c6 	bl	800c6dc <xTaskPriorityDisinherit>
 800b550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	609a      	str	r2, [r3, #8]
 800b558:	e043      	b.n	800b5e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d119      	bne.n	800b594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6858      	ldr	r0, [r3, #4]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b568:	461a      	mov	r2, r3
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	f002 fa9e 	bl	800daac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	441a      	add	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	d32b      	bcc.n	800b5e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	605a      	str	r2, [r3, #4]
 800b592:	e026      	b.n	800b5e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68d8      	ldr	r0, [r3, #12]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59c:	461a      	mov	r2, r3
 800b59e:	68b9      	ldr	r1, [r7, #8]
 800b5a0:	f002 fa84 	bl	800daac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	68da      	ldr	r2, [r3, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ac:	425b      	negs	r3, r3
 800b5ae:	441a      	add	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d207      	bcs.n	800b5d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	689a      	ldr	r2, [r3, #8]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c8:	425b      	negs	r3, r3
 800b5ca:	441a      	add	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d105      	bne.n	800b5e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b602:	2b00      	cmp	r3, #0
 800b604:	d018      	beq.n	800b638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60e:	441a      	add	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d303      	bcc.n	800b628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68d9      	ldr	r1, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b630:	461a      	mov	r2, r3
 800b632:	6838      	ldr	r0, [r7, #0]
 800b634:	f002 fa3a 	bl	800daac <memcpy>
	}
}
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b648:	f001 fe76 	bl	800d338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b654:	e011      	b.n	800b67a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d012      	beq.n	800b684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	3324      	adds	r3, #36	@ 0x24
 800b662:	4618      	mov	r0, r3
 800b664:	f000 fe56 	bl	800c314 <xTaskRemoveFromEventList>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b66e:	f000 ff2f 	bl	800c4d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	3b01      	subs	r3, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	dce9      	bgt.n	800b656 <prvUnlockQueue+0x16>
 800b682:	e000      	b.n	800b686 <prvUnlockQueue+0x46>
					break;
 800b684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	22ff      	movs	r2, #255	@ 0xff
 800b68a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b68e:	f001 fe85 	bl	800d39c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b692:	f001 fe51 	bl	800d338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b69c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b69e:	e011      	b.n	800b6c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d012      	beq.n	800b6ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fe31 	bl	800c314 <xTaskRemoveFromEventList>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6b8:	f000 ff0a 	bl	800c4d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6bc:	7bbb      	ldrb	r3, [r7, #14]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dce9      	bgt.n	800b6a0 <prvUnlockQueue+0x60>
 800b6cc:	e000      	b.n	800b6d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	22ff      	movs	r2, #255	@ 0xff
 800b6d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6d8:	f001 fe60 	bl	800d39c <vPortExitCritical>
}
 800b6dc:	bf00      	nop
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6ec:	f001 fe24 	bl	800d338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	e001      	b.n	800b702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b702:	f001 fe4b 	bl	800d39c <vPortExitCritical>

	return xReturn;
 800b706:	68fb      	ldr	r3, [r7, #12]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b718:	f001 fe0e 	bl	800d338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b724:	429a      	cmp	r2, r3
 800b726:	d102      	bne.n	800b72e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	e001      	b.n	800b732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b732:	f001 fe33 	bl	800d39c <vPortExitCritical>

	return xReturn;
 800b736:	68fb      	ldr	r3, [r7, #12]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b74a:	2300      	movs	r3, #0
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	e014      	b.n	800b77a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b750:	4a0f      	ldr	r2, [pc, #60]	@ (800b790 <vQueueAddToRegistry+0x50>)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10b      	bne.n	800b774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b75c:	490c      	ldr	r1, [pc, #48]	@ (800b790 <vQueueAddToRegistry+0x50>)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b766:	4a0a      	ldr	r2, [pc, #40]	@ (800b790 <vQueueAddToRegistry+0x50>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	4413      	add	r3, r2
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b772:	e006      	b.n	800b782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b07      	cmp	r3, #7
 800b77e:	d9e7      	bls.n	800b750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	200015b0 	.word	0x200015b0

0800b794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7a4:	f001 fdc8 	bl	800d338 <vPortEnterCritical>
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7ae:	b25b      	sxtb	r3, r3
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7b4:	d103      	bne.n	800b7be <vQueueWaitForMessageRestricted+0x2a>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7ca:	d103      	bne.n	800b7d4 <vQueueWaitForMessageRestricted+0x40>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7d4:	f001 fde2 	bl	800d39c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d106      	bne.n	800b7ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	3324      	adds	r3, #36	@ 0x24
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 fd67 	bl	800c2bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7ee:	6978      	ldr	r0, [r7, #20]
 800b7f0:	f7ff ff26 	bl	800b640 <prvUnlockQueue>
	}
 800b7f4:	bf00      	nop
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08e      	sub	sp, #56	@ 0x38
 800b800:	af04      	add	r7, sp, #16
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	623b      	str	r3, [r7, #32]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10b      	bne.n	800b846 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	61fb      	str	r3, [r7, #28]
}
 800b840:	bf00      	nop
 800b842:	bf00      	nop
 800b844:	e7fd      	b.n	800b842 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b846:	23a8      	movs	r3, #168	@ 0xa8
 800b848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b84e:	d00b      	beq.n	800b868 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	61bb      	str	r3, [r7, #24]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b868:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01e      	beq.n	800b8ae <xTaskCreateStatic+0xb2>
 800b870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b872:	2b00      	cmp	r3, #0
 800b874:	d01b      	beq.n	800b8ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b87e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	2202      	movs	r2, #2
 800b884:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b888:	2300      	movs	r3, #0
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88e:	9302      	str	r3, [sp, #8]
 800b890:	f107 0314 	add.w	r3, r7, #20
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 f851 	bl	800b948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8a8:	f000 f8f6 	bl	800ba98 <prvAddNewTaskToReadyList>
 800b8ac:	e001      	b.n	800b8b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8b2:	697b      	ldr	r3, [r7, #20]
	}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3728      	adds	r7, #40	@ 0x28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08c      	sub	sp, #48	@ 0x30
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8cc:	88fb      	ldrh	r3, [r7, #6]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 fe53 	bl	800d57c <pvPortMalloc>
 800b8d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00e      	beq.n	800b8fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8de:	20a8      	movs	r0, #168	@ 0xa8
 800b8e0:	f001 fe4c 	bl	800d57c <pvPortMalloc>
 800b8e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8f2:	e005      	b.n	800b900 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8f4:	6978      	ldr	r0, [r7, #20]
 800b8f6:	f001 ff0f 	bl	800d718 <vPortFree>
 800b8fa:	e001      	b.n	800b900 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d017      	beq.n	800b936 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b90e:	88fa      	ldrh	r2, [r7, #6]
 800b910:	2300      	movs	r3, #0
 800b912:	9303      	str	r3, [sp, #12]
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	9302      	str	r3, [sp, #8]
 800b918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f80f 	bl	800b948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b92a:	69f8      	ldr	r0, [r7, #28]
 800b92c:	f000 f8b4 	bl	800ba98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b930:	2301      	movs	r3, #1
 800b932:	61bb      	str	r3, [r7, #24]
 800b934:	e002      	b.n	800b93c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b93a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b93c:	69bb      	ldr	r3, [r7, #24]
	}
 800b93e:	4618      	mov	r0, r3
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b958:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	461a      	mov	r2, r3
 800b960:	21a5      	movs	r1, #165	@ 0xa5
 800b962:	f002 f819 	bl	800d998 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b970:	3b01      	subs	r3, #1
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	f023 0307 	bic.w	r3, r3, #7
 800b97e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00b      	beq.n	800b9a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	617b      	str	r3, [r7, #20]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01f      	beq.n	800b9e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e012      	b.n	800b9d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	7819      	ldrb	r1, [r3, #0]
 800b9b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3334      	adds	r3, #52	@ 0x34
 800b9be:	460a      	mov	r2, r1
 800b9c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d006      	beq.n	800b9dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	61fb      	str	r3, [r7, #28]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d9e9      	bls.n	800b9ae <prvInitialiseNewTask+0x66>
 800b9da:	e000      	b.n	800b9de <prvInitialiseNewTask+0x96>
			{
				break;
 800b9dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9e6:	e003      	b.n	800b9f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f2:	2b37      	cmp	r3, #55	@ 0x37
 800b9f4:	d901      	bls.n	800b9fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9f6:	2337      	movs	r3, #55	@ 0x37
 800b9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	2200      	movs	r2, #0
 800ba0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff f965 	bl	800ace0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba18:	3318      	adds	r3, #24
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff f960 	bl	800ace0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	3354      	adds	r3, #84	@ 0x54
 800ba4a:	224c      	movs	r2, #76	@ 0x4c
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 ffa2 	bl	800d998 <memset>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	4a0d      	ldr	r2, [pc, #52]	@ (800ba8c <prvInitialiseNewTask+0x144>)
 800ba58:	659a      	str	r2, [r3, #88]	@ 0x58
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba90 <prvInitialiseNewTask+0x148>)
 800ba5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ba60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba62:	4a0c      	ldr	r2, [pc, #48]	@ (800ba94 <prvInitialiseNewTask+0x14c>)
 800ba64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	68f9      	ldr	r1, [r7, #12]
 800ba6a:	69b8      	ldr	r0, [r7, #24]
 800ba6c:	f001 fb36 	bl	800d0dc <pxPortInitialiseStack>
 800ba70:	4602      	mov	r2, r0
 800ba72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba82:	bf00      	nop
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20005844 	.word	0x20005844
 800ba90:	200058ac 	.word	0x200058ac
 800ba94:	20005914 	.word	0x20005914

0800ba98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baa0:	f001 fc4a 	bl	800d338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baa4:	4b2d      	ldr	r3, [pc, #180]	@ (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3301      	adds	r3, #1
 800baaa:	4a2c      	ldr	r2, [pc, #176]	@ (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800baac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baae:	4b2c      	ldr	r3, [pc, #176]	@ (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bab6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800babc:	4b27      	ldr	r3, [pc, #156]	@ (800bb5c <prvAddNewTaskToReadyList+0xc4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d110      	bne.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bac4:	f000 fd28 	bl	800c518 <prvInitialiseTaskLists>
 800bac8:	e00d      	b.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baca:	4b26      	ldr	r3, [pc, #152]	@ (800bb64 <prvAddNewTaskToReadyList+0xcc>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d109      	bne.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bad2:	4b23      	ldr	r3, [pc, #140]	@ (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800badc:	429a      	cmp	r2, r3
 800bade:	d802      	bhi.n	800bae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bae0:	4a1f      	ldr	r2, [pc, #124]	@ (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bae6:	4b20      	ldr	r3, [pc, #128]	@ (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3301      	adds	r3, #1
 800baec:	4a1e      	ldr	r2, [pc, #120]	@ (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800baee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800baf0:	4b1d      	ldr	r3, [pc, #116]	@ (800bb68 <prvAddNewTaskToReadyList+0xd0>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafc:	4b1b      	ldr	r3, [pc, #108]	@ (800bb6c <prvAddNewTaskToReadyList+0xd4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d903      	bls.n	800bb0c <prvAddNewTaskToReadyList+0x74>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb08:	4a18      	ldr	r2, [pc, #96]	@ (800bb6c <prvAddNewTaskToReadyList+0xd4>)
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb10:	4613      	mov	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4a15      	ldr	r2, [pc, #84]	@ (800bb70 <prvAddNewTaskToReadyList+0xd8>)
 800bb1a:	441a      	add	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3304      	adds	r3, #4
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7ff f8e9 	bl	800acfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb28:	f001 fc38 	bl	800d39c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb64 <prvAddNewTaskToReadyList+0xcc>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00e      	beq.n	800bb52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb34:	4b0a      	ldr	r3, [pc, #40]	@ (800bb60 <prvAddNewTaskToReadyList+0xc8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d207      	bcs.n	800bb52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb42:	4b0c      	ldr	r3, [pc, #48]	@ (800bb74 <prvAddNewTaskToReadyList+0xdc>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001ac4 	.word	0x20001ac4
 800bb60:	200015f0 	.word	0x200015f0
 800bb64:	20001ad0 	.word	0x20001ad0
 800bb68:	20001ae0 	.word	0x20001ae0
 800bb6c:	20001acc 	.word	0x20001acc
 800bb70:	200015f4 	.word	0x200015f4
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d018      	beq.n	800bbbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb8a:	4b14      	ldr	r3, [pc, #80]	@ (800bbdc <vTaskDelay+0x64>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <vTaskDelay+0x32>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	60bb      	str	r3, [r7, #8]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbaa:	f000 f88b 	bl	800bcc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbae:	2100      	movs	r1, #0
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fee5 	bl	800c980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbb6:	f000 f893 	bl	800bce0 <xTaskResumeAll>
 800bbba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d107      	bne.n	800bbd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bbc2:	4b07      	ldr	r3, [pc, #28]	@ (800bbe0 <vTaskDelay+0x68>)
 800bbc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbd2:	bf00      	nop
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20001aec 	.word	0x20001aec
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b08a      	sub	sp, #40	@ 0x28
 800bbe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbf2:	463a      	mov	r2, r7
 800bbf4:	1d39      	adds	r1, r7, #4
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff f81c 	bl	800ac38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	9202      	str	r2, [sp, #8]
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	460a      	mov	r2, r1
 800bc12:	4924      	ldr	r1, [pc, #144]	@ (800bca4 <vTaskStartScheduler+0xc0>)
 800bc14:	4824      	ldr	r0, [pc, #144]	@ (800bca8 <vTaskStartScheduler+0xc4>)
 800bc16:	f7ff fdf1 	bl	800b7fc <xTaskCreateStatic>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4a23      	ldr	r2, [pc, #140]	@ (800bcac <vTaskStartScheduler+0xc8>)
 800bc1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc20:	4b22      	ldr	r3, [pc, #136]	@ (800bcac <vTaskStartScheduler+0xc8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	e001      	b.n	800bc32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d102      	bne.n	800bc3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc38:	f000 fef6 	bl	800ca28 <xTimerCreateTimerTask>
 800bc3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d11b      	bne.n	800bc7c <vTaskStartScheduler+0x98>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	613b      	str	r3, [r7, #16]
}
 800bc56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc58:	4b15      	ldr	r3, [pc, #84]	@ (800bcb0 <vTaskStartScheduler+0xcc>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3354      	adds	r3, #84	@ 0x54
 800bc5e:	4a15      	ldr	r2, [pc, #84]	@ (800bcb4 <vTaskStartScheduler+0xd0>)
 800bc60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc62:	4b15      	ldr	r3, [pc, #84]	@ (800bcb8 <vTaskStartScheduler+0xd4>)
 800bc64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc6a:	4b14      	ldr	r3, [pc, #80]	@ (800bcbc <vTaskStartScheduler+0xd8>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc70:	4b13      	ldr	r3, [pc, #76]	@ (800bcc0 <vTaskStartScheduler+0xdc>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc76:	f001 fabb 	bl	800d1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc7a:	e00f      	b.n	800bc9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc82:	d10b      	bne.n	800bc9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	60fb      	str	r3, [r7, #12]
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	e7fd      	b.n	800bc98 <vTaskStartScheduler+0xb4>
}
 800bc9c:	bf00      	nop
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	0800e4f4 	.word	0x0800e4f4
 800bca8:	0800c4e9 	.word	0x0800c4e9
 800bcac:	20001ae8 	.word	0x20001ae8
 800bcb0:	200015f0 	.word	0x200015f0
 800bcb4:	20000088 	.word	0x20000088
 800bcb8:	20001ae4 	.word	0x20001ae4
 800bcbc:	20001ad0 	.word	0x20001ad0
 800bcc0:	20001ac8 	.word	0x20001ac8

0800bcc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bcc8:	4b04      	ldr	r3, [pc, #16]	@ (800bcdc <vTaskSuspendAll+0x18>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	4a03      	ldr	r2, [pc, #12]	@ (800bcdc <vTaskSuspendAll+0x18>)
 800bcd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcd2:	bf00      	nop
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	20001aec 	.word	0x20001aec

0800bce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcee:	4b42      	ldr	r3, [pc, #264]	@ (800bdf8 <xTaskResumeAll+0x118>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <xTaskResumeAll+0x2e>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	603b      	str	r3, [r7, #0]
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	e7fd      	b.n	800bd0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd0e:	f001 fb13 	bl	800d338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd12:	4b39      	ldr	r3, [pc, #228]	@ (800bdf8 <xTaskResumeAll+0x118>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	4a37      	ldr	r2, [pc, #220]	@ (800bdf8 <xTaskResumeAll+0x118>)
 800bd1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd1c:	4b36      	ldr	r3, [pc, #216]	@ (800bdf8 <xTaskResumeAll+0x118>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d162      	bne.n	800bdea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd24:	4b35      	ldr	r3, [pc, #212]	@ (800bdfc <xTaskResumeAll+0x11c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d05e      	beq.n	800bdea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd2c:	e02f      	b.n	800bd8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2e:	4b34      	ldr	r3, [pc, #208]	@ (800be00 <xTaskResumeAll+0x120>)
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	3318      	adds	r3, #24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff f83a 	bl	800adb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff f835 	bl	800adb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd4e:	4b2d      	ldr	r3, [pc, #180]	@ (800be04 <xTaskResumeAll+0x124>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d903      	bls.n	800bd5e <xTaskResumeAll+0x7e>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	4a2a      	ldr	r2, [pc, #168]	@ (800be04 <xTaskResumeAll+0x124>)
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4a27      	ldr	r2, [pc, #156]	@ (800be08 <xTaskResumeAll+0x128>)
 800bd6c:	441a      	add	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3304      	adds	r3, #4
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7fe ffc0 	bl	800acfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd7e:	4b23      	ldr	r3, [pc, #140]	@ (800be0c <xTaskResumeAll+0x12c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d302      	bcc.n	800bd8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bd88:	4b21      	ldr	r3, [pc, #132]	@ (800be10 <xTaskResumeAll+0x130>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd8e:	4b1c      	ldr	r3, [pc, #112]	@ (800be00 <xTaskResumeAll+0x120>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1cb      	bne.n	800bd2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd9c:	f000 fc60 	bl	800c660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bda0:	4b1c      	ldr	r3, [pc, #112]	@ (800be14 <xTaskResumeAll+0x134>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d010      	beq.n	800bdce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdac:	f000 f940 	bl	800c030 <xTaskIncrementTick>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bdb6:	4b16      	ldr	r3, [pc, #88]	@ (800be10 <xTaskResumeAll+0x130>)
 800bdb8:	2201      	movs	r2, #1
 800bdba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1f1      	bne.n	800bdac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bdc8:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <xTaskResumeAll+0x134>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdce:	4b10      	ldr	r3, [pc, #64]	@ (800be10 <xTaskResumeAll+0x130>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdda:	4b0f      	ldr	r3, [pc, #60]	@ (800be18 <xTaskResumeAll+0x138>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdea:	f001 fad7 	bl	800d39c <vPortExitCritical>

	return xAlreadyYielded;
 800bdee:	68bb      	ldr	r3, [r7, #8]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20001aec 	.word	0x20001aec
 800bdfc:	20001ac4 	.word	0x20001ac4
 800be00:	20001a84 	.word	0x20001a84
 800be04:	20001acc 	.word	0x20001acc
 800be08:	200015f4 	.word	0x200015f4
 800be0c:	200015f0 	.word	0x200015f0
 800be10:	20001ad8 	.word	0x20001ad8
 800be14:	20001ad4 	.word	0x20001ad4
 800be18:	e000ed04 	.word	0xe000ed04

0800be1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be22:	4b05      	ldr	r3, [pc, #20]	@ (800be38 <xTaskGetTickCount+0x1c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be28:	687b      	ldr	r3, [r7, #4]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20001ac8 	.word	0x20001ac8

0800be3c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <pcTaskGetName+0x14>
 800be4a:	4b0e      	ldr	r3, [pc, #56]	@ (800be84 <pcTaskGetName+0x48>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	e000      	b.n	800be52 <pcTaskGetName+0x16>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10b      	bne.n	800be72 <pcTaskGetName+0x36>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	60bb      	str	r3, [r7, #8]
}
 800be6c:	bf00      	nop
 800be6e:	bf00      	nop
 800be70:	e7fd      	b.n	800be6e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3334      	adds	r3, #52	@ 0x34
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	200015f0 	.word	0x200015f0

0800be88 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800be88:	b480      	push	{r7}
 800be8a:	b08b      	sub	sp, #44	@ 0x2c
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800be92:	2300      	movs	r3, #0
 800be94:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05b      	beq.n	800bf56 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	605a      	str	r2, [r3, #4]
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	3308      	adds	r3, #8
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d104      	bne.n	800bec2 <prvSearchForNameWithinSingleList+0x3a>
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	605a      	str	r2, [r3, #4]
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	3308      	adds	r3, #8
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d104      	bne.n	800beee <prvSearchForNameWithinSingleList+0x66>
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	605a      	str	r2, [r3, #4]
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800befa:	2300      	movs	r3, #0
 800befc:	623b      	str	r3, [r7, #32]
 800befe:	e01c      	b.n	800bf3a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	4413      	add	r3, r2
 800bf06:	3334      	adds	r3, #52	@ 0x34
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	4413      	add	r3, r2
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	7afa      	ldrb	r2, [r7, #11]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d002      	beq.n	800bf20 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e006      	b.n	800bf2e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	3301      	adds	r3, #1
 800bf38:	623b      	str	r3, [r7, #32]
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	2b0f      	cmp	r3, #15
 800bf3e:	d9df      	bls.n	800bf00 <prvSearchForNameWithinSingleList+0x78>
 800bf40:	e000      	b.n	800bf44 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800bf42:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d104      	bne.n	800bf54 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d1bb      	bne.n	800beca <prvSearchForNameWithinSingleList+0x42>
 800bf52:	e000      	b.n	800bf56 <prvSearchForNameWithinSingleList+0xce>
					break;
 800bf54:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	372c      	adds	r7, #44	@ 0x2c
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800bf6c:	2338      	movs	r3, #56	@ 0x38
 800bf6e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7f4 f92d 	bl	80001d0 <strlen>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b0f      	cmp	r3, #15
 800bf7a:	d90b      	bls.n	800bf94 <xTaskGetHandle+0x30>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	60fb      	str	r3, [r7, #12]
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	e7fd      	b.n	800bf90 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800bf94:	f7ff fe96 	bl	800bcc4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4a1c      	ldr	r2, [pc, #112]	@ (800c01c <xTaskGetHandle+0xb8>)
 800bfaa:	4413      	add	r3, r2
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff ff6a 	bl	800be88 <prvSearchForNameWithinSingleList>
 800bfb4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1ea      	bne.n	800bf98 <xTaskGetHandle+0x34>
 800bfc2:	e000      	b.n	800bfc6 <xTaskGetHandle+0x62>
					break;
 800bfc4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d106      	bne.n	800bfda <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bfcc:	4b14      	ldr	r3, [pc, #80]	@ (800c020 <xTaskGetHandle+0xbc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff ff58 	bl	800be88 <prvSearchForNameWithinSingleList>
 800bfd8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bfe0:	4b10      	ldr	r3, [pc, #64]	@ (800c024 <xTaskGetHandle+0xc0>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff ff4e 	bl	800be88 <prvSearchForNameWithinSingleList>
 800bfec:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bff4:	6879      	ldr	r1, [r7, #4]
 800bff6:	480c      	ldr	r0, [pc, #48]	@ (800c028 <xTaskGetHandle+0xc4>)
 800bff8:	f7ff ff46 	bl	800be88 <prvSearchForNameWithinSingleList>
 800bffc:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d104      	bne.n	800c00e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800c004:	6879      	ldr	r1, [r7, #4]
 800c006:	4809      	ldr	r0, [pc, #36]	@ (800c02c <xTaskGetHandle+0xc8>)
 800c008:	f7ff ff3e 	bl	800be88 <prvSearchForNameWithinSingleList>
 800c00c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800c00e:	f7ff fe67 	bl	800bce0 <xTaskResumeAll>

		return pxTCB;
 800c012:	693b      	ldr	r3, [r7, #16]
	}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	200015f4 	.word	0x200015f4
 800c020:	20001a7c 	.word	0x20001a7c
 800c024:	20001a80 	.word	0x20001a80
 800c028:	20001ab0 	.word	0x20001ab0
 800c02c:	20001a98 	.word	0x20001a98

0800c030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c036:	2300      	movs	r3, #0
 800c038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c03a:	4b4f      	ldr	r3, [pc, #316]	@ (800c178 <xTaskIncrementTick+0x148>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f040 8090 	bne.w	800c164 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c044:	4b4d      	ldr	r3, [pc, #308]	@ (800c17c <xTaskIncrementTick+0x14c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3301      	adds	r3, #1
 800c04a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c04c:	4a4b      	ldr	r2, [pc, #300]	@ (800c17c <xTaskIncrementTick+0x14c>)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d121      	bne.n	800c09c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c058:	4b49      	ldr	r3, [pc, #292]	@ (800c180 <xTaskIncrementTick+0x150>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	603b      	str	r3, [r7, #0]
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	e7fd      	b.n	800c076 <xTaskIncrementTick+0x46>
 800c07a:	4b41      	ldr	r3, [pc, #260]	@ (800c180 <xTaskIncrementTick+0x150>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	4b40      	ldr	r3, [pc, #256]	@ (800c184 <xTaskIncrementTick+0x154>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a3e      	ldr	r2, [pc, #248]	@ (800c180 <xTaskIncrementTick+0x150>)
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	4a3e      	ldr	r2, [pc, #248]	@ (800c184 <xTaskIncrementTick+0x154>)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	4b3e      	ldr	r3, [pc, #248]	@ (800c188 <xTaskIncrementTick+0x158>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a3c      	ldr	r2, [pc, #240]	@ (800c188 <xTaskIncrementTick+0x158>)
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	f000 fae2 	bl	800c660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c09c:	4b3b      	ldr	r3, [pc, #236]	@ (800c18c <xTaskIncrementTick+0x15c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d349      	bcc.n	800c13a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0a6:	4b36      	ldr	r3, [pc, #216]	@ (800c180 <xTaskIncrementTick+0x150>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0b0:	4b36      	ldr	r3, [pc, #216]	@ (800c18c <xTaskIncrementTick+0x15c>)
 800c0b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0b6:	601a      	str	r2, [r3, #0]
					break;
 800c0b8:	e03f      	b.n	800c13a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ba:	4b31      	ldr	r3, [pc, #196]	@ (800c180 <xTaskIncrementTick+0x150>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d203      	bcs.n	800c0da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0d2:	4a2e      	ldr	r2, [pc, #184]	@ (800c18c <xTaskIncrementTick+0x15c>)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0d8:	e02f      	b.n	800c13a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fe68 	bl	800adb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	3318      	adds	r3, #24
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe fe5f 	bl	800adb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	4b25      	ldr	r3, [pc, #148]	@ (800c190 <xTaskIncrementTick+0x160>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d903      	bls.n	800c10a <xTaskIncrementTick+0xda>
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c106:	4a22      	ldr	r2, [pc, #136]	@ (800c190 <xTaskIncrementTick+0x160>)
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4a1f      	ldr	r2, [pc, #124]	@ (800c194 <xTaskIncrementTick+0x164>)
 800c118:	441a      	add	r2, r3
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	3304      	adds	r3, #4
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f7fe fdea 	bl	800acfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12a:	4b1b      	ldr	r3, [pc, #108]	@ (800c198 <xTaskIncrementTick+0x168>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c130:	429a      	cmp	r2, r3
 800c132:	d3b8      	bcc.n	800c0a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c138:	e7b5      	b.n	800c0a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c13a:	4b17      	ldr	r3, [pc, #92]	@ (800c198 <xTaskIncrementTick+0x168>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c140:	4914      	ldr	r1, [pc, #80]	@ (800c194 <xTaskIncrementTick+0x164>)
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	440b      	add	r3, r1
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d901      	bls.n	800c156 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c152:	2301      	movs	r3, #1
 800c154:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c156:	4b11      	ldr	r3, [pc, #68]	@ (800c19c <xTaskIncrementTick+0x16c>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d007      	beq.n	800c16e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c15e:	2301      	movs	r3, #1
 800c160:	617b      	str	r3, [r7, #20]
 800c162:	e004      	b.n	800c16e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c164:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a0 <xTaskIncrementTick+0x170>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	3301      	adds	r3, #1
 800c16a:	4a0d      	ldr	r2, [pc, #52]	@ (800c1a0 <xTaskIncrementTick+0x170>)
 800c16c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c16e:	697b      	ldr	r3, [r7, #20]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20001aec 	.word	0x20001aec
 800c17c:	20001ac8 	.word	0x20001ac8
 800c180:	20001a7c 	.word	0x20001a7c
 800c184:	20001a80 	.word	0x20001a80
 800c188:	20001adc 	.word	0x20001adc
 800c18c:	20001ae4 	.word	0x20001ae4
 800c190:	20001acc 	.word	0x20001acc
 800c194:	200015f4 	.word	0x200015f4
 800c198:	200015f0 	.word	0x200015f0
 800c19c:	20001ad8 	.word	0x20001ad8
 800c1a0:	20001ad4 	.word	0x20001ad4

0800c1a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c258 <vTaskSwitchContext+0xb4>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c25c <vTaskSwitchContext+0xb8>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1b8:	e047      	b.n	800c24a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c1ba:	4b28      	ldr	r3, [pc, #160]	@ (800c25c <vTaskSwitchContext+0xb8>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c0:	4b27      	ldr	r3, [pc, #156]	@ (800c260 <vTaskSwitchContext+0xbc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	e011      	b.n	800c1ec <vTaskSwitchContext+0x48>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10b      	bne.n	800c1e6 <vTaskSwitchContext+0x42>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	607b      	str	r3, [r7, #4]
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	e7fd      	b.n	800c1e2 <vTaskSwitchContext+0x3e>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	491d      	ldr	r1, [pc, #116]	@ (800c264 <vTaskSwitchContext+0xc0>)
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	440b      	add	r3, r1
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0e3      	beq.n	800c1c8 <vTaskSwitchContext+0x24>
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a16      	ldr	r2, [pc, #88]	@ (800c264 <vTaskSwitchContext+0xc0>)
 800c20c:	4413      	add	r3, r2
 800c20e:	60bb      	str	r3, [r7, #8]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	3308      	adds	r3, #8
 800c222:	429a      	cmp	r2, r3
 800c224:	d104      	bne.n	800c230 <vTaskSwitchContext+0x8c>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	605a      	str	r2, [r3, #4]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4a0c      	ldr	r2, [pc, #48]	@ (800c268 <vTaskSwitchContext+0xc4>)
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	4a09      	ldr	r2, [pc, #36]	@ (800c260 <vTaskSwitchContext+0xbc>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c240:	4b09      	ldr	r3, [pc, #36]	@ (800c268 <vTaskSwitchContext+0xc4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3354      	adds	r3, #84	@ 0x54
 800c246:	4a09      	ldr	r2, [pc, #36]	@ (800c26c <vTaskSwitchContext+0xc8>)
 800c248:	6013      	str	r3, [r2, #0]
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	20001aec 	.word	0x20001aec
 800c25c:	20001ad8 	.word	0x20001ad8
 800c260:	20001acc 	.word	0x20001acc
 800c264:	200015f4 	.word	0x200015f4
 800c268:	200015f0 	.word	0x200015f0
 800c26c:	20000088 	.word	0x20000088

0800c270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10b      	bne.n	800c298 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	60fb      	str	r3, [r7, #12]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <vTaskPlaceOnEventList+0x48>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3318      	adds	r3, #24
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fe fd4e 	bl	800ad42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	6838      	ldr	r0, [r7, #0]
 800c2aa:	f000 fb69 	bl	800c980 <prvAddCurrentTaskToDelayedList>
}
 800c2ae:	bf00      	nop
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	200015f0 	.word	0x200015f0

0800c2bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10b      	bne.n	800c2e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	617b      	str	r3, [r7, #20]
}
 800c2e0:	bf00      	nop
 800c2e2:	bf00      	nop
 800c2e4:	e7fd      	b.n	800c2e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c310 <vTaskPlaceOnEventListRestricted+0x54>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3318      	adds	r3, #24
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f7fe fd03 	bl	800acfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c2fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	68b8      	ldr	r0, [r7, #8]
 800c304:	f000 fb3c 	bl	800c980 <prvAddCurrentTaskToDelayedList>
	}
 800c308:	bf00      	nop
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	200015f0 	.word	0x200015f0

0800c314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	60fb      	str	r3, [r7, #12]
}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	e7fd      	b.n	800c33e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	3318      	adds	r3, #24
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe fd34 	bl	800adb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c34c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3c4 <xTaskRemoveFromEventList+0xb0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11d      	bne.n	800c390 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3304      	adds	r3, #4
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe fd2b 	bl	800adb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c362:	4b19      	ldr	r3, [pc, #100]	@ (800c3c8 <xTaskRemoveFromEventList+0xb4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	429a      	cmp	r2, r3
 800c368:	d903      	bls.n	800c372 <xTaskRemoveFromEventList+0x5e>
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36e:	4a16      	ldr	r2, [pc, #88]	@ (800c3c8 <xTaskRemoveFromEventList+0xb4>)
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4a13      	ldr	r2, [pc, #76]	@ (800c3cc <xTaskRemoveFromEventList+0xb8>)
 800c380:	441a      	add	r2, r3
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	3304      	adds	r3, #4
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f7fe fcb6 	bl	800acfa <vListInsertEnd>
 800c38e:	e005      	b.n	800c39c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	3318      	adds	r3, #24
 800c394:	4619      	mov	r1, r3
 800c396:	480e      	ldr	r0, [pc, #56]	@ (800c3d0 <xTaskRemoveFromEventList+0xbc>)
 800c398:	f7fe fcaf 	bl	800acfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d4 <xTaskRemoveFromEventList+0xc0>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d905      	bls.n	800c3b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d8 <xTaskRemoveFromEventList+0xc4>)
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	e001      	b.n	800c3ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3ba:	697b      	ldr	r3, [r7, #20]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20001aec 	.word	0x20001aec
 800c3c8:	20001acc 	.word	0x20001acc
 800c3cc:	200015f4 	.word	0x200015f4
 800c3d0:	20001a84 	.word	0x20001a84
 800c3d4:	200015f0 	.word	0x200015f0
 800c3d8:	20001ad8 	.word	0x20001ad8

0800c3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3e4:	4b06      	ldr	r3, [pc, #24]	@ (800c400 <vTaskInternalSetTimeOutState+0x24>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3ec:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <vTaskInternalSetTimeOutState+0x28>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	605a      	str	r2, [r3, #4]
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	20001adc 	.word	0x20001adc
 800c404:	20001ac8 	.word	0x20001ac8

0800c408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10b      	bne.n	800c430 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	613b      	str	r3, [r7, #16]
}
 800c42a:	bf00      	nop
 800c42c:	bf00      	nop
 800c42e:	e7fd      	b.n	800c42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10b      	bne.n	800c44e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60fb      	str	r3, [r7, #12]
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	e7fd      	b.n	800c44a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c44e:	f000 ff73 	bl	800d338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c452:	4b1d      	ldr	r3, [pc, #116]	@ (800c4c8 <xTaskCheckForTimeOut+0xc0>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c46a:	d102      	bne.n	800c472 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	e023      	b.n	800c4ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b15      	ldr	r3, [pc, #84]	@ (800c4cc <xTaskCheckForTimeOut+0xc4>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d007      	beq.n	800c48e <xTaskCheckForTimeOut+0x86>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	429a      	cmp	r2, r3
 800c486:	d302      	bcc.n	800c48e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c488:	2301      	movs	r3, #1
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	e015      	b.n	800c4ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	429a      	cmp	r2, r3
 800c496:	d20b      	bcs.n	800c4b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff ff99 	bl	800c3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61fb      	str	r3, [r7, #28]
 800c4ae:	e004      	b.n	800c4ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4ba:	f000 ff6f 	bl	800d39c <vPortExitCritical>

	return xReturn;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20001ac8 	.word	0x20001ac8
 800c4cc:	20001adc 	.word	0x20001adc

0800c4d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4d4:	4b03      	ldr	r3, [pc, #12]	@ (800c4e4 <vTaskMissedYield+0x14>)
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]
}
 800c4da:	bf00      	nop
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	20001ad8 	.word	0x20001ad8

0800c4e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4f0:	f000 f852 	bl	800c598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4f4:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <prvIdleTask+0x28>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d9f9      	bls.n	800c4f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4fc:	4b05      	ldr	r3, [pc, #20]	@ (800c514 <prvIdleTask+0x2c>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c50c:	e7f0      	b.n	800c4f0 <prvIdleTask+0x8>
 800c50e:	bf00      	nop
 800c510:	200015f4 	.word	0x200015f4
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	e00c      	b.n	800c53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4613      	mov	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4a12      	ldr	r2, [pc, #72]	@ (800c578 <prvInitialiseTaskLists+0x60>)
 800c530:	4413      	add	r3, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fbb4 	bl	800aca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3301      	adds	r3, #1
 800c53c:	607b      	str	r3, [r7, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b37      	cmp	r3, #55	@ 0x37
 800c542:	d9ef      	bls.n	800c524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c544:	480d      	ldr	r0, [pc, #52]	@ (800c57c <prvInitialiseTaskLists+0x64>)
 800c546:	f7fe fbab 	bl	800aca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c54a:	480d      	ldr	r0, [pc, #52]	@ (800c580 <prvInitialiseTaskLists+0x68>)
 800c54c:	f7fe fba8 	bl	800aca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c550:	480c      	ldr	r0, [pc, #48]	@ (800c584 <prvInitialiseTaskLists+0x6c>)
 800c552:	f7fe fba5 	bl	800aca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c556:	480c      	ldr	r0, [pc, #48]	@ (800c588 <prvInitialiseTaskLists+0x70>)
 800c558:	f7fe fba2 	bl	800aca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c55c:	480b      	ldr	r0, [pc, #44]	@ (800c58c <prvInitialiseTaskLists+0x74>)
 800c55e:	f7fe fb9f 	bl	800aca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c562:	4b0b      	ldr	r3, [pc, #44]	@ (800c590 <prvInitialiseTaskLists+0x78>)
 800c564:	4a05      	ldr	r2, [pc, #20]	@ (800c57c <prvInitialiseTaskLists+0x64>)
 800c566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c568:	4b0a      	ldr	r3, [pc, #40]	@ (800c594 <prvInitialiseTaskLists+0x7c>)
 800c56a:	4a05      	ldr	r2, [pc, #20]	@ (800c580 <prvInitialiseTaskLists+0x68>)
 800c56c:	601a      	str	r2, [r3, #0]
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	200015f4 	.word	0x200015f4
 800c57c:	20001a54 	.word	0x20001a54
 800c580:	20001a68 	.word	0x20001a68
 800c584:	20001a84 	.word	0x20001a84
 800c588:	20001a98 	.word	0x20001a98
 800c58c:	20001ab0 	.word	0x20001ab0
 800c590:	20001a7c 	.word	0x20001a7c
 800c594:	20001a80 	.word	0x20001a80

0800c598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c59e:	e019      	b.n	800c5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c5a0:	f000 feca 	bl	800d338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5a4:	4b10      	ldr	r3, [pc, #64]	@ (800c5e8 <prvCheckTasksWaitingTermination+0x50>)
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fbff 	bl	800adb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ec <prvCheckTasksWaitingTermination+0x54>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c5ec <prvCheckTasksWaitingTermination+0x54>)
 800c5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5f0 <prvCheckTasksWaitingTermination+0x58>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c5f0 <prvCheckTasksWaitingTermination+0x58>)
 800c5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5ca:	f000 fee7 	bl	800d39c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f810 	bl	800c5f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5d4:	4b06      	ldr	r3, [pc, #24]	@ (800c5f0 <prvCheckTasksWaitingTermination+0x58>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e1      	bne.n	800c5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20001a98 	.word	0x20001a98
 800c5ec:	20001ac4 	.word	0x20001ac4
 800c5f0:	20001aac 	.word	0x20001aac

0800c5f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	3354      	adds	r3, #84	@ 0x54
 800c600:	4618      	mov	r0, r3
 800c602:	f001 f9d1 	bl	800d9a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d108      	bne.n	800c622 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c614:	4618      	mov	r0, r3
 800c616:	f001 f87f 	bl	800d718 <vPortFree>
				vPortFree( pxTCB );
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f001 f87c 	bl	800d718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c620:	e019      	b.n	800c656 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d103      	bne.n	800c634 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f001 f873 	bl	800d718 <vPortFree>
	}
 800c632:	e010      	b.n	800c656 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d00b      	beq.n	800c656 <prvDeleteTCB+0x62>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	60fb      	str	r3, [r7, #12]
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	e7fd      	b.n	800c652 <prvDeleteTCB+0x5e>
	}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c666:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <prvResetNextTaskUnblockTime+0x38>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c670:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <prvResetNextTaskUnblockTime+0x3c>)
 800c672:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c678:	e008      	b.n	800c68c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67a:	4b07      	ldr	r3, [pc, #28]	@ (800c698 <prvResetNextTaskUnblockTime+0x38>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	4a04      	ldr	r2, [pc, #16]	@ (800c69c <prvResetNextTaskUnblockTime+0x3c>)
 800c68a:	6013      	str	r3, [r2, #0]
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	20001a7c 	.word	0x20001a7c
 800c69c:	20001ae4 	.word	0x20001ae4

0800c6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6d4 <xTaskGetSchedulerState+0x34>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	607b      	str	r3, [r7, #4]
 800c6b2:	e008      	b.n	800c6c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6b4:	4b08      	ldr	r3, [pc, #32]	@ (800c6d8 <xTaskGetSchedulerState+0x38>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	607b      	str	r3, [r7, #4]
 800c6c0:	e001      	b.n	800c6c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6c6:	687b      	ldr	r3, [r7, #4]
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	20001ad0 	.word	0x20001ad0
 800c6d8:	20001aec 	.word	0x20001aec

0800c6dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d058      	beq.n	800c7a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6f2:	4b2f      	ldr	r3, [pc, #188]	@ (800c7b0 <xTaskPriorityDisinherit+0xd4>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d00b      	beq.n	800c714 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	60fb      	str	r3, [r7, #12]
}
 800c70e:	bf00      	nop
 800c710:	bf00      	nop
 800c712:	e7fd      	b.n	800c710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10b      	bne.n	800c734 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	60bb      	str	r3, [r7, #8]
}
 800c72e:	bf00      	nop
 800c730:	bf00      	nop
 800c732:	e7fd      	b.n	800c730 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c738:	1e5a      	subs	r2, r3, #1
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c746:	429a      	cmp	r2, r3
 800c748:	d02c      	beq.n	800c7a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d128      	bne.n	800c7a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe fb2c 	bl	800adb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c768:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c774:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <xTaskPriorityDisinherit+0xd8>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d903      	bls.n	800c784 <xTaskPriorityDisinherit+0xa8>
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c780:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b4 <xTaskPriorityDisinherit+0xd8>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4a09      	ldr	r2, [pc, #36]	@ (800c7b8 <xTaskPriorityDisinherit+0xdc>)
 800c792:	441a      	add	r2, r3
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	3304      	adds	r3, #4
 800c798:	4619      	mov	r1, r3
 800c79a:	4610      	mov	r0, r2
 800c79c:	f7fe faad 	bl	800acfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7a4:	697b      	ldr	r3, [r7, #20]
	}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	200015f0 	.word	0x200015f0
 800c7b4:	20001acc 	.word	0x20001acc
 800c7b8:	200015f4 	.word	0x200015f4

0800c7bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c7c6:	f000 fdb7 	bl	800d338 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c7ca:	4b20      	ldr	r3, [pc, #128]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d113      	bne.n	800c7fe <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f000 f8c9 	bl	800c980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c7ee:	4b18      	ldr	r3, [pc, #96]	@ (800c850 <ulTaskNotifyTake+0x94>)
 800c7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c7fe:	f000 fdcd 	bl	800d39c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c802:	f000 fd99 	bl	800d338 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c806:	4b11      	ldr	r3, [pc, #68]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c80e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00e      	beq.n	800c834 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d005      	beq.n	800c828 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c81c:	4b0b      	ldr	r3, [pc, #44]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2200      	movs	r2, #0
 800c822:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c826:	e005      	b.n	800c834 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c828:	4b08      	ldr	r3, [pc, #32]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	3a01      	subs	r2, #1
 800c830:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c834:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <ulTaskNotifyTake+0x90>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c83e:	f000 fdad 	bl	800d39c <vPortExitCritical>

		return ulReturn;
 800c842:	68fb      	ldr	r3, [r7, #12]
	}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	200015f0 	.word	0x200015f0
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08a      	sub	sp, #40	@ 0x28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	61bb      	str	r3, [r7, #24]
}
 800c876:	bf00      	nop
 800c878:	bf00      	nop
 800c87a:	e7fd      	b.n	800c878 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c87c:	f000 fe3c 	bl	800d4f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c884:	f3ef 8211 	mrs	r2, BASEPRI
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	617a      	str	r2, [r7, #20]
 800c89a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c89c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c89e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c8a6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c8be:	7ffb      	ldrb	r3, [r7, #31]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d147      	bne.n	800c954 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00b      	beq.n	800c8e4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	60fb      	str	r3, [r7, #12]
}
 800c8de:	bf00      	nop
 800c8e0:	bf00      	nop
 800c8e2:	e7fd      	b.n	800c8e0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8e4:	4b20      	ldr	r3, [pc, #128]	@ (800c968 <vTaskNotifyGiveFromISR+0x114>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11d      	bne.n	800c928 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fe fa5f 	bl	800adb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c96c <vTaskNotifyGiveFromISR+0x118>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d903      	bls.n	800c90a <vTaskNotifyGiveFromISR+0xb6>
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	4a19      	ldr	r2, [pc, #100]	@ (800c96c <vTaskNotifyGiveFromISR+0x118>)
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c90e:	4613      	mov	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4a16      	ldr	r2, [pc, #88]	@ (800c970 <vTaskNotifyGiveFromISR+0x11c>)
 800c918:	441a      	add	r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	3304      	adds	r3, #4
 800c91e:	4619      	mov	r1, r3
 800c920:	4610      	mov	r0, r2
 800c922:	f7fe f9ea 	bl	800acfa <vListInsertEnd>
 800c926:	e005      	b.n	800c934 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	3318      	adds	r3, #24
 800c92c:	4619      	mov	r1, r3
 800c92e:	4811      	ldr	r0, [pc, #68]	@ (800c974 <vTaskNotifyGiveFromISR+0x120>)
 800c930:	f7fe f9e3 	bl	800acfa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c938:	4b0f      	ldr	r3, [pc, #60]	@ (800c978 <vTaskNotifyGiveFromISR+0x124>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93e:	429a      	cmp	r2, r3
 800c940:	d908      	bls.n	800c954 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2201      	movs	r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c94e:	4b0b      	ldr	r3, [pc, #44]	@ (800c97c <vTaskNotifyGiveFromISR+0x128>)
 800c950:	2201      	movs	r2, #1
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	f383 8811 	msr	BASEPRI, r3
}
 800c95e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c960:	bf00      	nop
 800c962:	3728      	adds	r7, #40	@ 0x28
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20001aec 	.word	0x20001aec
 800c96c:	20001acc 	.word	0x20001acc
 800c970:	200015f4 	.word	0x200015f4
 800c974:	20001a84 	.word	0x20001a84
 800c978:	200015f0 	.word	0x200015f0
 800c97c:	20001ad8 	.word	0x20001ad8

0800c980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c98a:	4b21      	ldr	r3, [pc, #132]	@ (800ca10 <prvAddCurrentTaskToDelayedList+0x90>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c990:	4b20      	ldr	r3, [pc, #128]	@ (800ca14 <prvAddCurrentTaskToDelayedList+0x94>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3304      	adds	r3, #4
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fa0c 	bl	800adb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9a2:	d10a      	bne.n	800c9ba <prvAddCurrentTaskToDelayedList+0x3a>
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d007      	beq.n	800c9ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9aa:	4b1a      	ldr	r3, [pc, #104]	@ (800ca14 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4819      	ldr	r0, [pc, #100]	@ (800ca18 <prvAddCurrentTaskToDelayedList+0x98>)
 800c9b4:	f7fe f9a1 	bl	800acfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9b8:	e026      	b.n	800ca08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4413      	add	r3, r2
 800c9c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9c2:	4b14      	ldr	r3, [pc, #80]	@ (800ca14 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d209      	bcs.n	800c9e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ca1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca14 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f7fe f9af 	bl	800ad42 <vListInsert>
}
 800c9e4:	e010      	b.n	800ca08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	4b0a      	ldr	r3, [pc, #40]	@ (800ca14 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7fe f9a5 	bl	800ad42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d202      	bcs.n	800ca08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca02:	4a08      	ldr	r2, [pc, #32]	@ (800ca24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	6013      	str	r3, [r2, #0]
}
 800ca08:	bf00      	nop
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20001ac8 	.word	0x20001ac8
 800ca14:	200015f0 	.word	0x200015f0
 800ca18:	20001ab0 	.word	0x20001ab0
 800ca1c:	20001a80 	.word	0x20001a80
 800ca20:	20001a7c 	.word	0x20001a7c
 800ca24:	20001ae4 	.word	0x20001ae4

0800ca28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	@ 0x28
 800ca2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca32:	f000 fb13 	bl	800d05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca36:	4b1d      	ldr	r3, [pc, #116]	@ (800caac <xTimerCreateTimerTask+0x84>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d021      	beq.n	800ca82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca46:	1d3a      	adds	r2, r7, #4
 800ca48:	f107 0108 	add.w	r1, r7, #8
 800ca4c:	f107 030c 	add.w	r3, r7, #12
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe f90b 	bl	800ac6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca56:	6879      	ldr	r1, [r7, #4]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	9202      	str	r2, [sp, #8]
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	2302      	movs	r3, #2
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	460a      	mov	r2, r1
 800ca68:	4911      	ldr	r1, [pc, #68]	@ (800cab0 <xTimerCreateTimerTask+0x88>)
 800ca6a:	4812      	ldr	r0, [pc, #72]	@ (800cab4 <xTimerCreateTimerTask+0x8c>)
 800ca6c:	f7fe fec6 	bl	800b7fc <xTaskCreateStatic>
 800ca70:	4603      	mov	r3, r0
 800ca72:	4a11      	ldr	r2, [pc, #68]	@ (800cab8 <xTimerCreateTimerTask+0x90>)
 800ca74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca76:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <xTimerCreateTimerTask+0x90>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10b      	bne.n	800caa0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	613b      	str	r3, [r7, #16]
}
 800ca9a:	bf00      	nop
 800ca9c:	bf00      	nop
 800ca9e:	e7fd      	b.n	800ca9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800caa0:	697b      	ldr	r3, [r7, #20]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001b20 	.word	0x20001b20
 800cab0:	0800e4fc 	.word	0x0800e4fc
 800cab4:	0800cbf5 	.word	0x0800cbf5
 800cab8:	20001b24 	.word	0x20001b24

0800cabc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	@ 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800caca:	2300      	movs	r3, #0
 800cacc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10b      	bne.n	800caec <xTimerGenericCommand+0x30>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	623b      	str	r3, [r7, #32]
}
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	e7fd      	b.n	800cae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800caec:	4b19      	ldr	r3, [pc, #100]	@ (800cb54 <xTimerGenericCommand+0x98>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d02a      	beq.n	800cb4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	dc18      	bgt.n	800cb38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb06:	f7ff fdcb 	bl	800c6a0 <xTaskGetSchedulerState>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d109      	bne.n	800cb24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb10:	4b10      	ldr	r3, [pc, #64]	@ (800cb54 <xTimerGenericCommand+0x98>)
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	f107 0110 	add.w	r1, r7, #16
 800cb18:	2300      	movs	r3, #0
 800cb1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb1c:	f7fe fa7e 	bl	800b01c <xQueueGenericSend>
 800cb20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb22:	e012      	b.n	800cb4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb24:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <xTimerGenericCommand+0x98>)
 800cb26:	6818      	ldr	r0, [r3, #0]
 800cb28:	f107 0110 	add.w	r1, r7, #16
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f7fe fa74 	bl	800b01c <xQueueGenericSend>
 800cb34:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb36:	e008      	b.n	800cb4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb38:	4b06      	ldr	r3, [pc, #24]	@ (800cb54 <xTimerGenericCommand+0x98>)
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	f107 0110 	add.w	r1, r7, #16
 800cb40:	2300      	movs	r3, #0
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	f7fe fb6c 	bl	800b220 <xQueueGenericSendFromISR>
 800cb48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3728      	adds	r7, #40	@ 0x28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	20001b20 	.word	0x20001b20

0800cb58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b088      	sub	sp, #32
 800cb5c:	af02      	add	r7, sp, #8
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb62:	4b23      	ldr	r3, [pc, #140]	@ (800cbf0 <prvProcessExpiredTimer+0x98>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fe f91f 	bl	800adb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d023      	beq.n	800cbcc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	699a      	ldr	r2, [r3, #24]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	18d1      	adds	r1, r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	6978      	ldr	r0, [r7, #20]
 800cb92:	f000 f8d5 	bl	800cd40 <prvInsertTimerInActiveList>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d020      	beq.n	800cbde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	2300      	movs	r3, #0
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	2100      	movs	r1, #0
 800cba6:	6978      	ldr	r0, [r7, #20]
 800cba8:	f7ff ff88 	bl	800cabc <xTimerGenericCommand>
 800cbac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d114      	bne.n	800cbde <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	60fb      	str	r3, [r7, #12]
}
 800cbc6:	bf00      	nop
 800cbc8:	bf00      	nop
 800cbca:	e7fd      	b.n	800cbc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbd2:	f023 0301 	bic.w	r3, r3, #1
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	6978      	ldr	r0, [r7, #20]
 800cbe4:	4798      	blx	r3
}
 800cbe6:	bf00      	nop
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20001b18 	.word	0x20001b18

0800cbf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbfc:	f107 0308 	add.w	r3, r7, #8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 f859 	bl	800ccb8 <prvGetNextExpireTime>
 800cc06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f805 	bl	800cc1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc12:	f000 f8d7 	bl	800cdc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc16:	bf00      	nop
 800cc18:	e7f0      	b.n	800cbfc <prvTimerTask+0x8>
	...

0800cc1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc26:	f7ff f84d 	bl	800bcc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc2a:	f107 0308 	add.w	r3, r7, #8
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 f866 	bl	800cd00 <prvSampleTimeNow>
 800cc34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d130      	bne.n	800cc9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10a      	bne.n	800cc58 <prvProcessTimerOrBlockTask+0x3c>
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d806      	bhi.n	800cc58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc4a:	f7ff f849 	bl	800bce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ff81 	bl	800cb58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc56:	e024      	b.n	800cca2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d008      	beq.n	800cc70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc5e:	4b13      	ldr	r3, [pc, #76]	@ (800ccac <prvProcessTimerOrBlockTask+0x90>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <prvProcessTimerOrBlockTask+0x50>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <prvProcessTimerOrBlockTask+0x52>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc70:	4b0f      	ldr	r3, [pc, #60]	@ (800ccb0 <prvProcessTimerOrBlockTask+0x94>)
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	f7fe fd89 	bl	800b794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc82:	f7ff f82d 	bl	800bce0 <xTaskResumeAll>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10a      	bne.n	800cca2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc8c:	4b09      	ldr	r3, [pc, #36]	@ (800ccb4 <prvProcessTimerOrBlockTask+0x98>)
 800cc8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	f3bf 8f6f 	isb	sy
}
 800cc9c:	e001      	b.n	800cca2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc9e:	f7ff f81f 	bl	800bce0 <xTaskResumeAll>
}
 800cca2:	bf00      	nop
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001b1c 	.word	0x20001b1c
 800ccb0:	20001b20 	.word	0x20001b20
 800ccb4:	e000ed04 	.word	0xe000ed04

0800ccb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	@ (800ccfc <prvGetNextExpireTime+0x44>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <prvGetNextExpireTime+0x16>
 800ccca:	2201      	movs	r2, #1
 800cccc:	e000      	b.n	800ccd0 <prvGetNextExpireTime+0x18>
 800ccce:	2200      	movs	r2, #0
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d105      	bne.n	800cce8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccdc:	4b07      	ldr	r3, [pc, #28]	@ (800ccfc <prvGetNextExpireTime+0x44>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	e001      	b.n	800ccec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccec:	68fb      	ldr	r3, [r7, #12]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	20001b18 	.word	0x20001b18

0800cd00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd08:	f7ff f888 	bl	800be1c <xTaskGetTickCount>
 800cd0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd3c <prvSampleTimeNow+0x3c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d205      	bcs.n	800cd24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd18:	f000 f93a 	bl	800cf90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	e002      	b.n	800cd2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd2a:	4a04      	ldr	r2, [pc, #16]	@ (800cd3c <prvSampleTimeNow+0x3c>)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd30:	68fb      	ldr	r3, [r7, #12]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20001b28 	.word	0x20001b28

0800cd40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d812      	bhi.n	800cd8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	1ad2      	subs	r2, r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d302      	bcc.n	800cd7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd74:	2301      	movs	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e01b      	b.n	800cdb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd7a:	4b10      	ldr	r3, [pc, #64]	@ (800cdbc <prvInsertTimerInActiveList+0x7c>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f7fd ffdc 	bl	800ad42 <vListInsert>
 800cd8a:	e012      	b.n	800cdb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d206      	bcs.n	800cda2 <prvInsertTimerInActiveList+0x62>
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d302      	bcc.n	800cda2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	e007      	b.n	800cdb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cda2:	4b07      	ldr	r3, [pc, #28]	@ (800cdc0 <prvInsertTimerInActiveList+0x80>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4610      	mov	r0, r2
 800cdae:	f7fd ffc8 	bl	800ad42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cdb2:	697b      	ldr	r3, [r7, #20]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20001b1c 	.word	0x20001b1c
 800cdc0:	20001b18 	.word	0x20001b18

0800cdc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08e      	sub	sp, #56	@ 0x38
 800cdc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdca:	e0ce      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	da19      	bge.n	800ce06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdd2:	1d3b      	adds	r3, r7, #4
 800cdd4:	3304      	adds	r3, #4
 800cdd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10b      	bne.n	800cdf6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	61fb      	str	r3, [r7, #28]
}
 800cdf0:	bf00      	nop
 800cdf2:	bf00      	nop
 800cdf4:	e7fd      	b.n	800cdf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdfc:	6850      	ldr	r0, [r2, #4]
 800cdfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce00:	6892      	ldr	r2, [r2, #8]
 800ce02:	4611      	mov	r1, r2
 800ce04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f2c0 80ae 	blt.w	800cf6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d004      	beq.n	800ce24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fd ffc8 	bl	800adb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce24:	463b      	mov	r3, r7
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff ff6a 	bl	800cd00 <prvSampleTimeNow>
 800ce2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b09      	cmp	r3, #9
 800ce32:	f200 8097 	bhi.w	800cf64 <prvProcessReceivedCommands+0x1a0>
 800ce36:	a201      	add	r2, pc, #4	@ (adr r2, 800ce3c <prvProcessReceivedCommands+0x78>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce65 	.word	0x0800ce65
 800ce44:	0800ce65 	.word	0x0800ce65
 800ce48:	0800cedb 	.word	0x0800cedb
 800ce4c:	0800ceef 	.word	0x0800ceef
 800ce50:	0800cf3b 	.word	0x0800cf3b
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce65 	.word	0x0800ce65
 800ce5c:	0800cedb 	.word	0x0800cedb
 800ce60:	0800ceef 	.word	0x0800ceef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce6a:	f043 0301 	orr.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	18d1      	adds	r1, r2, r3
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce84:	f7ff ff5c 	bl	800cd40 <prvInsertTimerInActiveList>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d06c      	beq.n	800cf68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d061      	beq.n	800cf68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	441a      	add	r2, r3
 800ceac:	2300      	movs	r3, #0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceb6:	f7ff fe01 	bl	800cabc <xTimerGenericCommand>
 800ceba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d152      	bne.n	800cf68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	61bb      	str	r3, [r7, #24]
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	e7fd      	b.n	800ced6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cedc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cee0:	f023 0301 	bic.w	r3, r3, #1
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceec:	e03d      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cef4:	f043 0301 	orr.w	r3, r3, #1
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10b      	bne.n	800cf26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	617b      	str	r3, [r7, #20]
}
 800cf20:	bf00      	nop
 800cf22:	bf00      	nop
 800cf24:	e7fd      	b.n	800cf22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	18d1      	adds	r1, r2, r3
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf34:	f7ff ff04 	bl	800cd40 <prvInsertTimerInActiveList>
					break;
 800cf38:	e017      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf40:	f003 0302 	and.w	r3, r3, #2
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf4a:	f000 fbe5 	bl	800d718 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf4e:	e00c      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf56:	f023 0301 	bic.w	r3, r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf62:	e002      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf64:	bf00      	nop
 800cf66:	e000      	b.n	800cf6a <prvProcessReceivedCommands+0x1a6>
					break;
 800cf68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf6a:	4b08      	ldr	r3, [pc, #32]	@ (800cf8c <prvProcessReceivedCommands+0x1c8>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	1d39      	adds	r1, r7, #4
 800cf70:	2200      	movs	r2, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe f9f2 	bl	800b35c <xQueueReceive>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f47f af26 	bne.w	800cdcc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	3730      	adds	r7, #48	@ 0x30
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20001b20 	.word	0x20001b20

0800cf90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf96:	e049      	b.n	800d02c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf98:	4b2e      	ldr	r3, [pc, #184]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa2:	4b2c      	ldr	r3, [pc, #176]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd feff 	bl	800adb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d02f      	beq.n	800d02c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d90e      	bls.n	800cffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfea:	4b1a      	ldr	r3, [pc, #104]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3304      	adds	r3, #4
 800cff2:	4619      	mov	r1, r3
 800cff4:	4610      	mov	r0, r2
 800cff6:	f7fd fea4 	bl	800ad42 <vListInsert>
 800cffa:	e017      	b.n	800d02c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cffc:	2300      	movs	r3, #0
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	2300      	movs	r3, #0
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f7ff fd58 	bl	800cabc <xTimerGenericCommand>
 800d00c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10b      	bne.n	800d02c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	603b      	str	r3, [r7, #0]
}
 800d026:	bf00      	nop
 800d028:	bf00      	nop
 800d02a:	e7fd      	b.n	800d028 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d02c:	4b09      	ldr	r3, [pc, #36]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1b0      	bne.n	800cf98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d036:	4b07      	ldr	r3, [pc, #28]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d03c:	4b06      	ldr	r3, [pc, #24]	@ (800d058 <prvSwitchTimerLists+0xc8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a04      	ldr	r2, [pc, #16]	@ (800d054 <prvSwitchTimerLists+0xc4>)
 800d042:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d044:	4a04      	ldr	r2, [pc, #16]	@ (800d058 <prvSwitchTimerLists+0xc8>)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	6013      	str	r3, [r2, #0]
}
 800d04a:	bf00      	nop
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20001b18 	.word	0x20001b18
 800d058:	20001b1c 	.word	0x20001b1c

0800d05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d062:	f000 f969 	bl	800d338 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d066:	4b15      	ldr	r3, [pc, #84]	@ (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d120      	bne.n	800d0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d06e:	4814      	ldr	r0, [pc, #80]	@ (800d0c0 <prvCheckForValidListAndQueue+0x64>)
 800d070:	f7fd fe16 	bl	800aca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d074:	4813      	ldr	r0, [pc, #76]	@ (800d0c4 <prvCheckForValidListAndQueue+0x68>)
 800d076:	f7fd fe13 	bl	800aca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d07a:	4b13      	ldr	r3, [pc, #76]	@ (800d0c8 <prvCheckForValidListAndQueue+0x6c>)
 800d07c:	4a10      	ldr	r2, [pc, #64]	@ (800d0c0 <prvCheckForValidListAndQueue+0x64>)
 800d07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d080:	4b12      	ldr	r3, [pc, #72]	@ (800d0cc <prvCheckForValidListAndQueue+0x70>)
 800d082:	4a10      	ldr	r2, [pc, #64]	@ (800d0c4 <prvCheckForValidListAndQueue+0x68>)
 800d084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d086:	2300      	movs	r3, #0
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	4b11      	ldr	r3, [pc, #68]	@ (800d0d0 <prvCheckForValidListAndQueue+0x74>)
 800d08c:	4a11      	ldr	r2, [pc, #68]	@ (800d0d4 <prvCheckForValidListAndQueue+0x78>)
 800d08e:	2110      	movs	r1, #16
 800d090:	200a      	movs	r0, #10
 800d092:	f7fd ff23 	bl	800aedc <xQueueGenericCreateStatic>
 800d096:	4603      	mov	r3, r0
 800d098:	4a08      	ldr	r2, [pc, #32]	@ (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d09c:	4b07      	ldr	r3, [pc, #28]	@ (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d005      	beq.n	800d0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0a4:	4b05      	ldr	r3, [pc, #20]	@ (800d0bc <prvCheckForValidListAndQueue+0x60>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	490b      	ldr	r1, [pc, #44]	@ (800d0d8 <prvCheckForValidListAndQueue+0x7c>)
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe fb48 	bl	800b740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0b0:	f000 f974 	bl	800d39c <vPortExitCritical>
}
 800d0b4:	bf00      	nop
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20001b20 	.word	0x20001b20
 800d0c0:	20001af0 	.word	0x20001af0
 800d0c4:	20001b04 	.word	0x20001b04
 800d0c8:	20001b18 	.word	0x20001b18
 800d0cc:	20001b1c 	.word	0x20001b1c
 800d0d0:	20001bcc 	.word	0x20001bcc
 800d0d4:	20001b2c 	.word	0x20001b2c
 800d0d8:	0800e504 	.word	0x0800e504

0800d0dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3b04      	subs	r3, #4
 800d0ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3b04      	subs	r3, #4
 800d0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f023 0201 	bic.w	r2, r3, #1
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3b04      	subs	r3, #4
 800d10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d10c:	4a0c      	ldr	r2, [pc, #48]	@ (800d140 <pxPortInitialiseStack+0x64>)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3b14      	subs	r3, #20
 800d116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3b04      	subs	r3, #4
 800d122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f06f 0202 	mvn.w	r2, #2
 800d12a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3b20      	subs	r3, #32
 800d130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d132:	68fb      	ldr	r3, [r7, #12]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	0800d145 	.word	0x0800d145

0800d144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d14e:	4b13      	ldr	r3, [pc, #76]	@ (800d19c <prvTaskExitError+0x58>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d156:	d00b      	beq.n	800d170 <prvTaskExitError+0x2c>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	60fb      	str	r3, [r7, #12]
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	e7fd      	b.n	800d16c <prvTaskExitError+0x28>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	60bb      	str	r3, [r7, #8]
}
 800d182:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d184:	bf00      	nop
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d0fc      	beq.n	800d186 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d18c:	bf00      	nop
 800d18e:	bf00      	nop
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20000084 	.word	0x20000084

0800d1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1a0:	4b07      	ldr	r3, [pc, #28]	@ (800d1c0 <pxCurrentTCBConst2>)
 800d1a2:	6819      	ldr	r1, [r3, #0]
 800d1a4:	6808      	ldr	r0, [r1, #0]
 800d1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1aa:	f380 8809 	msr	PSP, r0
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f04f 0000 	mov.w	r0, #0
 800d1b6:	f380 8811 	msr	BASEPRI, r0
 800d1ba:	4770      	bx	lr
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <pxCurrentTCBConst2>:
 800d1c0:	200015f0 	.word	0x200015f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop

0800d1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1c8:	4808      	ldr	r0, [pc, #32]	@ (800d1ec <prvPortStartFirstTask+0x24>)
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	6800      	ldr	r0, [r0, #0]
 800d1ce:	f380 8808 	msr	MSP, r0
 800d1d2:	f04f 0000 	mov.w	r0, #0
 800d1d6:	f380 8814 	msr	CONTROL, r0
 800d1da:	b662      	cpsie	i
 800d1dc:	b661      	cpsie	f
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	df00      	svc	0
 800d1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ea:	bf00      	nop
 800d1ec:	e000ed08 	.word	0xe000ed08

0800d1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1f6:	4b47      	ldr	r3, [pc, #284]	@ (800d314 <xPortStartScheduler+0x124>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a47      	ldr	r2, [pc, #284]	@ (800d318 <xPortStartScheduler+0x128>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d10b      	bne.n	800d218 <xPortStartScheduler+0x28>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	613b      	str	r3, [r7, #16]
}
 800d212:	bf00      	nop
 800d214:	bf00      	nop
 800d216:	e7fd      	b.n	800d214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d218:	4b3e      	ldr	r3, [pc, #248]	@ (800d314 <xPortStartScheduler+0x124>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a3f      	ldr	r2, [pc, #252]	@ (800d31c <xPortStartScheduler+0x12c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d10b      	bne.n	800d23a <xPortStartScheduler+0x4a>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60fb      	str	r3, [r7, #12]
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop
 800d238:	e7fd      	b.n	800d236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d23a:	4b39      	ldr	r3, [pc, #228]	@ (800d320 <xPortStartScheduler+0x130>)
 800d23c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	22ff      	movs	r2, #255	@ 0xff
 800d24a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	b2db      	uxtb	r3, r3
 800d252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	4b31      	ldr	r3, [pc, #196]	@ (800d324 <xPortStartScheduler+0x134>)
 800d260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d262:	4b31      	ldr	r3, [pc, #196]	@ (800d328 <xPortStartScheduler+0x138>)
 800d264:	2207      	movs	r2, #7
 800d266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d268:	e009      	b.n	800d27e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d26a:	4b2f      	ldr	r3, [pc, #188]	@ (800d328 <xPortStartScheduler+0x138>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3b01      	subs	r3, #1
 800d270:	4a2d      	ldr	r2, [pc, #180]	@ (800d328 <xPortStartScheduler+0x138>)
 800d272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d27e:	78fb      	ldrb	r3, [r7, #3]
 800d280:	b2db      	uxtb	r3, r3
 800d282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d286:	2b80      	cmp	r3, #128	@ 0x80
 800d288:	d0ef      	beq.n	800d26a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d28a:	4b27      	ldr	r3, [pc, #156]	@ (800d328 <xPortStartScheduler+0x138>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f1c3 0307 	rsb	r3, r3, #7
 800d292:	2b04      	cmp	r3, #4
 800d294:	d00b      	beq.n	800d2ae <xPortStartScheduler+0xbe>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	60bb      	str	r3, [r7, #8]
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	e7fd      	b.n	800d2aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d328 <xPortStartScheduler+0x138>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d328 <xPortStartScheduler+0x138>)
 800d2b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d328 <xPortStartScheduler+0x138>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2c0:	4a19      	ldr	r2, [pc, #100]	@ (800d328 <xPortStartScheduler+0x138>)
 800d2c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2cc:	4b17      	ldr	r3, [pc, #92]	@ (800d32c <xPortStartScheduler+0x13c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a16      	ldr	r2, [pc, #88]	@ (800d32c <xPortStartScheduler+0x13c>)
 800d2d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2d8:	4b14      	ldr	r3, [pc, #80]	@ (800d32c <xPortStartScheduler+0x13c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a13      	ldr	r2, [pc, #76]	@ (800d32c <xPortStartScheduler+0x13c>)
 800d2de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2e4:	f000 f8da 	bl	800d49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2e8:	4b11      	ldr	r3, [pc, #68]	@ (800d330 <xPortStartScheduler+0x140>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2ee:	f000 f8f9 	bl	800d4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2f2:	4b10      	ldr	r3, [pc, #64]	@ (800d334 <xPortStartScheduler+0x144>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d334 <xPortStartScheduler+0x144>)
 800d2f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2fe:	f7ff ff63 	bl	800d1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d302:	f7fe ff4f 	bl	800c1a4 <vTaskSwitchContext>
	prvTaskExitError();
 800d306:	f7ff ff1d 	bl	800d144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	e000ed00 	.word	0xe000ed00
 800d318:	410fc271 	.word	0x410fc271
 800d31c:	410fc270 	.word	0x410fc270
 800d320:	e000e400 	.word	0xe000e400
 800d324:	20001c1c 	.word	0x20001c1c
 800d328:	20001c20 	.word	0x20001c20
 800d32c:	e000ed20 	.word	0xe000ed20
 800d330:	20000084 	.word	0x20000084
 800d334:	e000ef34 	.word	0xe000ef34

0800d338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	607b      	str	r3, [r7, #4]
}
 800d350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d352:	4b10      	ldr	r3, [pc, #64]	@ (800d394 <vPortEnterCritical+0x5c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3301      	adds	r3, #1
 800d358:	4a0e      	ldr	r2, [pc, #56]	@ (800d394 <vPortEnterCritical+0x5c>)
 800d35a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d35c:	4b0d      	ldr	r3, [pc, #52]	@ (800d394 <vPortEnterCritical+0x5c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d110      	bne.n	800d386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d364:	4b0c      	ldr	r3, [pc, #48]	@ (800d398 <vPortEnterCritical+0x60>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00b      	beq.n	800d386 <vPortEnterCritical+0x4e>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	603b      	str	r3, [r7, #0]
}
 800d380:	bf00      	nop
 800d382:	bf00      	nop
 800d384:	e7fd      	b.n	800d382 <vPortEnterCritical+0x4a>
	}
}
 800d386:	bf00      	nop
 800d388:	370c      	adds	r7, #12
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	20000084 	.word	0x20000084
 800d398:	e000ed04 	.word	0xe000ed04

0800d39c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3a2:	4b12      	ldr	r3, [pc, #72]	@ (800d3ec <vPortExitCritical+0x50>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <vPortExitCritical+0x26>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	607b      	str	r3, [r7, #4]
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	e7fd      	b.n	800d3be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d3ec <vPortExitCritical+0x50>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	4a08      	ldr	r2, [pc, #32]	@ (800d3ec <vPortExitCritical+0x50>)
 800d3ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3cc:	4b07      	ldr	r3, [pc, #28]	@ (800d3ec <vPortExitCritical+0x50>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d105      	bne.n	800d3e0 <vPortExitCritical+0x44>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	f383 8811 	msr	BASEPRI, r3
}
 800d3de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	20000084 	.word	0x20000084

0800d3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3f0:	f3ef 8009 	mrs	r0, PSP
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	4b15      	ldr	r3, [pc, #84]	@ (800d450 <pxCurrentTCBConst>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	f01e 0f10 	tst.w	lr, #16
 800d400:	bf08      	it	eq
 800d402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40a:	6010      	str	r0, [r2, #0]
 800d40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d414:	f380 8811 	msr	BASEPRI, r0
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f7fe fec0 	bl	800c1a4 <vTaskSwitchContext>
 800d424:	f04f 0000 	mov.w	r0, #0
 800d428:	f380 8811 	msr	BASEPRI, r0
 800d42c:	bc09      	pop	{r0, r3}
 800d42e:	6819      	ldr	r1, [r3, #0]
 800d430:	6808      	ldr	r0, [r1, #0]
 800d432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d436:	f01e 0f10 	tst.w	lr, #16
 800d43a:	bf08      	it	eq
 800d43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d440:	f380 8809 	msr	PSP, r0
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	f3af 8000 	nop.w

0800d450 <pxCurrentTCBConst>:
 800d450:	200015f0 	.word	0x200015f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop

0800d458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	607b      	str	r3, [r7, #4]
}
 800d470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d472:	f7fe fddd 	bl	800c030 <xTaskIncrementTick>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d47c:	4b06      	ldr	r3, [pc, #24]	@ (800d498 <xPortSysTickHandler+0x40>)
 800d47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	2300      	movs	r3, #0
 800d486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f383 8811 	msr	BASEPRI, r3
}
 800d48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d49c:	b480      	push	{r7}
 800d49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d0 <vPortSetupTimerInterrupt+0x34>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d4 <vPortSetupTimerInterrupt+0x38>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d8 <vPortSetupTimerInterrupt+0x3c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d4dc <vPortSetupTimerInterrupt+0x40>)
 800d4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b6:	099b      	lsrs	r3, r3, #6
 800d4b8:	4a09      	ldr	r2, [pc, #36]	@ (800d4e0 <vPortSetupTimerInterrupt+0x44>)
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4be:	4b04      	ldr	r3, [pc, #16]	@ (800d4d0 <vPortSetupTimerInterrupt+0x34>)
 800d4c0:	2207      	movs	r2, #7
 800d4c2:	601a      	str	r2, [r3, #0]
}
 800d4c4:	bf00      	nop
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	e000e010 	.word	0xe000e010
 800d4d4:	e000e018 	.word	0xe000e018
 800d4d8:	20000078 	.word	0x20000078
 800d4dc:	10624dd3 	.word	0x10624dd3
 800d4e0:	e000e014 	.word	0xe000e014

0800d4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4f4 <vPortEnableVFP+0x10>
 800d4e8:	6801      	ldr	r1, [r0, #0]
 800d4ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4ee:	6001      	str	r1, [r0, #0]
 800d4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4f2:	bf00      	nop
 800d4f4:	e000ed88 	.word	0xe000ed88

0800d4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4fe:	f3ef 8305 	mrs	r3, IPSR
 800d502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b0f      	cmp	r3, #15
 800d508:	d915      	bls.n	800d536 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d50a:	4a18      	ldr	r2, [pc, #96]	@ (800d56c <vPortValidateInterruptPriority+0x74>)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d514:	4b16      	ldr	r3, [pc, #88]	@ (800d570 <vPortValidateInterruptPriority+0x78>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	7afa      	ldrb	r2, [r7, #11]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d20b      	bcs.n	800d536 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d536:	4b0f      	ldr	r3, [pc, #60]	@ (800d574 <vPortValidateInterruptPriority+0x7c>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d53e:	4b0e      	ldr	r3, [pc, #56]	@ (800d578 <vPortValidateInterruptPriority+0x80>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d90b      	bls.n	800d55e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	603b      	str	r3, [r7, #0]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <vPortValidateInterruptPriority+0x62>
	}
 800d55e:	bf00      	nop
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	e000e3f0 	.word	0xe000e3f0
 800d570:	20001c1c 	.word	0x20001c1c
 800d574:	e000ed0c 	.word	0xe000ed0c
 800d578:	20001c20 	.word	0x20001c20

0800d57c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b08a      	sub	sp, #40	@ 0x28
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d588:	f7fe fb9c 	bl	800bcc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d58c:	4b5c      	ldr	r3, [pc, #368]	@ (800d700 <pvPortMalloc+0x184>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d594:	f000 f924 	bl	800d7e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d598:	4b5a      	ldr	r3, [pc, #360]	@ (800d704 <pvPortMalloc+0x188>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4013      	ands	r3, r2
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f040 8095 	bne.w	800d6d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01e      	beq.n	800d5ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d5ac:	2208      	movs	r2, #8
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f003 0307 	and.w	r3, r3, #7
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d015      	beq.n	800d5ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f023 0307 	bic.w	r3, r3, #7
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f003 0307 	and.w	r3, r3, #7
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <pvPortMalloc+0x6e>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	617b      	str	r3, [r7, #20]
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop
 800d5e8:	e7fd      	b.n	800d5e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d06f      	beq.n	800d6d0 <pvPortMalloc+0x154>
 800d5f0:	4b45      	ldr	r3, [pc, #276]	@ (800d708 <pvPortMalloc+0x18c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d86a      	bhi.n	800d6d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5fa:	4b44      	ldr	r3, [pc, #272]	@ (800d70c <pvPortMalloc+0x190>)
 800d5fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5fe:	4b43      	ldr	r3, [pc, #268]	@ (800d70c <pvPortMalloc+0x190>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d604:	e004      	b.n	800d610 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d903      	bls.n	800d622 <pvPortMalloc+0xa6>
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f1      	bne.n	800d606 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d622:	4b37      	ldr	r3, [pc, #220]	@ (800d700 <pvPortMalloc+0x184>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d628:	429a      	cmp	r2, r3
 800d62a:	d051      	beq.n	800d6d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2208      	movs	r2, #8
 800d632:	4413      	add	r3, r2
 800d634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	1ad2      	subs	r2, r2, r3
 800d646:	2308      	movs	r3, #8
 800d648:	005b      	lsls	r3, r3, #1
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d920      	bls.n	800d690 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4413      	add	r3, r2
 800d654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	f003 0307 	and.w	r3, r3, #7
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <pvPortMalloc+0xfc>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	bf00      	nop
 800d676:	e7fd      	b.n	800d674 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	1ad2      	subs	r2, r2, r3
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d68a:	69b8      	ldr	r0, [r7, #24]
 800d68c:	f000 f90a 	bl	800d8a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d690:	4b1d      	ldr	r3, [pc, #116]	@ (800d708 <pvPortMalloc+0x18c>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	4a1b      	ldr	r2, [pc, #108]	@ (800d708 <pvPortMalloc+0x18c>)
 800d69c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d69e:	4b1a      	ldr	r3, [pc, #104]	@ (800d708 <pvPortMalloc+0x18c>)
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <pvPortMalloc+0x194>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d203      	bcs.n	800d6b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6aa:	4b17      	ldr	r3, [pc, #92]	@ (800d708 <pvPortMalloc+0x18c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a18      	ldr	r2, [pc, #96]	@ (800d710 <pvPortMalloc+0x194>)
 800d6b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	4b13      	ldr	r3, [pc, #76]	@ (800d704 <pvPortMalloc+0x188>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	431a      	orrs	r2, r3
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6c6:	4b13      	ldr	r3, [pc, #76]	@ (800d714 <pvPortMalloc+0x198>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	4a11      	ldr	r2, [pc, #68]	@ (800d714 <pvPortMalloc+0x198>)
 800d6ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6d0:	f7fe fb06 	bl	800bce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	f003 0307 	and.w	r3, r3, #7
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00b      	beq.n	800d6f6 <pvPortMalloc+0x17a>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	60fb      	str	r3, [r7, #12]
}
 800d6f0:	bf00      	nop
 800d6f2:	bf00      	nop
 800d6f4:	e7fd      	b.n	800d6f2 <pvPortMalloc+0x176>
	return pvReturn;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3728      	adds	r7, #40	@ 0x28
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	2000582c 	.word	0x2000582c
 800d704:	20005840 	.word	0x20005840
 800d708:	20005830 	.word	0x20005830
 800d70c:	20005824 	.word	0x20005824
 800d710:	20005834 	.word	0x20005834
 800d714:	20005838 	.word	0x20005838

0800d718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d04f      	beq.n	800d7ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d72a:	2308      	movs	r3, #8
 800d72c:	425b      	negs	r3, r3
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	4413      	add	r3, r2
 800d732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	4b25      	ldr	r3, [pc, #148]	@ (800d7d4 <vPortFree+0xbc>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4013      	ands	r3, r2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10b      	bne.n	800d75e <vPortFree+0x46>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60fb      	str	r3, [r7, #12]
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	e7fd      	b.n	800d75a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00b      	beq.n	800d77e <vPortFree+0x66>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	60bb      	str	r3, [r7, #8]
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	e7fd      	b.n	800d77a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	4b14      	ldr	r3, [pc, #80]	@ (800d7d4 <vPortFree+0xbc>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4013      	ands	r3, r2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01e      	beq.n	800d7ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11a      	bne.n	800d7ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	685a      	ldr	r2, [r3, #4]
 800d798:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d4 <vPortFree+0xbc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	43db      	mvns	r3, r3
 800d79e:	401a      	ands	r2, r3
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7a4:	f7fe fa8e 	bl	800bcc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <vPortFree+0xc0>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	4a09      	ldr	r2, [pc, #36]	@ (800d7d8 <vPortFree+0xc0>)
 800d7b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f000 f874 	bl	800d8a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7bc:	4b07      	ldr	r3, [pc, #28]	@ (800d7dc <vPortFree+0xc4>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	4a06      	ldr	r2, [pc, #24]	@ (800d7dc <vPortFree+0xc4>)
 800d7c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7c6:	f7fe fa8b 	bl	800bce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7ca:	bf00      	nop
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20005840 	.word	0x20005840
 800d7d8:	20005830 	.word	0x20005830
 800d7dc:	2000583c 	.word	0x2000583c

0800d7e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d7ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7ec:	4b27      	ldr	r3, [pc, #156]	@ (800d88c <prvHeapInit+0xac>)
 800d7ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00c      	beq.n	800d814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3307      	adds	r3, #7
 800d7fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f023 0307 	bic.w	r3, r3, #7
 800d806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	4a1f      	ldr	r2, [pc, #124]	@ (800d88c <prvHeapInit+0xac>)
 800d810:	4413      	add	r3, r2
 800d812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d818:	4a1d      	ldr	r2, [pc, #116]	@ (800d890 <prvHeapInit+0xb0>)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d81e:	4b1c      	ldr	r3, [pc, #112]	@ (800d890 <prvHeapInit+0xb0>)
 800d820:	2200      	movs	r2, #0
 800d822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	4413      	add	r3, r2
 800d82a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d82c:	2208      	movs	r2, #8
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	1a9b      	subs	r3, r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 0307 	bic.w	r3, r3, #7
 800d83a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	4a15      	ldr	r2, [pc, #84]	@ (800d894 <prvHeapInit+0xb4>)
 800d840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d842:	4b14      	ldr	r3, [pc, #80]	@ (800d894 <prvHeapInit+0xb4>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2200      	movs	r2, #0
 800d848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d84a:	4b12      	ldr	r3, [pc, #72]	@ (800d894 <prvHeapInit+0xb4>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	1ad2      	subs	r2, r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d860:	4b0c      	ldr	r3, [pc, #48]	@ (800d894 <prvHeapInit+0xb4>)
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	4a0a      	ldr	r2, [pc, #40]	@ (800d898 <prvHeapInit+0xb8>)
 800d86e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	4a09      	ldr	r2, [pc, #36]	@ (800d89c <prvHeapInit+0xbc>)
 800d876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d878:	4b09      	ldr	r3, [pc, #36]	@ (800d8a0 <prvHeapInit+0xc0>)
 800d87a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d87e:	601a      	str	r2, [r3, #0]
}
 800d880:	bf00      	nop
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20001c24 	.word	0x20001c24
 800d890:	20005824 	.word	0x20005824
 800d894:	2000582c 	.word	0x2000582c
 800d898:	20005834 	.word	0x20005834
 800d89c:	20005830 	.word	0x20005830
 800d8a0:	20005840 	.word	0x20005840

0800d8a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8ac:	4b28      	ldr	r3, [pc, #160]	@ (800d950 <prvInsertBlockIntoFreeList+0xac>)
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	e002      	b.n	800d8b8 <prvInsertBlockIntoFreeList+0x14>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	60fb      	str	r3, [r7, #12]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d8f7      	bhi.n	800d8b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d108      	bne.n	800d8e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	441a      	add	r2, r3
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d118      	bne.n	800d92c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	4b15      	ldr	r3, [pc, #84]	@ (800d954 <prvInsertBlockIntoFreeList+0xb0>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	429a      	cmp	r2, r3
 800d904:	d00d      	beq.n	800d922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	441a      	add	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	e008      	b.n	800d934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d922:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <prvInsertBlockIntoFreeList+0xb0>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	e003      	b.n	800d934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d002      	beq.n	800d942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d942:	bf00      	nop
 800d944:	3714      	adds	r7, #20
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	20005824 	.word	0x20005824
 800d954:	2000582c 	.word	0x2000582c

0800d958 <_vsiprintf_r>:
 800d958:	b500      	push	{lr}
 800d95a:	b09b      	sub	sp, #108	@ 0x6c
 800d95c:	9100      	str	r1, [sp, #0]
 800d95e:	9104      	str	r1, [sp, #16]
 800d960:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d964:	9105      	str	r1, [sp, #20]
 800d966:	9102      	str	r1, [sp, #8]
 800d968:	4905      	ldr	r1, [pc, #20]	@ (800d980 <_vsiprintf_r+0x28>)
 800d96a:	9103      	str	r1, [sp, #12]
 800d96c:	4669      	mov	r1, sp
 800d96e:	f000 f951 	bl	800dc14 <_svfiprintf_r>
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	b01b      	add	sp, #108	@ 0x6c
 800d97a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d97e:	bf00      	nop
 800d980:	ffff0208 	.word	0xffff0208

0800d984 <vsiprintf>:
 800d984:	4613      	mov	r3, r2
 800d986:	460a      	mov	r2, r1
 800d988:	4601      	mov	r1, r0
 800d98a:	4802      	ldr	r0, [pc, #8]	@ (800d994 <vsiprintf+0x10>)
 800d98c:	6800      	ldr	r0, [r0, #0]
 800d98e:	f7ff bfe3 	b.w	800d958 <_vsiprintf_r>
 800d992:	bf00      	nop
 800d994:	20000088 	.word	0x20000088

0800d998 <memset>:
 800d998:	4402      	add	r2, r0
 800d99a:	4603      	mov	r3, r0
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d100      	bne.n	800d9a2 <memset+0xa>
 800d9a0:	4770      	bx	lr
 800d9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9a6:	e7f9      	b.n	800d99c <memset+0x4>

0800d9a8 <_reclaim_reent>:
 800d9a8:	4b29      	ldr	r3, [pc, #164]	@ (800da50 <_reclaim_reent+0xa8>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4283      	cmp	r3, r0
 800d9ae:	b570      	push	{r4, r5, r6, lr}
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	d04b      	beq.n	800da4c <_reclaim_reent+0xa4>
 800d9b4:	69c3      	ldr	r3, [r0, #28]
 800d9b6:	b1ab      	cbz	r3, 800d9e4 <_reclaim_reent+0x3c>
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	b16b      	cbz	r3, 800d9d8 <_reclaim_reent+0x30>
 800d9bc:	2500      	movs	r5, #0
 800d9be:	69e3      	ldr	r3, [r4, #28]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	5959      	ldr	r1, [r3, r5]
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	d13b      	bne.n	800da40 <_reclaim_reent+0x98>
 800d9c8:	3504      	adds	r5, #4
 800d9ca:	2d80      	cmp	r5, #128	@ 0x80
 800d9cc:	d1f7      	bne.n	800d9be <_reclaim_reent+0x16>
 800d9ce:	69e3      	ldr	r3, [r4, #28]
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	68d9      	ldr	r1, [r3, #12]
 800d9d4:	f000 f878 	bl	800dac8 <_free_r>
 800d9d8:	69e3      	ldr	r3, [r4, #28]
 800d9da:	6819      	ldr	r1, [r3, #0]
 800d9dc:	b111      	cbz	r1, 800d9e4 <_reclaim_reent+0x3c>
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 f872 	bl	800dac8 <_free_r>
 800d9e4:	6961      	ldr	r1, [r4, #20]
 800d9e6:	b111      	cbz	r1, 800d9ee <_reclaim_reent+0x46>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 f86d 	bl	800dac8 <_free_r>
 800d9ee:	69e1      	ldr	r1, [r4, #28]
 800d9f0:	b111      	cbz	r1, 800d9f8 <_reclaim_reent+0x50>
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 f868 	bl	800dac8 <_free_r>
 800d9f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d9fa:	b111      	cbz	r1, 800da02 <_reclaim_reent+0x5a>
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f000 f863 	bl	800dac8 <_free_r>
 800da02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da04:	b111      	cbz	r1, 800da0c <_reclaim_reent+0x64>
 800da06:	4620      	mov	r0, r4
 800da08:	f000 f85e 	bl	800dac8 <_free_r>
 800da0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800da0e:	b111      	cbz	r1, 800da16 <_reclaim_reent+0x6e>
 800da10:	4620      	mov	r0, r4
 800da12:	f000 f859 	bl	800dac8 <_free_r>
 800da16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800da18:	b111      	cbz	r1, 800da20 <_reclaim_reent+0x78>
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 f854 	bl	800dac8 <_free_r>
 800da20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800da22:	b111      	cbz	r1, 800da2a <_reclaim_reent+0x82>
 800da24:	4620      	mov	r0, r4
 800da26:	f000 f84f 	bl	800dac8 <_free_r>
 800da2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800da2c:	b111      	cbz	r1, 800da34 <_reclaim_reent+0x8c>
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 f84a 	bl	800dac8 <_free_r>
 800da34:	6a23      	ldr	r3, [r4, #32]
 800da36:	b14b      	cbz	r3, 800da4c <_reclaim_reent+0xa4>
 800da38:	4620      	mov	r0, r4
 800da3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da3e:	4718      	bx	r3
 800da40:	680e      	ldr	r6, [r1, #0]
 800da42:	4620      	mov	r0, r4
 800da44:	f000 f840 	bl	800dac8 <_free_r>
 800da48:	4631      	mov	r1, r6
 800da4a:	e7bb      	b.n	800d9c4 <_reclaim_reent+0x1c>
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
 800da4e:	bf00      	nop
 800da50:	20000088 	.word	0x20000088

0800da54 <__errno>:
 800da54:	4b01      	ldr	r3, [pc, #4]	@ (800da5c <__errno+0x8>)
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	20000088 	.word	0x20000088

0800da60 <__libc_init_array>:
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	4d0d      	ldr	r5, [pc, #52]	@ (800da98 <__libc_init_array+0x38>)
 800da64:	4c0d      	ldr	r4, [pc, #52]	@ (800da9c <__libc_init_array+0x3c>)
 800da66:	1b64      	subs	r4, r4, r5
 800da68:	10a4      	asrs	r4, r4, #2
 800da6a:	2600      	movs	r6, #0
 800da6c:	42a6      	cmp	r6, r4
 800da6e:	d109      	bne.n	800da84 <__libc_init_array+0x24>
 800da70:	4d0b      	ldr	r5, [pc, #44]	@ (800daa0 <__libc_init_array+0x40>)
 800da72:	4c0c      	ldr	r4, [pc, #48]	@ (800daa4 <__libc_init_array+0x44>)
 800da74:	f000 fc66 	bl	800e344 <_init>
 800da78:	1b64      	subs	r4, r4, r5
 800da7a:	10a4      	asrs	r4, r4, #2
 800da7c:	2600      	movs	r6, #0
 800da7e:	42a6      	cmp	r6, r4
 800da80:	d105      	bne.n	800da8e <__libc_init_array+0x2e>
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	f855 3b04 	ldr.w	r3, [r5], #4
 800da88:	4798      	blx	r3
 800da8a:	3601      	adds	r6, #1
 800da8c:	e7ee      	b.n	800da6c <__libc_init_array+0xc>
 800da8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da92:	4798      	blx	r3
 800da94:	3601      	adds	r6, #1
 800da96:	e7f2      	b.n	800da7e <__libc_init_array+0x1e>
 800da98:	0800e614 	.word	0x0800e614
 800da9c:	0800e614 	.word	0x0800e614
 800daa0:	0800e614 	.word	0x0800e614
 800daa4:	0800e618 	.word	0x0800e618

0800daa8 <__retarget_lock_acquire_recursive>:
 800daa8:	4770      	bx	lr

0800daaa <__retarget_lock_release_recursive>:
 800daaa:	4770      	bx	lr

0800daac <memcpy>:
 800daac:	440a      	add	r2, r1
 800daae:	4291      	cmp	r1, r2
 800dab0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dab4:	d100      	bne.n	800dab8 <memcpy+0xc>
 800dab6:	4770      	bx	lr
 800dab8:	b510      	push	{r4, lr}
 800daba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dac2:	4291      	cmp	r1, r2
 800dac4:	d1f9      	bne.n	800daba <memcpy+0xe>
 800dac6:	bd10      	pop	{r4, pc}

0800dac8 <_free_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4605      	mov	r5, r0
 800dacc:	2900      	cmp	r1, #0
 800dace:	d041      	beq.n	800db54 <_free_r+0x8c>
 800dad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad4:	1f0c      	subs	r4, r1, #4
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfb8      	it	lt
 800dada:	18e4      	addlt	r4, r4, r3
 800dadc:	f000 fbc6 	bl	800e26c <__malloc_lock>
 800dae0:	4a1d      	ldr	r2, [pc, #116]	@ (800db58 <_free_r+0x90>)
 800dae2:	6813      	ldr	r3, [r2, #0]
 800dae4:	b933      	cbnz	r3, 800daf4 <_free_r+0x2c>
 800dae6:	6063      	str	r3, [r4, #4]
 800dae8:	6014      	str	r4, [r2, #0]
 800daea:	4628      	mov	r0, r5
 800daec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daf0:	f000 bbc2 	b.w	800e278 <__malloc_unlock>
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	d908      	bls.n	800db0a <_free_r+0x42>
 800daf8:	6820      	ldr	r0, [r4, #0]
 800dafa:	1821      	adds	r1, r4, r0
 800dafc:	428b      	cmp	r3, r1
 800dafe:	bf01      	itttt	eq
 800db00:	6819      	ldreq	r1, [r3, #0]
 800db02:	685b      	ldreq	r3, [r3, #4]
 800db04:	1809      	addeq	r1, r1, r0
 800db06:	6021      	streq	r1, [r4, #0]
 800db08:	e7ed      	b.n	800dae6 <_free_r+0x1e>
 800db0a:	461a      	mov	r2, r3
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	b10b      	cbz	r3, 800db14 <_free_r+0x4c>
 800db10:	42a3      	cmp	r3, r4
 800db12:	d9fa      	bls.n	800db0a <_free_r+0x42>
 800db14:	6811      	ldr	r1, [r2, #0]
 800db16:	1850      	adds	r0, r2, r1
 800db18:	42a0      	cmp	r0, r4
 800db1a:	d10b      	bne.n	800db34 <_free_r+0x6c>
 800db1c:	6820      	ldr	r0, [r4, #0]
 800db1e:	4401      	add	r1, r0
 800db20:	1850      	adds	r0, r2, r1
 800db22:	4283      	cmp	r3, r0
 800db24:	6011      	str	r1, [r2, #0]
 800db26:	d1e0      	bne.n	800daea <_free_r+0x22>
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	6053      	str	r3, [r2, #4]
 800db2e:	4408      	add	r0, r1
 800db30:	6010      	str	r0, [r2, #0]
 800db32:	e7da      	b.n	800daea <_free_r+0x22>
 800db34:	d902      	bls.n	800db3c <_free_r+0x74>
 800db36:	230c      	movs	r3, #12
 800db38:	602b      	str	r3, [r5, #0]
 800db3a:	e7d6      	b.n	800daea <_free_r+0x22>
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	1821      	adds	r1, r4, r0
 800db40:	428b      	cmp	r3, r1
 800db42:	bf04      	itt	eq
 800db44:	6819      	ldreq	r1, [r3, #0]
 800db46:	685b      	ldreq	r3, [r3, #4]
 800db48:	6063      	str	r3, [r4, #4]
 800db4a:	bf04      	itt	eq
 800db4c:	1809      	addeq	r1, r1, r0
 800db4e:	6021      	streq	r1, [r4, #0]
 800db50:	6054      	str	r4, [r2, #4]
 800db52:	e7ca      	b.n	800daea <_free_r+0x22>
 800db54:	bd38      	pop	{r3, r4, r5, pc}
 800db56:	bf00      	nop
 800db58:	20005988 	.word	0x20005988

0800db5c <__ssputs_r>:
 800db5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db60:	688e      	ldr	r6, [r1, #8]
 800db62:	461f      	mov	r7, r3
 800db64:	42be      	cmp	r6, r7
 800db66:	680b      	ldr	r3, [r1, #0]
 800db68:	4682      	mov	sl, r0
 800db6a:	460c      	mov	r4, r1
 800db6c:	4690      	mov	r8, r2
 800db6e:	d82d      	bhi.n	800dbcc <__ssputs_r+0x70>
 800db70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db78:	d026      	beq.n	800dbc8 <__ssputs_r+0x6c>
 800db7a:	6965      	ldr	r5, [r4, #20]
 800db7c:	6909      	ldr	r1, [r1, #16]
 800db7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db82:	eba3 0901 	sub.w	r9, r3, r1
 800db86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db8a:	1c7b      	adds	r3, r7, #1
 800db8c:	444b      	add	r3, r9
 800db8e:	106d      	asrs	r5, r5, #1
 800db90:	429d      	cmp	r5, r3
 800db92:	bf38      	it	cc
 800db94:	461d      	movcc	r5, r3
 800db96:	0553      	lsls	r3, r2, #21
 800db98:	d527      	bpl.n	800dbea <__ssputs_r+0x8e>
 800db9a:	4629      	mov	r1, r5
 800db9c:	f000 f958 	bl	800de50 <_malloc_r>
 800dba0:	4606      	mov	r6, r0
 800dba2:	b360      	cbz	r0, 800dbfe <__ssputs_r+0xa2>
 800dba4:	6921      	ldr	r1, [r4, #16]
 800dba6:	464a      	mov	r2, r9
 800dba8:	f7ff ff80 	bl	800daac <memcpy>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb6:	81a3      	strh	r3, [r4, #12]
 800dbb8:	6126      	str	r6, [r4, #16]
 800dbba:	6165      	str	r5, [r4, #20]
 800dbbc:	444e      	add	r6, r9
 800dbbe:	eba5 0509 	sub.w	r5, r5, r9
 800dbc2:	6026      	str	r6, [r4, #0]
 800dbc4:	60a5      	str	r5, [r4, #8]
 800dbc6:	463e      	mov	r6, r7
 800dbc8:	42be      	cmp	r6, r7
 800dbca:	d900      	bls.n	800dbce <__ssputs_r+0x72>
 800dbcc:	463e      	mov	r6, r7
 800dbce:	6820      	ldr	r0, [r4, #0]
 800dbd0:	4632      	mov	r2, r6
 800dbd2:	4641      	mov	r1, r8
 800dbd4:	f000 fb84 	bl	800e2e0 <memmove>
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	1b9b      	subs	r3, r3, r6
 800dbdc:	60a3      	str	r3, [r4, #8]
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	4433      	add	r3, r6
 800dbe2:	6023      	str	r3, [r4, #0]
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbea:	462a      	mov	r2, r5
 800dbec:	f000 fb4a 	bl	800e284 <_realloc_r>
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d1e0      	bne.n	800dbb8 <__ssputs_r+0x5c>
 800dbf6:	6921      	ldr	r1, [r4, #16]
 800dbf8:	4650      	mov	r0, sl
 800dbfa:	f7ff ff65 	bl	800dac8 <_free_r>
 800dbfe:	230c      	movs	r3, #12
 800dc00:	f8ca 3000 	str.w	r3, [sl]
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc10:	e7e9      	b.n	800dbe6 <__ssputs_r+0x8a>
	...

0800dc14 <_svfiprintf_r>:
 800dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	4698      	mov	r8, r3
 800dc1a:	898b      	ldrh	r3, [r1, #12]
 800dc1c:	061b      	lsls	r3, r3, #24
 800dc1e:	b09d      	sub	sp, #116	@ 0x74
 800dc20:	4607      	mov	r7, r0
 800dc22:	460d      	mov	r5, r1
 800dc24:	4614      	mov	r4, r2
 800dc26:	d510      	bpl.n	800dc4a <_svfiprintf_r+0x36>
 800dc28:	690b      	ldr	r3, [r1, #16]
 800dc2a:	b973      	cbnz	r3, 800dc4a <_svfiprintf_r+0x36>
 800dc2c:	2140      	movs	r1, #64	@ 0x40
 800dc2e:	f000 f90f 	bl	800de50 <_malloc_r>
 800dc32:	6028      	str	r0, [r5, #0]
 800dc34:	6128      	str	r0, [r5, #16]
 800dc36:	b930      	cbnz	r0, 800dc46 <_svfiprintf_r+0x32>
 800dc38:	230c      	movs	r3, #12
 800dc3a:	603b      	str	r3, [r7, #0]
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc40:	b01d      	add	sp, #116	@ 0x74
 800dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	2340      	movs	r3, #64	@ 0x40
 800dc48:	616b      	str	r3, [r5, #20]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc4e:	2320      	movs	r3, #32
 800dc50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc54:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc58:	2330      	movs	r3, #48	@ 0x30
 800dc5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddf8 <_svfiprintf_r+0x1e4>
 800dc5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc62:	f04f 0901 	mov.w	r9, #1
 800dc66:	4623      	mov	r3, r4
 800dc68:	469a      	mov	sl, r3
 800dc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc6e:	b10a      	cbz	r2, 800dc74 <_svfiprintf_r+0x60>
 800dc70:	2a25      	cmp	r2, #37	@ 0x25
 800dc72:	d1f9      	bne.n	800dc68 <_svfiprintf_r+0x54>
 800dc74:	ebba 0b04 	subs.w	fp, sl, r4
 800dc78:	d00b      	beq.n	800dc92 <_svfiprintf_r+0x7e>
 800dc7a:	465b      	mov	r3, fp
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	4629      	mov	r1, r5
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff ff6b 	bl	800db5c <__ssputs_r>
 800dc86:	3001      	adds	r0, #1
 800dc88:	f000 80a7 	beq.w	800ddda <_svfiprintf_r+0x1c6>
 800dc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc8e:	445a      	add	r2, fp
 800dc90:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc92:	f89a 3000 	ldrb.w	r3, [sl]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f000 809f 	beq.w	800ddda <_svfiprintf_r+0x1c6>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dca6:	f10a 0a01 	add.w	sl, sl, #1
 800dcaa:	9304      	str	r3, [sp, #16]
 800dcac:	9307      	str	r3, [sp, #28]
 800dcae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcb4:	4654      	mov	r4, sl
 800dcb6:	2205      	movs	r2, #5
 800dcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcbc:	484e      	ldr	r0, [pc, #312]	@ (800ddf8 <_svfiprintf_r+0x1e4>)
 800dcbe:	f7f2 fa8f 	bl	80001e0 <memchr>
 800dcc2:	9a04      	ldr	r2, [sp, #16]
 800dcc4:	b9d8      	cbnz	r0, 800dcfe <_svfiprintf_r+0xea>
 800dcc6:	06d0      	lsls	r0, r2, #27
 800dcc8:	bf44      	itt	mi
 800dcca:	2320      	movmi	r3, #32
 800dccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcd0:	0711      	lsls	r1, r2, #28
 800dcd2:	bf44      	itt	mi
 800dcd4:	232b      	movmi	r3, #43	@ 0x2b
 800dcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcda:	f89a 3000 	ldrb.w	r3, [sl]
 800dcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800dce0:	d015      	beq.n	800dd0e <_svfiprintf_r+0xfa>
 800dce2:	9a07      	ldr	r2, [sp, #28]
 800dce4:	4654      	mov	r4, sl
 800dce6:	2000      	movs	r0, #0
 800dce8:	f04f 0c0a 	mov.w	ip, #10
 800dcec:	4621      	mov	r1, r4
 800dcee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf2:	3b30      	subs	r3, #48	@ 0x30
 800dcf4:	2b09      	cmp	r3, #9
 800dcf6:	d94b      	bls.n	800dd90 <_svfiprintf_r+0x17c>
 800dcf8:	b1b0      	cbz	r0, 800dd28 <_svfiprintf_r+0x114>
 800dcfa:	9207      	str	r2, [sp, #28]
 800dcfc:	e014      	b.n	800dd28 <_svfiprintf_r+0x114>
 800dcfe:	eba0 0308 	sub.w	r3, r0, r8
 800dd02:	fa09 f303 	lsl.w	r3, r9, r3
 800dd06:	4313      	orrs	r3, r2
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	46a2      	mov	sl, r4
 800dd0c:	e7d2      	b.n	800dcb4 <_svfiprintf_r+0xa0>
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	1d19      	adds	r1, r3, #4
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	9103      	str	r1, [sp, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bfbb      	ittet	lt
 800dd1a:	425b      	neglt	r3, r3
 800dd1c:	f042 0202 	orrlt.w	r2, r2, #2
 800dd20:	9307      	strge	r3, [sp, #28]
 800dd22:	9307      	strlt	r3, [sp, #28]
 800dd24:	bfb8      	it	lt
 800dd26:	9204      	strlt	r2, [sp, #16]
 800dd28:	7823      	ldrb	r3, [r4, #0]
 800dd2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd2c:	d10a      	bne.n	800dd44 <_svfiprintf_r+0x130>
 800dd2e:	7863      	ldrb	r3, [r4, #1]
 800dd30:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd32:	d132      	bne.n	800dd9a <_svfiprintf_r+0x186>
 800dd34:	9b03      	ldr	r3, [sp, #12]
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	9203      	str	r2, [sp, #12]
 800dd3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd40:	3402      	adds	r4, #2
 800dd42:	9305      	str	r3, [sp, #20]
 800dd44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de08 <_svfiprintf_r+0x1f4>
 800dd48:	7821      	ldrb	r1, [r4, #0]
 800dd4a:	2203      	movs	r2, #3
 800dd4c:	4650      	mov	r0, sl
 800dd4e:	f7f2 fa47 	bl	80001e0 <memchr>
 800dd52:	b138      	cbz	r0, 800dd64 <_svfiprintf_r+0x150>
 800dd54:	9b04      	ldr	r3, [sp, #16]
 800dd56:	eba0 000a 	sub.w	r0, r0, sl
 800dd5a:	2240      	movs	r2, #64	@ 0x40
 800dd5c:	4082      	lsls	r2, r0
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	3401      	adds	r4, #1
 800dd62:	9304      	str	r3, [sp, #16]
 800dd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd68:	4824      	ldr	r0, [pc, #144]	@ (800ddfc <_svfiprintf_r+0x1e8>)
 800dd6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd6e:	2206      	movs	r2, #6
 800dd70:	f7f2 fa36 	bl	80001e0 <memchr>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d036      	beq.n	800dde6 <_svfiprintf_r+0x1d2>
 800dd78:	4b21      	ldr	r3, [pc, #132]	@ (800de00 <_svfiprintf_r+0x1ec>)
 800dd7a:	bb1b      	cbnz	r3, 800ddc4 <_svfiprintf_r+0x1b0>
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	3307      	adds	r3, #7
 800dd80:	f023 0307 	bic.w	r3, r3, #7
 800dd84:	3308      	adds	r3, #8
 800dd86:	9303      	str	r3, [sp, #12]
 800dd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd8a:	4433      	add	r3, r6
 800dd8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd8e:	e76a      	b.n	800dc66 <_svfiprintf_r+0x52>
 800dd90:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd94:	460c      	mov	r4, r1
 800dd96:	2001      	movs	r0, #1
 800dd98:	e7a8      	b.n	800dcec <_svfiprintf_r+0xd8>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	3401      	adds	r4, #1
 800dd9e:	9305      	str	r3, [sp, #20]
 800dda0:	4619      	mov	r1, r3
 800dda2:	f04f 0c0a 	mov.w	ip, #10
 800dda6:	4620      	mov	r0, r4
 800dda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddac:	3a30      	subs	r2, #48	@ 0x30
 800ddae:	2a09      	cmp	r2, #9
 800ddb0:	d903      	bls.n	800ddba <_svfiprintf_r+0x1a6>
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d0c6      	beq.n	800dd44 <_svfiprintf_r+0x130>
 800ddb6:	9105      	str	r1, [sp, #20]
 800ddb8:	e7c4      	b.n	800dd44 <_svfiprintf_r+0x130>
 800ddba:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e7f0      	b.n	800dda6 <_svfiprintf_r+0x192>
 800ddc4:	ab03      	add	r3, sp, #12
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	462a      	mov	r2, r5
 800ddca:	4b0e      	ldr	r3, [pc, #56]	@ (800de04 <_svfiprintf_r+0x1f0>)
 800ddcc:	a904      	add	r1, sp, #16
 800ddce:	4638      	mov	r0, r7
 800ddd0:	f3af 8000 	nop.w
 800ddd4:	1c42      	adds	r2, r0, #1
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	d1d6      	bne.n	800dd88 <_svfiprintf_r+0x174>
 800ddda:	89ab      	ldrh	r3, [r5, #12]
 800dddc:	065b      	lsls	r3, r3, #25
 800ddde:	f53f af2d 	bmi.w	800dc3c <_svfiprintf_r+0x28>
 800dde2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dde4:	e72c      	b.n	800dc40 <_svfiprintf_r+0x2c>
 800dde6:	ab03      	add	r3, sp, #12
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	462a      	mov	r2, r5
 800ddec:	4b05      	ldr	r3, [pc, #20]	@ (800de04 <_svfiprintf_r+0x1f0>)
 800ddee:	a904      	add	r1, sp, #16
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	f000 f91b 	bl	800e02c <_printf_i>
 800ddf6:	e7ed      	b.n	800ddd4 <_svfiprintf_r+0x1c0>
 800ddf8:	0800e5d8 	.word	0x0800e5d8
 800ddfc:	0800e5e2 	.word	0x0800e5e2
 800de00:	00000000 	.word	0x00000000
 800de04:	0800db5d 	.word	0x0800db5d
 800de08:	0800e5de 	.word	0x0800e5de

0800de0c <sbrk_aligned>:
 800de0c:	b570      	push	{r4, r5, r6, lr}
 800de0e:	4e0f      	ldr	r6, [pc, #60]	@ (800de4c <sbrk_aligned+0x40>)
 800de10:	460c      	mov	r4, r1
 800de12:	6831      	ldr	r1, [r6, #0]
 800de14:	4605      	mov	r5, r0
 800de16:	b911      	cbnz	r1, 800de1e <sbrk_aligned+0x12>
 800de18:	f000 fa7c 	bl	800e314 <_sbrk_r>
 800de1c:	6030      	str	r0, [r6, #0]
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f000 fa77 	bl	800e314 <_sbrk_r>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	d103      	bne.n	800de32 <sbrk_aligned+0x26>
 800de2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de2e:	4620      	mov	r0, r4
 800de30:	bd70      	pop	{r4, r5, r6, pc}
 800de32:	1cc4      	adds	r4, r0, #3
 800de34:	f024 0403 	bic.w	r4, r4, #3
 800de38:	42a0      	cmp	r0, r4
 800de3a:	d0f8      	beq.n	800de2e <sbrk_aligned+0x22>
 800de3c:	1a21      	subs	r1, r4, r0
 800de3e:	4628      	mov	r0, r5
 800de40:	f000 fa68 	bl	800e314 <_sbrk_r>
 800de44:	3001      	adds	r0, #1
 800de46:	d1f2      	bne.n	800de2e <sbrk_aligned+0x22>
 800de48:	e7ef      	b.n	800de2a <sbrk_aligned+0x1e>
 800de4a:	bf00      	nop
 800de4c:	20005984 	.word	0x20005984

0800de50 <_malloc_r>:
 800de50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de54:	1ccd      	adds	r5, r1, #3
 800de56:	f025 0503 	bic.w	r5, r5, #3
 800de5a:	3508      	adds	r5, #8
 800de5c:	2d0c      	cmp	r5, #12
 800de5e:	bf38      	it	cc
 800de60:	250c      	movcc	r5, #12
 800de62:	2d00      	cmp	r5, #0
 800de64:	4606      	mov	r6, r0
 800de66:	db01      	blt.n	800de6c <_malloc_r+0x1c>
 800de68:	42a9      	cmp	r1, r5
 800de6a:	d904      	bls.n	800de76 <_malloc_r+0x26>
 800de6c:	230c      	movs	r3, #12
 800de6e:	6033      	str	r3, [r6, #0]
 800de70:	2000      	movs	r0, #0
 800de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df4c <_malloc_r+0xfc>
 800de7a:	f000 f9f7 	bl	800e26c <__malloc_lock>
 800de7e:	f8d8 3000 	ldr.w	r3, [r8]
 800de82:	461c      	mov	r4, r3
 800de84:	bb44      	cbnz	r4, 800ded8 <_malloc_r+0x88>
 800de86:	4629      	mov	r1, r5
 800de88:	4630      	mov	r0, r6
 800de8a:	f7ff ffbf 	bl	800de0c <sbrk_aligned>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	4604      	mov	r4, r0
 800de92:	d158      	bne.n	800df46 <_malloc_r+0xf6>
 800de94:	f8d8 4000 	ldr.w	r4, [r8]
 800de98:	4627      	mov	r7, r4
 800de9a:	2f00      	cmp	r7, #0
 800de9c:	d143      	bne.n	800df26 <_malloc_r+0xd6>
 800de9e:	2c00      	cmp	r4, #0
 800dea0:	d04b      	beq.n	800df3a <_malloc_r+0xea>
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	4639      	mov	r1, r7
 800dea6:	4630      	mov	r0, r6
 800dea8:	eb04 0903 	add.w	r9, r4, r3
 800deac:	f000 fa32 	bl	800e314 <_sbrk_r>
 800deb0:	4581      	cmp	r9, r0
 800deb2:	d142      	bne.n	800df3a <_malloc_r+0xea>
 800deb4:	6821      	ldr	r1, [r4, #0]
 800deb6:	1a6d      	subs	r5, r5, r1
 800deb8:	4629      	mov	r1, r5
 800deba:	4630      	mov	r0, r6
 800debc:	f7ff ffa6 	bl	800de0c <sbrk_aligned>
 800dec0:	3001      	adds	r0, #1
 800dec2:	d03a      	beq.n	800df3a <_malloc_r+0xea>
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	442b      	add	r3, r5
 800dec8:	6023      	str	r3, [r4, #0]
 800deca:	f8d8 3000 	ldr.w	r3, [r8]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	bb62      	cbnz	r2, 800df2c <_malloc_r+0xdc>
 800ded2:	f8c8 7000 	str.w	r7, [r8]
 800ded6:	e00f      	b.n	800def8 <_malloc_r+0xa8>
 800ded8:	6822      	ldr	r2, [r4, #0]
 800deda:	1b52      	subs	r2, r2, r5
 800dedc:	d420      	bmi.n	800df20 <_malloc_r+0xd0>
 800dede:	2a0b      	cmp	r2, #11
 800dee0:	d917      	bls.n	800df12 <_malloc_r+0xc2>
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	6025      	str	r5, [r4, #0]
 800dee8:	bf18      	it	ne
 800deea:	6059      	strne	r1, [r3, #4]
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	bf08      	it	eq
 800def0:	f8c8 1000 	streq.w	r1, [r8]
 800def4:	5162      	str	r2, [r4, r5]
 800def6:	604b      	str	r3, [r1, #4]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f9bd 	bl	800e278 <__malloc_unlock>
 800defe:	f104 000b 	add.w	r0, r4, #11
 800df02:	1d23      	adds	r3, r4, #4
 800df04:	f020 0007 	bic.w	r0, r0, #7
 800df08:	1ac2      	subs	r2, r0, r3
 800df0a:	bf1c      	itt	ne
 800df0c:	1a1b      	subne	r3, r3, r0
 800df0e:	50a3      	strne	r3, [r4, r2]
 800df10:	e7af      	b.n	800de72 <_malloc_r+0x22>
 800df12:	6862      	ldr	r2, [r4, #4]
 800df14:	42a3      	cmp	r3, r4
 800df16:	bf0c      	ite	eq
 800df18:	f8c8 2000 	streq.w	r2, [r8]
 800df1c:	605a      	strne	r2, [r3, #4]
 800df1e:	e7eb      	b.n	800def8 <_malloc_r+0xa8>
 800df20:	4623      	mov	r3, r4
 800df22:	6864      	ldr	r4, [r4, #4]
 800df24:	e7ae      	b.n	800de84 <_malloc_r+0x34>
 800df26:	463c      	mov	r4, r7
 800df28:	687f      	ldr	r7, [r7, #4]
 800df2a:	e7b6      	b.n	800de9a <_malloc_r+0x4a>
 800df2c:	461a      	mov	r2, r3
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	42a3      	cmp	r3, r4
 800df32:	d1fb      	bne.n	800df2c <_malloc_r+0xdc>
 800df34:	2300      	movs	r3, #0
 800df36:	6053      	str	r3, [r2, #4]
 800df38:	e7de      	b.n	800def8 <_malloc_r+0xa8>
 800df3a:	230c      	movs	r3, #12
 800df3c:	6033      	str	r3, [r6, #0]
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 f99a 	bl	800e278 <__malloc_unlock>
 800df44:	e794      	b.n	800de70 <_malloc_r+0x20>
 800df46:	6005      	str	r5, [r0, #0]
 800df48:	e7d6      	b.n	800def8 <_malloc_r+0xa8>
 800df4a:	bf00      	nop
 800df4c:	20005988 	.word	0x20005988

0800df50 <_printf_common>:
 800df50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df54:	4616      	mov	r6, r2
 800df56:	4698      	mov	r8, r3
 800df58:	688a      	ldr	r2, [r1, #8]
 800df5a:	690b      	ldr	r3, [r1, #16]
 800df5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df60:	4293      	cmp	r3, r2
 800df62:	bfb8      	it	lt
 800df64:	4613      	movlt	r3, r2
 800df66:	6033      	str	r3, [r6, #0]
 800df68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df6c:	4607      	mov	r7, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	b10a      	cbz	r2, 800df76 <_printf_common+0x26>
 800df72:	3301      	adds	r3, #1
 800df74:	6033      	str	r3, [r6, #0]
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	0699      	lsls	r1, r3, #26
 800df7a:	bf42      	ittt	mi
 800df7c:	6833      	ldrmi	r3, [r6, #0]
 800df7e:	3302      	addmi	r3, #2
 800df80:	6033      	strmi	r3, [r6, #0]
 800df82:	6825      	ldr	r5, [r4, #0]
 800df84:	f015 0506 	ands.w	r5, r5, #6
 800df88:	d106      	bne.n	800df98 <_printf_common+0x48>
 800df8a:	f104 0a19 	add.w	sl, r4, #25
 800df8e:	68e3      	ldr	r3, [r4, #12]
 800df90:	6832      	ldr	r2, [r6, #0]
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	42ab      	cmp	r3, r5
 800df96:	dc26      	bgt.n	800dfe6 <_printf_common+0x96>
 800df98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df9c:	6822      	ldr	r2, [r4, #0]
 800df9e:	3b00      	subs	r3, #0
 800dfa0:	bf18      	it	ne
 800dfa2:	2301      	movne	r3, #1
 800dfa4:	0692      	lsls	r2, r2, #26
 800dfa6:	d42b      	bmi.n	800e000 <_printf_common+0xb0>
 800dfa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dfac:	4641      	mov	r1, r8
 800dfae:	4638      	mov	r0, r7
 800dfb0:	47c8      	blx	r9
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	d01e      	beq.n	800dff4 <_printf_common+0xa4>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	6922      	ldr	r2, [r4, #16]
 800dfba:	f003 0306 	and.w	r3, r3, #6
 800dfbe:	2b04      	cmp	r3, #4
 800dfc0:	bf02      	ittt	eq
 800dfc2:	68e5      	ldreq	r5, [r4, #12]
 800dfc4:	6833      	ldreq	r3, [r6, #0]
 800dfc6:	1aed      	subeq	r5, r5, r3
 800dfc8:	68a3      	ldr	r3, [r4, #8]
 800dfca:	bf0c      	ite	eq
 800dfcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfd0:	2500      	movne	r5, #0
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	bfc4      	itt	gt
 800dfd6:	1a9b      	subgt	r3, r3, r2
 800dfd8:	18ed      	addgt	r5, r5, r3
 800dfda:	2600      	movs	r6, #0
 800dfdc:	341a      	adds	r4, #26
 800dfde:	42b5      	cmp	r5, r6
 800dfe0:	d11a      	bne.n	800e018 <_printf_common+0xc8>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	e008      	b.n	800dff8 <_printf_common+0xa8>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	4652      	mov	r2, sl
 800dfea:	4641      	mov	r1, r8
 800dfec:	4638      	mov	r0, r7
 800dfee:	47c8      	blx	r9
 800dff0:	3001      	adds	r0, #1
 800dff2:	d103      	bne.n	800dffc <_printf_common+0xac>
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffc:	3501      	adds	r5, #1
 800dffe:	e7c6      	b.n	800df8e <_printf_common+0x3e>
 800e000:	18e1      	adds	r1, r4, r3
 800e002:	1c5a      	adds	r2, r3, #1
 800e004:	2030      	movs	r0, #48	@ 0x30
 800e006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e00a:	4422      	add	r2, r4
 800e00c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e014:	3302      	adds	r3, #2
 800e016:	e7c7      	b.n	800dfa8 <_printf_common+0x58>
 800e018:	2301      	movs	r3, #1
 800e01a:	4622      	mov	r2, r4
 800e01c:	4641      	mov	r1, r8
 800e01e:	4638      	mov	r0, r7
 800e020:	47c8      	blx	r9
 800e022:	3001      	adds	r0, #1
 800e024:	d0e6      	beq.n	800dff4 <_printf_common+0xa4>
 800e026:	3601      	adds	r6, #1
 800e028:	e7d9      	b.n	800dfde <_printf_common+0x8e>
	...

0800e02c <_printf_i>:
 800e02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e030:	7e0f      	ldrb	r7, [r1, #24]
 800e032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e034:	2f78      	cmp	r7, #120	@ 0x78
 800e036:	4691      	mov	r9, r2
 800e038:	4680      	mov	r8, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	469a      	mov	sl, r3
 800e03e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e042:	d807      	bhi.n	800e054 <_printf_i+0x28>
 800e044:	2f62      	cmp	r7, #98	@ 0x62
 800e046:	d80a      	bhi.n	800e05e <_printf_i+0x32>
 800e048:	2f00      	cmp	r7, #0
 800e04a:	f000 80d2 	beq.w	800e1f2 <_printf_i+0x1c6>
 800e04e:	2f58      	cmp	r7, #88	@ 0x58
 800e050:	f000 80b9 	beq.w	800e1c6 <_printf_i+0x19a>
 800e054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e05c:	e03a      	b.n	800e0d4 <_printf_i+0xa8>
 800e05e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e062:	2b15      	cmp	r3, #21
 800e064:	d8f6      	bhi.n	800e054 <_printf_i+0x28>
 800e066:	a101      	add	r1, pc, #4	@ (adr r1, 800e06c <_printf_i+0x40>)
 800e068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e06c:	0800e0c5 	.word	0x0800e0c5
 800e070:	0800e0d9 	.word	0x0800e0d9
 800e074:	0800e055 	.word	0x0800e055
 800e078:	0800e055 	.word	0x0800e055
 800e07c:	0800e055 	.word	0x0800e055
 800e080:	0800e055 	.word	0x0800e055
 800e084:	0800e0d9 	.word	0x0800e0d9
 800e088:	0800e055 	.word	0x0800e055
 800e08c:	0800e055 	.word	0x0800e055
 800e090:	0800e055 	.word	0x0800e055
 800e094:	0800e055 	.word	0x0800e055
 800e098:	0800e1d9 	.word	0x0800e1d9
 800e09c:	0800e103 	.word	0x0800e103
 800e0a0:	0800e193 	.word	0x0800e193
 800e0a4:	0800e055 	.word	0x0800e055
 800e0a8:	0800e055 	.word	0x0800e055
 800e0ac:	0800e1fb 	.word	0x0800e1fb
 800e0b0:	0800e055 	.word	0x0800e055
 800e0b4:	0800e103 	.word	0x0800e103
 800e0b8:	0800e055 	.word	0x0800e055
 800e0bc:	0800e055 	.word	0x0800e055
 800e0c0:	0800e19b 	.word	0x0800e19b
 800e0c4:	6833      	ldr	r3, [r6, #0]
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6032      	str	r2, [r6, #0]
 800e0cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e09d      	b.n	800e214 <_printf_i+0x1e8>
 800e0d8:	6833      	ldr	r3, [r6, #0]
 800e0da:	6820      	ldr	r0, [r4, #0]
 800e0dc:	1d19      	adds	r1, r3, #4
 800e0de:	6031      	str	r1, [r6, #0]
 800e0e0:	0606      	lsls	r6, r0, #24
 800e0e2:	d501      	bpl.n	800e0e8 <_printf_i+0xbc>
 800e0e4:	681d      	ldr	r5, [r3, #0]
 800e0e6:	e003      	b.n	800e0f0 <_printf_i+0xc4>
 800e0e8:	0645      	lsls	r5, r0, #25
 800e0ea:	d5fb      	bpl.n	800e0e4 <_printf_i+0xb8>
 800e0ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0f0:	2d00      	cmp	r5, #0
 800e0f2:	da03      	bge.n	800e0fc <_printf_i+0xd0>
 800e0f4:	232d      	movs	r3, #45	@ 0x2d
 800e0f6:	426d      	negs	r5, r5
 800e0f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0fc:	4859      	ldr	r0, [pc, #356]	@ (800e264 <_printf_i+0x238>)
 800e0fe:	230a      	movs	r3, #10
 800e100:	e011      	b.n	800e126 <_printf_i+0xfa>
 800e102:	6821      	ldr	r1, [r4, #0]
 800e104:	6833      	ldr	r3, [r6, #0]
 800e106:	0608      	lsls	r0, r1, #24
 800e108:	f853 5b04 	ldr.w	r5, [r3], #4
 800e10c:	d402      	bmi.n	800e114 <_printf_i+0xe8>
 800e10e:	0649      	lsls	r1, r1, #25
 800e110:	bf48      	it	mi
 800e112:	b2ad      	uxthmi	r5, r5
 800e114:	2f6f      	cmp	r7, #111	@ 0x6f
 800e116:	4853      	ldr	r0, [pc, #332]	@ (800e264 <_printf_i+0x238>)
 800e118:	6033      	str	r3, [r6, #0]
 800e11a:	bf14      	ite	ne
 800e11c:	230a      	movne	r3, #10
 800e11e:	2308      	moveq	r3, #8
 800e120:	2100      	movs	r1, #0
 800e122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e126:	6866      	ldr	r6, [r4, #4]
 800e128:	60a6      	str	r6, [r4, #8]
 800e12a:	2e00      	cmp	r6, #0
 800e12c:	bfa2      	ittt	ge
 800e12e:	6821      	ldrge	r1, [r4, #0]
 800e130:	f021 0104 	bicge.w	r1, r1, #4
 800e134:	6021      	strge	r1, [r4, #0]
 800e136:	b90d      	cbnz	r5, 800e13c <_printf_i+0x110>
 800e138:	2e00      	cmp	r6, #0
 800e13a:	d04b      	beq.n	800e1d4 <_printf_i+0x1a8>
 800e13c:	4616      	mov	r6, r2
 800e13e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e142:	fb03 5711 	mls	r7, r3, r1, r5
 800e146:	5dc7      	ldrb	r7, [r0, r7]
 800e148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e14c:	462f      	mov	r7, r5
 800e14e:	42bb      	cmp	r3, r7
 800e150:	460d      	mov	r5, r1
 800e152:	d9f4      	bls.n	800e13e <_printf_i+0x112>
 800e154:	2b08      	cmp	r3, #8
 800e156:	d10b      	bne.n	800e170 <_printf_i+0x144>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	07df      	lsls	r7, r3, #31
 800e15c:	d508      	bpl.n	800e170 <_printf_i+0x144>
 800e15e:	6923      	ldr	r3, [r4, #16]
 800e160:	6861      	ldr	r1, [r4, #4]
 800e162:	4299      	cmp	r1, r3
 800e164:	bfde      	ittt	le
 800e166:	2330      	movle	r3, #48	@ 0x30
 800e168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e16c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e170:	1b92      	subs	r2, r2, r6
 800e172:	6122      	str	r2, [r4, #16]
 800e174:	f8cd a000 	str.w	sl, [sp]
 800e178:	464b      	mov	r3, r9
 800e17a:	aa03      	add	r2, sp, #12
 800e17c:	4621      	mov	r1, r4
 800e17e:	4640      	mov	r0, r8
 800e180:	f7ff fee6 	bl	800df50 <_printf_common>
 800e184:	3001      	adds	r0, #1
 800e186:	d14a      	bne.n	800e21e <_printf_i+0x1f2>
 800e188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e18c:	b004      	add	sp, #16
 800e18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	f043 0320 	orr.w	r3, r3, #32
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	4833      	ldr	r0, [pc, #204]	@ (800e268 <_printf_i+0x23c>)
 800e19c:	2778      	movs	r7, #120	@ 0x78
 800e19e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	6831      	ldr	r1, [r6, #0]
 800e1a6:	061f      	lsls	r7, r3, #24
 800e1a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e1ac:	d402      	bmi.n	800e1b4 <_printf_i+0x188>
 800e1ae:	065f      	lsls	r7, r3, #25
 800e1b0:	bf48      	it	mi
 800e1b2:	b2ad      	uxthmi	r5, r5
 800e1b4:	6031      	str	r1, [r6, #0]
 800e1b6:	07d9      	lsls	r1, r3, #31
 800e1b8:	bf44      	itt	mi
 800e1ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e1be:	6023      	strmi	r3, [r4, #0]
 800e1c0:	b11d      	cbz	r5, 800e1ca <_printf_i+0x19e>
 800e1c2:	2310      	movs	r3, #16
 800e1c4:	e7ac      	b.n	800e120 <_printf_i+0xf4>
 800e1c6:	4827      	ldr	r0, [pc, #156]	@ (800e264 <_printf_i+0x238>)
 800e1c8:	e7e9      	b.n	800e19e <_printf_i+0x172>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	f023 0320 	bic.w	r3, r3, #32
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	e7f6      	b.n	800e1c2 <_printf_i+0x196>
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	e7bd      	b.n	800e154 <_printf_i+0x128>
 800e1d8:	6833      	ldr	r3, [r6, #0]
 800e1da:	6825      	ldr	r5, [r4, #0]
 800e1dc:	6961      	ldr	r1, [r4, #20]
 800e1de:	1d18      	adds	r0, r3, #4
 800e1e0:	6030      	str	r0, [r6, #0]
 800e1e2:	062e      	lsls	r6, r5, #24
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	d501      	bpl.n	800e1ec <_printf_i+0x1c0>
 800e1e8:	6019      	str	r1, [r3, #0]
 800e1ea:	e002      	b.n	800e1f2 <_printf_i+0x1c6>
 800e1ec:	0668      	lsls	r0, r5, #25
 800e1ee:	d5fb      	bpl.n	800e1e8 <_printf_i+0x1bc>
 800e1f0:	8019      	strh	r1, [r3, #0]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6123      	str	r3, [r4, #16]
 800e1f6:	4616      	mov	r6, r2
 800e1f8:	e7bc      	b.n	800e174 <_printf_i+0x148>
 800e1fa:	6833      	ldr	r3, [r6, #0]
 800e1fc:	1d1a      	adds	r2, r3, #4
 800e1fe:	6032      	str	r2, [r6, #0]
 800e200:	681e      	ldr	r6, [r3, #0]
 800e202:	6862      	ldr	r2, [r4, #4]
 800e204:	2100      	movs	r1, #0
 800e206:	4630      	mov	r0, r6
 800e208:	f7f1 ffea 	bl	80001e0 <memchr>
 800e20c:	b108      	cbz	r0, 800e212 <_printf_i+0x1e6>
 800e20e:	1b80      	subs	r0, r0, r6
 800e210:	6060      	str	r0, [r4, #4]
 800e212:	6863      	ldr	r3, [r4, #4]
 800e214:	6123      	str	r3, [r4, #16]
 800e216:	2300      	movs	r3, #0
 800e218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e21c:	e7aa      	b.n	800e174 <_printf_i+0x148>
 800e21e:	6923      	ldr	r3, [r4, #16]
 800e220:	4632      	mov	r2, r6
 800e222:	4649      	mov	r1, r9
 800e224:	4640      	mov	r0, r8
 800e226:	47d0      	blx	sl
 800e228:	3001      	adds	r0, #1
 800e22a:	d0ad      	beq.n	800e188 <_printf_i+0x15c>
 800e22c:	6823      	ldr	r3, [r4, #0]
 800e22e:	079b      	lsls	r3, r3, #30
 800e230:	d413      	bmi.n	800e25a <_printf_i+0x22e>
 800e232:	68e0      	ldr	r0, [r4, #12]
 800e234:	9b03      	ldr	r3, [sp, #12]
 800e236:	4298      	cmp	r0, r3
 800e238:	bfb8      	it	lt
 800e23a:	4618      	movlt	r0, r3
 800e23c:	e7a6      	b.n	800e18c <_printf_i+0x160>
 800e23e:	2301      	movs	r3, #1
 800e240:	4632      	mov	r2, r6
 800e242:	4649      	mov	r1, r9
 800e244:	4640      	mov	r0, r8
 800e246:	47d0      	blx	sl
 800e248:	3001      	adds	r0, #1
 800e24a:	d09d      	beq.n	800e188 <_printf_i+0x15c>
 800e24c:	3501      	adds	r5, #1
 800e24e:	68e3      	ldr	r3, [r4, #12]
 800e250:	9903      	ldr	r1, [sp, #12]
 800e252:	1a5b      	subs	r3, r3, r1
 800e254:	42ab      	cmp	r3, r5
 800e256:	dcf2      	bgt.n	800e23e <_printf_i+0x212>
 800e258:	e7eb      	b.n	800e232 <_printf_i+0x206>
 800e25a:	2500      	movs	r5, #0
 800e25c:	f104 0619 	add.w	r6, r4, #25
 800e260:	e7f5      	b.n	800e24e <_printf_i+0x222>
 800e262:	bf00      	nop
 800e264:	0800e5e9 	.word	0x0800e5e9
 800e268:	0800e5fa 	.word	0x0800e5fa

0800e26c <__malloc_lock>:
 800e26c:	4801      	ldr	r0, [pc, #4]	@ (800e274 <__malloc_lock+0x8>)
 800e26e:	f7ff bc1b 	b.w	800daa8 <__retarget_lock_acquire_recursive>
 800e272:	bf00      	nop
 800e274:	20005980 	.word	0x20005980

0800e278 <__malloc_unlock>:
 800e278:	4801      	ldr	r0, [pc, #4]	@ (800e280 <__malloc_unlock+0x8>)
 800e27a:	f7ff bc16 	b.w	800daaa <__retarget_lock_release_recursive>
 800e27e:	bf00      	nop
 800e280:	20005980 	.word	0x20005980

0800e284 <_realloc_r>:
 800e284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	4680      	mov	r8, r0
 800e28a:	4615      	mov	r5, r2
 800e28c:	460c      	mov	r4, r1
 800e28e:	b921      	cbnz	r1, 800e29a <_realloc_r+0x16>
 800e290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	4611      	mov	r1, r2
 800e296:	f7ff bddb 	b.w	800de50 <_malloc_r>
 800e29a:	b92a      	cbnz	r2, 800e2a8 <_realloc_r+0x24>
 800e29c:	f7ff fc14 	bl	800dac8 <_free_r>
 800e2a0:	2400      	movs	r4, #0
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a8:	f000 f844 	bl	800e334 <_malloc_usable_size_r>
 800e2ac:	4285      	cmp	r5, r0
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	d802      	bhi.n	800e2b8 <_realloc_r+0x34>
 800e2b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2b6:	d8f4      	bhi.n	800e2a2 <_realloc_r+0x1e>
 800e2b8:	4629      	mov	r1, r5
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	f7ff fdc8 	bl	800de50 <_malloc_r>
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d0ec      	beq.n	800e2a0 <_realloc_r+0x1c>
 800e2c6:	42b5      	cmp	r5, r6
 800e2c8:	462a      	mov	r2, r5
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	bf28      	it	cs
 800e2ce:	4632      	movcs	r2, r6
 800e2d0:	f7ff fbec 	bl	800daac <memcpy>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	f7ff fbf6 	bl	800dac8 <_free_r>
 800e2dc:	463c      	mov	r4, r7
 800e2de:	e7e0      	b.n	800e2a2 <_realloc_r+0x1e>

0800e2e0 <memmove>:
 800e2e0:	4288      	cmp	r0, r1
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	eb01 0402 	add.w	r4, r1, r2
 800e2e8:	d902      	bls.n	800e2f0 <memmove+0x10>
 800e2ea:	4284      	cmp	r4, r0
 800e2ec:	4623      	mov	r3, r4
 800e2ee:	d807      	bhi.n	800e300 <memmove+0x20>
 800e2f0:	1e43      	subs	r3, r0, #1
 800e2f2:	42a1      	cmp	r1, r4
 800e2f4:	d008      	beq.n	800e308 <memmove+0x28>
 800e2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2fe:	e7f8      	b.n	800e2f2 <memmove+0x12>
 800e300:	4402      	add	r2, r0
 800e302:	4601      	mov	r1, r0
 800e304:	428a      	cmp	r2, r1
 800e306:	d100      	bne.n	800e30a <memmove+0x2a>
 800e308:	bd10      	pop	{r4, pc}
 800e30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e312:	e7f7      	b.n	800e304 <memmove+0x24>

0800e314 <_sbrk_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d06      	ldr	r5, [pc, #24]	@ (800e330 <_sbrk_r+0x1c>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	f7f6 fb78 	bl	8004a14 <_sbrk>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_sbrk_r+0x1a>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_sbrk_r+0x1a>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	2000597c 	.word	0x2000597c

0800e334 <_malloc_usable_size_r>:
 800e334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e338:	1f18      	subs	r0, r3, #4
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	bfbc      	itt	lt
 800e33e:	580b      	ldrlt	r3, [r1, r0]
 800e340:	18c0      	addlt	r0, r0, r3
 800e342:	4770      	bx	lr

0800e344 <_init>:
 800e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e346:	bf00      	nop
 800e348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e34a:	bc08      	pop	{r3}
 800e34c:	469e      	mov	lr, r3
 800e34e:	4770      	bx	lr

0800e350 <_fini>:
 800e350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e352:	bf00      	nop
 800e354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e356:	bc08      	pop	{r3}
 800e358:	469e      	mov	lr, r3
 800e35a:	4770      	bx	lr
